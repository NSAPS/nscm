<?xml version="1.0" encoding="EUC-KR"?>
<queries>

<!--
=====================================================================================================
	수요예측 >> 수요예측 Report 
=====================================================================================================
--> 

	<!--	
	======================================================================
		Pop-up
	======================================================================
	-->
	<query id="fc_common_codePopup_tailer" paging="false">
	#if("$!{popup_type}" == "ITEM1")
		SELECT T.ITEM_CODE, T.ITEM_DESC
          FROM ITEM T, DUAL D
         WHERE EXISTS ( SELECT 1 
                          FROM FCST_RSLT_SUMMARY A, FCST_MAST B
                         WHERE A.FCST_CODE = B.FCST_CODE 
                           AND A.OPTIMAL_FLAG = 'Y'
                           AND A.FCST_CODE = '$!{fcst_code}'
                           AND A.ITEM_CODE = T.ITEM_CODE
                           AND B.ITEM_LV   = T.ITEM_LEVEL
                          [AND A.ITEM_CODE = '${random_code}']
                          [AND T.ITEM_DESC LIKE '${random_name}%'] )
      ORDER BY T.ITEM_CODE
     
     #elseif("$!{popup_type}" == "ITEM2" || "$!{popup_type}" == "ITEM2_SAVE" || "$!{popup_type}" == "ITEM2_SAVE_TARGET")
     	SELECT T.ITEM_CODE
             , T.ITEM_DESC
          FROM ITEM T, DUAL D
         WHERE T.EFF_START_DATE >= DECODE( '$!{realign_type}', 'NEW', TO_CHAR(SYSDATE - 30, 'YYYYMMDD'), T.EFF_START_DATE )
          [AND T.ITEM_CODE = '${random_code}']
          [AND T.ITEM_DESC LIKE '${random_name}%']
     	
     #elseif("$!{popup_type}" == "SITE1")
     	SELECT T.SITE_CODE, T.SITE_DESC
          FROM SITE T, DUAL D
         WHERE EXISTS ( SELECT 1 
                          FROM FCST_RSLT_SUMMARY A, FCST_MAST B
                         WHERE A.FCST_CODE = B.FCST_CODE
                           AND A.OPTIMAL_FLAG = 'Y'
                           AND A.FCST_CODE = '$!{fcst_code}'
                           AND A.SITE_CODE = T.SITE_CODE
                           AND B.SITE_LV   = T.SITE_LEVEL 
                          [AND A.SITE_CODE = '${random_code}']
                          [AND T.SITE_DESC LIKE '${random_name}%'] )
      ORDER BY T.SITE_CODE
     
     #elseif("$!{popup_type}" == "DC1")
     	SELECT T.DC_CODE, T.DC_DESC
          FROM DC T, DUAL D
         WHERE EXISTS ( SELECT 1 
                          FROM FCST_RSLT_SUMMARY A, FCST_MAST B
                         WHERE A.FCST_CODE = B.FCST_CODE 
                           AND A.OPTIMAL_FLAG = 'Y'
                           AND A.FCST_CODE = '$!{fcst_code}'
                           AND A.DC_CODE   = T.DC_CODE
                           AND B.DC_LV     = T.DC_LEVEL 
                          [AND A.DC_CODE = '${random_code}']
                          [AND T.DC_DESC LIKE '${random_name}%'] )
      
      ORDER BY T.DC_CODE
      
     #else
     	SELECT '', ''
     	  FROM DUAL           	
     #end
	</query>
	
	<!--	
	======================================================================
		품목/영업조직 관리
	======================================================================
	--> 
	
	<!-- 품목/영업조직 관리 : header -->
	<!-- 구분 -->
	<query id="fc_01010_hrchy_codes" paging="false">
		SELECT DISTINCT CAT01
          FROM CODE_MST 
         WHERE CD_GRP = 'QUERY_GRP1'
           AND ENABLE_CHK = 'Y'
           AND CAT01 != '물류거점'
	</query>
	
	<!-- 조회 계층 -->
	<query id="fc_01010_select_levels" paging="false">
		SELECT CAT02, CAT05
          FROM CODE_MST
         WHERE CD_GRP = 'QUERY_GRP1'
           AND ENABLE_CHK = 'Y'
           AND CAT01 = '$!{hrchy_code}'
      ORDER BY SORT_SEQ
	</query>
	
	<!-- 품목/조직 명 -->
	<query id="fc_01010_item_sites" paging="false">
		SELECT DISTINCT HID, HID_NAME
          FROM HRCHY 
         WHERE HTYPE = '$!{hrchy_code}'
           AND LVL   = '$!{select_level}'
          [AND HID   = '${item_site_code}']
          [AND HID_NAME LIKE '${item_site_name}%']          
      ORDER BY HID
	</query>
	
	<!-- 품목/영업조직 관리 : tailer -->
	<query id="fc_01010_itemSiteMgmt_tailer" paging="false">
		SELECT T.CUSTOMIZECHECK, T.HID, T.HID_NAME, T.LVL
		     , P1.FCST_CHECK, P2.ITEM_CODE, P2.ITEM_DESC, P1.NOTE
          FROM HRCHY T, ITEM  P1, ITEM  P2
         WHERE T.HTYPE = '$!{hrchy_code}'
           AND T.HID   = P1.ITEM_CODE
           AND T.LVL   = P1.ITEM_LEVEL
           AND T.PARENT_HID = P2.ITEM_CODE
           AND T.PARENT_LVL = P2.ITEM_LEVEL
           AND DECODE( '$!{select_type}', 'U', P1.ITEM_CODE, P2.ITEM_CODE ) = NVL('$!{item_site_code}', DECODE( '$!{select_type}', 'U', P1.ITEM_CODE, P2.ITEM_CODE ) )
           AND DECODE( '$!{select_type}', 'U', P1.ITEM_LEVEL, P2.ITEM_LEVEL ) = '$!{select_level}'
           AND T.CUSTOMIZECHECK = DECODE( '$!{user_opt}', 'Y', 'C', T.CUSTOMIZECHECK )
        --   AND DECODE( '$!{select_type}', 'U', P1.CUSTOMIZECHECK, P2.CUSTOMIZECHECK ) = DECODE( '$!{user_opt}', 'Y', 'C', DECODE( '$!{select_type}', 'U', P1.CUSTOMIZECHECK, P2.CUSTOMIZECHECK ) )           
       
         UNION ALL
       
        SELECT T.CUSTOMIZECHECK, T.HID, T.HID_NAME, T.LVL
             , P1.FCST_CHECK, P2.SITE_CODE, P2.SITE_DESC, P1.NOTE
          FROM HRCHY T, SITE  P1, SITE  P2
         WHERE T.HTYPE = '$!{hrchy_code}'
           AND T.HID   = P1.SITE_CODE
           AND T.LVL   = P1.SITE_LEVEL
           AND T.PARENT_HID = P2.SITE_CODE
           AND T.PARENT_LVL = P2.SITE_LEVEL
           AND DECODE( '$!{select_type}', 'U', P1.SITE_CODE, P2.SITE_CODE ) = NVL('$!{item_site_code}', DECODE( '$!{select_type}', 'U', P1.SITE_CODE, P2.SITE_CODE ) )
           AND DECODE( '$!{select_type}', 'U', P1.SITE_LEVEL, P2.SITE_LEVEL ) = '$!{select_level}'
           AND T.CUSTOMIZECHECK = DECODE( '$!{user_opt}', 'Y', 'C', T.CUSTOMIZECHECK )
         --  AND DECODE( '$!{select_type}', 'U', P1.CUSTOMIZECHECK, P2.CUSTOMIZECHECK ) = DECODE( '$!{user_opt}', 'Y', 'C', DECODE( '$!{select_type}', 'U', P1.CUSTOMIZECHECK, P2.CUSTOMIZECHECK ) )
	</query>
	
	<!-- 신규 Class 추가 -->
	<query id="fc_01010_newClass_code">
	 #if("$!{class_hrchy_code}" == "품종분류")
		SELECT 'CP' || (NVL(SUBSTR(MAX(ITEM_CODE), 3, 5), '10000') + 1) AS CLASS_CODE
		  FROM ITEM 
		 WHERE CUSTOMIZECHECK = 'C'                                    
     #elseif("$!{class_hrchy_code}" == "영업")
     	SELECT 'CS' || (NVL(SUBSTR(MAX(SITE_CODE), 3, 5), '10000') + 1) AS CLASS_CODE
		  FROM SITE 
		 WHERE CUSTOMIZECHECK = 'C'
     #end
	</query>	
	
	<!-- 신규 Class 추가 -->
	<query id="fc_01010_newClass_insert">
	#if("$!{class_hrchy_code}" == "품종분류")
		INSERT INTO ITEM 
		          ( CUSTOMIZECHECK, ITEM_CODE, ITEM_DESC, EFF_START_DATE
		          , CONVERSION_QTY, ITEM_LEVEL, FCST_CHECK, NOTE )
             VALUES 
                  ( 'C'          
                  , '$!{class_code}'
                  , '$!{class_name}'
                  , TO_CHAR(SYSDATE, 'YYYYMMDD')
                  , 1
                  , '40'          
                  , 'Y'
                  , '$!{class_note}' 
                  )
                                    
     #elseif("$!{class_hrchy_code}" == "영업")
     	INSERT INTO SITE 
     	          ( CUSTOMIZECHECK, SITE_CODE, SITE_DESC, EFF_START_DATE
     	          , SITE_LEVEL, FCST_CHECK, NOTE )
             VALUES 
                  ( 'C' 
                  , '$!{class_code}'
                  , '$!{class_name}'
                  , TO_CHAR(SYSDATE, 'YYYYMMDD')
                  , '40' 
                  , 'Y'
                  , '$!{class_note}' 
                  )
     #end
	</query>
	
	<query id="fc_01010_newClass_insert2">
	#if("$!{class_hrchy_code}" == "품종분류")
		INSERT INTO HRCHY 
		          ( ORG_ID, HTYPE, HID, HID_NAME, LVL_TYPE, LVL, SEQ
		          , PARENT_HID, PARENT_LVL, CREATIONDATE, CUSTOMIZECHECK )
		          
        SELECT '1000', '$!{class_hrchy_code}', '$!{class_code}', '$!{class_name}'
             , '대표제품', '40', (SELECT MAX(SEQ)+1 FROM HRCHY WHERE LVL='40')
             , 'CP30', '30', SYSDATE, 'N'
          FROM DUAL
                                    
     #elseif("$!{class_hrchy_code}" == "영업")
     	INSERT INTO HRCHY 
		          ( ORG_ID, HTYPE, HID, HID_NAME, LVL_TYPE, LVL, SEQ
		          , PARENT_HID, PARENT_LVL, CREATIONDATE, CUSTOMIZECHECK )
		          
        SELECT '1000', '$!{class_hrchy_code}', '$!{class_code}', '$!{class_name}'
             , 'SALES OFFICE', '40', (SELECT MAX(SEQ)+1 FROM HRCHY WHERE LVL='40')
             , 'CS30', '30', SYSDATE, 'N'
          FROM DUAL
     #end
	</query>
	
	<!-- 계층조정 :  Class 명 -->
	<query id="fc_01010_class_codes" paging="false">
		SELECT ITEM_CODE AS CLASS_CODE
             , ITEM_DESC AS CLASS_NAME
          FROM ITEM
         WHERE CUSTOMIZECHECK = 'C'
           AND ITEM_LEVEL = '40'
           AND '품종분류' = '$!{hrchy_ctl_code}'
           
         UNION ALL
       
        SELECT SITE_CODE AS CLASS_CODE
             , SITE_DESC AS CLASS_NAME
          FROM SITE 
         WHERE CUSTOMIZECHECK = 'C'
           AND SITE_LEVEL = '40'
           AND '영업' = '$!{hrchy_ctl_code}'
	</query>
	
	<!-- 계층조정 : 품목/조직 Level 50 -->
	<query id="fc_01010_itemSiteLevel_codes" paging="false">
		SELECT ITEM_CODE AS CODE
		     , ITEM_CODE||'-'||ITEM_DESC AS NAME -- DISPLAY
          FROM ITEM
         WHERE ITEM_LEVEL = '50'
           AND FCST_CHECK = 'Y'
           AND '품종분류' = '$!{hrchy_ctl_code}'
           AND NOT EXISTS (SELECT 1
		          			 FROM HRCHY T
				 			WHERE T.HTYPE = '$!{hrchy_ctl_code}'
  					 	   	  AND T.PARENT_HID = '$!{hrchy_class_code}'
							  AND T.HID = ITEM_CODE)
        
         UNION ALL
        
        SELECT SITE_CODE AS CODE
             , SITE_CODE||'-'||SITE_DESC AS NAME -- DISPLAY
          FROM SITE
         WHERE SITE_LEVEL = '50'
           AND FCST_CHECK = 'Y'
           AND '영업' = '$!{hrchy_ctl_code}'
           AND NOT EXISTS (SELECT 1
		          			 FROM HRCHY T
				 			WHERE T.HTYPE = '$!{hrchy_ctl_code}'
  					 	   	  AND T.PARENT_HID = '$!{hrchy_class_code}'
							  AND T.HID = SITE_CODE)
         ORDER BY 1
	</query>
	
	<!-- 계층조정 : 하위 품목/조직 -->
	<query id="fc_01010_itemSiteLowLevel_codes" paging="false">
		SELECT T.HID, T.HID||'-'||T.HID_NAME AS HID_NAME
          FROM HRCHY T
		 WHERE T.HTYPE = '$!{hrchy_ctl_code}'
		   AND T.PARENT_HID = '$!{hrchy_class_code}'
		 ORDER BY T.HID
	</query>
	
	<!-- 계층조정 : 품목/조직 추가1(HRCHY) -->
	<query id="fc_01010_itemSiteLowLevel_insert1">
		INSERT INTO HRCHY 
		          ( HTYPE, HID, HID_NAME, LVL, SEQ, PARENT_HID
		          , PARENT_LVL, CUSTOMIZECHECK )
             SELECT '$!{hrchy_ctl_code}', I.ITEM_CODE, I.ITEM_DESC, I.ITEM_LEVEL
                  , 1, P.ITEM_CODE, P.ITEM_LEVEL, 'C'
               FROM ITEM I
                  , ITEM P
              WHERE I.ORG_ID = P.ORG_ID
                AND I.ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, '') FROM TABLE(SPLIT('$!{added_item_site_key}',',')) )              
                AND P.ITEM_CODE = '$!{hrchy_class_code}'
                AND NOT EXISTS ( SELECT 1 
                                   FROM HRCHY A 
                                  WHERE A.HID = I.ITEM_CODE 
                                    AND A.LVL = I.ITEM_LEVEL
                                    AND A.PARENT_HID = P.ITEM_CODE 
                                    AND A.PARENT_LVL = P.ITEM_LEVEL )
                AND '품종분류' = '$!{hrchy_ctl_code}'
   
              UNION ALL
             
             SELECT '$!{hrchy_ctl_code}', I.SITE_CODE, I.SITE_DESC, I.SITE_LEVEL
                  , 1, P.SITE_CODE, P.SITE_LEVEL, 'C'
               FROM SITE I
                  , SITE P
              WHERE I.ORG_ID = P.ORG_ID
                AND I.SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, '') FROM TABLE(SPLIT('$!{added_item_site_key}',',')) )  
                AND P.SITE_CODE = '$!{hrchy_class_code}'
                AND NOT EXISTS ( SELECT 1 
                                   FROM HRCHY A 
                                  WHERE A.HID = I.SITE_CODE 
                                    AND A.LVL = I.SITE_LEVEL
                                    AND A.PARENT_HID = P.SITE_CODE 
                                    AND A.PARENT_LVL = P.SITE_LEVEL )
                AND '영업' = '$!{hrchy_ctl_code}'
	</query>
	
	<!-- 계층조정 : 품목/조직 추가2(FCST_UNIT) -->
	<query id="fc_01010_itemSiteLowLevel_insert2">
		INSERT INTO FCST_UNIT 
		          ( FCST_UNIT_TYPE, FCST_UNIT_ID, ITEM_CODE, SITE_CODE, DC_CODE
		          , CUST_CODE, ITEM_CLASS1, ITEM_CLASS2, ITEM_CLASS3, ITEM_CLASS4
		          , ITEM_CLASS5, SITE_CLASS1, SITE_CLASS2, SITE_CLASS3 
		          )
             SELECT 'C'
                  , ROWNUM +( SELECT MAX(FCST_UNIT_ID) 
                                FROM FCST_UNIT ) AS FCST_UNIT_ID
                  , T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.CUST_CODE, HR.CLASS1
                  , HR.CLASS2, HR.CLASS3, T.ITEM_CLASS4, T.ITEM_CLASS5
                  , T.SITE_CLASS1, T. SITE_CLASS2, T.SITE_CLASS3
               FROM FCST_UNIT T
			      , ( SELECT T.HID AS CLASS1, T.PARENT_HID AS CLASS2, P1.PARENT_HID AS CLASS3
			            FROM HRCHY T
			               , HRCHY P1
			           WHERE T.HTYPE  = '$!{hrchy_ctl_code}'
			             AND T.HID    = '$!{hrchy_class_code}'
			             AND T.HTYPE  = P1.HTYPE
			             AND T.PARENT_HID = P1.HID  ) HR
              WHERE T.ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, '') FROM TABLE(SPLIT('$!{added_item_site_key}',',')) )   
                AND '품종분류'  = '$!{hrchy_ctl_code}'
                AND NOT EXISTS ( SELECT 1 
                                   FROM FCST_UNIT A 
                                  WHERE A.ITEM_CODE = T.ITEM_CODE 
                                    AND A.SITE_CODE = T.SITE_CODE
                                    AND A.DC_CODE   = T.DC_CODE   
                                    AND A.ITEM_CLASS1 = HR.CLASS1
                                    AND A.ITEM_CLASS2 = HR.CLASS2 
                                    AND A.ITEM_CLASS3 = HR.CLASS3
                                    AND A.SITE_CLASS1 = T.SITE_CLASS1 
                                    AND A.SITE_CLASS2 = T.SITE_CLASS2 )
	          UNION ALL
	          
	         SELECT 'C'
	              , ROWNUM + ( SELECT MAX(FCST_UNIT_ID) 	              	              
	                             FROM FCST_UNIT ) AS FCST_UNIT_ID
	              , T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.CUST_CODE, T.ITEM_CLASS1
	              , T.ITEM_CLASS2, T.ITEM_CLASS3, T.ITEM_CLASS4, T.ITEM_CLASS5
	              , HR.CLASS1, HR.CLASS2, T.SITE_CLASS3
               FROM FCST_UNIT T
                  , ( SELECT T.HID AS CLASS1, T.PARENT_HID AS CLASS2
                        FROM HRCHY T
                       WHERE T.HTYPE = '$!{hrchy_ctl_code}'
                         AND T.HID   = '$!{hrchy_class_code}' ) HR
              WHERE T.SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, '') FROM TABLE(SPLIT('$!{added_item_site_key}',',')) )
                AND '영업'       = '$!{hrchy_ctl_code}'
                AND NOT EXISTS ( SELECT 1 
                                   FROM FCST_UNIT A 
                                  WHERE A.ITEM_CODE = T.ITEM_CODE 
                                    AND A.SITE_CODE = T.SITE_CODE
                                    AND A.DC_CODE   = T.DC_CODE   
                                    AND A.ITEM_CLASS1 = T.ITEM_CLASS1
                                    AND A.ITEM_CLASS2 = T.ITEM_CLASS2 
                                    AND A.ITEM_CLASS3 = T.ITEM_CLASS3
                                    AND A.SITE_CLASS1 = HR.CLASS1 
                                    AND A.SITE_CLASS2 = HR.CLASS2 )

	</query>
	
	<!-- 계층조정 : HRCHY 품목/조직 -->
	<query id="fc_01010_itemSiteLowLevel_delete1">
		DELETE FROM HRCHY T
              WHERE T.HTYPE = '$!{hrchy_ctl_code}'
                AND T.HID  IN ( SELECT NVL(COLUMN_VALUE, '') FROM TABLE(SPLIT('$!{removed_item_site_key}',',')) ) 
                AND T.PARENT_HID = '$!{hrchy_class_code}'
	</query>
	
	<!-- 계층조정 : FCST_UNIT 품목/조직 -->
	<query id="fc_01010_itemSiteLowLevel_delete2">
		DELETE FROM FCST_UNIT T
              WHERE T.FCST_UNIT_TYPE = 'C'
                AND DECODE('$!{hrchy_ctl_code}', '품종분류', T.ITEM_CLASS1, T.SITE_CLASS1 ) = '$!{hrchy_class_code}'
                AND DECODE('$!{hrchy_ctl_code}', '품종분류', T.ITEM_CODE, T.SITE_CODE ) IN ( SELECT NVL(COLUMN_VALUE, '') FROM TABLE(SPLIT('$!{removed_item_site_key}',',')) )
	</query>		
	
	<query id="fc_01010_newClass_delete1">
		DELETE FROM FCST_UNIT
              WHERE FCST_UNIT_TYPE = 'C'
                AND DECODE('$!{hrchy_ctl_code}', '품종분류', ITEM_CLASS1, SITE_CLASS1 ) = '$!{hrchy_class_code}'               
	</query>
	<query id="fc_01010_newClass_delete2">
	    DELETE FROM HRCHY 
              WHERE HTYPE = '$!{hrchy_ctl_code}' 
                AND PARENT_HID = '$!{hrchy_class_code}'               
	</query>
	<query id="fc_01010_newClass_delete3">
	    DELETE FROM HRCHY
              WHERE HTYPE = '$!{hrchy_ctl_code}'
                AND HID = '$!{hrchy_class_code}'
                AND LVL = '40'
	</query>
	<query id="fc_01010_newClass_delete4">
	#if("$!{hrchy_ctl_code}" == "품종분류")
		DELETE FROM ITEM 
              WHERE ITEM_CODE = '$!{hrchy_class_code}'
                AND ITEM_LEVEL = '40'
                                    
     #elseif("$!{hrchy_ctl_code}" == "영업")
     	DELETE FROM SITE 
              WHERE SITE_CODE = '$!{hrchy_class_code}'
                AND SITE_LEVEL = '40'    
     #end
	</query>
	
	
	<!--	
	======================================================================
		신제품/Refresh 이력 관리
	======================================================================
	--> 
	
	<!-- 신제품/Refresh 이력 관리 : header -->
	<query id="fc_01020_realign_types" paging="false">
		SELECT T.CD
             , T.CD_NAME  -- DISPLAY
          FROM CODE_MST T
         WHERE T.CD_GRP = 'REALIGN_TYPE'
           AND T.CAT01 = 'Y'
      ORDER BY T.CD DESC
	</query>
	
	<query id="fc_01020_newRefreshMgmt_tailer" paging="false">
		SELECT C.CD AS 유형코드
		     , C.CD_NAME AS 유형
             , T.ITEM_CODE  AS 품목코드
             , I1.ITEM_DESC AS 품목명
             , T.TARGET_ITEM AS 대상품목코드
             , I2.ITEM_DESC  AS 대상품목명
             , T.REALIGN_RATE AS 실적비율
             , T.START_DATE   AS 실적적용시작일
             , T.END_DATE     AS 실적적용마감일
             , T.CANNIBALIZATION AS 시장잠식비율             
             , T.NOTE AS 비고
             , T.APPLY_CHECK AS 적용여부
          FROM ITEM_REALIGN T
             , CODE_MST     C
             , ITEM         I1
             , ITEM         I2
         WHERE T.REALIGN_TYPE = C.CD
           AND C.CD_GRP = 'REALIGN_TYPE'
           AND T.REALIGN_TYPE = NVL( '$!{realign_type}', T.REALIGN_TYPE )
          [AND T.ITEM_CODE = NVL( '${item_code}', T.ITEM_CODE )]
           AND T.ITEM_CODE = I1.ITEM_CODE
           AND T.TARGET_ITEM = I2.ITEM_CODE(+)
      ORDER BY 1, 3, 5, 8, 9	
	</query>
	
	<query id="fc_01020_newRefreshMgmt_detailer" paging="false">
		SELECT X.TARGET_ITEM, A.ITEM_DESC, X.ITEM_CODE, B.ITEM_DESC
		     , TO_CHAR(X.CREATION_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATION_DATE
          FROM ( SELECT T.TARGET_ITEM, T.ITEM_CODE, T.CREATION_DATE, ( LEVEL -1 ) * -1 AS LV
                   FROM ITEM_REALIGN T
                  WHERE T.REALIGN_TYPE = 'REF'
             START WITH T.ITEM_CODE = '$!{selected_item_cd}'
             CONNECT BY T.ITEM_CODE = PRIOR T.TARGET_ITEM
                  UNION 
                 SELECT T.TARGET_ITEM, T.ITEM_CODE, T.CREATION_DATE,  LEVEL -1
                   FROM ITEM_REALIGN T
                  WHERE T.REALIGN_TYPE = 'REF'
             START WITH T.ITEM_CODE = '$!{selected_item_cd}'
             CONNECT BY PRIOR T.ITEM_CODE = T.TARGET_ITEM ) X
             , ITEM  A
             , ITEM  B
         WHERE X.TARGET_ITEM = A.ITEM_CODE
           AND X.ITEM_CODE   = B.ITEM_CODE
      ORDER BY X.LV
	</query>
	
	<query id="fc_01020_newRefreshMgmt_is_it">
		SELECT DECODE(COUNT(*), 0, 'N', 'Y') AS ISIT
		  FROM ITEM_REALIGN 
		 WHERE ORG_ID = '1000' 
		   AND REALIGN_TYPE = '$!{save_realign_type}' 
		   AND ITEM_CODE = '$!{save_item_code}' 
		   AND TARGET_ITEM = '$!{save_target_item_code}'
	</query>
	
	<query id="fc_01020_newRefreshMgmt_is_it2">
		SELECT DECODE(COUNT(*), 0, 'N', 'Y') AS ISIT
		  FROM ITEM_REALIGN 
		 WHERE ORG_ID = '1000' 
		   AND REALIGN_TYPE = '$!{save_realign_type}' 
		   AND ITEM_CODE = '$!{save_item_code}' 
		   AND TARGET_ITEM = '$!{save_target_item_code}'
		   AND START_DATE = '$!{save_start}' 
		   AND END_DATE = '$!{save_end}'
	</query>
	
	<query id="fc_01020_newRefreshMgmt_save">
	#if("$!{save_type}" == "INSERT")
		INSERT INTO ITEM_REALIGN
		          ( REALIGN_TYPE, ITEM_CODE, TARGET_ITEM, REALIGN_RATE
                  , CANNIBALIZATION, START_DATE, END_DATE, APPLY_CHECK, NOTE
                  , LAST_UPDATED_BY, CREATED_BY 
                  )
             VALUES 
                  ( '$!{save_realign_type}'     -- 유형코드입력값
                  , '$!{save_item_code}'        -- 품목 CODE 입력값
                  , '$!{save_target_item_code}' -- 대상 품목 CODE 입력값
                  , '$!{save_realign_rate}'     -- 실적비율 입력값
                  , '$!{save_cannibalization}'  -- 시장잠식비율 입력값
                  , '$!{save_start}'            -- 실적적용시작일 입력값
                  , '$!{save_end}'              -- 실적적용마감일 입력값
                  , 'N'                         -- N 입력
                  , '$!{save_etc}'              -- 비고 입력값
                  , '$!{_user_id}'              -- USER ID 입력값
                  , '$!{_user_id}'              -- USER ID 입력값
                  )
                  
     #elseif("$!{save_type}" == "UPDATE")
     	UPDATE ITEM_REALIGN  
           SET REALIGN_RATE = '$!{save_realign_rate}'            
             , CANNIBALIZATION = '${save_cannibalization}'
             , START_DATE = '$!{save_start}'
             , END_DATE = '$!{save_end}'
             , APPLY_CHECK = 'N'
             , NOTE = '$!{save_etc}'
             , LAST_UPDATED_BY = '$!{_user_id}'
         WHERE ORG_ID = '1000'
           AND REALIGN_TYPE = '$!{hidden_save_realign_type}'
           AND ITEM_CODE = '$!{save_item_code}'
           AND TARGET_ITEM = '$!{save_target_item_code}'          
     #end
	</query>
	
	<query id="fc_01020_newRefreshMgmt_delete">
		DELETE FROM ITEM_REALIGN
		      WHERE ORG_ID = '1000'
                AND REALIGN_TYPE = '$!{hidden_save_realign_type}'
                AND ITEM_CODE = '$!{save_item_code}'
                AND TARGET_ITEM = '$!{save_target_item_code}'   
	</query>
	
	<query id="fc_01020_newRefreshMgmt_qty_update">
		UPDATE SALES_HIST T
           SET T.ADJUSTED_SALES_QTY = T.SALES_QTY
             , T.ADJUSTED_EVENT_QTY = T.EVENT_QTY
         WHERE T.ITEM_CODE = '$!{save_item_code}'
           AND T.SALES_MONTH BETWEEN '$!{save_start}' AND '$!{save_end}'  
           AND 'Y' = '$!{save_apply}'
	</query>
	
	<query id="fc_01020_newRefreshMgmt_apply">
		CALL SP_FC_APPLY_REALIGN()
	</query>
		
	<!--
	======================================================================
		영업달력(일별지수) 관리
	======================================================================
	--> 
	
	<!-- 영업달력(일별지수) 관리 : header -->
	<query id="fc_01030_calendarMgmt_yyyymm" paging="false">
		SELECT DISTINCT T.YYYYMM
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -36), 'YYYYMMDD') 
           AND TO_CHAR(ADD_MONTHS(SYSDATE, 24), 'YYYYMMDD')
      ORDER BY 1		
	</query>
	
	<!-- 영업달력(일별지수) 관리 : tailer -->
	<query id="fc_01030_calendarMgmt_tailer" paging="false">
		SELECT A.EFF_DATE   -- 년월일
		     , SUBSTR(A.EFF_DATE, 7,2) AS S_DAY     
             , A.HOLIDAY_CHECK  -- 휴일여부
             , A.DAY_FACTOR  -- 일별 지수
	         , A.D_DAY      --  요일
          FROM PLAN_CALENDAR A, DUAL B
         WHERE A.THIS_MONDAY IN ( SELECT T.THIS_MONDAY
                                    FROM PLAN_CALENDAR T
                                   WHERE T.YYYYMM = '$!{std_yyyymm}') -- 조회조건에서 선택한 월
      ORDER BY A.EFF_DATE, A.D_DAY                         		
	</query>
	
	<!-- 영업달력(일별지수) 관리 : 휴일/평일 수정 -->
	<query id="fc_01030_calendarMgmt_factor_update">
		UPDATE PLAN_CALENDAR  T
           SET T.DAY_FACTOR = $!{factor}            --평일(1)/휴일(0)
            [, T.HOLIDAY_CHECK = '${is_holiday}']   --평일(N)/휴일(Y)
         WHERE T.EFF_DATE = '$!{selected_date}'     --선택된 일자
	</query>
	
	<!-- 영업달력(일별지수) 관리 : PLAN_CALENDAR 생성 -->
	<query id="fc_01030_calendarMgmt_create">
		CALL SP_FC_CREATION_PLAN_CALENDAR('$!{sdate}', '$!{edate}')
	</query>
	
	<!--	
	======================================================================
		요일지수 관리
	======================================================================
	--> 
	
	<!-- 요일지수 관리 : header -->
	<!-- 품목 : Combo box -->
	<query id="fc_01040_items">
		SELECT IT.ITEM_CODE||'-'||IT.ITEM_DESC AS CODE, IT.ITEM_CODE||' - '||IT.ITEM_DESC AS NAME
          FROM ITEM IT, DUAL D
         WHERE IT.ITEM_LEVEL = '50'
          [AND IT.ITEM_CODE = '${ajax_code}']
          [AND IT.ITEM_DESC LIKE '${ajax_name}%']
           AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= NVL(IT.EFF_END_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD') ) 
      ORDER BY IT.ITEM_CODE 	
	</query>
	
	<query id="fc_01040_sites">
		SELECT ST.SITE_CODE||'-'||ST.SITE_DESC AS CODE, ST.SITE_CODE||' - '||ST.SITE_DESC AS NAME
          FROM SITE ST, DUAL D
         WHERE ST.SITE_LEVEL = '50'
          [AND ST.SITE_CODE = '${ajax_code}']
          [AND ST.SITE_DESC LIKE '${ajax_name}%']
           AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= NVL(ST.EFF_END_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD') ) 
      ORDER BY ST.SITE_CODE 	
	</query>
	
	<query id="fc_01040_dc">
		SELECT DD.DC_CODE||'-'||DD.DC_DESC AS CODE, DD.DC_CODE||' - '||DD.DC_DESC AS NAME
          FROM DC DD, DUAL D
         WHERE DD.DC_LEVEL = '30'
          [AND DD.DC_CODE = '${ajax_code}']
          [AND DD.DC_DESC LIKE '${ajax_name}%']
           AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= NVL(DD.EFF_END_DATE, TO_CHAR(SYSDATE, 'YYYYMMDD') ) 
      ORDER BY DD.DC_CODE 	
	</query>
	
	<query id="fc_01040_start_month">
		SELECT DISTINCT T.YYYYMM AS START_MONTH
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN TO_CHAR( ADD_MONTHS(SYSDATE, -24), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
      ORDER BY 1 	
	</query>
	
	<query id="fc_01040_end_month">
		SELECT DISTINCT T.YYYYMM AS END_MONTH
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN '$!{start_month}' AND TO_CHAR(SYSDATE, 'YYYYMMDD')
      ORDER BY 1 	
	</query>
	
	<!-- 요일지수 관리 : tailer -->
	<!-- 요일지수 관리 : tailer list-->
	<query id="fc_01040_dow_tailer">
		SELECT T.ITEM_CODE, A.ITEM_DESC, T.SITE_CODE, B.SITE_DESC
		     , T.DC_CODE, C.DC_DESC, T.GEN_DATE
		     , ROUND(T.MAX_VAR, 3), ROUND(T.DAY_1ST, 3), ROUND(T.DAY_2ND, 3)
		     , ROUND(T.DAY_3RD, 3), ROUND(T.DAY_4TH, 3), ROUND(T.DAY_5TH, 3)
		     , ROUND(T.DAY_6TH, 3), ROUND(T.DAY_7TH, 3)
		     , ROUND(T.DAY_1ST+T.DAY_2ND+T.DAY_3RD+T.DAY_4TH+T.DAY_5TH+T.DAY_6TH+T.DAY_7TH, 3) AS TOTAL 
		     , T.EXP_NOTE
          FROM DAY_OF_WEEK T
             , ITEM A
             , SITE B
             , DC   C
         WHERE T.ITEM_CODE = A.ITEM_CODE
           AND T.ITEM_CODE = '$!{item_cd}'
           AND T.SITE_CODE = B.SITE_CODE
          [AND T.SITE_CODE = '${site_cd}']
           AND T.DC_CODE   = C.DC_CODE
          [AND T.DC_CODE   = '${dc_cd}']
      ORDER BY T.ITEM_CODE, T.SITE_CODE,  T.DC_CODE	
	</query>
	
	<!-- 요일지수 관리 : 저장 -->
	<query id="fc_01040_dow_tailer_update" iterator="row_item_cd row_site_cd row_dc_cd row_gen_date day1 day2 day3 day4 day5 day6 day7 etc">
		UPDATE DAY_OF_WEEK
		   SET DAY_1ST = ${day1}
		     , DAY_2ND = ${day2}
		     , DAY_3RD = ${day3}
		     , DAY_4TH = ${day4}
		     , DAY_5TH = ${day5}
		     , DAY_6TH = ${day6}
		     , DAY_7TH = ${day7}
		     , EXP_NOTE = '$!{etc}'
		 WHERE ORG_ID = 1000
		   AND ITEM_CODE = '$!{row_item_cd}' -- 해당 품목
		   AND SITE_CODE = '$!{row_site_cd}' -- 해당 SITE
		   AND DC_CODE   = '$!{row_dc_cd}'  -- 해당 DC
		   AND GEN_DATE = '$!{row_gen_date}' -- 해당 월	
	</query>
	
	<!-- 요일지수 관리 : 재생성 
	<query id="fc_01040_dow_recreation">
		CALL SP_FC_CREATE_DOW( '$!{start_month}' 
                             , '$!{end_month}'   
                             , '$!{max_rate}'    
                             , '$!{_user_id}'   
                             , '$!{item_cd}'    
                             , '$!{site_cd}'    
                             , '$!{dc_cd}'      
                             )
	</query>-->
	
	<query id="fc_01040_dow_recreation">
		CALL SP_FC_CREATE_DOW( '$!{start_month}' 
                             , '$!{end_month}'   
                             , '$!{max_rate}'    
                             , '$!{_user_id}'   
                             , ''    
                             , ''    
                             , ''      
                             )
	</query>
	
	<!--	
	======================================================================
		수요예측 Option 관리
	======================================================================
	--> 
	
	<!-- 수요예측 Option 관리 : header -->
	<!-- 수요예측 Option : Combo box -->
	<query id="fc_01050_options">
		SELECT DISTINCT CD_GRP, DESCR
          FROM CODE_MST
	</query>
	
	<!-- 수요예측 Option 관리 : tailer -->
	<query id="fc_01050_optionMgmt_tailer">
		SELECT T.CD_GRP, T.DESCR, T.CD, T.CD_NAME, T.ENABLE_CHK
		     , T.CAT01, T.CAT02, T.CAT03, T.CAT04, T.CAT05, T.CAT06, T.CAT07
		     , T.CAT08, T.CAT09, T.CAT10, T.CAT11, T.CAT12, T.CAT13, T.CAT14
		     , T.CAT15
          FROM CODE_MST T, DUAL A
        [WHERE T.CD_GRP = '${fcst_option}']
      ORDER BY T.CD_GRP, T.SORT_SEQ
	</query>
	
	<query id="fc_01050_optionMgmt_tailer_update" iterator="row_opt_cd row_cd usable_chk std1 std2 std3 std4 std5 std6 std7 std8 std9 std10 std11 std12 std13 std14 std15">
		UPDATE CODE_MST
		   SET ENABLE_CHK = '$!{usable_chk}'
		     , CAT01 = '$!{std1}'
		     , CAT02 = '$!{std2}'
		     , CAT03 = '$!{std3}'
		     , CAT04 = '$!{std4}'
		     , CAT05 = '$!{std5}'
		     , CAT06 = '$!{std6}'
		     , CAT07 = '$!{std7}'
		     , CAT08 = '$!{std8}'
		     , CAT09 = '$!{std9}'
		     , CAT10 = '$!{std10}'
		     , CAT11 = '$!{std11}'
		     , CAT12 = '$!{std12}'
		     , CAT13 = '$!{std13}'
		     , CAT14 = '$!{std14}'
		     , CAT15 = '$!{std15}'
		 WHERE CD_GRP = '$!{row_opt_cd}'
		   AND CD = '$!{row_cd}'		 
	</query>
	
	<!--	
	======================================================================
		수요예측 방법 분석
	======================================================================
	--> 
	
	<!-- 수요예측 방법 분석 : tailer --> 
	<query id="fc_04010_methodAnalysis_tailer" paging="false">
		SELECT T.ITEM_CODE, B.ITEM_DESC, T.SITE_CODE, C.SITE_DESC, T.DC_CODE
		     , D.DC_DESC, F.FCST_NAME, T.OPTIMAL_FLAG, ROUND(T.ERR_MSE,2) AS MSE
		     , ROUND(T.ERR_MAPE,2) AS MAPE, ROUND(T.ERR_MAD,2) AS MAD
		     , ROUND(T.ERR_TS,2) AS TS, T.ERROR_MESSAGE
          FROM FCST_RSLT_SUMMARY T  
             , FCST_MAST A
             , ITEM B, SITE C, DC D
             , ( SELECT DISTINCT T.FCST_METHOD_CODE, T.FCST_NAME
                   FROM FORECASTING_PARAMETERS T
                  WHERE T.ACTIVE_CHECK = 'Y'
                    AND T.FCST_METHOD_CODE IN ( SELECT NVL(COLUMN_VALUE, T.FCST_METHOD_CODE) 
                                                  FROM TABLE(SPLIT( '$!{methods}', ',')) ) ) F 
        WHERE T.FCST_CODE = '$!{fcst_code}'
          AND T.ITEM_CODE = '$!{item_code}'
          AND T.SITE_CODE = '$!{site_code}'
          AND T.DC_CODE   = '$!{dc_code}'
          AND T.FCST_CODE = A.FCST_CODE
          AND T.ITEM_CODE = B.ITEM_CODE
          AND A.ITEM_LV   = B.ITEM_LEVEL
          AND T.SITE_CODE = C.SITE_CODE
          AND A.SITE_LV   = C.SITE_LEVEL
          AND T.DC_CODE   = D.DC_CODE
          AND A.DC_LV     = D.DC_LEVEL
          AND T.FCST_METHOD = F.FCST_METHOD_CODE
     ORDER BY F.FCST_NAME	
	</query>
	<query id="fc_04010_methodAnalysis_tailer_chart" paging="false">
		SELECT F.METHOD_SEQ, F.FCST_NAME, F.FCST_DATE, NVL(T.FCST_QTY, 0)
		#if("$!{oper_type}" == "MONTH")
          FROM FCST_OUTPUT_MONTHLY T
        #elseif("$!{oper_type}" == "MANALY")
          FROM FCST_OUTPUT_MANALY T
        #elseif("$!{oper_type}" == "WEEK")
          FROM FCST_OUTPUT_WEEKLY T
        #else
          FROM FCST_OUTPUT_WANALY T
        #end
             , ( SELECT DISTINCT T.METHOD_SEQ, T.FCST_METHOD_CODE, T.FCST_NAME, DECODE(A.FCST_BUCKET,'MONTH', P.YYYYMM||'01', P.THIS_MONDAY ) FCST_DATE
                   FROM FORECASTING_PARAMETERS T
                      , PLAN_CALENDAR P
                      , FCST_MAST A
                  WHERE T.ACTIVE_CHECK = 'Y'
                    AND T.FCST_METHOD_CODE IN (  SELECT NVL(COLUMN_VALUE, T.FCST_METHOD_CODE) FROM TABLE(SPLIT( '$!{methods}', ',')) )
                    AND A.FCST_CODE = '$!{fcst_code}'
                    AND DECODE(A.FCST_BUCKET,'MONTH', P.YYYYMM||'01', P.THIS_MONDAY ) BETWEEN A.HIST_START AND A.HIST_END ) F
         WHERE T.FCST_CODE(+) = '$!{fcst_code}'
           AND T.ITEM_CODE(+) = '$!{item_code}' -- 901000106
           AND T.SITE_CODE(+) = '$!{site_code}' -- 014
           AND T.DC_CODE(+)   = '$!{dc_code}'   -- 8140
           AND T.FCST_METHOD(+) = F.FCST_METHOD_CODE
           AND T.FCST_DATE(+) = F.FCST_DATE
         
         UNION ALL
         
        SELECT '00', 'SALES HISTORY', F.EFF_DATE, NVL(X.S_QTY,0)
          FROM ( SELECT DECODE(A.FCST_BUCKET, 'MONTH', S.SALES_MONTH, S.SALES_WEEK ) AS EFF_DATE, SUM(S.ADJUSTED_SALES_QTY*I.CONVERSION_QTY) AS S_QTY
                   FROM SALES_HIST S
                      , FCST_UNIT  U
                      , FCST_MAST  A
                      , ITEM       I
                  WHERE S.ITEM_CODE = I.ITEM_CODE
                    AND S.ORG_ID = A.ORG_ID
                    AND S.ITEM_CODE = U.ITEM_CODE
                    AND S.SITE_CODE = U.SITE_CODE
                    AND S.DC_CODE   = U.DC_CODE
                    AND DECODE( A.ITEM_LV, '50', U.ITEM_CODE, '40', U.ITEM_CLASS1, '30', U.ITEM_CLASS2, '20', U.ITEM_CLASS3, '000' ) = '$!{item_code}'
                    AND DECODE( A.SITE_LV, '50', U.SITE_CODE, '40', U.SITE_CLASS1, '30', U.SITE_CLASS2, '20', U.SITE_CLASS3, '0' ) = '$!{site_code}'
                    AND DECODE( A.DC_LV, '30', U.DC_CODE, '00000' ) = '$!{dc_code}'
                    AND A.FCST_CODE = '$!{fcst_code}' 
               GROUP BY DECODE(A.FCST_BUCKET, 'MONTH', S.SALES_MONTH, S.SALES_WEEK ) ) X
             , ( SELECT DISTINCT DECODE(A.FCST_BUCKET,'MONTH', P.YYYYMM||'01', P.THIS_MONDAY ) EFF_DATE
                   FROM PLAN_CALENDAR  P
                      , FCST_MAST A
                  WHERE A.FCST_CODE = '$!{fcst_code}'
                    AND DECODE(A.FCST_BUCKET,'MONTH', P.YYYYMM||'01', P.THIS_MONDAY ) BETWEEN A.HIST_START AND A.HIST_END ) F
         WHERE F.EFF_DATE = X.EFF_DATE(+)
      ORDER BY METHOD_SEQ, FCST_DATE		
	</query>
	
	<!--	
	======================================================================
		수요예측 상세 조회
	======================================================================
	--> 
	
	<!-- 수요예측 상세 조회 : header --> 
	<!-- 계획유형 -->
	<query id="fc_04020_oper_types" paging="false">
		SELECT CD, CD_NAME
		  FROM CODE_MST T  
		 WHERE T.CD_GRP = 'OPER_TYPE'
		   AND T.ENABLE_CHK = 'Y' 
		   AND T.CAT08 = 'Y'  
      ORDER BY T.CAT01 DESC
	</query>
	
	<!-- 계획 생성년월 -->
	<query id="fc_04020_fcst_yyyymm" paging="false">
		SELECT TO_CHAR(GEN_DATE, 'YYYYMM') AS YYYYMM
          FROM FCST_MAST T   
         WHERE T.OPER_TYPE = '$!{oper_type}'      
      GROUP BY TO_CHAR(GEN_DATE, 'YYYYMM')
      ORDER BY TO_CHAR(GEN_DATE, 'YYYYMM') DESC
	</query>
	<!-- 계획 생성일시 -->
	<query id="fc_04020_fcst_yyyymmdd" paging="false">
		SELECT TO_CHAR(T.GEN_DATE, 'YYYYMMDD') AS YYYYMMDD, TO_CHAR(T.GEN_DATE, 'DD') AS DD
          FROM FCST_MAST T   
         WHERE T.OPER_TYPE = '$!{oper_type}'
           AND TO_CHAR(GEN_DATE, 'YYYYMM') = '$!{fcst_yyyymm}'      
      GROUP BY TO_CHAR(T.GEN_DATE, 'YYYYMMDD'), TO_CHAR(T.GEN_DATE, 'DD')
      ORDER BY TO_CHAR(T.GEN_DATE, 'DD') DESC
	</query>
	
	<!-- 계획명 -->
	<query id="fc_04020_fcst_names" paging="false">
		SELECT T.FCST_CODE, T.FCST_DESC
          FROM FCST_MAST T   
         WHERE T.OPER_TYPE = '$!{oper_type}'
           AND TO_CHAR(GEN_DATE, 'YYYYMMDD') = '$!{fcst_yyyymmdd}'
      ORDER BY GEN_DATE DESC
	</query>
	
	<!-- 기간유형 -->
	<query id="fc_04020_period_types" paging="false">
		SELECT T.CD, T.CD_NAME
          FROM CODE_MST T
         WHERE T.CD_GRP = 'TIME_SCALE'
           AND T.ENABLE_CHK = 'Y'
           AND ( ( SUBSTR('$!{oper_type}',1,1) = 'M' AND T.CD != 'DAY' )
              OR ( SUBSTR('$!{oper_type}',1,1) != 'M' ) )
      ORDER BY T.SORT_SEQ
	</query>
	
	<!-- 시작일 -->
	<query id="fc_04020_start" paging="false">
		SELECT ${db_column}  
	      FROM ${db_table}
	     WHERE FCST_CODE = '$!{fcst_code}'
	  GROUP BY ${db_column} 
	  ORDER BY ${db_column}
    </query>
    
    <!-- 완료일 -->
	<query id="fc_04020_end" paging="false">
	#if("$!{db_column}" == "FCST_MONTH")	    
		SELECT TO_CHAR(LAST_DAY(TO_DATE(${db_column},'YYYYMMDD')),'YYYYMMDD') AS ${db_column}  
	#else
		SELECT TO_CHAR(TO_DATE(${db_column},'YYYYMMDD') + 6,'YYYYMMDD') AS ${db_column}  
	#end
	      FROM ${db_table}
	     WHERE FCST_CODE = '$!{fcst_code}'
	       AND ${db_column} >= '$!{start}'
	  GROUP BY ${db_column} 
	  ORDER BY ${db_column}
    </query>
    
	<query id="fc_04020_detailFcst_tailer_cols" paging="false">
	#if("$!{condition_type1}" != "")
        SELECT 1 AS SEQ, CAT05 AS TITLE FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type1}' AND T.CAT02 = '$!{condition_level1}' UNION ALL
    #else
    	SELECT 1 AS SEQ, '미지정' AS TITLE FROM DUAL UNION ALL
    #end
    
    #if("$!{condition_type2}" != "")
        SELECT 3 AS SEQ, CAT05 AS TITLE FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type2}' AND T.CAT02 = '$!{condition_level2}' UNION ALL
    #else
    	SELECT 3 AS SEQ, '미지정' AS TITLE FROM DUAL UNION ALL
    #end
    
    #if("$!{condition_type3}" != "")
        SELECT 5 AS SEQ, CAT05 AS TITLE FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type3}' AND T.CAT02 = '$!{condition_level3}' UNION ALL
    #else
    	SELECT 5 AS SEQ, '미지정' AS TITLE FROM DUAL UNION ALL
    #end        
        SELECT 7, '구분' FROM DUAL UNION ALL
        SELECT 7 + ROWNUM, P.COL_NAME
          FROM (
                #if("$!{period_type}" == "MONTH")
				   SELECT T.YYYYMM COL_NAME
                     FROM PLAN_CALENDAR T     
                    WHERE DECODE( SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01', T.THIS_MONDAY ) BETWEEN '$!{start}' AND '$!{end}'
                 GROUP BY T.YYYYMM
                 ORDER BY 1
                 
                #elseif("$!{period_type}" == "DAY")
                	SELECT T.EFF_DATE COL_NAME
                     FROM PLAN_CALENDAR T     
                    WHERE T.THIS_MONDAY BETWEEN '$!{start}' AND '$!{end}'
                 GROUP BY T.EFF_DATE
                 ORDER BY 1
                 
				#else   -- WEEK:주간
				   SELECT T.THIS_MONDAY COL_NAME
                     FROM PLAN_CALENDAR T     
                    WHERE DECODE( SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01', T.THIS_MONDAY ) BETWEEN '$!{start}' AND '$!{end}'
                 GROUP BY T.THIS_MONDAY
                 ORDER BY 1
				#end
                ) P
      ORDER BY 1
	</query>
	<query id="fc_04020_detailFcst_tailer" paging="false">	
	#if("$!{oper_type}" == "WCONF" || "$!{oper_type}" == "WSAVE")
		#if("$!{period_type}" == "MONTH")    -- 확정 주간 수요예측이면서 월간 SUM 된  데이터 확인 시
			SELECT NVL(Z.ATT01,'미지정'), NVL(A.ATT01_DESC,'미지정'), Z.ATT02, NVL(B.ATT02_DESC,'미지정'), Z.ATT03, NVL(C.ATT03_DESC,'미지정'), SUBSTR(Z.EFF_DATE,1,6), SUM(Z.SALES_QTY), SUM(Z.FCST_QTY), Z.UPDATE_CHK
		#else
			SELECT NVL(Z.ATT01,'미지정'), NVL(A.ATT01_DESC,'미지정'), Z.ATT02, NVL(B.ATT02_DESC,'미지정'), Z.ATT03, NVL(C.ATT03_DESC,'미지정'), Z.EFF_DATE, Z.SALES_QTY, Z.FCST_QTY, Z.UPDATE_CHK
		#end
	#else
	    SELECT NVL(Z.ATT01,'미지정'), NVL(A.ATT01_DESC,'미지정'), Z.ATT02, NVL(B.ATT02_DESC,'미지정'), Z.ATT03, NVL(C.ATT03_DESC,'미지정'), Z.EFF_DATE, Z.SALES_QTY, Z.FCST_QTY, Z.UPDATE_CHK
	#end
       
		  FROM ( SELECT X.ORG_ID
		              , DECODE( '$!{condition_type1}', '품종분류', DECODE( '$!{condition_level1}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                    , '영업', DECODE( '$!{condition_level1}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                    , '물류거점', DECODE( '$!{condition_level1}', '30', X.DC_CODE, '00000' )) AS ATT01
		              , DECODE( '$!{condition_type2}', '품종분류', DECODE( '$!{condition_level2}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                     , '영업', DECODE( '$!{condition_level2}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level2}', '30', X.DC_CODE, '00000' ), 'ALL' ) AS ATT02
		              , DECODE( '$!{condition_type3}', '품종분류', DECODE( '$!{condition_level3}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                     , '영업', DECODE( '$!{condition_level3}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level3}', '30', X.DC_CODE, '00000' ), 'ALL' ) AS ATT03                
		              , X.EFF_DATE, X.UPDATE_CHK
		              , ROUND(SUM(NVL(S.SALES_QTY * DECODE('$!{s_unit}', 'BOX', 1, X.CONVERSION_QTY ),0)), 2 ) AS SALES_QTY
		              , ROUND(SUM(NVL(F.ADJUSTED_FCST_QTY / DECODE('$!{s_unit}', 'BOX', X.CONVERSION_QTY, 1 ),0)), 2 )  AS FCST_QTY
		           FROM ( SELECT T.ORG_ID, P.FCST_CODE, T.ITEM_CODE, SITE_CODE, DC_CODE, T.ITEM_CLASS1, T.ITEM_CLASS2, T.ITEM_CLASS3, T.SITE_CLASS1, T.SITE_CLASS2, P.EFF_DATE, P.UPDATE_CHK, I.CONVERSION_QTY
		                    FROM ( SELECT DISTINCT ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE
		                                , ITEM_CLASS1, ITEM_CLASS2, ITEM_CLASS3, SITE_CLASS1, SITE_CLASS2
		                             FROM FCST_UNIT
		                            WHERE FCST_UNIT_TYPE = DECODE('$!{is_analyze_data}', 'Y', FCST_UNIT_TYPE, 'N' )
		                            
		                            #if("$!{prod_4}" != ",")
                                     [AND ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, ITEM_CODE) FROM TABLE( SPLIT( '${prod_4}', ',')) )]
                                    #end 
                                    #if("$!{sales_3}" != ",")
		                             [AND SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, SITE_CODE) FROM TABLE( SPLIT( '${sales_3}', ',')) )]
		                            #end 
                                   
		                             [AND DC_CODE   IN ( SELECT NVL(COLUMN_VALUE, DC_CODE) FROM TABLE( SPLIT( '${delivery_1}', ',')) )] 
		                            
                                    #if("$!{prod_3}" != ",")
		                             [AND ITEM_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS1) FROM TABLE( SPLIT( '${prod_3}', ',')) )]
		                            #end 
                                    #if("$!{prod_2}" != ",")
		                             [AND ITEM_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS2) FROM TABLE( SPLIT( '${prod_2}', ',')) )] 
		                            #end 
                                    #if("$!{prod_1}" != ",")
		                             [AND ITEM_CLASS3 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS3) FROM TABLE( SPLIT( '${prod_1}', ',')) )]
		                            #end 
                                    #if("$!{sales_2}" != ",")
		                             [AND SITE_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, SITE_CLASS1) FROM TABLE( SPLIT( '${sales_2}', ',')) )]
		                            #end 
                                    #if("$!{sales_1}" != ",") 
		                             [AND SITE_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, SITE_CLASS2) FROM TABLE( SPLIT( '${sales_1}', ',')) )]
		                            #end		                            
		                            ) T     
		                       , ITEM I		                       
		          
		           #if("$!{period_type}" == "DAY")         
		              , ( SELECT P.ORG_ID, F.FCST_CODE, P.EFF_DATE
		                       , DECODE(GREATEST( DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ), F.HIST_END ), F.HIST_END, 'N', 'Y' ) AS UPDATE_CHK
		                    FROM PLAN_CALENDAR P, FCST_MAST F
		                   WHERE P.THIS_MONDAY BETWEEN '$!{start}' AND '$!{end}'
		                     AND P.ORG_ID = F.ORG_ID AND F.FCST_CODE = '$!{fcst_code}' ) P
		                     
		           #elseif("$!{period_type}" == "WEEK")
		              , ( SELECT DISTINCT P.ORG_ID, F.FCST_CODE, P.THIS_MONDAY AS EFF_DATE
		                       , DECODE(GREATEST( DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ), F.HIST_END ), F.HIST_END, 'N', 'Y' ) AS UPDATE_CHK
		                    FROM PLAN_CALENDAR P, FCST_MAST F
		                   WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) BETWEEN '$!{start}' AND '$!{end}'
		                     AND P.ORG_ID = F.ORG_ID AND F.FCST_CODE = '$!{fcst_code}' ) P
		                     		                     
		           #else
		              , ( SELECT DISTINCT P.ORG_ID, F.FCST_CODE, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) AS EFF_DATE
		                       , DECODE(GREATEST( DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ), F.HIST_END ), F.HIST_END, 'N', 'Y' ) AS UPDATE_CHK
		                    FROM PLAN_CALENDAR P, FCST_MAST F
		                   WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) BETWEEN '$!{start}' AND '$!{end}'
		                     AND P.ORG_ID = F.ORG_ID AND F.FCST_CODE = '$!{fcst_code}' ) P
		           #end	                   
		                     
		          WHERE T.ORG_ID = I.ORG_ID AND T.ITEM_CODE = I.ITEM_CODE AND T.ORG_ID = P.ORG_ID   ) X		          
		     , ( SELECT ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) AS SALES_DATE 
		              , SUM(DECODE('$!{sales_type}', 'ORIGIN', SALES_QTY, 'ADJ', ADJUSTED_SALES_QTY )) SALES_QTY
		           FROM SALES_HIST
		          WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) BETWEEN '$!{start}' AND '$!{end}'
		       GROUP BY ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK )) S
		     
		     #if("$!{oper_type}" == "MCONF")
		     	#if("$!{period_type}" == "WEEK")		     
				     , ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_WEEK AS FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_PLAN_MONTHLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_MONTH BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				#else
					, ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_MONTH AS FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_PLAN_MONTHLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_MONTH BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				#end
		            
		     #elseif("$!{oper_type}" == "WCONF")	     
		         #if("$!{period_type}" == "DAY")
				     , ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_PLAN_WEEKLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_WEEK BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				 #else
				     , ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_WEEK AS FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_PLAN_WEEKLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_WEEK BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				 #end
		            
		     #elseif("$!{oper_type}" == "MSAVE")		     	 
		     	 #if("$!{period_type}" == "WEEK")		     
				     , ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_WEEK AS FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_HIST_MONTHLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_MONTH BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				 #else
					, ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_MONTH AS FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_HIST_MONTHLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_MONTH BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				#end				
		            
		     #else
		         #if("$!{period_type}" == "DAY")
				     , ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_HIST_WEEKLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_WEEK BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				 #else
				     , ( SELECT T.ORG_ID, T.FCST_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_WEEK AS FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
				           FROM FCST_HIST_WEEKLY T
				          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_WEEK BETWEEN '$!{start}' AND '$!{end}'
				       ) F
				 #end					            
		     #end  
			            
		 WHERE X.ORG_ID = S.ORG_ID(+) AND X.ITEM_CODE = S.ITEM_CODE(+) AND X.SITE_CODE = S.SITE_CODE(+) AND X.DC_CODE   = S.DC_CODE(+) AND X.EFF_DATE = S.SALES_DATE(+)
		   AND X.ORG_ID = F.ORG_ID(+) AND X.ITEM_CODE = F.ITEM_CODE(+) AND X.SITE_CODE = F.SITE_CODE(+) AND X.DC_CODE   = F.DC_CODE(+) AND X.EFF_DATE = F.FCST_DATE(+)
		   AND X.FCST_CODE = F.FCST_CODE
      GROUP BY X.ORG_ID
		     , DECODE( '$!{condition_type1}', '품종분류', DECODE( '$!{condition_level1}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                            , '영업', DECODE( '$!{condition_level1}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level1}', '30', X.DC_CODE, '00000' ))
		     , DECODE( '$!{condition_type2}', '품종분류', DECODE( '$!{condition_level2}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                   , '영업', DECODE( '$!{condition_level2}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level2}', '30', X.DC_CODE, '00000' ), 'ALL')
		     , DECODE( '$!{condition_type3}', '품종분류', DECODE( '$!{condition_level3}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                     , '영업', DECODE( '$!{condition_level3}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level3}', '30', X.DC_CODE, '00000' ), 'ALL')
		   , X.EFF_DATE, X.UPDATE_CHK  ) Z
           , ( SELECT ITEM_CODE AS ATT01_CODE, ITEM_DESC AS ATT01_DESC  FROM ITEM WHERE '품종분류' = '$!{condition_type1}'  AND ITEM_LEVEL = '$!{condition_level1}'  UNION ALL
		       SELECT SITE_CODE, SITE_DESC  FROM SITE  WHERE '영업' = '$!{condition_type1}'  AND SITE_LEVEL  = '$!{condition_level1}'  UNION ALL
		       SELECT DC_CODE, DC_DESC  FROM DC  WHERE '물류거점' = '$!{condition_type1}' AND DC_LEVEL  = '$!{condition_level1}' ) A
		   , ( SELECT ITEM_CODE AS ATT02_CODE, ITEM_DESC AS ATT02_DESC FROM ITEM WHERE '품종분류' = '$!{condition_type2}' AND ITEM_LEVEL = '$!{condition_level2}' UNION ALL
		       SELECT SITE_CODE, SITE_DESC FROM SITE WHERE '영업' = '$!{condition_type2}' AND SITE_LEVEL  = '$!{condition_level2}' UNION ALL
		       SELECT DC_CODE, DC_DESC FROM DC WHERE '물류거점' = '$!{condition_type2}' AND DC_LEVEL  = '$!{condition_level2}' ) B
		   , ( SELECT ITEM_CODE AS ATT03_CODE, ITEM_DESC AS ATT03_DESC FROM ITEM WHERE '품종분류' = '$!{condition_type3}' AND ITEM_LEVEL = '$!{condition_level3}' UNION ALL
		       SELECT SITE_CODE, SITE_DESC FROM SITE WHERE '영업' = '$!{condition_type3}' AND SITE_LEVEL  = '$!{condition_level3}' UNION ALL
		       SELECT DC_CODE, DC_DESC FROM DC WHERE '물류거점' = '$!{condition_type3}' AND DC_LEVEL  = '$!{condition_level3}' ) C
	   WHERE Z.ATT01  = A.ATT01_CODE(+) AND Z.ATT02  = B.ATT02_CODE(+) AND Z.ATT03  = C.ATT03_CODE(+)
	   
	#if("$!{oper_type}" == "WCONF" || "$!{oper_type}" == "WSAVE")
		#if("$!{period_type}" == "MONTH")
			GROUP BY NVL(Z.ATT01,'미지정'), NVL(A.ATT01_DESC,'미지정'), Z.ATT02, NVL(B.ATT02_DESC,'미지정'), Z.ATT03, NVL(C.ATT03_DESC,'미지정'), SUBSTR(Z.EFF_DATE,1,6), Z.UPDATE_CHK		
		#end	
	#end
    ORDER BY 1, 3, 5, 7
	</query>
	<!--	
	======================================================================
		수요예측 Error 조회
	======================================================================
	--> 
	
	<!-- 수요예측 Error 조회 : tailer --> 
	<query id="fc_04030_errorAnalySearchResult_list" paging="false">
			SELECT  T.ITEM_CODE
			        , I.ITEM_DESC
			        , T.SITE_CODE
			        , S.SITE_DESC
			        , T.DC_CODE
			        , D.DC_DESC
			        , NVL(F.FCST_NAME, 'N/A') AS FCST_METHOD
			        , ROUND(T.ERR_MSE, 4)
			        , ROUND(T.ERR_MAPE, 4)
			        , ROUND(T.ERR_MAD, 4)
			        , ROUND(T.ERR_TS, 4)
			        , A.HIST_START
					, A.HIST_END
			        , A.ITEM_LV
					, A.SITE_LV
					, A.DC_LV
					, A.CUST_LV					
			  FROM  FCST_RSLT_SUMMARY T, FCST_MAST A
			        , ITEM I, SITE S, DC D
			        , ( 
			        	SELECT  DISTINCT FCST_METHOD_CODE, FCST_NAME
			              FROM  FORECASTING_PARAMETERS 
			          ) F
			 WHERE  T.FCST_CODE = A.FCST_CODE  
			   AND  T.FCST_CODE = '$!{selected_plan_name}'
			   AND  T.ITEM_CODE = I.ITEM_CODE AND A.ITEM_LV = I.ITEM_LEVEL
			   AND  T.SITE_CODE = S.SITE_CODE AND A.SITE_LV = S.SITE_LEVEL
			   AND  T.DC_CODE = D.DC_CODE   AND A.DC_LV = D.DC_LEVEL
			   AND  T.FCST_METHOD = F.FCST_METHOD_CODE(+)
			   AND  T.OPTIMAL_FLAG = 'Y'
			  [AND  ( (	'${selected_error_type}' IS NOT NULL AND DECODE( '${selected_error_type}'
			                                                , 'MSE', T.ERR_MSE
			                                                , 'MAD', T.ERR_MAD
			                                                , 'MAPE', T.ERR_MAPE
			                                                , 'TS', T.ERR_TS ) ${selected_operation_mark} '${selected_error_value}' )
			            OR '${selected_error_type}' IS NULL )]
			  [AND  ( ( '${checked_forecast}' = 'Y' AND FCST_METHOD = 'N/A' )
			            OR '${checked_forecast}' = 'N' )]
	
	</query>
	
	<!-- 계획 유형 리스트 -->
	<query id="err_analy_plan_type">
	
			SELECT  T.CD
			        , T.CD_NAME -- DISPLAY
			  FROM  CODE_MST T
			 WHERE  T.CD_GRP = 'OPER_TYPE'
			   AND  T.CAT05  = 'Y'
	
	</query>
	
	<!-- 계획 명 리스트 -->
	<query id="err_analy_plan_name">
	
			SELECT  T.FCST_CODE
			        , T.FCST_DESC -- DISPLAY
			        , T.OPER_TYPE --계획유형에서 선택한 CD값
			  FROM  FCST_MAST T   
			 WHERE  T.GEN_DATE = (
			 						SELECT  MAX(A.GEN_DATE) 
			 						  FROM  FCST_MAST A
			                         WHERE  A.OPER_TYPE= T.OPER_TYPE
			                     )
                        
	</query>
	
	<!-- Error 타입 리스트 -->
	<query id="err_analy_error_type">
	
			SELECT  T.CD
			  FROM  CODE_MST T 
			 WHERE  T.CD_GRP = 'FCST_ERR_TYPE'
			 ORDER  BY CAT01
 
	</query>

<!--
=====================================================================================================
	수요예측 >> 판매실적 관리 
=====================================================================================================
--> 
	
	<!-- Demand Manager Workbench/Data Management Workbench -->
	<!-- 판매실적 조회 및 조정 -->
	
	<query id="bucket_units" paging="false">
		SELECT T.CD, T.CD_NAME
          FROM CODE_MST T
         WHERE T.CD_GRP = 'TIME_SCALE'
           AND T.CAT01  = 'Y'
	</query>	
	<query id="sales_start" paging="false">
		SELECT DISTINCT
		       DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01'
                                                   , 'W', T.THIS_MONDAY ) AS START_DATE
          FROM PLAN_CALENDAR T
         WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
       BETWEEN DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-36),'YYYYMM') 
                                                   , 'W', TO_CHAR(ADD_MONTHS(SYSDATE, -36) -7 , 'YYYYMMDD') )
           AND DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM') 
                                                   , 'W', TO_CHAR(SYSDATE -7, 'YYYYMMDD') ) 
      ORDER BY 1
	</query>	
	<query id="sales_end" paging="false">
		SELECT DISTINCT 
		       DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(LAST_DAY(TO_DATE(T.YYYYMM,'YYYYMM')),'YYYYMMDD')
                                                 , 'W', TO_CHAR(TO_DATE(T.THIS_MONDAY,'YYYYMMDD') + 6,'YYYYMMDD') ) AS END_DATE
          FROM PLAN_CALENDAR T
         WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
       BETWEEN DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-36),'YYYYMM') 
                                                 , 'W', TO_CHAR(ADD_MONTHS(SYSDATE, -36) -7 , 'YYYYMMDD') )
           AND DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM') 
                                                 , 'W', TO_CHAR(SYSDATE -7, 'YYYYMMDD') ) 
      ORDER BY 1
	</query>
	<query id="sales_ctl_rows" paging="false">
		SELECT Z.ATT01, A.ATT01_DESC, Z.ATT02, NVL(B.ATT02_DESC,'미지정'), Z.ATT03, NVL(C.ATT03_DESC,'미지정'), Z.EFF_DATE, Z.SALES_QTY, Z.ADJUSTED_SALES_QTY, 'Y'
          FROM ( SELECT X.ORG_ID
                      , DECODE( '$!{condition_type1}', '품종분류', DECODE( '$!{condition_level1}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
                                            , '영업', DECODE( '$!{condition_level1}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
                                            , '물류거점', DECODE( '$!{condition_level1}', '30', X.DC_CODE, '00000' )) AS ATT01
                      , DECODE( '$!{condition_type2}', '품종분류', DECODE( '$!{condition_level2}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
                                            , '영업', DECODE( '$!{condition_level2}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
                                            , '물류거점', DECODE( '$!{condition_level2}', '30', X.DC_CODE, '00000' ), 'ALL' ) AS ATT02
                      , DECODE( '$!{condition_type3}', '품종분류', DECODE( '$!{condition_level3}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
                                            , '영업', DECODE( '$!{condition_level3}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
                                            , '물류거점', DECODE( '$!{condition_level3}', '30', X.DC_CODE, '00000' ), 'ALL' ) AS ATT03                                     
                      , X.EFF_DATE
                      , ROUND(SUM(NVL(S.SALES_QTY * DECODE('$!{s_unit}', 'BOX', 1, X.CONVERSION_QTY ),0)), 2 ) AS SALES_QTY
                      , ROUND(SUM(NVL(S.ADJUSTED_SALES_QTY * DECODE('$!{s_unit}', 'BOX', 1, X.CONVERSION_QTY ),0)), 2 ) AS ADJUSTED_SALES_QTY 
                   FROM ( SELECT T.ORG_ID, T.ITEM_CODE, SITE_CODE, DC_CODE, T.ITEM_CLASS1, T.ITEM_CLASS2, T.ITEM_CLASS3, T.SITE_CLASS1, T.SITE_CLASS2, P.EFF_DATE, I.CONVERSION_QTY
                            FROM ( SELECT DISTINCT ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE
                                        , ITEM_CLASS1, ITEM_CLASS2, ITEM_CLASS3, SITE_CLASS1, SITE_CLASS2
                                     FROM FCST_UNIT                                
                                    WHERE FCST_UNIT_TYPE = DECODE('$!{is_analyze_data}', 'Y', FCST_UNIT_TYPE, 'N' )
                                    
                                    #if("$!{prod_4}" != ",")
                                     [AND ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, ITEM_CODE) FROM TABLE( SPLIT( '${prod_4}', ',')) )]
                                    #end 
                                    #if("$!{sales_3}" != ",")
		                             [AND SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, SITE_CODE) FROM TABLE( SPLIT( '${sales_3}', ',')) )]
		                            #end 
                                   
		                             [AND DC_CODE   IN ( SELECT NVL(COLUMN_VALUE, DC_CODE) FROM TABLE( SPLIT( '${delivery_1}', ',')) )] 
		                            
                                    #if("$!{prod_3}" != ",")
		                             [AND ITEM_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS1) FROM TABLE( SPLIT( '${prod_3}', ',')) )]
		                            #end 
                                    #if("$!{prod_2}" != ",")
		                             [AND ITEM_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS2) FROM TABLE( SPLIT( '${prod_2}', ',')) )] 
		                            #end 
                                    #if("$!{prod_1}" != ",")
		                             [AND ITEM_CLASS3 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS3) FROM TABLE( SPLIT( '${prod_1}', ',')) )]
		                            #end 
                                    #if("$!{sales_2}" != ",")
		                             [AND SITE_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, SITE_CLASS1) FROM TABLE( SPLIT( '${sales_2}', ',')) )]
		                            #end 
                                    #if("$!{sales_1}" != ",") 
		                             [AND SITE_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, SITE_CLASS2) FROM TABLE( SPLIT( '${sales_1}', ',')) )]
		                            #end 
                                     ) T
                                , ITEM I
                                , ( SELECT DISTINCT P.ORG_ID, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) AS EFF_DATE
                                      FROM PLAN_CALENDAR  P
                                     WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) 
                                   BETWEEN '$!{start}' AND '$!{end}' ) P
                            WHERE T.ORG_ID = I.ORG_ID AND T.ITEM_CODE = I.ITEM_CODE AND T.ORG_ID = P.ORG_ID ) X
                       , ( SELECT ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE
                                , DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) AS SALES_DATE 
                                , SUM( SALES_QTY ) SALES_QTY
                                , SUM( ADJUSTED_SALES_QTY ) ADJUSTED_SALES_QTY
                             FROM SALES_HIST
                            WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) 
                          BETWEEN '$!{start}' AND '$!{end}'
                         GROUP BY ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) ) S
                   WHERE X.ORG_ID = S.ORG_ID(+) AND X.ITEM_CODE = S.ITEM_CODE(+) 
                     AND X.SITE_CODE = S.SITE_CODE(+) AND X.DC_CODE = S.DC_CODE(+) 
                     AND X.EFF_DATE = S.SALES_DATE(+)
                GROUP BY X.ORG_ID
                    , DECODE( '$!{condition_type1}', '품종분류', DECODE( '$!{condition_level1}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
                                     , '영업', DECODE( '$!{condition_level1}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
                                     , '물류거점', DECODE( '$!{condition_level1}', '30', X.DC_CODE, '00000' ))
                    , DECODE( '$!{condition_type2}', '품종분류', DECODE( '$!{condition_level2}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
                                     , '영업', DECODE( '$!{condition_level2}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
                                     , '물류거점', DECODE( '$!{condition_level2}', '30', X.DC_CODE, '00000' ), 'ALL')
                    , DECODE( '$!{condition_type3}', '품종분류', DECODE( '$!{condition_level3}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
                                     , '영업', DECODE( '$!{condition_level3}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
                                     , '물류거점', DECODE( '$!{condition_level3}', '30', X.DC_CODE, '00000' ), 'ALL')
                    , X.EFF_DATE  ) Z
             , ( SELECT ITEM_CODE AS ATT01_CODE, ITEM_DESC AS ATT01_DESC  FROM ITEM WHERE '품종분류' = '$!{condition_type1}'  AND ITEM_LEVEL = '$!{condition_level1}'  
                        UNION ALL
                 SELECT SITE_CODE, SITE_DESC  FROM SITE  WHERE '영업' = '$!{condition_type1}'  AND SITE_LEVEL  = '$!{condition_level1}'  
                        UNION ALL
                 SELECT DC_CODE, DC_DESC  FROM DC  WHERE '물류거점' = '$!{condition_type1}' AND DC_LEVEL  = '$!{condition_level1}' ) A
             , ( SELECT ITEM_CODE AS ATT02_CODE, ITEM_DESC AS ATT02_DESC FROM ITEM WHERE '품종분류' = '$!{condition_type2}' AND ITEM_LEVEL = '$!{condition_level2}' 
                        UNION ALL
                 SELECT SITE_CODE, SITE_DESC FROM SITE WHERE '영업' = '$!{condition_type2}' AND SITE_LEVEL  = '$!{condition_level2}' 
                        UNION ALL
                 SELECT DC_CODE, DC_DESC FROM DC WHERE '물류거점' = '$!{condition_type2}' AND DC_LEVEL  = '$!{condition_level2}' ) B
             , ( SELECT ITEM_CODE AS ATT03_CODE, ITEM_DESC AS ATT03_DESC FROM ITEM WHERE '품종분류' = '$!{condition_type3}' AND ITEM_LEVEL = '$!{condition_level3}' 
                        UNION ALL
                 SELECT SITE_CODE, SITE_DESC FROM SITE WHERE '영업' = '$!{condition_type3}' AND SITE_LEVEL  = '$!{condition_level3}' 
                        UNION ALL
                 SELECT DC_CODE, DC_DESC FROM DC WHERE '물류거점' = '$!{condition_type3}' AND DC_LEVEL  = '$!{condition_level3}' ) C
         WHERE Z.ATT01 = A.ATT01_CODE(+) AND Z.ATT02 = B.ATT02_CODE(+) AND Z.ATT03 = C.ATT03_CODE(+)
      ORDER BY 1, 3, 5, 7		
	</query>
	
	<!--	
	======================================================================
		이상요인 조정
	======================================================================
	-->
	 
		<!-- 이상요인 조정 --> 
	<query id="fc_02030_removeOutlier_list" paging="true">
		SELECT T.ITEM_CODE, I.ITEM_DESC, T.SITE_CODE, S.SITE_DESC
		     , T.DC_CODE, D.DC_DESC, T.SALES_MONTH, ROUND(T.SALES_QTY, 1)
		     , ROUND(T.ADJUSTED_SALES_QTY, 1), ROUND(T.FITTED_QTY, 1), ROUND(T.BEFORE_HIST_QTY, 1)
		     , ROUND(T.AFTER_HIST_QTY, 1), ROUND(T.ADJ_FITTED_QTY, 1), T.APPLY_CHECK
		  FROM OUTLIER_HISTORY T, ITEM I, SITE S, DC D
		 WHERE T.ORG_ID    = I.ORG_ID
		   AND T.ITEM_CODE = I.ITEM_CODE
		   AND T.ORG_ID    = S.ORG_ID
		   AND T.SITE_CODE = S.SITE_CODE
		   AND T.ORG_ID    = D.ORG_ID
		   AND T.DC_CODE   = D.DC_CODE
		   AND T.OUTLIER_CHECK = 'Y'
		 ORDER BY T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.SALES_MONTH			 	
	</query>	
	
	<!-- 실적 기간 리스트 -->
	<query id="rem_out_period_list">
		SELECT DISTINCT T.YYYYMM
		  FROM PLAN_CALENDAR T
		 WHERE T.YYYYMM BETWEEN TO_CHAR( ADD_MONTHS( SYSDATE, -36), 'YYYYMM') 
		                    AND TO_CHAR( ADD_MONTHS(SYSDATE, -1), 'YYYYMM')
	  ORDER BY 1	
	</query>
	
	<!-- 이상요인 찾기 : SP 실행 -->
	<query id="fc_02030_removeOutlier_list_search">	
		CALL SP_FC_FIND_OUTLIERS ( '$!{selected_start}' || '01'  -- 필수 'yyyymmdd' 형식 VARCHAR2
               					 , '$!{selected_end}' || '01'    -- 필수 'yyyymmdd' 형식 VARCHAR2
               					 , '$!{limit_std}'    -- 필수 NUMBER
               					 , '$!{_user_id}')  -- OPTION			
	</query>
	
	<!-- 이상요인 조정 01 -->
	<query id="fc_02030_removeOutlier_list_update_01" iterator="item_cd site_cd dc_cd sales_month checkModify adj_fitted adj_sales_qty">	
		UPDATE SALES_HIST T
		   SET T.ADJUSTED_SALES_QTY = ROUND(T.ADJUSTED_SALES_QTY * ( '$!{adj_fitted}'/'$!{adj_sales_qty}'), 2)
		 WHERE T.ORG_ID = 1000
		   AND T.ITEM_CODE = '$!{item_cd}' -- 해당 품목
		   AND T.SITE_CODE = '$!{site_cd}' -- 해당 SITE
		   AND T.DC_CODE   = '$!{dc_cd}'  -- 해당 DC
		   AND T.SALES_MONTH = '$!{sales_month}' -- 해당 월
		   AND '$!{checkModify}' = 'Y'				
	</query>
	
	<!-- 이상요인 조정 02 -->
	<query id="fc_02030_removeOutlier_list_update_02" iterator="item_cd site_cd dc_cd sales_month checkModify adj_fitted adj_sales_qty">	
		UPDATE OUTLIER_HISTORY T
		   SET T.ADJ_FITTED_QTY = '$!{adj_fitted}'
		     , T.ADJUSTED_SALES_QTY = ROUND(T.ADJUSTED_SALES_QTY * ( '$!{adj_fitted}'/'$!{adj_sales_qty}'), 2)
		     , T.APPLY_CHECK = 'Y'
		 WHERE T.ORG_ID = 1000
		   AND T.ITEM_CODE = '$!{item_cd}' -- 해당 품목
		   AND T.SITE_CODE = '$!{site_cd}' -- 해당 SITE
		   AND T.DC_CODE   = '$!{dc_cd}'  -- 해당 DC
		   AND T.SALES_MONTH = '$!{sales_month}' -- 해당 월
		   AND '$!{checkModify}' = 'Y'				
	</query>
	
	<!-- 이상요인 조정 02 -->
	<query id="fc_02030_removeOutlier_chart" paging="false">
		SELECT T.SALES_MONTH  
	         , T.SALES_QTY   
	         , ROUND(T.FITTED_QTY, 2)  AS FITTED_QTY
	         , ROUND(T.FITTED_QTY + T.MEAN_VALUE * T.STD_VALUE, 2)  AS UP_VALUE
	         , GREATEST(0, T.FITTED_QTY - T.MEAN_VALUE * T.STD_VALUE) AS DN_VALUE
	      FROM OUTLIER_HISTORY T
	     WHERE T.ORG_ID = 1000   
	       AND T.ITEM_CODE = '$!{item_code}' -- 해당 품목
	       AND T.SITE_CODE = '$!{site_code}' -- 해당 SITE
	       AND T.DC_CODE   = '$!{dc_code}'  -- 해당 DC
	  ORDER BY T.SALES_MONTH					
	</query>
	
	<!--	
	======================================================================
		ABC 분석
	======================================================================
	-->
	
	<!-- 분석 기준그룹 -->	
	<query id="fc_02040_analysis_groups" paging="false">
		SELECT DISTINCT T.LVL, T.LVL_TYPE
 	      FROM SCM_FC.HRCHY T
         WHERE T.HTYPE = '품종분류'
           AND T.LVL  != '50'
      ORDER BY 1			 	
	</query>
	
	<!-- 분석 기준대상 -->	
	<query id="fc_02040_analyze_by_points" paging="false">
		SELECT T.CD, T.CD_NAME
          FROM CODE_MST T
         WHERE T.CD_GRP = 'ABC_CATEGORY_NAME'	
           AND T.ENABLE_CHK = 'Y' 	
	</query>
	
	<!-- 실적 시작 -->	
	<query id="fc_02040_abc_start" paging="false">
		SELECT DISTINCT T.YYYYMM
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -24), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
      ORDER BY 1	
	</query>
	
	<!-- 실적 완료 -->	
	<query id="fc_02040_abc_end" paging="false">
		SELECT DISTINCT T.YYYYMM
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN '$!{start}' AND TO_CHAR(SYSDATE, 'YYYYMMDD')
      ORDER BY 1	
	</query>
	
	<!-- ABC List -->	
	<query id="fc_02040_abc_tailer" paging="false">
	#if("$!{search_type}" == "NEW")
		SELECT Z.ITEMGROUPCODE, B.ITEM_DESC AS B_ITEM_DESC, Z.ITEM_CODE, A.ITEM_DESC AS A_ITEM_DESC
             , DECODE( GREATEST( ${a_class}, Z.BEFORE_CUM_RATE ), ${a_class}, 'A', DECODE( GREATEST( ${a_class} + ${b_class}, Z.BEFORE_CUM_RATE ), ${a_class} + ${b_class}, 'B', 'C' ) )  AS CATEGORYVALUE
             , ROUND(Z.SALESPERCENTAGE, 1), ROUND(Z.CUM_RATE, 1), '$!{analy_grp}', '$!{analy_target}', Z.SALES_QTY
         #if("$!{analy_target}" == "VOLUME")
           #if("$!{analy_uom}" == "BOX")           
             , (Z.SALES_QTY * A.CONVERSION_QTY) AS EA_QTY
           #else
             , (Z.SALES_QTY / A.CONVERSION_QTY) AS BOX_QTY
           #end   
             , A.CONVERSION_QTY  
         #end                 
                  
          FROM ( SELECT Y.ITEMGROUPCODE, Y.ITEM_CODE, Y.SALES_QTY
                   --   , ROUND(Y.SALES_QTY/DECODE(Y.GRP_QTY, 0, 1, Y.GRP_QTY) * 100, 2 )  AS SALESPERCENTAGE
                   --   , ROUND((Y.CUM_QTY-Y.SALES_QTY)/DECODE(Y.GRP_QTY, 0, 1, Y.GRP_QTY) * 100, 2 )  AS BEFORE_CUM_RATE
                   --   , ROUND(Y.CUM_QTY/DECODE(Y.GRP_QTY, 0, 1, Y.GRP_QTY) * 100, 2 ) AS CUM_RATE
                      , DECODE(Y.GRP_QTY, 0, 0, (Y.SALES_QTY/Y.GRP_QTY) * 100) AS SALESPERCENTAGE
                      , DECODE(Y.GRP_QTY, 0, 0, ((Y.CUM_QTY-Y.SALES_QTY)/Y.GRP_QTY) * 100) AS BEFORE_CUM_RATE
                      , DECODE(Y.GRP_QTY, 0, 0, (Y.CUM_QTY/Y.GRP_QTY) * 100) AS CUM_RATE                      
                   FROM ( SELECT X.ITEMGROUPCODE 
                               , X.ITEM_CODE
                               , X.SALES_QTY
                               , SUM(X.SALES_QTY) OVER ( PARTITION BY X.ITEMGROUPCODE ORDER BY X.ITEMGROUPCODE, X.SALES_QTY DESC ) CUM_QTY
                               , SUM(X.SALES_QTY) OVER ( PARTITION BY X.ITEMGROUPCODE ORDER BY X.ITEMGROUPCODE ) GRP_QTY
                            FROM ( SELECT DECODE( '$!{analy_grp}', '20', A.ITEM_CLASS3
                                                               , '30', A.ITEM_CLASS2
                                                               , '40', A.ITEM_CLASS1
                                                               , '000' ) AS ITEMGROUPCODE
                                        , T.ITEM_CODE
                                        , SUM(DECODE('$!{analy_target}', 'VOLUME', DECODE('$!{analy_uom}', 'EA', (T.SALES_QTY * I.CONVERSION_QTY), T.SALES_QTY), T.SALES_AMT)) AS SALES_QTY
                                      --  , SUM(DECODE('$!{analy_target}', 'VOLUME', T.SALES_QTY, T.SALES_AMT) ) SALES_QTY
                                     FROM SCM_FC.SALES_HIST T
                                        , SCM_FC.FCST_UNIT  A
                                        , ITEM I
                                    WHERE T.ITEM_CODE = A.ITEM_CODE
                                      AND A.ITEM_CODE = I.ITEM_CODE
                                      AND T.SITE_CODE = A.SITE_CODE
                                      AND T.DC_CODE   = A.DC_CODE
                                      AND T.CUST_CODE = A.CUST_CODE
                                      AND T.SALES_MONTH BETWEEN '$!{start}' AND '$!{end}'
                                 GROUP BY DECODE( '$!{analy_grp}', '20', A.ITEM_CLASS3
                                                              , '30', A.ITEM_CLASS2
                                                              , '40', A.ITEM_CLASS1
                                                              , '000' ) 
                                        , T.ITEM_CODE 
                                 ) X 
                        ) Y 
                ) Z
             , ITEM A  
             , ITEM B
         WHERE Z.ITEM_CODE = A.ITEM_CODE
           AND Z.ITEMGROUPCODE = B.ITEM_CODE
           AND B.ITEM_LEVEL    = '$!{analy_grp}'
      ORDER BY Z.ITEMGROUPCODE, CATEGORYVALUE, Z.SALESPERCENTAGE DESC, Z.ITEM_CODE
      
	#else
		SELECT T.ITEMGROUPCODE
		     , B.ITEM_DESC AS B_ITEM_DESC
		     , T.ITEMCODE
		     , A.ITEM_DESC AS A_ITEM_DESC
		     , T.CATEGORYVALUE
		     , T.SALESPERCENTAGE
		     , T.CUMULATIVEPERCENTAGE
		     , T.ITEMGROUPLEVEL
		     , T.CATEGORYNAME
		     , T.SALESVALUE
		 #if("$!{analy_target}" == "VOLUME")
           #if("$!{analy_uom}" == "BOX")           
             , (T.SALESVALUE * T.CONVERSIONQTY) AS EA_QTY
           #else
             , (T.SALESVALUE / T.CONVERSIONQTY) AS BOX_QTY
           #end   
             , T.CONVERSIONQTY
         #end   
		     
          FROM ABCCATEGORY T
             , ITEM  A
             , ITEM  B
         WHERE T.ITEMCODE = A.ITEM_CODE
           AND T.ITEMGROUPCODE = B.ITEM_CODE
		   AND T.ITEMGROUPLEVEL = B.ITEM_LEVEL
           AND B.ITEM_LEVEL    = '$!{analy_grp}'
           AND T.CATEGORYNAME  = '$!{analy_target}'
           #if("$!{analy_target}" == "VOLUME")
              AND T.UOM = '$!{analy_uom}'
           #end
      ORDER BY T.ITEMGROUPCODE, T.CATEGORYVALUE, T.SALESPERCENTAGE DESC, T.CUMULATIVEPERCENTAGE, T.ITEMCODE
	#end		
	</query>
	
	<!-- ABC Chart -->
	<query id="fc_02040_abc_chart" paging="false">
		SELECT A.ITEM_DESC
	         , T.SALESPERCENTAGE
	         , T.CUMULATIVEPERCENTAGE	    
	      FROM ABCCATEGORY T
	         , ITEM  A
	         , ITEM  B
	     WHERE T.ITEMCODE = A.ITEM_CODE
	       AND T.ITEMGROUPCODE = B.ITEM_CODE
	       AND T.ITEMGROUPLEVEL = B.ITEM_LEVEL
	       AND B.ITEM_LEVEL    = '$!{analy_grp}'
	       AND T.CATEGORYNAME  = '$!{analy_target}'
	       AND T.ITEMGROUPCODE = '$!{item_grp_cd}'
      ORDER BY T.ITEMGROUPCODE, T.CATEGORYVALUE, T.SALESPERCENTAGE DESC, T.CUMULATIVEPERCENTAGE, T.ITEMCODE
	</query>
	
	<!-- ABC Delete 
	<query id="fc_02040_abc_delete" paging="false">
		DELETE FROM ABCCATEGORY T 
		      WHERE T.ITEMGROUPLEVEL = '$!{analy_grp}'
		        AND T.CATEGORYNAME = '$!{analy_target}'
	</query>-->
	<query id="fc_02040_abc_delete" paging="false">
		TRUNCATE TABLE ABCCATEGORY 
	</query>
	
	<!-- ABC Insert -->
	<query id="fc_02040_abc_insert" paging="false">
		INSERT INTO ABCCATEGORY 
		          ( 
		            ITEMGROUPLEVEL, ITEMGROUPCODE, ITEMCODE
		          , CATEGORYNAME, CATEGORYVALUE, SALESPERCENTAGE
		          , CUMULATIVEPERCENTAGE, SALESVALUE, CONVERSIONQTY
		          , UOM, CREATIONDATE, CREATEDBY 
		          ) 
		   
		SELECT '$!{analy_grp}', Z.ITEMGROUPCODE, Z.ITEM_CODE, '$!{analy_target}'
             , DECODE( GREATEST( ${a_class}, Z.BEFORE_CUM_RATE ), ${a_class}, 'A', DECODE( GREATEST( ${a_class} + ${b_class}, Z.BEFORE_CUM_RATE ), ${a_class} + ${b_class}, 'B', 'C' ) )  AS CATEGORYVALUE
             , ROUND(Z.SALESPERCENTAGE, 1), ROUND(Z.CUM_RATE, 1), Z.SALES_QTY             
           #if("$!{analy_target}" == "VOLUME")           
             , A.CONVERSION_QTY
             , '$!{analy_uom}'
           #else
             , Null
             , 'CASH'
           #end            
             , SYSDATE, '$!{_user_id}'
             
          FROM ( SELECT Y.ITEMGROUPCODE, Y.ITEM_CODE, Y.SALES_QTY
                   --   , ROUND(Y.SALES_QTY / DECODE(Y.GRP_QTY, 0, 1, Y.GRP_QTY) * 100, 2 )  AS SALESPERCENTAGE
                   --   , ROUND((Y.CUM_QTY - Y.SALES_QTY) / DECODE(Y.GRP_QTY, 0, 1, Y.GRP_QTY) * 100, 2 )  AS BEFORE_CUM_RATE
                   --   , ROUND(Y.CUM_QTY / DECODE(Y.GRP_QTY, 0, 1, Y.GRP_QTY) * 100, 2 ) AS CUM_RATE
                      , DECODE(Y.GRP_QTY, 0, 0, Y.SALES_QTY/Y.GRP_QTY * 100) AS SALESPERCENTAGE
                      , DECODE(Y.GRP_QTY, 0, 0, (Y.CUM_QTY-Y.SALES_QTY)/Y.GRP_QTY * 100) AS BEFORE_CUM_RATE
                      , DECODE(Y.GRP_QTY, 0, 0, Y.CUM_QTY/Y.GRP_QTY * 100) AS CUM_RATE   
                   FROM ( SELECT X.ITEMGROUPCODE
                               , X.ITEM_CODE
                               , X.SALES_QTY
                               , SUM(X.SALES_QTY) OVER ( PARTITION BY X.ITEMGROUPCODE ORDER BY X.ITEMGROUPCODE, X.SALES_QTY DESC ) CUM_QTY
                               , SUM(X.SALES_QTY) OVER ( PARTITION BY X.ITEMGROUPCODE ORDER BY X.ITEMGROUPCODE ) GRP_QTY
                            FROM ( SELECT DECODE( '$!{analy_grp}', '20', A.ITEM_CLASS3
                                                                 , '30', A.ITEM_CLASS2
                                                                 , '40', A.ITEM_CLASS1
                                                                 , '000' ) AS ITEMGROUPCODE
                                        , T.ITEM_CODE
                                        , SUM(DECODE('$!{analy_target}', 'VOLUME', DECODE('$!{analy_uom}', 'EA', (T.SALES_QTY * I.CONVERSION_QTY), T.SALES_QTY), T.SALES_AMT)) AS SALES_QTY
                                      --  , SUM(DECODE('$!{analy_target}', 'VOLUME', T.SALES_QTY, T.SALES_AMT) ) SALES_QTY
                                     FROM SCM_FC.SALES_HIST T
                                        , SCM_FC.FCST_UNIT  A
                                        , ITEM I
                                    WHERE T.ITEM_CODE = A.ITEM_CODE
                                      AND A.ITEM_CODE = I.ITEM_CODE
                                      AND T.SITE_CODE = A.SITE_CODE
                                      AND T.DC_CODE   = A.DC_CODE
                                      AND T.CUST_CODE = A.CUST_CODE
                                      AND T.SALES_MONTH BETWEEN '$!{start}' AND '$!{end}'
                                 GROUP BY DECODE( '$!{analy_grp}', '20', A.ITEM_CLASS3
                                                                 , '30', A.ITEM_CLASS2
                                                                 , '40', A.ITEM_CLASS1
                                                                 , '000' ) 
                                        , T.ITEM_CODE 
                                 ) X 
                        ) Y 
                ) Z
             , ITEM A  
             , ITEM B
         WHERE Z.ITEM_CODE = A.ITEM_CODE
           AND Z.ITEMGROUPCODE = B.ITEM_CODE
           AND B.ITEM_LEVEL    = '$!{analy_grp}'
--      ORDER BY Z.ITEMGROUPCODE, CATEGORYVALUE, Z.SALESPERCENTAGE DESC, Z.ITEM_CODE

	</query>
	
	<!-- ABC Value update -->
	<query id="fc_02040_abc_update" paging="false">
		UPDATE ABCCATEGORY  T
		   SET T.CATEGORYVALUE = '$!{abc_value}'
		 WHERE T.ITEMCODE = '$!{item_cd}'
		   AND T.CATEGORYNAME = '$!{analy_target}'
	</query>
	
	<!--	
	======================================================================
		COV 분석
	======================================================================
	-->
	
	<!-- 분석 기준그룹 -->	
	<query id="analysis_groups" paging="false">
		SELECT DISTINCT T.LVL, T.LVL_TYPE
 	      FROM SCM_FC.HRCHY T
         WHERE T.HTYPE = '품종분류'
           AND T.LVL  != '50'
      ORDER BY 1			 	
	</query>
	
	<!-- 분석 기준대상 -->	
	<query id="analyze_by_points" paging="false">
		SELECT CD             
             , CAT01  AS ITEM_LEVEL
             , CAT02  AS SITE_LEVEL
             , CAT03  AS DC_LEVEL
             , CD_NAME -- DISPLAY
          FROM CODE_MST
         WHERE CD_GRP = 'COV_CATEGORY_NAME'
           AND ENABLE_CHK = 'Y'
      ORDER BY CAT04			 	
	</query>
	
	<!-- 분석 방법 -->	
	<query id="analysis_methods" paging="false">
		SELECT CD    
             , CD_NAME -- DISPLAY
          FROM CODE_MST
         WHERE CD_GRP = 'COV_ANALY_TYPE'
           AND ENABLE_CHK = 'Y'
      ORDER BY 1 DESC		 	
	</query>
	
	<!-- 실적 시작 -->	
	<query id="fc_02050_cov_start" paging="false">
		SELECT DISTINCT T.YYYYMM
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -24), 'YYYYMMDD') AND TO_CHAR(SYSDATE, 'YYYYMMDD')
      ORDER BY 1	
	</query>
	
	<!-- 실적 완료 -->	
	<query id="fc_02050_cov_end" paging="false">
		SELECT DISTINCT T.YYYYMM
          FROM PLAN_CALENDAR T
         WHERE T.EFF_DATE BETWEEN '$!{start_date}' AND TO_CHAR(SYSDATE, 'YYYYMMDD')
      ORDER BY 1	
	</query>
	
	<!-- Volumn or Trend -->	
	<query id="fc_02050_cov_type" paging="false">
		SELECT DECODE('$!{analysis_method}', 'CVXVOL', 'Volume', 'CVXTRD' ,'Trend') FROM DUAL
	</query>
	
	<!-- COV List -->	
	<query id="fc_02050_cov_tailer" paging="false">
		#if("$!{searchType}" == "NEW")		
			SELECT C.ANALY_CLASS AS "제품분류코드"
			     , I1.ITEM_DESC AS "제품분류명"
                 , C.ITEM_CODE AS "품목코드"
                 , I2.ITEM_DESC AS "품목명"
                 , C.SITE_CODE AS "영업지점코드"  
                 , S.SITE_DESC AS "영업지점명"
                 , C.DC_CODE AS "배송지점코드"  
                 , D.DC_DESC AS "배송지점명" 
                 , DECODE( TRUNC( C.CV/ '$!{cov_index}' ), 0, DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', DECODE(C.CLASS_MEAN, 0, 0, C.MEAN/C.CLASS_MEAN), DECODE(C.CLASS_TR, 0, 0, C.TREND_RATE/C.CLASS_TR)) ), 0, 4, 1 )
                 , DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', DECODE(C.CLASS_MEAN, 0, 0, C.MEAN/C.CLASS_MEAN), DECODE(C.CLASS_TR, 0, 0, C.TREND_RATE/C.CLASS_TR)) ), 0, 3, 2 ) ) AS "사분면"
                -- , DECODE( TRUNC( C.CV/ '$!{cov_index}' ), 0, DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', C.MEAN/C.CLASS_MEAN, C.TREND_RATE/C.CLASS_TR) ), 0, 4, 1 )
                -- , DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', C.MEAN/C.CLASS_MEAN, C.TREND_RATE/C.CLASS_TR) ), 0, 3, 2 ) ) AS "사분면"
                 , DECODE('$!{analysis_method}', 'CVXVOL', ROUND(C.MEAN, 1), ROUND(C.TREND_RATE, 1)) AS "평균실적/TREND"
                 , ROUND(C.STD, 1) AS "표준편차"
                 , ROUND(C.CV, 1) AS "CV"
                 , DECODE('$!{analysis_method}', 'CVXVOL', ROUND(C.CLASS_MEAN, 1), ROUND(C.CLASS_TR, 1))  AS "제품분류평균/TREND"
              FROM ( SELECT B.ANALY_CLASS, B.ITEM_CODE, B.SITE_CODE, B.DC_CODE
                          , B.MEAN, B.STD, B.CV, B.TREND_RATE
                          , ROUND(AVG(B.MEAN) OVER ( PARTITION BY B.ANALY_CLASS ),2) AS CLASS_MEAN
                          , AVG(B.TREND_RATE) OVER ( PARTITION BY B.ANALY_CLASS )    AS CLASS_TR
                       FROM ( SELECT A.ANALY_CLASS, A.ITEM_CODE, A.SITE_CODE, A.DC_CODE
                                   , ROUND(AVG(A.QTY), 2) AS MEAN
                                   , ROUND(STDDEV(A.QTY), 2 ) AS STD
                                   , DECODE( AVG(A.QTY), 0, 0, ROUND(STDDEV(A.QTY)/AVG(A.QTY),2))  AS CV
                                   , DECODE( SUM( (A.X-A.AVG_X)*(A.X-A.AVG_X)), 0, 0
                                   , DECODE( MAX(A.AVG_Y), 0, 0, ABS(ROUND( SUM( (A.X - A.AVG_X)*(A.Y- A.AVG_Y) ) / SUM( (A.X-A.AVG_X)*(A.X-A.AVG_X) )/ MAX(A.AVG_Y) * 100, 2))) )  AS TREND_RATE
                                FROM ( SELECT Y.ANALY_CLASS, Y.ITEM_CODE, Y.SITE_CODE, Y.DC_CODE, Y.QTY, Y.X, Y.Y
                                            , AVG(Y.X) OVER (PARTITION BY Y.ANALY_CLASS, Y.ITEM_CODE, Y.SITE_CODE, Y.DC_CODE ) AVG_X
                                            , AVG(Y.Y) OVER (PARTITION BY Y.ANALY_CLASS, Y.ITEM_CODE, Y.SITE_CODE, Y.DC_CODE ) AVG_Y
                                         FROM ( SELECT X.ANALY_CLASS, X.ITEM_CODE
                                                     , X.SITE_CODE, X.DC_CODE, X.QTY
                                                     , RANK() OVER (PARTITION BY X.ITEM_CODE
                                                                               , X.SITE_CODE
                                                                               , X.DC_CODE ORDER BY X.SALES_MONTH ) AS X
                                                     , X.QTY AS Y
                                                  FROM ( SELECT DECODE('$!{analysis_group}', '20', U.ITEM_CLASS3, '30', U.ITEM_CLASS2, '40', U.ITEM_CLASS1, '000' ) AS ANALY_CLASS
                                                              , T.ITEM_CODE
                                                              , DECODE('$!{site_lv}', '50', T.SITE_CODE, '0' )  SITE_CODE
                                                              , DECODE('$!{dc_lv}', '30', T.DC_CODE, '00000' )  DC_CODE
                                                              , T.SALES_MONTH, SUM(T.SALES_QTY) QTY   
                                                           FROM SALES_HIST T, FCST_UNIT  U
                                                          WHERE T.ITEM_CODE = U.ITEM_CODE AND T.SITE_CODE = U.SITE_CODE
                                                            AND T.DC_CODE   = U.DC_CODE AND T.CUST_CODE = U.CUST_CODE
                                                            AND T.SALES_MONTH BETWEEN '$!{start_date}' AND '$!{end_date}'
                                                       GROUP BY DECODE('$!{analysis_group}' , '20', U.ITEM_CLASS3, '30', U.ITEM_CLASS2, '40', U.ITEM_CLASS1, '000' )
                                                              , T.ITEM_CODE, DECODE('$!{site_lv}', '50', T.SITE_CODE, '0' )
                                                              , DECODE('$!{dc_lv}', '30', T.DC_CODE, '00000' ), T.SALES_MONTH ) X ) Y )  A
                           GROUP BY A.ANALY_CLASS, A.ITEM_CODE, A.SITE_CODE, A.DC_CODE ) B ) C
                 , ITEM I1, ITEM I2, SITE S, DC D
             WHERE I1.ITEM_CODE = C.ANALY_CLASS  AND I1.ITEM_LEVEL = '$!{analysis_group}' 
               AND I2.ITEM_CODE = C.ITEM_CODE AND S.SITE_CODE  = C.SITE_CODE
               AND D.DC_CODE    = C.DC_CODE
          ORDER BY 1, 3, 5, 7
			 
		#else
		
			SELECT T.ITEM_CLASS_CODE
			     , I1.ITEM_DESC AS ITEM_DESC1
			     , T.ITEM_CODE
			     , I2.ITEM_DESC AS ITEM_DESC2
			     , T.SITE_CODE
			     , S.SITE_DESC
			     , T.DC_CODE
			     , D.DC_DESC
			     , T.QUADRANT
			     , ROUND(T.MEAN_VALUE, 1)
			     , ROUND(T.STD_VALUE, 1)
			     , ROUND(T.CV_VALUE, 1)
			     , ROUND(T.CLASS_MEAN_VALUE, 1)
			  FROM COV_CATEGORY T
			     , ITEM I1
			     , ITEM I2
			     , SITE S
			     , DC   D
			 WHERE T.ITEM_CLASS_CODE = I1.ITEM_CODE
			   AND T.ITEM_CLASS_LEVEL = I1.ITEM_LEVEL
			   AND T.ITEM_CODE  = I2.ITEM_CODE
			   AND T.ITEM_LEVEL = I2.ITEM_LEVEL
			   AND T.SITE_CODE  = S.SITE_CODE
			   AND T.SITE_LEVEL = S.SITE_LEVEL
			   AND T.DC_CODE    = D.DC_CODE
			   AND T.DC_LEVEL   = D.DC_LEVEL
			   AND T.ANALYSIS_TYPE = '$!{analysis_method}'                      -- 조회조건에서 선택한 3.분석방법CD
			  [AND T.ITEM_CODE = '${item_cd}']	
			  [AND T.QUADRANT = '${quadrant}']	   
			 ORDER BY T.ITEM_CLASS_CODE, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE						
		#end
	</query>
	
	<!-- COV Delete -->
	<query id="fc_02050_cov_delete" paging="false">
		DELETE FROM COV_CATEGORY WHERE ANALYSIS_TYPE = '$!{analysis_method}'
	</query>
	
	<!-- COV Insert -->
	<query id="fc_02050_cov_insert" paging="false">
		INSERT INTO COV_CATEGORY  
	         ( 
	           ANALYSIS_TYPE, ITEM_CLASS_CODE, ITEM_CLASS_LEVEL, ITEM_CODE		          
	         , ITEM_LEVEL, SITE_CODE, SITE_LEVEL, DC_CODE, DC_LEVEL
	         , QUADRANT, MEAN_VALUE, STD_VALUE, CV_VALUE, CLASS_MEAN_VALUE 
	         )
        
            SELECT '$!{analysis_method}' AS "분석방법"
                 , C.ANALY_CLASS AS "제품분류코드"
			     , '$!{analysis_group}' AS "분석기준그룹"
                 , C.ITEM_CODE AS "품목코드"    
                 , '$!{item_lv}' AS ITEM_LEVEL
                 , C.SITE_CODE AS "영업지점코드"  
                 , '$!{site_lv}' AS SITE_LEVEL
                 , C.DC_CODE AS "배송지점코드"  
                 , '$!{dc_lv}' AS DC_LEVEL
                 , DECODE( TRUNC( C.CV/ '$!{cov_index}' ), 0, DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', DECODE(C.CLASS_MEAN, 0, 0, C.MEAN/C.CLASS_MEAN), DECODE(C.CLASS_TR, 0, 0, C.TREND_RATE/C.CLASS_TR)) ), 0, 4, 1 )
                 , DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', DECODE(C.CLASS_MEAN, 0, 0, C.MEAN/C.CLASS_MEAN), DECODE(C.CLASS_TR, 0, 0, C.TREND_RATE/C.CLASS_TR)) ), 0, 3, 2 ) ) AS "사분면"
                -- , DECODE( TRUNC( C.CV/ '$!{cov_index}' ), 0, DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', C.MEAN/C.CLASS_MEAN, C.TREND_RATE/C.CLASS_TR) ), 0, 4, 1 )
                -- , DECODE( TRUNC( DECODE( '$!{analysis_method}', 'CVXVOL', C.MEAN/C.CLASS_MEAN, C.TREND_RATE/C.CLASS_TR) ), 0, 3, 2 ) ) AS "사분면"
                 , DECODE('$!{analysis_method}', 'CVXVOL', C.MEAN, C.TREND_RATE)  AS "평균실적/TREND", C.STD AS "표준편차", C.CV AS "CV"
                 , DECODE('$!{analysis_method}', 'CVXVOL', C.CLASS_MEAN, C.CLASS_TR)  AS "제품분류평균/TREND"
              FROM ( SELECT B.ANALY_CLASS, B.ITEM_CODE, B.SITE_CODE, B.DC_CODE
                          , B.MEAN, B.STD, B.CV, B.TREND_RATE
                          , ROUND(AVG(B.MEAN) OVER ( PARTITION BY B.ANALY_CLASS ),2) AS CLASS_MEAN
                          , AVG(B.TREND_RATE) OVER ( PARTITION BY B.ANALY_CLASS )    AS CLASS_TR
                       FROM ( SELECT A.ANALY_CLASS, A.ITEM_CODE, A.SITE_CODE, A.DC_CODE
                                   , ROUND(AVG(A.QTY), 2) AS MEAN
                                   , ROUND(STDDEV(A.QTY), 2 ) AS STD
                                   , DECODE( AVG(A.QTY), 0, 0, ROUND(STDDEV(A.QTY)/AVG(A.QTY),2))  AS CV
                                   , DECODE( SUM( (A.X-A.AVG_X)*(A.X-A.AVG_X)), 0, 0
                                   , DECODE( MAX(A.AVG_Y), 0, 0, ABS(ROUND( SUM( (A.X - A.AVG_X)*(A.Y- A.AVG_Y) ) / SUM( (A.X-A.AVG_X)*(A.X-A.AVG_X) )/ MAX(A.AVG_Y) * 100, 2))) )  AS TREND_RATE
                                FROM ( SELECT Y.ANALY_CLASS, Y.ITEM_CODE, Y.SITE_CODE, Y.DC_CODE, Y.QTY, Y.X, Y.Y
                                            , AVG(Y.X) OVER (PARTITION BY Y.ANALY_CLASS, Y.ITEM_CODE, Y.SITE_CODE, Y.DC_CODE ) AVG_X
                                            , AVG(Y.Y) OVER (PARTITION BY Y.ANALY_CLASS, Y.ITEM_CODE, Y.SITE_CODE, Y.DC_CODE ) AVG_Y
                                         FROM ( SELECT X.ANALY_CLASS, X.ITEM_CODE
                                                     , X.SITE_CODE, X.DC_CODE, X.QTY
                                                     , RANK() OVER (PARTITION BY X.ITEM_CODE
                                                                               , X.SITE_CODE
                                                                               , X.DC_CODE ORDER BY X.SALES_MONTH ) AS X
                                                     , X.QTY AS Y
                                                  FROM ( SELECT DECODE('$!{analysis_group}', '20', U.ITEM_CLASS3, '30', U.ITEM_CLASS2, '40', U.ITEM_CLASS1, '000' ) AS ANALY_CLASS
                                                              , T.ITEM_CODE
                                                              , DECODE('$!{site_lv}', '50', T.SITE_CODE, '0' )  SITE_CODE
                                                              , DECODE('$!{dc_lv}', '30', T.DC_CODE, '00000' )  DC_CODE
                                                              , T.SALES_MONTH, SUM(T.SALES_QTY) QTY   
                                                           FROM SALES_HIST T, FCST_UNIT  U
                                                          WHERE T.ITEM_CODE = U.ITEM_CODE AND T.SITE_CODE = U.SITE_CODE
                                                            AND T.DC_CODE   = U.DC_CODE AND T.CUST_CODE = U.CUST_CODE
                                                            AND T.SALES_MONTH BETWEEN '$!{start_date}' AND '$!{end_date}'
                                                       GROUP BY DECODE('$!{analysis_group}' , '20', U.ITEM_CLASS3, '30', U.ITEM_CLASS2, '40', U.ITEM_CLASS1, '000' )
                                                              , T.ITEM_CODE, DECODE('$!{site_lv}', '50', T.SITE_CODE, '0' )
                                                              , DECODE('$!{dc_lv}', '30', T.DC_CODE, '00000' ), T.SALES_MONTH ) X ) Y )  A
                           GROUP BY A.ANALY_CLASS, A.ITEM_CODE, A.SITE_CODE, A.DC_CODE ) B ) C
                 , ITEM I1, ITEM I2, SITE S, DC D
             WHERE I1.ITEM_CODE = C.ANALY_CLASS  AND I1.ITEM_LEVEL = '$!{analysis_group}' 
               AND I2.ITEM_CODE = C.ITEM_CODE AND S.SITE_CODE  = C.SITE_CODE
               AND D.DC_CODE    = C.DC_CODE	
          		
	</query>
	
<!--
=====================================================================================================
 끝 
=====================================================================================================
--> 

	<!--	
	======================================================================
		수요예측 Parameter 관리
	======================================================================
	-->
	
	<!-- 수요예측 방법 : Combo Box -->	
	<query id="fc_03010_fcst_methods" paging="false">
		SELECT T.FCST_METHOD_CODE 
		     , T.FCST_NAME
		  FROM FORECASTING_PARAMETERS T 
		 WHERE T.PARAMETER_NO  = '01'		 	
	</query>
	
	<!-- 수요예측 방법 : tailer -->	
	<query id="fc_03010_parameterMgmt_tailer" paging="false">
		SELECT T.FCST_METHOD_CODE
             , T.FCST_NAME
             , T.PARAMETER_NO 
             , T.PARAMETER_NAME 
             , T.PARAMETER_VALUE 
             , T.NOTE
          FROM FORECASTING_PARAMETERS T, DUAL D 
         WHERE T.FCST_METHOD_CODE  = NVL('$!{fcst_method}', T.FCST_METHOD_CODE )
      ORDER BY T.FCST_METHOD_CODE , T.PARAMETER_NO	 	
	</query>
	
	<!-- 수요예측 방법 : 저장 -->	
	<query id="fc_03010_parameterMgmt_tailer_update" iterator="fcst_method_cd fcst_method_no param_value etc" fix="_user_id">
		UPDATE FORECASTING_PARAMETERS T
           SET T.PARAMETER_VALUE  = '$!{param_value}'
             , T.NOTE = '$!{etc}'
             , T.LAST_UPDATE_DATE = SYSDATE
             , T.LAST_UPDATED_BY  = '$!{_user_id}'
         WHERE T.FCST_METHOD_CODE = '$!{fcst_method_cd}'
           AND T.PARAMETER_NO = '$!{fcst_method_no}'
	</query>
	
	<!-- Demand Manager Workbench/Data Management Workbench -->
	<!-- Forecasts Creation UI Header-->
	
	<query id="prod_groups" paging="false">
		SELECT T.CAT02 AS LVL, T.CAT05 AS LVL_TYPE
		  FROM CODE_MST T
		 WHERE T.CD_GRP = 'QUERY_GRP1'
		   AND T.CAT01  = '품종분류'
		 ORDER BY 1		
	</query>
	<query id="sales_groups" paging="false">
		SELECT T.CAT02 AS LVL, T.CAT05 AS LVL_TYPE
		  FROM CODE_MST T
		 WHERE T.CD_GRP = 'QUERY_GRP1'
		   AND T.CAT01  = '영업'
		 ORDER BY 1
	</query>
	<query id="delivery_groups" paging="false">
		SELECT T.CAT02 AS LVL, T.CAT05 AS LVL_TYPE
		  FROM CODE_MST T
		 WHERE T.CD_GRP = 'QUERY_GRP1'
		   AND T.CAT01  = '물류거점'
		 ORDER BY 1
	</query>
	<query id="transfer_groups" paging="false">
		SELECT T.CAT02 AS LVL, T.CAT05 AS LVL_TYPE
		  FROM CODE_MST T
		 WHERE T.CD_GRP = 'QUERY_GRP1'
		   AND T.CAT01  = '유통분류'
		 ORDER BY 1
	</query>
	
	<query id="oper_types" paging="false">
		SELECT CD, CD_NAME
          FROM CODE_MST
         WHERE CD_GRP = 'OPER_TYPE'
           AND CAT05 = 'Y'
           AND ENABLE_CHK = 'Y'
      ORDER BY CAT01
	</query>
	
	<query id="act_res_start" paging="false">
		SELECT DISTINCT DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01'
                                                          , 'W', T.THIS_MONDAY ) AS START_DATE
          FROM PLAN_CALENDAR T
         WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
               BETWEEN DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-36),'YYYYMM') 
                                                         , 'W', TO_CHAR(ADD_MONTHS(SYSDATE, -36) -7 , 'YYYYMMDD') )
           AND DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM') 
                                                 , 'W', TO_CHAR(SYSDATE -7, 'YYYYMMDD') ) 
      ORDER BY 1
	</query>
	
	<query id="act_res_end" paging="false">
		SELECT DISTINCT DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(LAST_DAY(TO_DATE(T.YYYYMM,'YYYYMM')),'YYYYMMDD')
                                                          , 'W', TO_CHAR(TO_DATE(T.THIS_MONDAY,'YYYYMMDD') + 6,'YYYYMMDD') ) AS END_DATE
          FROM PLAN_CALENDAR T
         WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
       BETWEEN DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS('$!{start}', 0),'YYYYMM') 
                                                 , 'W', TO_CHAR(ADD_MONTHS('$!{start}', 0), 'YYYYMMDD') )
           AND DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-1),'YYYYMM') 
                                                 , 'W', TO_CHAR(SYSDATE -7, 'YYYYMMDD') ) 
      ORDER BY 1
	</query>
	
	<query id="forecasts_methods" paging="false">
		SELECT DISTINCT FCST_METHOD_CODE, FCST_NAME
  		  FROM FORECASTING_PARAMETERS
  	     WHERE FCST_METHOD_CODE != 'OPT'
  	       AND ACTIVE_CHECK = 'Y'
	</query>
	
	<query id="disaggr_rules" paging="false">
		SELECT FCST_METHOD_CODE, FCST_NAME
          FROM FORECASTING_PARAMETERS
         WHERE DISAGGR_CHECK = 'Y'
	</query>
	
	<query id="hrchy_codes" paging="false">
		SELECT HID 
		  FROM HRCHY 
		 WHERE HTYPE = '$!{htype}' 
		   AND LVL = '$!{hrchy_lvl}' 
		   AND HID_NAME LIKE '$!{hrchy_name}%'
	</query>
		
	<query id="product_type1" paging="false">
		SELECT DISTINCT X.P1CODE, X.P1NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME, C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME, A.HID AS P4CODE, A.HID_NAME AS P4NAME
                   FROM HRCHY A, HRCHY B, HRCHY C, HRCHY D
                  WHERE A.HTYPE = '품종분류' AND A.LVL = 50 AND A.PARENT_HID = B.HID
                    AND B.HTYPE = '품종분류' AND B.LVL = 40 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '품종분류' AND C.LVL = 30 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '품종분류' AND D.LVL = 20 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{prod_1}',',')) )
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{prod_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{prod_3}',',')) )
           AND X.P4CODE IN ( SELECT NVL(COLUMN_VALUE, X.P4CODE) FROM TABLE(SPLIT('$!{prod_4}',',')) )
      ORDER BY X.P1CODE, X.P1NAME
	</query>
	<query id="product_type2" paging="false">
		SELECT DISTINCT X.P2CODE, X.P2NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME, C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME, A.HID AS P4CODE, A.HID_NAME AS P4NAME
                   FROM HRCHY A, HRCHY B, HRCHY C, HRCHY D
                  WHERE A.HTYPE = '품종분류' AND A.LVL = 50 AND A.PARENT_HID = B.HID
                    AND B.HTYPE = '품종분류' AND B.LVL = 40 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '품종분류' AND C.LVL = 30 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '품종분류' AND D.LVL = 20 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{prod_1}',',')) ) 
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{prod_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{prod_3}',',')) )   
           AND X.P4CODE IN ( SELECT NVL(COLUMN_VALUE, X.P4CODE) FROM TABLE(SPLIT('$!{prod_4}',',')) )
      ORDER BY X.P2CODE, X.P2NAME
	</query>
	<query id="product_type3" paging="false">
		SELECT DISTINCT X.P3CODE, X.P3NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME, C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME, A.HID AS P4CODE, A.HID_NAME AS P4NAME
                   FROM HRCHY A, HRCHY B, HRCHY C, HRCHY D
                  WHERE A.HTYPE = '품종분류' AND A.LVL = 50 AND A.PARENT_HID = B.HID
                    AND B.HTYPE = '품종분류' AND B.LVL = 40 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '품종분류' AND C.LVL = 30 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '품종분류' AND D.LVL = 20 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{prod_1}',',')) ) 
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{prod_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{prod_3}',',')) )   
           AND X.P4CODE IN ( SELECT NVL(COLUMN_VALUE, X.P4CODE) FROM TABLE(SPLIT('$!{prod_4}',',')) )
      ORDER BY X.P3CODE, X.P3NAME
	</query>
	<query id="product_type4" paging="false">
		SELECT DISTINCT X.P4CODE, X.P4NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME, C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME, A.HID AS P4CODE, A.HID_NAME AS P4NAME
                   FROM HRCHY A, HRCHY B, HRCHY C, HRCHY D
                  WHERE A.HTYPE = '품종분류' AND A.LVL = 50 AND A.PARENT_HID = B.HID
                    AND B.HTYPE = '품종분류' AND B.LVL = 40 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '품종분류' AND C.LVL = 30 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '품종분류' AND D.LVL = 20 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{prod_1}',',')) ) 
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{prod_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{prod_3}',',')) )   
           AND X.P4CODE IN ( SELECT NVL(COLUMN_VALUE, X.P4CODE) FROM TABLE(SPLIT('$!{prod_4}',',')) )
      ORDER BY X.P4CODE, X.P4NAME
	</query>
	
	<query id="sales_centers" paging="false">
		SELECT DISTINCT X.P1CODE, X.P1NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME
                      , C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME
                   FROM HRCHY B, HRCHY C, HRCHY D
                  WHERE B.HTYPE = '영업' AND B.LVL = 50 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '영업' AND C.LVL = 40 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '영업' AND D.LVL = 30 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{sales_1}',',')) )  
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{sales_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{sales_3}',',')) ) 
      ORDER BY 1
	</query>
	<query id="sales_depts" paging="false">
		SELECT DISTINCT X.P2CODE, X.P2NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME
                      , C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME
                   FROM HRCHY B, HRCHY C, HRCHY D
                  WHERE B.HTYPE = '영업' AND B.LVL = 50 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '영업' AND C.LVL = 40 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '영업' AND D.LVL = 30 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{sales_1}',',')) )
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{sales_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{sales_3}',',')) )
      ORDER BY 1
	</query>
	<query id="sales_locs" paging="false">
		SELECT DISTINCT X.P3CODE, X.P3NAME
          FROM ( SELECT D.HID AS P1CODE, D.HID_NAME AS P1NAME
                      , C.HID AS P2CODE, C.HID_NAME AS P2NAME
                      , B.HID AS P3CODE, B.HID_NAME AS P3NAME
                   FROM HRCHY B, HRCHY C, HRCHY D
                  WHERE B.HTYPE = '영업' AND B.LVL = 50 AND B.PARENT_HID = C.HID
                    AND C.HTYPE = '영업' AND C.LVL = 40 AND C.PARENT_HID = D.HID
                    AND D.HTYPE = '영업' AND D.LVL = 30 ) X
         WHERE X.P1CODE IN ( SELECT NVL(COLUMN_VALUE, X.P1CODE) FROM TABLE(SPLIT('$!{sales_1}',',')) )
           AND X.P2CODE IN ( SELECT NVL(COLUMN_VALUE, X.P2CODE) FROM TABLE(SPLIT('$!{sales_2}',',')) )
           AND X.P3CODE IN ( SELECT NVL(COLUMN_VALUE, X.P3CODE) FROM TABLE(SPLIT('$!{sales_3}',',')) )
      ORDER BY 1
	</query>
	
	<query id="delivery_locs" paging="false">
		SELECT T.DC_CODE, T.DC_DESC 
          FROM DC T, DUAL A
         WHERE T.DC_LEVEL = 30
           AND T.CUSTOMIZECHECK = 'N'
           AND T.DC_CODE IN ( SELECT NVL(COLUMN_VALUE, T.DC_CODE) FROM TABLE(SPLIT('$!{delivery_1}',',')) )
      ORDER BY T.DC_CODE
	</query>
	
	<query id="item_types" paging="false">
	    SELECT I.ITEM_CODE, I.ITEM_DESC
	      FROM ITEM I, DUAL A
	     WHERE I.ITEM_LEVEL = 40
	    -- AND I.CUSTOMIZECHECK = 'Y'
	  ORDER BY I.ITEM_CODE
	</query>	
	<query id="items" paging="false">
	    SELECT T.ITEM_CODE, T.ITEM_DESC           
          FROM ITEM T, HRCHY H
         WHERE T.ITEM_LEVEL = 50
        -- AND H.CUSTOMIZECHECK = 'Y'
           AND T.ITEM_CODE = H.HID
           AND H.HTYPE = '품종분류'
           AND H.PARENT_HID IN ( SELECT COLUMN_VALUE FROM TABLE(SPLIT('$!{item_group1}',',')) ) 
      ORDER BY T.ITEM_CODE           
	</query>
	<query id="transfers" paging="false">
		SELECT CUST_CODE, CUST_CODE -- CUST_DESC
          FROM CUST
         WHERE CUST_LEVEL = 20
	</query>
	<query id="customers" paging="false">
		SELECT T.CUST_CODE, T.CUST_CODE -- T.CUST_DESC
          FROM CUST T, HRCHY H
         WHERE T.CUST_LEVEL = 30 
           --AND T.CUSTOMIZECHECK = 'N'
           AND T.CUST_CODE = H.HID
           AND H.HTYPE = '유통분류'
           AND H.PARENT_HID IN ( SELECT COLUMN_VALUE FROM TABLE(SPLIT('$!{transfer_1}',',')) )
      ORDER BY T.CUST_CODE
	</query>
	
	<query id="forecasts_parameters" paging="false">
		SELECT GEN_FCST_CODE( '$!{oper_typeP}', NVL('$!{modify_checkP}', 'N'))  AS FORECASTCODE
             , NVL('$!{fcst_descP}', TO_CHAR(SYSDATE,'YYYYMMDD')||T.CAT12 ) AS FORECASTNAME
             , T.CAT01  AS FORECASTCLASS
             , '$!{oper_typeP}'  AS OPERATIONTYPE
             , T.CAT03  AS FORECASTBUCKET                     
             , NVL('$!{item_lvP}', T.CAT04)  AS ITEM_LV
             , NVL('$!{site_lvP}', T.CAT05)  AS SITE_LV
             , NVL('$!{dc_lvP}', T.CAT06)  AS DC_LV
             , T.CAT07 AS CUST_LV
             , NVL('$!{fcst_methodP}', T.CAT08)  AS FCST_METHOD
             , NVL('$!{hist_startP}', DECODE( SUBSTR('$!{oper_typeP}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE, -1 * TO_NUMBER(T.CAT09)),'YYYYMM')||'01'
                                            , 'W', TO_CHAR(TRUNC(SYSDATE - 7 * TO_NUMBER(T.CAT09), 'DAY') + 1, 'YYYYMMDD')
               )) AS HIST_START
             , NVL('$!{hist_endP}', DECODE( SUBSTR('$!{oper_typeP}',1,1), 'M', TO_CHAR(LAST_DAY(ADD_MONTHS(SYSDATE, -1)),'YYYYMMDD')
                                          , 'W', TO_CHAR(TRUNC(SYSDATE, 'DAY'), 'YYYYMMDD')
               )) AS HIST_END
            -- , NVL('$!{modify_checkP}', 'N') AS MODIFYCHECK
             , NVL('$!{disaggr_ruleP}', T.CAT14) AS DISAGGR_RULE
             , TO_NUMBER(T.CAT13)  AS FORECASTBUCKETNUM
             , TO_NUMBER(T.CAT10)  AS FCST_RANGE                     
             , X.MOVINGPERIOD, X.WEIGHTEDMOVINGPERIOD, X.LEVELFACTOR
             , X.TRENDFACTOR, X.SEASONLFACTOR, X.PROCESSINGLEVEL
             , X.DAMPINGFACTOR, X.SMOOTHINGFACTOR
          FROM CODE_MST T 
             , ( SELECT MAX(DECODE(T.FCST_METHOD_CODE, 'SMA', DECODE(T.PARAMETER_NO, '01', T.PARAMETER_VALUE, ''), '')) AS MOVINGPERIOD
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'WMA', DECODE(T.PARAMETER_NO, '01', T.PARAMETER_VALUE, ''), '')) AS WEIGHTEDMOVINGPERIOD
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'NORWIN', DECODE(T.PARAMETER_NO, '03', T.PARAMETER_VALUE, ''), '')) AS LEVELFACTOR
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'NORWIN', DECODE(T.PARAMETER_NO, '04', T.PARAMETER_VALUE, ''), '')) AS TRENDFACTOR
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'NORWIN', DECODE(T.PARAMETER_NO, '05', T.PARAMETER_VALUE, ''), '')) AS SEASONLFACTOR
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'LOG', DECODE(T.PARAMETER_NO, '01', T.PARAMETER_VALUE, ''), '')) AS PROCESSINGLEVEL
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'LOG', DECODE(T.PARAMETER_NO, '03', T.PARAMETER_VALUE, ''), '')) AS DAMPINGFACTOR
                      , MAX(DECODE(T.FCST_METHOD_CODE, 'EXPSMT', DECODE(T.PARAMETER_NO, '01', T.PARAMETER_VALUE, ''), '')) AS SMOOTHINGFACTOR
                
                   FROM FORECASTING_PARAMETERS T ) X
                  WHERE T.CD_GRP = 'BATCH_OPTION'
                    AND T.CD     = '$!{oper_typeP}'
	</query>
	
	<query id="sales_historys" paging="false">
	#if ("$!{is_pos_dataP}" == "Y")
		SELECT Y.FCST_UNIT_ID AS DISAGGR_UNIT_ID
             , Y.ITEM_CODE
             , Y.SITE_CODE
             , Y.DC_CODE
             , Y.CUST_CODE
             , Y.SALES_DATE
             , Y.SALES_QTY
             , Y.BUCKET_CNT
             , Y.MIN_HIST
             , Y.MAX_HIST
             , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', MONTHS_BETWEEN(TO_DATE(Y.MAX_HIST,'YYYYMMDD'), TO_DATE(Y.MIN_HIST,'YYYYMMDD') ) + 1
                                              , TRUNC(( TO_DATE(Y.MAX_HIST,'YYYYMMDD') - TO_DATE(Y.MIN_HIST,'YYYYMMDD') )/7)+1 ) AS IDEAL_BUCKET_CNT
             , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', MONTHS_BETWEEN(TO_DATE(Y.SALES_DATE,'YYYYMMDD'), TO_DATE(Y.MIN_HIST,'YYYYMMDD') ) + 1
                                              , TRUNC(( TO_DATE(Y.SALES_DATE,'YYYYMMDD') - TO_DATE(Y.MIN_HIST,'YYYYMMDD') )/7)+1 ) AS BUCKET_NUM
          FROM ( SELECT X.*
                      , COUNT(X.ITEM_CODE) OVER ( PARTITION BY X.FCST_UNIT_ID ) AS BUCKET_CNT
                      , MAX(X.SALES_DATE) OVER ( PARTITION BY X.FCST_UNIT_ID ) AS MAX_HIST
                      , MIN(X.SALES_DATE) OVER ( PARTITION BY X.FCST_UNIT_ID ) AS MIN_HIST
                   FROM ( SELECT A.FCST_UNIT_ID
                               , A.ITEM_CODE
                               , A.SITE_CODE
                               , A.DC_CODE
                               , A.CUST_CODE
                               , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', T.SALES_MONTH, T.SALES_WEEK ) AS SALES_DATE
                               , SUM(( T.ADJUSTED_SALES_QTY + DECODE('$!{other_accountP}','Y', T.ADJUSTED_EVENT_QTY,0)) * I.CONVERSION_QTY) AS SALES_QTY
                               --, SUM(( T.ADJUSTED_SALES_QTY + DECODE('$!{other_accountP}','Y', T.ADJUSTED_EVENT_QTY,0)) * 1) AS SALES_QTY
                            FROM POS_HIST T, FCST_UNIT A, ITEM I
                           WHERE T.ITEM_CODE = I.ITEM_CODE  
                             AND I.ITEM_LEVEL = '50' 
                             AND T.ITEM_CODE = A.ITEM_CODE
                             AND T.SITE_CODE = A.SITE_CODE  
                             AND T.DC_CODE   = A.DC_CODE  
                             AND T.CUST_CODE = A.CUST_CODE   --AND A.ITEM_CLASS1 = 'AA1' -- TEST용
                             
                             #if("$!{selected_item_codeP}" != ",")
                             [AND T.ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, T.ITEM_CODE) FROM TABLE( SPLIT( '${selected_item_codeP}', ',')) )]
                             #end
                             #if("$!{selected_site_codeP}" != ",")
                             [AND T.SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, T.SITE_CODE) FROM TABLE( SPLIT( '${selected_site_codeP}', ',')) )]
                             #end
                             #if("$!{selected_dc_codeP}" != ",")
                             [AND T.DC_CODE IN ( SELECT NVL(COLUMN_VALUE, T.DC_CODE) FROM TABLE( SPLIT( '${selected_dc_codeP}', ',')) )]
                             #end
                             #if("$!{prod_3P}" != ",")
                             [AND A.ITEM_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, A.ITEM_CLASS1) FROM TABLE( SPLIT( '${prod_3P}', ',')) )] 
	                         #end
	                         #if("$!{prod_2P}" != ",")
	                         [AND A.ITEM_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, A.ITEM_CLASS2) FROM TABLE( SPLIT( '${prod_2P}', ',')) )]
	                         #end
	                         #if("$!{prod_1P}" != ",")
	                         [AND A.ITEM_CLASS3 IN ( SELECT NVL(COLUMN_VALUE, A.ITEM_CLASS3) FROM TABLE( SPLIT( '${prod_1P}', ',')) )] 				                   
	                         #end
	                         #if("$!{sales_2P}" != ",")
	                         [AND A.SITE_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, A.SITE_CLASS1) FROM TABLE( SPLIT( '${sales_2P}', ',')) )]
	                         #end
	                         #if("$!{sales_1P}" != ",")
	                         [AND A.SITE_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, A.SITE_CLASS2) FROM TABLE( SPLIT( '${sales_1P}', ',')) )]
	                         #end
	                         AND A.FCST_UNIT_TYPE = DECODE('$!{is_analyze_dataP}', 'Y', A.FCST_UNIT_TYPE, 'N' )
                             AND DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', T.SALES_MONTH, T.SALES_WEEK ) BETWEEN '$!{hist_startP}' AND '$!{hist_endP}'
                        GROUP BY A.FCST_UNIT_ID
                               , A.ITEM_CODE
                               , A.SITE_CODE
                               , A.DC_CODE
                               , A.CUST_CODE
                               , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', T.SALES_MONTH, T.SALES_WEEK ) ) X ) Y
                                       
    #else
    
    	SELECT Y.FCST_UNIT_ID AS DISAGGR_UNIT_ID
             , Y.ITEM_CODE
             , Y.SITE_CODE
             , Y.DC_CODE
             , Y.CUST_CODE
             , Y.SALES_DATE
             , Y.SALES_QTY
             , Y.BUCKET_CNT
             , Y.MIN_HIST
             , Y.MAX_HIST
             , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', MONTHS_BETWEEN(TO_DATE(Y.MAX_HIST,'YYYYMMDD'), TO_DATE(Y.MIN_HIST,'YYYYMMDD') ) + 1
                                              , TRUNC(( TO_DATE(Y.MAX_HIST,'YYYYMMDD') - TO_DATE(Y.MIN_HIST,'YYYYMMDD') )/7)+1 ) AS IDEAL_BUCKET_CNT
             , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', MONTHS_BETWEEN(TO_DATE(Y.SALES_DATE,'YYYYMMDD'), TO_DATE(Y.MIN_HIST,'YYYYMMDD') ) + 1
                                              , TRUNC(( TO_DATE(Y.SALES_DATE,'YYYYMMDD') - TO_DATE(Y.MIN_HIST,'YYYYMMDD') )/7)+1 ) AS BUCKET_NUM
          FROM ( SELECT X.*
                      , COUNT(X.ITEM_CODE) OVER ( PARTITION BY X.FCST_UNIT_ID ) AS BUCKET_CNT
                      , MAX(X.SALES_DATE) OVER ( PARTITION BY X.FCST_UNIT_ID ) AS MAX_HIST
                      , MIN(X.SALES_DATE) OVER ( PARTITION BY X.FCST_UNIT_ID ) AS MIN_HIST
                   FROM ( SELECT A.FCST_UNIT_ID
                               , A.ITEM_CODE
                               , A.SITE_CODE
                               , A.DC_CODE
                               , A.CUST_CODE
                               , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', T.SALES_MONTH, T.SALES_WEEK ) AS SALES_DATE
                               , SUM(( T.ADJUSTED_SALES_QTY + DECODE('$!{other_accountP}','Y', T.ADJUSTED_EVENT_QTY,0)) * I.CONVERSION_QTY) AS SALES_QTY -- 실적수량 + (타계정실적 적용 시, 판촉실적) * 식단위변경수량
                               --, SUM(( T.ADJUSTED_SALES_QTY + DECODE('$!{other_accountP}','Y', T.ADJUSTED_EVENT_QTY,0)) * 1) AS SALES_QTY -- 실적수량 + (타계정실적 적용 시, 판촉실적) * 식단위변경수량
                            FROM SALES_HIST T, FCST_UNIT A, ITEM I
                           WHERE T.ITEM_CODE = I.ITEM_CODE  
                             AND I.ITEM_LEVEL = '50' 
                             AND T.ITEM_CODE = A.ITEM_CODE
                             AND T.SITE_CODE = A.SITE_CODE 
                             AND T.DC_CODE   = A.DC_CODE  
                             AND T.CUST_CODE = A.CUST_CODE 
                             #if("$!{selected_item_codeP}" != ",")
                             [AND T.ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, T.ITEM_CODE) FROM TABLE( SPLIT( '${selected_item_codeP}', ',')) )]
                             #end
                             #if("$!{selected_site_codeP}" != ",")
                             [AND T.SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, T.SITE_CODE) FROM TABLE( SPLIT( '${selected_site_codeP}', ',')) )]
                             #end
                             #if("$!{selected_dc_codeP}" != ",")
                             [AND T.DC_CODE IN ( SELECT NVL(COLUMN_VALUE, T.DC_CODE) FROM TABLE( SPLIT( '${selected_dc_codeP}', ',')) )]
                             #end
                             #if("$!{prod_3P}" != ",")
                             [AND A.ITEM_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, A.ITEM_CLASS1) FROM TABLE( SPLIT( '${prod_3P}', ',')) )] 
	                         #end
	                         #if("$!{prod_2P}" != ",")
	                         [AND A.ITEM_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, A.ITEM_CLASS2) FROM TABLE( SPLIT( '${prod_2P}', ',')) )]
	                         #end
	                         #if("$!{prod_1P}" != ",")
	                         [AND A.ITEM_CLASS3 IN ( SELECT NVL(COLUMN_VALUE, A.ITEM_CLASS3) FROM TABLE( SPLIT( '${prod_1P}', ',')) )] 				                   
	                         #end
	                         #if("$!{sales_2P}" != ",")
	                         [AND A.SITE_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, A.SITE_CLASS1) FROM TABLE( SPLIT( '${sales_2P}', ',')) )]
	                         #end
	                         AND A.FCST_UNIT_TYPE = DECODE('$!{is_analyze_dataP}', 'Y', A.FCST_UNIT_TYPE, 'N' )
                             AND DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', T.SALES_MONTH, T.SALES_WEEK ) BETWEEN '$!{hist_startP}' AND '$!{hist_endP}'
                        GROUP BY A.FCST_UNIT_ID
                               , A.ITEM_CODE
                               , A.SITE_CODE
                               , A.DC_CODE
                               , A.CUST_CODE
                               , DECODE( SUBSTR('$!{oper_typeP}',1,1) , 'M', T.SALES_MONTH, T.SALES_WEEK ) ) X ) Y
    #end
	</query>
	<query id="del_fcst_mast" paging="false">
		DELETE 
		  FROM FCST_MAST FMAST
         WHERE NOT EXISTS (SELECT 1 
                             FROM FCST_MAST CMAST 
                            WHERE FMAST.FCST_CODE = CMAST.ATTRIBUTE01 
                              AND CMAST.UPDATABLE_CHECK = 'N')
           AND FMAST.UPDATABLE_CHECK = 'Y'
           AND OPER_TYPE = '$!{oper_typeP}'
	</query>
	<query id="del_fcst_result_summary" paging="false">
		DELETE FROM FCST_RSLT_SUMMARY WHERE OPER_TYPE = '$!{oper_typeP}'
	</query>
	<query id="del_fcst_output" paging="false">
		#if("$!{oper_typeP}" == "MONTH")
			TRUNCATE TABLE FCST_OUTPUT_MONTHLY
		#elseif("$!{oper_typeP}" == "MANALY")
		    TRUNCATE TABLE FCST_OUTPUT_MANALY
		#elseif("$!{oper_typeP}" == "WEEK")
		    TRUNCATE TABLE FCST_OUTPUT_WEEKLY
		#else
		    TRUNCATE TABLE FCST_OUTPUT_WANALY
		#end
	</query>
	<query id="del_fcst_output_disaggr" paging="false">
	    #if("$!{oper_typeP}" == "MONTH")
			TRUNCATE TABLE FCST_OUTPUT_DISAGGR_MONTHLY
		#elseif("$!{oper_typeP}" == "MANALY")
		    TRUNCATE TABLE FCST_OUTPUT_DISAGGR_MANALY
		#elseif("$!{oper_typeP}" == "WEEK")
		    TRUNCATE TABLE FCST_OUTPUT_DISAGGR_WEEKLY
		#else
		    TRUNCATE TABLE FCST_OUTPUT_DISAGGR_WANALY
		#end	
	</query>
	
	<!-- Demand Manager Workbench/Data Management Workbench -->
	<!-- Forecasts Creation UI Tailer-->	
	<query id="fcst_log_list" paging="false">
		SELECT C.CD_NAME, T.FCST_CODE, T.FCST_DESC
		     , TO_CHAR(T.GEN_DATE, 'YYYY-MM-DD HH24:MI:SS') AS GEN_DATE
		     , T.FCST_OPTION
          FROM FCST_MAST T, CODE_MST  C
         WHERE T.OPER_TYPE = C.CD
           AND T.OPER_TYPE IN ('WEEK', 'WANALY', 'MANALY', 'MONTH')
           AND C.CD_GRP = 'OPER_TYPE'
      ORDER BY C.CD_NAME, T.GEN_DATE DESC
	</query>
	
	<query id="fcst_res_list" paging="true">
		SELECT B.FCST_CODE, B.FCST_DESC
             , A.ITEM_CODE, I.ITEM_DESC
             , A.SITE_CODE, S.SITE_DESC
             , A.DC_CODE, D.DC_DESC
             , A.CUST_CODE, C.CUST_DESC
             , NVL(F.FCST_NAME, 'NA')
             , A.ERROR_MESSAGE
          FROM FCST_RSLT_SUMMARY A, FCST_MAST B
             , ITEM I, SITE S, DC D, CUST C
             , ( SELECT DISTINCT FCST_METHOD_CODE, FCST_NAME
                   FROM FORECASTING_PARAMETERS ) F
         WHERE A.FCST_CODE = B.FCST_CODE
           AND A.ITEM_CODE = I.ITEM_CODE
           AND I.ITEM_LEVEL = B.ITEM_LV
           AND A.SITE_CODE = S.SITE_CODE
           AND S.SITE_LEVEL = B.SITE_LV
           AND A.DC_CODE    = D.DC_CODE
           AND D.DC_LEVEL   = B.DC_LV
           AND A.CUST_CODE  = C.CUST_CODE
           AND C.CUST_LEVEL = B.CUST_LV
           AND A.FCST_METHOD = F.FCST_METHOD_CODE(+)
           AND A.OPTIMAL_FLAG = 'Y'
           AND A.FCST_CODE = ( SELECT MAX(T.FCST_CODE)
                                 FROM FCST_MAST T
                                WHERE T.GEN_DATE = ( SELECT MAX(A.GEN_DATE)
                                                       FROM FCST_MAST A
                                                      WHERE A.OPER_TYPE = '$!{oper_type}' )
                                                        AND T.OPER_TYPE = '$!{oper_type}' )
	</query>
		
	<!-- Demand Manager Workbench/Data Management Workbench -->
	<!-- Forecasts Control UI Header-->
	<query id="select_1st" paging="false">
		SELECT T.CAT01 AS HTYPE, T.CAT02 AS LVL, T.CD_NAME -- DISPLAY
          FROM CODE_MST T, DUAL A
         WHERE T.CD_GRP = 'QUERY_GRP1' AND T.ENABLE_CHK = 'Y'
      ORDER BY T.CAT04
	</query>	
	<query id="s_units" paging="false">
		SELECT T.CD, T.CD_NAME -- DISPLAY
          FROM CODE_MST T 
         WHERE T.CD_GRP = 'ITEM_UOM'
	</query>
	
	<query id="fcst_codes" paging="false">
		SELECT T.FCST_CODE, T.FCST_DESC -- Display
          FROM FCST_MAST T, DUAL A
         WHERE T.OPER_TYPE = '$!{oper_type}' 
           AND EXISTS ( SELECT 1 
                          FROM FCST_RSLT_SUMMARY A 
                         WHERE A.OPER_TYPE = T.OPER_TYPE
                           AND A.FCST_CODE = T.FCST_CODE )
	</query>
	<query id="s_start" paging="false">
		SELECT DISTINCT 
		       DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01'
                                                 , 'W', T.THIS_MONDAY ) AS START_DATE
          FROM PLAN_CALENDAR T
         WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
       BETWEEN DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,-36),'YYYYMM') 
                                                 , 'W', TO_CHAR(ADD_MONTHS(SYSDATE, -36) -7 , 'YYYYMMDD') )
           AND DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,12),'YYYYMM') 
                                                 , 'W', TO_CHAR(SYSDATE + 63, 'YYYYMMDD') ) 
      ORDER BY 1
	</query>	
	<query id="s_end" paging="false">
		SELECT DISTINCT 
		       DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(LAST_DAY(TO_DATE(T.YYYYMM,'YYYYMM')),'YYYYMMDD')
                                                 , 'W', TO_CHAR(TO_DATE(T.THIS_MONDAY,'YYYYMMDD') + 6,'YYYYMMDD') ) AS END_DATE
          FROM PLAN_CALENDAR T
         WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
       BETWEEN DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS('$!{start}', 0),'YYYYMM') 
                                                 , 'W', TO_CHAR(ADD_MONTHS('$!{start}', 0), 'YYYYMMDD') )
           AND DECODE(SUBSTR('$!{oper_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,12),'YYYYMM') 
                                                 , 'W', TO_CHAR(SYSDATE + 63, 'YYYYMMDD') ) 
      ORDER BY 1     
	</query>
	<query id="func_regression" paging="false">
		SELECT GEN_FCST_EDIT('$!{firstLine}', '$!{level_ctl}', '$!{trend_ctl}', '$!{smooth_ctl}') AS LINE_DATA
		  FROM DUAL
	</query>
	<query id="sp_fcst_sales_control" paging="false">
		CALL SP_FC_ADJ_QTY('$!{this_type}','$!{oper_type}','$!{bf_code}','$!{c_type1}','$!{c_type2}','$!{c_type3}','$!{c_lv1}','$!{c_lv2}','$!{c_lv3}','$!{prod_4}','$!{prod_3}','$!{prod_2}','$!{prod_1}','$!{sales_3}','$!{sales_2}','$!{sales_1}','$!{dc_1}','$!{item_cd}','$!{sales_cd}','$!{dc_cd}','$!{dates}','$!{org_data}','$!{adj_data}','$!{_user_id}')
	</query>
	
	<!-- Demand Manager Workbench/Data Management Workbench -->
	<!-- Forecasts Control UI Tailer-->	
	<query id="fcst_ctl_cols" paging="false">
        SELECT 1 AS SEQ, CAT05 AS TITLE FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type1}' AND T.CAT02 = '$!{condition_level1}' UNION ALL
       -- SELECT 2 , CAT06 FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type1}' AND T.CAT02 = '$!{condition_level1}' UNION ALL
        SELECT 3 AS SEQ, CAT05 AS TITLE FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type2}' AND T.CAT02 = '$!{condition_level2}' UNION ALL
      --  SELECT 4 , CAT06 FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type2}' AND T.CAT02 = '$!{condition_level2}' UNION ALL
        SELECT 5 AS SEQ, CAT05 AS TITLE FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type3}' AND T.CAT02 = '$!{condition_level3}' UNION ALL
     --   SELECT 6 , CAT06 FROM CODE_MST T WHERE T.CD_GRP = 'QUERY_GRP1' AND T.CAT01 = '$!{condition_type3}' AND T.CAT02 = '$!{condition_level3}' UNION ALL
        SELECT 7, '구분' FROM DUAL UNION ALL
        SELECT 7 + ROWNUM, P.COL_NAME
          FROM ( SELECT DISTINCT DECODE( SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01', T.THIS_MONDAY ) COL_NAME
                   FROM PLAN_CALENDAR T
                  WHERE DECODE( SUBSTR('$!{oper_type}',1,1), 'M', T.YYYYMM||'01', T.THIS_MONDAY ) BETWEEN '$!{start}'
                    AND '$!{end}'
               ORDER BY 1 ) P
      ORDER BY 1
	</query>
	<query id="fcst_ctl_rows" paging="false">	    
        SELECT NVL(Z.ATT01,' '), NVL(A.ATT01_DESC,' '), Z.ATT02, NVL(B.ATT02_DESC,'미지정'), Z.ATT03, NVL(C.ATT03_DESC,'미지정'), Z.EFF_DATE, Z.SALES_QTY, Z.FCST_QTY, Z.UPDATE_CHK
		  FROM ( SELECT X.ORG_ID
		              , DECODE( '$!{condition_type1}', '품종분류', DECODE( '$!{condition_level1}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                    , '영업', DECODE( '$!{condition_level1}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                    , '물류거점', DECODE( '$!{condition_level1}', '30', X.DC_CODE, '00000' )) AS ATT01
		              , DECODE( '$!{condition_type2}', '품종분류', DECODE( '$!{condition_level2}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                     , '영업', DECODE( '$!{condition_level2}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level2}', '30', X.DC_CODE, '00000' ), 'ALL' ) AS ATT02
		              , DECODE( '$!{condition_type3}', '품종분류', DECODE( '$!{condition_level3}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                     , '영업', DECODE( '$!{condition_level3}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level3}', '30', X.DC_CODE, '00000' ), 'ALL' ) AS ATT03                
		              , X.EFF_DATE, X.UPDATE_CHK
		              , ROUND(SUM(NVL(S.SALES_QTY * DECODE('$!{s_unit}', 'BOX', 1, X.CONVERSION_QTY ),0)), 2 ) AS SALES_QTY
		              , ROUND(SUM(NVL(F.ADJUSTED_FCST_QTY / DECODE('$!{s_unit}', 'BOX', X.CONVERSION_QTY, 1 ),0)), 2 )  AS FCST_QTY
		           FROM ( SELECT T.ORG_ID, T.ITEM_CODE, SITE_CODE, DC_CODE, T.ITEM_CLASS1, T.ITEM_CLASS2, T.ITEM_CLASS3, T.SITE_CLASS1, T.SITE_CLASS2, P.EFF_DATE, P.UPDATE_CHK, I.CONVERSION_QTY
		                    FROM ( SELECT DISTINCT ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE
		                                , ITEM_CLASS1, ITEM_CLASS2, ITEM_CLASS3, SITE_CLASS1, SITE_CLASS2
		                             FROM FCST_UNIT
		                            WHERE FCST_UNIT_TYPE = DECODE('$!{is_analyze_data}', 'Y', FCST_UNIT_TYPE, 'N' )
		                            
		                            #if("$!{prod_4}" != ",")
                                     [AND ITEM_CODE IN ( SELECT NVL(COLUMN_VALUE, ITEM_CODE) FROM TABLE( SPLIT( '${prod_4}', ',')) )]
                                    #end 
                                    #if("$!{sales_3}" != ",")
		                             [AND SITE_CODE IN ( SELECT NVL(COLUMN_VALUE, SITE_CODE) FROM TABLE( SPLIT( '${sales_3}', ',')) )]
		                            #end 
                                   
		                             [AND DC_CODE   IN ( SELECT NVL(COLUMN_VALUE, DC_CODE) FROM TABLE( SPLIT( '${delivery_1}', ',')) )] 
		                            
                                    #if("$!{prod_3}" != ",")
		                             [AND ITEM_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS1) FROM TABLE( SPLIT( '${prod_3}', ',')) )]
		                            #end 
                                    #if("$!{prod_2}" != ",")
		                             [AND ITEM_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS2) FROM TABLE( SPLIT( '${prod_2}', ',')) )] 
		                            #end 
                                    #if("$!{prod_1}" != ",")
		                             [AND ITEM_CLASS3 IN ( SELECT NVL(COLUMN_VALUE, ITEM_CLASS3) FROM TABLE( SPLIT( '${prod_1}', ',')) )]
		                            #end 
                                    #if("$!{sales_2}" != ",")
		                             [AND SITE_CLASS1 IN ( SELECT NVL(COLUMN_VALUE, SITE_CLASS1) FROM TABLE( SPLIT( '${sales_2}', ',')) )]
		                            #end 
                                    #if("$!{sales_1}" != ",") 
		                             [AND SITE_CLASS2 IN ( SELECT NVL(COLUMN_VALUE, SITE_CLASS2) FROM TABLE( SPLIT( '${sales_1}', ',')) )]
		                            #end		                            
		                            ) T    
		                       , ITEM I
		              , ( SELECT DISTINCT P.ORG_ID, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) AS EFF_DATE
		                       , DECODE(GREATEST( DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ), F.HIST_END ), F.HIST_END, 'N', 'Y' ) AS UPDATE_CHK
		                    FROM PLAN_CALENDAR P, FCST_MAST F
		                   WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', P.YYYYMM||'01', P.THIS_MONDAY ) BETWEEN '$!{start}' AND '$!{end}'
		                     AND P.ORG_ID = F.ORG_ID AND F.FCST_CODE = '$!{fcst_code}' ) P
		          WHERE T.ORG_ID = I.ORG_ID AND T.ITEM_CODE = I.ITEM_CODE AND T.ORG_ID = P.ORG_ID   ) X		          
		     , ( SELECT ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) AS SALES_DATE 
		              , SUM(DECODE('$!{sales_type}', 'ORIGIN', SALES_QTY, 'ADJ', ADJUSTED_SALES_QTY )) SALES_QTY
		           FROM SALES_HIST
		          WHERE DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK ) BETWEEN '$!{start}' AND '$!{end}'
		       GROUP BY ORG_ID, ITEM_CODE, SITE_CODE, DC_CODE, DECODE(SUBSTR('$!{oper_type}',1,1), 'M', SALES_MONTH, SALES_WEEK )) S
		     , ( SELECT T.ORG_ID, T.ITEM_CODE, T.SITE_CODE, T.DC_CODE, T.FCST_DATE, T.FCST_QTY, T.ADJUSTED_FCST_QTY
		           #if("$!{oper_type}" == "MONTH")
					 FROM FCST_OUTPUT_DISAGGR_MONTHLY T
					 
				   #elseif("$!{oper_type}" == "MANALY")
				     FROM FCST_OUTPUT_DISAGGR_MANALY T
				     
				   #elseif("$!{oper_type}" == "WEEK")
					 FROM FCST_OUTPUT_DISAGGR_WEEKLY T
					 
				   #else
				     FROM FCST_OUTPUT_DISAGGR_WANALY T
				   #end		
		           
		          WHERE T.FCST_CODE = '$!{fcst_code}' AND T.FCST_DATE BETWEEN '$!{start}' AND '$!{end}'
		            AND T.FCST_METHOD = 'DISAGG') F
		 WHERE X.ORG_ID = S.ORG_ID(+) AND X.ITEM_CODE = S.ITEM_CODE(+) AND X.SITE_CODE = S.SITE_CODE(+) AND X.DC_CODE   = S.DC_CODE(+) AND X.EFF_DATE = S.SALES_DATE(+)
		   AND X.ORG_ID = F.ORG_ID(+) AND X.ITEM_CODE = F.ITEM_CODE(+) AND X.SITE_CODE = F.SITE_CODE(+) AND X.DC_CODE   = F.DC_CODE(+) AND X.EFF_DATE = F.FCST_DATE(+)
      GROUP BY X.ORG_ID
		     , DECODE( '$!{condition_type1}', '품종분류', DECODE( '$!{condition_level1}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                            , '영업', DECODE( '$!{condition_level1}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level1}', '30', X.DC_CODE, '00000' ))
		     , DECODE( '$!{condition_type2}', '품종분류', DECODE( '$!{condition_level2}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                   , '영업', DECODE( '$!{condition_level2}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level2}', '30', X.DC_CODE, '00000' ), 'ALL')
		     , DECODE( '$!{condition_type3}', '품종분류', DECODE( '$!{condition_level3}', '20', X.ITEM_CLASS3, '30', X.ITEM_CLASS2, '40', X.ITEM_CLASS1, '50', X.ITEM_CODE, '000' )
		                                     , '영업', DECODE( '$!{condition_level3}', '50', X.SITE_CODE, '40', X.SITE_CLASS1, '30', X.SITE_CLASS2, '0' )
		                                     , '물류거점', DECODE( '$!{condition_level3}', '30', X.DC_CODE, '00000' ), 'ALL')
		   , X.EFF_DATE, X.UPDATE_CHK  ) Z
           , ( SELECT ITEM_CODE AS ATT01_CODE, ITEM_DESC AS ATT01_DESC  FROM ITEM WHERE '품종분류' = '$!{condition_type1}'  AND ITEM_LEVEL = '$!{condition_level1}'  UNION ALL
		       SELECT SITE_CODE, SITE_DESC  FROM SITE  WHERE '영업' = '$!{condition_type1}'  AND SITE_LEVEL  = '$!{condition_level1}'  UNION ALL
		       SELECT DC_CODE, DC_DESC  FROM DC  WHERE '물류거점' = '$!{condition_type1}' AND DC_LEVEL  = '$!{condition_level1}' ) A
		   , ( SELECT ITEM_CODE AS ATT02_CODE, ITEM_DESC AS ATT02_DESC FROM ITEM WHERE '품종분류' = '$!{condition_type2}' AND ITEM_LEVEL = '$!{condition_level2}' UNION ALL
		       SELECT SITE_CODE, SITE_DESC FROM SITE WHERE '영업' = '$!{condition_type2}' AND SITE_LEVEL  = '$!{condition_level2}' UNION ALL
		       SELECT DC_CODE, DC_DESC FROM DC WHERE '물류거점' = '$!{condition_type2}' AND DC_LEVEL  = '$!{condition_level2}' ) B
		   , ( SELECT ITEM_CODE AS ATT03_CODE, ITEM_DESC AS ATT03_DESC FROM ITEM WHERE '품종분류' = '$!{condition_type3}' AND ITEM_LEVEL = '$!{condition_level3}' UNION ALL
		       SELECT SITE_CODE, SITE_DESC FROM SITE WHERE '영업' = '$!{condition_type3}' AND SITE_LEVEL  = '$!{condition_level3}' UNION ALL
		       SELECT DC_CODE, DC_DESC FROM DC WHERE '물류거점' = '$!{condition_type3}' AND DC_LEVEL  = '$!{condition_level3}' ) C
	   WHERE Z.ATT01  = A.ATT01_CODE(+) AND Z.ATT02  = B.ATT02_CODE(+) AND Z.ATT03  = C.ATT03_CODE(+)
    ORDER BY 1, 3, 5, 7
	</query>
	
	<!--
=====================================================================================================
	수요예측 >> 수요예측 관리 
=====================================================================================================
--> 
	
	<!--	
	======================================================================
		수요예측 확정 및 결과 Export
	======================================================================
	-->
	
	<!-- 계획 유형 리스트 -->
	<query id="conf_fcst_plan_type">
			SELECT  T.CD
			        , T.CD_NAME
			  FROM  CODE_MST T, DUAL A 
			 WHERE  T.CD_GRP = 'TIME_SCALE'
			   AND  T.CAT01 = 'Y'	
	
	</query>
	
	<!-- 수요예측 확정 및 결과 Export : tailer -->
	<query id="fc_03050_confirmFcstSearchResult_list0">	
		SELECT A.CD_NAME AS 수요예측유형
		     , T.FCST_CODE AS 계획코드
		     , T.FCST_DESC AS 계획명
		     , TO_CHAR(T.GEN_DATE, 'YYYY-MM-DD HH24:MI:SS') AS 생성일시		    
		     , T.HIST_START || '~' || T.HIST_END AS 실적기간
		     , T.MAIN_FCST_METHOD AS 수요예측방법		     
		  FROM FCST_MAST T
		     , CODE_MST A
		 WHERE T.OPER_TYPE = A.CD
		   AND A.CD_GRP = 'OPER_TYPE'
		   AND T.FCST_CLASS = 'FCST'
		   AND T.UPDATABLE_CHECK = 'Y'
		   AND T.OPER_TYPE IN ('WEEK', 'MONTH')
		 ORDER BY A.CD_NAME, T.GEN_DATE DESC 
	</query>
	<query id="fc_03050_confirmFcstSearchResult_list1">	
		SELECT A.CD AS 유형코드
		     , T.ATTRIBUTE01
		     , T.ATTRIBUTE02
		     , A.CD_NAME AS 수요예측유형
		     , T.FCST_CODE AS 계획코드
		     , T.FCST_DESC AS 계획명
		     , (SELECT X.FCST_DESC FROM FCST_MAST X WHERE X.FCST_CODE = T.ATTRIBUTE01) AS 월간참조계획명
		     , (SELECT X.FCST_DESC FROM FCST_MAST X WHERE X.FCST_CODE = T.ATTRIBUTE02) AS 주간참조계획명
		     , TO_CHAR(T.GEN_DATE, 'YYYY-MM-DD HH24:MI:SS') AS 생성일시
		     , TO_CHAR(T.EXPORT_DATE, 'YYYY-MM-DD HH24:MI:SS') AS EXPORT_일시
		     , T.HIST_START || '~' || T.HIST_END AS 실적기간
		     , T.MAIN_FCST_METHOD AS 수요예측방법
		     , T.ATTRIBUTE01 || ' : ' || T.ATTRIBUTE02 AS 참조수요예측
		  FROM FCST_MAST T
		     , CODE_MST A
		 WHERE T.OPER_TYPE = A.CD
		   AND A.CD_GRP = 'OPER_TYPE'
		   AND T.FCST_CLASS = 'FCST'
		   AND T.UPDATABLE_CHECK = 'N'
		   AND T.OPER_TYPE IN ('WCONF', 'MCONF')
	  ORDER BY A.CD_NAME, T.GEN_DATE DESC 
	</query>
	
	<!-- 삭제 : FCST_MAST DELETE -->
	<query id="fc_03050_confirmFcstSearchResult_fcstMast1_del">
		DELETE FROM FCST_MAST WHERE FCST_CODE = '$!{del_code}'
	</query>
	
	<query id="fc_03050_confirmFcstSearchResult_fcstMast2_del">
		DELETE FROM FCST_MAST 
		      WHERE FCST_CODE = '$!{attr01}'
		        AND NOT EXISTS ( SELECT 1 
		                           FROM FCST_MAST 
		                          WHERE ( ATTRIBUTE01 = '$!{attr01}'
		                               OR ATTRIBUTE02 = '$!{attr01}'
		                                )
		                        )
		        AND NOT EXISTS ( SELECT 1 
                                   FROM FCST_RSLT_SUMMARY FRS, FCST_MAST FMA
                                  WHERE FRS.FCST_CODE = FMA.FCST_CODE                                     
                                    AND FRS.FCST_CODE = '$!{attr01}'                                       
                                )
	</query>
	
	<query id="fc_03050_confirmFcstSearchResult_fcstMast3_del">
		DELETE FROM FCST_MAST 
		      WHERE FCST_CODE = '$!{attr02}'
		        AND NOT EXISTS ( SELECT 1 
		                           FROM FCST_MAST 
		                          WHERE ( ATTRIBUTE01 = '$!{attr02}'
		                               OR ATTRIBUTE02 = '$!{attr02}'
		                                )
		                        )
		        AND NOT EXISTS ( SELECT 1 
                                   FROM FCST_RSLT_SUMMARY FRS, FCST_MAST FMA
                                  WHERE FRS.FCST_CODE = FMA.FCST_CODE                                     
                                    AND FRS.FCST_CODE = '$!{attr02}'                                       
                                )
	</query>
	
	<!-- 삭제 : FCST_PLAN_MONTHLY/FCST_PLAN_WEEKLY DELETE -->
	<query id="fc_03050_confirmFcstSearchResult_fcstPlan_del">
	#if ("$!{del_oper_type}" == "MCONF")
		DELETE FROM FCST_PLAN_MONTHLY WHERE FCST_CODE = '$!{del_code}'
	#elseif ("$!{del_oper_type}" == "WCONF")
		DELETE FROM FCST_PLAN_WEEKLY WHERE FCST_CODE = '$!{del_code}'
	#end
	</query>
	
	<!-- 시작월/주 리스트 -->
	<query id="conf_fcst_start_month_week">	
		 SELECT DISTINCT DECODE(SUBSTR('${selected_plan_type}',1,1), 'M', T.YYYYMM||'01', 'W', T.THIS_MONDAY ) AS START_DATE
		   FROM PLAN_CALENDAR T
		  WHERE T.EFF_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
	--	  WHERE DECODE(SUBSTR('${selected_plan_type}',1,1), 'M', T.YYYYMM, 'W', T.THIS_MONDAY ) 
	--	BETWEEN DECODE(SUBSTR('${selected_plan_type}',1,1), 'M', TO_CHAR(SYSDATE,'YYYYMM'), 'W', TO_CHAR(SYSDATE-7, 'YYYYMMDD') )
	--/	      = DECODE(SUBSTR('${selected_plan_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,0),'YYYYMM'), 'W', TO_CHAR(SYSDATE, 'YYYYMMDD') )
	--      AND DECODE(SUBSTR('${selected_plan_type}',1,1), 'M', TO_CHAR(ADD_MONTHS(SYSDATE,3),'YYYYMM'), 'W', TO_CHAR(SYSDATE + 21, 'YYYYMMDD') ) -- M+3, W+3 
		  ORDER BY 1	
	</query>
	
	<!-- 월간 수요예측  리스트 : 확정 시 -->
	<query id="conf_fcst_month_fcst">
	    SELECT T.FCST_CODE
			 , T.FCST_DESC
		  FROM FCST_MAST T, DUAL Z 
	     WHERE T.FCST_CLASS = 'FCST'
		   AND T.OPER_TYPE = 'MONTH' --주간의 경우 WEEK, 월간의 경우 MONTH로 변경
	       AND EXISTS ( SELECT 1 
	                      FROM FCST_RSLT_SUMMARY A
	                     WHERE A.OPER_TYPE  = T.OPER_TYPE
	                       AND A.FCST_CODE  = T.FCST_CODE 
	                   ) 
           AND T.OPER_TYPE IN ( SELECT B.CD 
			                      FROM CODE_MST B
			                     WHERE B.CD_GRP = 'OPER_TYPE'
			                       AND B.CAT04  = 'MONTH' --주간의 경우 WEEK, 월간의 경우 MONTH로 변경 
			                   )  
	  ORDER BY T.GEN_DATE DESC
	</query>
	
	<!-- 주간 수요예측  리스트 : 확정 시 -->
	<query id="conf_fcst_week_fcst">
		SELECT T.FCST_CODE
			 , T.FCST_DESC -- Display
		  FROM FCST_MAST T, DUAL Z 
	     WHERE T.FCST_CLASS = 'FCST'
		   AND T.OPER_TYPE = 'WEEK' --주간의 경우 WEEK, 월간의 경우 MONTH로 변경
	       AND EXISTS ( SELECT 1 
	                      FROM FCST_RSLT_SUMMARY A
	                     WHERE A.OPER_TYPE  = T.OPER_TYPE
	                       AND A.FCST_CODE  = T.FCST_CODE 
	                   ) 
           AND T.OPER_TYPE IN ( SELECT B.CD 
			                      FROM CODE_MST B
			                     WHERE B.CD_GRP = 'OPER_TYPE'
			                       AND B.CAT04  = 'WEEK' --주간의 경우 WEEK, 월간의 경우 MONTH로 변경 
			                   )  
	  ORDER BY T.GEN_DATE DESC		
	</query>
	
	<!-- 확정된 수요예측  리스트 : I/F 시 -->
	<query id="fc_03050_confirmed_fcsts">
		SELECT T.FCST_CODE, T.FCST_DESC 
		  FROM FCST_MAST T 
		 WHERE T.OPER_TYPE = '$!{selected_plan_type_if}'
		   AND EXISTS ( SELECT 1 
	                      FROM ${db_table} A
	                     WHERE A.OPER_TYPE = T.OPER_TYPE
	                       AND A.FCST_CODE = T.FCST_CODE 
	                   )
	</query>
	<!-- 확정된 수요예측  리스트 : 시작월/주 -->
	<query id="fc_03050_fcst_start">
		SELECT MIN(${db_column}) AS ${db_column} FROM ${db_table} WHERE FCST_CODE = '$!{fcst_code}'
	</query>
	
	<!-- 확정 : SP 실행 -->
	<query id="fc_03050_confirmFcst_list_confirm">
		CALL SP_FC_SAVE_FCST( 'CONFIRM'      -- 확정/IF/저장 구분
		
		#if("$!{selected_plan_type}" == "MONTH") 
		   , 'MCONF' -- 월간:'MCONF', 주간:'WCONF'
		#else
		   , 'WCONF' -- 월간:'MCONF', 주간:'WCONF'
		#end
		   , '$!{selected_month_fcst}'       -- 조건에서 선택한 월간 수요예측
		   , '$!{selected_week_fcst}'        -- 조건에서 선택한 주간 수요예측
		   , '$!{selected_start_month_week}' -- 조건에서 선택한 시작일
		   , '$!{checked_forecast}'          -- 조건의 일별/요일지수 반영여부
		   , '$!{week_period_forecast}'      -- 조건에서 선택한 주간반영월수
		   , '$!{_user_id}')                 -- USER ID	
	</query>
	
	<!-- I/F : SP 실행 -->
	<query id="fc_03050_confirmFcst_list_interface">
		CALL SP_FC_SAVE_FCST( 'INTERFACE'    -- 확정/IF/저장 구분		
		   , '$!{selected_plan_type_if}'
		   , '$!{selected_fcst_if}'        -- 조건에서 선택한 월간 수요예측
		   , '$!{selected_fcst_if}'        -- 조건에서 선택한 주간 수요예측
		   , '$!{start_if}'                -- 조건에서 선택한 시작일
		   , 'N'                           -- 조건의 일별/요일지수 반영여부
		   , '0'                           -- 조건에서 선택한 주간반영월수
		   , '$!{_user_id}')               -- USER ID	
	</query>
	
	<!--	
	======================================================================
		수요예측 버전 관리
	======================================================================
	-->
	
	<!-- 계획 유형 리스트 -->
	<query id="fc_03060_oper_types">
		SELECT T.CD || '!%!' || T.CAT04 AS BUCKET, T.CD_NAME
		  FROM CODE_MST T
		 WHERE T.CD_GRP = 'OPER_TYPE'  
		   AND T.CAT04 IS NOT NULL
		   AND T.ENABLE_CHK = 'Y'
		   AND (T.CD IN ('MANALY', 'WANALY'))
	  ORDER BY SORT_SEQ 
	</query>
	
	<!-- 계획 명 리스트 -->
	<query id="fc_03060_fcst_names">
		SELECT T.FCST_CODE, T.FCST_DESC
		  FROM FCST_MAST T
		 WHERE T.OPER_TYPE = '$!{oper_type}'
		   AND ( T.OPER_TYPE NOT IN ( 'MONTH', 'WEEK' ) OR EXISTS ( SELECT 1 
		                                                              FROM FCST_RSLT_SUMMARY A 
		                                                             WHERE A.OPER_TYPE  = T.OPER_TYPE
		                                                               AND A.FCST_CODE  = T.FCST_CODE ) )
      ORDER BY GEN_DATE DESC 
	</query>
	
	<!-- 시작 월/주 -->
	<query id="fc_03060_start_dates">
		SELECT DISTINCT DECODE(SUBSTR('$!{bucket}',1,1), 'M', T.YYYYMM||'01', 'W', T.THIS_MONDAY ) AS START_DATE
		  FROM PLAN_CALENDAR T
		 WHERE T.EFF_DATE BETWEEN ( SELECT TO_CHAR( TO_DATE(T.HIST_END, 'YYYYMMDD') + 1, 'YYYYMMDD' )
		                              FROM FCST_MAST T
		                             WHERE T.FCST_CODE = '$!{fcst_code}' )
		   AND ( SELECT DECODE( SUBSTR('$!{bucket}',1,1), 'M', TO_CHAR( ADD_MONTHS( TO_DATE(T.HIST_END, 'YYYYMMDD') + 1, 3 ), 'YYYYMMDD' ), 'W', TO_CHAR( TO_DATE(T.HIST_END, 'YYYYMMDD') + 22, 'YYYYMMDD') )
                   FROM FCST_MAST T
                  WHERE T.FCST_CODE = '$!{fcst_code}' )
               ORDER BY 1
	</query>
	
	<!-- 저장기간 유형 -->
	<query id="fc_03060_save_types">
		SELECT T.CD, T.CD_NAME
		  FROM CODE_MST T
		 WHERE T.CD_GRP = 'TIME_SCALE'
		   AND T.ENABLE_CHK  = 'Y'
	  ORDER BY SORT_SEQ
	</query>
	
	<!-- 수요예측 버전 리스트 -->
	<query id="fc_03060_versionMgmt_tailer" paging="true">
		SELECT A.CD_NAME  AS "수요예측유형"
		     , T.OPER_TYPE AS "유형코드"
		     , T.FCST_CODE AS "계획코드"
		     , T.FCST_DESC AS "계획명"
		     , TO_CHAR(T.GEN_DATE, 'YYYY-MM-DD HH24:MI:SS') AS "생성일시"
		     , T.FCST_BUCKET AS "기간유형"
		     , T.HIST_START||'~'||T.HIST_END AS "실적기간"
		     , T.MAIN_FCST_METHOD AS "수요예측방법"
		     , T.ATTRIBUTE01||' : '||T.ATTRIBUTE02  AS "참조수요예측"
		  FROM FCST_MAST T
		     , CODE_MST  A
		 WHERE T.OPER_TYPE = A.CD
		  [AND T.OPER_TYPE = '${f_oper_type}']
		   AND A.CD_GRP = 'OPER_TYPE'
		   AND A.CAT04 IS NOT NULL
		   AND A.ENABLE_CHK = 'Y'
		   AND (A.CD IN ('MANALY', 'WANALY'))
		   AND T.FCST_CLASS IN ( 'FCST', 'ANALY' )
		   AND ( T.OPER_TYPE IN ( 'MANALY', 'WANALY' ) OR EXISTS ( SELECT 1 
		                                                             FROM FCST_RSLT_SUMMARY A 
		                                                            WHERE A.OPER_TYPE  = T.OPER_TYPE
		                                                              AND A.FCST_CODE  = T.FCST_CODE ) )
      ORDER BY A.CD_NAME, T.GEN_DATE DESC
     
	</query>
	
	<query id="fc_03060_versionMgmt_tailer1" paging="true">
		SELECT A.CD_NAME  AS "수요예측유형"
		     , T.OPER_TYPE AS "유형코드"
		     , T.FCST_CODE  AS "계획코드"
		     , T.FCST_DESC  AS "계획명"
		     , TO_CHAR(T.GEN_DATE, 'YYYY-MM-DD HH24:MI:SS') AS "생성일시"
		     , T.FCST_BUCKET AS "기간유형"
		     , T.HIST_START||'~'||T.HIST_END AS "실적기간"
		     , T.MAIN_FCST_METHOD AS "수요예측방법"
		     , T.ATTRIBUTE01||' : '||T.ATTRIBUTE02  AS "참조수요예측"
		  FROM FCST_MAST T
		     , CODE_MST  A
		 WHERE T.OPER_TYPE = A.CD		  
		   AND A.CD_GRP = 'OPER_TYPE'
		   AND A.CAT04 IS NOT NULL
		   AND A.ENABLE_CHK = 'Y'
		   AND A.CD IN ('MSAVE','WSAVE')		  
		  [AND T.ATTRIBUTE01 = '${fcst_code}']
		   AND T.FCST_CLASS IN ( 'FCST', 'ANALY' )		  
      ORDER BY A.CD_NAME, T.GEN_DATE DESC
     
	</query>
	<!-- 저장 : SP 실행 -->
	<query id="fc_03060_versionMgmt_save">
		CALL SP_FC_SAVE_FCST( 'SAVE'      -- 구분
		   , '$!{f_oper_type}'            -- 계획유형 CD
		   , '$!{fcst_code}'              -- 조건에서 선택한 수요예측 code
		   , NULL       
		   , '$!{start}'                  -- 조건에서 선택한 시작일
		   , '$!{log_confirm}'            -- 조건의 일별/요일지수 반영여부
		   , 0                            -- 조건에서 선택한 주간반영월수
		   , '$!{_user_id}'               -- USER ID
		   , '$!{f_bucket}'               -- 저장 계획 유형
		   , '$!{save_name}'              -- 저장 계획 명
		   )              	
	</query>
	
	<!-- 삭제 : FCST_MAST DELETE -->
	<query id="fc_03060_versionMgmt_fcstMast_del">
		DELETE FROM FCST_MAST WHERE FCST_CODE = '$!{del_code}'
	</query>
	<query id="fc_03060_versionMgmt_fcstHist_del">
	#if ("$!{del_oper_type}" == "MSAVE")
		DELETE FROM FCST_HIST_MONTHLY WHERE FCST_CODE = '$!{del_code}'
	#elseif ("$!{del_oper_type}" == "WSAVE")
		DELETE FROM FCST_HIST_WEEKLY WHERE FCST_CODE = '$!{del_code}'
	#end
	</query>
	<!-- Demand Manager Workbench/SalesHistory Workbench -->
	<!-- COV Analysis -->
	
	<query id="analysis_groups" paging="false">
		SELECT HCL.CATEGORY_LEVEL
		     , HCL.CATEGORY_NAME    
          FROM HIERARCHY_LEVEL HCL
         WHERE HCL.ITEM_SITE_CHECK = 'ITEM'	
	</query>
	
	<query id="analyze_by_points" paging="false">
		SELECT HCL.CATEGORY_LEVEL 
		     , '제품X'||HCL.CATEGORY_NAME
		  FROM HIERARCHY_LEVEL HCL
		 WHERE HCL.ITEM_SITE_CHECK = 'SITE'		
	</query>
	
	<query id="calendar" paging="false">
		SELECT DISTINCT PCAL.D_YYYY||'/'||PCAL.D_MM
          FROM PLAN_CALENDAR PCAL
         WHERE PCAL.YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(SYSDATE, -24), 'YYYYMM') 
           AND TO_CHAR(SYSDATE, 'YYYYMM')
      ORDER BY 1
	</query>
	
	<query id="cov_analysis_list" paging="true">
		SELECT Y.ITEM_CLASS_CODE
		     , Y.ITEM_CLASS_NAME
		     , Y.ITEM_CODE
		     , Y.ITEM_NAME
		     , Y.SITE_CODE
		     , Y.SITE_NAME
		     , DECODE( TRUNC( #if("$!{cov_index}"=="") 0 #else Y.COV/${cov_index} #end ), 0, DECODE(TRUNC( Y.MEAN/Y.CLASS_MEAN ), 0, 4, 1 )
                                                   , DECODE(TRUNC( Y.MEAN/Y.CLASS_MEAN ), 0, 3, 2 ) ) AS DIVF
             , Y.MEAN
             , Y.STD
             , Y.COV
             , ROUND(Y.CLASS_MEAN)
          FROM ( SELECT X.ITEM_CLASS_CODE
                      , X.ITEM_CLASS_NAME
                      , X.ITEM_CODE
                      , X.ITEM_NAME 
                      , X.SITE_CODE
                      , X.SITE_NAME
                      , X.MEAN
                      , X.STD 
                      , X.COV
                      , AVG(X.MEAN) OVER ( PARTITION BY X.ITEM_CLASS_CODE ) CLASS_MEAN
                   FROM ( SELECT DECODE('$!{analysis_group}', '0', A.ITEMNAME, '1', B1.ITEMNAME, '2', H1.ITEMNAME, 'ALL' ) AS ITEM_CLASS_CODE
                               , DECODE('$!{analysis_group}', '0', A.ITEM_DESC, '1', B1.ITEM_DESC, '2', H1.ITEM_DESC, 'ALL' ) AS ITEM_CLASS_NAME
                               , T.ITEMNAME AS ITEM_CODE
                               , I.NOTE AS ITEM_NAME
                               , DECODE( '$!{analyze_by}', '1', T.SITENAME, 'NONGSHIM' ) AS SITE_CODE
                               , DECODE( '$!{analyze_by}', '1', S.NOTE, '농심' ) AS SITE_NAME
                               , ROUND(AVG(T.QUANTITY)) AS MEAN
                               , ROUND(STDDEV(T.QUANTITY)) AS STD
                               , ROUND(STDDEV(T.QUANTITY)/AVG(T.QUANTITY),2) AS COV
                            FROM SALES_HISTORY T
                               , ITEM I  
                               , ITEM_HIERARCHY H
                               , ITEM H1
                               , ITEM_HIERARCHY B 
                               , ITEM B1
                               , ITEM_HIERARCHY  C
                               , ITEM A 
                               , SITE S
                           WHERE T.ITEMNAME = I.ITEMNAME
                             AND T.ITEMNAME = H.ITEMNAME
                             AND H.PARENTITEMNAME = H1.ITEMNAME
                             AND H.PARENTITEMNAME = B.ITEMNAME
                             AND B.PARENTITEMNAME = B1.ITEMNAME
                             AND B.PARENTITEMNAME = C.ITEMNAME
                             AND C.PARENTITEMNAME = A.ITEMNAME
                             AND T.SITENAME  = S.SITENAME
                             AND T.STARTDATE BETWEEN TO_DATE(REPLACE('$!{start_date}', '/', ''), 'YYYYMM') 
                             AND TO_DATE(REPLACE('$!{end_date}', '/', ''), 'YYYYMM')
                             AND T.QUANTITY > 0
                        GROUP BY DECODE('$!{analysis_group}', '0', A.ITEMNAME, '1', B1.ITEMNAME, '2', H1.ITEMNAME, 'ALL' )
                               , DECODE('$!{analysis_group}', '0', A.ITEM_DESC, '1', B1.ITEM_DESC, '2', H1.ITEM_DESC, 'ALL' ) 
                               , T.ITEMNAME
                               , I.NOTE
                               , DECODE( '$!{analyze_by}', '1', T.SITENAME, 'NONGSHIM' )
                               , DECODE( '$!{analyze_by}', '1', S.NOTE, '농심' )
                         ) X  
                   )Y
	</query>

</queries>
