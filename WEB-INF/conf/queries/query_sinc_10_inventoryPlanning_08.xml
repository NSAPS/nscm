<?xml version="1.0" encoding="EUC-KR"?>
<queries>	
	
	<query id="ip_02110_combo_search_type" > 

		SELECT  CD,    CD_NAME
		FROM    CODE_MST, DUAL B
		WHERE   CD_GRP = 'EX_NATION'
		ORDER
		BY		CD

	</query> 
	
	<query id="ip_02110_Cy_stock_list" paging="true">
		SELECT	A.*,				
				ROWNUM
		FROM
		(
		SELECT	F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)      SALES_CAT03,
				IM.ITEM_ID,
		        IM.ITEM_NAME,
		        IM.SPEC,
		        /* 기초재고 = 동우 + DSJ + 부산 + 농심창고 */
		        MAX(DC.DONGU_STOCK)	+  MAX(DC.DSJ_STOCK) + MAX(DC.PS_STOCK) + MAX(DC.GITA) 															"기초재고",
		        MAX(DC.DONGU_STOCK)																													"동우재고",
		        MAX(DC.DONGU_STOCK_NEW)																												"동우신항재고",
		        MAX(DC.DSJ_STOCK)																													"디에스제이재고",     
		        MAX(DC.PS_STOCK)																													"부산제품 재고", 
		        MAX(DC.GITA)																														"기타",
		        NVL(CH.ISSUE,0)      						   																						"일계",             
		        NVL(CH.ISSUE,0) + NVL(CH.SELL_BOX_CUM,0)      						   																"누계", 
		        MAX(DC.DONGU_STOCK) + MAX(DC.DONGU_STOCK_NEW) + MAX(DC.DSJ_STOCK) + MAX(DC.PS_STOCK) + MAX(DC.GITA)  - NVL(CH.ISSUE,0) + NVL(PO.QTY_TODAY,0)                 "예상재고",			        	        
		        NVL(BK.WEEK_QTY,0)																													"W출고계획량",		        
		        NVL(PO.QTY_WEEK,0)																													"W생산계획",
		        /* DC2.BASE_STOCK은 주초재고다 */
		        MAX(DC2.BASE_STOCK)	+ NVL(PCH.QTY,0) + NVL(PO.QTY_WEEK,0) -	 NVL(BK.WEEK_QTY,0) - NVL(LCH.QTY,0)									"W1가용재고",
		        NVL(BK.WEEK2_QTY,0)																													"W1출고계획량",		        
		        NVL(PO.QTY_NWEEK,0)																													"W1생산계획",
		        MAX(DC2.BASE_STOCK) + NVL(PCH.QTY,0) + NVL(PO.QTY_WEEK,0) -	 NVL(BK.WEEK_QTY,0) - NVL(LCH.QTY,0) + 	NVL(PO.QTY_NWEEK,0) -  NVL(BK.WEEK2_QTY,0)		"W2가용재고",
		        NVL(BK.WEEK3_QTY,0)																													"W2출고계획량",		        
		        MAX(DC.CY_STOCK)																													"CY재고",
		        NVL(PO.QTY_TODAY,0)																													"금일생산계획",
		       	NVL(PO2.QTY_MM,0)																													"생산누계",
		        NVL(SA.SALES_M1,0) 																													"M-1판매량",
		        NVL(SA.SALES_M2,0) 																													"M-2판매량",
		        NVL(SA.SALES_M3,0) 																													"M-3판매량",
		        NVL(SA.SALES_M4,0) 																													"M-4판매량",
		        NVL(SA.SALES_M5,0) 																													"M-5판매량",
		        NVL(SA.SALES_M6,0) 																													"M-6판매량",
		        IM.TERM_VAL																															"유통기한",
		        NVL(PROD.DAY,0)																														"유통경과일",
		        NVL(MIN(PROD.PROD_TERM),0)																											"유통기한경과율",
		        DECODE(IM.MTO_MTS_TYPE,'0001','MTO','0002','MTS','기타')																				"속성",
		        F_GET_CODE_NAME('EX_NATION',IM.EX_NATION)																							"국가",
		        CASE WHEN 	NVL(MIN(PROD.PROD_TERM),0) &lt; 20	
                    	 	THEN 'G'
                         	ELSE CASE WHEN NVL(MIN(PROD.PROD_TERM),0) &gt;= 20	AND  NVL(MIN(PROD.PROD_TERM),0) &lt; 50
                                   	  THEN 'Y'
                                   	  ELSE 'R'
                          	END
                END																																	"GYR",
                NVL(PCH.QTY,0)																														"선출고량",
                NVL(LCH.QTY,0)																														"미출고량",
                NVL(DC2.BASE_STOCK,0)																												"주초기초재고",
                NVL(MI.MI_ORDER,0)                             																						"미출오더",
                NVL(BK.WEEK_QTY,0)																													"W부킹",
                NVL(BK.WEEK2_QTY,0)																													"W+1부킹"         
		FROM	/*VER 1.1 동우, 동우북한, 디에스제이, 부산CY, 인천CY, 부산제품만 고려한다 */
				(
				SELECT	ITEM_ID,
						SUM(DONGU_STOCK)		DONGU_STOCK,
						SUM(DONGU_STOCK_NEW)	DONGU_STOCK_NEW,
						SUM(DSJ_STOCK)	DSJ_STOCK,
						SUM(CY_STOCK)+SUM(CY2_STOCK)	CY_STOCK,				--인천CY + 부산CY 가 CY재고다. 광양은 재고 없으므로 PASS
						SUM(PS_STOCK)	PS_STOCK,
						SUM(GITA)		GITA
				FROM	(
						SELECT	DC.DC_ID,
				        		DC.ITEM_ID,				        		
				                DECODE(DC.DC_ID,'8913',SUM(BASE_STOCK),0)	DONGU_STOCK,
				                DECODE(DC.DC_ID,'1842',SUM(BASE_STOCK),0)	DONGU_STOCK_NEW,
				                DECODE(DC.DC_ID,'8938',SUM(BASE_STOCK),0)	DSJ_STOCK,
				                DECODE(DC.DC_ID,'8901',SUM(BASE_STOCK),0)	CY_STOCK, 
				                DECODE(DC.DC_ID,'8903',SUM(BASE_STOCK),0)	CY2_STOCK,
				                DECODE(DC.DC_ID,'7700',SUM(BASE_STOCK),0)	PS_STOCK,
				                CASE WHEN DC.DC_ID NOT IN ('8913','1842','8938','8901','8903','7700')		--부산제품,부산 인천 CY, 동우, DSJ 제외 창고 재고
				                     THEN SUM(BASE_STOCK)      
				                     ELSE 0
				                END	GITA      
				        FROM	DC_DATAWAREHOUSE DC, DC_MST DM
				        WHERE	DC.CNFM_DATE = '$!{start_date}'
				        AND		DC.DC_ID = DM.DC_ID
				        GROUP
				        BY		DC.DC_ID,
				        		DC.ITEM_ID   
						)
				GROUP
				BY		ITEM_ID						
		      	)DC, 
		      	(
		      	SELECT	ITEM_ID,
		      			SUM(BASE_STOCK)	BASE_STOCK
		      	FROM	(
		      			SELECT	DC.DC_ID,
				        		DC.ITEM_ID,
				                SUM(BASE_STOCK) BASE_STOCK
				        FROM	DC_DATAWAREHOUSE DC, DC_MST DM
				        WHERE	DC.CNFM_DATE = TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')+1,'YYYYMMDD')
				        AND		DC.DC_ID = DM.DC_ID
			            AND		DM.DC_NAME NOT LIKE '%CY%'
				        GROUP
				        BY		DC.DC_ID,
				        		DC.ITEM_ID 
		      			)
		      	GROUP
		      	BY		ITEM_ID				        
		      	)DC2,   
		      	 /* 출고계획량은 부킹IF 테이블에서 가져온다. */  
		      	(
		      	SELECT	ITEM_ID,
				        SUM(WEEK_QTY)		WEEK_QTY,
				        SUM(WEEK2_QTY)		WEEK2_QTY,
				        SUM(WEEK3_QTY)		WEEK3_QTY
		        FROM	(
						SELECT	ITEM_CD ITEM_ID,
						        CASE WHEN SHIPPLAN_DATE BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')+1 AND TRUNC(TO_DATE('$!{start_date}'),'D')+7
						             THEN SUM(ORDER_QTY)
						             ELSE 0
						        END		WEEK_QTY,	  
						        CASE WHEN SHIPPLAN_DATE BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')+8 AND TRUNC(TO_DATE('$!{start_date}'),'D')+14
						             THEN SUM(ORDER_QTY)
						             ELSE 0
						        END		WEEK2_QTY,	
						        CASE WHEN SHIPPLAN_DATE BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')+15 AND TRUNC(TO_DATE('$!{start_date}'),'D')+21
						             THEN SUM(ORDER_QTY)
						             ELSE 0
						        END		WEEK3_QTY	
				      	FROM	EXPORTSHIPORDER_S
				      	WHERE	SHIPPLAN_DATE BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')+1 AND TRUNC(TO_DATE('$!{start_date}'),'D')+21             
				      	GROUP
				      	BY		ITEM_CD,SHIPPLAN_DATE	
                		)	
                GROUP BY ITEM_ID      			
		      	)BK,
		      	/* 일계, 누계는 부두 출고량이다 */
		      	(
		      	SELECT	ITEM_CD	ITEM_ID,
				        SUM(ISSUE) ISSUE,
				        SUM(SELL_BOX_CUM) SELL_BOX_CUM
				FROM	(
				      	SELECT  S2.ITEM_CD, 
						        S2.OUTBOUND_DATE,
						        SUM(DECODE(S1.OUTBOUND_DATE,TRUNC(TO_DATE('$!{start_date}')),S2.INPUT_QTY/S3.QTY,0))    ISSUE,
						        SUM(DECODE(S1.OUTBOUND_DATE,TRUNC(TO_DATE('$!{start_date}')),0,S2.INPUT_QTY/S3.QTY))    SELL_BOX_CUM  
						FROM    LO020NM S1,
						        LO020ND S2,
						        ITEM_MST S3
						WHERE   S1.CENTER_CD 		= S2.CENTER_CD
						AND     S1.BRAND_CD 		='100001'
						AND    	S1.OUTBOUND_NO 		= S2.OUTBOUND_NO
						AND     S1.BRAND_CD 		= S2.BRAND_CD
						AND     S1.OUTBOUND_DATE 	= S2.OUTBOUND_DATE				
						AND     S1.REAL_DELIVERY_CD ='13008901'		--VER 1.1 광양, 인천 CY로 가는 부두출고량 무시
						AND     S1.CENTER_CD 	IN ('13008913','13001842','13008938','13007700') -- VER 1.1 부산제품,동우,동우북항,디에스제이에서 CY로 출고량만 고려
						AND     S1.OUTBOUND_DATE  BETWEEN TRUNC(TO_DATE('$!{start_date}'),'MM') AND TRUNC(TO_DATE('$!{start_date}'))
						AND     S2.ITEM_CD 			= S3.ITEM_ID
						GROUP
						BY		S2.ITEM_CD,
								S2.OUTBOUND_DATE
						)
				GROUP
				BY		ITEM_CD		
		      	)CH,
		      	/* 선출고 수량  부킹테이블 선적예정일이 주초일때 전주에 미리 CY로 이동했을 경우 주초재고가 뒤틀린다 */
		      	(
		      	SELECT	S2.ITEM_CD	ITEM_ID,
		      			SUM(S2.INPUT_QTY/S3.QTY)	QTY 
				FROM    LO020NM S1, 
						LO020ND S2,
						ITEM_MST S3,
						(
                        SELECT    DISTINCT ITEM_CD, BRAND_NO , CENTER_CD
                        FROM      EXPORTSHIPORDER_S         
                        WHERE     SHIPPLAN_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')+1,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')+7,'YYYYMMDD')
				        )S4
				WHERE   S1.BRAND_CD     	= '100001'
				AND     S1.CENTER_CD 		= S2.CENTER_CD
				AND     S1.OUTBOUND_NO  	= S2.OUTBOUND_NO
				AND     S1.BRAND_CD     	= S2.BRAND_CD
				AND     S1.OUTBOUND_DATE 	= S2.OUTBOUND_DATE			
				AND		S2.ITEM_CD			= S3.ITEM_ID	
				--AND     S1.REAL_DELIVERY_CD ='13008901'		
				AND     (S1.CENTER_CD	IN ('13008913','13001842','13008938','13007700') OR S1.CENTER_CD = S4.CENTER_CD)	--상차지시상에 작업장과 실제작업장이 다를 수 있다.
				AND     S1.OUTBOUND_DATE  BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')-14 AND TRUNC(TO_DATE('$!{start_date}'),'D')        --선출고는 과거 2주를 기간으로 한다.
				AND 	S2.BRAND_NO 		= S4.BRAND_NO
				AND		S2.ITEM_CD			= S4.ITEM_CD
				GROUP
				BY		S2.ITEM_CD	
		      	)PCH,
		      	/* 미출고 수량  부킹테이블 선적예정일이 지나도 출고가 안된경우 감안해준다. */
		      	(
		      	SELECT	ITEM_ID,
		      			SUM(QTY)	QTY
		      	FROM	(
				      	SELECT	S1.ITEM_CD	ITEM_ID,
		                        CASE WHEN S1.ORDER_QTY - NVL(S2.QTY,0) - NVL(S3.QTY,0) - NVL(S4.QTY,0) > 0
		                        	 THEN S1.ORDER_QTY - NVL(S2.QTY,0) - NVL(S3.QTY,0) - NVL(S4.QTY,0)
		                        	 ELSE 0
		                        END  QTY
		             	FROM	(
				               	SELECT	ITEM_CD,
				               			BRAND_NO,
				                        SUM(ORDER_QTY) ORDER_QTY
				               	FROM    EXPORTSHIPORDER_S
				               	WHERE   SHIPPLAN_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')-20,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D'),'YYYYMMDD')  --기준은 지난주 부킹량
				               	GROUP
				               	BY      ITEM_CD,
				               			BRAND_NO
				               	)S1,
				               (
				                SELECT	S2.ITEM_CD    ITEM_CD,
				                		S2.BRAND_NO,
				                        SUM(S2.INPUT_QTY/S3.QTY)    QTY 
				                FROM    LO020NM S1, 
				                        LO020ND S2,
				                        ITEM_MST S3,
				                        (
				                        SELECT    DISTINCT ITEM_CD, BRAND_NO, CENTER_CD 
				                        FROM      EXPORTSHIPORDER_S         
				                        WHERE     SHIPPLAN_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')-20,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D'),'YYYYMMDD')
				                        )S4
				                WHERE   S1.BRAND_CD        = '100001'
				                AND     S1.CENTER_CD       = S2.CENTER_CD
				                AND     S1.OUTBOUND_NO     = S2.OUTBOUND_NO
				                AND     S1.BRAND_CD        = S2.BRAND_CD
				                AND     S1.OUTBOUND_DATE   = S2.OUTBOUND_DATE            
				                AND     S2.ITEM_CD         = S3.ITEM_ID    
				               -- AND     S1.REAL_DELIVERY_CD ='13008901'        
				                AND     (S1.CENTER_CD	IN ('13008913','13001842','13008938','13007700') OR S1.CENTER_CD = S4.CENTER_CD)
				                AND     S1.OUTBOUND_DATE  BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')-20 AND TRUNC(TO_DATE('$!{start_date}'),'D')       
				                AND     S2.BRAND_NO        = S4.BRAND_NO
				                AND     S2.ITEM_CD         = S4.ITEM_CD
				                GROUP
				                BY      S2.ITEM_CD,
				                		S2.BRAND_NO 
				               	)S2,
				                (
				                SELECT  S2.ITEM_CD    ITEM_CD,
				                		S2.BRAND_NO,
				                        SUM(S2.INPUT_QTY/S3.QTY)    QTY 
				                FROM    LO020NM S1, 
				                        LO020ND S2,
				                        ITEM_MST S3,
				                        (
				                        SELECT    DISTINCT ITEM_CD, BRAND_NO, CENTER_CD 
				                        FROM      EXPORTSHIPORDER_S         
				                        WHERE     SHIPPLAN_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')-20,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D'),'YYYYMMDD')
				                        )S4
				                WHERE   S1.BRAND_CD         	= '100001'
				                AND     S1.CENTER_CD         	= S2.CENTER_CD
				                AND     S1.OUTBOUND_NO      	= S2.OUTBOUND_NO
				                AND     S1.BRAND_CD         	= S2.BRAND_CD
				                AND     S1.OUTBOUND_DATE     	= S2.OUTBOUND_DATE            
				                AND     S2.ITEM_CD           	= S3.ITEM_ID    
				                --AND     S1.REAL_DELIVERY_CD ='13008901'        
				                AND     (S1.CENTER_CD	IN ('13008913','13001842','13008938','13007700') OR S1.CENTER_CD = S4.CENTER_CD)
				                AND     S1.OUTBOUND_DATE  BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')-40 AND TRUNC(TO_DATE('$!{start_date}'),'D')-21        --선출고는 과거 2주를 기간으로 한다.
				                AND     S2.BRAND_NO         	= S4.BRAND_NO
				                AND        S2.ITEM_CD           = S4.ITEM_CD
				                GROUP
				                BY      S2.ITEM_CD,
				                		S2.BRAND_NO    
				                )S3,
				                (
				                SELECT  S2.ITEM_CD    ITEM_CD,
				                		S2.BRAND_NO,
				                        SUM(S2.INPUT_QTY/S3.QTY)    QTY 
				                FROM    LO020NM S1, 
				                        LO020ND S2,
				                        ITEM_MST S3,
				                        (
				                        SELECT    DISTINCT ITEM_CD, BRAND_NO, CENTER_CD 
				                        FROM      EXPORTSHIPORDER_S         
				                        WHERE     SHIPPLAN_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D')-20,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'D'),'YYYYMMDD')
				                        )S4
				                WHERE   S1.BRAND_CD         	= '100001'
				                AND     S1.CENTER_CD         	= S2.CENTER_CD
				                AND     S1.OUTBOUND_NO      	= S2.OUTBOUND_NO
				                AND     S1.BRAND_CD         	= S2.BRAND_CD
				                AND     S1.OUTBOUND_DATE     	= S2.OUTBOUND_DATE            
				                AND     S2.ITEM_CD           	= S3.ITEM_ID    
				                --AND     S1.REAL_DELIVERY_CD ='13008901'        
				                AND     (S1.CENTER_CD	IN ('13008913','13001842','13008938','13007700') OR S1.CENTER_CD = S4.CENTER_CD)
				                AND     S1.OUTBOUND_DATE  BETWEEN TRUNC(TO_DATE('$!{start_date}'),'D')+1 AND TRUNC(TO_DATE('$!{start_date}'),'D')+7        --선출고는 과거 2주를 기간으로 한다.
				                AND     S2.BRAND_NO         	= S4.BRAND_NO
				                AND        S2.ITEM_CD           = S4.ITEM_CD
				                GROUP
				                BY      S2.ITEM_CD,
				                		S2.BRAND_NO    
				                )S4
		               	WHERE 	S1.ITEM_CD 	= S2.ITEM_CD(+)
		               	AND 	S1.ITEM_CD	= S3.ITEM_CD(+)
		               	AND 	S1.ITEM_CD	= S4.ITEM_CD(+)
		               	AND		S1.BRAND_NO	= S2.BRAND_NO (+)
		               	AND		S1.BRAND_NO	= S3.BRAND_NO (+)
		               	AND		S1.BRAND_NO	= S4.BRAND_NO (+)
		      			)
		      	GROUP
		      	BY		ITEM_ID
		      	)LCH,
		      	 /* M-1 판매량은 선적확정일 테이블에서 가져온다. */  
		      	(
		      	SELECT	PROD_CODE		ITEM_ID,
						SUM(SALES_M1)	SALES_M1,
				        SUM(SALES_M2)	SALES_M2,
				        SUM(SALES_M3)	SALES_M3,
				        SUM(SALES_M4)	SALES_M4,
				        SUM(SALES_M5)	SALES_M5,
				        SUM(SALES_M6)	SALES_M6
				FROM(
				        SELECT  PROD_CODE,
				                CASE WHEN SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-1),'MM'),'YYYYMMDD')
				                		 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-1)),'YYYYMMDD')
				                     THEN SUM(ACHI_QTY)
				                     ELSE 0
				                END	 SALES_M1,
				                CASE WHEN SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-2),'MM'),'YYYYMMDD')
				                		 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-2)),'YYYYMMDD')
				                     THEN SUM(ACHI_QTY)
				                     ELSE 0
				                END	 SALES_M2,
				                CASE WHEN SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-3),'MM'),'YYYYMMDD')
				                		 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-3)),'YYYYMMDD')
				                     THEN SUM(ACHI_QTY)
				                     ELSE 0
				                END	 SALES_M3,
				                CASE WHEN SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-4),'MM'),'YYYYMMDD')
				                		 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-4)),'YYYYMMDD')
				                     THEN SUM(ACHI_QTY)
				                     ELSE 0
				                END	 SALES_M4,
				                CASE WHEN SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-5),'MM'),'YYYYMMDD')
				                		 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-5)),'YYYYMMDD')
				                     THEN SUM(ACHI_QTY)
				                     ELSE 0
				                END	 SALES_M5,
				                CASE WHEN SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-6),'MM'),'YYYYMMDD')
				                		 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-6)),'YYYYMMDD')
				                     THEN SUM(ACHI_QTY)
				                     ELSE 0
				                END	 SALES_M6				               
				        FROM 	EXMAT201
				        WHERE 	SHIP_DATE BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{start_date}'),-6),'MM'),'YYYYMMDD')
				        				  AND	TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{start_date}'),-1)),'YYYYMMDD')
				        GROUP
				        BY		SHIP_DATE,
				                PROD_CODE
				        )
				GROUP
				BY		PROD_CODE
		      	)SA,
		        (
		        SELECT	SALES_CAT03,
		        		ITEM_ID,
		        		ITEM_NAME,
		                SPEC,
		                MTO_MTS_TYPE,
		                EX_NATION,
		                TERMVAL * 30 TERM_VAL
		        FROM	ITEM_MST	IM
		        WHERE	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		        AND		NVL(IM.CAT03,'XX')     LIKE 'O%' --수출품 
		        AND		IM.SEARCH_FLAG !='N'
		        AND		IM.DIVISION		LIKE '%'||'$!{search_type}'||'%'		         		
	       		AND		IM.MTO_MTS_TYPE LIKE '%'||'$!{mto_gubn}'||'%'
	        	AND		IM.EX_NATION LIKE '%'||'$!{nation_gubn}'||'%'	   
	        	#if ( "$!{search_type}" == "" )   
	            AND		IM.DIVISION IN('10','20')
	            #elseif ( "$!{search_type}" == "10" )
	            AND		IM.DIVISION = '10'
	            #else
	            AND		IM.DIVISION = '20'
	            #end     		
		        )IM,
		        /* 생산계획 누계 */
		        ( 		
		     	SELECT	ITEM_ID,
			    		MAX(QTY_TODAY)	QTY_TODAY,
			            MAX(QTY_WEEK)	QTY_WEEK,
			            MAX(QTY_NWEEK)	QTY_NWEEK
            	FROM	(
						 SELECT	ITEM_ID,
				        		SUM(QTY_TODAY)	QTY_TODAY,
				                SUM(QTY_WEEK)	QTY_WEEK,
		                        0				QTY_NWEEK,
		                        0				QTY_MM
		                FROM	(
		                       	SELECT	ITEM_ID,
		                                PROD_DATES,
		                               	CASE WHEN PROD_DATES = TO_CHAR(TO_DATE('$!{start_date}','YYYY-MM-DD'),'YYYYMMDD')
			                                 THEN SUM(QTY)
			                                 ELSE 0
			                            END					QTY_TODAY,   
		                                CASE WHEN 	PROD_DATES BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+1,'YYYYMMDD') AND 
		                                			TO_CHAR(TRUNC( TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+7,'YYYYMMDD') 
			                                 THEN 	SUM(QTY)
			                                 ELSE 	0
			                            END					QTY_WEEK
					            FROM	( 
					                    SELECT	PO.ITEM_ID,
		                                		PO.PROD_DATES,
				                                PO.WO_ID,                               	
				                                MAX(PO.SHIFT_QTY)	QTY
				                       	FROM     DAILY_SCH_PLAN_SHIFT PO,
				                       			ITEM_MST IM,
		                                       (
							                    SELECT	CAL_DATE
							                    FROM	CAL_MST
							                    WHERE	CAL_DATE BETWEEN  TO_CHAR(TRUNC(TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+1,'YYYYMMDD') AND 
					                                			TO_CHAR(TRUNC( TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+7,'YYYYMMDD')   
							                    )CAL,
							                    (                                               
				                                SELECT	DECODE(SUB_CAT,'ANY','1110','ANS','1120','ANSB','1130','ASA','1140','KUM','1160','PUS','1170','NOK','1180')	PLANT,
				                                	  	VERSION
				                                FROM 	PLAN_VERSION_LOG
				                                WHERE 	VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')-5,'YYYYMMDD')||'%'
				                                AND		CAT_ID='PS'
		                                        )VR                                                                    					                 
										WHERE	PO.VERSION = VR.VERSION
				                        AND		PO.PLANT_ID = VR.PLANT              				                 
								        AND		PO.ITEM_ID	= IM.ITEM_ID 
								        AND		PO.WO_END	= 'Y'      
				                        AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
				        				AND		NVL(IM.CAT03,'XX')     LIKE 'O%' --수출품                  
				                        AND		PO.CAT_ID = 'PS'          
				                        AND		PO.PROD_DATES = CAL.CAL_DATE                
				                        GROUP 
				                        BY 		PO.ITEM_ID,
		                                		PO.PROD_DATES,
				                    	        PO.WO_ID   
				                    	)
				                   GROUP BY ITEM_ID, PROD_DATES                        
		                           )
		                GROUP BY ITEM_ID
		                UNION ALL
		                        SELECT	ITEM_ID,	
		                        0				QTY_TODAY,
		                        0				QTY_WEEK,	        		
				                SUM(QTY_NWEEK)	QTY_NWEEK,
		                        0				QTY_MM
		                FROM	(
		                		SELECT	ITEM_ID,
		                				SUM(QTY_NWEEK)	QTY_NWEEK		                				
		                		FROM	(
		                				SELECT	PO.ITEM_ID,
		                                		PO.PROD_DATES,
				                                PO.WO_ID,                               	
				                                MAX(PO.SHIFT_QTY)    	QTY_NWEEK
				                       	FROM    DAILY_SCH_PLAN_SHIFT PO,	
				                       			ITEM_MST IM,	                   
				                                (
							                    SELECT	CAL_DATE
							                    FROM	CAL_MST
							                    WHERE	CAL_DATE BETWEEN  TO_CHAR(TRUNC(TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+8,'YYYYMMDD') AND 
					                                			TO_CHAR(TRUNC( TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+14,'YYYYMMDD')   
							                    )CAL,
							                    (                                               
				                                SELECT	DECODE(SUB_CAT,'ANY','1110','ANS','1120','ANSB','1130','ASA','1140','KUM','1160','PUS','1170','NOK','1180')	PLANT,
				                                	  	VERSION
				                                FROM 	PLAN_VERSION_LOG
				                                WHERE 	VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{start_date}','YYYY-MM-DD'),'D')+2,'YYYYMMDD')||'%'
				                                AND		CAT_ID='PS'
		                                        )VR                                                                    					                 
								        WHERE	PO.VERSION = VR.VERSION
		                                AND		PO.PLANT_ID = VR.PLANT 
				                        AND		PO.ITEM_ID	= IM.ITEM_ID		 
				                        AND		PO.WO_END	= 'Y'                          
				                        AND		(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
				        				AND		NVL(IM.CAT03,'XX')     LIKE 'O%' --수출품 
				                   		AND		PO.CAT_ID = 'PS'                      
				                        AND		PO.PROD_DATES= CAL.CAL_DATE
				                        GROUP 
				                        BY 		PO.ITEM_ID,
		                                		PO.PROD_DATES,
				                                PO.WO_ID 
		                				)
			                    GROUP
			                    BY		ITEM_ID                           
		                           )
		                GROUP 
		                BY ITEM_ID
		                )
		        GROUP 
		        BY ITEM_ID		                
		        )PO,
		         (
		         SELECT  	PO.ITEM_ID,       
		         			SUM(PO.COMPL_QTY)	QTY_MM 
		           FROM     V_ERP_PO_MES PO,
		                    ITEM_MST IM,
		                    (
		                    SELECT	CAL_DATE
		                    FROM	CAL_MST
		                    WHERE	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{start_date}'),'MM') AND TRUNC(TO_DATE('$!{start_date}')) 
		                    )CAL
		           WHERE	PO.START_DTTM = CAL.CAL_DATE
		           AND		IM.ITEM_ID		= PO.ITEM_ID
		           AND		(IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{start_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		           AND		NVL(IM.CAT03,'XX')     LIKE 'O%' --수출품 
		           GROUP
		           BY		PO.ITEM_ID		           			
		        )PO2,
		        (						                   
                SELECT	ITEM_ID,
                	   	MAX(QTY) QTY,
                       	MIN(DAY) DAY,                           
                       	TERM_VAL,
                       	NVL(MIN(PROD_TERM),0) PROD_TERM                          
                FROM	(
	                    SELECT	ITEM_ID,		
	    						CASE WHEN QTY >=  CUR_STOCK-CY_QTY
	                               	 THEN CUR_STOCK-CY_QTY
	                                 ELSE QTY
	                            END	QTY, 
	    						DECODE(QTY,0,0,DAY) DAY,  
	                            TERM_VAL,
	                            NVL(ROUND(DECODE(QTY,0,0,DAY)/DECODE(TERM_VAL,0,NULL,TERM_VAL),2)*100,0) PROD_TERM,      
	    						CUR_STOCK
						FROM	(
								SELECT 	S1.ITEM_ID,
										S1.START_DTTM,
	                                    S1.TERM_VAL,
	    								CASE WHEN MAX(S2.CUR_STOCK) - S3.CUR_STOCK - MAX(S1.PROD_SUM) >= 0
	    	 							THEN SUM(QTY)
	         							ELSE SUM(QTY)+ MAX(S2.CUR_STOCK)- S3.CUR_STOCK - MAX(S1.PROD_SUM)
	         							END	QTY,
	         							S3.CUR_STOCK	CY_QTY,
	    								MAX(S1.PROD_SUM) PROD_SUM,                
	    								TRUNC(TO_DATE('$!{start_date}')) - START_DTTM	DAY,
	    								MAX(S2.CUR_STOCK)	CUR_STOCK
								FROM	(    
										SELECT	T1.ITEM_ID,
												T1.START_DTTM,
	                                            T2.TERMVAL * 30 TERM_VAL,
	    										SUM(T1.COMPL_QTY) QTY ,
	    										SUM(T1.COMPL_QTY) OVER(PARTITION BY T1.ITEM_ID ORDER BY T1.START_DTTM DESC) PROD_SUM            
										FROM	V_ERP_PO_MES T1, ITEM_MST T2
										WHERE	T1.START_DTTM BETWEEN ADD_MONTHS(TRUNC(TO_DATE('$!{start_date}')),-12) AND TO_DATE('$!{start_date}','YYYY-MM-DD')
										AND		T1.ITEM_ID	= T2.ITEM_ID                                   
										AND		NVL(T2.CAT03,'XX')     LIKE 'O%' --수출품
						                AND		(T2.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{start_date}'),'YYYYMMDD') OR T2.SELL_STOP_DATE = '00000000')
										GROUP
										BY		T1.ITEM_ID, T1.START_DTTM, T1.COMPL_QTY, T2.TERMVAL
										)S1,
										(
	 									SELECT 	ITEM_ID,
	        									SUM(BASE_STOCK)	CUR_STOCK 
										FROM 	DC_DATAWAREHOUSE
										WHERE 	CNFM_DATE = '$!{start_date}'    
                                       -- AND		DC_ID IN ('8901','8913','1842','8938','7700')                                   
										GROUP 
	        							BY 		ITEM_ID
										)S2,
										(
	 										SELECT 	DC.ITEM_ID,
	        										SUM(DC.BASE_STOCK)	CUR_STOCK 
											FROM 	DC_DATAWAREHOUSE DC
											WHERE 	DC.CNFM_DATE = '$!{start_date}'  
											AND		DC_ID IN ('8901','8902','8903')       --부산,광양,인천 CY                                     
	                                        --AND		DC.DC_ID ='8901'	                                     
											GROUP 
	        								BY 		DC.ITEM_ID
											)S3
								WHERE	S1.ITEM_ID	= S2.ITEM_ID (+)
								AND		S1.ITEM_ID  = S3.ITEM_ID (+)
								GROUP
								BY		S1.ITEM_ID,
										S1.START_DTTM,
	                                    S1.TERM_VAL,
	                                    S3.CUR_STOCK          
								)
						WHERE	QTY > 0					
                        AND	PROD_SUM -	(
                        					 CASE WHEN QTY >=  CUR_STOCK-CY_QTY
			                               	 THEN CUR_STOCK-CY_QTY
			                                 ELSE QTY
                            				 END
                            				 )	 >= 0
	                    --AND		NVL(ROUND(DAY/DECODE(TERM_VAL,0,NULL,TERM_VAL),2)*100,0) >= 20
	                    ORDER
	                    BY		ITEM_ID
	                    )
	                GROUP 
	                BY 		ITEM_ID,TERM_VAL
	                )PROD,
	               (
		        	SELECT	ITEM_ID,						
					NVL(
						SUM(
							CASE
								WHEN TO_DATE(SHIP_DATE,'YYYY-MM-DD') &lt;= TRUNC(TO_DATE(REPLACE('$!{start_date}','-','')),'D') THEN ORDER_QTY	-- = 추가
								ELSE 0
							END
							)
						,0)	MI_ORDER				
				FROM	(
						--	납품문서는 생성되었으나 출고가 안된것.
						SELECT	A.VBELN,	-- 오더번호
								A.ZFEPSD	SHIP_DATE,	-- 선적예정일
								A.AUART,	-- 오더타입
								B.MATNR		ITEM_ID,	-- 제품코드
								B.LFIMG		ORDER_QTY	-- 제품수량
						FROM	(
                        		SELECT	*
                                FROM	SAPVBAK		A
                                WHERE	A.MANDT		=	'100'
                                AND		A.AUDAT		BETWEEN	TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''))-100,'YYYYMMDD')
													AND		TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-','')),'YYYYMMDD')
                                )A,								
								SAPLIPS		B,
								SAPVBUK		C
						WHERE	A.ZFEPSD	BETWEEN	TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''))-30,'YYYYMMDD')
											AND		TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''))+60,'YYYYMMDD')
						AND		A.VKORG		=	'1500'
						AND		C.MANDT		=	'100'
						AND		B.VBELN		=	C.VBELN
						AND		A.VBELN		=	B.VGBEL
						AND		C.WBSTK		!=	'C'
						AND		B.MANDT		=	'100'
						AND		B.PSTYV		LIKE	'X%'						
						UNION	ALL
						--	납품문서가 아예 생기지 않은 경우.
						SELECT	A.VBELN,	-- 오더번호
								A.ZFEPSD	SHIP_DATE,	-- 선적예정일
								A.AUART,	-- 오더타입
								B.MATNR		ITEM_ID,	-- 제품코드
								B.LSMENG	ORDER_QTY	-- 제품수량
						FROM	(
                        		SELECT	*
                                FROM	SAPVBAK		A
                                WHERE	A.MANDT		=	'100'
                                AND		A.AUDAT		BETWEEN	TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''))-100,'YYYYMMDD')
													AND		TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-','')),'YYYYMMDD')
                                )A,		
								SAPVBAP		B,
								SAPVBUK		C
						WHERE	A.ZFEPSD	BETWEEN	TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''))-30,'YYYYMMDD')
											AND		TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''))+60,'YYYYMMDD')
						AND		A.VKORG		=	'1500'
						AND		C.MANDT		=	'100'
						AND		A.VBELN		=	C.VBELN
						AND		C.LFSTK		=	'A'
						AND		B.MANDT		=	'100'
						AND		A.VBELN		=	B.VBELN
						AND		B.PSTYV		LIKE	'X%'					
						)
				GROUP
				BY		ITEM_ID
                    )MI
		WHERE	DC.ITEM_ID	= IM.ITEM_ID
		AND		DC.ITEM_ID  = DC2.ITEM_ID	
		AND		IM.ITEM_ID	= BK.ITEM_ID (+)	
		AND		IM.ITEM_ID	= SA.ITEM_ID (+)
		AND		IM.ITEM_ID	= CH.ITEM_ID (+)	
		AND		IM.ITEM_ID	= MI.ITEM_ID (+)
		AND		DC.ITEM_ID	= PO.ITEM_ID (+)	
		AND		DC.ITEM_ID	= PO2.ITEM_ID  (+)
		AND		DC.ITEM_ID	= PROD.ITEM_ID (+) 
		AND		DC.ITEM_ID	= PCH.ITEM_ID (+)  
		AND		DC.ITEM_ID	= LCH.ITEM_ID (+) 
		#if ( "$!{prod_term}" == "" )		
		#else   
		AND		PROD_TERM &gt;= '$!{prod_term}'
	    #end 	
		HAVING ( MAX(DC.DONGU_STOCK) + MAX(DC.DSJ_STOCK) + MAX(DC.PS_STOCK) + MAX(DC.GITA) + MAX(DC.CY_STOCK) > 0 )
		 OR ( NVL(BK.WEEK_QTY,0) + NVL(BK.WEEK2_QTY,0) + NVL(BK.WEEK3_QTY,0) + NVL(PO.QTY_NWEEK,0) + NVL(PO.QTY_WEEK,0) > 0 )
		GROUP
		BY		IM.SALES_CAT03,
				IM.ITEM_ID,
		        IM.ITEM_NAME,
		        IM.SPEC,
		        PROD.DAY,
		        IM.MTO_MTS_TYPE,
		        IM.EX_NATION,
		        IM.TERM_VAL,
		      	PO.QTY_TODAY,
		      	PO.QTY_WEEK,
		      	PO.QTY_NWEEK,
		        PO2.QTY_MM,
		        DC2.BASE_STOCK,
		        MI.MI_ORDER,
		        BK.WEEK_QTY,
		        BK.WEEK2_QTY,
		        BK.WEEK3_QTY,
		        CH.ISSUE,
		        CH.SELL_BOX_CUM,
		        SA.SALES_M1,
		        SA.SALES_M2,
		        SA.SALES_M3,
		        SA.SALES_M4,
		        SA.SALES_M5,
		        SA.SALES_M6,
		        PCH.QTY,
		        LCH.QTY
		ORDER
		BY		IM.SALES_CAT03,
				IM.ITEM_ID
        )A
	</query>
	
	<!-- DW1 계획수립 대상 리스트 -->
	<query id="ip_03010_Lead_Time_Planning_DW1">
		SELECT  ITEM_ID,
		        ITEM_NAME,
		        TERMVAL,        				--  유통기한
                TRIM(TO_CHAR(
                LEAD_TIME
                ,999999999990.9)) LEAD_TIME, 	--  리드타임
                BASE_UOM,						--  기본단위
		        ROUND(STOCK),            		--  현재고
		        ROUND(ETA),           			--  진행중재고
		        ROUND(TOT_STOCK),        		--  총재고
		        SEL_DMD,        				--  선택구분
		        ROUND(STD_STOCK),        		--  기준재고
		        ROUND(SAFETY_STOCK),   			--  안전재고
		        SAFETY_FACTOR,       			--  안전계수    
		        DMD05,            				--  평균
		        STD_DEV, 						--  표준편차
		        DMD03,           				--  3개월평균
		        DMD04,           				--  전년동월
		        ROUND(USE_CUM_MONTH),   		--  당월누계
		        MIN_LOT_SIZE,    				--  최소발주량
                --  발주시기 = (총재고-안전재고)/기준재고 가 1보다 작을때
                --  (총재고-안전재고)/기준재고 - 1 - 리드타임
                TRIM(TO_CHAR(
                DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시 
                DECODE(PR_DATE_NO, 0, 
                ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1)
                , PR_DATE_NO))    
                ,999999999990.9)) PR_DATE_NO,
                DECODE(STD_STOCK, 0, NULL,   	 -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
                DECODE(PR_QTY, 0,
                CASE
                    WHEN MIN_LOT_SIZE = 0 THEN STD_STOCK
                    WHEN STD_STOCK > MIN_LOT_SIZE THEN
                        CEIL(STD_STOCK/MIN_LOT_SIZE) * MIN_LOT_SIZE
                    ELSE MIN_LOT_SIZE
                END    
                , PR_QTY)) PR_QTY,
                -- 입고시기는 현재+발주시기+리드타임  --> 현재+리드타임으로 변경 
                --DECODE (ENTR_DATE, '0', DECODE(STD_STOCK, 0, NULL,    	-- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
				--TO_CHAR(TRUNC(SYSDATE) + (ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1) + LEAD_TIME)  ,'YYYY-MM-DD')),
				--TO_CHAR(TO_DATE(ENTR_DATE),'YYYY-MM-DD')) ENTR_DATE	
				DECODE (ENTR_DATE, '0', 		
				TO_CHAR(TRUNC(SYSDATE) + LEAD_TIME ,'YYYY-MM-DD'),
				TO_CHAR(TO_DATE(ENTR_DATE),'YYYY-MM-DD')) ENTR_DATE	
				,CONTAINER_BOX
		        ,EDIT_FLAG
		        ,CASE
		            WHEN IF_FLAG = 'I'    THEN '전송전'
		            WHEN IF_FLAG = 'P'    THEN '전송중'
		            WHEN IF_FLAG = 'S'    THEN '완료'
		            WHEN IF_FLAG = 'E'    THEN '오류'
		            ELSE IF_FLAG
		        END        IF_FLAG
		        ,PR_NO
		        ,IF_MSGS
		        ,ROUND(BASE_STOCK)
		        ,ROUND(OUT_STOCK)
		FROM    (
		        SELECT  T1.ITEM_ID,
		                T1.ITEM_NAME,
		                T1.TERMVAL,         			--   유통기한
		                T1.LEAD_TIME,         			--   리드타임
		                T1.BASE_UOM,					--   기본단위
		                T1.STOCK,            			--   현재고
		                T1.BASE_STOCK,					--   기초재고
		                T1.OUT_STOCK,					--   사외재고
		                T1.ETA,             			--   진행중재고
		                T1.TOT_STOCK,         		 	--   총재고
		                T1.SEL_DMD,        				--   선택구분
		                T1.STD_STOCK,         			--   기준재고
		                T1.MINSS    SAFETY_STOCK,     	--   안전재고
		                DECODE(T1.SAFETY_FACTOR,0, 1, T1.SAFETY_FACTOR)        SAFETY_FACTOR,         --   안전계수
		                T1.DMD05,             			--   평균
		                T1.STD_DEV,         			--   표준편차
		                T1.DMD03,            			--   3개월평균
		                T1.DMD04,            			--   전년동월
		                T1.USE_CUM_MONTH,		        --   당월누계
		                T1.MIN_LOT_SIZE,     			--   최소발주량
		                T1.CONTAINER_BOX,				--	 CONTAINER_BOX
		                T1.PR_DATE_NO,		--   발주시기
		                T1.PR_QTY,			--   PR수량
		                T1.ENTR_DATE,		--   PR입고일
		                T1.EDIT_FLAG,
		                T1.IF_FLAG,
		                T1.PR_NO,
		                T1.IF_MSGS
		        FROM    (
		                SELECT  S1.ITEM_ID,
		                        S1.ITEM_NAME,
		                        S1.TERMVAL,
		                        NVL(PR_TO_PO,0)+NVL(PO_TO_LC ,0)+NVL(LC_TO_PORT ,0)+NVL(PORT_TO_CUST ,0) LEAD_TIME, 	--   리드타임은 월단위로 정정
		                        NVL(S2.STOCK,0)    		STOCK,                   										--   현재고
		                        NVL(S4.BASE_STOCK,0) + NVL(S5.BASE_STOCK,0)		BASE_STOCK,								--   기초재고
		                        NVL(S4.OUT_STOCK,0)	+ NVL(S5.OUT_STOCK,0)		OUT_STOCK,								--   사외재고
		                        NVL(S2.ETA,0)    ETA,                       					--   진행중 재고
		                        NVL(S4.BASE_STOCK,0) + NVL(S4.OUT_STOCK,0) + NVL(S2.ETA,0) 
		                        + NVL(S5.BASE_STOCK,0) + NVL(S5.OUT_STOCK,0)  TOT_STOCK,      	--   총재고
		                        S2.SEL_DMD,                                 --   선택구분
		                        S2.STD_STOCK,                               --   기준재고
		                        NVL(S2.DMD03,0)    DMD03,                   --   기준재고(3개월)
		                        NVL(S2.DMD04,0)    DMD04,                   --   기준재고(전년동월)
		                        NVL(S2.DMD05,0)    DMD05,                   --   평균(과거12개월)
		                        NVL(S2.STD_DEV,0)    STD_DEV,               --   표준편차
		                        NVL(S2.USE_CUM_MONTH ,0)    USE_CUM_MONTH,  --   당월누계
		                        NVL(S2.SAFETY_FACTOR ,0)	SAFETY_FACTOR,	--   안전계수 
				                NVL(S2.PR_DATE_NO ,0)		PR_DATE_NO,		--   발주시기
				                NVL(S2.PR_QTY ,0)			PR_QTY,			--   발주수량
				                NVL(S2.ENTR_DATE ,0)		ENTR_DATE,		--   입고일			
		                        (
		                        SELECT    MAX(MIN_LOT_SIZE)
		                        FROM    ITEM_DTL    S3
		                        WHERE    S1.ITEM_ID    = S3.ITEM_ID
		                        )    MIN_LOT_SIZE
		                        ,CONTAINER_BOX
		                        ,BASE_UOM
		                        ,MINSS -- 안전제고
		                        ,CASE
		                            WHEN S3.IF_FLAG IS NULL
		                            THEN S2.IF_FLAG
		                            ELSE S3.IF_FLAG
		                        END IF_FLAG
		                        ,EDIT_FLAG
		                        ,S3.PR_NO
		                        ,S3.IF_MSGS                                
		                FROM    ITEM_MST    	S1,
		                        APS_PR_PLAN    	S2,
		                        (
		                        SELECT  VERSION, ITEM_ID, 
		                                MIN(IF_FLAG) IF_FLAG,
		                                MIN(IF_MSGS) IF_MSGS,
		                                MIN(PR_NO) PR_NO
		                        FROM    APS_PR_PLAN_IF
		                        WHERE   VERSION    = '$!{version}'
		                        GROUP   
		                        BY      VERSION, ITEM_ID                                    
		                        ) S3,
		                        (
		                        SELECT	ITEM_ID,
		                        		SUM(OUT_STOCK)  OUT_STOCK,
		                        		SUM(BASE_STOCK) BASE_STOCK
		                        FROM	(
		                        		SELECT  DC.ITEM_ID,
		                                		DECODE(DM.DC_LOC_TYPE,'사외',SUM(DC.BASE_STOCK),0)	OUT_STOCK,
		                                		DECODE(DM.DC_LOC_TYPE,'사외',0,SUM(DC.BASE_STOCK))	BASE_STOCK                                        
				                                FROM    DC_DATAWAREHOUSE DC, DC_MST DM
		                                WHERE   CNFM_DATE 	= '$!{version}'
		                                AND		DC.DC_ID	= DM.DC_ID   
		                                AND		DM.DC_ID   != '8922'                             
		                                GROUP
		                                BY      ITEM_ID, DM.DC_LOC_TYPE
		                        		)
		                        GROUP
		                        BY		ITEM_ID                                
                                )S4,
		                        (
		                        SELECT	ITEM_ID,
		                        		SUM(OUT_STOCK)	OUT_STOCK,
		                        		SUM(BASE_STOCK)	BASE_STOCK
		                       	FROM	(
		                                SELECT	S1.CONS_ITEM_ID	ITEM_ID,  
		                                		DECODE(S3.DC_LOC_TYPE,'사외',SUM(S2.BASE_STOCK) * S1.QTY,0)	OUT_STOCK,  
		                                		DECODE(S3.DC_LOC_TYPE,'사외',0,SUM(S2.BASE_STOCK) * S1.QTY)	BASE_STOCK           
		                          		FROM    (
		                                 		SELECT	IM.ITEM_ID, 
				                                        IM.ITEM_NAME,        
				                                        MB.CONS_ITEM_ID,
				                                        MAX(MB.PROD_VER),    
				                                        MB.PROD_ITEM_ID,      
				                                        MB.CONS_QTY,
				                                        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				                                        MB.CONS_QTY_UOM      
				                                FROM    ITEM_MST IM, MBOM MB, CMITEM ITM
				                                WHERE   IM.ITEM_ID 	= MB.CONS_ITEM_ID
				                                AND     IM.ITEM_ID  = ITM.ITEM_CD
				                                AND     IM.ITYPE    = 'HAWA'    
				                                --AND     (IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{version}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')                              
				                                GROUP 
				                                BY      IM.ITEM_ID, 
				                                        IM.ITEM_NAME,
				                                        MB.CONS_ITEM_ID,
				                                        MB.PROD_ITEM_ID,
				                                        MB.CONS_QTY,
				                                        MB.CONS_QTY_UOM, 
				                                        IM.QTY
		                                		)S1, DC_DATAWAREHOUSE S2, DC_MST S3
				                        WHERE	S1.PROD_ITEM_ID = S2.ITEM_ID
				                        AND		S2.DC_ID		= S3.DC_ID
				                        AND		S3.DC_ID		!= '8922'
				                        AND     S2.CNFM_DATE    = '$!{version}'
				                        GROUP
				                        BY      S1.QTY, S1.CONS_ITEM_ID, S3.DC_LOC_TYPE
				                        )
                                GROUP
                                BY		ITEM_ID
                                )S5              		                        
		                WHERE   S1.USE_PR_PLAN    = 'Y'
		           		#if 	( "$!{sell_stop_gubn}" == '1' )
		           		AND		((S1.SELL_STOP_DATE &gt;= TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '99991231' OR SELL_STOP_DATE ='00000000' ) 
		           				OR (NVL(S4.BASE_STOCK,0) + NVL(S4.OUT_STOCK,0) + NVL(S2.ETA,0) 
		                        + NVL(S5.BASE_STOCK,0) + NVL(S5.OUT_STOCK,0) > 0) )
		                #elseif ( "$!{sell_stop_gubn}" == '2' )
		                AND		S1.SELL_STOP_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD')  
		                #end
		                AND     S1.ITEM_ID    = S2.ITEM_ID(+)
		                AND     S2.ITEM_ID    = S3.ITEM_ID(+)
		                AND		S2.ITEM_ID	  = S4.ITEM_ID (+)
		                AND		S2.ITEM_ID	  = S5.ITEM_ID (+)
		                AND     S2.VERSION    = S3.VERSION(+)		                
		                AND     S2.VERSION    = '$!{version}'
		                AND		S1.ITYPE	  = 'HAWA'
		                AND     S1.SALES_CAT05	LIKE '%'||'$!{sales_cat05}'||'%' 
		                AND		S1.SALES_CAT03	LIKE '%'||'$!{item_type}'||'%'						
		                )T1
		        )
		ORDER BY 1		        
	</query>
	
	<!-- DW2 계획수립 대상 리스트 -->
	<query id="ip_03010_Lead_Time_Planning_DW2">
		-- DW 2  수입진행 내역 조회
		SELECT	'$!{item_id}',
				f_get_item_name('$!{item_id}'),
				K1.BANFN,	--	구매 요청 번호
				K1.BADAT,	--	구매 요청 생성일
				K1.MENGE,	--	구매요청수량
				K1.EBELN,	--	구매오더번호
				K1.EBELP,	--	구매 오더 품목 번호
				K1.BEDAT,	--	구매 오더일
				K1.BSMNG,	--	구매오더수량
				K3.ZFBLDT,	--	B/L 개설일자
				K3.ZFBLNO,
				K2.MENGE - NVL(K3.CUM_BLMENGE,0),	-- 미선적량
				NVL(K3.BLMENGE,0),	--	선적량
				K3.ZFHBLNO,	--	HOUSE BL_NO
				NVL(K3.ZFETA,K3.ZFRETA),	-- 입항일/실입항일
				K3.ZFIDSDT,	--	통관일
				K1.LFDAT,	--	입고요청일
                K3.BUDAT,	--  입고일
				                ----------------------------------------
				                CASE
				                    WHEN
				                        K1.LFDAT  >= TRUNC(SYSDATE)                        
				                    THEN '1'
				                    ELSE '0'
				                END DATE_FLAG,
				                ----------------------------------------			
						CASE
							WHEN K3.BUDAT IS NULL THEN
								CASE
									WHEN K3.ZFIDSDT IS NULL THEN
											CASE
												WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
													CASE
														WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
                                                            CASE WHEN K1.EBELN IS NULL OR K1.BEDAT ='00000000' THEN 'PO발행전'
                                                            ELSE 'BL발행전'   
                                                            END                                                         
                                                        ELSE '입항전'
													END
												ELSE '통관전'
											END
									ELSE '통관완료'
								END
							ELSE '입고완료'
						END	STATUS,	--	진행상태
						K4.PR_TO_PO,
						K4.PO_TO_LC,
						K4.LC_TO_PORT,
						K4.PORT_TO_CUST,
						CASE WHEN K1.BEDAT = '00000000' OR K1.FRGDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K1.BEDAT))-TO_DATE(TO_CHAR(K1.BADAT)),0)
                        END, 
                        CASE WHEN K3.ZFBLDT = '00000000' OR K1.BEDAT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFBLDT))-TO_DATE(TO_CHAR(K1.BEDAT)),0)
                        END,
                        CASE WHEN NVL(K3.ZFETA,K3.ZFRETA) = '00000000' OR K3.ZFBLDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA)))-TO_DATE(TO_CHAR(K3.ZFBLDT)),0)
                        END,
                        CASE WHEN K3.ZFIDSDT = '00000000' OR NVL(K3.ZFETA,K3.ZFRETA)='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFIDSDT))-TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA))),0)
                        END,
                        K4.PR_TO_PO + K4.PO_TO_LC + K4.LC_TO_PORT + K4.PORT_TO_CUST,
						CASE WHEN K1.BEDAT = '00000000' OR K1.BADAT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K1.BEDAT))-TO_DATE(TO_CHAR(K1.BADAT)),0)
                        END +
                        CASE WHEN K3.ZFBLDT = '00000000' OR K1.BEDAT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFBLDT))-TO_DATE(TO_CHAR(K1.BEDAT)),0)
                        END +
                        CASE WHEN NVL(K3.ZFETA,K3.ZFRETA) = '00000000' OR K3.ZFBLDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA)))-TO_DATE(TO_CHAR(K3.ZFBLDT)),0)
                        END +
                        CASE WHEN K3.ZFIDSDT = '00000000' OR NVL(K3.ZFETA,K3.ZFRETA)='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFIDSDT))-TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA))),0)
                        END                        
                ----------------------------------------		
			FROM	(
				/* 구매요청, PO정보 */
				SELECT	T1.WERKS,
						T1.MATNR	PROD_CODE,
						T1.LFDAT,	--	품목납품일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
								T1.MENGE
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
						END	MENGE, --	구매요청수량
						T1.MEINS,	--	구매요청단위
						T2.BSTME,	--	발주단위
						T1.BADAT,
						T1.FRGDT,	--	구매 요청 릴리스일
						T1.BANFN,	--	구매 요청 번호
						T1.BNFPO,	--	구매 요청 품목 번호
						T1.EBELN,	--	구매오더번호
						T1.EBELP,	--	구매 오더 품목 번호,
						T1.BEDAT,	--	구매 오더일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
								T1.BSMNG
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
						END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
						T1.AFNAM	--	요청자이름
				FROM	SAPEBAN		T1,
						SAPMARA		T2,
						SAPMDBS		T3
				--WHERE	T1.LOEKZ	= ' '
				--AND		T1.MATNR	= T2.MATNR
				WHERE	T1.MATNR	= T2.MATNR
				AND		T1.MATNR	= '$!{item_id}'
				AND		T1.MATNR	= T3.MATNR
				AND		T1.EBELN	= T3.EBELN
				AND		T1.EBELP	= T3.EBELP
				AND		T1.FRGKZ	= '3' --구매요청 릴리즈
				--AND		T3.ELIKZ	= ' ' -- 납품완료지시자
				--AND		T3.LOEKZ	= ' ' -- 삭제 지시자
				AND		T1.STATU	= 'B' -- PO진행됨
				UNION	ALL
				/* 구매요청, PO정보 */
				SELECT	T1.WERKS,
						T1.MATNR PROD_CODE,
						T1.LFDAT,	--	품목납품일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
								T1.MENGE
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
						END	MENGE, --	구매요청수량
						T1.MEINS,	--	구매요청단위
						T2.BSTME,	--	발주단위
						T1.BADAT,
						T1.FRGDT,	--	구매 요청 릴리스일
						T1.BANFN,	--	구매 요청 번호
						T1.BNFPO,	--	구매 요청 품목 번호
						T1.EBELN,	--	구매오더번호
						T1.EBELP,	--	구매 오더 품목 번호,
						T1.BEDAT,	--	구매 오더일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
								T1.BSMNG
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
						END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
						T1.AFNAM	--	요청자이름
				FROM	SAPEBAN		T1,
						SAPMARA		T2
				--WHERE	T1.LOEKZ	= ' '
				--AND		T1.MATNR	= T2.MATNR
				WHERE	T1.MATNR	= T2.MATNR
				AND		T1.MATNR	= '$!{item_id}'
				AND		T1.FRGKZ	= '3' -- 구매요청 릴리즈
				AND		T1.STATU	= 'N' -- PO진행안됨
				)	K1,
				(
				/* LC정보 */
				SELECT	I.EBELN,	--	구매 문서 번호
						I.EBELP,	--	구매 문서 품목 번호
						H.ZFOPNNO,	--	신용장-승인번호
						I.MENGE,	--	수입의뢰 수량
						I.MEINS,	--	기본 단위
						I.MATNR,
						(
						/* 개설일자 */
						SELECT	DISTINCT
								ZFOPNDT--	개설일
						FROM	SAPZIMTREQST
						WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
						AND		ZFAMDNO	= 	( 
											SELECT	MAX( ZFAMDNO )
											FROM	SAPZIMTREQST
											WHERE	ZFREQNO = H.ZFREQNO
											)
						)	ZFOPNDT
				FROM	SAPZIMTREQHD	H,
						SAPZIMTREQIT	I
				WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
				AND		I.MATNR		= '$!{item_id}'
				)	K2,
				(
				/* B/L 데이타 읽기. */
				SELECT	K1.EBELN	EBELN,
						K1.EBELP	EBELP,
						K1.MATNR,
						RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
						K1.ZFHBLNO ZFHBLNO,
						K1.ZFBLNO,
						K2.ZFOPNNO,
						MAX(K1.BLMENGE)	BLMENGE,
						MAX(K1.ZFBLDT)	ZFBLDT,
						MAX(K1.ZFETA)	ZFETA,
						MAX(K1.ZFRETA)	ZFRETA,
						MAX(K1.ZFIDSDT)	ZFIDSDT,
						MAX(K1.CCMENGE) CCMENGE,
						MAX(K1.BUDAT)	BUDAT,
						SUM(K2.BLMENGE)	CUM_BLMENGE
				FROM	(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.MATNR,
								T2.EBELN,	--	구매 문서 번호
								T2.EBELP,	--	구매 문서 품목 번호
								T1.ZFHBLNO,	--	HOUSE BL_NO
								T2.BLMENGE,	--	BL수량
								T1.ZFBLDT,	--	BL발행일
								T1.ZFETA,		--	입항일
								T1.ZFRETA,		--	실입항일
								(
								SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
								FROM	SAPZIMTIDS	T3
								WHERE	T3.ZFBLNO	= T1.ZFBLNO	
								)	ZFIDSDT,
								(
								/* 통관수량 */
								SELECT	SUM(CCMENGE)
								FROM	SAPZIMTIVIT	T4
								WHERE	T4.ZFBLNO	= T1.ZFBLNO
								AND		T4.ZFBLIT	= T2.ZFBLIT
								)	CCMENGE,
								(
								/* 최근 입고일 */
								SELECT	MAX(BUDAT)
								FROM	SAPZIMVIVHSTIT	T5
								WHERE	T5.ZFBLNO	= T1.ZFBLNO
								AND		T5.ZFBLIT	= T2.ZFBLIT
								)	BUDAT
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'		
						)	K1,
						(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	--	구매 문서 번호
								T2.EBELP,
								T2.MATNR,	
								T2.BLMENGE,
								T1.ZFOPNNO	
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'	
						)	K2
				WHERE	K1.EBELN	= K2.EBELN
				AND		K1.EBELP	= K2.EBELP
				AND		K1.MATNR	= K2.MATNR
				AND		K1.ZFBLNO   = K2.ZFBLNO
				AND  (K1.EBELP !='00000'  AND K1.EBELN !=' ')
				AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
				GROUP
				BY		K1.EBELN, K1.MATNR,K2.ZFOPNNO,
						K1.EBELP,
						K1.ZFHBLNO,
						K1.ZFBLNO	
				)			K3,
				ITEM_MST	K4
			WHERE	K1.EBELN = K2.EBELN(+)
			AND		K1.PROD_CODE = K2.MATNR(+)
			AND		K1.PROD_CODE = K3.MATNR(+)
			AND		K1.PROD_CODE = K4.ITEM_ID(+)
			AND		K1.EBELP = K2.EBELP(+)
			AND		K1.EBELN = K3.EBELN(+)
			AND		K1.EBELP = K3.EBELP(+)			
			AND		K4.ITEM_ID	= '$!{item_id}'	
			AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
			AND		K1.FRGDT >=  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),-24),'YYYYMMDD')			
			UNION	ALL
			-- PR없이 구매오더로 진행된 것.		
			SELECT	'$!{item_id}',
				f_get_item_name('$!{item_id}'),
				K1.BANFN,	--	구매 요청 번호
				K1.FRGDT,	--	구매 요청 릴리스일
				K1.MENGE,	--	구매요청수량
				K1.EBELN,	--	구매오더번호
				K1.EBELP,	--	구매 오더 품목 번호
				K1.BEDAT,	--	구매 오더일
				K1.BSMNG,	--	구매오더수량
				K3.ZFBLDT,	--	B/L 개설일자
				K3.ZFBLNO,
				K2.MENGE - NVL(K3.CUM_BLMENGE,0),	--	미선적량
				NVL(K3.BLMENGE,0),	--선적량
				K3.ZFHBLNO,	-- HOUSE BL_NO
				NVL(K3.ZFETA,K3.ZFRETA),	-- 입항일/실입항일
				K3.ZFIDSDT,--	통관일
						K1.LFDAT,	--	입고요청일
                        K3.BUDAT,	--  입고일
				                ----------------------------------------
				                CASE
				                    WHEN
				                        K1.LFDAT  >= TRUNC(SYSDATE)                        
				                    THEN '1'
				                    ELSE '0'
				                END DATE_FLAG,
				                ----------------------------------------			
						CASE
							WHEN K3.BUDAT IS NULL THEN
								CASE
									WHEN K3.ZFIDSDT IS NULL THEN
											CASE
												WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
													CASE
														WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 'BL발행전'
														ELSE '입항전'
													END
												ELSE '통관전'
											END
									ELSE '통관완료'
								END
							ELSE '입고완료'
						END	STATUS,	--	진행상태
						K4.PR_TO_PO,
						K4.PO_TO_LC,
						K4.LC_TO_PORT,
						K4.PORT_TO_CUST,
						CASE WHEN K1.BEDAT = '00000000' OR K1.FRGDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K1.BEDAT))-TO_DATE(TO_CHAR(K1.FRGDT)),0)
                        END, 
                        CASE WHEN K3.ZFBLDT = '00000000' OR K1.BEDAT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFBLDT))-TO_DATE(TO_CHAR(K1.BEDAT)),0)
                        END,
                        CASE WHEN NVL(K3.ZFETA,K3.ZFRETA) = '00000000' OR K3.ZFBLDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA)))-TO_DATE(TO_CHAR(K3.ZFBLDT)),0)
                        END,
                        CASE WHEN K3.ZFIDSDT = '00000000' OR NVL(K3.ZFETA,K3.ZFRETA)='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFIDSDT))-TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA))),0)
                        END,
                        K4.PR_TO_PO + K4.PO_TO_LC + K4.LC_TO_PORT + K4.PORT_TO_CUST,
						CASE WHEN K1.BEDAT = '00000000' OR K1.FRGDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K1.BEDAT))-TO_DATE(TO_CHAR(K1.FRGDT)),0)
                        END +
                        CASE WHEN K3.ZFBLDT = '00000000' OR K1.BEDAT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFBLDT))-TO_DATE(TO_CHAR(K1.BEDAT)),0)
                        END +
                        CASE WHEN NVL(K3.ZFETA,K3.ZFRETA) = '00000000' OR K3.ZFBLDT='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA)))-TO_DATE(TO_CHAR(K3.ZFBLDT)),0)
                        END +
                        CASE WHEN K3.ZFIDSDT = '00000000' OR NVL(K3.ZFETA,K3.ZFRETA)='00000000'
                             THEN 0
                             ELSE NVL(TO_DATE(TO_CHAR(K3.ZFIDSDT))-TO_DATE(TO_CHAR(NVL(K3.ZFETA,K3.ZFRETA))),0)
                        END
                ----------------------------------------		
			FROM	(
				/* PO정보 */
				SELECT	T1.WERKS,
						T1.MATNR,
						NULL	LFDAT,	--	품목납품일
						0		MENGE, --	구매요청수량
						NULL 	MEINS,	--	구매요청단위
						T2.BSTME,	
						NULL	FRGDT,
						NULL	BADAT,	--	구매 요청 릴리스일
						T1.BANFN,	--	구매 요청 번호
						T1.BNFPO,	--	구매 요청 품목 번호
						T1.EBELN,	--	구매오더번호
						T1.EBELP,	--	구매 오더 품목 번호,
						T1.AEDAT	BEDAT,	--	구매 오더일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN -- MARA에 발주단위가 존재하지 않으면
								T1.MENGE
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
						END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
						T1.AFNAM	--	요청자이름
				FROM	SAPEKPO		T1,
						SAPMARA		T2
				--WHERE	T1.ELIKZ	= ' ' -- 납품완료지시자
				--AND		T1.LOEKZ	= ' ' -- 삭제 지시자
				--AND		T1.MATNR	= T2.MATNR
				WHERE	T1.MATNR	= T2.MATNR
				AND		T1.MATNR	= '$!{item_id}'
				AND		T1.BANFN	= ' '	-- 구매요청 없다
				)	K1,
				(
				/* LC정보 */
				SELECT	I.EBELN,	--	구매 문서 번호
						I.EBELP,	--	구매 문서 품목 번호
						H.ZFOPNNO,	--	신용장-승인번호
						I.MENGE,	--	수입의뢰 수량
						I.MEINS,	--	기본 단위
						I.MATNR,
						(
						/* 개설일자 */
						SELECT	DISTINCT
								ZFOPNDT--	개설일
						FROM	SAPZIMTREQST
						WHERE	ZFREQNO = H.ZFREQNO 
						AND		ZFAMDNO	= 	(
											SELECT	MAX( ZFAMDNO )
											FROM	SAPZIMTREQST
											WHERE	ZFREQNO = H.ZFREQNO
											)
						)	ZFOPNDT
				FROM	SAPZIMTREQHD	H,
						SAPZIMTREQIT	I
				WHERE	H.ZFREQNO 	= I.ZFREQNO	
				AND		I.MATNR		= '$!{item_id}'
				)	K2,
				(
				/* B/L 데이타 읽기. */
				SELECT	K1.EBELN	EBELN,
						K1.EBELP	EBELP,
						K1.MATNR,
						RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
						K1.ZFHBLNO ZFHBLNO,
						K1.ZFBLNO,
						K2.ZFOPNNO,
						MAX(K1.BLMENGE)	BLMENGE,
						MAX(K1.ZFBLDT)	ZFBLDT,
						MAX(K1.ZFETA)	ZFETA,
						MAX(K1.ZFRETA)	ZFRETA,
						MAX(K1.ZFIDSDT)	ZFIDSDT,
						MAX(K1.CCMENGE) CCMENGE,
						MAX(K1.BUDAT)	BUDAT,
						SUM(K2.BLMENGE)	CUM_BLMENGE
				FROM	(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	
								T2.EBELP,	
								T1.ZFHBLNO,	
								T2.BLMENGE,	
								T1.ZFBLDT,		
								T1.ZFETA,		
								T1.ZFRETA,	
								T2.MATNR,	
								(
								SELECT	MAX(ZFIDSDT)	
								FROM	SAPZIMTIDS	T3
								WHERE	T3.ZFBLNO	= T1.ZFBLNO	
								)	ZFIDSDT,
								(
								/* 통관수량 */
								SELECT	SUM(CCMENGE)
								FROM	SAPZIMTIVIT	T4
								WHERE	T4.ZFBLNO	= T1.ZFBLNO
								AND		T4.ZFBLIT	= T2.ZFBLIT
								)	CCMENGE,
								(
								/* 최근 입고일 */
								SELECT	MAX(BUDAT)
								FROM	SAPZIMVIVHSTIT	T5
								WHERE	T5.ZFBLNO	= T1.ZFBLNO
								AND		T5.ZFBLIT	= T2.ZFBLIT
								)	BUDAT
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'		
						)	K1,
						(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	
								T2.EBELP,
								T2.MATNR,	
								T2.BLMENGE,
								T1.ZFOPNNO	
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'	
						)	K2
				WHERE	K1.EBELN	= K2.EBELN
				AND		K1.MATNR	= K2.MATNR
				AND		K1.EBELP	= K2.EBELP
				AND		K1.ZFBLNO   = K2.ZFBLNO
				AND  	(K1.EBELP !='00000'  AND K1.EBELN !=' ')
				AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
				GROUP
				BY		K1.EBELN, K1.MATNR, K2.ZFOPNNO,
						K1.EBELP,
						K1.ZFHBLNO,
						K1.ZFBLNO	
				)	K3,
				ITEM_MST	K4
		WHERE	K1.EBELN = K2.EBELN(+)
		AND		K1.MATNR = K2.MATNR(+)
		AND		K1.MATNR = K3.MATNR(+)
		AND		K1.MATNR = K4.ITEM_ID(+)		
		AND		K1.EBELP = K2.EBELP(+)
		AND		K1.EBELN = K3.EBELN(+)
		AND		K1.EBELP = K3.EBELP(+)
		AND		K4.ITEM_ID	= '$!{item_id}'	
		AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
		AND		K1.FRGDT >=  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),-24),'YYYYMMDD')
		ORDER
		BY		4,8,16
		
	</query>
	
	<query id="ip_03020_Gift_Set_list" paging="false">
		SELECT  F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02)       SALES_CAT02,
				IM.ITEM_ID,
				IM.ITEM_NAME,
				IM.SPEC,
				5000																									"선물세트운영계획",
				NVL(PS.QTY,0)																							"선물세트생산계획",
				NVL(PO.COMPL_QTY,0)																						"금주생산누적실적",
				NVL(PS.QTY,0) - NVL(PO.COMPL_QTY,0)																		"금주생산잔량",
				NVL(SUM(DW.BASE_STOCK),0)     																			"기초재고",
				SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))-SUM(NVL(DW.ISSUE_TA,0))-SUM(NVL(DW.ISSUE_WMS,0))      	"일계",
				MAX(NVL(DWSA.SELL_BOX_CUM,0))+SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))
				-SUM(NVL(ISSUE_TA,0))-SUM(NVL(ISSUE_WMS,0))  															"누계",
				NVL(CH.CHGO_QTY,0)																						"출고누계",
                SUM(DW.STOCK_EXPT)                      													 			"예상재고", 
                TO_CHAR(ROUND(NVL(CH.CHGO_QTY,0)/5000,2),'FM9990D99')||'%'												"출고율",
                NVL(GP.PRICE,0)																							"출고가격",
                NVL(GP.PRICE,0) * 5000																					"총계획금액",
                NVL(CH.CHGO_QTY,0) * 5000																				"총판매금액",
                (NVL(CH.CHGO_QTY,0) * 5000) * 0.9																		"지원제외판매금액",
                NVL(BX.BOX_COST,0)																						"박스당작업비",
                0																										"금년총작업비",
                0																										"금년매출액누계"
		FROM	DC_DATAWAREHOUSE DW,
				ITEM_MST IM,
				GIFT_PRICE	GP,
				(--박스 당 작업비
				SELECT	ITEM_ID,
						BOX_COST
				FROM 	SET_PROD_MST
				WHERE 	(ITEM_ID, PROD_VER) IN ( SELECT ITEM_ID, MAX(PROD_VER)
												 FROM	SET_PROD_MST
												 GROUP
												 BY		ITEM_ID
												 )
				)BX,
				(
				SELECT   PO.ITEM_ID, SUM(COMPL_QTY) COMPL_QTY 
               	FROM     V_ERP_PO_MES PO, ITEM_MST IM,
                        (
                         SELECT  CAL_DATE
                         FROM    CAL_MST
                         WHERE   YYYYMMDD BETWEEN TRUNC(TO_DATE('$!{end_date}'),'D')+1 AND TRUNC(TO_DATE('$!{end_date}'))                             
                         )    CAL
               	WHERE    PO.ITEM_ID      = IM.ITEM_ID
               	AND      IM.SALES_CAT03  = '153'
               	AND      IM.ITYPE 		= 'HAWA'
               	AND      IM.DIVISION 	= '60'
               	AND      (IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
               	AND      PO.START_DTTM = CAL.CAL_DATE
               	GROUP
               	BY       PO.ITEM_ID
				)PO,
				(--금년 출고 누계
				SELECT  S1.ITEM_CD ITEM_ID,
				        ROUND(SUM(S1.INPUT_QTY)	/(DECODE (S2.MIN_UNIT_UOM,'EA',S2.BOX_UNIT_QTY,1)),0)   CHGO_QTY 
				FROM    LO020ND S1, CMITEM S2
				WHERE 	CENTER_CD IN ('13007101','13007501')
				AND     S1.ITEM_CD  = S2.ITEM_CD
				AND 	OUTBOUND_DATE BETWEEN TRUNC(TO_DATE('$!{end_date}'),'D')+1 AND TRUNC(TO_DATE('$!{end_date}'),'D')+7 
				GROUP 
				BY 		S1.ITEM_CD,
				        S2.MIN_UNIT_UOM,
				        S2.BOX_UNIT_QTY
				)CH,
				(--선물세트 생산계획
				SELECT	ITEM_ID,
						SUM(QTY)	QTY 
				FROM 	IF_SET_PROD_ORDER
				WHERE 	PLANT_ID	='1300'				
				AND 	START_DATE BETWEEN TRUNC(TO_DATE('$!{end_date}'),'D')+1 AND TRUNC(TO_DATE('$!{end_date}'),'D')+7
				AND 	SEQ			='10'
				AND		IF_FLAG 	= 'C'
				GROUP
				BY		ITEM_ID
				)PS,
				(--판매실적 누계
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT_RECENT SA,
                		 DC_MST DM,                        
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
                         )CAL                            
                WHERE    SA.SALE_DATE = CAL.YYYYMMDD
                AND		 DM.EXPORT_FLAG IS NULL
              	AND		 DM.DC_ID NOT IN ('8901','8903','8938')  --CY 재고 제거
              	AND 	 SA.DELIV_LOC = DM.DC_ID 
                GROUP 
                BY 		 SA.ITEM_ID
               )DWSA
		WHERE	IM.ITEM_ID		= DW.ITEM_ID
		AND		DW.CNFM_DATE 	= '$!{end_date}'
		AND		IM.ITEM_ID		= DWSA.ITEM_ID(+)
		AND		IM.ITEM_ID		= PS.ITEM_ID(+)
		AND		IM.ITEM_ID		= GP.ITEM_ID(+)
		AND		IM.ITEM_ID		= CH.ITEM_ID(+)
		AND		IM.ITEM_ID		= BX.ITEM_ID(+)
		AND		IM.SALES_CAT03	= '153'
		AND		(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		AND		IM.ITEM_ID		= PO.ITEM_ID(+)
		GROUP
		BY		IM.SALES_CAT02,
				IM.ITEM_ID,
				IM.ITEM_NAME,
				IM.SPEC,
				PO.COMPL_QTY,
				PS.QTY,
				GP.PRICE,
				CH.CHGO_QTY,
				BX.BOX_COST
		ORDER
		BY		1,2
		
	</query>
	
	<query id="ip_08010_EDI_iput_list" paging="true"> 
	
	SELECT	SEQ,
			TO_CHAR(TO_DATE(A.CNFM_DATE,'YYYY-MM-DD'),'YYYY-MM-DD'),
			A.CUST_CODE,
			A.CUST_NAME,
			A.PROD_CODE,
			A.PROD_NAME,
			A.ODER_BOX,
			A.IPUT_TIME			
	FROM	(
			SELECT  RANK() OVER(ORDER BY A.CNFM_DATE,B.CUST_NAME,A.PROD_CODE,A.IPUT_DATE) SEQ,
					A.CNFM_DATE,
			        A.CUST_CODE,
			        B.CUST_NAME, 
			        A.PROD_CODE,
			        C.PROD_NAME,
			        SUM(A.ODER_BOX)	ODER_BOX,   
			        A.IPUT_DATE,     
			        TO_CHAR(TO_DATE(A.IPUT_DATE,'YYYY-MM-DD'),'YYYY-MM-DD')||' '||SUBSTR(A.IPUT_TIME,0,2)||':'||SUBSTR(A.IPUT_TIME,3,2)||':'||SUBSTR(A.IPUT_TIME,5,2) IPUT_TIME
			FROM    SDORT120 A, 
					SDSTT101 B, 
					SDSTT301 C
			WHERE   A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
			AND     A.CUST_CODE = B.CUST_CODE
			AND     A.PROD_CODE = C.PROD_CODE
			AND     A.GRUP_CODE = '32'		--32 이마트
			AND		A.ERR_GUBN != '16'		--16을 제거해야 에러전표가 사라진다
		  --AND		A.SLIP_NO IS NOT NULL	--SLIP_NO가 NULL이면 마감이 안되었다.
			AND		A.IPUT_TIME &gt; '180000'
			AND		TO_DATE(A.CNFM_DATE,'YYYY-MM-DD') - 1 &lt;= TO_DATE(A.IPUT_DATE,'YYYY-MM-DD')
			AND		(A.PROD_CODE	LIKE '%'||'$!{search_item}'||'%'
				OR	 C.PROD_NAME	LIKE '%'||'$!{search_item}'||'%')	
			GROUP
			BY		A.CNFM_DATE,
			        A.CUST_CODE,
			        B.CUST_NAME, 
			        A.PROD_CODE,
			        C.PROD_NAME,			       
			        A.IPUT_TIME,
			        A.IPUT_DATE
			)A
	ORDER
	BY      1,2,4,5,8
	</query>		
	
	<query id="ip_08020_Expert_Order_version" paging="true">
	SELECT  DISTINCT VERSION
	FROM	(
	        SELECT      DISTINCT VERSION
	        FROM        EX_PROD_PLAN	        
	        )
	WHERE   VERSION &lt;= TO_CHAR(TRUNC(SYSDATE)+7,'YYYYMMDD') 
	ORDER
	BY      1 DESC
	</query>
	
	<query id="ip_08020_Expert_Order_max_version" paging="true">
	SELECT   MAX(TO_CHAR(TO_DATE(VERSION)+7,'YYYYMMDD'))
	FROM	(
	        SELECT      DISTINCT VERSION
	        FROM        EX_PROD_PLAN	        
	        )
	WHERE   VERSION &lt;= TO_CHAR(TRUNC(SYSDATE)+7,'YYYYMMDD') 
	ORDER
	BY      1 DESC
	</query>
	
	<query id="ip_08020_Expert_Order_list" paging="true"> 
	SELECT	A.*,
			ROWNUM
	FROM	(
			SELECT  DECODE(T1.MTO_MTS_TYPE,'0001','MTO','0002','MTS','기타'),
					F_GET_CODE_NAME('SALES_CAT3', F_GET_SALES_CAT03(T1.ITEM_ID)), 
	                T1.ITEM_ID,
	                T1.ITEM_NAME,
	                T1.SPEC,
                    NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0),            --차주 가용재고
                    NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0)
                    -NVL(T8.BOOKING_QTY_W2,0),		--차차주 가용재고
                    SUM(T8.ORDER_QTY),    --주문량
                    CASE    WHEN (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0) - NVL(T8.BOOKING_QTY_W3,0)
                    			- NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0))>= SUM(T8.ORDER_QTY)
                             THEN 0
                             ELSE SUM(T8.ORDER_QTY) - (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0)
                             - NVL(T8.BOOKING_QTY_W3,0) - NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0))
                    END,            --생산필요량             
                    NVL(T1.MOQ,0),
                    DECODE(
                            CASE WHEN (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0) - NVL(T8.BOOKING_QTY_W3,0)
                            - NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0)) >= SUM(T8.ORDER_QTY)
                             THEN 0
                             ELSE SUM(T8.ORDER_QTY) - (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) -NVL(T8.BOOKING_QTY_W2,0) -NVL(T8.BOOKING_QTY_W3,0)
                             -NVL(T8.BOOKING_QTY_W4,0) -NVL(T8.BOOKING_QTY_W5,0))
                               END,0,0,
                               CASE WHEN (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) -NVL(T8.BOOKING_QTY_W2,0) -NVL(T8.BOOKING_QTY_W3,0)
                               -NVL(T8.BOOKING_QTY_W4,0) -NVL(T8.BOOKING_QTY_W5,0)) >= SUM(T8.ORDER_QTY)
                             THEN 0
                             ELSE SUM(T8.ORDER_QTY) - (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) -NVL(T8.BOOKING_QTY_W2,0) -NVL(T8.BOOKING_QTY_W3,0)
                             -NVL(T8.BOOKING_QTY_W4,0) -NVL(T8.BOOKING_QTY_W5,0))
                               END - NVL(T1.MOQ,0)),                    
                    NVL(T8.PLAN_QTY,0),    --차주 생산계획          
                    0, --안전재고
                    NVL(T8.BOOKING_QTY_W2,0),	--차주 부킹량     
                    NVL(T8.BOOKING_QTY_W3,0),
                    NVL(T8.BOOKING_QTY_W4,0),
                    NVL(T8.BOOKING_QTY_W5,0),                    
                    NVL(T3.QTY,0),--전월
                    NVL(T4.QTY,0),	--생산계획 확정량
                    (
                    SELECT	TRIM(FLAG)
                    FROM	EX_PROD_PLAN_FLAG
                    WHERE	VERSION = '$!{cnfm_date}' 
                    )
            FROM    ITEM_MST     T1,            		
            		( 
            		SELECT	ITEM_ID, SUM(PRE_MONTH_SELL) QTY
            		FROM	DC_DATAWAREHOUSE
            		WHERE	CNFM_DATE='$!{cnfm_date}'
            		GROUP BY ITEM_ID  
            		)T3,
            		(
            		SELECT	ITEM_ID,
            				NVL(EXPORT_PLAN,NVL(LST_PRODQTY,0))	QTY
            		FROM	PLANT_ALLOC_ITEM_ADJ
            		WHERE	VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+2,'YYYYMMDD')||'%'
            		AND		DUE_DATE &lt; TRUNC(TO_DATE('$!{cnfm_date}'),'D')+14
            		)T4,               
                    (
                    SELECT	ITEM_ID,
                            PLAN_QTY,
                            W_PROD,
                            BOOKING_QTY,
                            BOOKING_QTY_W2,
                            BOOKING_QTY_W3,
                            BOOKING_QTY_W4,
                            BOOKING_QTY_W5,
                            PRE_CHGO,
                            BASE_STOCK,
                            ORDER_QTY,
                            MI_CHGO
                    FROM    EX_PROD_PLAN
                    WHERE   VERSION = '$!{cnfm_date}'
                    )T8                       
            WHERE   T1.ITEM_ID  = T8.ITEM_ID
            AND		T1.ITEM_ID	= T3.ITEM_ID (+)
            AND		T1.ITEM_ID  = T4.ITEM_ID (+)
            AND		T1.ITYPE	= 'FERT'        
            #if ( "$!{domain}" == "EX" )            
            AND     NVL(T1.CAT03,'XX')   LIKE 'O%'         --수출제품만 
            #elseif ( "$!{domain}" == "DO" )      
            AND     NVL(T1.CAT03,'XX')  NOT LIKE 'O%'         --내수제품만 
            #end
            #if ( "$!{mto_gubn}" == "0001" ) 
            AND		T1.MTO_MTS_TYPE = '0001'
            #elseif ( "$!{mto_gubn}" == "0002" )   
            AND		T1.MTO_MTS_TYPE = '0002'
            #end
            GROUP
            BY      F_GET_CODE_NAME('SALES_CAT3', F_GET_SALES_CAT03(T1.ITEM_ID)),      
                    T1.ITEM_ID,
                    T1.ITEM_NAME, 
                    T1.MOQ,
                    T8.BASE_STOCK,
                    T8.PRE_CHGO,
                    T8.W_PROD,
                    T8.BOOKING_QTY,
                    T8.BOOKING_QTY_W2,
                    T8.BOOKING_QTY_W3,
                    T8.BOOKING_QTY_W4,
                    T8.BOOKING_QTY_W5,
                    T8.PLAN_QTY,
                    T8.ORDER_QTY,
                    T1.MTO_MTS_TYPE,
                    T8.MI_CHGO,
                    T3.QTY,
                    T4.QTY,
                    T1.SPEC       
            ORDER 
            BY      F_GET_SALES_CAT03(T1.ITEM_ID),
                    T1.ITEM_ID                   
            )A
	</query>
	
	<query id="ip_08020_Expert_Order_list_pop" paging="true">
	
	SELECT  NVL(S1.GUBN,S2.GUBN),
	        NVL(S1.VBELN,S2.VBELN),
	        NVL(S1.KUNNR,S2.KUNNR),
	        NVL(S1.CUST_NAME,S2.CUST_NAME),
	        NVL(S1.MATNR,S2.MATNR),
	        NVL(S1.ARKTX,S2.ARKTX),
	        NVL(S1.QTY,S2.QTY),
	        NVL(S1.ZFEPSD,S2.ZFEPSD),
	        NVL(S1.ZFETD,S2.ZFETD),
	        NVL(S1.ERNAM,S2.ERNAM),
	        TO_CHAR(TO_DATE(NVL(S1.ERDAT,S2.ERDAT),'YYYY-MM-DD'),'YYYY-MM-DD'),
        	SUBSTR(NVL(S1.ERZET,S2.ERZET),1,2)||':'||SUBSTR(NVL(S1.ERZET,S2.ERZET),3,2)||':'||SUBSTR(NVL(S1.ERZET,S2.ERZET),5,2)
	FROM	(    
			SELECT  '생성' GUBN,
					SUBSTR(T1.VBELN,6,5)	VBELN,       --영업오더번호
	                DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7))	KUNNR,
	                T6.CUST_NAME,                
	                T2.MATNR,
	                T2.ARKTX, 
	                SUM(T2.LFIMG) QTY,        --주문량 
	                T1.ZFEPSD,   
	                T4.ZFETD,           
	                F_GET_EMP_NAME(T1.ERNAM) ERNAM,
	                T1.ERDAT,
	                T1.ERZET
	        FROM    SAPVBAK     T1,
	                SAPLIPS     T2,
	                SAPVBUK     T3, 
	                SAPZTEBK	T4,
	                SAPZTEBKIT	T5,
	                SDSTT101    T6                                                              
	        WHERE   T1.MANDT = '100'   
	        AND     T2.MANDT = '100'
	        AND		T3.MANDT = '100'
	        AND     T4.MANDT = '100'
	        AND		T5.MANDT = '100'
	        AND		T1.VKORG = '1500'
	        AND     T1.AUART LIKE 'X%'
	        AND     T2.PSTYV LIKE    'X%'  -- 납품 품목범주
	        AND		T2.MATNR = '$!{item_id}'
	        AND		T2.VBELN = T3.VBELN
	       -- AND		T3.WBSTK != 'C'
	        AND		T2.VBELN  = T5.AUBEL
	        AND     T4.ZFBGNO = T5.ZFBGNO
	        AND     DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)) = T6.CUST_CODE(+)
	        AND     T1.ZPLDAT BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+13,'YYYYMMDD')        
	        AND     T1.VBELN =  T2.VGBEL
	        GROUP
	        BY      T2.MATNR,
	                T1.VBELN,   
	                T1.KUNNR,         
	                T6.CUST_NAME,                      
	                T2.ARKTX,
	                T1.ERNAM,
	                T1.ZFEPSD,
	                T4.ZFETD,
	                T1.ERDAT,
	                T1.ERZET
	        )S1,
	        (
	        SELECT  '미생성' GUBN,
	      			SUBSTR(A.VBELN,6,5)	VBELN,                  -- 오더번호
	                DECODE(LENGTH(A.KUNNR),5,A.KUNNR,10,SUBSTR(A.KUNNR,4,7))	KUNNR,
	                D.CUST_NAME,  
	                B.MATNR,
	                B.ARKTX,
	                SUM(B.LSMENG) QTY,   
	                A.ZFEPSD, 
	                '' ZFETD,          
	                F_GET_EMP_NAME(A.ERNAM)  ERNAM,
	                A.ERDAT,
	                A.ERZET                                
	        FROM    SAPVBAK        A,
	                SAPVBAP        B,
	                SAPVBUK        C,
	                SDSTT101       D
	        WHERE   A.MANDT =    '100'
	        AND     A.ZPLDAT BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+6,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD')           
	        AND     A.VKORG =    '1500'
	        AND     C.MANDT =    '100'
	        AND     A.VBELN =    C.VBELN
	        AND     DECODE(LENGTH(A.KUNNR),5,A.KUNNR,10,SUBSTR(A.KUNNR,4,7)) = D.CUST_CODE(+)
	       -- AND     C.LFSTK =    'A'
	        AND     B.MANDT =    '100'
	      	AND     A.VBELN =    B.VBELN
	     	AND		B.MATNR = '$!{item_id}'
	        AND     B.PSTYV LIKE 'X%'
	        AND     A.AUART LIKE 'X%'
	        GROUP
	        BY      A.VBELN,
	                A.KUNNR,
	                D.CUST_NAME,  
	                B.MATNR,
	                B.ARKTX,
	                A.ERNAM,
	                A.ZFEPSD,
	                A.ERDAT,
	                A.ERZET
	        )S2
	WHERE	S2.VBELN = S1.VBELN(+)  	                
    ORDER 
    BY      1
	</query>
	
	<query id="ip_08030_Expert_prod_check" paging="true"> 
	SELECT	A.*,
			ROWNUM
	FROM	(
			SELECT  F_GET_CODE_NAME('SALES_CAT3', F_GET_SALES_CAT03(T1.ITEM_ID)), 
	                T1.ITEM_ID,
	                T1.ITEM_NAME,
                    NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0),            --차주 가용재고
                    NVL(SUM(T8.ORDER_QTY),0),    --주문량
                    0,
                    CASE    WHEN (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0) - NVL(T8.BOOKING_QTY_W3,0)
                    			- NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0))>= SUM(T8.ORDER_QTY)
                             THEN 0
                             ELSE SUM(T8.ORDER_QTY) - (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0)
                             - NVL(T8.BOOKING_QTY_W3,0) - NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0))
                    END,            --생산필요량       
                    --NVL(T8.PLAN_QTY,0),    --차주 생산계획
                    NVL(T2.MON_PLAN,0),
                    NVL(T2.MON_PROD,0),
                    NVL(T2.MON_GAP,0),
                    NVL(T2.TUE_PLAN,0),
                    NVL(T2.TUE_PROD,0),
                    NVL(T2.TUE_GAP,0),
                    NVL(T2.WED_PLAN,0),
                    NVL(T2.WED_PROD,0),
                    NVL(T2.WED_GAP,0),
                    NVL(T2.THR_PLAN,0),
                    NVL(T2.THR_PROD,0),
                    NVL(T2.THR_GAP,0),
                    NVL(T2.FRI_PLAN,0),
                    NVL(T2.FRI_PROD,0),
                    NVL(T2.FRI_GAP,0),
                    NVL(T2.SAT_PLAN,0),
                    NVL(T2.SAT_PROD,0),
                    NVL(T2.SAT_GAP,0),
                    NVL(T2.TOT_PLAN,0),
                    NVL(T2.TOT_PROD,0),
                    NVL(T2.TOT_GAP,0),
                    NVL(T3.QTY,0),
                    DECODE(T1.MTO_MTS_TYPE,'0001','MTO','0002','MTS','기타')		MTO_MTS_TYPE 
            FROM    ITEM_MST     T1, 
            		(
            		SELECT	ITEM_ID,
            				NVL(EXPORT_PLAN,NVL(LST_PRODQTY,0))	QTY
            		FROM	PLANT_ALLOC_ITEM_ADJ
            		WHERE	VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+2,'YYYYMMDD')||'%'
            		AND		DUE_DATE &lt; TRUNC(TO_DATE('$!{cnfm_date}'),'D')+14
            		 )T3,            	
            		(           		 
					SELECT  ITEM_ID,
					        NVL(SUM(MON_PLAN),0)	MON_PLAN,
					        NVL(SUM(MON_PROD),0)	MON_PROD,
					        NVL(SUM(MON_GAP),0)		MON_GAP,
					        NVL(SUM(TUE_PLAN),0)	TUE_PLAN,
					        NVL(SUM(TUE_PROD),0)	TUE_PROD,
					        NVL(SUM(TUE_GAP),0)		TUE_GAP,
					        NVL(SUM(WED_PLAN),0)	WED_PLAN,
					        NVL(SUM(WED_PROD),0)	WED_PROD,
					        NVL(SUM(WED_GAP),0)		WED_GAP,
					        NVL(SUM(THR_PLAN),0)	THR_PLAN,
					        NVL(SUM(THR_PROD),0)	THR_PROD,
					        NVL(SUM(THR_GAP),0)		THR_GAP,
					        NVL(SUM(FRI_PLAN),0)	FRI_PLAN,
					        NVL(SUM(FRI_PROD),0)	FRI_PROD,
					        NVL(SUM(FRI_GAP),0)		FRI_GAP,
					        NVL(SUM(SAT_PLAN),0)	SAT_PLAN,
					        NVL(SUM(SAT_PROD),0)	SAT_PROD,
					        NVL(SUM(SAT_GAP),0)		SAT_GAP,
					        NVL(SUM(TOT_PLAN),0)	TOT_PLAN,
					        NVL(SUM(TOT_PROD),0)	TOT_PROD,
					        NVL(SUM(TOT_GAP),0)		TOT_GAP
					FROM	(       
							SELECT	ITEM_ID,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PLAN_QTY,0),0)    	MON_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PROD_QTY,0),0)     	MON_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PLAN_QTY,0),0)    	MON_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PLAN_QTY,0),0)    	TUE_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PROD_QTY,0),0)     	TUE_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PLAN_QTY,0),0)    	TUE_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PLAN_QTY,0),0)    	WED_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PROD_QTY,0),0)     	WED_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PLAN_QTY,0),0)    	WED_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PLAN_QTY,0),0)    	THR_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PROD_QTY,0),0)     	THR_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PLAN_QTY,0),0)    	THR_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PLAN_QTY,0),0)    	FRI_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PROD_QTY,0),0)     	FRI_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PLAN_QTY,0),0)    	FRI_GAP,							                                                                                           		
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PLAN_QTY,0),0)    	SAT_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PROD_QTY,0),0)    	SAT_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PLAN_QTY,0),0)    	SAT_GAP,    
							        NVL(PLAN_QTY,0)        																					TOT_PLAN,
							        NVL(PROD_QTY,0)       																					TOT_PROD,
							        NVL(PROD_QTY,0) - NVL(PLAN_QTY,0)    																	TOT_GAP
							FROM	(
									SELECT	S1.ITEM_ID,                                    
					                    	S1.START_DATE,            
						                    SUM(S1.SHIFT_QTY)   PLAN_QTY,
						                    SUM((
						                        SELECT  SUM(COMPL_QTY) COMPL_QTY
						                        FROM    V_ERP_PO_MES
						                        WHERE   PO_ID       = S2.AUFNR
						                        AND     PLANT_ID    = S1.PLANT_ID
						                        AND     ITEM_ID     = S1.ITEM_ID
						                        ))PROD_QTY
					            	FROM	(
					                    	SELECT	DISTINCT SUBSTR(WO_ID,12,8) START_DATE, 
						                            WO_ID,
						                            ITEM_ID, 
						                            PLANT_ID, 
						                            SHIFT_QTY
						                    FROM    DAILY_SCH_PLAN_SHIFT S1
						                    WHERE   S1.VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+2,'YYYYMMDD')||'%'	
						                    AND		WO_END = 'Y'					                    
					                    	)S1,
					                    	(
					                    	SELECT	AUFNR,
					                    			SCMWO
					                    	FROM	SAPAUFK
					                    	WHERE	MANDT = '100'
					                    	)S2, ITEM_MST S4
					            	WHERE	S1.WO_ID     = S2.SCMWO (+)           
					            	AND     S1.ITEM_ID   = S4.ITEM_ID					       
						            AND     S4.ITYPE     = 'FERT'
						            AND     S1.START_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+13,'YYYYMMDD')         
						            AND     S4.MTO_MTS_TYPE LIKE '%'||''||'%'
					                AND     S4.MATERIAL_GROUP BETWEEN '5K000' AND '5S999'  
					                GROUP 
					            	BY      S1.ITEM_ID,
					                    	S1.START_DATE
					            	)          
							)
					GROUP 
					BY 		ITEM_ID					
					ORDER 
					BY 		1           
            		)T2,                 
                    (
                    SELECT	ITEM_ID,
                            PLAN_QTY,
                            W_PROD,
                            BOOKING_QTY,
                            BOOKING_QTY_W2,
                            BOOKING_QTY_W3,
                            BOOKING_QTY_W4,
                            BOOKING_QTY_W5,
                            PRE_CHGO,
                            MI_CHGO,
                            BASE_STOCK,
                            ORDER_QTY
                    FROM    EX_PROD_PLAN
                    WHERE   VERSION = '$!{cnfm_date}'
                    )T8                       
            WHERE   T1.ITEM_ID 	= T8.ITEM_ID(+) 
            AND		T1.ITEM_ID 	= T3.ITEM_ID(+)
            AND		T1.ITEM_ID 	= T2.ITEM_ID
            AND		T1.ITYPE	= 'FERT'
            #if ( "$!{domain}" == "EX" )            
            AND     NVL(T1.CAT03,'XX')   LIKE 'O%'         --수출제품만 
            #elseif ( "$!{domain}" == "DO" )      
            AND     NVL(T1.CAT03,'XX')  NOT LIKE 'O%'         --내수제품만 
            #end
            #if ( "$!{mto_gubn}" == "0001" ) 
            AND		T1.MTO_MTS_TYPE = '0001'
            #elseif ( "$!{mto_gubn}" == "0002" )   
            AND		T1.MTO_MTS_TYPE = '0002'
            #end   
            AND		(T1.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	 T1.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
            GROUP
            BY      F_GET_CODE_NAME('SALES_CAT3', F_GET_SALES_CAT03(T1.ITEM_ID)),      
                    T1.ITEM_ID,
                    T1.ITEM_NAME,
                    T8.BASE_STOCK,
                    T8.PRE_CHGO,
                    T8.W_PROD,
                    T8.BOOKING_QTY,
                    T8.BOOKING_QTY_W2,
                    T8.BOOKING_QTY_W3,
                    T8.BOOKING_QTY_W4,
                    T8.BOOKING_QTY_W5,
                    T8.MI_CHGO,
                    T8.PLAN_QTY,
                    T8.ORDER_QTY,
                    T2.MON_PLAN,
                    T2.MON_PROD,
                    T2.MON_GAP,
                    T2.TUE_PLAN,
                    T2.TUE_PROD,
                    T2.TUE_GAP,                    
                    T2.WED_PLAN,
                    T2.WED_PROD,
                    T2.WED_GAP,                    
                    T2.THR_PLAN,
                    T2.THR_PROD,
                    T2.THR_GAP,                    
                    T2.FRI_PLAN,
                    T2.FRI_PROD,
                    T2.FRI_GAP,
                    T2.SAT_PLAN,
                    T2.SAT_PROD,
                    T2.SAT_GAP,
                    T2.TOT_PLAN,
                    T2.TOT_PROD,
                    T2.TOT_GAP,
                    T3.QTY,
                    T1.MTO_MTS_TYPE  
            UNION
            SELECT  F_GET_CODE_NAME('SALES_CAT3', F_GET_SALES_CAT03(T1.ITEM_ID)), 
	                T1.ITEM_ID,
	                T1.ITEM_NAME,
                    NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0),            --차주 가용재고
                    NVL(SUM(T8.ORDER_QTY),0),    --주문량
                    0,
                    CASE    WHEN (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0) - NVL(T8.BOOKING_QTY_W3,0)
                    			- NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0))>= SUM(T8.ORDER_QTY)
                             THEN 0
                             ELSE SUM(T8.ORDER_QTY) - (NVL(T8.BASE_STOCK,0) + NVL(T8.PRE_CHGO,0) - NVL(T8.MI_CHGO,0) + NVL(T8.W_PROD,0) - NVL(T8.BOOKING_QTY,0) - NVL(T8.BOOKING_QTY_W2,0)
                             - NVL(T8.BOOKING_QTY_W3,0) - NVL(T8.BOOKING_QTY_W4,0) - NVL(T8.BOOKING_QTY_W5,0))
                    END,            --생산필요량          
                    --NVL(T8.PLAN_QTY,0),    --차주 생산계획
                    NVL(T2.MON_PLAN,0),
                    NVL(T2.MON_PROD,0),
                    NVL(T2.MON_GAP,0),
                    NVL(T2.TUE_PLAN,0),
                    NVL(T2.TUE_PROD,0),
                    NVL(T2.TUE_GAP,0),
                    NVL(T2.WED_PLAN,0),
                    NVL(T2.WED_PROD,0),
                    NVL(T2.WED_GAP,0),
                    NVL(T2.THR_PLAN,0),
                    NVL(T2.THR_PROD,0),
                    NVL(T2.THR_GAP,0),
                    NVL(T2.FRI_PLAN,0),
                    NVL(T2.FRI_PROD,0),
                    NVL(T2.FRI_GAP,0),
                    NVL(T2.SAT_PLAN,0),
                    NVL(T2.SAT_PROD,0),
                    NVL(T2.SAT_GAP,0),
                    NVL(T2.TOT_PLAN,0),
                    NVL(T2.TOT_PROD,0),
                    NVL(T2.TOT_GAP,0),
                    NVL(T3.QTY,0),
                    DECODE(T1.MTO_MTS_TYPE,'0001','MTO','0002','MTS','기타')		MTO_MTS_TYPE 
            FROM    ITEM_MST     T1, 
            		(
            		SELECT	ITEM_ID,
            				NVL(EXPORT_PLAN,NVL(LST_PRODQTY,0))	QTY
            		FROM	PLANT_ALLOC_ITEM_ADJ
            		WHERE	VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+2,'YYYYMMDD')||'%'
            		AND		DUE_DATE &lt; TRUNC(TO_DATE('$!{cnfm_date}'),'D')+14
            		 )T3,            	
            		(           		 
					SELECT  ITEM_ID,
					        NVL(SUM(MON_PLAN),0)	MON_PLAN,
					        NVL(SUM(MON_PROD),0)	MON_PROD,
					        NVL(SUM(MON_GAP),0)		MON_GAP,
					        NVL(SUM(TUE_PLAN),0)	TUE_PLAN,
					        NVL(SUM(TUE_PROD),0)	TUE_PROD,
					        NVL(SUM(TUE_GAP),0)		TUE_GAP,
					        NVL(SUM(WED_PLAN),0)	WED_PLAN,
					        NVL(SUM(WED_PROD),0)	WED_PROD,
					        NVL(SUM(WED_GAP),0)		WED_GAP,
					        NVL(SUM(THR_PLAN),0)	THR_PLAN,
					        NVL(SUM(THR_PROD),0)	THR_PROD,
					        NVL(SUM(THR_GAP),0)		THR_GAP,
					        NVL(SUM(FRI_PLAN),0)	FRI_PLAN,
					        NVL(SUM(FRI_PROD),0)	FRI_PROD,
					        NVL(SUM(FRI_GAP),0)		FRI_GAP,
					        NVL(SUM(SAT_PLAN),0)	SAT_PLAN,
					        NVL(SUM(SAT_PROD),0)	SAT_PROD,
					        NVL(SUM(SAT_GAP),0)		SAT_GAP,
					        NVL(SUM(TOT_PLAN),0)	TOT_PLAN,
					        NVL(SUM(TOT_PROD),0)	TOT_PROD,
					        NVL(SUM(TOT_GAP),0)		TOT_GAP
					FROM	(       
							SELECT	ITEM_ID,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PLAN_QTY,0),0)    	MON_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PROD_QTY,0),0)     	MON_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD'),PLAN_QTY,0),0)    	MON_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PLAN_QTY,0),0)    	TUE_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PROD_QTY,0),0)     	TUE_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+8,'YYYYMMDD'),PLAN_QTY,0),0)    	TUE_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PLAN_QTY,0),0)    	WED_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PROD_QTY,0),0)     	WED_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+9,'YYYYMMDD'),PLAN_QTY,0),0)    	WED_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PLAN_QTY,0),0)    	THR_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PROD_QTY,0),0)     	THR_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+10,'YYYYMMDD'),PLAN_QTY,0),0)    	THR_GAP,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PLAN_QTY,0),0)    	FRI_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PROD_QTY,0),0)     	FRI_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD'),PLAN_QTY,0),0)    	FRI_GAP,							                                                                                           		
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PLAN_QTY,0),0)    	SAT_PLAN,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PROD_QTY,0),0)    	SAT_PROD,
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PROD_QTY,0),0) -
							        NVL(DECODE(START_DATE, TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+12,'YYYYMMDD'),PLAN_QTY,0),0)    	SAT_GAP,    
							        NVL(PLAN_QTY,0)        																					TOT_PLAN,
							        NVL(PROD_QTY,0)       																					TOT_PROD,
							        NVL(PROD_QTY,0) - NVL(PLAN_QTY,0)    																	TOT_GAP
							FROM	(
									SELECT	S1.ITEM_ID,                                    
					                    	S1.START_DATE,            
						                    SUM(S1.SHIFT_QTY)   PLAN_QTY,
						                    SUM((
						                        SELECT  SUM(COMPL_QTY) COMPL_QTY
						                        FROM    V_ERP_PO_MES
						                        WHERE   PO_ID       = S2.AUFNR
						                        AND     PLANT_ID    = S1.PLANT_ID
						                        AND     ITEM_ID     = S1.ITEM_ID
						                        ))PROD_QTY
					            	FROM	(
					                    	SELECT	DISTINCT SUBSTR(WO_ID,12,8) START_DATE, 
						                            WO_ID,
						                            ITEM_ID, 
						                            PLANT_ID, 
						                            SHIFT_QTY
						                    FROM    DAILY_SCH_PLAN_SHIFT S1
						                    WHERE   S1.VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+2,'YYYYMMDD')||'%'			
						                    AND		WO_END = 'Y'			                    
					                    	)S1,
					                    	(
					                    	SELECT	AUFNR,
					                    			SCMWO
					                    	FROM	SAPAUFK
					                    	WHERE	MANDT = '100'
					                    	)S2, ITEM_MST S4
					            	WHERE	S1.WO_ID     = S2.SCMWO (+)           
					            	AND     S1.ITEM_ID   = S4.ITEM_ID					       
						            AND     S4.ITYPE     = 'FERT'
						            AND     S1.START_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+13,'YYYYMMDD')         
						            AND     S4.MTO_MTS_TYPE LIKE '%'||''||'%'
					                AND     S4.MATERIAL_GROUP BETWEEN '5K000' AND '5S999'  
					                GROUP 
					            	BY      S1.ITEM_ID,
					                    	S1.START_DATE
					            	)          
							)
					GROUP 
					BY 		ITEM_ID					
					ORDER 
					BY 		1           
            		)T2,                 
                    (
                    SELECT	ITEM_ID,
                            PLAN_QTY,
                            W_PROD,
                            BOOKING_QTY,
                            BOOKING_QTY_W2,
                            BOOKING_QTY_W3,
                            BOOKING_QTY_W4,
                            BOOKING_QTY_W5,
                            PRE_CHGO,
                            MI_CHGO,                            
                            BASE_STOCK,
                            ORDER_QTY
                    FROM    EX_PROD_PLAN
                    WHERE   VERSION = '$!{cnfm_date}'
                    )T8                       
            WHERE   T1.ITEM_ID 	= T8.ITEM_ID 
            AND		T1.ITEM_ID 	= T3.ITEM_ID(+)
            AND		T1.ITEM_ID 	= T2.ITEM_ID(+)
            AND		T1.ITYPE	= 'FERT'
            #if ( "$!{domain}" == "EX" )            
            AND     NVL(T1.CAT03,'XX')   LIKE 'O%'         --수출제품만 
            #elseif ( "$!{domain}" == "DO" )      
            AND     NVL(T1.CAT03,'XX')  NOT LIKE 'O%'         --내수제품만 
            #end
            #if ( "$!{mto_gubn}" == "0001" ) 
            AND		T1.MTO_MTS_TYPE = '0001'
            #elseif ( "$!{mto_gubn}" == "0002" )   
            AND		T1.MTO_MTS_TYPE = '0002'
            #end   
            AND		(T1.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	 T1.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
            GROUP
            BY      F_GET_CODE_NAME('SALES_CAT3', F_GET_SALES_CAT03(T1.ITEM_ID)),      
                    T1.ITEM_ID,
                    T1.ITEM_NAME,
                    T8.BASE_STOCK,
                    T8.PRE_CHGO,
                    T8.W_PROD,
                    T8.BOOKING_QTY,
                    T8.BOOKING_QTY_W2,
                    T8.BOOKING_QTY_W3,
                    T8.BOOKING_QTY_W4,
                    T8.BOOKING_QTY_W5,
                    T8.MI_CHGO,
                    T8.PLAN_QTY,
                    T8.ORDER_QTY,
                    T2.MON_PLAN,
                    T2.MON_PROD,
                    T2.MON_GAP,
                    T2.TUE_PLAN,
                    T2.TUE_PROD,
                    T2.TUE_GAP,                    
                    T2.WED_PLAN,
                    T2.WED_PROD,
                    T2.WED_GAP,                    
                    T2.THR_PLAN,
                    T2.THR_PROD,
                    T2.THR_GAP,                    
                    T2.FRI_PLAN,
                    T2.FRI_PROD,
                    T2.FRI_GAP,
                    T2.SAT_PLAN,
                    T2.SAT_PROD,
                    T2.SAT_GAP,
                    T2.TOT_PLAN,
                    T2.TOT_PROD,
                    T2.TOT_GAP,
                    T3.QTY,
                    T1.MTO_MTS_TYPE                                     
            ORDER 
            BY      1,2                 
            )A
            
     
	</query>
	
	<query id="ip_08040_Expert_Order_cust" paging="true"> 
		SELECT  TO_CHAR(TRUNC(TO_DATE(T1.ZPLDAT,'YYYY-MM-DD'),'IW')-6,'YYYYMMDD')       "생산요청일",
        		DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)),
        		T1.CUST_NAME,
		      	--  T2.VBELN  															"납품번호",
		      	--  T2.MATNR,
		      	--  T2.ARKTX,
		        SUM(T1.LFIMG)      														"주문량",
		        NVL(SUM(T2.PLAN_QTY),0)   												"주간생산계획량",
		        NVL(SUM(T2.PROD_QTY),0)   												"생산량",
		        NVL(SUM(T2.EXPT_QTY),0)  												"생산예정량",
		        NVL(SUM(T2.PROD_QTY),0) + NVL(SUM(T2.EXPT_QTY),0),
		        0,
		        0,
		        0,
		        F_GET_EMP_NAME(T1.ERNAM)
		FROM    (
				SELECT  NVL(S1.ZPLDAT,S2.ZPLDAT)  	ZPLDAT,
						NVL(S1.VBELN,S2.VBELN)  	VBELN,
						NVL(S1.VBELN_2,S2.VBELN_2)  VBELN_2,
	                    NVL(S1.KUNNR,S2.KUNNR)  	KUNNR,
	                    NVL(S1.LFIMG,S2.LFIMG)  	LFIMG,
	                    NVL(S1.VGPOS,S2.VGPOS)  	VGPOS,
	                    NVL(S1.MATNR,S2.MATNR)  	MATNR,
	                    NVL(S1.ARKTX,S2.ARKTX)  	ARKTX,
	                    NVL(S1.ERNAM,S2.ERNAM)  	ERNAM,
	                    NVL(S1.CUST_NAME,S2.CUST_NAME)  CUST_NAME
            	FROM    (
						SELECT	T1.ZPLDAT,
								T1.VBELN,
								T2.VBELN	VBELN_2,
								T1.KUNNR,
								T2.MATNR,
								T2.ARKTX,
								T2.LFIMG,
								T2.VGPOS,
								T2.ERNAM,
								T3.CUST_NAME
						FROM	SAPVBAK 	T1, 
								SAPLIPS 	T2,
								SDSTT101 	T3,
								ITEM_MST	T4
						WHERE   T1.ZPLDAT	BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'IW')+11,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'IW')+11,'YYYYMMDD') 
						AND     DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)) = T3.CUST_CODE(+)
						AND     T1.VBELN 	= T2.VGBEL
						AND		T2.MATNR	= T4.ITEM_ID
						AND		T4.ITYPE	= 'FERT'
						#if ( "$!{mto_gubn}" == "0001" )
						AND		T4.MTO_MTS_TYPE	= '0001'
						#else
						AND		T4.MTO_MTS_TYPE	= '0002'
						#end
						AND     T1.MANDT	= '100'
						AND     T2.MANDT	= '100'	
						)S1,
						(
						SELECT	T1.ZPLDAT,
								T1.VBELN,
								T2.VBELN	VBELN_2,
								T1.KUNNR,
								T2.MATNR,
								T2.ARKTX,
								T2.LSMENG	LFIMG,
								T2.VGPOS,
								T2.ERNAM,
								T3.CUST_NAME
						FROM	SAPVBAK 	T1, 
								SAPVBAP 	T2,
								SDSTT101 	T3,
								ITEM_MST	T4
						WHERE   T1.ZPLDAT	BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'IW')+11,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'IW')+11,'YYYYMMDD') 
						AND     DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)) = T3.CUST_CODE(+)
						AND     T1.VBELN 	= T2.VBELN
						AND		T2.MATNR	= T4.ITEM_ID
						AND		T4.ITYPE	= 'FERT'
						#if ( "$!{mto_gubn}" == "0001" )
						AND		T4.MTO_MTS_TYPE	= '0001'
						#else
						AND		T4.MTO_MTS_TYPE	= '0002'
						#end
						AND     T1.MANDT	= '100'
						AND     T2.MANDT	= '100'	
						)S2
				WHERE   S2.VBELN = S1.VBELN(+) 
            	AND     S2.MATNR = S1.MATNR(+)  			
				)T1,		 
        		(
		        SELECT  ITEM_ID,
		                ITEM_NAME,		                
		                ORD_NO,
		                ORD_ITEM_NO,
		                PLAN_QTY,
		                PROD_QTY,
		                DECODE(PROD_QTY,NULL,PLAN_QTY,0) EXPT_QTY
		        FROM    (
		                SELECT	S1.ITEM_ID,  
		                        S4.ITEM_NAME,
		                        S1.ORD_NO,
		                        S1.ORD_ITEM_NO,  
		                        SUM(S1.SHIFT_QTY)   PLAN_QTY,
		                        SUM((
		                            SELECT  SUM(COMPL_QTY) COMPL_QTY
		                            FROM    V_ERP_PO_MES
		                            WHERE   PO_ID       = S2.AUFNR
		                            AND     PLANT_ID    = S1.PLANT_ID
		                            AND     ITEM_ID     = S1.ITEM_ID
		                            ))PROD_QTY              
		                FROM    (
		                        SELECT  DISTINCT SUBSTR(WO_ID,12,8) START_DATE, 
		                                WO_ID,
		                                ITEM_ID, 
		                                PLANT_ID, 
		                                SHIFT_QTY,
		                                ORD_NO,
		                                ORD_ITEM_NO
		                        FROM    DAILY_SCH_PLAN_SHIFT S1
		                        WHERE   S1.VERSION BETWEEN '$!{start_date}' AND  TO_CHAR(TO_DATE('$!{end_date}')+1,'YYYYMMDD')
		                        )S1,
		                        (
                                SELECT  AUFNR,
                                        SCMWO
                                FROM    SAPAUFK
                                WHERE   MANDT='100'
                                )S2, ITEM_MST S4
		                WHERE   S1.WO_ID     = S2.SCMWO(+)     
		                AND     S1.ITEM_ID   = S4.ITEM_ID                           
		                AND     S4.ITYPE     = 'FERT' 
		                #if ( "$!{mto_gubn}" == "0001" )
						AND		S4.MTO_MTS_TYPE	= '0001'
						#else
						AND		S4.MTO_MTS_TYPE	= '0002'
						#end       
		                AND     S1.START_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'IW')+7,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'IW')+13,'YYYYMMDD')         
		                GROUP 
		                BY       S1.ITEM_ID,
		                         S4.ITEM_NAME,  
		                         S1.ORD_ITEM_NO,
		                         S1.ORD_NO      
		                )
		        )T2       
		WHERE	T1.MATNR 	= T2.ITEM_ID(+)
		AND     T1.VGPOS 	= T2.ORD_ITEM_NO(+)
		AND		T1.VBELN	= T2.ORD_NO(+)
		GROUP 
		BY 		T1.ZPLDAT,
				T1.KUNNR,
				T1.CUST_NAME, 
				T1.ERNAM				
		ORDER 
		BY 		1,2
	</query>
	
	<query id="ip_08040_Expert_Order_cust_pop" paging="true"> 
		SELECT  DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)),
        		T1.CUST_NAME,												
		      	T1.MATNR,
		      	T1.ARKTX,
		        SUM(T1.LFIMG)      														"주문량",
		        NVL(SUM(T2.PLAN_QTY),0)   												"주간생산계획량",
		        NVL(SUM(T2.PROD_QTY),0)   												"생산량",
		        NVL(SUM(T2.EXPT_QTY),0)  												"생산예정량",
		        NVL(SUM(T2.PROD_QTY),0) + NVL(SUM(T2.EXPT_QTY),0)		        
		FROM    (
				SELECT  NVL(S1.ZPLDAT,S2.ZPLDAT)  	ZPLDAT,
						NVL(S1.VBELN,S2.VBELN)  	VBELN,
						NVL(S1.VBELN_2,S2.VBELN_2)  VBELN_2,
	                    NVL(S1.KUNNR,S2.KUNNR)  	KUNNR,
	                    NVL(S1.LFIMG,S2.LFIMG)  	LFIMG,
	                    NVL(S1.VGPOS,S2.VGPOS)  	VGPOS,
	                    NVL(S1.MATNR,S2.MATNR)  	MATNR,
	                    NVL(S1.ARKTX,S2.ARKTX)  	ARKTX,
	                    NVL(S1.ERNAM,S2.ERNAM)  	ERNAM,
	                    NVL(S1.CUST_NAME,S2.CUST_NAME)  CUST_NAME
            	FROM    (
						SELECT	T1.ZPLDAT,
								T1.VBELN,
								T2.VBELN	VBELN_2,
								T1.KUNNR,
								T2.MATNR,
								T2.ARKTX,
								T2.LFIMG,
								T2.VGPOS,
								T2.ERNAM,
								T3.CUST_NAME
						FROM	SAPVBAK 	T1, 
								SAPLIPS 	T2,
								SDSTT101 	T3,
								ITEM_MST	T4
						WHERE   T1.ZPLDAT	BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD') 
						AND     DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)) = T3.CUST_CODE(+)
						AND     T1.VBELN 	= T2.VGBEL
						AND		T2.MATNR	= T4.ITEM_ID
						AND		T4.ITYPE	= 'FERT'
						#if ( "$!{mto_gubn}" == "0001" )
						AND		T4.MTO_MTS_TYPE	= '0001'
						#else
						AND		T4.MTO_MTS_TYPE	= '0002'
						#end
						AND     T1.MANDT	= '100'
						AND     T2.MANDT	= '100'	
						)S1,
						(
						SELECT	T1.ZPLDAT,
								T1.VBELN,
								T2.VBELN	VBELN_2,
								T1.KUNNR,
								T2.MATNR,
								T2.ARKTX,
								T2.LSMENG	LFIMG,
								T2.VGPOS,
								T2.ERNAM,
								T3.CUST_NAME
						FROM	SAPVBAK 	T1, 
								SAPVBAP 	T2,
								SDSTT101 	T3,
								ITEM_MST	T4
						WHERE   T1.ZPLDAT	BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+11,'YYYYMMDD') 
						AND     DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)) = T3.CUST_CODE(+)
						AND     T1.VBELN 	= T2.VBELN
						AND		T2.MATNR	= T4.ITEM_ID
						AND		T4.ITYPE	= 'FERT'
						#if ( "$!{mto_gubn}" == "0001" )
						AND		T4.MTO_MTS_TYPE	= '0001'
						#else
						AND		T4.MTO_MTS_TYPE	= '0002'
						#end
						AND     T1.MANDT	= '100'
						AND     T2.MANDT	= '100'	
						)S2
				WHERE   S2.VBELN = S1.VBELN(+) 
            	AND     S2.MATNR = S1.MATNR(+)  	
				)T1,		 
        		(
		        SELECT  ITEM_ID,
		                ITEM_NAME,		                
		                ORD_NO,
		                ORD_ITEM_NO,
		                PLAN_QTY,
		                PROD_QTY,
		                DECODE(PROD_QTY,NULL,PLAN_QTY,0) EXPT_QTY
		        FROM    (
		                SELECT	S1.ITEM_ID,  
		                        S4.ITEM_NAME,
		                        S1.ORD_NO,
		                        S1.ORD_ITEM_NO,  
		                        SUM(S1.SHIFT_QTY)   PLAN_QTY,
		                        SUM((
		                            SELECT  SUM(COMPL_QTY) COMPL_QTY
		                            FROM    V_ERP_PO_MES
		                            WHERE   PO_ID       = S2.AUFNR
		                            AND     PLANT_ID    = S1.PLANT_ID
		                            AND     ITEM_ID     = S1.ITEM_ID
		                            ))PROD_QTY              
		                FROM    (
		                        SELECT  DISTINCT SUBSTR(WO_ID,12,8) START_DATE, 
		                                WO_ID,
		                                ITEM_ID, 
		                                PLANT_ID, 
		                                SHIFT_QTY,
		                                ORD_NO,
		                                ORD_ITEM_NO
		                        FROM    DAILY_SCH_PLAN_SHIFT S1
		                        WHERE   S1.VERSION BETWEEN '$!{cnfm_date}' AND  TO_CHAR(TO_DATE('$!{cnfm_date}')+1,'YYYYMMDD')
		                        )S1, 
		                        (
                                SELECT  AUFNR,
                                        SCMWO
                                FROM    SAPAUFK
                                WHERE   MANDT='100'
                                ) S2, ITEM_MST S4
		                WHERE   S1.WO_ID     = S2.SCMWO (+)    
		                AND     S1.ITEM_ID   = S4.ITEM_ID                           
		                AND     S4.ITYPE     = 'FERT' 
		                #if ( "$!{mto_gubn}" == "0001" )
						AND		S4.MTO_MTS_TYPE	= '0001'
						#else
						AND		S4.MTO_MTS_TYPE	= '0002'
						#end       
		                AND     S1.START_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+7,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')+13,'YYYYMMDD')         
		                GROUP 
		                BY       S1.ITEM_ID,
		                         S4.ITEM_NAME,  
		                         S1.ORD_ITEM_NO,
		                         S1.ORD_NO      
		                )
		        )T2       
		WHERE	T1.MATNR 	= T2.ITEM_ID(+)
		AND     T1.VGPOS 	= T2.ORD_ITEM_NO(+)
		AND		T1.VBELN	= T2.ORD_NO(+)
		AND		DECODE(LENGTH(T1.KUNNR),5,T1.KUNNR,10,SUBSTR(T1.KUNNR,4,7)) = '$!{cust_code}'
		GROUP 
		BY 		T1.MATNR,
				T1.KUNNR,
				T1.CUST_NAME, 
				T1.ARKTX				
		ORDER 
		BY 		1,2
	</query>
	
	<query id="ip_08050_Booking_list" paging="true"> 
		
	SELECT	A.*,
			ROWNUM
	FROM	(	
			SELECT  SUBSTR(T1.VBELN,6,5)    "영업오더번호",   -- 영업오더번호
			        T2.VBELN    "납품번호",   -- 납품번호
			        T3.ZFBGNO   "BOOKING번호",   -- BOOKING번호			        
			        T6.ITEM_ID,
			        T6.ITEM_NAME,
			        T5.ORDER_QTY,
			        TO_CHAR(T5.SHIPPLAN_DATE,'YYYY-MM-DD')    "선적일",
			        TO_CHAR(T5.ETD_DATE,'YYYY-MM-DD')         "ETD",
			        TO_CHAR(T5.EXPORT_DECLARE,'YYYY-MM-DD')   "수출신고기한",
			        TO_CHAR(T5.CLOSING_DATE,'YYYY-MM-DD')     "CLOSING DATE",
			        TO_CHAR(TO_DATE(T1.ZPLDAT),'YYYY-MM-DD')  "생산요청일",
			        T5.LOCAL_DIV,
			        --T5.CENTER_CD,        
			        F_GET_DC_NAME(SUBSTR(T5.CENTER_CD,5,8)),
			        --T5.REAL_DELIVERY_CD,  
			        T7.CUST_NAME,        
			        DECODE(T4.ERNAM,'8454001','공용',F_GET_EMP_NAME(T4.ERNAM))   "부킹문서입력자", 
			        TO_CHAR(TO_DATE(T4.CDAT,'YYYY-MM-DD'),'YYYY-MM-DD') 		"부킹문서입력일", 
			        F_GET_EMP_NAME(T2.ERNAM)    								"납품문서입력자",   
			        TO_CHAR(TO_DATE(T2.ERDAT,'YYYY-MM-DD'),'YYYY-MM-DD')    	"납품문서입력일",
			        CASE WHEN TRUNC(T5.SHIPPLAN_DATE,'D') - TRUNC(TO_DATE(T4.CDAT,'YYYY-MM-DD'),'D') &lt; 14
                         THEN 'F'
                         ELSE 'T'
                    END  FLAG,
                    '출고완료'	GUBN,
                     (
                    SELECT  TO_CHAR(MAX(OUTBOUND_DATE),'YYYY-MM-DD')                           
                    FROM    LO020ND 
                    WHERE   BRAND_CD = '100001'
                    AND     OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30 
                    AND     T5.BRAND_NO  = BRAND_NO (+) 
                    --AND     T5.CENTER_CD = CENTER_CD (+)
                    AND     T5.ITEM_CD 	 = ITEM_CD (+)
                    ) "출고일" 
			FROM    SAPVBAK     T1,
			        SAPLIPS     T2,
			        SAPZTEBK    T3,
			        SAPZTEBKIT  T4,
			        EXPORTSHIPORDER_S T5,
			        ITEM_MST T6,
			        SDSTT101 T7			     
			WHERE   T1.MANDT = '100'
			AND     T2.MANDT = '100'
			AND     T3.MANDT = '100'
			AND     T4.MANDT = '100'		
			AND     T5.SHIPPLAN_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD') AND TO_DATE('$!{end_date}','YYYY-MM-DD')
			AND     T1.AUART LIKE 'X%'
			AND     T2.PSTYV LIKE    'X%'  -- 납품 품목범주
			AND     T1.VBELN    = T2.VGBEL
			AND     T3.ZFBGNO   = T4.ZFBGNO
			AND     T2.VBELN    = T4.AUBEL   -- 납품문서
			AND     T2.VBELN    = T5.BRAND_NO(+)
			AND     T2.MATNR    = T5.ITEM_CD(+)
			AND     T2.MATNR    = T6.ITEM_ID
			AND		T6.ITYPE	= 'FERT'
			AND		SUBSTR(T1.VBELN,6,5) LIKE '%'||'$!{search_order}'||'%'
			AND		T2.VBELN LIKE '%'||'$!{search_napum}'||'%'
			AND		(T6.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	 T6.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
			AND     T5.REAL_DELIVERY_CD = T7.CUST_CODE
			#if 	( "$!{domain}" == "EX" )            
            AND     NVL(T6.CAT03,'XX')   LIKE 'O%' 
            #elseif ( "$!{domain}" == "DO" )      
            AND     NVL(T6.CAT03,'XX')  NOT LIKE 'O%'         
            #end
            AND 	EXISTS (
                            SELECT	S2.BRAND_NO
                            FROM    LO020NM S1, 
                                    LO020ND S2
                            WHERE   S1.BRAND_CD         = '100001'
                            AND     S1.CENTER_CD        = S2.CENTER_CD
                            AND     S1.OUTBOUND_NO      = S2.OUTBOUND_NO
                            AND     S1.BRAND_CD         = S2.BRAND_CD
                            AND     S1.OUTBOUND_DATE    = S2.OUTBOUND_DATE
                            AND		S1.OUTBOUND_DATE	&lt;= TRUNC(SYSDATE)            
                            AND     S2.BRAND_NO 		= T5.BRAND_NO
                            AND     S2.ITEM_CD 			= T5.ITEM_CD        
                            /*	EXPORTSHIPORDER 테이블의 CENTER 코드와 매칭이 안될 경우를 대비 */
                            AND     (S1.CENTER_CD    IN ('13008913','13001842','13008938','13007700','13008901') OR S1.CENTER_CD = T5.CENTER_CD)
                            /*	선출고와 미출고 경우를 대비 */
                            AND     S1.OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30 
                            UNION ALL
                            SELECT	S2.BRAND_NO
                            FROM    LO020NM_G S1, 
                                    LO020ND_G S2
                            WHERE   S1.BRAND_CD         = '100001'
                            AND     S1.CENTER_CD        = S2.CENTER_CD
                            AND     S1.OUTBOUND_NO      = S2.OUTBOUND_NO
                            AND     S1.BRAND_CD         = S2.BRAND_CD
                            AND     S1.OUTBOUND_DATE    = S2.OUTBOUND_DATE
                            AND		S1.OUTBOUND_DATE	&lt;= TRUNC(SYSDATE)            
                            AND     S2.BRAND_NO 		= T5.BRAND_NO
                            AND     S2.ITEM_CD 			= T5.ITEM_CD
                            AND     (S1.CENTER_CD    IN ('13008913','13001842','13008938','13007700','13008901') OR S1.CENTER_CD = T5.CENTER_CD)
                            AND     S1.OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30                        
                            )
            UNION ALL
            SELECT  SUBSTR(T1.VBELN,6,5)    "영업오더번호",   -- 영업오더번호
			        T2.VBELN    "납품번호",   -- 납품번호
			        T3.ZFBGNO   "BOOKING번호",   -- BOOKING번호			        
			        T6.ITEM_ID,
			        T6.ITEM_NAME,
			        T5.ORDER_QTY,
			        TO_CHAR(T5.SHIPPLAN_DATE,'YYYY-MM-DD')    "선적일",
			        TO_CHAR(T5.ETD_DATE,'YYYY-MM-DD')         "ETD",
			        TO_CHAR(T5.EXPORT_DECLARE,'YYYY-MM-DD')   "수출신고기한",
			        TO_CHAR(T5.CLOSING_DATE,'YYYY-MM-DD')     "CLOSING DATE",
			        TO_CHAR(TO_DATE(T1.ZPLDAT),'YYYY-MM-DD')  "생산요청일",
			        T5.LOCAL_DIV,
			        --T5.CENTER_CD,        
			        F_GET_DC_NAME(SUBSTR(T5.CENTER_CD,5,8)),			        
			        --T5.REAL_DELIVERY_CD,  
			        T7.CUST_NAME,        
			        DECODE(T4.ERNAM,'8454001','공용',F_GET_EMP_NAME(T4.ERNAM))   "부킹문서입력자", 
			        TO_CHAR(TO_DATE(T4.CDAT,'YYYY-MM-DD'),'YYYY-MM-DD') 		"부킹문서입력일", 
			        F_GET_EMP_NAME(T2.ERNAM)    								"납품문서입력자",   
			        TO_CHAR(TO_DATE(T2.ERDAT,'YYYY-MM-DD'),'YYYY-MM-DD')    	"납품문서입력일",
			        CASE WHEN TRUNC(T5.SHIPPLAN_DATE,'D') - TRUNC(TO_DATE(T4.CDAT,'YYYY-MM-DD'),'D') &lt; 14
                         THEN 'F'
                         ELSE 'T'
                    END  FLAG,
                    '출고 예정'	 GUBN,
                    (
                    SELECT  TO_CHAR(MAX(OUTBOUND_DATE),'YYYY-MM-DD')                           
                    FROM    LO020ND 
                    WHERE   BRAND_CD = '100001'
                    AND     OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30 
                    AND     T5.BRAND_NO  = BRAND_NO (+) 
                    --AND     T5.CENTER_CD = CENTER_CD (+)
                    AND     T5.ITEM_CD 	 = ITEM_CD (+)
                    ) "출고일" 
			FROM    SAPVBAK     T1,
			        SAPLIPS     T2,
			        SAPZTEBK    T3,
			        SAPZTEBKIT  T4,
			        EXPORTSHIPORDER_S T5,
			        ITEM_MST T6,
			        SDSTT101 T7			        
			WHERE   T1.MANDT = '100'
			AND     T2.MANDT = '100'
			AND     T3.MANDT = '100'
			AND     T4.MANDT = '100'			
			AND     T5.SHIPPLAN_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD') AND TO_DATE('$!{end_date}','YYYY-MM-DD')
			AND     T1.AUART LIKE 'X%'
			AND     T2.PSTYV LIKE    'X%'  -- 납품 품목범주
			AND     T1.VBELN    = T2.VGBEL
			AND     T3.ZFBGNO   = T4.ZFBGNO
			AND     T2.VBELN    = T4.AUBEL   -- 납품문서
			AND     T2.VBELN    = T5.BRAND_NO(+)
			AND     T2.MATNR    = T5.ITEM_CD(+)
			AND     T2.MATNR    = T6.ITEM_ID
			AND		T6.ITYPE	= 'FERT'
			AND		SUBSTR(T1.VBELN,6,5) LIKE '%'||'$!{search_order}'||'%'
			AND		T2.VBELN LIKE '%'||'$!{search_napum}'||'%'
			AND		(T6.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	 T6.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
			AND     T5.REAL_DELIVERY_CD = T7.CUST_CODE
			#if 	( "$!{domain}" == "EX" )            
            AND     NVL(T6.CAT03,'XX')   LIKE 'O%' 
            #elseif ( "$!{domain}" == "DO" )      
            AND     NVL(T6.CAT03,'XX')  NOT LIKE 'O%'         
            #end
            AND 	EXISTS (
                            SELECT	S2.BRAND_NO
                            FROM    LO020NM S1, 
                                    LO020ND S2
                            WHERE   S1.BRAND_CD         = '100001'
                            AND     S1.CENTER_CD        = S2.CENTER_CD
                            AND     S1.OUTBOUND_NO      = S2.OUTBOUND_NO
                            AND     S1.BRAND_CD         = S2.BRAND_CD
                            AND     S1.OUTBOUND_DATE    = S2.OUTBOUND_DATE
                            AND		S1.OUTBOUND_DATE	> TRUNC(SYSDATE)            
                            AND     S2.BRAND_NO 		= T5.BRAND_NO
                            AND     S2.ITEM_CD 			= T5.ITEM_CD 
                            AND     (S1.CENTER_CD    IN ('13008913','13001842','13008938','13007700','13008901') OR S1.CENTER_CD = T5.CENTER_CD)
                            AND     S1.OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30  
                            UNION ALL
                            SELECT	S2.BRAND_NO
                            FROM    LO020NM_G S1, 
                                    LO020ND_G S2
                            WHERE   S1.BRAND_CD         = '100001'
                            AND     S1.CENTER_CD        = S2.CENTER_CD
                            AND     S1.OUTBOUND_NO      = S2.OUTBOUND_NO
                            AND     S1.BRAND_CD         = S2.BRAND_CD
                            AND     S1.OUTBOUND_DATE    = S2.OUTBOUND_DATE
                            AND		S1.OUTBOUND_DATE	> TRUNC(SYSDATE)            
                            AND     S2.BRAND_NO 		= T5.BRAND_NO
                            AND     S2.ITEM_CD 			= T5.ITEM_CD 
                            AND     (S1.CENTER_CD    IN ('13008913','13001842','13008938','13007700','13008901') OR S1.CENTER_CD = T5.CENTER_CD)
                            AND     S1.OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30                    
                            )             
            UNION ALL
            SELECT  SUBSTR(T1.VBELN,6,5)    "영업오더번호",   -- 영업오더번호
			        T2.VBELN    "납품번호",   -- 납품번호
			        T3.ZFBGNO   "BOOKING번호",   -- BOOKING번호			        
			        T6.ITEM_ID,
			        T6.ITEM_NAME,
			        T5.ORDER_QTY,
			        TO_CHAR(T5.SHIPPLAN_DATE,'YYYY-MM-DD')    "선적일",
			        TO_CHAR(T5.ETD_DATE,'YYYY-MM-DD')         "ETD",
			        TO_CHAR(T5.EXPORT_DECLARE,'YYYY-MM-DD')   "수출신고기한",
			        TO_CHAR(T5.CLOSING_DATE,'YYYY-MM-DD')     "CLOSING DATE",
			        TO_CHAR(TO_DATE(T1.ZPLDAT),'YYYY-MM-DD')  "생산요청일",
			        T5.LOCAL_DIV,
			        --T5.CENTER_CD,        
			        F_GET_DC_NAME(SUBSTR(T5.CENTER_CD,5,8)),
			        --T5.REAL_DELIVERY_CD,  
			        T7.CUST_NAME,        
			        DECODE(T4.ERNAM,'8454001','공용',F_GET_EMP_NAME(T4.ERNAM))   "부킹문서입력자", 
			        TO_CHAR(TO_DATE(T4.CDAT,'YYYY-MM-DD'),'YYYY-MM-DD') 		"부킹문서입력일", 
			        F_GET_EMP_NAME(T2.ERNAM)    								"납품문서입력자",   
			        TO_CHAR(TO_DATE(T2.ERDAT,'YYYY-MM-DD'),'YYYY-MM-DD')    	"납품문서입력일",
			        CASE WHEN TRUNC(T5.SHIPPLAN_DATE,'D') - TRUNC(TO_DATE(T4.CDAT,'YYYY-MM-DD'),'D') &lt; 14
                         THEN 'F'
                         ELSE 'T'
                    END  FLAG,
                    '미출고'	GUBN,
                    (
                    SELECT  TO_CHAR(MAX(OUTBOUND_DATE),'YYYY-MM-DD')                           
                    FROM    LO020ND 
                    WHERE   BRAND_CD = '100001'
                    AND     OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30 
                    AND     T5.BRAND_NO  = BRAND_NO (+) 
                    --AND     T5.CENTER_CD = CENTER_CD (+)
                    AND     T5.ITEM_CD 	 = ITEM_CD (+)
                    ) "출고일" 
			FROM    SAPVBAK     T1,
			        SAPLIPS     T2,
			        SAPZTEBK    T3,
			        SAPZTEBKIT  T4,
			        EXPORTSHIPORDER_S T5,
			        ITEM_MST T6,
			        SDSTT101 T7			       
			WHERE   T1.MANDT = '100'
			AND     T2.MANDT = '100'
			AND     T3.MANDT = '100'
			AND     T4.MANDT = '100'		
			AND     T5.SHIPPLAN_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD') AND TO_DATE('$!{end_date}','YYYY-MM-DD')
			AND     T1.AUART LIKE 'X%'
			AND     T2.PSTYV LIKE    'X%'  -- 납품 품목범주
			AND     T1.VBELN    = T2.VGBEL
			AND     T3.ZFBGNO   = T4.ZFBGNO
			AND     T2.VBELN    = T4.AUBEL   -- 납품문서
			AND     T2.VBELN    = T5.BRAND_NO(+)
			AND     T2.MATNR    = T5.ITEM_CD(+)
			AND     T2.MATNR    = T6.ITEM_ID
			AND		T6.ITYPE	= 'FERT'
			AND		SUBSTR(T1.VBELN,6,5) LIKE '%'||'$!{search_order}'||'%'
			AND		T2.VBELN LIKE '%'||'$!{search_napum}'||'%'
			AND		(T6.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	 T6.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
			AND     T5.REAL_DELIVERY_CD = T7.CUST_CODE
			#if 	( "$!{domain}" == "EX" )            
            AND     NVL(T6.CAT03,'XX')   LIKE 'O%' 
            #elseif ( "$!{domain}" == "DO" )      
            AND     NVL(T6.CAT03,'XX')  NOT LIKE 'O%'         
            #end
            AND 	NOT EXISTS (
                                SELECT	S2.BRAND_NO
                                FROM    LO020NM S1, 
                                        LO020ND S2
                                WHERE   S1.BRAND_CD         = '100001'
                                AND     S1.CENTER_CD        = S2.CENTER_CD
                                AND     S1.OUTBOUND_NO      = S2.OUTBOUND_NO
                                AND     S1.BRAND_CD         = S2.BRAND_CD
                                AND     S1.OUTBOUND_DATE    = S2.OUTBOUND_DATE            
                                AND     S2.BRAND_NO 		= T5.BRAND_NO
                                AND     S2.ITEM_CD 			= T5.ITEM_CD
                                AND     (S1.CENTER_CD    IN ('13008913','13001842','13008938','13007700','13008901') OR S1.CENTER_CD = T5.CENTER_CD)
                                AND     S1.OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30 
                                UNION ALL
                                SELECT	S2.BRAND_NO
                                FROM    LO020NM_G S1, 
                                        LO020ND_G S2
                                WHERE   S1.BRAND_CD         = '100001'
                                AND     S1.CENTER_CD        = S2.CENTER_CD
                                AND     S1.OUTBOUND_NO      = S2.OUTBOUND_NO
                                AND     S1.BRAND_CD         = S2.BRAND_CD
                                AND     S1.OUTBOUND_DATE    = S2.OUTBOUND_DATE            
                                AND     S2.BRAND_NO 		= T5.BRAND_NO
                                AND     S2.ITEM_CD 			= T5.ITEM_CD
                                AND     (S1.CENTER_CD    IN ('13008913','13001842','13008938','13007700','13008901') OR S1.CENTER_CD = T5.CENTER_CD)
                                AND     S1.OUTBOUND_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD')-30 AND TO_DATE('$!{end_date}','YYYY-MM-DD')+30                     
                                )
            ORDER
            BY		7,1,2,4
			)A
	</query>
	
	<query id="ip_08060_ExOrder_list" paging="true"> 
		
	SELECT	A.*,
			ROWNUM
	FROM	(            
			SELECT  SUBSTR(T1.VBELN,6,5)       	VBELN,
			        T1.ERNAM       				"주문전표 생성자",
			        TO_CHAR(TO_DATE(T1.ERDAT,'YYYY-MM-DD'),'YYYY-MM-DD')       							"주문전표 생성일",
			        SUBSTR(T1.ERZET,1,2)||':'||SUBSTR(T1.ERZET,3,2)||':'||SUBSTR(T1.ERZET,5,2)      	"주문전표 생성시각",
			        T1.VBELN_2     				"납품문서번호",  
			        TO_CHAR(TO_DATE(T1.ERDAT_2,'YYYY-MM-DD'),'YYYY-MM-DD')     							"납품문서 생성일",
			        SUBSTR(T1.ERZET_2,1,2)||':'||SUBSTR(T1.ERZET_2,3,2)||':'||SUBSTR(T1.ERZET_2,5,2)    "납품문서 생성시각",		        
			        T1.LFIMG       				"수량",
			        T1.MATNR,
			        T1.ARKTX,
			        T1.KUNNR,
			        T2.CUST_NAME,
			        TO_CHAR(TO_DATE(T1.ZPLDAT,'YYYY-MM-DD'),'YYYY-MM-DD')			        
			FROM    (
			        SELECT  NVL(S1.VBELN,S2.VBELN)          VBELN,
			                NVL(S1.ERNAM,S2.ERNAM)          ERNAM,
			                NVL(S1.ERDAT,S2.ERDAT)          ERDAT,
			                NVL(S1.ERZET,S2.ERZET)          ERZET,
			                NVL(S1.VBELN_2,'')              VBELN_2,
			                NVL(S1.ERDAT_2,'')              ERDAT_2,
			                NVL(S1.ERZET_2,'')              ERZET_2,        
			                NVL(S1.ORDER_QTY,S2.ORDER_QTY)  LFIMG,
			                NVL(S1.MATNR,S2.MATNR)  MATNR,
			                NVL(S1.ARKTX,S2.ARKTX)  ARKTX,
			                NVL(S1.KUNNR,S2.KUNNR)  KUNNR,
			                NVL(S1.ZPLDAT,S2.ZPLDAT)  ZPLDAT
			        FROM    (
			                SELECT  A.VBELN,                                                            -- 오더번호                                                        
			                        F_GET_EMP_NAME(A.ERNAM)                                 ERNAM,    -- 성명
			                        A.ERDAT,
			                        A.ERZET,
			                        B.VBELN VBELN_2,                                                     -- 납품번호
			                        F_GET_EMP_NAME(B.ERNAM)                                 ERNAM_2,    -- 성명
			                        B.ERDAT ERDAT_2,
			                        B.ERZET ERZET_2,
			                        B.LFIMG ORDER_QTY,    -- 제품수량
			                        B.MATNR,                                                
			                        B.ARKTX,
			                        DECODE(LENGTH(A.KUNNR),5,A.KUNNR,10,SUBSTR(A.KUNNR,4,7))    KUNNR,
			                        A.ZPLDAT                                                 
			                FROM    SAPVBAK        A,
			                        SAPLIPS        B,
			                        SAPVBUK        C
			                WHERE   A.MANDT        =    '100'
			                AND     A.ZPLDAT BETWEEN '$!{start_date}' AND '$!{end_date}'   
			                AND     A.VKORG        =    '1500'
			                AND     C.MANDT        =    '100'
			                AND     B.VBELN        =    C.VBELN
			                AND     A.VBELN        =    B.VGBEL
			               -- AND     C.WBSTK        !=    'C'
			                AND     B.MANDT =    '100'
			                AND     B.PSTYV LIKE    'X%'
			                AND     A.AUART LIKE 'X%'    
			                )S1,        
			                (
			                SELECT  A.VBELN,                                                            -- 오더번호
			                        F_GET_EMP_NAME(A.ERNAM)                                 ERNAM,    -- 성명
			                        A.ERDAT,
			                        A.ERZET,                                                       
			                        B.LSMENG                                                ORDER_QTY,    -- 제품수량
			                        B.MATNR,
			                        B.ARKTX,
			                        DECODE(LENGTH(A.KUNNR),5,A.KUNNR,10,SUBSTR(A.KUNNR,4,7))    KUNNR,
			                        A.ZPLDAT
			                FROM    SAPVBAK        A,
			                        SAPVBAP        B,
			                        SAPVBUK        C
			                WHERE   A.MANDT        =    '100'
			                AND     A.ZPLDAT BETWEEN '$!{start_date}' AND '$!{end_date}'           
			                AND     A.VKORG =    '1500'
			                AND     C.MANDT =    '100'
			                AND     A.VBELN =    C.VBELN
			               -- AND     C.LFSTK =    'A'
			                AND     B.MANDT =    '100'
			                AND     A.VBELN =    B.VBELN
			                AND     B.PSTYV LIKE 'X%'
			                AND     A.AUART LIKE 'X%'
			                )S2                    
			        WHERE   S2.VBELN = S1.VBELN(+) 
			        AND     S2.MATNR = S1.MATNR(+) 
			        )T1,
			        SDSTT101 T2,
			        ITEM_MST T3
			WHERE   T1.KUNNR = T2.CUST_CODE
			AND     T1.MATNR = T3.ITEM_ID
			AND     T3.ITYPE = 'FERT'
			AND		T1.VBELN LIKE '%'||'$!{order_no}'||'%'
			#if 	( "$!{domain}" == "EX" )            
	        AND     NVL(T3.CAT03,'XX')   LIKE 'O%' 
	        #elseif ( "$!{domain}" == "DO" )      
	        AND     NVL(T3.CAT03,'XX')  NOT LIKE 'O%'         
	        #end
	        AND		(T3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	 T3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
	        ORDER
	        BY		SUBSTR(T1.VBELN,6,5)
	        )A
	
	</query>
	
	
	<!-- DW1 가용일 대상 리스트 -->
	<query id="sel_dmd_list_ip03030">
        SELECT  CD, substr(CD_NAME,3,30)
        FROM    CODE_MST
        WHERE   CD_GRP = 'SEL_DMD'
        AND     CD NOT IN ('DMD01','DMD02','DMD05','DMD06')
        ORDER BY SUBSTR(CD_NAME,3,30)
	</query>
	
	<query id="ip_03030_Long_Term_Hawa_Planning" paging="true"> 
		SELECT	S1.IF_FLAG,
				S1.ITEM_ID,
				S1.ITEM_NAME,
				S1.TERMVAL, 
				S1.OPER_VAL,
				ROUND(SUM(S3.BASE_STOCK) + NVL(S4.BASE_STOCK,0),0),				
				NVL(S1.SEL_DMD,'DMD08'),
				CASE WHEN S1.SEL_DMD = 'DMD03'
					 THEN NVL(ROUND(SUM(S3.BASE_STOCK)/DECODE(SUM(S3.SALES_MEAN_3MON_TA),0,NULL,SUM(S3.SALES_MEAN_3MON_TA)),0),1)
					 ELSE CASE WHEN S1.SEL_DMD = 'DMD07'
					 		   THEN NVL(ROUND(SUM(S3.BASE_STOCK)/DECODE(SUM(S3.SALES_MEAN_3WEEK_ETC),0,NULL,SUM(S3.SALES_MEAN_3WEEK_ETC)),0),1)
					 		   ELSE CASE WHEN S1.SEL_DMD = 'DMD08'
					 		   			 THEN 0
					 		   			 ELSE CASE WHEN S1.SEL_DMD = 'DMD04' 
					 		   			 		   THEN NVL(ROUND(SUM(S3.BASE_STOCK)/DECODE(ROUND((SUM(S3.SALES_PY_MON_CUM_TA) + SUM(S3.SALES_PY_MON_CUM))/30,0),0,NULL,
					 		   			 		   			ROUND((SUM(S3.SALES_PY_MON_CUM_TA) + SUM(S3.SALES_PY_MON_CUM))/30,0)),0),1)
					 		   			 		   ELSE 0
					 		   			 	  END
					 		   	    END
					      END
				END		"가용일",	
				S1.PROD_TERM,
				S2.RECEIPT_M,
				S2.RECEIPT_M2,
				S2.RECEIPT_M3,
				S2.MON_M01,
				S2.MON_M02,				   
                TO_CHAR(TRUNC(SYSDATE)+ NVL(ROUND((SUM(S3.BASE_STOCK) + S2.RECEIPT_M + S2.RECEIPT_M2 + S2.RECEIPT_M3
                + S2.MON_M01 + S2.MON_M02) / DECODE(SUM(S3.SALES_MEAN_3WEEK_ETC),0,NULL,SUM(S3.SALES_MEAN_3WEEK_ETC)),0),0),'YYYY-MM-DD')     "총가용일",
				ROUND(NVL(SUM(S3.SALES_MEAN_3WEEK_ETC),0) + NVL(S4.SALES_MEAN_3WEEK_ETC,0),0) 			"3주평균",
                ROUND(NVL(SUM(S3.SALES_MEAN_3MON_TA),0) + NVL(S4.SALES_MEAN_3MON_TA,0),0)   			"3개월평균",
                ROUND((NVL(SUM(S3.SALES_PY_MON_CUM_TA),0) + NVL(SUM(S3.SALES_PY_MON_CUM),0))/30,0) 
                + ROUND((NVL(S4.SALES_PY_MON_CUM_TA,0) + NVL(S4.SALES_PY_MON_CUM,0))/30,0) 			"전년동월",
				0	SALES_USER,		--사용자
				S1.LEAD_TIME,
				NVL(S1.MOQ,0),
				S1.BOX_PER_PALET,
				0	BOX_DEMAND,		--요구량
				NVL(S1.PR_QTY,0),	
				'BOX' MEINS,
				TO_CHAR(TO_DATE('$!{version}') + S1.LEAD_TIME,'YYYYMMDD')		IPGO_DATE,
				S1.PR_NO,
				S1.IF_MSGS
		FROM	(
                SELECT  CASE
                            WHEN S3.IF_FLAG IS NULL
                            THEN S2.IF_FLAG
                            ELSE S3.IF_FLAG
                        END IF_FLAG,                        
                        S1.ITEM_ID,                                
                        S1.ITEM_NAME,                                
                        S1.TERMVAL,
                        S1.TERMVAL * 0.3	OPER_VAL,
                        S1.PROD_TERM,
                        S2.PR_QTY,
                        S3.PR_NO,
                        S3.IF_MSGS,
                        S1.PR_TO_PO + S1.PO_TO_LC + S1.LC_TO_PORT + S1.PORT_TO_CUST    LEAD_TIME,
                        S1.MINMPSQTY,
                        S1.BOX_PER_PALET,
                        S2.SEL_DMD,
                        S1.MOQ                                                     
                FROM    ITEM_MST    	S1,
                        APS_PR_PLAN    	S2,
                        (
                        SELECT  VERSION, ITEM_ID, SEQ,
                                MIN(IF_FLAG) IF_FLAG,
                                MIN(IF_MSGS) IF_MSGS,
                                MIN(PR_NO) PR_NO
                        FROM    APS_PR_PLAN_IF
                        WHERE   VERSION    = '$!{version}'
                        GROUP   
                        BY      VERSION, ITEM_ID, SEQ                                   
                        )S3
                WHERE   S1.ITEM_ID    = S2.ITEM_ID(+)
                AND     S2.ITEM_ID    = S3.ITEM_ID(+)               
                AND     S2.VERSION    = S3.VERSION(+)
                AND     S2.VERSION    = '$!{version}'
                AND     S1.SALES_CAT05	LIKE '%'||'$!{sales_cat05}'||'%' 
		        AND		S1.SALES_CAT03	LIKE '%'||'$!{item_type}'||'%'	
                AND     S2.SEQ        = S3.SEQ(+)
                AND     S1.PR_FLAG    = 'Y'      
                )S1,
               (
                SELECT  T1.ITEM_ID,
                        T1.RECEIPT_M,
                        T1.RECEIPT_M2,
                        T1.RECEIPT_M3,   
                        T2.MON_M01,
                        T2.MON_M02,
                        T2.MON_M03
                FROM	(
                        SELECT  ITEM_ID,
                                SUM(RECEIPT_M)  RECEIPT_M, 
                                SUM(RECEIPT_M2) RECEIPT_M2,
                                SUM(RECEIPT_M3) RECEIPT_M3
                        FROM    (
                                SELECT	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{version}'),'MM'),'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{version}'),'MM')+9,'YYYYMMDD')
                                        THEN SUM(RECEIPT_EXPT)
                                        ELSE 0
                                        END     RECEIPT_M,
                                        CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{version}'),'MM')+10,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{version}'),'MM')+19,'YYYYMMDD')
                                        THEN SUM(RECEIPT_EXPT)
                                        ELSE 0
                                        END     RECEIPT_M2,    
                                        CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{version}'),'MM')+20,'YYYYMMDD') AND TO_CHAR(LAST_DAY(TRUNC(TO_DATE('$!{version}'))),'YYYYMMDD')
                                        THEN SUM(RECEIPT_EXPT)
                                        ELSE 0
                                        END     RECEIPT_M3,  
                                        S1.ITEM_ID
                                FROM    DC_DATAWAREHOUSE S1, ITEM_MST S2
                                WHERE   S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{version}'),'MM'),'YYYYMMDD') AND TO_CHAR(LAST_DAY(TRUNC(TO_DATE('$!{version}'))),'YYYYMMDD')
                                AND     S1.ITEM_ID = S2.ITEM_ID
                                AND     S2.PR_FLAG ='Y'
                                AND     CNFM_DATE >= TO_CHAR(TO_DATE('$!{version}'),'YYYYMMDD')                                      
                                GROUP 
                                BY      S1.CNFM_DATE, 
                                		S1.ITEM_ID
                                )        
                        GROUP BY ITEM_ID
                        )T1,
                        (
                        SELECT  ITEM_ID,                        
                                MON_M01,
                                MON_M02,
                                MON_M03
                        FROM    DC_RECEIVE_PR
                        WHERE   VERSION =  '$!{version}'
                        AND     GUBN ='2'
                        )T2
                WHERE	T1.ITEM_ID = T2.ITEM_ID (+)
                )S2, DC_DATAWAREHOUSE S3,
                (
                SELECT	ITEM_ID,
                		SUM(BASE_STOCK) 			BASE_STOCK,
                		SUM(SALES_PY_MON_CUM) 		SALES_PY_MON_CUM,
                		SUM(SALES_PY_MON_CUM_TA) 	SALES_PY_MON_CUM_TA,
                		SUM(SALES_MEAN_3MON_TA) 	SALES_MEAN_3MON_TA,
                		SUM(SALES_MEAN_3WEEK_ETC) 	SALES_MEAN_3WEEK_ETC
                FROM	(
		                SELECT	T2.CONS_ITEM_ID	ITEM_ID,                		
		                		SUM(BASE_STOCK) 		  * T2.QTY	BASE_STOCK, 
		                		SUM(SALES_PY_MON_CUM) 	  * T2.QTY	SALES_PY_MON_CUM,
		                		SUM(SALES_PY_MON_CUM_TA)  * T2.QTY	SALES_PY_MON_CUM_TA,
		                		SUM(SALES_MEAN_3MON_TA)   * T2.QTY	SALES_MEAN_3MON_TA,
		                		SUM(SALES_MEAN_3WEEK_ETC) * T2.QTY	SALES_MEAN_3WEEK_ETC
		                FROM	DC_DATAWAREHOUSE T1,
		                		(
		                        SELECT  IM.ITEM_ID, 
		                                IM.ITEM_NAME,        
		                                MB.CONS_ITEM_ID,
		                                MAX(MB.PROD_VER),    
		                                MB.PROD_ITEM_ID,      
		                                MB.CONS_QTY,
		                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                                MB.CONS_QTY_UOM      
		                        FROM    ITEM_MST IM, MBOM MB, CMITEM ITM
		                        WHERE   IM.ITEM_ID = MB.CONS_ITEM_ID
		                        AND     IM.ITEM_ID    = ITM.ITEM_CD                      
		                        AND     (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		                        GROUP 
		                        BY      IM.ITEM_ID, 
		                                IM.ITEM_NAME,
		                                MB.CONS_ITEM_ID,
		                                MB.PROD_ITEM_ID,
		                                MB.CONS_QTY,
		                                MB.CONS_QTY_UOM, 
		                                IM.QTY
		                        )T2
		                WHERE	T2.PROD_ITEM_ID = T1.ITEM_ID	
		                AND		T1.CNFM_DATE	= '$!{version}'	
		                GROUP
		                BY		T2.CONS_ITEM_ID,
		                		T2.QTY
		                )
		        GROUP
		        BY		ITEM_ID
                )S4
        WHERE	S1.ITEM_ID 		= S2.ITEM_ID (+) 
        AND		S1.ITEM_ID		= S4.ITEM_ID (+)
        AND		S1.ITEM_ID 		= S3.ITEM_ID
        AND		S3.CNFM_DATE	= '$!{version}'        
        GROUP
        BY		S1.IF_FLAG,
				S1.ITEM_ID,
				S1.ITEM_NAME,
				S1.TERMVAL, 
				S1.OPER_VAL,
				S1.PROD_TERM,
				S2.RECEIPT_M,
				S2.RECEIPT_M2,
				S2.RECEIPT_M3,
				S2.MON_M01,
				S2.MON_M02,
				S1.LEAD_TIME,
				S1.MOQ,
				S1.BOX_PER_PALET,
				S1.PR_NO,
				S1.IF_MSGS,
				S1.SEL_DMD,
				S1.PR_QTY,
				S4.BASE_STOCK,
				S4.SALES_MEAN_3WEEK_ETC,
				S4.SALES_MEAN_3MON_TA,
				S4.SALES_PY_MON_CUM_TA,
				S4.SALES_PY_MON_CUM				
		ORDER
		BY		S1.ITEM_ID
	</query>
	
	<query id="ip_03030_Long_Term_Hawa_Planning_DW2" paging="true">
		SELECT	A.*,
				B.MSG,
				B.MSG2,
				C.TEXT_1,
				C.TEXT_2,
				C.TEXT_3,
				C.TEXT_4,
				C.TEXT_5,
				C.TEXT_6,
				C.TEXT_7
		FROM	(
				SELECT	A.*,
		          		RANK() OVER (PARTITION BY BANFN ORDER BY ROWNUM) SEQ
		   		FROM	(
						SELECT	DISTINCT '$!{item_id}'	ITEM_ID,
								f_get_item_name('$!{item_id}'),
								K1.BANFN,	--	구매 요청 번호
								K1.BADAT,	--	구매 요청 생성일
								K1.MENGE,	--	구매요청수량
								K1.EBELN,	--	구매오더번호
								DECODE(K1.BEDAT,'00000000',TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD')+K3.PR_TO_PO,'YYYYMMDD')
								,NULL,TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD')+K3.PR_TO_PO,'YYYYMMDD'),K1.BEDAT),	--	구매 오더일
								K1.BSMNG,	--	구매오더수량
								--K2.ZFHBLNO,
				               -- K2.ZFBLNO,
				                '0000000000' ZFBL_NO,
				                '' BL_QTY,		--BL수량
								'계획'		GUBN,
								TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD')+ K3.PR_TO_PO + K3.PO_TO_LC,'YYYYMMDD'),											--	B/L 개설일자, 선적일				
								TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD')+ K3.PR_TO_PO + K3.PO_TO_LC + K3.LC_TO_PORT,'YYYYMMDD'),							-- 입항일/실입항일
								TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD')+ K3.PR_TO_PO + K3.PO_TO_LC + K3.LC_TO_PORT + K3.PORT_TO_CUST,'YYYYMMDD'),		--	통관일				
					            TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD')+ K3.PR_TO_PO + K3.PO_TO_LC + K3.LC_TO_PORT + K3.PORT_TO_CUST + 1,'YYYYMMDD'),	--  입고일
					            K1.LFDAT,	--	입고요청일
					            TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD') + K3.PR_TO_PO + K3.PO_TO_LC + K3.LC_TO_PORT + K3.PORT_TO_CUST + 1,'YYYY-MM-DD')      EXPT_IPGO,  --  예상입고일
					            K3.PR_TO_PO + K3.PO_TO_LC + K3.LC_TO_PORT + K3.PORT_TO_CUST + 1 			LEAD_TIME					            
						FROM	(
								/* 구매요청, PO정보 */
								SELECT	T1.WERKS,
										T1.MATNR	PROD_CODE,
										T1.LFDAT,	--	품목납품일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
												T1.MENGE
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
										END	MENGE, --	구매요청수량
										T1.MEINS,	--	구매요청단위
										T2.BSTME,	--	발주단위
										T1.BADAT,
										T1.FRGDT,	--	구매 요청 릴리스일
										T1.BANFN,	--	구매 요청 번호
										T1.BNFPO,	--	구매 요청 품목 번호
										T1.EBELN,	--	구매오더번호
										T1.EBELP,	--	구매 오더 품목 번호,
										T1.BEDAT,	--	구매 오더일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
												T1.BSMNG
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
										END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
										T1.AFNAM	--	요청자이름
								FROM	SAPEBAN		T1,
										SAPMARA		T2,
										SAPMDBS		T3
								--WHERE	T1.LOEKZ	= ' '
								--AND		T1.MATNR	= T2.MATNR
								WHERE	T1.MATNR	= T2.MATNR
								AND		T1.MATNR	= '$!{item_id}'
								AND		T1.MATNR	= T3.MATNR
								AND		T1.EBELN	= T3.EBELN
								AND		T1.EBELP	= T3.EBELP
								AND		T1.FRGKZ	= '3' --구매요청 릴리즈
								--AND		T3.ELIKZ	= ' ' -- 납품완료지시자
								--AND		T3.LOEKZ	= ' ' -- 삭제 지시자
								AND		T1.STATU	= 'B' -- PO진행됨
								UNION	ALL
								/* 구매요청, PO정보 */
								SELECT	T1.WERKS,
										T1.MATNR PROD_CODE,
										T1.LFDAT,	--	품목납품일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
												T1.MENGE
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
										END	MENGE, --	구매요청수량
										T1.MEINS,	--	구매요청단위
										T2.BSTME,	--	발주단위
										T1.BADAT,
										T1.FRGDT,	--	구매 요청 릴리스일
										T1.BANFN,	--	구매 요청 번호
										T1.BNFPO,	--	구매 요청 품목 번호
										T1.EBELN,	--	구매오더번호
										T1.EBELP,	--	구매 오더 품목 번호,
										T1.BEDAT,	--	구매 오더일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
												T1.BSMNG
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
										END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
										T1.AFNAM	--	요청자이름
								FROM	SAPEBAN		T1,
										SAPMARA		T2
								--WHERE	T1.LOEKZ	= ' '
								--AND		T1.MATNR	= T2.MATNR
								WHERE	T1.MATNR	= T2.MATNR
								AND		T1.MATNR	= '$!{item_id}'
								AND		T1.FRGKZ	= '3' -- 구매요청 릴리즈
								AND		T1.STATU	= 'N' -- PO진행안됨
								)	K1,
								(
								SELECT	K2.EBELN,
					                    K2.EBELP,
					                    K2.ZFOPNNO,
					                    K2.MENGE,
					                    K2.MEINS,
					                    K2.MATNR,
					                    K2.ZFOPNDT,
					                    K3.ORD,
					                    K3.ZFHBLNO,
					                    K3.ZFBLNO,
					                    K3.BLMENGE,
					                    K3.ZFBLDT,
					                    K3.ZFETA,
					                    K3.ZFRETA,
					                    K3.ZFIDSDT,
					                    K3.CCMENGE,
					                    K3.BUDAT,
					                    K3.CUM_BLMENGE
								FROM	(
										/* LC정보 */
										SELECT	I.EBELN,	--	구매 문서 번호
												I.EBELP,	--	구매 문서 품목 번호
												H.ZFOPNNO,	--	신용장-승인번호
												I.MENGE,	--	수입의뢰 수량
												I.MEINS,	--	기본 단위
												I.MATNR,
												(
												/* 개설일자 */
												SELECT	DISTINCT
														ZFOPNDT--	개설일
												FROM	SAPZIMTREQST
												WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
												AND		ZFAMDNO	= 	( 
																	SELECT	MAX( ZFAMDNO )
																	FROM	SAPZIMTREQST
																	WHERE	ZFREQNO = H.ZFREQNO
																	)
												)	ZFOPNDT
										FROM	SAPZIMTREQHD	H,
												SAPZIMTREQIT	I
										WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
										AND		I.MATNR		= '$!{item_id}'
										)	K2,
										(
										/* B/L 데이타 읽기. */
										SELECT	K1.EBELN	EBELN,
												K1.EBELP	EBELP,
												K1.MATNR,
												RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
												K1.ZFHBLNO ZFHBLNO,
												K1.ZFBLNO,
												K2.ZFOPNNO,
												MAX(K1.BLMENGE)	BLMENGE,
												MAX(K1.ZFBLDT)	ZFBLDT,
												MAX(K1.ZFETA)	ZFETA,
												MAX(K1.ZFRETA)	ZFRETA,
												MAX(K1.ZFIDSDT)	ZFIDSDT,
												MAX(K1.CCMENGE) CCMENGE,
												MAX(K1.BUDAT)	BUDAT,
												SUM(K2.BLMENGE)	CUM_BLMENGE
										FROM	(
												SELECT	T1.ZFBLNO, T1.ZFSHNO,
														T2.MATNR,
														T2.EBELN,	--	구매 문서 번호
														T2.EBELP,	--	구매 문서 품목 번호
														T1.ZFHBLNO,	--	HOUSE BL_NO
														T2.BLMENGE,	--	BL수량
														T1.ZFBLDT,	--	BL발행일
														T1.ZFETA,		--	입항일
														T1.ZFRETA,		--	실입항일
														(
														SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
														FROM	SAPZIMTIDS	T3
														WHERE	T3.ZFBLNO	= T1.ZFBLNO	
														)	ZFIDSDT,
														(
														/* 통관수량 */
														SELECT	SUM(CCMENGE)
														FROM	SAPZIMTIVIT	T4
														WHERE	T4.ZFBLNO	= T1.ZFBLNO
														AND		T4.ZFBLIT	= T2.ZFBLIT
														)	CCMENGE,
														(
														/* 최근 입고일 */
														SELECT	MAX(BUDAT)
														FROM	SAPZIMVIVHSTIT	T5
														WHERE	T5.ZFBLNO	= T1.ZFBLNO
														AND		T5.ZFBLIT	= T2.ZFBLIT
														)	BUDAT
												FROM	SAPZIMTBL	T1,
														SAPZIMTBLIT	T2
												WHERE	T1.ZFBLNO	= T2.ZFBLNO
												AND		T2.MATNR	= '$!{item_id}'		
												)	K1,
												(
												SELECT	T1.ZFBLNO, T1.ZFSHNO,
														T2.EBELN,	--	구매 문서 번호
														T2.EBELP,
														T2.MATNR,	
														T2.BLMENGE,
														T1.ZFOPNNO	
												FROM	SAPZIMTBL	T1,
														SAPZIMTBLIT	T2
												WHERE	T1.ZFBLNO	= T2.ZFBLNO
												AND		T2.MATNR	= '$!{item_id}'	
												)	K2
										WHERE	K1.EBELN	= K2.EBELN
										AND		K1.EBELP	= K2.EBELP
										AND		K1.MATNR	= K2.MATNR
										AND		K1.ZFBLNO   = K2.ZFBLNO
										AND  (K1.EBELP !='00000'  AND K1.EBELN !=' ')
										AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
										GROUP
										BY		K1.EBELN, K1.MATNR,K2.ZFOPNNO,
												K1.EBELP,
												K1.ZFHBLNO,
												K1.ZFBLNO	
										)			K3
								WHERE   K2.EBELN 	= K3.EBELN (+)
					            AND     K2.EBELP 	= K3.EBELP (+)
					            AND     K2.ZFOPNNO 	= K3.ZFOPNNO(+)  
					            AND     K2.MATNR 	= K3.MATNR(+)
					            )K2,
								ITEM_MST	K3
						WHERE	K1.EBELN 		= K2.EBELN(+)
						AND		K1.PROD_CODE 	= K2.MATNR(+)			
						AND		K1.PROD_CODE 	= K3.ITEM_ID(+)
						AND		K1.EBELP 	 	= K2.EBELP(+)
						AND		K3.ITEM_ID	= '$!{item_id}'	
						AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
						AND		K1.FRGDT >=  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),-6),'YYYYMMDD')
						--AND		K2.BUDAT IS NULL
						UNION ALL 
						SELECT	DISTINCT '$!{item_id}'	ITEM_ID,
								f_get_item_name('$!{item_id}'),
								K1.BANFN,	--	구매 요청 번호
								K1.BADAT,	--	구매 요청 생성일
								K1.MENGE,	--	구매요청수량
								K1.EBELN,	--	구매오더번호
								DECODE(K1.BEDAT,'00000000','미정',NULL,'미정',K1.BEDAT),	--	구매 오더일
								K1.BSMNG,	--	구매오더수량
								--K2.ZFHBLNO,
				                K2.ZFBLNO,
				                TO_CHAR(K2.BLMENGE),		--BL수량
								'실적'		GUBN,
								NVL(K2.ZFBLDT,'미정'),	--	B/L 개설일자, 선적일				
								NVL(NVL(K2.ZFETA,K2.ZFRETA),'미정'),	-- 입항일/실입항일
								NVL(K2.ZFIDSDT,'미정'),	--	통관일				
				                NVL(K2.BUDAT,'미정'),	--  입고일
				                K1.LFDAT,	--	입고요청일
				                TO_CHAR(TO_DATE(K1.BADAT,'YYYY-MM-DD') + 1 +
				                DECODE(K1.EBELN,NULL,K3.PR_TO_PO,DECODE(K1.BEDAT,'00000000',K3.PR_TO_PO,TO_DATE(K1.BEDAT,'YYYY-MM-DD') - TO_DATE(K1.BADAT,'YYYY-MM-DD')))    +
				                DECODE(K2.ZFBLDT,NULL,K3.PO_TO_LC,DECODE(K2.ZFBLDT,'00000000',K3.PO_TO_LC,TO_DATE(K2.ZFBLDT,'YYYY-MM-DD') - TO_DATE(K1.BEDAT,'YYYY-MM-DD'))) +
				                DECODE(NVL(K2.ZFETA,K2.ZFRETA),NULL,K3.LC_TO_PORT,TO_DATE(NVL(K2.ZFETA,K2.ZFRETA),'YYYY-MM-DD') - TO_DATE(K2.ZFBLDT,'YYYY-MM-DD'))           +
				                DECODE(K2.ZFIDSDT,NULL,K3.PORT_TO_CUST,TO_DATE(K2.ZFIDSDT,'YYYY-MM-DD') - TO_DATE(NVL(K2.ZFETA,K2.ZFRETA),'YYYY-MM-DD')),'YYYY-MM-DD') EXPT_IPGO,  --  예상입고일
				                DECODE(K1.EBELN,NULL,K3.PR_TO_PO,DECODE(K1.BEDAT,'00000000',K3.PR_TO_PO,TO_DATE(K1.BEDAT,'YYYY-MM-DD') - TO_DATE(K1.BADAT,'YYYY-MM-DD')))    +
				                DECODE(K2.ZFBLDT,NULL,K3.PO_TO_LC,DECODE(K2.ZFBLDT,'00000000',K3.PO_TO_LC,TO_DATE(K2.ZFBLDT,'YYYY-MM-DD') - TO_DATE(K1.BEDAT,'YYYY-MM-DD'))) +
				                DECODE(NVL(K2.ZFETA,K2.ZFRETA),NULL,K3.LC_TO_PORT,TO_DATE(NVL(K2.ZFETA,K2.ZFRETA),'YYYY-MM-DD') - TO_DATE(K2.ZFBLDT,'YYYY-MM-DD'))           + 
				                1 + DECODE(K2.ZFIDSDT,NULL,K3.PORT_TO_CUST,TO_DATE(K2.ZFIDSDT,'YYYY-MM-DD') - TO_DATE(NVL(K2.ZFETA,K2.ZFRETA),'YYYY-MM-DD')) PR_TO_IPGO				              
						FROM	(
								/* 구매요청, PO정보 */
								SELECT	T1.WERKS,
										T1.MATNR	PROD_CODE,
										T1.LFDAT,	--	품목납품일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
												T1.MENGE
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
										END	MENGE, --	구매요청수량
										T1.MEINS,	--	구매요청단위
										T2.BSTME,	--	발주단위
										T1.BADAT,
										T1.FRGDT,	--	구매 요청 릴리스일
										T1.BANFN,	--	구매 요청 번호
										T1.BNFPO,	--	구매 요청 품목 번호
										T1.EBELN,	--	구매오더번호
										T1.EBELP,	--	구매 오더 품목 번호,
										T1.BEDAT,	--	구매 오더일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
												T1.BSMNG
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
										END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
										T1.AFNAM	--	요청자이름
								FROM	SAPEBAN		T1,
										SAPMARA		T2,
										SAPMDBS		T3
								--WHERE	T1.LOEKZ	= ' '
								--AND		T1.MATNR	= T2.MATNR
								WHERE	T1.MATNR	= T2.MATNR
								AND		T1.MATNR	= '$!{item_id}'
								AND		T1.MATNR	= T3.MATNR
								AND		T1.EBELN	= T3.EBELN
								AND		T1.EBELP	= T3.EBELP
								AND		T1.FRGKZ	= '3' --구매요청 릴리즈
								--AND		T3.ELIKZ	= ' ' -- 납품완료지시자
								--AND		T3.LOEKZ	= ' ' -- 삭제 지시자
								AND		T1.STATU	= 'B' -- PO진행됨
								UNION	ALL
								/* 구매요청, PO정보 */
								SELECT	T1.WERKS,
										T1.MATNR PROD_CODE,
										T1.LFDAT,	--	품목납품일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
												T1.MENGE
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
										END	MENGE, --	구매요청수량
										T1.MEINS,	--	구매요청단위
										T2.BSTME,	--	발주단위
										T1.BADAT,
										T1.FRGDT,	--	구매 요청 릴리스일
										T1.BANFN,	--	구매 요청 번호
										T1.BNFPO,	--	구매 요청 품목 번호
										T1.EBELN,	--	구매오더번호
										T1.EBELP,	--	구매 오더 품목 번호,
										T1.BEDAT,	--	구매 오더일
										CASE 
											WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
												T1.BSMNG
											ELSE
												f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
										END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
										T1.AFNAM	--	요청자이름
								FROM	SAPEBAN		T1,
										SAPMARA		T2
								--WHERE	T1.LOEKZ	= ' '
								--AND		T1.MATNR	= T2.MATNR
								WHERE	T1.MATNR	= T2.MATNR
								AND		T1.MATNR	= '$!{item_id}'
								AND		T1.FRGKZ	= '3' -- 구매요청 릴리즈
								AND		T1.STATU	= 'N' -- PO진행안됨
								)	K1,
								(
								SELECT	K2.EBELN,
				                        K2.EBELP,
				                        K2.ZFOPNNO,
				                        K2.MENGE,
				                        K2.MEINS,
				                        K2.MATNR,
				                        K2.ZFOPNDT,
				                        K3.ORD,
				                        K3.ZFHBLNO,
				                        K3.ZFBLNO,
				                        K3.BLMENGE,
				                        K3.ZFBLDT,
				                        K3.ZFETA,
				                        K3.ZFRETA,
				                        K3.ZFIDSDT,
				                        K3.CCMENGE,
				                        K3.BUDAT,
				                        K3.CUM_BLMENGE
								FROM	(
										/* LC정보 */
										SELECT	I.EBELN,	--	구매 문서 번호
												I.EBELP,	--	구매 문서 품목 번호
												H.ZFOPNNO,	--	신용장-승인번호
												I.MENGE,	--	수입의뢰 수량
												I.MEINS,	--	기본 단위
												I.MATNR,
												(
												/* 개설일자 */
												SELECT	DISTINCT
														ZFOPNDT--	개설일
												FROM	SAPZIMTREQST
												WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
												AND		ZFAMDNO	= 	( 
																	SELECT	MAX( ZFAMDNO )
																	FROM	SAPZIMTREQST
																	WHERE	ZFREQNO = H.ZFREQNO
																	)
												)	ZFOPNDT
										FROM	SAPZIMTREQHD	H,
												SAPZIMTREQIT	I
										WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
										AND		I.MATNR		= '$!{item_id}'
										)	K2,
										(
										/* B/L 데이타 읽기. */
										SELECT	K1.EBELN	EBELN,
												K1.EBELP	EBELP,
												K1.MATNR,
												RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
												K1.ZFHBLNO ZFHBLNO,
												K1.ZFBLNO,
												K2.ZFOPNNO,
												MAX(K1.BLMENGE)	BLMENGE,
												MAX(K1.ZFBLDT)	ZFBLDT,
												MAX(K1.ZFETA)	ZFETA,
												MAX(K1.ZFRETA)	ZFRETA,
												MAX(K1.ZFIDSDT)	ZFIDSDT,
												MAX(K1.CCMENGE) CCMENGE,
												MAX(K1.BUDAT)	BUDAT,
												SUM(K2.BLMENGE)	CUM_BLMENGE
										FROM	(
												SELECT	T1.ZFBLNO, T1.ZFSHNO,
														T2.MATNR,
														T2.EBELN,	--	구매 문서 번호
														T2.EBELP,	--	구매 문서 품목 번호
														T1.ZFHBLNO,	--	HOUSE BL_NO
														T2.BLMENGE,	--	BL수량
														T1.ZFBLDT,	--	BL발행일
														T1.ZFETA,		--	입항일
														T1.ZFRETA,		--	실입항일
														(
														SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
														FROM	SAPZIMTIDS	T3
														WHERE	T3.ZFBLNO	= T1.ZFBLNO	
														)	ZFIDSDT,
														(
														/* 통관수량 */
														SELECT	SUM(CCMENGE)
														FROM	SAPZIMTIVIT	T4
														WHERE	T4.ZFBLNO	= T1.ZFBLNO
														AND		T4.ZFBLIT	= T2.ZFBLIT
														)	CCMENGE,
														(
														/* 최근 입고일 */
														SELECT	MAX(BUDAT)
														FROM	SAPZIMVIVHSTIT	T5
														WHERE	T5.ZFBLNO	= T1.ZFBLNO
														AND		T5.ZFBLIT	= T2.ZFBLIT
														)	BUDAT
												FROM	SAPZIMTBL	T1,
														SAPZIMTBLIT	T2
												WHERE	T1.ZFBLNO	= T2.ZFBLNO
												AND		T2.MATNR	= '$!{item_id}'		
												)	K1,
												(
												SELECT	T1.ZFBLNO, T1.ZFSHNO,
														T2.EBELN,	--	구매 문서 번호
														T2.EBELP,
														T2.MATNR,	
														T2.BLMENGE,
														T1.ZFOPNNO	
												FROM	SAPZIMTBL	T1,
														SAPZIMTBLIT	T2
												WHERE	T1.ZFBLNO	= T2.ZFBLNO
												AND		T2.MATNR	= '$!{item_id}'	
												)	K2
										WHERE	K1.EBELN	= K2.EBELN
										AND		K1.EBELP	= K2.EBELP
										AND		K1.MATNR	= K2.MATNR
										AND		K1.ZFBLNO   = K2.ZFBLNO
										AND  (K1.EBELP !='00000'  AND K1.EBELN !=' ')
										AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
										GROUP
										BY		K1.EBELN, K1.MATNR,K2.ZFOPNNO,
												K1.EBELP,
												K1.ZFHBLNO,
												K1.ZFBLNO	
										)			K3
								WHERE   K2.EBELN 	= K3.EBELN (+)
				                AND     K2.EBELP 	= K3.EBELP (+)
				                AND     K2.ZFOPNNO 	= K3.ZFOPNNO(+)  
				                AND     K2.MATNR 	= K3.MATNR(+)
				                )K2,
								ITEM_MST	K3
							WHERE	K1.EBELN 		= K2.EBELN(+)
							AND		K1.PROD_CODE 	= K2.MATNR(+)			
							AND		K1.PROD_CODE 	= K3.ITEM_ID(+)
							AND		K1.EBELP 		= K2.EBELP(+)
							AND		K3.ITEM_ID		= '$!{item_id}'	
							AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
							AND		K1.FRGDT >=  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),-6),'YYYYMMDD')
							--AND		K2.BUDAT IS NULL
				)A
			)A, 
			(
			SELECT	PR_NO,
					SEQ,
					MSG,
					MSG2
			FROM	USER_PR_MSG
			WHERE	VERSION = '$!{version}'	
			)B,
			(
			SELECT	PR_NO,
					BL_NO,
					TEXT_1,
					TEXT_2,
					TEXT_3,
					TEXT_4,
					TEXT_5,
					TEXT_6,
					TEXT_7
			FROM	MAT_TIME		
			)C
		WHERE	A.BANFN 	= B.PR_NO(+)
		AND		A.SEQ		= B.SEQ(+)
		AND		A.BANFN		= C.PR_NO(+)
		AND		A.ZFBL_NO	= C.BL_NO(+)				
		ORDER
		BY		3,4,11,12
	</query>
	
	<query id="ip_03040_trans_id" paging="false">
	SELECT	POS_TRANS_ID,
			POS_TRANS_ID
	FROM	(
			SELECT	POS_TRANS_ID
			FROM	ITEM_MST
			WHERE	ITEM_ID = '$!{item_id}'
			)IM,
			(
			SELECT	'TMP' TMP FROM DUAL
			)TP <!-- 비정상멈춤 현상 방지 TMP 테이블 조인 -->
	
	
	</query>
	
	
	<query id="ip_03040_Pos_Singlelist" paging="true">
	/* 역산식 추가 2016-06-20 */        
	SELECT  T1.YYYYMMDD,
			'('||T2.WEEK_DAY||')'	DAY,
			#if ( "$!{gubn}" == "1" ) 
			0,
	        #else
	        SUM(EMART_STOCK),
	        #end
	        SUM(EMART_POS),
	        SUM(EMART_NS),
	        #if ( "$!{gubn}" == "1" ) 
			0,
	        #else
	        SUM(HOME_STOCK),
	        #end
	        SUM(HOME_POS),
	        SUM(HOME_NS),
	        #if ( "$!{gubn}" == "1" ) 
			0,
	        #else
	        SUM(LOTTE_STOCK),
	        #end
	        SUM(LOTTE_POS),
	        SUM(LOTTE_NS),
	        #if ( "$!{gubn}" == "1" ) 
			0,
	        #else
	        SUM(EMART_STOCK) + SUM(HOME_STOCK) + SUM(LOTTE_STOCK),
	        #end	        
	        SUM(EMART_POS) 	 + SUM(HOME_POS)   + SUM(LOTTE_POS),
	        SUM(EMART_NS) 	 + SUM(HOME_NS)    + SUM(LOTTE_NS)
	FROM	(
		    SELECT  S1.YYYYMMDD,            
		            0   EMART_STOCK,
		            0   EMART_POS,
		            0   EMART_NS,
		            0   HOME_STOCK,
		            0   HOME_POS,
		            0   HOME_NS,
		            NVL(S3.LOTTE_STOCK,NVL(S2.LOTTE_STOCK,0))   LOTTE_STOCK,        
		            ROUND(SUM(S1.LOTTE),0)              		LOTTE_POS,
		            ROUND(SUM(S1.LOTTE_N),0)            		LOTTE_NS
		    FROM    (
		    		SELECT	YYYYMMDD,
		    				SUM(LOTTE)		LOTTE,
		    				SUM(LOTTE_N)	LOTTE_N
		    		FROM	(
				            SELECT  T2.YYYYMMDD,
				                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE,
				                    0                               LOTTE_N                    
				            FROM    (
				                    SELECT  T1.YYYYMMDD,
				                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       LOTTE                            
				                    FROM    DWCMF200 T1,
				                            (
				                            SELECT  CODE, CODE_NAME1
				                            FROM    SDSTT500
				                            WHERE   CODE_GUBN = 'ST115'
				                            AND     CODE ='23'
				                            )T2,
				                            SDSTT101         T3,
				                            ITEM_MST         T4
				                    #if ( "$!{gubn}" == "1" )      
				                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     T3.HEAD_CUST_CODE 		= '1005674'
				                    AND     T1.PROD_CODE         	= '$!{item_id}'
				                    AND     T1.PROD_CODE           	= T4.ITEM_ID
				                    AND     T1.SALE_GRUP_CODE    	= T2.CODE
				                    AND     T1.CUST_CODE         	= T3.CUST_CODE
				                    GROUP
				                    BY      T1.YYYYMMDD,
				                            T1.SALE_GRUP_CODE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.YYYYMMDD(+)
				            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				            GROUP
				            BY      T2.YYYYMMDD
				            UNION ALL
				            SELECT  T2.YYYYMMDD,
				                    0,                    
				                    NVL(ROUND(MAX(LOTTE),0),0)  LOTTE                    
				            FROM    (
				                    SELECT  A.CNFM_DATE,
				                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1) * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    LOTTE
				                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                    WHERE   A.SLIP_NO              = B.SLIP_NO
				                    #if ( "$!{gubn}" == "1" )
				                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     B.PROD_CODE            = '$!{item_id}'
				                    AND     A.SOLD_PART            = C.CUST_CODE
				                    AND     A.SLIP_GUBN_CODE       = D.CODE
				                    AND     D.CODE_GUBN            = 'OR103'
				                    AND     C.GRUP_CODE            = '23'    
				                    AND     C.HEAD_CUST_CODE       = '1005674'  
				                    AND     B.UPDT_GUBN	NOT IN ('00')     --00 삭제 01 최초입력 09 수정 10 마감                
				                    GROUP 
				                    BY      A.CNFM_DATE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.CNFM_DATE(+)
				            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				            GROUP 
				            BY      T2.YYYYMMDD
				            )
				    GROUP
				    BY		YYYYMMDD        
		            )S1,
		            (
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)-1,'YYYYMMDD') CNFM_DATE,                   
		                    LOTTE_STOCK + LOTTE_T - LOTTE_N_T       LOTTE_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.LOTTE_STOCK),0)    LOTTE_STOCK,        
		                            ROUND(MAX(S1.LOTTE),0)          LOTTE,
		                            ROUND(MAX(S1.LOTTE_N),0)        LOTTE_N,                          
		                            SUM(ROUND(MAX(S1.LOTTE),0))     OVER(ORDER BY S1.YYYYMMDD DESC )  LOTTE_T,
		                            SUM(ROUND(MAX(S1.LOTTE_N),0))   OVER(ORDER BY S1.YYYYMMDD DESC )  LOTTE_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(LOTTE)		LOTTE,
		                    				SUM(LOTTE_N)	LOTTE_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE,                                
				                                    0               LOTTE_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       LOTTE                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '23'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1005674'
				                                    AND     T1.PROD_CODE         = '$!{item_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)
				                            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  TO_CHAR(TO_DATE(T2.YYYYMMDD)+1,'YYYYMMDD')	YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    LOTTE
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{item_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '23'    
				                                    AND     C.HEAD_CUST_CODE    = '1005674'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                 
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(LOTTE_STOCK,0)    LOTTE_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		LOTTE_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD &lt;= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		            )S2,
		            ( 
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)+1,'YYYYMMDD') CNFM_DATE,                   
		                    LOTTE_STOCK - LOTTE_T + LOTTE_N_T       LOTTE_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.LOTTE_STOCK),0)    LOTTE_STOCK,        
		                            ROUND(MAX(S1.LOTTE),0)          LOTTE,
		                            ROUND(MAX(S1.LOTTE_N),0)        LOTTE_N,                          
		                            SUM(ROUND(MAX(S1.LOTTE),0))     OVER(ORDER BY S1.YYYYMMDD )  LOTTE_T,
		                            SUM(ROUND(MAX(S1.LOTTE_N),0))   OVER(ORDER BY S1.YYYYMMDD )  LOTTE_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(LOTTE)		LOTTE,
		                    				SUM(LOTTE_N)	LOTTE_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE,                                
				                                    0               LOTTE_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD),'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)      LOTTE                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '23'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1005674'
				                                    AND     T1.PROD_CODE         = '$!{item_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD(+)
				                            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  T2.YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                    		SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1) * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))  LOTTE
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{item_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '23'    
				                                    AND     C.HEAD_CUST_CODE    = '1005674'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				                            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'             
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(LOTTE_STOCK,0)    LOTTE_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		LOTTE_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD >= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		                    UNION ALL
		                    SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(LOTTE_STOCK,0)    LOTTE_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		LOTTE_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                    )S3
		    WHERE   S1.YYYYMMDD = S2.CNFM_DATE(+)   
		    AND     S1.YYYYMMDD = S3.CNFM_DATE(+)    
		    AND		S1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'      
		    GROUP 
		    BY      S1.YYYYMMDD,            
		            S2.LOTTE_STOCK,            
		            S3.LOTTE_STOCK    
		    UNION ALL		    
		    SELECT  S1.YYYYMMDD,            
		            0   EMART_STOCK,
		            0   EMART_POS,
		            0   EMART_NS,
		            0   HOME_STOCK,
		            0   HOME_POS,
		            0   HOME_NS,
		            NVL(S3.LOTTE_STOCK,NVL(S2.LOTTE_STOCK,0))   LOTTE_STOCK,        
		            ROUND(SUM(S1.LOTTE),0)              		LOTTE_POS,
		            ROUND(SUM(S1.LOTTE_N),0)            		LOTTE_NS
		    FROM    (
		    		SELECT	YYYYMMDD,
		    				SUM(LOTTE)		LOTTE,
		    				SUM(LOTTE_N)	LOTTE_N
		    		FROM	(
				            SELECT  T2.YYYYMMDD,
				                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE,
				                    0                               LOTTE_N                    
				            FROM    (
				                    SELECT  T1.YYYYMMDD,
				                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       LOTTE                            
				                    FROM    DWCMF200 T1,
				                            (
				                            SELECT  CODE, CODE_NAME1
				                            FROM    SDSTT500
				                            WHERE   CODE_GUBN = 'ST115'
				                            AND     CODE ='23'
				                            )T2,
				                            SDSTT101         T3,
				                            ITEM_MST         T4
				                    #if ( "$!{gubn}" == "1" )      
				                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     T3.HEAD_CUST_CODE 		= '1005674'
				                    AND     T1.PROD_CODE         	= '$!{pos_id}'
				                    AND     T1.PROD_CODE           	= T4.ITEM_ID
				                    AND     T1.SALE_GRUP_CODE    	= T2.CODE
				                    AND     T1.CUST_CODE         	= T3.CUST_CODE
				                    GROUP
				                    BY      T1.YYYYMMDD,
				                            T1.SALE_GRUP_CODE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.YYYYMMDD(+)
				            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				            GROUP
				            BY      T2.YYYYMMDD
				            UNION ALL
				            SELECT  T2.YYYYMMDD,
				                    0,                    
				                    NVL(ROUND(MAX(LOTTE),0),0)  LOTTE                    
				            FROM    (
				                    SELECT  A.CNFM_DATE,
				                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1) * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    LOTTE
				                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                    WHERE   A.SLIP_NO              = B.SLIP_NO
				                    #if ( "$!{gubn}" == "1" )
				                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     B.PROD_CODE            = '$!{pos_id}'
				                    AND     A.SOLD_PART            = C.CUST_CODE
				                    AND     A.SLIP_GUBN_CODE       = D.CODE
				                    AND     D.CODE_GUBN            = 'OR103'
				                    AND     C.GRUP_CODE            = '23'    
				                    AND     C.HEAD_CUST_CODE       = '1005674'  
				                    AND     B.UPDT_GUBN	NOT IN ('00')     --00 삭제 01 최초입력 09 수정 10 마감                
				                    GROUP 
				                    BY      A.CNFM_DATE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.CNFM_DATE(+)
				            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				            GROUP 
				            BY      T2.YYYYMMDD
				            )
				    GROUP
				    BY		YYYYMMDD        
		            )S1,
		            (
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)-1,'YYYYMMDD') CNFM_DATE,                   
		                    LOTTE_STOCK + LOTTE_T - LOTTE_N_T       LOTTE_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.LOTTE_STOCK),0)    LOTTE_STOCK,        
		                            ROUND(MAX(S1.LOTTE),0)          LOTTE,
		                            ROUND(MAX(S1.LOTTE_N),0)        LOTTE_N,                          
		                            SUM(ROUND(MAX(S1.LOTTE),0))     OVER(ORDER BY S1.YYYYMMDD DESC )  LOTTE_T,
		                            SUM(ROUND(MAX(S1.LOTTE_N),0))   OVER(ORDER BY S1.YYYYMMDD DESC )  LOTTE_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(LOTTE)		LOTTE,
		                    				SUM(LOTTE_N)	LOTTE_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE,                                
				                                    0               LOTTE_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       LOTTE                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '23'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1005674'
				                                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)
				                            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  TO_CHAR(TO_DATE(T2.YYYYMMDD)+1,'YYYYMMDD')	YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    LOTTE
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{pos_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '23'    
				                                    AND     C.HEAD_CUST_CODE    = '1005674'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                 
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(LOTTE_STOCK,0)    LOTTE_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		LOTTE_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD &lt;= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		            )S2,
		            ( 
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)+1,'YYYYMMDD') CNFM_DATE,                   
		                    LOTTE_STOCK - LOTTE_T + LOTTE_N_T       LOTTE_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.LOTTE_STOCK),0)    LOTTE_STOCK,        
		                            ROUND(MAX(S1.LOTTE),0)          LOTTE,
		                            ROUND(MAX(S1.LOTTE_N),0)        LOTTE_N,                          
		                            SUM(ROUND(MAX(S1.LOTTE),0))     OVER(ORDER BY S1.YYYYMMDD )  LOTTE_T,
		                            SUM(ROUND(MAX(S1.LOTTE_N),0))   OVER(ORDER BY S1.YYYYMMDD )  LOTTE_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(LOTTE)		LOTTE,
		                    				SUM(LOTTE_N)	LOTTE_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE,                                
				                                    0               LOTTE_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD),'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)      LOTTE                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '23'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1005674'
				                                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD(+)
				                            AND		T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  T2.YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(LOTTE),0),0)      LOTTE                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                    		SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1) * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))  LOTTE
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{pos_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '23'    
				                                    AND     C.HEAD_CUST_CODE    = '1005674'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				                            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'             
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(LOTTE_STOCK,0)    LOTTE_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		LOTTE_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD >= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		                    UNION ALL
		                    SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(LOTTE_STOCK,0)    LOTTE_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		LOTTE_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                    )S3
		    WHERE   S1.YYYYMMDD = S2.CNFM_DATE(+)   
		    AND     S1.YYYYMMDD = S3.CNFM_DATE(+)    
		    AND		S1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'      
		    GROUP 
		    BY      S1.YYYYMMDD,            
		            S2.LOTTE_STOCK,            
		            S3.LOTTE_STOCK 
		    UNION ALL
		    SELECT  S1.YYYYMMDD,       
		            NVL(S3.EMART_STOCK,NVL(S2.EMART_STOCK,0))   EMART_STOCK,        
		            ROUND(SUM(S1.EMART),0)              		EMART_POS,
		            ROUND(SUM(S1.EMART_N),0)            		EMART_NS,  
		            0   HOME_STOCK,
		            0   HOME_POS,
		            0   HOME_NS,        
		            0   LOTTE_STOCK,
		            0   LOTTE_POS,
		            0   LOTTE_NS            
		    FROM    (
		    		SELECT	YYYYMMDD,
		    				SUM(EMART)		EMART,
		    				SUM(EMART_N)	EMART_N
		    		FROM	(
				            SELECT  T2.YYYYMMDD,
				                    NVL(ROUND(MAX(EMART),0),0)      EMART,
				                    0                               EMART_N                    
				            FROM    (
				                    SELECT  T1.YYYYMMDD,
				                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       EMART                            
				                    FROM    DWCMF200 T1,
				                            (
				                            SELECT  CODE, CODE_NAME1
				                            FROM    SDSTT500
				                            WHERE   CODE_GUBN = 'ST115'
				                            AND     CODE ='32'
				                            )T2,
				                            SDSTT101         T3,
				                            ITEM_MST         T4        
				                    #if ( "$!{gubn}" == "1" )      
				                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     T3.HEAD_CUST_CODE   	= '1020073'
				                    AND     T1.PROD_CODE         	= '$!{item_id}'
				                    AND     T1.PROD_CODE           	= T4.ITEM_ID
				                    AND     T1.SALE_GRUP_CODE    	= T2.CODE
				                    AND     T1.CUST_CODE         	= T3.CUST_CODE
				                    GROUP
				                    BY      T1.YYYYMMDD,
				                            T1.SALE_GRUP_CODE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP
				            BY      T2.YYYYMMDD
				            UNION ALL
				            SELECT  T2.YYYYMMDD,
				                    0,                    
				                    NVL(ROUND(MAX(EMART),0),0)  EMART                    
				            FROM    (
				                    SELECT  A.CNFM_DATE,
				                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    EMART
				                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                    WHERE   A.SLIP_NO              	= B.SLIP_NO
				                    #if ( "$!{gubn}" == "1" )
				                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     B.PROD_CODE            	= '$!{item_id}'
				                    AND     A.SOLD_PART            	= C.CUST_CODE
				                    AND     A.SLIP_GUBN_CODE       	= D.CODE
				                    AND     D.CODE_GUBN            	= 'OR103'
				                    AND     C.GRUP_CODE            	= '32'    
				                    AND     C.HEAD_CUST_CODE        = '1020073'  
				                    AND     B.UPDT_GUBN	NOT IN ('00')                     
				                    GROUP 
				                    BY      A.CNFM_DATE                  
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP 
				            BY      T2.YYYYMMDD 
				            )
				    GROUP
				    BY		YYYYMMDD     
		            )S1,
		            (
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)-1,'YYYYMMDD') CNFM_DATE,                   
		                    EMART_STOCK + EMART_T - EMART_N_T       EMART_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.EMART_STOCK),0)    EMART_STOCK,        
		                            ROUND(MAX(S1.EMART),0)          EMART,
		                            ROUND(MAX(S1.EMART_N),0)        EMART_N,                          
		                            SUM(ROUND(MAX(S1.EMART),0))     OVER(ORDER BY S1.YYYYMMDD DESC )  EMART_T,
		                            SUM(ROUND(MAX(S1.EMART_N),0))   OVER(ORDER BY S1.YYYYMMDD DESC )  EMART_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(EMART)		EMART,
		                    				SUM(EMART_N)	EMART_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART,                                
				                                    0               EMART_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       EMART                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '32'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1020073'
				                                    AND     T1.PROD_CODE         = '$!{item_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  TO_CHAR(TO_DATE(T2.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    EMART
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{item_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '32'    
				                                    AND     C.HEAD_CUST_CODE    = '1020073'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                 
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(EMART_STOCK,0)    EMART_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		EMART_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD &lt;= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		            )S2,
		            ( 
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)+1,'YYYYMMDD') CNFM_DATE,                   
		                    EMART_STOCK - EMART_T + EMART_N_T       EMART_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.EMART_STOCK),0)    EMART_STOCK,        
		                            ROUND(MAX(S1.EMART),0)          EMART,
		                            ROUND(MAX(S1.EMART_N),0)        EMART_N,                          
		                            SUM(ROUND(MAX(S1.EMART),0))     OVER(ORDER BY S1.YYYYMMDD )  EMART_T,
		                            SUM(ROUND(MAX(S1.EMART_N),0))   OVER(ORDER BY S1.YYYYMMDD )  EMART_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(EMART)		EMART,
		                    				SUM(EMART_N)	EMART_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART,                                
				                                    0               EMART_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD),'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       EMART                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '32'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1020073'
				                                    AND     T1.PROD_CODE         = '$!{item_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  T2.YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    EMART
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{item_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '32'    
				                                    AND     C.HEAD_CUST_CODE    = '1020073'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                 
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(EMART_STOCK,0)    EMART_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		EMART_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD >= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		                    UNION ALL
		                    SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(EMART_STOCK,0)    EMART_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		EMART_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                    )S3
		    WHERE   S1.YYYYMMDD = S2.CNFM_DATE(+)   
		    AND     S1.YYYYMMDD = S3.CNFM_DATE(+) 
		    AND		S1.YYYYMMDD BETWEEN  '$!{start_date}' AND '$!{end_date}'        
		    GROUP 
		    BY      S1.YYYYMMDD,            
		            S2.EMART_STOCK,            
		            S3.EMART_STOCK 
		    UNION ALL
		    SELECT  S1.YYYYMMDD,       
		            NVL(S3.EMART_STOCK,NVL(S2.EMART_STOCK,0))   EMART_STOCK,        
		            ROUND(SUM(S1.EMART),0)              		EMART_POS,
		            ROUND(SUM(S1.EMART_N),0)            		EMART_NS,  
		            0   HOME_STOCK,
		            0   HOME_POS,
		            0   HOME_NS,        
		            0   LOTTE_STOCK,
		            0   LOTTE_POS,
		            0   LOTTE_NS            
		    FROM    (
		    		SELECT	YYYYMMDD,
		    				SUM(EMART)		EMART,
		    				SUM(EMART_N)	EMART_N
		    		FROM	(
				            SELECT  T2.YYYYMMDD,
				                    NVL(ROUND(MAX(EMART),0),0)      EMART,
				                    0                               EMART_N                    
				            FROM    (
				                    SELECT  T1.YYYYMMDD,
				                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       EMART                            
				                    FROM    DWCMF200 T1,
				                            (
				                            SELECT  CODE, CODE_NAME1
				                            FROM    SDSTT500
				                            WHERE   CODE_GUBN = 'ST115'
				                            AND     CODE ='32'
				                            )T2,
				                            SDSTT101         T3,
				                            ITEM_MST         T4        
				                    #if ( "$!{gubn}" == "1" )      
				                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     T3.HEAD_CUST_CODE   	= '1020073'
				                    AND     T1.PROD_CODE         	= '$!{pos_id}'
				                    AND     T1.PROD_CODE           	= T4.ITEM_ID
				                    AND     T1.SALE_GRUP_CODE    	= T2.CODE
				                    AND     T1.CUST_CODE         	= T3.CUST_CODE
				                    GROUP
				                    BY      T1.YYYYMMDD,
				                            T1.SALE_GRUP_CODE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP
				            BY      T2.YYYYMMDD
				            UNION ALL
				            SELECT  T2.YYYYMMDD,
				                    0,                    
				                    NVL(ROUND(MAX(EMART),0),0)  EMART                    
				            FROM    (
				                    SELECT  A.CNFM_DATE,
				                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    EMART
				                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                    WHERE   A.SLIP_NO              	= B.SLIP_NO
				                    #if ( "$!{gubn}" == "1" )
				                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     B.PROD_CODE            	= '$!{pos_id}'
				                    AND     A.SOLD_PART            	= C.CUST_CODE
				                    AND     A.SLIP_GUBN_CODE       	= D.CODE
				                    AND     D.CODE_GUBN            	= 'OR103'
				                    AND     C.GRUP_CODE            	= '32'    
				                    AND     C.HEAD_CUST_CODE        = '1020073'  
				                    AND     B.UPDT_GUBN	NOT IN ('00')                     
				                    GROUP 
				                    BY      A.CNFM_DATE                  
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP 
				            BY      T2.YYYYMMDD 
				            )
				    GROUP
				    BY		YYYYMMDD     
		            )S1,
		            (
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)-1,'YYYYMMDD') CNFM_DATE,                   
		                    EMART_STOCK + EMART_T - EMART_N_T       EMART_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.EMART_STOCK),0)    EMART_STOCK,        
		                            ROUND(MAX(S1.EMART),0)          EMART,
		                            ROUND(MAX(S1.EMART_N),0)        EMART_N,                          
		                            SUM(ROUND(MAX(S1.EMART),0))     OVER(ORDER BY S1.YYYYMMDD DESC )  EMART_T,
		                            SUM(ROUND(MAX(S1.EMART_N),0))   OVER(ORDER BY S1.YYYYMMDD DESC )  EMART_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(EMART)		EMART,
		                    				SUM(EMART_N)	EMART_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART,                                
				                                    0               EMART_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       EMART                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '32'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1020073'
				                                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  TO_CHAR(TO_DATE(T2.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    EMART
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{pos_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '32'    
				                                    AND     C.HEAD_CUST_CODE    = '1020073'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                 
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(EMART_STOCK,0)    EMART_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		EMART_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD &lt;= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		            )S2,
		            ( 
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)+1,'YYYYMMDD') CNFM_DATE,                   
		                    EMART_STOCK - EMART_T + EMART_N_T       EMART_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.EMART_STOCK),0)    EMART_STOCK,        
		                            ROUND(MAX(S1.EMART),0)          EMART,
		                            ROUND(MAX(S1.EMART_N),0)        EMART_N,                          
		                            SUM(ROUND(MAX(S1.EMART),0))     OVER(ORDER BY S1.YYYYMMDD )  EMART_T,
		                            SUM(ROUND(MAX(S1.EMART_N),0))   OVER(ORDER BY S1.YYYYMMDD )  EMART_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(EMART)		EMART,
		                    				SUM(EMART_N)	EMART_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART,                                
				                                    0               EMART_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD),'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       EMART                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '32'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    = '1020073'
				                                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  T2.YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(EMART),0),0)      EMART                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    EMART
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{pos_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '32'    
				                                    AND     C.HEAD_CUST_CODE    = '1020073'     
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                 
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(EMART_STOCK,0)    EMART_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		EMART_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD >= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		                    UNION ALL
		                    SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(EMART_STOCK,0)    EMART_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		EMART_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                    )S3
		    WHERE   S1.YYYYMMDD = S2.CNFM_DATE(+)   
		    AND     S1.YYYYMMDD = S3.CNFM_DATE(+) 
		    AND		S1.YYYYMMDD BETWEEN  '$!{start_date}' AND '$!{end_date}'        
		    GROUP 
		    BY      S1.YYYYMMDD,            
		            S2.EMART_STOCK,            
		            S3.EMART_STOCK
		    UNION ALL
		    SELECT  S1.YYYYMMDD,       
		            0  	EMART_STOCK,        
		            0   EMART_POS,
		            0   EMART_NS,   
		            NVL(S3.HOME_STOCK,NVL(S2.HOME_STOCK,0)) HOME_STOCK,        
		            ROUND(SUM(S1.HOME),0)              		HOME_POS,
		            ROUND(SUM(S1.HOME_N),0)            		HOME_NS,   
		            0   LOTTE_STOCK,
		            0   LOTTE_POS,
		            0   LOTTE_NS            
		    FROM    (
		    		SELECT	YYYYMMDD,
		    				SUM(HOME)		HOME,
		    				SUM(HOME_N)		HOME_N
		    		FROM	(
				            SELECT  T2.YYYYMMDD,
				                    NVL(ROUND(MAX(HOME),0),0)       HOME,
				                    0                               HOME_N                    
				            FROM    (
				                    SELECT  T1.YYYYMMDD,
				                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       HOME                            
				                    FROM    DWCMF200 T1,
				                            (
				                            SELECT  CODE, CODE_NAME1
				                            FROM    SDSTT500
				                            WHERE   CODE_GUBN = 'ST115'
				                            AND     CODE ='21'
				                            )T2,
				                            SDSTT101         T3,
				                            ITEM_MST         T4        
				                    #if ( "$!{gubn}" == "1" )      
				                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     T3.HEAD_CUST_CODE    IN ('1006621','1005681')
				                    AND     T1.PROD_CODE         = '$!{item_id}'
				                    AND     T1.PROD_CODE           = T4.ITEM_ID
				                    AND		T3.CUST_NAME NOT LIKE '%익스프레스%'
				                    AND		T3.CUST_NAME NOT LIKE '%K슈퍼%'
				                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                    GROUP
				                    BY      T1.YYYYMMDD,
				                            T1.SALE_GRUP_CODE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP
				            BY      T2.YYYYMMDD
				            UNION ALL
				            SELECT  T2.YYYYMMDD,
				                    0,                    
				                    NVL(ROUND(MAX(HOME),0),0)  HOME                    
				            FROM    (
				                    SELECT  A.CNFM_DATE,
				                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    HOME
				                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                    WHERE   A.SLIP_NO              = B.SLIP_NO
				                    #if ( "$!{gubn}" == "1" )
				                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     B.PROD_CODE            = '$!{item_id}'
				                    AND     A.SOLD_PART            = C.CUST_CODE
				                    AND     A.SLIP_GUBN_CODE       = D.CODE
				                    AND     D.CODE_GUBN            = 'OR103'
				                    AND     C.GRUP_CODE            = '21'    
				                    AND     C.HEAD_CUST_CODE       IN ('1006621','1005681')
				                    AND		C.CUST_NAME NOT LIKE '%익스프레스%'
				                    AND		C.CUST_NAME NOT LIKE '%K슈퍼%'
				                    AND     B.UPDT_GUBN	NOT IN ('00')                     
				                    GROUP 
				                    BY      A.CNFM_DATE                  
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP 
				            BY      T2.YYYYMMDD 
				            )
				    GROUP
				    BY		YYYYMMDD           
		            )S1,
		            (
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)-1,'YYYYMMDD') CNFM_DATE,                   
		                    HOME_STOCK + HOME_T - HOME_N_T       HOME_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.HOME_STOCK),0)    HOME_STOCK,        
		                            ROUND(MAX(S1.HOME),0)          HOME,
		                            ROUND(MAX(S1.HOME_N),0)        HOME_N,                          
		                            SUM(ROUND(MAX(S1.HOME),0))     OVER(ORDER BY S1.YYYYMMDD DESC )  HOME_T,
		                            SUM(ROUND(MAX(S1.HOME_N),0))   OVER(ORDER BY S1.YYYYMMDD DESC )  HOME_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(HOME)		HOME,
		                    				SUM(HOME_N)		HOME_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME,                                
				                                    0               HOME_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       HOME                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '21'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    IN ('1006621','1005681')
				                                    AND     T1.PROD_CODE         = '$!{item_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND		T3.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		T3.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  TO_CHAR(TO_DATE(T2.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    HOME
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{item_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '21'    
				                                    AND     C.HEAD_CUST_CODE    IN ('1006621','1005681')  
				                                    AND		C.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		C.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'              
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(HOME_STOCK,0)    HOME_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		HOME_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD &lt;= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		            )S2,
		            ( 
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)+1,'YYYYMMDD') CNFM_DATE,                   
		                    HOME_STOCK - HOME_T + HOME_N_T       HOME_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.HOME_STOCK),0)    HOME_STOCK,        
		                            ROUND(MAX(S1.HOME),0)          HOME,
		                            ROUND(MAX(S1.HOME_N),0)        HOME_N,                          
		                            SUM(ROUND(MAX(S1.HOME),0))     OVER(ORDER BY S1.YYYYMMDD )  HOME_T,
		                            SUM(ROUND(MAX(S1.HOME_N),0))   OVER(ORDER BY S1.YYYYMMDD )  HOME_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(HOME)		HOME,
		                    				SUM(HOME_N)		HOME_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME,                                
				                                    0               HOME_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD),'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       HOME                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '21'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    IN ('1006621','1005681')
				                                    AND     T1.PROD_CODE         = '$!{item_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    AND		T3.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		T3.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'  
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  T2.YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    HOME
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{item_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '21'    
				                                    AND     C.HEAD_CUST_CODE    IN ('1006621','1005681')  
				                                    AND		C.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		C.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                  
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(HOME_STOCK,0)    HOME_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND		HOME_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD >= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		                    UNION ALL
		                    SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(HOME_STOCK,0)    HOME_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{item_id}'
		                                            AND     HOME_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{item_id}'
		                    )S3
		    WHERE   S1.YYYYMMDD = S2.CNFM_DATE(+)   
		    AND     S1.YYYYMMDD = S3.CNFM_DATE(+)
		    AND		S1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'        
		    GROUP 
		    BY      S1.YYYYMMDD,            
		            S2.HOME_STOCK,            
		            S3.HOME_STOCK          
		    UNION ALL
		    SELECT  S1.YYYYMMDD,       
		            0  	EMART_STOCK,        
		            0   EMART_POS,
		            0   EMART_NS,   
		            NVL(S3.HOME_STOCK,NVL(S2.HOME_STOCK,0)) HOME_STOCK,        
		            ROUND(SUM(S1.HOME),0)              		HOME_POS,
		            ROUND(SUM(S1.HOME_N),0)            		HOME_NS,   
		            0   LOTTE_STOCK,
		            0   LOTTE_POS,
		            0   LOTTE_NS            
		    FROM    (
		    		SELECT	YYYYMMDD,
		    				SUM(HOME)		HOME,
		    				SUM(HOME_N)		HOME_N
		    		FROM	(
				            SELECT  T2.YYYYMMDD,
				                    NVL(ROUND(MAX(HOME),0),0)       HOME,
				                    0                               HOME_N                    
				            FROM    (
				                    SELECT  T1.YYYYMMDD,
				                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       HOME                            
				                    FROM    DWCMF200 T1,
				                            (
				                            SELECT  CODE, CODE_NAME1
				                            FROM    SDSTT500
				                            WHERE   CODE_GUBN = 'ST115'
				                            AND     CODE ='21'
				                            )T2,
				                            SDSTT101         T3,
				                            ITEM_MST         T4        
				                    #if ( "$!{gubn}" == "1" )      
				                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     T3.HEAD_CUST_CODE    IN ('1006621','1005681')
				                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                    AND     T1.PROD_CODE           = T4.ITEM_ID
				                    AND		T3.CUST_NAME NOT LIKE '%익스프레스%'
				                    AND		T3.CUST_NAME NOT LIKE '%K슈퍼%'
				                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                    GROUP
				                    BY      T1.YYYYMMDD,
				                            T1.SALE_GRUP_CODE
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP
				            BY      T2.YYYYMMDD
				            UNION ALL
				            SELECT  T2.YYYYMMDD,
				                    0,                    
				                    NVL(ROUND(MAX(HOME),0),0)  HOME                    
				            FROM    (
				                    SELECT  A.CNFM_DATE,
				                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    HOME
				                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                    WHERE   A.SLIP_NO              = B.SLIP_NO
				                    #if ( "$!{gubn}" == "1" )
				                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				                    #else
				                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
				                    #end
				                    AND     B.PROD_CODE            = '$!{pos_id}'
				                    AND     A.SOLD_PART            = C.CUST_CODE
				                    AND     A.SLIP_GUBN_CODE       = D.CODE
				                    AND     D.CODE_GUBN            = 'OR103'
				                    AND     C.GRUP_CODE            = '21'    
				                    AND     C.HEAD_CUST_CODE       IN ('1006621','1005681')
				                    AND		C.CUST_NAME NOT LIKE '%익스프레스%'
				                    AND		C.CUST_NAME NOT LIKE '%K슈퍼%'
				                    AND     B.UPDT_GUBN	NOT IN ('00')                     
				                    GROUP 
				                    BY      A.CNFM_DATE                  
				                    )T1, CAL_MST T2
				            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				            GROUP 
				            BY      T2.YYYYMMDD 
				            )
				    GROUP
				    BY		YYYYMMDD           
		            )S1,
		            (
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)-1,'YYYYMMDD') CNFM_DATE,                   
		                    HOME_STOCK + HOME_T - HOME_N_T       HOME_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.HOME_STOCK),0)    HOME_STOCK,        
		                            ROUND(MAX(S1.HOME),0)          HOME,
		                            ROUND(MAX(S1.HOME_N),0)        HOME_N,                          
		                            SUM(ROUND(MAX(S1.HOME),0))     OVER(ORDER BY S1.YYYYMMDD DESC )  HOME_T,
		                            SUM(ROUND(MAX(S1.HOME_N),0))   OVER(ORDER BY S1.YYYYMMDD DESC )  HOME_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(HOME)		HOME,
		                    				SUM(HOME_N)		HOME_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME,                                
				                                    0               HOME_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       HOME                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '21'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    IN ('1006621','1005681')
				                                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND		T3.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		T3.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}' 
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  TO_CHAR(TO_DATE(T2.YYYYMMDD)+1,'YYYYMMDD') YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    HOME
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{pos_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '21'    
				                                    AND     C.HEAD_CUST_CODE    IN ('1006621','1005681')  
				                                    AND		C.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		C.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'              
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(HOME_STOCK,0)    HOME_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		HOME_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD &lt;= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		            )S2,
		            ( 
		            SELECT  TO_CHAR(TO_DATE(YYYYMMDD)+1,'YYYYMMDD') CNFM_DATE,                   
		                    HOME_STOCK - HOME_T + HOME_N_T       HOME_STOCK
		            FROM    (
		                    SELECT  S1.YYYYMMDD,  
		                            ROUND(MAX(S2.HOME_STOCK),0)    HOME_STOCK,        
		                            ROUND(MAX(S1.HOME),0)          HOME,
		                            ROUND(MAX(S1.HOME_N),0)        HOME_N,                          
		                            SUM(ROUND(MAX(S1.HOME),0))     OVER(ORDER BY S1.YYYYMMDD )  HOME_T,
		                            SUM(ROUND(MAX(S1.HOME_N),0))   OVER(ORDER BY S1.YYYYMMDD )  HOME_N_T                           
		                    FROM    (
		                    		SELECT	YYYYMMDD,
		                    				SUM(HOME)		HOME,
		                    				SUM(HOME_N)		HOME_N
		                    		FROM	(
				                            SELECT  T2.YYYYMMDD,
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME,                                
				                                    0               HOME_N
				                            FROM    (
				                                    SELECT  TO_CHAR(TO_DATE(T1.YYYYMMDD),'YYYYMMDD') YYYYMMDD,                                             
				                                            NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0)       HOME                                            
				                                    FROM    DWCMF200 T1,
				                                            (
				                                            SELECT  CODE, CODE_NAME1
				                                            FROM    SDSTT500
				                                            WHERE   CODE_GUBN = 'ST115'
				                                            AND     CODE = '21'
				                                            )T2,
				                                            SDSTT101         T3,
				                                            ITEM_MST         T4        
				                                    #if ( "$!{gubn}" == "1" )      
								                    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    WHERE   T1.YYYYMMDD BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     T3.HEAD_CUST_CODE    IN ('1006621','1005681')
				                                    AND     T1.PROD_CODE         = '$!{pos_id}'
				                                    AND     T1.PROD_CODE         = T4.ITEM_ID
				                                    AND     T1.SALE_GRUP_CODE    = T2.CODE
				                                    AND     T1.CUST_CODE         = T3.CUST_CODE
				                                    AND		T3.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		T3.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    GROUP
				                                    BY      T1.YYYYMMDD,
				                                            T1.SALE_GRUP_CODE
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.YYYYMMDD (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'  
				                            GROUP
				                            BY  	T2.YYYYMMDD
				                            UNION ALL
				                            SELECT  T2.YYYYMMDD,
				                                    0,                                    
				                                    NVL(ROUND(MAX(HOME),0),0)      HOME                                    
				                            FROM    (                                   
				                                    SELECT  A.CNFM_DATE,
				                                            SUM(DECODE(A.SLIP_GUBN_CODE,'YSSE',-1,'YOFS',0,'YOFD',0,'YOFT',0,1)  * DECODE(B.UPDT_GUBN,'10',B.SELL_BOX,B.ODER_BOX))    HOME
				                                    FROM    SDORT101 A, SDORT102 B, SDSTT101 C, SDSTT500 D
				                                    WHERE   A.SLIP_NO           = B.SLIP_NO
				                                    #if ( "$!{gubn}" == "1" )
								                    AND     A.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
								                    #else
								                    AND     A.CNFM_DATE BETWEEN '20160617' AND '$!{end_date}'
								                    #end
				                                    AND     B.PROD_CODE         = '$!{pos_id}'
				                                    AND     A.SOLD_PART         = C.CUST_CODE
				                                    AND     A.SLIP_GUBN_CODE    = D.CODE
				                                    AND     D.CODE_GUBN         = 'OR103'
				                                    AND     C.GRUP_CODE         = '21'    
				                                    AND     C.HEAD_CUST_CODE    IN ('1006621','1005681')  
				                                    AND		C.CUST_NAME NOT LIKE '%익스프레스%'
				                                    AND		C.CUST_NAME NOT LIKE '%K슈퍼%'
				                                    AND     B.UPDT_GUBN	NOT IN ('00')    
				                                    GROUP 
				                                    BY      A.CNFM_DATE                                                                           
				                                    )T1, CAL_MST T2
				                            WHERE	T2.YYYYMMDD = T1.CNFM_DATE (+)   
				            				AND     T2.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'                  
				                            GROUP 
				                            BY      T2.YYYYMMDD
				                            )
				                    GROUP
				                    BY		YYYYMMDD
		                            )S1,
		                            (
		                            SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(HOME_STOCK,0)    HOME_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND		HOME_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                            )S2
		                    WHERE   S1.YYYYMMDD >= S2.YYYYMMDD         
		                    GROUP 
		                    BY      S1.YYYYMMDD
		                    )
		                    UNION ALL
		                    SELECT  VERSION YYYYMMDD,                                                   
		                                    ROUND(HOME_STOCK,0)    HOME_STOCK
		                            FROM    POS_TEMP_STOCK
		                            WHERE   VERSION = 
		                                            (
		                                            SELECT  MAX(VERSION)
		                                            FROM    POS_TEMP_sTOCK
		                                            WHERE   ITEM_ID = '$!{pos_id}'
		                                            AND     HOME_STOCK IS NOT NULL
		                                            )
		                            AND     ITEM_ID = '$!{pos_id}'
		                    )S3
		    WHERE   S1.YYYYMMDD = S2.CNFM_DATE(+)   
		    AND     S1.YYYYMMDD = S3.CNFM_DATE(+)
		    AND		S1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'        
		    GROUP 
		    BY      S1.YYYYMMDD,            
		            S2.HOME_STOCK,            
		            S3.HOME_STOCK    
            )T1,
            CAL_MST T2
    WHERE	T1.YYYYMMDD = T2.YYYYMMDD       
    GROUP 
    BY  	T1.YYYYMMDD,
    		T2.WEEK_DAY
    ORDER 
    BY 		1
	</query>
	
	<query id="ip_03050_Pos_Doublelist" paging="true">
	SELECT  YYYYMMDD,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',HOMEPLUS,0)),0)  		HOMEPLUS_I,    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',HOMEPLUS,0)),0)  		HOMEPLUS_II,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',HOMEPLUS,0)),0) 	-    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',HOMEPLUS,0)),0)  		HOMEPLUS_GAP, 
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',LOTTE,0)),0)     		LOTTE_I,    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',LOTTE,0)),0)     		LOTTE_II,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',LOTTE,0)),0) 		-    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',LOTTE,0)),0)     		LOTTE_GAP, 
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',EMART,0)),0)     		EMART_I,    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',EMART,0)),0)     		EMART_I,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',EMART,0)),0) 		-    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',EMART,0)),0)     		EMART_GAP,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',HOMEPLUS,0)),0) 	+ 
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',LOTTE,0)),0) 		+
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',EMART,0)),0)     		TOT_ITEM_I,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',HOMEPLUS,0)),0) 	+ 
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',LOTTE,0)),0) 		+
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',EMART,0)),0)     		TOT_ITEM_II,
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',HOMEPLUS,0)),0) 	-    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',HOMEPLUS,0)),0) 	+
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',LOTTE,0)),0) 		-    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',LOTTE,0)),0) 		+
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id}',EMART,0)),0) 		-    
            ROUND(MAX(DECODE(PROD_CODE,'$!{item_id2}',EMART,0)),0)			TOT_GAP
    FROM	(
            SELECT  T1.YYYYMMDD,
                    T1.PROD_CODE,
                    DECODE(SALE_GRUP_CODE,'21',NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0),0)		HOMEPLUS,
		            DECODE(SALE_GRUP_CODE,'23',NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0),0)   	LOTTE,
		            DECODE(SALE_GRUP_CODE,'32',NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0),0)   	EMART
		    FROM    DWCMF200 T1,
		            (
		            SELECT  CODE, CODE_NAME1
		            FROM    SDSTT500
		            WHERE   CODE_GUBN = 'ST115'
		            AND     CODE IN ('21','23','32')
		            )T2,
		            SDSTT101 T3,
		            ITEM_MST	 T4        
		    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
            AND     T1.PROD_CODE        = '$!{item_id}'
            AND     T1.PROD_CODE     	= T4.ITEM_ID
            AND		T3.HEAD_CUST_CODE IN ('1006621','1005674','1020073','1005681')
            AND     T1.SALE_GRUP_CODE   = T2.CODE
            AND     T1.CUST_CODE        = T3.CUST_CODE            
            GROUP
            BY      T1.YYYYMMDD,
                    T1.SALE_GRUP_CODE ,
                    T1.PROD_CODE  
            UNION ALL
            SELECT  T1.YYYYMMDD,
                    T1.PROD_CODE,
		            DECODE(SALE_GRUP_CODE,'21',NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0),0)   HOMEPLUS,
		            DECODE(SALE_GRUP_CODE,'23',NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0),0)   LOTTE,
		            DECODE(SALE_GRUP_CODE,'32',NVL(SUM(CMEDI_PICE/f_get_Pos_Spec(T4.ITEM_ID)),0),0)   EMART
		    FROM    DWCMF200 T1,
		            (
		            SELECT  CODE, CODE_NAME1
		            FROM    SDSTT500
		            WHERE   CODE_GUBN = 'ST115'
		            AND     CODE IN ('21','23','32')
		            )T2,
		            SDSTT101 T3,
		            ITEM_MST	 T4        
		    WHERE   T1.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
            AND     T1.PROD_CODE        = '$!{item_id2}'
            AND		T3.HEAD_CUST_CODE IN ('1006621','1005674','1020073','1005681')
            AND     T1.PROD_CODE        = T4.ITEM_ID
            AND     T1.SALE_GRUP_CODE   = T2.CODE
            AND     T1.CUST_CODE        = T3.CUST_CODE
            GROUP
            BY      T1.YYYYMMDD,
                    T1.SALE_GRUP_CODE ,
                    T1.PROD_CODE  
            )
    GROUP 
    BY 		YYYYMMDD
    ORDER 
    BY 		1
	</query>
	
	<query id="ip_03060_Ex_Order" paging="true">
	SELECT  F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)      SALES_CAT05,
			F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)      SALES_CAT03,
			IM.SALES_CAT03,
			IM.ITEM_ID,
	        IM.ITEM_NAME,
	        TO_CHAR(SYSDATE,'YYYY')-1 ||'년'		GUBN,
	        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST LEAD_TIME,
	        ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0) MON_P01,
            ROUND(PR.MON_P02 + NVL(BOM.MON_P02,0),0) MON_P02,
            ROUND(PR.MON_P03 + NVL(BOM.MON_P03,0),0) MON_P03,
            ROUND(PR.MON_P04 + NVL(BOM.MON_P04,0),0) MON_P04,
	        ROUND(( ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0) + 
	        		ROUND(PR.MON_P02 + NVL(BOM.MON_P02,0),0) + 
	        		ROUND(PR.MON_P03 + NVL(BOM.MON_P03,0),0) + 
	        		ROUND(PR.MON_P04 + NVL(BOM.MON_P04,0),0))/4,0)  PM_AVG,
	        ROUND(PR.MON_P12 + NVL(BOM.MON_P12,0),0) MON_P12,
            ''   MON_P00,
            ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0) MON_P11,
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0) MON_P10,
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0) MON_P09,
            ROUND(PR.MON_P08 + NVL(BOM.MON_P08,0),0) MON_P08,
	        ''   SAFE_STOCK,
	        ''   TOTAL_NEED,
	        ''   AVL_MONTH,
	        ''   EVENT_QTY,
	        ''   BASE_STOCK,
	        ''    RECEIPT_EXPT,        
	        ''    RECEIPT_EXPT2,
	        ''    RECEIPT_EXPT3,
	        ''    RECEIPT_EXPT4,
	        ''    RECEIPT_EXPT5,
	        ''   	TOT_QTY,
	        ''   	NEED_QTY,
	        NVL(MP.QTY,0)   ORDER_QTY	        
	FROM    ITEM_MST    IM,
			(
			SELECT	ITEM_ID,
					QTY
			FROM	MONTH_PR_DATA
			WHERE	VERSION 		= SUBSTR('$!{cnfm_date}',0,6)
			)MP,
	        (
	        SELECT  DISTINCT
	                VERSION, 
	                ITEM_ID,
	                NVL(MON_P01,0)  MON_P01,
	                NVL(MON_P02,0)  MON_P02,
	                NVL(MON_P03,0)  MON_P03,
	                NVL(MON_P04,0)  MON_P04,
	                NVL(MON_P08,0)  MON_P08,
	                NVL(MON_P09,0)  MON_P09,
	                NVL(MON_P10,0)  MON_P10,
	                NVL(MON_P11,0)  MON_P11,
	                NVL(MON_P12,0)  MON_P12
	        FROM    APS_PR_DW
	        WHERE   VERSION = TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),-12),'YYYYMMDD')        
	        AND     SEL_GUBN = '1'
	        )PR,
	        (                
            SELECT  CONS_ITEM_ID ITEM_ID,
                    SUM(M_01)    MON_P01, 
                    SUM(M_02)    MON_P02,
                    SUM(M_03)    MON_P03,
                    SUM(M_04)    MON_P04, 
                    SUM(M_08)    MON_P08, 
                    SUM(M_09)    MON_P09, 
                    SUM(M_10)    MON_P10,
                    SUM(M_11)    MON_P11,
                    SUM(M_12)    MON_P12                   
            FROM    (
                    SELECT  ITEM_ID,
                            CONS_ITEM_ID,
                            DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),               SALES_QTY,0) M_01,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) M_02,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) M_03,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) M_04,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMM'),SALES_QTY,0) M_08,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMM'),SALES_QTY,0) M_09,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMM'),SALES_QTY,0) M_10,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMM'),SALES_QTY,0) M_11,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMM'),SALES_QTY,0) M_12                                
                    FROM    (
                            SELECT  SUBSTR(DC.CNFM_DATE,0,6)    YYYYMM,
                                    DC.ITEM_ID,
                                    BOM.CONS_ITEM_ID,
                                    SUM(DC.PRE_MONTH_SELL) * BOM.QTY    SALES_QTY
                            FROM    DC_DATAWAREHOUSE DC, 
                                    (
                                    SELECT  MB.CONS_ITEM_ID,
                                            MB.PROD_ITEM_ID,
                                            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
                                            MAX(MB.PROD_VER) PROD_VER
                                    FROM    MBOM MB, ITEM_MST IM
                                    WHERE   MB.CONS_ITEM_ID = IM.ITEM_ID
                                    AND     IM.ST_FLAG ='Y'
                                    AND     IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                                    AND     IM.SALES_CAT03 LIKE '%'||'$!{search_type}'||'%'                                 
                                    AND     IM.ITYPE        =    'HAWA'
                                    GROUP
                                    BY      MB.CONS_ITEM_ID,
                                            MB.PROD_ITEM_ID,
                                            MB.CONS_QTY,
                                            MB.CONS_QTY_UOM,
                                            IM.QTY
                                    )BOM
                            WHERE   DC.ITEM_ID    = BOM.PROD_ITEM_ID
                            AND     DC.CNFM_DATE IN (
                                                    '$!{cnfm_date}',
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMMDD'),                                                    
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMMDD')
                                                    )                                                                
                            GROUP 
                            BY      DC.CNFM_DATE,
                                    DC.ITEM_ID,
                                    BOM.CONS_ITEM_ID,
                                    BOM.QTY
                            ) 
                    )
            GROUP
            BY        CONS_ITEM_ID    
            )BOM  	        
	WHERE   IM.ITEM_ID  	= PR.ITEM_ID(+)
	AND     IM.ITEM_ID 		= BOM.ITEM_ID(+)
	AND		IM.ITEM_ID		= MP.ITEM_ID(+)	
	AND     IM.ITYPE    	= 'HAWA'	
	AND     IM.ST_FLAG  	= 'Y'
	AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
	AND     IM.SALES_CAT05	LIKE '%'||'$!{sales_cat05}'||'%'		   
	UNION ALL
	SELECT  F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)      SALES_CAT05,
			F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)      SALES_CAT03,
			IM.SALES_CAT03,
			IM.ITEM_ID,
	        IM.ITEM_NAME,
	        TO_CHAR(SYSDATE,'YYYY') ||'년'		GUBN,
	        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST LEAD_TIME,
	        ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0) MON_P01,
            ROUND(PR.MON_P02 + NVL(BOM.MON_P02,0),0) MON_P02,
            ROUND(PR.MON_P03 + NVL(BOM.MON_P03,0),0) MON_P03,
            ROUND(PR.MON_P04 + NVL(BOM.MON_P04,0),0) MON_P04,
	        ROUND(( ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0) + 
	        		ROUND(PR.MON_P02 + NVL(BOM.MON_P02,0),0) + 
	        		ROUND(PR.MON_P03 + NVL(BOM.MON_P03,0),0) + 
	        		ROUND(PR.MON_P04 + NVL(BOM.MON_P04,0),0))/4,0)  PM_AVG,
	        NVL(SUM(DC.SALES_PRE_CUM),0) + NVL(SUM(DC.SALES_PRE_CUM_TA),0) + 
	        NVL(DM.SALES_PRE_CUM,0) + NVL(DM.SALES_PRE_CUM_TA,0),
	        '0'   MON_P00,
	        ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0) MON_P11,
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0) MON_P10,
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0) MON_P09,
            ROUND(PR.MON_P08 + NVL(BOM.MON_P08,0),0) MON_P08,
	        TO_CHAR(NVL(IM.SAFETY_STOCK,0))   SAFE_STOCK,
	        '0'   TOTAL_NEED,
	        '0'   AVL_MONTH,
	        '0'   EVENT_QTY,
	        TO_CHAR(SUM(DC.BASE_STOCK) + NVL(DM.BASE_STOCK,0))   BASE_STOCK,
	        TO_CHAR(DC2.RECEIPT_M)    RECEIPT_EXPT,        
	        TO_CHAR(DC2.RECEIPT_M1)   RECEIPT_EXPT2,
	        TO_CHAR(DC2.RECEIPT_M2)   RECEIPT_EXPT3,
	        TO_CHAR(DC2.RECEIPT_M3)   RECEIPT_EXPT4,
	        TO_CHAR(DC2.RECEIPT_M4)   RECEIPT_EXPT5,
	        '0'   	TOT_QTY,
	        '0'   	NEED_QTY,
	        NVL(MP.QTY,0)   ORDER_QTY  			        
	FROM    ITEM_MST    IM,		
			(
			SELECT	ITEM_ID,
					QTY
			FROM	MONTH_PR_DATA
			WHERE	VERSION 		= SUBSTR('$!{cnfm_date}',0,6)
			)MP,	
	        (
	        SELECT  DISTINCT
	                VERSION, 
	                ITEM_ID,
	                NVL(MON_P01,0)  MON_P01,
	                NVL(MON_P02,0)  MON_P02,
	                NVL(MON_P03,0)  MON_P03,
	                NVL(MON_P04,0)  MON_P04,
	                NVL(MON_P08,0)  MON_P08,
	                NVL(MON_P09,0)  MON_P09,
	                NVL(MON_P10,0)  MON_P10,
	                NVL(MON_P11,0)  MON_P11,
	                NVL(MON_P12,0)  MON_P12
	        FROM    APS_PR_DW
	        WHERE   VERSION = '$!{cnfm_date}'        
	        AND     SEL_GUBN = '1'
	        )PR,
	        (                
            SELECT  CONS_ITEM_ID ITEM_ID,
                    SUM(M_01)    MON_P01, 
                    SUM(M_02)    MON_P02,
                    SUM(M_03)    MON_P03,
                    SUM(M_04)    MON_P04, 
                    SUM(M_08)    MON_P08, 
                    SUM(M_09)    MON_P09, 
                    SUM(M_10)    MON_P10,
                    SUM(M_11)    MON_P11,
                    SUM(M_12)    MON_P12                   
            FROM    (
                    SELECT  ITEM_ID,
                            CONS_ITEM_ID,
                            DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),               SALES_QTY,0) M_01,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) M_02,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) M_03,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) M_04,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMM'),SALES_QTY,0) M_08,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMM'),SALES_QTY,0) M_09,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMM'),SALES_QTY,0) M_10,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMM'),SALES_QTY,0) M_11,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMM'),SALES_QTY,0) M_12                                
                    FROM    (
                            SELECT  SUBSTR(DC.CNFM_DATE,0,6)    YYYYMM,
                                    DC.ITEM_ID,
                                    BOM.CONS_ITEM_ID,
                                    SUM(DC.PRE_MONTH_SELL) * BOM.QTY    SALES_QTY
                            FROM    DC_DATAWAREHOUSE DC, 
                                    (
                                    SELECT  MB.CONS_ITEM_ID,
                                            MB.PROD_ITEM_ID,
                                            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
                                            MAX(MB.PROD_VER) PROD_VER
                                    FROM    MBOM MB, ITEM_MST IM
                                    WHERE   MB.CONS_ITEM_ID = IM.ITEM_ID
                                    AND     IM.ST_FLAG ='Y'
                                    AND     IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                                    AND     IM.SALES_CAT03 LIKE '%'||'$!{search_type}'||'%'                                  
                                    AND     IM.ITYPE        =    'HAWA'
                                    GROUP
                                    BY      MB.CONS_ITEM_ID,
                                            MB.PROD_ITEM_ID,
                                            MB.CONS_QTY,
                                            MB.CONS_QTY_UOM,
                                            IM.QTY
                                    )BOM
                            WHERE   DC.ITEM_ID    = BOM.PROD_ITEM_ID
                            AND     DC.CNFM_DATE IN (
                                                    '$!{cnfm_date}',
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),   
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMMDD'),                                                 
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMMDD')
                                                    )                                                                
                            GROUP 
                            BY      DC.CNFM_DATE,
                                    DC.ITEM_ID,
                                    BOM.CONS_ITEM_ID,
                                    BOM.QTY
                            ) 
                    )
            GROUP
            BY        CONS_ITEM_ID    
            )BOM,
	        (
	        SELECT	ITEM_ID,
	        		MAX(RECEIPT_M)  RECEIPT_M,
                    MAX(RECEIPT_M1) RECEIPT_M1,
                    MAX(RECEIPT_M2) RECEIPT_M2,
                    MAX(RECEIPT_M3) RECEIPT_M3,
                    MAX(RECEIPT_M4) RECEIPT_M4
            FROM	(	
			        SELECT	DC.ITEM_ID,
			        		CASE WHEN  DC.CNFM_DATE BETWEEN  TO_CHAR(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'YYYYMMDD') AND TO_CHAR(LAST_DAY(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')),'YYYYMMDD')
		                         THEN  SUM(DC.RECEIPT_EXPT)
		                         ELSE 0
		                    END   RECEIPT_M, 
		                    CASE WHEN  DC.CNFM_DATE BETWEEN  TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),1),'MM')
		                                            AND      LAST_DAY(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),1))
		                         THEN  SUM(DC.RECEIPT_EXPT)
		                         ELSE 0
		                    END   RECEIPT_M1,    
		                    CASE WHEN  DC.CNFM_DATE BETWEEN  TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),2),'MM')
		                                            AND      LAST_DAY(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),2))
		                         THEN  SUM(DC.RECEIPT_EXPT)
		                         ELSE 0
		                    END   RECEIPT_M2, 
		                    CASE WHEN  DC.CNFM_DATE BETWEEN  TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),3),'MM')
		                                            AND      LAST_DAY(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),3))
		                         THEN  SUM(DC.RECEIPT_EXPT)
		                         ELSE 0
		                    END   RECEIPT_M3,
		                    CASE WHEN  DC.CNFM_DATE BETWEEN  TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),4),'MM')
		                                            AND      LAST_DAY(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),4))
		                         THEN  SUM(DC.RECEIPT_EXPT)
		                         ELSE 0
		                    END   RECEIPT_M4  
			        FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM
			        WHERE 	DC.CNFM_DATE BETWEEN '$!{cnfm_date}' AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),4)),'YYYYMMDD')
			        AND		DC.ITEM_ID	= IM.ITEM_ID
			        AND 	IM.ST_FLAG 	= 'Y'
			        AND 	DC.CNFM_DATE >= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
			        GROUP
			        BY		DC.ITEM_ID,
			        		DC.CNFM_DATE
			        )
	        GROUP
	        BY		ITEM_ID
	        )DC2,
	        (
	        SELECT	BOM.CONS_ITEM_ID	ITEM_ID,
	        		ROUND(SUM(DC.SALES_PRE_CUM * BOM.QTY),0)		SALES_PRE_CUM,
	        		ROUND(SUM(DC.SALES_PRE_CUM_TA * BOM.QTY),0)		SALES_PRE_CUM_TA,
	        		ROUND(SUM(BASE_STOCK * BOM.QTY),0)				BASE_STOCK
	        FROM	DC_DATAWAREHOUSE DC,
	        		(
                    SELECT  MB.CONS_ITEM_ID,
                            MB.PROD_ITEM_ID,
                            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
                            MAX(MB.PROD_VER) PROD_VER
                    FROM    MBOM MB, ITEM_MST IM
                    WHERE   MB.CONS_ITEM_ID = IM.ITEM_ID
                    AND     IM.ST_FLAG ='Y'
                    AND     IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                    AND     IM.SALES_CAT03 LIKE '%'||'$!{search_type}'||'%'                   
                    AND     IM.ITYPE        =    'HAWA'
                    GROUP
                    BY      MB.CONS_ITEM_ID,
                            MB.PROD_ITEM_ID,
                            MB.CONS_QTY,
                            MB.CONS_QTY_UOM,
                            IM.QTY
                    )BOM
	        WHERE	DC.CNFM_DATE  = '$!{cnfm_date}'
	        AND		DC.ITEM_ID    = BOM.PROD_ITEM_ID
	        AND		DC.DC_ID	  !='8922'
	        GROUP
	        BY		BOM.CONS_ITEM_ID
	        )DM,
	        DC_DATAWAREHOUSE DC
	WHERE   IM.ITEM_ID  	= PR.ITEM_ID(+)
	AND		IM.ITEM_ID		= BOM.ITEM_ID(+)	
	AND		IM.ITEM_ID		= DM.ITEM_ID(+)
	AND		IM.ITEM_ID		= MP.ITEM_ID(+)	
	AND     IM.ITYPE    	= 'HAWA'
	AND     IM.ST_FLAG  	= 'Y'
	AND		IM.ITEM_ID		= DC.ITEM_ID(+)	
	AND		IM.ITEM_ID		= DC2.ITEM_ID(+)
	AND		DC.DC_ID		!='8922'
	AND     DC.CNFM_DATE    = '$!{cnfm_date}'	
	AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
	AND     IM.SALES_CAT05	LIKE '%'||'$!{sales_cat05}'||'%' 
	GROUP
    BY      IM.ITEM_ID,
	        IM.ITEM_NAME,	       
	        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST,
	        PR.MON_P01,
	        PR.MON_P02,
	        PR.MON_P03,
	        PR.MON_P04,
	        PR.MON_P11,
	        PR.MON_P10,
	        PR.MON_P09,
	        PR.MON_P08,
            IM.SALES_CAT03,
            DC2.RECEIPT_M,
            DC2.RECEIPT_M1,
            DC2.RECEIPT_M2,
            DC2.RECEIPT_M3,
            DC2.RECEIPT_M4,
            IM.SAFETY_STOCK,
            BOM.MON_P01,
            BOM.MON_P02,
            BOM.MON_P03,
            BOM.MON_P04,
            BOM.MON_P08,
            BOM.MON_P09,
            BOM.MON_P10,
            BOM.MON_P11,
            DM.SALES_PRE_CUM,
            DM.SALES_PRE_CUM_TA,
            IM.SALES_CAT05,
            DM.BASE_STOCK,
            MP.QTY
	ORDER
	BY		1,2,3,4,6
	</query>
	
	<query id="ip_03070_Ex_Order_Cur" paging="true">	
	SELECT  F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)      					SALES_CAT03,			
			IM.ITEM_ID,
	        IM.ITEM_NAME,	       
	        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST 		LEAD_TIME,
	        ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0) 							MON_P01,         
	        NVL(SUM(DC.SALES_PRE_CUM),0) + NVL(SUM(DC.SALES_PRE_CUM_TA),0) + 
	        NVL(DM.SALES_PRE_CUM,0) + NVL(DM.SALES_PRE_CUM_TA,0)				"M",	        
	        ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0) 							"M+1",
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0) 							"M_2",
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0) 							"M+3", 
            NVL(SUM(DC.SALES_PRE_CUM),0) + NVL(SUM(DC.SALES_PRE_CUM_TA),0) + 
	        NVL(DM.SALES_PRE_CUM,0) + NVL(DM.SALES_PRE_CUM_TA,0) +          
            ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0)  +
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0)  +
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0) 							EXPT_QTY,            
	        TO_CHAR(NVL(IM.SAFETY_STOCK,0))   									SAFE_STOCK,
	        0   																EVENT_QTY,
	        NVL(SUM(DC.SALES_PRE_CUM),0) + NVL(SUM(DC.SALES_PRE_CUM_TA),0) + 
	        NVL(DM.SALES_PRE_CUM,0) + NVL(DM.SALES_PRE_CUM_TA,0) +          
            ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0)  +
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0)  +
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0)  + 
            TO_CHAR(NVL(IM.SAFETY_STOCK,0))										TOTAL_NEED,	        
	        TO_CHAR(NVL(ROUND((
	        NVL(SUM(DC.SALES_PRE_CUM),0) + NVL(SUM(DC.SALES_PRE_CUM_TA),0) + 
	        NVL(DM.SALES_PRE_CUM,0) + NVL(DM.SALES_PRE_CUM_TA,0) +          
            ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0)  +
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0)  +
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0)  + 
            TO_CHAR(NVL(IM.SAFETY_STOCK,0))	
            )/DECODE(ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0),0,NULL,
            ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0)),1),0),'FM9990D99')    	AVL_MONTH,	        
	        NVL(ST.BASE_STOCK,0)    + NVL(DM.MONTH_STOCK,0)   					BASE_STOCK,
	        TO_CHAR(DC2.RECEIPT_M)    											RECEIPT_EXPT, 
	        NVL(ST.BASE_STOCK,0)    + NVL(DM.MONTH_STOCK,0) +
	        TO_CHAR(DC2.RECEIPT_M)     											TOT_QTY,
	        TO_CHAR(NVL(ROUND((
	        NVL(ST.BASE_STOCK,0)    + NVL(DM.MONTH_STOCK,0) +
	        TO_CHAR(DC2.RECEIPT_M) 
            )/DECODE(ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0),0,NULL,
            ROUND(PR.MON_P01 + NVL(BOM.MON_P01,0),0)),1),0),'FM9990D99')		TOT_MONTH,
	        (NVL(ST.BASE_STOCK,0)    + NVL(DM.MONTH_STOCK,0) +
	        TO_CHAR(DC2.RECEIPT_M)) -
	        (NVL(SUM(DC.SALES_PRE_CUM),0) + NVL(SUM(DC.SALES_PRE_CUM_TA),0) + 
	        NVL(DM.SALES_PRE_CUM,0) + NVL(DM.SALES_PRE_CUM_TA,0) +          
            ROUND(PR.MON_P11 + NVL(BOM.MON_P11,0),0)  +
            ROUND(PR.MON_P10 + NVL(BOM.MON_P10,0),0)  +
            ROUND(PR.MON_P09 + NVL(BOM.MON_P09,0),0)  + 
            TO_CHAR(NVL(IM.SAFETY_STOCK,0)))   									NEED_QTY,
	        NVL(MP.QTY,0)  														ORDER_QTY	        
	FROM    ITEM_MST    IM,		
			(
			SELECT	ITEM_ID,
					QTY
			FROM	MONTH_PR_DATA
			WHERE	VERSION 		= SUBSTR('$!{cnfm_date}',0,6)
			)MP,	
	        (
	        SELECT  DISTINCT
	                VERSION, 
	                ITEM_ID,
	                NVL(MON_P01,0)  MON_P01,
	                NVL(MON_P02,0)  MON_P02,
	                NVL(MON_P03,0)  MON_P03,
	                NVL(MON_P04,0)  MON_P04,
	                NVL(MON_P08,0)  MON_P08,
	                NVL(MON_P09,0)  MON_P09,
	                NVL(MON_P10,0)  MON_P10,
	                NVL(MON_P11,0)  MON_P11,
	                NVL(MON_P12,0)  MON_P12
	        FROM    APS_PR_DW
	        WHERE   VERSION = '$!{cnfm_date}'        
	        AND     SEL_GUBN = '1'
	        )PR,
	        (                
            SELECT  CONS_ITEM_ID ITEM_ID,
                    SUM(M_01)    MON_P01, 
                    SUM(M_02)    MON_P02,
                    SUM(M_03)    MON_P03,
                    SUM(M_04)    MON_P04, 
                    SUM(M_08)    MON_P08, 
                    SUM(M_09)    MON_P09, 
                    SUM(M_10)    MON_P10,
                    SUM(M_11)    MON_P11,
                    SUM(M_12)    MON_P12                   
            FROM    (
                    SELECT  ITEM_ID,
                            CONS_ITEM_ID,
                            DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),               SALES_QTY,0) M_01,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) M_02,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) M_03,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) M_04,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMM'),SALES_QTY,0) M_08,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMM'),SALES_QTY,0) M_09,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMM'),SALES_QTY,0) M_10,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMM'),SALES_QTY,0) M_11,
                            DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMM'),SALES_QTY,0) M_12                                
                    FROM    (
                            SELECT  SUBSTR(DC.CNFM_DATE,0,6)    YYYYMM,
                                    DC.ITEM_ID,
                                    BOM.CONS_ITEM_ID,
                                    SUM(DC.PRE_MONTH_SELL) * BOM.QTY    SALES_QTY
                            FROM    DC_DATAWAREHOUSE DC, 
                                    (
                                    SELECT  MB.CONS_ITEM_ID,
                                            MB.PROD_ITEM_ID,
                                            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
                                            MAX(MB.PROD_VER) PROD_VER
                                    FROM    MBOM MB, ITEM_MST IM
                                    WHERE   MB.CONS_ITEM_ID = IM.ITEM_ID
                                    AND     IM.ST_FLAG ='Y'
                                    AND     IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                                    AND     IM.SALES_CAT03 LIKE '%'||'$!{search_type}'||'%'                                   
                                    AND     IM.ITYPE        =    'HAWA'
                                    GROUP
                                    BY      MB.CONS_ITEM_ID,
                                            MB.PROD_ITEM_ID,
                                            MB.CONS_QTY,
                                            MB.CONS_QTY_UOM,
                                            IM.QTY
                                    )BOM
                            WHERE   DC.ITEM_ID    = BOM.PROD_ITEM_ID
                            AND     DC.CNFM_DATE IN (
                                                    '$!{cnfm_date}',
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),   
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMMDD'),                                                 
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMMDD'),
                                                    TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMMDD')
                                                    )                                                                
                            GROUP 
                            BY      DC.CNFM_DATE,
                                    DC.ITEM_ID,
                                    BOM.CONS_ITEM_ID,
                                    BOM.QTY
                            ) 
                    )
            GROUP
            BY        CONS_ITEM_ID    
            )BOM,
	        (	       
	        SELECT	DC.ITEM_ID,
	        		SUM(DC.RECEIPT_EXPT)	RECEIPT_M			        		
	        FROM	DC_DATAWAREHOUSE DC, 	ITEM_MST IM,
	        		(
	        		SELECT	YYYYMMDD
	        		FROM	CAL_MST
	        		WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'MM'),'YYYYMMDD')
	        				 AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),4)),'YYYYMMDD')
	        		)CAL
	        WHERE 	DC.CNFM_DATE 	= CAL.YYYYMMDD
	        AND		DC.ITEM_ID		= IM.ITEM_ID
	        AND 	IM.ST_FLAG 		= 'Y'	        
	        GROUP
	        BY		DC.ITEM_ID			
	        )DC2,
			(
			SELECT	ITEM_ID,
					MAX(SALES_PRE_CUM)		SALES_PRE_CUM,
					MAX(SALES_PRE_CUM_TA)	SALES_PRE_CUM_TA,
					MAX(DECODE(GUBN,'1',BASE_STOCK,0))		BASE_STOCK,
					MAX(DECODE(GUBN,'2',BASE_STOCK,0))		MONTH_STOCK
			FROM	(
			        SELECT	BOM.CONS_ITEM_ID	ITEM_ID,
			        		ROUND(SUM(DC.SALES_PRE_CUM * BOM.QTY),0)		SALES_PRE_CUM,
			        		ROUND(SUM(DC.SALES_PRE_CUM_TA * BOM.QTY),0)		SALES_PRE_CUM_TA,
			        		ROUND(SUM(BASE_STOCK * BOM.QTY),0)				BASE_STOCK,
			        		'1'												GUBN
			        FROM	DC_DATAWAREHOUSE DC,
			        		(
		                    SELECT  MB.CONS_ITEM_ID,
		                            MB.PROD_ITEM_ID,
		                            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                            MAX(MB.PROD_VER) PROD_VER
		                    FROM    MBOM MB, ITEM_MST IM
		                    WHERE   MB.CONS_ITEM_ID = IM.ITEM_ID
		                    AND     IM.ST_FLAG ='Y'
		                    AND     IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
		                    AND     IM.SALES_CAT03 LIKE '%'||'$!{search_type}'||'%'		                   
		                    AND     IM.ITYPE        =    'HAWA'
		                    GROUP
		                    BY      MB.CONS_ITEM_ID,
		                            MB.PROD_ITEM_ID,
		                            MB.CONS_QTY,
		                            MB.CONS_QTY_UOM,
		                            IM.QTY
		                    )BOM
			        WHERE	DC.CNFM_DATE  = '$!{cnfm_date}'
			        AND		DC.ITEM_ID    = BOM.PROD_ITEM_ID
			        AND		DC.DC_ID	  !='8922'
			        GROUP
			        BY		BOM.CONS_ITEM_ID
			        UNION ALL
			        SELECT	BOM.CONS_ITEM_ID	ITEM_ID,
			        		0					SALES_PRE_CUM,
			        		0					SALES_PRE_CUM_TA,
			        		ROUND(SUM(BASE_STOCK * BOM.QTY),0)				BASE_STOCK,
			        		'2'					GUBN
			        FROM	DC_DATAWAREHOUSE DC,
			        		(
		                    SELECT  MB.CONS_ITEM_ID,
		                            MB.PROD_ITEM_ID,
		                            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                            MAX(MB.PROD_VER) PROD_VER
		                    FROM    MBOM MB, ITEM_MST IM
		                    WHERE   MB.CONS_ITEM_ID = IM.ITEM_ID
		                    AND     IM.ST_FLAG ='Y'
		                    AND     IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
		                    AND     IM.SALES_CAT03 LIKE '%'||'$!{search_type}'||'%'		               
		                    AND     IM.ITYPE        =    'HAWA'
		                    GROUP
		                    BY      MB.CONS_ITEM_ID,
		                            MB.PROD_ITEM_ID,
		                            MB.CONS_QTY,
		                            MB.CONS_QTY_UOM,
		                            IM.QTY
		                    )BOM
			        WHERE	DC.CNFM_DATE  = TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'MM'),'YYYYMMDD')
			        AND		DC.ITEM_ID    = BOM.PROD_ITEM_ID
			        AND		DC.DC_ID	  !='8922'
			        GROUP
			        BY		BOM.CONS_ITEM_ID
			        )
			GROUP
			BY		ITEM_ID
	        )DM,
	        DC_DATAWAREHOUSE DC,
	        (
	        SELECT	DC.ITEM_ID,
	        		SUM(DC.BASE_STOCK)	BASE_STOCK
	        FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM
	        WHERE	DC.CNFM_DATE = TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'MM'),'YYYYMMDD')
	        AND		DC.ITEM_ID		= IM.ITEM_ID 
	        AND     IM.ST_FLAG 		='Y'
	        AND		IM.ITYPE		='HAWA'
	        AND		DC.DC_ID	  !='8922'
	        GROUP
	        BY		DC.ITEM_ID
	        )ST
	WHERE   IM.ITEM_ID  	= PR.ITEM_ID(+)
	AND		IM.ITEM_ID		= BOM.ITEM_ID(+)	
	AND		IM.ITEM_ID		= DM.ITEM_ID(+)
	AND		IM.ITEM_ID		= MP.ITEM_ID(+)
	AND		IM.ITEM_ID		= ST.ITEM_ID(+)
	AND     IM.ITYPE    	= 'HAWA'
	AND     IM.ST_FLAG  	= 'Y'
	AND		IM.ITEM_ID		= DC.ITEM_ID(+)	
	AND		IM.ITEM_ID		= DC2.ITEM_ID(+)
	AND		DC.DC_ID		!='8922'
	AND     DC.CNFM_DATE    = '$!{cnfm_date}'	
	AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
	AND     IM.SALES_CAT05	LIKE '%'||'$!{sales_cat05}'||'%' 
	GROUP
    BY      IM.ITEM_ID,
	        IM.ITEM_NAME,	       
	        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST,
	        PR.MON_P01,	       
	        PR.MON_P11,
	        PR.MON_P10,
	        PR.MON_P09,	       
            IM.SALES_CAT03,
            IM.SALES_CAT05,
            DC2.RECEIPT_M,        
            IM.SAFETY_STOCK,
            BOM.MON_P01,
            BOM.MON_P09,
            BOM.MON_P10,
            BOM.MON_P11,
            DM.SALES_PRE_CUM,
            DM.SALES_PRE_CUM_TA,          
            DM.BASE_STOCK,
            ST.BASE_STOCK,
            DM.MONTH_STOCK,
            MP.QTY
	ORDER
	BY		F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05),
			F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03),
			IM.SALES_CAT03,
			IM.ITEM_ID
	</query>
	
</queries>
	