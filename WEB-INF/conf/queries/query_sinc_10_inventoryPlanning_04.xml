<?xml version="1.0" encoding="EUC-KR"?>
<queries>	

	<!-- 
	=======================
	  GYR 분석관리
	=======================
	-->

	<!-- GYR마스터 정합성 관리  --> 
	<query id="ip_04010_GYR_master_list_DW1" paging="false"> 

		/* 제품유효기간 빠진것 -> ERP에 등록필요 */
		SELECT	DISTINCT
				'ERP유효기간 없음' GUBN,
				T1.ITEM_CD,
				T1.ITEM_NM,
				DECODE(T3.ITEM_STATUS,'ST','정상',DECODE(T3.ITYPE,'FERT','생산중단','매입중단'))	ITEM_STATUS,
				SUM(T1.STOCKBOX)	STOCKBOX
		FROM	LOG_STOCK	T1,
				CMITEM		T2,
				ITEM_MST	T3
		WHERE	T1.ITEM_CD	= T2.ITEM_CD
		AND		T2.TERM_VAL 	= 0	
		AND		T1.ITEMSTATE	= '정상'
		AND		T1.ITEM_CD	= T3.ITEM_ID
		GROUP
		BY		T1.ITEM_CD,T1.ITEM_NM, T3.ITEM_STATUS, T3.ITYPE	
		UNION	ALL
		/* GYR 등급 빠진것 */
		SELECT	DISTINCT
				'WMS GYR등급 없음' GUBN,
				T1.ITEM_CD,
				T1.ITEM_NM,
				DECODE(T3.ITEM_STATUS,'ST','정상',DECODE(T3.ITYPE,'FERT','생산중단','매입중단'))	ITEM_STATUS,
				SUM(T1.STOCKBOX)	STOCKBOX
		FROM	LOG_STOCK	T1,
				CMITEMGYR	T2,
				ITEM_MST	T3
		WHERE	T1.ITEM_CD	= T2.ITEM_CD(+)
		AND		T1.ITEMSTATE	= '정상'	
		AND		T2.ITEM_CD	IS NULL
		AND		T1.ITEM_CD	= T3.ITEM_ID
		GROUP
		BY		T1.ITEM_CD,T1.ITEM_NM, T3.ITEM_STATUS, T3.ITYPE
		ORDER
		BY		1,2

	</query> 

	<!-- GYR조사일자 LIST UP -->  
	<query id="get_gyrdate_list" paging="false">
		SELECT	TO_CHAR(OUTBOUND_DATE, 'YYYY-MM-DD')
		FROM	(
				SELECT	OUTBOUND_DATE,
						COUNT(DISTINCT CENTER_CD)
				FROM	GYRINFO
				WHERE	OUTBOUND_DATE BETWEEN ADD_MONTHS(SYSDATE,-12) AND TRUNC(SYSDATE)
				HAVING	COUNT(DISTINCT CENTER_CD) &gt; 20
				GROUP
				BY		OUTBOUND_DATE
				ORDER
				BY		OUTBOUND_DATE DESC
				)
	</query> 

	<!-- GYR 보고서 DC HEADER NAME --> 
	<query id="ip_04020_GYR_DC_HEADER_NAME" paging="false"> 

			SELECT	DC_SHORT_NAME
			FROM	DC_MST, DUAL
			WHERE	CDC_FLAG = 'Y' OR RDC_FLAG = 'Y'
			ORDER
			BY		DC_LOC_TYPE,DC_ID			

	</query> 

	<!-- GYR 보고서 DC HEADER CODE  --> 
	<query id="ip_04020_GYR_DC_HEADER_CODE" paging="false"> 

			SELECT	DC_ID
			FROM	DC_MST, DUAL
			WHERE	CDC_FLAG = 'Y' OR RDC_FLAG = 'Y'
			ORDER
			BY		DC_LOC_TYPE,DC_ID			

	</query> 

	<!-- 품목별 배송지점별 GYR 조회  --> 
	<query id="ip_04020_GYR_information_list" paging="false"> 

	#if("$!{sel_dw}" == "1")

		/* GYR 전체 */
		SELECT	ROUND(SUM(DECODE(SIGN(AVAIL_DATE - G_FR),-1,0,STOCKBOX)),0)	G_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - Y_FR),-1,0,
					DECODE(SIGN(AVAIL_DATE - Y_TO),1,0,STOCKBOX))),0)		Y_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - R_TO),1,0,STOCKBOX)),0)	R_ZONE
				--ROUND(SUM(STOCKBOX),0)										TOT
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,4)			DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE						AVAIL_DATE,
						--T1.KEEP_PER_BOX+PICKING_BOX_PER		STOCKBOX
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.OUTBOUND_DATE = '$!{in_work_date}'
				)	T1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY 				R_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY	+ 1			Y_FR,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY 		Y_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY	+ 1	G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')),
											TO_NUMBER(TERM_VAL)) - DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD'))	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL &gt; 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)		T2
		WHERE	T1.ITEM_CD		= T2.ITEM_CD

	#elseif("$!{sel_dw}" == "2")
		
		/* 품목별GYR */
		SELECT	T1.ITEM_CD,
				T1.ITEM_NM,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - G_FR),-1,0,STOCKBOX)),0)	G_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - Y_FR),-1,0,
					DECODE(SIGN(AVAIL_DATE - Y_TO),1,0,STOCKBOX))),0)		Y_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - R_TO),1,0,STOCKBOX)),0)	R_ZONE
				--ROUND(SUM(STOCKBOX),0)										TOT
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,4)			DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE						AVAIL_DATE,
						--T1.KEEP_PER_BOX+PICKING_BOX_PER		STOCKBOX
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.OUTBOUND_DATE = '$!{in_work_date}'
				)	T1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY 				R_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY	+ 1			Y_FR,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY 		Y_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY	+ 1	G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')),
											TO_NUMBER(TERM_VAL)) - DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD'))	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL &gt; 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)		T2
		WHERE	T1.ITEM_CD		= T2.ITEM_CD
		GROUP
		BY		T1.ITEM_CD,
				T1.ITEM_NM
		ORDER
		BY		T1.ITEM_CD

	#elseif("$!{sel_dw}" == "3")

		/* 배송지점GYR */
		SELECT	T1.DC_ID,
				T3.DC_NAME,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - G_FR),-1,0,STOCKBOX)),0)	G_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - Y_FR),-1,0,
					DECODE(SIGN(AVAIL_DATE - Y_TO),1,0,STOCKBOX))),0)		Y_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - R_TO),1,0,STOCKBOX)),0)	R_ZONE
				--SUM(STOCKBOX)												TOT
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,4)			DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE						AVAIL_DATE,
						--T1.KEEP_PER_BOX+PICKING_BOX_PER		STOCKBOX
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.OUTBOUND_DATE = '$!{in_work_date}'
				)	T1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY 				R_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY	+ 1			Y_FR,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY 		Y_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY	+ 1	G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')),
											TO_NUMBER(TERM_VAL)) - DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD'))	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL &gt; 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)			T2,
				DC_MST		T3
		WHERE	T1.ITEM_CD		= T2.ITEM_CD
		AND		T1.DC_ID		= T3.DC_ID
		GROUP
		BY		T1.DC_ID,
				T3.DC_NAME
		ORDER
		BY		T1.DC_ID		
		
	#elseif("$!{sel_dw}" == "4")

		/* 품목별-배송지점(가로) */
		SELECT	T1.ITEM_CD,
				T1.ITEM_NM,
				T3.TERM_VAL,
				T4.G_RATE||'-'||T4.Y_RATE||'-'||T4.R_RATE				GYR_RATE,
				DECODE(SIGN(T1.AVAIL_DATE - T2.R_TO),-1,'R',0,'R',
					DECODE(SIGN(T1.AVAIL_DATE - T2.Y_TO),1, 'G','Y'))	GYR,
				TO_CHAR(T1.AVAIL_DATE,'YYYY-MM-DD')						PERIOD_DATE,
				ROUND(DECODE(T1.AVAIL_DATE - T1.PRDT_DATE,0,0,
											(TRUNC(TO_DATE('$!{in_work_date}')) - T1.PRDT_DATE) / (T1.AVAIL_DATE - T1.PRDT_DATE) * 100), 1)	PERIOD_RATE,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7100',STOCKBOX)),0),0)	BOX7100,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7200',STOCKBOX)),0),0)	BOX7200,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7300',STOCKBOX)),0),0)	BOX7300,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7400',STOCKBOX)),0),0)	BOX7400,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7500',STOCKBOX)),0),0)	BOX7500,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7600',STOCKBOX)),0),0)	BOX7600,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7700',STOCKBOX)),0),0)	BOX7700,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'7800',STOCKBOX)),0),0)	BOX7800,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8000',STOCKBOX)),0),0)	BOX8000,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8110',STOCKBOX)),0),0)	BOX8110,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8120',STOCKBOX)),0),0)	BOX8120,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8115',STOCKBOX)),0),0)	BOX8115,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8122',STOCKBOX)),0),0)	BOX8122,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8123',STOCKBOX)),0),0)	BOX8123,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8130',STOCKBOX)),0),0)	BOX8130,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8140',STOCKBOX)),0),0)	BOX8140,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8150',STOCKBOX)),0),0)	BOX8150,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8160',STOCKBOX)),0),0)	BOX8160,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8170',STOCKBOX)),0),0)	BOX8170,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8310',STOCKBOX)),0),0)	BOX8310,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8320',STOCKBOX)),0),0)	BOX8320,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8330',STOCKBOX)),0),0)	BOX8330,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8340',STOCKBOX)),0),0)	BOX8340,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8350',STOCKBOX)),0),0)	BOX8350,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8410',STOCKBOX)),0),0)	BOX8410,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8420',STOCKBOX)),0),0)	BOX8420,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8430',STOCKBOX)),0),0)	BOX8430,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8440',STOCKBOX)),0),0)	BOX8440,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8510',STOCKBOX)),0),0)	BOX8510,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8511',STOCKBOX)),0),0)	BOX8511,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8520',STOCKBOX)),0),0)	BOX8520,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8530',STOCKBOX)),0),0)	BOX8530,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8540',STOCKBOX)),0),0)	BOX8540,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8610',STOCKBOX)),0),0)	BOX8610,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8620',STOCKBOX)),0),0)	BOX8620,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8630',STOCKBOX)),0),0)	BOX8630,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8710',STOCKBOX)),0),0)	BOX8710,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8720',STOCKBOX)),0),0)	BOX8720,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8730',STOCKBOX)),0),0)	BOX8730,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8740',STOCKBOX)),0),0)	BOX8740,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8750',STOCKBOX)),0),0)	BOX8750,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8760',STOCKBOX)),0),0)	BOX8760,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'1811',STOCKBOX)),0),0)	BOX1811,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'1816',STOCKBOX)),0),0)	BOX1816,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'1841',STOCKBOX)),0),0)	BOX1841,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8901',STOCKBOX)),0),0)	BOX8901,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8902',STOCKBOX)),0),0)	BOX8902,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8903',STOCKBOX)),0),0)	BOX8903,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8904',STOCKBOX)),0),0)	BOX8904,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8905',STOCKBOX)),0),0)	BOX8905,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8906',STOCKBOX)),0),0)	BOX8906,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8907',STOCKBOX)),0),0)	BOX8907,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8908',STOCKBOX)),0),0)	BOX8908,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8910',STOCKBOX)),0),0)	BOX8910,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8911',STOCKBOX)),0),0)	BOX8911,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8912',STOCKBOX)),0),0)	BOX8912,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8913',STOCKBOX)),0),0)	BOX8913,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8914',STOCKBOX)),0),0)	BOX8914,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8915',STOCKBOX)),0),0)	BOX8915,
				NVL(ROUND(SUM(DECODE(T1.DC_ID,'8916',STOCKBOX)),0),0)	BOX8916
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,4)			DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE						AVAIL_DATE,
						ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE,				
						--T1.KEEP_PER_BOX+PICKING_BOX_PER		STOCKBOX
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.OUTBOUND_DATE = '$!{in_work_date}'
				)	T1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY 				R_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY	+ 1			Y_FR,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY 		Y_TO,
						DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')) + R_DAY + Y_DAY	+ 1	G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD')),
											TO_NUMBER(TERM_VAL)) - DECODE('$!{in_work_date}','',SYSDATE,TO_DATE('$!{in_work_date}','YYYY-MM-DD'))	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL &gt; 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)			T2,
				CMITEM		T3,
				CMITEMGYR	T4
		WHERE	T1.ITEM_CD		= T2.ITEM_CD
		AND		DECODE(SIGN(T1.AVAIL_DATE - T2.R_TO),-1,'R',0,'R',
					DECODE(SIGN(T1.AVAIL_DATE - T2.Y_TO),1, 'G','Y')) IN ('R','Y')
		AND		T1.ITEM_CD	= T3.ITEM_CD
		AND		T1.ITEM_CD	= T4.ITEM_CD
		AND		T3.BRAND_CD	= '100001'
		HAVING	SUM(STOCKBOX)	&gt; 0
		GROUP
		BY		T1.ITEM_CD,
				T1.ITEM_NM,
				T3.TERM_VAL,
				T4.G_RATE||'-'||T4.Y_RATE||'-'||T4.R_RATE,
				DECODE(SIGN(T1.AVAIL_DATE - T2.R_TO),-1,'R',0,'R',
					DECODE(SIGN(T1.AVAIL_DATE - T2.Y_TO),1, 'G','Y')),
				T1.AVAIL_DATE,
				ROUND(DECODE(T1.AVAIL_DATE - T1.PRDT_DATE,0,0,
											(TRUNC(TO_DATE('$!{in_work_date}')) - T1.PRDT_DATE) / (T1.AVAIL_DATE - T1.PRDT_DATE) * 100), 1)
		ORDER
		BY		T1.ITEM_CD,
				T1.AVAIL_DATE

	#else
		
		SELECT	''
		FROM	DUAL
		WHERE	1=0
	
	#end	

	</query> 

	<!-- GYR품목별 상세조회 Pop-Up --> 
	<query id="ip_04020_GYR_ItemList_popup" paging="false"> 

		/* GYR품목별 상세조회 */
		SELECT	K1.ITEM_CD,
				K1.ITEM_NM,
				K1.DC_ID,
				K3.DC_SHORT_NAME,
				TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')		"유통일자",
				K1.STOCKBOX				"재고박스",
				TO_CHAR(K1.PRDT_DATE,'YYYY-MM-DD')			"생산일자",
				ROUND(DECODE(K1.PERIOD_DATE - K1.PRDT_DATE,0,0,
					(K1.OUTBOUND_DATE - K1.PRDT_DATE) / (K1.PERIOD_DATE - K1.PRDT_DATE) * 100), 1)	"경과율(%)",
				--DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',
				--			DECODE(SIGN(K2.G_FR - K1.PERIOD_DATE ),-1, 'G','Y')) 	GYR,
				DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
							DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))		GYR,
				TO_CHAR(K2.R_TO,'YYYY-MM-DD')										RED,
				TO_CHAR(K2.Y_FR,'YYYY-MM-DD')||'-'||TO_CHAR(K2.Y_TO,'YYYY-MM-DD')	YELLOW,
				TO_CHAR(K2.G_FR,'YYYY-MM-DD')										GREEN		
		FROM	(		
				SELECT	T1.OUTBOUND_DATE,
						SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE,
						--T1.KEEP_PER_BOX+PICKING_BOX_PER	STOCKBOX,
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
						TERM_VAL,
						ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
				AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
				)	K1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL &gt; 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)		K2,
				DC_MST	K3
		WHERE	K1.ITEM_CD		= K2.ITEM_CD	
		AND		K1.DC_ID		= K3.DC_ID	
		AND		K1.ITEM_CD		LIKE '%'||'$!{item_id}'||'%'
		AND		DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
							DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) LIKE '$!{sel_gyr_gubn}'
		ORDER
		BY		K1.ITEM_CD, K1.DC_ID

	</query> 
	
	

	<!-- 
	=======================
	  GYR품목별 상세조회
	=======================
	-->
	<!-- GYR품목별 상세조회  --> 
	<query id="ip_04030_GYR_Detail_list" paging="false"> 

		/* GYR품목별 상세조회 */
		SELECT  F_GET_CODE_NAME('DIVISION', K1.DIVISION)            DIVISION, 
		        K1.ITEM_CD,
		        K1.ITEM_NM,
		        K1.DC_ID,
		        K3.DC_SHORT_NAME,
		        TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')        "유통일자",
		        K1.STOCKBOX                                 "GYR 등록박스",
		        DW.BASE_STOCK "당일 기초재고",
		        DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
		                    DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))        "GYR등급",
		        DW.STOCK_TERM "입고 경과일",
		        DW.SALES_MEAN_3WEEK "3주평균",
		        DW.SALES_MEAN_1WEEK "1주평균",
		        ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
		        DECODE(DW.BASE_STOCK, 0, 0, 999),
		        DW.BASE_STOCK/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1) "재고소진가능일",
		        DW2.QTY "누적 출고량"
		FROM    (        
		        SELECT    T1.OUTBOUND_DATE,
		                SUBSTR(T1.CENTER_CD,5,4)    DC_ID,
		                T1.ITEM_CD,
		                T2.ITEM_NM,
		                IM.DIVISION,
		                T1.PERIOD_DATE,
		                --T1.KEEP_PER_BOX+PICKING_BOX_PER    STOCKBOX,
		                NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
		                NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)    STOCKBOX,
		                TERM_VAL,
		                ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1    PRDT_DATE
		        FROM    GYRINFO        T1,
		                CMITEM        T2, ITEM_MST IM
		        WHERE    T1.ITEM_CD    = T2.ITEM_CD
		        AND     T1.ITEM_CD = IM.ITEM_ID
		-------------------------------------
		        AND     IM.DIVISION	LIKE '%'||'$!{division}'||'%'
		        AND     IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
		-------------------------------------
		        AND        T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{gyr_date}'))
		        AND        NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
		                NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) > 0
		        )    K1,
		        (
		        /* 품목별 GYR 기준 */
		        SELECT	ITEM_CD                                                    ITEM_CD,
		                TRUNC(TO_DATE('$!{gyr_date}')) + R_DAY                     R_TO,
		                TRUNC(TO_DATE('$!{gyr_date}')) + R_DAY    + 1              Y_FR,
		                TRUNC(TO_DATE('$!{gyr_date}')) + R_DAY + Y_DAY             Y_TO,
		                TRUNC(TO_DATE('$!{gyr_date}')) + R_DAY + Y_DAY    + 1      G_FR
		        FROM    (
		                SELECT    ITEM_CD,
		                        ROUND(DAY_CNT*G_RATE/100)    G_DAY,
		                        ROUND(DAY_CNT*Y_RATE/100)    Y_DAY,
		                        ROUND(DAY_CNT*R_RATE/100)    R_DAY
		                FROM    (
		                        SELECT    T1.ITEM_CD,
		                                ADD_MONTHS(TRUNC(TO_DATE('$!{gyr_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{gyr_date}'))    DAY_CNT,
		                                G_RATE,
		                                Y_RATE,
		                                R_RATE
		                        FROM    CMITEMGYR    T1,
		                                (
		                                /* WMS MASTER */
		                                SELECT    ITEM_CD,
		                                        TERM_VAL
		                                FROM    CMITEM
		                                WHERE    TERM_VAL > 0
		                                )            T2
		                        WHERE    T1.ITEM_CD = T2.ITEM_CD
		                        )
		                )
		        )        K2,
		        DC_MST    K3, DC_DATAWAREHOUSE DW,
		----------------------------------------------------------
		        (
		        --당일 주문 + 전일 수송출고량 - 거래처 미주문
		        SELECT  TR.DC_ID, DM.DC_SHORT_NAME,
		                TR.ITEM_ID, IM.ITEM_NAME,
		                SUM(DECODE(TR.QTY,NULL,0,TR.QTY))  QTY
		        FROM   (--전일 실적
		                SELECT  TO_CHAR(SALE_DATE,'YYYYMMDD') CNFM_DATE, DELIV_LOC DC_ID, ITEM_ID, SUM(QTY) QTY
		                FROM    SALES_ACT,
		                        (
		                        SELECT    CAL_DATE
		                        FROM    CAL_MST
		                        WHERE    YYYYMMDD BETWEEN TO_CHAR(TO_DATE('$!{gyr_date}'),'yyyymmdd') AND TO_CHAR(TO_DATE('$!{cnfm_date}')-1, 'YYYYMMDD')
		                        )    CAL                                
		                WHERE   ACT_TYPE = '01'
		                AND     QTY > 0
		                AND     SALE_DATE = CAL.CAL_DATE
		                GROUP BY SALE_DATE, DELIV_LOC , ITEM_ID   
		                UNION ALL
		                --전일 수송출고량
		                SELECT TO_CHAR(TRANS_DATE,'YYYYMMDD') CNFM_DATE, SRC_LOC DC_ID, ITEM_ID, SUM(CHGO_QTY) QTY
		                FROM IF_TRANS_PLAN
		                WHERE   TRANS_DATE BETWEEN  TO_CHAR(TO_DATE('$!{gyr_date}'),'yyyymmdd') AND TO_CHAR( TO_DATE('$!{cnfm_date}')-1, 'YYYYMMDD')
		                GROUP BY TRANS_DATE, SRC_LOC, ITEM_ID                
		                ) TR, ITEM_MST IM, DC_MST DM
		        --WHERE   TR.ITEM_ID  = OD.ITEM_ID(+)
		        --AND     TR.DC_ID    = OD.LOC_ID(+)
		        --AND     TR.CNFM_DATE = OD.CNFM_DATE(+)
		        WHERE     TR.ITEM_ID = IM.ITEM_ID
		        AND     TR.DC_ID = DM.DC_ID
		        GROUP BY  TR.DC_ID, DM.DC_SHORT_NAME,
		                TR.ITEM_ID, IM.ITEM_NAME
		---------------------------------------------------------------------
		        )DW2
		WHERE    K1.ITEM_CD        = K2.ITEM_CD    
		AND        K1.DC_ID        = K3.DC_ID    
		AND     K1.ITEM_CD = DW.ITEM_ID(+)
		AND     K1.DC_ID = DW.DC_ID(+)
		AND     K1.ITEM_CD = DW2.ITEM_ID(+)
		AND     K1.DC_ID = DW2.DC_ID(+)
		AND     DW.CNFM_DATE = TO_CHAR( TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
		AND        DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
		                    DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) LIKE '%'
		------------------------  기 간 
		AND     K1.ITEM_CD LIKE '%'||'$!{item_id}'||'%'
		AND     DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
		                    DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) &lt; &gt; 'G'
		----------------------------
		ORDER
		BY        K1.ITEM_CD, K1.DC_ID

	</query> 


	<!--  GYR품목별 상세조회 미등록 배송지점 리스트  --> 
	<query id="get_gyr_dc_list" paging="false"> 

		-- 입력 안한배송지점 
		SELECT dc_id, dc_short_name
		FROM DC_MST
		WHERE DC_ID NOT IN
		            (
		            SELECT DISTINCT SUBSTR(CENTER_CD,5,8) DC_ID--, F_GETDCNAME(SUBSTR(CENTER_CD,5,8))
		            FROM GYRINFO
		            WHERE OUTBOUND_DATE = 	TO_DATE('$!{gyr_date}','YYYY-MM-DD')	            					
		            )
		AND DC_LOC_TYPE = '사내'
		AND MADE_TYPE != 'DE'
		and dc_id not in('8000','8511','7400')
		AND '$!{gyr_date}' IS NOT NULL		

	</query> 


	<!-- GYR 보고서_ DC COMBO  --> 
	<query id="ip_04040_GYR_DC_COMBO" paging="false"> 

			SELECT	DC_ID, DC_SHORT_NAME
			FROM	DC_MST, DUAL
			ORDER
			BY		DC_ID			

	</query> 

	<!-- GYR품목별 상세조회  --> 
	<query id="ip_04040_GYR_DC_Detail_list" paging="false"> 

		/* GYR품목별 상세조회 */
		SELECT	K1.ITEM_CD,
				K1.ITEM_NM,
				TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')		"유통일자",
				K1.STOCKBOX				"재고박스",
				TO_CHAR(K1.PRDT_DATE,'YYYY-MM-DD')			"생산일자",
				ROUND(DECODE(K1.PERIOD_DATE - K1.PRDT_DATE,0,0,
					(K1.OUTBOUND_DATE - K1.PRDT_DATE) / (K1.PERIOD_DATE - K1.PRDT_DATE) * 100), 1)	"경과율(%)",
				--DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',
				--			DECODE(SIGN(K2.G_FR - K1.PERIOD_DATE ),-1, 'G','Y')) 	GYR,
				DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
							DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))		GYR,					
				TO_CHAR(K2.R_TO,'YYYY-MM-DD')										RED,
				TO_CHAR(K2.Y_FR,'YYYY-MM-DD')||'-'||TO_CHAR(K2.Y_TO,'YYYY-MM-DD')	YELLOW,
				TO_CHAR(K2.G_FR,'YYYY-MM-DD')										GREEN		
		FROM	(		
				SELECT	T1.OUTBOUND_DATE,
						SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE,
						--T1.KEEP_PER_BOX+PICKING_BOX_PER	STOCKBOX,
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
						TERM_VAL,
						ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
				AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
				)	K1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
						TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL &gt; 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)		K2,
				DC_MST	K3
		WHERE	K1.ITEM_CD		= K2.ITEM_CD	
		AND		K1.DC_ID		= K3.DC_ID	
		AND		K1.DC_ID		= '$!{insel_dc_id}'
		AND		DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
							DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) LIKE '$!{sel_gyr_gubn}'
		ORDER
		BY		K1.ITEM_CD

	</query> 


	<!-- 장기체화소진율 DC combo  --> 
	<query id="ip_04050_GYR_DC_combo" paging="false"> 
		
		SELECT	DC_ID, DC_SHORT_NAME
		FROM	DC_MST, DUAL
		WHERE	(CDC_FLAG = 'Y' OR RDC_FLAG = 'Y')
		AND		DC_LOC_TYPE	= '사내'
		ORDER
		BY		DC_ID

	</query> 

	<!-- 장기체화소진율 분석조회  --> 
	<query id="ip_04050_GYR_Analysis_list" paging="false"> 

		/* 장기체화소진율 분석조회 */
	#if("$!{in_sel_type}" == "00")
		/* 품목별 조회 */
		SELECT	K1.ITEM_ID,
				K2.ITEM_NM,
				K2.TERM_VAL,
				K3.G_RATE||'-'||K3.Y_RATE||'-'||K3.R_RATE	GYR_RATE,
				SUM(Y_QTY)	Y_QTY,
				SUM(R_QTY)	R_QTY,
				SUM(Y_REMN)	Y_REMN,
				SUM(R_REMN)	R_REMN,
				--SUM(CHGO)	CHGO,
				SUM(Y_QTY)+SUM(R_QTY)-SUM(Y_REMN)-SUM(R_REMN) USE_QTY,
				CASE
					-- 출고 > YR재고 이면 소진율은 100%
					WHEN SUM(Y_REMN)+SUM(R_REMN) &lt;= 0 THEN 100
					ELSE ROUND((SUM(Y_QTY)+SUM(R_QTY)-SUM(Y_REMN)-SUM(R_REMN))/(SUM(Y_QTY) + SUM(R_QTY)),3)*100
				END USE_RATE
		FROM	(
				SELECT	S1.DC_ID,
						S1.ITEM_ID,
						NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0)	Y_QTY,
						NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0)	R_QTY,
						-- Y의 잔량 = Y - (출고-R)
						CASE 
							WHEN NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0) -
								NVL(ROUND(MAX(S3.CHGO),0),0) - NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) &lt;= 0 THEN 0
							ELSE NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0) -
								NVL(ROUND(MAX(S3.CHGO),0),0) - NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0)
						END	Y_REMN,
						-- R의 잔량 = R - 출고
						CASE 
							WHEN NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) - NVL(ROUND(MAX(S3.CHGO),0),0) &lt;= 0 THEN 0
							ELSE NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) - NVL(ROUND(MAX(S3.CHGO),0),0)
						END	R_REMN,
						NVL(ROUND(MAX(S3.CHGO),0),0)			CHGO,
						NVL(ROUND(MAX(S4.STOCK),0),0)			STOCK
				FROM	(
						SELECT	K1.ITEM_CD	ITEM_ID,
								K1.DC_ID,
								TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')		PERIOD_DATE,--"유통일자",
								K1.STOCKBOX				STOCK,
								TO_CHAR(K1.PRDT_DATE,'YYYY-MM-DD')			PRDT_DATE,--"생산일자",
								ROUND(DECODE(K1.PERIOD_DATE - K1.PRDT_DATE,0,0,
									(K1.OUTBOUND_DATE - K1.PRDT_DATE) / (K1.PERIOD_DATE - K1.PRDT_DATE) * 100), 1)	PERIOD_RATE, --경과율(%)
								DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
											DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))		GYR,					
								TO_CHAR(K2.R_TO,'YYYY-MM-DD')										RED,
								TO_CHAR(K2.Y_FR,'YYYY-MM-DD')||'-'||TO_CHAR(K2.Y_TO,'YYYY-MM-DD')	YELLOW,
								TO_CHAR(K2.G_FR,'YYYY-MM-DD')										GREEN		
						FROM	(		
								SELECT	T1.OUTBOUND_DATE,
										SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
										T1.ITEM_CD,
										T2.ITEM_NM,
										T1.PERIOD_DATE,
										--T1.KEEP_PER_BOX+PICKING_BOX_PER	STOCKBOX,
										NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
										NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
										TERM_VAL,
										ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
								FROM	GYRINFO		T1,
										CMITEM		T2,
										(
										SELECT	ITEM_ID
										FROM	ITEM_MST
										#if("$!{in_item_id}" != "")		
											#if("$!{in_sel_gubn}" == "01")	
												WHERE		ITEM_ID	= '$!{in_item_id}'  --품목코드
											#elseif("$!{in_sel_gubn}" == "05")
												WHERE		(--품종 대중소
														('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
														OR
														('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
														OR
														('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
														)
											#else
												WHERE	HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
											#end
										#end
										)			D2
								WHERE	T1.ITEM_CD	= T2.ITEM_CD
								AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
								AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
										NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
								AND		T1.ITEM_CD	= D2.ITEM_ID
								#if("$!{in_dc_id}" != "")	
									AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
								#end	
								)	K1,
								(
								/* 품목별 GYR 기준 */
								SELECT	ITEM_CD														ITEM_CD,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
								FROM	(
										SELECT	ITEM_CD,
												ROUND(DAY_CNT*G_RATE/100)	G_DAY,
												ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
												ROUND(DAY_CNT*R_RATE/100)	R_DAY
										FROM	(
												SELECT	T1.ITEM_CD,
														ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
														G_RATE,
														Y_RATE,
														R_RATE
												FROM	CMITEMGYR	T1,
														(
														/* WMS master */
														SELECT	ITEM_CD,
																TERM_VAL
														FROM	CMITEM
														WHERE	TERM_VAL &gt; 0
														)			T2
												WHERE	T1.ITEM_CD = T2.ITEM_CD
												)
										)
								)		K2,
								(
								/* Y나 이 존재하는 RDC, 품목 */
								SELECT	DISTINCT	
										K1.DC_ID,
										K1.ITEM_CD
								FROM	(		
										SELECT	T1.OUTBOUND_DATE,
												SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
												T1.ITEM_CD,
												T2.ITEM_NM,
												T1.PERIOD_DATE,
												NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
												NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
												TERM_VAL,
												ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
										FROM	GYRINFO		T1,
												CMITEM		T2,
												(
												SELECT	ITEM_ID
												FROM	ITEM_MST
												#if("$!{in_item_id}" != "")		
													#if("$!{in_sel_gubn}" == "01")	
														WHERE		ITEM_ID	= '$!{in_item_id}'  --품목코드
													#elseif("$!{in_sel_gubn}" == "05")
														WHERE		(--품종 대중소
																('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
																OR
																('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
																OR
																('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
																)
													#else
														WHERE	HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
													#end
												#end
												)			D2
										WHERE	T1.ITEM_CD	= T2.ITEM_CD
										AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
										AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
												NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
										AND		T1.ITEM_CD	= D2.ITEM_ID
										#if("$!{in_dc_id}" != "")	
											AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
										#end	
										)	K1,
										(
										/* 품목별 GYR 기준 */
										SELECT	ITEM_CD														ITEM_CD,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
										FROM	(
												SELECT	ITEM_CD,
														ROUND(DAY_CNT*G_RATE/100)	G_DAY,
														ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
														ROUND(DAY_CNT*R_RATE/100)	R_DAY
												FROM	(
														SELECT	T1.ITEM_CD,
																ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
																G_RATE,
																Y_RATE,
																R_RATE
														FROM	CMITEMGYR	T1,
																(
																/* WMS master */
																SELECT	ITEM_CD,
																		TERM_VAL
																FROM	CMITEM
																WHERE	TERM_VAL &gt; 0
																)			T2
														WHERE	T1.ITEM_CD = T2.ITEM_CD
														)
												)
										)		K2,
										DC_MST	K3
								WHERE	K1.ITEM_CD		= K2.ITEM_CD	
								AND		K1.DC_ID		= K3.DC_ID	
								AND		DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
											DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) IN ('R','Y')
								)		K4
						WHERE	K1.ITEM_CD		= K2.ITEM_CD	
						AND		K1.ITEM_CD		= K4.ITEM_CD
						AND		K1.DC_ID		= K4.DC_ID	
						)		S1,
						(
						/* 출고량 */
						SELECT	SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND		T1,
								CMITEM    	ITM,
								CMCENTER	CMC
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.CENTER_CD	= CMC.CENTER_CD
						AND		T1.BRAND_CD		= '100001'
						#if("$!{in_dc_id}" != "")	
							AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
						#end	
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,4),
								T1.ITEM_CD
						UNION	ALL
						/* 출고량(포승) */
						SELECT	SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND_P	T1,
								CMITEM    	ITM,
								CMCENTER	CMC
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.CENTER_CD	= CMC.CENTER_CD
						AND		T1.BRAND_CD		= '100001'
						#if("$!{in_dc_id}" != "")	
							AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
						#end	
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,4),
								T1.ITEM_CD
						UNION	ALL
						/* 출고량(구미) */
												SELECT	SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND_G	T1,
								CMITEM    	ITM,
								CMCENTER	CMC
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.CENTER_CD	= CMC.CENTER_CD
						AND		T1.BRAND_CD		= '100001'
						#if("$!{in_dc_id}" != "")	
							AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
						#end	
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,4),
								T1.ITEM_CD
						)		S3,
						(
						/* 현재고 */
						SELECT	SUBSTR (STC.CENTER_CD, 5, 4) 	DC_ID,
								STC.ITEM_CD 					ITEM_ID,
								SUM (STC.STOCK_QTY)
								  / (DECODE (ITM.MIN_UNIT_UOM, 'EA', ITM.BOX_UNIT_QTY, 1)
								) 								STOCK
						FROM 	LS010NM STC, CMITEM ITM
						WHERE 	STC.BRAND_CD = '100001'
						AND 	STC.ITEM_STATE = 'A'
						AND 	STC.STOCK_QTY != 0
						AND 	STC.ITEM_CD = ITM.ITEM_CD
						AND 	ITM.ITEM_DIV IN ('FERT', 'HAWA')
						GROUP 
						BY 		SUBSTR (STC.CENTER_CD, 5, 4),
								STC.ITEM_CD,
								ITM.MIN_UNIT_UOM,
								ITM.BOX_UNIT_QTY
						UNION	ALL
						/* 현재고(포승) */
						SELECT	SUBSTR (STC.CENTER_CD, 5, 4) 	DC_ID,
								STC.ITEM_CD 					ITEM_ID,
								SUM (STC.STOCK_QTY)
								  / (DECODE (ITM.MIN_UNIT_UOM, 'EA', ITM.BOX_UNIT_QTY, 1)
								) 								STOCK
						FROM 	LS010NM_P STC, CMITEM ITM
						WHERE 	STC.BRAND_CD = '100001'
						AND 	STC.ITEM_STATE = 'A'
						AND 	STC.STOCK_QTY != 0
						AND 	STC.ITEM_CD = ITM.ITEM_CD
						AND 	ITM.ITEM_DIV IN ('FERT', 'HAWA')
						GROUP 
						BY 		SUBSTR (STC.CENTER_CD, 5, 4),
								STC.ITEM_CD,
								ITM.MIN_UNIT_UOM,
								ITM.BOX_UNIT_QTY
						UNION	ALL
						/* 현재고(구미) */
						SELECT	SUBSTR (STC.CENTER_CD, 5, 4) 	DC_ID,
								STC.ITEM_CD 					ITEM_ID,
								SUM (STC.STOCK_QTY)
								  / (DECODE (ITM.MIN_UNIT_UOM, 'EA', ITM.BOX_UNIT_QTY, 1)
								) 								STOCK
						FROM 	LS010NM_G STC, CMITEM ITM
						WHERE 	STC.BRAND_CD = '100001'
						AND 	STC.ITEM_STATE = 'A'
						AND 	STC.STOCK_QTY != 0
						AND 	STC.ITEM_CD = ITM.ITEM_CD
						AND 	ITM.ITEM_DIV IN ('FERT', 'HAWA')
						GROUP 
						BY 		SUBSTR (STC.CENTER_CD, 5, 4),
								STC.ITEM_CD,
								ITM.MIN_UNIT_UOM,
								ITM.BOX_UNIT_QTY
						)		S4
				WHERE	S1.DC_ID	= S3.DC_ID(+)
				AND		S1.ITEM_ID	= S3.ITEM_ID(+)	
				AND		S1.DC_ID	= S4.DC_ID(+)
				AND		S1.ITEM_ID	= S4.ITEM_ID(+)	
				GROUP
				BY		S1.DC_ID,
						S1.ITEM_ID
				)		K1,
				CMITEM	K2,
				CMITEMGYR	K3
		WHERE	K1.ITEM_ID	= K2.ITEM_CD
		AND		K1.ITEM_ID	= K3.ITEM_CD
		AND		K3.BRAND_CD	= '100001'		
		GROUP
		BY		K1.ITEM_ID,
				K2.ITEM_NM,
				K2.TERM_VAL,
				K3.G_RATE||'-'||K3.Y_RATE||'-'||K3.R_RATE	
		ORDER
		BY		K1.ITEM_ID
	
	#else
	
		#if("$!{in_sel_type}" == "01")	 
		/* 배송지점-품목별 조회 */
		SELECT	K1.DC_ID,
				F_GETDCNAME(K1.DC_ID),
				K1.ITEM_ID,
				K2.ITEM_NM,
		#else
		/* 품목별-배송지점 조회 */
		SELECT	K1.ITEM_ID,
				K2.ITEM_NM,
				K1.DC_ID,
				F_GETDCNAME(K1.DC_ID),
		#end
				K2.TERM_VAL,
				K3.G_RATE||'-'||K3.Y_RATE||'-'||K3.R_RATE	GYR_RATE,
				SUM(Y_QTY)	Y_QTY,
				SUM(R_QTY)	R_QTY,
				SUM(Y_REMN)	Y_REMN,
				SUM(R_REMN)	R_REMN,
				--SUM(CHGO)	CHGO,
				SUM(Y_QTY)+SUM(R_QTY)-SUM(Y_REMN)-SUM(R_REMN) USE_QTY,
				CASE
					-- 출고 > YR재고 이면 소진율은 100%
					WHEN SUM(Y_REMN)+SUM(R_REMN) &lt;= 0 THEN 100
					ELSE ROUND((SUM(Y_QTY)+SUM(R_QTY)-SUM(Y_REMN)-SUM(R_REMN))/(SUM(Y_QTY) + SUM(R_QTY)),3)*100
				END USE_RATE
		FROM	(
				SELECT	S1.DC_ID,
						S1.ITEM_ID,
						NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0)	Y_QTY,
						NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0)	R_QTY,
						-- Y의 잔량 = Y - (출고-R)
						CASE 
							WHEN NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0) -
								NVL(ROUND(MAX(S3.CHGO),0),0) - NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) &lt;= 0 THEN 0
							ELSE NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0) -
								NVL(ROUND(MAX(S3.CHGO),0),0) - NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0)
						END	Y_REMN,
						-- R의 잔량 = R - 출고
						CASE 
							WHEN NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) - NVL(ROUND(MAX(S3.CHGO),0),0) &lt;= 0 THEN 0
							ELSE NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) - NVL(ROUND(MAX(S3.CHGO),0),0)
						END	R_REMN,
						NVL(ROUND(MAX(S3.CHGO),0),0)			CHGO,
						NVL(ROUND(MAX(S4.STOCK),0),0)			STOCK
				FROM	(
						SELECT	K1.ITEM_CD	ITEM_ID,
								K1.DC_ID,
								TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')		PERIOD_DATE,--"유통일자",
								K1.STOCKBOX				STOCK,
								TO_CHAR(K1.PRDT_DATE,'YYYY-MM-DD')			PRDT_DATE,--"생산일자",
								ROUND(DECODE(K1.PERIOD_DATE - K1.PRDT_DATE,0,0,
									(K1.OUTBOUND_DATE - K1.PRDT_DATE) / (K1.PERIOD_DATE - K1.PRDT_DATE) * 100), 1)	PERIOD_RATE, --경과율(%)
								DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
											DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))		GYR,					
								TO_CHAR(K2.R_TO,'YYYY-MM-DD')										RED,
								TO_CHAR(K2.Y_FR,'YYYY-MM-DD')||'-'||TO_CHAR(K2.Y_TO,'YYYY-MM-DD')	YELLOW,
								TO_CHAR(K2.G_FR,'YYYY-MM-DD')										GREEN		
						FROM	(		
								SELECT	T1.OUTBOUND_DATE,
										SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
										T1.ITEM_CD,
										T2.ITEM_NM,
										T1.PERIOD_DATE,
										--T1.KEEP_PER_BOX+PICKING_BOX_PER	STOCKBOX,
										NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
										NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
										TERM_VAL,
										ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
								FROM	GYRINFO		T1,
										CMITEM		T2,
										(
										SELECT	ITEM_ID
										FROM	ITEM_MST
										#if("$!{in_item_id}" != "")		
											#if("$!{in_sel_gubn}" == "01")	
												WHERE		ITEM_ID	= '$!{in_item_id}'  --품목코드
											#elseif("$!{in_sel_gubn}" == "05")
												WHERE		(--품종 대중소
														('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
														OR
														('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
														OR
														('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
														)
											#else
												WHERE	HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
											#end
										#end
										)			D2
								WHERE	T1.ITEM_CD	= T2.ITEM_CD
								AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
								AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
										NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
								AND		T1.ITEM_CD	= D2.ITEM_ID
								#if("$!{in_dc_id}" != "")	
									AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
								#end	
								)	K1,
								(
								/* 품목별 GYR 기준 */
								SELECT	ITEM_CD														ITEM_CD,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
								FROM	(
										SELECT	ITEM_CD,
												ROUND(DAY_CNT*G_RATE/100)	G_DAY,
												ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
												ROUND(DAY_CNT*R_RATE/100)	R_DAY
										FROM	(
												SELECT	T1.ITEM_CD,
														ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
														G_RATE,
														Y_RATE,
														R_RATE
												FROM	CMITEMGYR	T1,
														(
														/* WMS master */
														SELECT	ITEM_CD,
																TERM_VAL
														FROM	CMITEM
														WHERE	TERM_VAL &gt; 0
														)			T2
												WHERE	T1.ITEM_CD = T2.ITEM_CD
												)
										)
								)		K2,
								(
								/* Y나 이 존재하는 RDC, 품목 */
								SELECT	DISTINCT	
										K1.DC_ID,
										K1.ITEM_CD
								FROM	(		
										SELECT	T1.OUTBOUND_DATE,
												SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
												T1.ITEM_CD,
												T2.ITEM_NM,
												T1.PERIOD_DATE,
												NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
												NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
												TERM_VAL,
												ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
										FROM	GYRINFO		T1,
												CMITEM		T2,
												(
												SELECT	ITEM_ID
												FROM	ITEM_MST
												#if("$!{in_item_id}" != "")		
													#if("$!{in_sel_gubn}" == "01")	
														WHERE		ITEM_ID	= '$!{in_item_id}'  --품목코드
													#elseif("$!{in_sel_gubn}" == "05")
														WHERE		(--품종 대중소
																('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
																OR
																('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
																OR
																('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
																)
													#else
														WHERE	HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
													#end
												#end
												)			D2
										WHERE	T1.ITEM_CD	= T2.ITEM_CD
										AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
										AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
												NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
										AND		T1.ITEM_CD	= D2.ITEM_ID
										#if("$!{in_dc_id}" != "")	
											AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
										#end	
										)	K1,
										(
										/* 품목별 GYR 기준 */
										SELECT	ITEM_CD														ITEM_CD,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
												TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
										FROM	(
												SELECT	ITEM_CD,
														ROUND(DAY_CNT*G_RATE/100)	G_DAY,
														ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
														ROUND(DAY_CNT*R_RATE/100)	R_DAY
												FROM	(
														SELECT	T1.ITEM_CD,
																ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
																G_RATE,
																Y_RATE,
																R_RATE
														FROM	CMITEMGYR	T1,
																(
																/* WMS master */
																SELECT	ITEM_CD,
																		TERM_VAL
																FROM	CMITEM
																WHERE	TERM_VAL &gt; 0
																)			T2
														WHERE	T1.ITEM_CD = T2.ITEM_CD
														)
												)
										)		K2,
										DC_MST	K3
								WHERE	K1.ITEM_CD		= K2.ITEM_CD	
								AND		K1.DC_ID		= K3.DC_ID	
								AND		DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
											DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) IN ('R','Y')
								)		K4
						WHERE	K1.ITEM_CD		= K2.ITEM_CD	
						AND		K1.ITEM_CD		= K4.ITEM_CD
						AND		K1.DC_ID		= K4.DC_ID	
						)		S1,
						(
						/* 출고량 */
						SELECT	SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND		T1,
								CMITEM    	ITM,
								CMCENTER	CMC
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.CENTER_CD	= CMC.CENTER_CD
						AND		T1.BRAND_CD		= '100001'
						#if("$!{in_dc_id}" != "")	
							AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
						#end	
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,4),
								T1.ITEM_CD
						UNION	ALL
						/* 출고량(포승) */
						SELECT	SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND_P	T1,
								CMITEM    	ITM,
								CMCENTER	CMC
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.CENTER_CD	= CMC.CENTER_CD
						AND		T1.BRAND_CD		= '100001'
						#if("$!{in_dc_id}" != "")	
							AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
						#end	
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,4),
								T1.ITEM_CD
						UNION	ALL
						/* 출고량(구미) */
												SELECT	SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND_G	T1,
								CMITEM    	ITM,
								CMCENTER	CMC
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.CENTER_CD	= CMC.CENTER_CD
						AND		T1.BRAND_CD		= '100001'
						#if("$!{in_dc_id}" != "")	
							AND T1.CENTER_CD	= '1300'||'$!{in_dc_id}'
						#end	
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,4),
								T1.ITEM_CD						)		S3,
						(
						/* 현재고 */
						SELECT	SUBSTR (STC.CENTER_CD, 5, 4) 	DC_ID,
								STC.ITEM_CD 					ITEM_ID,
								SUM (STC.STOCK_QTY)
								  / (DECODE (ITM.MIN_UNIT_UOM, 'EA', ITM.BOX_UNIT_QTY, 1)
								) 								STOCK
						FROM 	LS010NM STC, CMITEM ITM
						WHERE 	STC.BRAND_CD = '100001'
						AND 	STC.ITEM_STATE = 'A'
						AND 	STC.STOCK_QTY != 0
						AND 	STC.ITEM_CD = ITM.ITEM_CD
						AND 	ITM.ITEM_DIV IN ('FERT', 'HAWA')
						GROUP 
						BY 		SUBSTR (STC.CENTER_CD, 5, 4),
								STC.ITEM_CD,
								ITM.MIN_UNIT_UOM,
								ITM.BOX_UNIT_QTY
						UNION	ALL
						/* 현재고(포승) */
						SELECT	SUBSTR (STC.CENTER_CD, 5, 4) 	DC_ID,
								STC.ITEM_CD 					ITEM_ID,
								SUM (STC.STOCK_QTY)
								  / (DECODE (ITM.MIN_UNIT_UOM, 'EA', ITM.BOX_UNIT_QTY, 1)
								) 								STOCK
						FROM 	LS010NM_P STC, CMITEM ITM
						WHERE 	STC.BRAND_CD = '100001'
						AND 	STC.ITEM_STATE = 'A'
						AND 	STC.STOCK_QTY != 0
						AND 	STC.ITEM_CD = ITM.ITEM_CD
						AND 	ITM.ITEM_DIV IN ('FERT', 'HAWA')
						GROUP 
						BY 		SUBSTR (STC.CENTER_CD, 5, 4),
								STC.ITEM_CD,
								ITM.MIN_UNIT_UOM,
								ITM.BOX_UNIT_QTY
						UNION	ALL
						/* 현재고(구미) */
						SELECT	SUBSTR (STC.CENTER_CD, 5, 4) 	DC_ID,
								STC.ITEM_CD 					ITEM_ID,
								SUM (STC.STOCK_QTY)
								  / (DECODE (ITM.MIN_UNIT_UOM, 'EA', ITM.BOX_UNIT_QTY, 1)
								) 								STOCK
						FROM 	LS010NM_G STC, CMITEM ITM
						WHERE 	STC.BRAND_CD = '100001'
						AND 	STC.ITEM_STATE = 'A'
						AND 	STC.STOCK_QTY != 0
						AND 	STC.ITEM_CD = ITM.ITEM_CD
						AND 	ITM.ITEM_DIV IN ('FERT', 'HAWA')
						GROUP 
						BY 		SUBSTR (STC.CENTER_CD, 5, 4),
								STC.ITEM_CD,
								ITM.MIN_UNIT_UOM,
								ITM.BOX_UNIT_QTY
						)		S4
				WHERE	S1.DC_ID	= S3.DC_ID(+)
				AND		S1.ITEM_ID	= S3.ITEM_ID(+)	
				AND		S1.DC_ID	= S4.DC_ID(+)
				AND		S1.ITEM_ID	= S4.ITEM_ID(+)	
				GROUP
				BY		S1.DC_ID,
						S1.ITEM_ID
				)		K1,
				CMITEM	K2,
				CMITEMGYR	K3
		WHERE	K1.ITEM_ID	= K2.ITEM_CD
		AND		K1.ITEM_ID	= K3.ITEM_CD
		AND		K3.BRAND_CD	= '100001'		
		GROUP
		BY		K1.DC_ID,
				K1.ITEM_ID,
				K2.ITEM_NM,
				K2.TERM_VAL,
				K3.G_RATE||'-'||K3.Y_RATE||'-'||K3.R_RATE	
		#if("$!{in_sel_type}" == "01")	 
			-- 배송지점-품목
			ORDER
			BY		K1.DC_ID, K1.ITEM_ID
		#else 
			-- 품목-배송지점
			ORDER
			BY		K1.ITEM_ID, K1.DC_ID
		#end		
	
	#end

	</query> 

	<!-- 장기체화소진율 품목상세-Popup  --> 
	<query id="ip_04050_GYR_Item_Detail_popup" paging="false"> 

		SELECT	S1.DC_ID,
				F_GETDCNAME(S1.DC_ID),
				MAX(Y_QTY)	Y_QTY,
				MAX(R_QTY)	R_QTY,
				MAX(Y_REMN)	Y_REMN,
				MAX(R_REMN)	R_REMN,
				MAX(Y_QTY)+MAX(R_QTY)-MAX(Y_REMN)-MAX(R_REMN) USE_QTY,
				CASE
					-- 출고 > YR재고 이면 소진율은 100%
					WHEN MAX(Y_REMN)+MAX(R_REMN) &lt;= 0 THEN 100
					ELSE ROUND((MAX(Y_QTY)+MAX(R_QTY)-MAX(Y_REMN)-MAX(R_REMN))/(MAX(Y_QTY) + MAX(R_QTY)),3)*100
				END USE_RATE,
				S2.GYR,
				S2.PERIOD_DATE,
				S2.PERIOD_RATE,
				S2.STOCK							STOCK
		FROM	(
				SELECT	S1.DC_ID,
						S1.ITEM_ID,
						NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0)	Y_QTY,
						NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0)	R_QTY,
						-- Y의 잔량 = Y - (출고-R)
						CASE 
							WHEN NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0) -
								NVL(ROUND(MAX(S3.CHGO),0),0) - NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) &lt;= 0 THEN 0
							ELSE NVL(SUM(DECODE(GYR,'Y',S1.STOCK)),0) -
								NVL(ROUND(MAX(S3.CHGO),0),0) - NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0)
						END	Y_REMN,
						-- R의 잔량 = R - 출고
						CASE 
							WHEN NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) - NVL(ROUND(MAX(S3.CHGO),0),0) &lt;= 0 THEN 0
							ELSE NVL(SUM(DECODE(GYR,'R',S1.STOCK)),0) - NVL(ROUND(MAX(S3.CHGO),0),0)
						END	R_REMN
				FROM	(
						SELECT	K1.ITEM_CD	ITEM_ID,
								K1.DC_ID,
								TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')		PERIOD_DATE,--"유통일자",
								K1.STOCKBOX				STOCK,
								TO_CHAR(K1.PRDT_DATE,'YYYY-MM-DD')			PRDT_DATE,--"생산일자",
								ROUND(DECODE(K1.PERIOD_DATE - K1.PRDT_DATE,0,0,
									(K1.OUTBOUND_DATE - K1.PRDT_DATE) / (K1.PERIOD_DATE - K1.PRDT_DATE) * 100), 1)	PERIOD_RATE, --경과율(%)
								DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
											DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))		GYR,					
								TO_CHAR(K2.R_TO,'YYYY-MM-DD')										RED,
								TO_CHAR(K2.Y_FR,'YYYY-MM-DD')||'-'||TO_CHAR(K2.Y_TO,'YYYY-MM-DD')	YELLOW,
								TO_CHAR(K2.G_FR,'YYYY-MM-DD')										GREEN		
						FROM	(		
								SELECT	T1.OUTBOUND_DATE,
										SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
										T1.ITEM_CD,
										T2.ITEM_NM,
										T1.PERIOD_DATE,
										--T1.KEEP_PER_BOX+PICKING_BOX_PER	STOCKBOX,
										NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
										NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
										TERM_VAL,
										ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
								FROM	GYRINFO		T1,
										CMITEM		T2
								WHERE	T1.ITEM_CD	= T2.ITEM_CD
								AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
								AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
										NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
								AND		T1.ITEM_CD	= '$!{in_item_id}'
								)	K1,
								(
								/* 품목별 GYR 기준 */
								SELECT	ITEM_CD														ITEM_CD,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
										TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
								FROM	(
										SELECT	ITEM_CD,
												ROUND(DAY_CNT*G_RATE/100)	G_DAY,
												ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
												ROUND(DAY_CNT*R_RATE/100)	R_DAY
										FROM	(
												SELECT	T1.ITEM_CD,
														ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
														G_RATE,
														Y_RATE,
														R_RATE
												FROM	CMITEMGYR	T1,
														(
														/* WMS master */
														SELECT	ITEM_CD,
																TERM_VAL
														FROM	CMITEM
														WHERE	TERM_VAL &gt; 0
														)			T2
												WHERE	T1.ITEM_CD = T2.ITEM_CD
												)
										)
								)		K2
						WHERE	K1.ITEM_CD		= K2.ITEM_CD	
						AND		DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
											DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) IN ('R','Y')
						)		S1,
						(
						/* 출고량 */
						SELECT	SUBSTR(CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND		T1,
								CMITEM    	ITM
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.ITEM_CD	= '$!{in_item_id}'
						GROUP
						BY		SUBSTR(CENTER_CD,5,4),
								T1.ITEM_CD
						UNION	ALL
						/* 출고량(포승) */
						SELECT	SUBSTR(CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND_P	T1,
								CMITEM    	ITM
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.ITEM_CD	= '$!{in_item_id}'
						GROUP
						BY		SUBSTR(CENTER_CD,5,4),
								T1.ITEM_CD
						UNION	ALL
						/* 출고량(구미) */
						SELECT	SUBSTR(CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD				ITEM_ID,
								SUM(T1.CONFIRM_QTY/NVL(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1),1))	CHGO
						FROM	LO020ND_G	T1,
								CMITEM    	ITM
						WHERE	T1.OUTBOUND_DATE	&gt; TO_DATE('$!{in_work_date}','YYYY-MM-DD') -- 조사일 제외
						AND		T1.ITEM_CD	= ITM.ITEM_CD
						AND		T1.ITEM_STATE	= 'A'
						AND		T1.ITEM_CD	= '$!{in_item_id}'
						GROUP
						BY		SUBSTR(CENTER_CD,5,4),
								T1.ITEM_CD
						)		S3
				WHERE	S1.DC_ID	= S3.DC_ID(+)
				AND		S1.ITEM_ID	= S3.ITEM_ID(+)	
				GROUP
				BY		S1.DC_ID,
						S1.ITEM_ID
				)		S1,
				(
				SELECT	K1.ITEM_CD			ITEM_ID,
						K1.DC_ID,
						K1.STOCKBOX			STOCK,
						TO_CHAR(K1.PERIOD_DATE,'YYYY-MM-DD')		PERIOD_DATE,--"유통일자",
						DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
									DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y'))	GYR,
						ROUND(DECODE(K1.PERIOD_DATE - K1.PRDT_DATE,0,0,
											(K1.OUTBOUND_DATE - K1.PRDT_DATE) / (K1.PERIOD_DATE - K1.PRDT_DATE) * 100), 1)	PERIOD_RATE
				FROM	(		
						SELECT	T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
								T1.ITEM_CD,
								T2.ITEM_NM,
								T1.PERIOD_DATE,
								--T1.KEEP_PER_BOX+PICKING_BOX_PER	STOCKBOX,
								NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
								NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX,
								TERM_VAL,
								ADD_MONTHS(PERIOD_DATE, -1*TO_NUMBER(TERM_VAL))-1	PRDT_DATE
						FROM	GYRINFO		T1,
								CMITEM		T2
						WHERE	T1.ITEM_CD	= T2.ITEM_CD
						AND		T1.OUTBOUND_DATE = TRUNC(TO_DATE('$!{in_work_date}'))
						AND		NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
								NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0) &gt; 0
						AND		T1.ITEM_CD	= '$!{in_item_id}'
						)	K1,
						(
						/* 품목별 GYR 기준 */
						SELECT	ITEM_CD														ITEM_CD,
								TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY 					R_TO,
								TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY	+ 1				Y_FR,
								TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY 			Y_TO,
								TRUNC(TO_DATE('$!{in_work_date}')) + R_DAY + Y_DAY	+ 1		G_FR
						FROM	(
								SELECT	ITEM_CD,
										ROUND(DAY_CNT*G_RATE/100)	G_DAY,
										ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
										ROUND(DAY_CNT*R_RATE/100)	R_DAY
								FROM	(
										SELECT	T1.ITEM_CD,
												ADD_MONTHS(TRUNC(TO_DATE('$!{in_work_date}')), TO_NUMBER(TERM_VAL)) - TRUNC(TO_DATE('$!{in_work_date}'))	DAY_CNT,
												G_RATE,
												Y_RATE,
												R_RATE
										FROM	CMITEMGYR	T1,
												(
												/* WMS master */
												SELECT	ITEM_CD,
														TERM_VAL
												FROM	CMITEM
												WHERE	TERM_VAL &gt; 0
												)			T2
										WHERE	T1.ITEM_CD = T2.ITEM_CD
										)
								)
						)		K2
				WHERE	K1.ITEM_CD		= K2.ITEM_CD
				AND		DECODE(SIGN(K1.PERIOD_DATE - K2.R_TO),-1,'R',0,'R',
									DECODE(SIGN(K1.PERIOD_DATE - K2.Y_TO),1, 'G','Y')) IN ('R','Y')
				)		S2
		WHERE	S1.DC_ID	= S2.DC_ID
		AND		S1.ITEM_ID	= S2.ITEM_ID	
		GROUP
		BY		S1.DC_ID,
				S2.GYR,
				S2.PERIOD_DATE,
				S2.PERIOD_RATE,
				S2.STOCK
		ORDER
		BY		S1.DC_ID,
				S2.PERIOD_DATE

	</query> 

	<!-- 배송지점조회_COMBO  --> 
	<query id="ip_05010_DC_combo" paging="false"> 
	
		SELECT	DC_ID,
				DC_SHORT_NAME
		FROM	DC_MST,  DUAL
		WHERE	RDC_FLAG	= 'Y'
		ORDER
		BY		DC_ID
		
	</query> 

	<!-- 영업지점_COMBO  --> 
	<query id="ip_05010_Sales_Loc_combo" paging="false"> 

		SELECT	DEPT_CODE,
				DEPT_NAME
		FROM	SDSTT401, DUAL
		WHERE	(
				('$!{insel_gubn}'	= '01' AND DEPT_GRAD_CODE = '20')
				OR
				('$!{insel_gubn}'	= '02' AND DEPT_GRAD_CODE = '30')
				OR
				('$!{insel_gubn}'	= '03' AND DEPT_GRAD_CODE = '40')
				)
		AND		APPL_END_YYMM	= '999912'
		AND		SUPL_APPL_GUBN	IS NULL
		UNION	ALL
		SELECT	CD 		DEPT_CODE,
				CD_NAME	DEPT_NAME
		FROM	CODE_MST
		WHERE	CD_GRP	= 'GRUP_CODE1'
		AND		'$!{insel_gubn}'	= '04'
		ORDER
		BY		2	

	</query> 


	<!-- 품목별 미출고 조회  --> 
	<query id="ip_05010_DeleteOrder_list_DW1" paging="false"> 
	
		SELECT	A.STOR_CODE,
				D.DC_SHORT_NAME,
				B.PROD_CODE,
				C.ITEM_NAME,
				MAX(BASE_STOCK)						"기초재고",
				SUM(B.REQT_BOX)						"주문",
				SUM(B.SELL_BOX)						"판매",
				SUM(B.REQT_BOX) - SUM(B.SELL_BOX)	"차이",
				DECODE(SIGN(SUM(B.REQT_BOX)-SUM(B.SELL_BOX)),-1,0,0,0,
							DECODE(SIGN(MAX(BASE_STOCK) - SUM(B.REQT_BOX)),-1,DECODE(SIGN(MAX(BASE_STOCK)),1,MAX(BASE_STOCK),0) - SUM(B.REQT_BOX),0))	"결품"
		FROM    SDORT101    A,
				SDORT102    B,
				ITEM_MST	C,
				DC_MST		D,
				SDSTT401	E,
				SDSTT101	F,
				(
				SELECT	DC_ID,
						ITEM_ID,
						SUM(BASE_STOCK)	BASE_STOCK
				FROM	DC_DATAWAREHOUSE
				WHERE	CNFM_DATE	= REPLACE('$!{in_work_date}','-','')
				GROUP
				BY		DC_ID, ITEM_ID
				)			G
		WHERE   A.SLIP_NO						=	B.SLIP_NO
		AND     A.CNFM_DATE						= REPLACE('$!{in_work_date}','-','')
		AND		SUBSTR(A.SLIP_GUBN_CODE,1,2)	= 'YO'
		AND		LENGTH(A.CNFM_DATE) 			= 8 
		AND		B.PROD_CODE						= C.ITEM_ID
		AND		A.STOR_CODE						= D.DC_ID
		AND		A.DEPT_CODE						= E.DEPT_CODE
		AND		E.APPL_END_YYMM					= '999912'
		AND		A.SOLD_PART						= F.CUST_CODE
		AND		A.STOR_CODE						= G.DC_ID
		AND		B.PROD_CODE						= G.ITEM_ID
		AND		(
				  ('$!{insel_gubn}'	= '00')
				  OR
				  ('$!{insel_gubn}'	IN ('01','02','03') AND
				  A.DEPT_CODE IN 	(
				  					SELECT	DEPT_CODE
							        FROM	SDSTT401
							        WHERE	DEPT_GRAD_CODE	= '40'
							        AND		APPL_STRT_YYMM	&lt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        AND		APPL_END_YYMM	&gt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        START
							        WITH	DEPT_CODE		= '$!{insel_code}'
							        CONNECT
							        BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
							        AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
							        )
				 )	
				 OR	
				 ('$!{insel_gubn}' = '04'	AND	F.GRUP_CODE = '$!{insel_code}')
				)
		AND	A.STOR_CODE					LIKE '%'||'$!{insel_dc}'||'%'		
		AND	(C.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
				OR C.ITEM_NAME	LIKE '%'||'$!{item_id}'||'%')
		AND	'$!{sel_dw}' = 'DW1'
		HAVING	MAX(BASE_STOCK) - SUM(B.REQT_BOX) &lt; 0
		GROUP
		BY		A.STOR_CODE,
				D.DC_SHORT_NAME,
				B.PROD_CODE,
				C.ITEM_NAME
		ORDER
		BY		1,3
		
	</query> 

	<!-- 미출고전표 조회  --> 
	<query id="ip_05010_DeleteOrder_list_DW2" paging="false"> 
	
		SELECT	A.STOR_CODE,
				D.DC_SHORT_NAME,
				A.DEPT_CODE,
				E.DEPT_NAME,
				B.PROD_CODE,
				C.ITEM_NAME,
				A.SOLD_PART,
				F.CUST_NAME,
				SUM(B.REQT_BOX)						"주문",
				SUM(B.SELL_BOX)						"판매",
				SUM(B.REQT_BOX)- SUM(B.SELL_BOX)	"차이"
		FROM    SDORT101    A,
				SDORT102    B,
				ITEM_MST	C,
				DC_MST		D,
				SDSTT401	E,
				SDSTT101	F
		WHERE   A.SLIP_NO						=	B.SLIP_NO
		AND     A.CNFM_DATE						= REPLACE('$!{in_work_date}','-','')
		AND		SUBSTR(A.SLIP_GUBN_CODE,1,2)	= 'YO'
		AND		LENGTH(A.CNFM_DATE) 			= 8 
		AND		B.PROD_CODE						= C.ITEM_ID
		AND		A.STOR_CODE						= D.DC_ID
		AND		A.DEPT_CODE						= E.DEPT_CODE
		AND		E.APPL_END_YYMM					= '999912'
		AND		A.SOLD_PART						= F.CUST_CODE
		AND		(
				  ('$!{insel_gubn}'	= '00')
				  OR
				  ('$!{insel_gubn}'	IN ('01','02','03') AND
				  A.DEPT_CODE IN 	(
				  					SELECT	DEPT_CODE
							        FROM	SDSTT401
							        WHERE	DEPT_GRAD_CODE	= '40'
							        AND		APPL_STRT_YYMM	&lt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        AND		APPL_END_YYMM	&gt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        START
							        WITH	DEPT_CODE		= '$!{insel_code}'
							        CONNECT
							        BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
							        AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(SYSDATE, 'YYYYMM')
							        AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
							        )
				 )	
				 OR	
				 ('$!{insel_gubn}' = '04'	AND	F.GRUP_CODE = '$!{insel_code}')
				)
		AND	A.STOR_CODE					LIKE '%'||'$!{insel_dc}'||'%'		
		AND	(C.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
				OR C.ITEM_NAME	LIKE '%'||'$!{item_id}'||'%')
		AND	'$!{sel_dw}' = 'DW2'
		HAVING	SUM(B.REQT_BOX)- SUM(B.SELL_BOX) &gt; 0
		GROUP
		BY		A.STOR_CODE,
				D.DC_SHORT_NAME,
				A.DEPT_CODE,
				E.DEPT_NAME,
				B.PROD_CODE,
				C.ITEM_NAME,
				A.SOLD_PART,
				F.CUST_NAME
		ORDER
		BY		1,3,5	
		
	</query> 
	
	<!-- WMS 마감구분 --> 
	<query id="ip_05020_WMS_close_gubn_combo" paging="false"> 
	
		SELECT	CODE_CD,CODE_NM
		FROM	CMCODE,	DUAL
		WHERE	CODE_GRP = 'LDIV11'
		ORDER
		BY		CODE_CD
		
	</query> 	
		
	<!-- WMS출고마감별 조회  --> 
	<query id="ip_05020_WMS_CloseInfo_list_DW1" paging="false"> 
	
		SELECT	K1.ITEM_ID,
				K3.ITEM_NAME,
				NVL(K4.CODE_NM,'정상마감')		"마감구분",
				SUM(ORDER_QTY)					"주문",
				SUM(CONFIRM_QTY)				"마감",
				SUM(ORDER_QTY)-SUM(CONFIRM_QTY)	"차이"
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
						T2.ITEM_CD					ITEM_ID,
						T2.SHORTAGE_DIV,
						SUM(T2.ORDER_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
						SUM(T2.CONFIRM_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
				FROM	LO020NM	T1,
						LO020ND	T2,
						CMITEM	ITM
				WHERE	T1.CENTER_CD		= T2.CENTER_CD
				AND		T1.BRAND_CD			= T2.BRAND_CD
				AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
				AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
				AND		T1.BRAND_CD			= '100001'	
				AND		T1.INOUT_CD			LIKE 'D1%'
				AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
				AND		T2.ITEM_CD			= ITM.ITEM_CD
				AND		TRIM(T2.BRAND_NO)	IS NOT NULL
				GROUP
				BY		SUBSTR(T1.CENTER_CD,5,8),
						T2.ITEM_CD,
						T2.SHORTAGE_DIV
				UNION	ALL
				SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
						T2.ITEM_CD					ITEM_ID,
						T2.SHORTAGE_DIV,
						SUM(T2.ORDER_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
						SUM(T2.CONFIRM_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
				FROM	LO020NM_G	T1,
						LO020ND_G	T2,
						CMITEM	ITM
				WHERE	T1.CENTER_CD		= T2.CENTER_CD
				AND		T1.BRAND_CD			= T2.BRAND_CD
				AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
				AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
				AND		T1.BRAND_CD			= '100001'	
				AND		T1.INOUT_CD			LIKE 'D1%'
				AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
				AND		T2.ITEM_CD			= ITM.ITEM_CD
				AND		TRIM(T2.BRAND_NO)	IS NOT NULL
				GROUP
				BY		SUBSTR(T1.CENTER_CD,5,8),
						T2.ITEM_CD,
						T2.SHORTAGE_DIV
				UNION	ALL
				SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
						T2.ITEM_CD					ITEM_ID,
						T2.SHORTAGE_DIV,
						SUM(T2.ORDER_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
						SUM(T2.CONFIRM_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
				FROM	LO020NM_P	T1,
						LO020ND_P	T2,
						CMITEM	ITM
				WHERE	T1.CENTER_CD		= T2.CENTER_CD
				AND		T1.BRAND_CD			= T2.BRAND_CD
				AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
				AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
				AND		T1.BRAND_CD			= '100001'	
				AND		T1.INOUT_CD			LIKE 'D1%'
				AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
				AND		T2.ITEM_CD			= ITM.ITEM_CD
				AND		TRIM(T2.BRAND_NO)	IS NOT NULL
				GROUP
				BY		SUBSTR(T1.CENTER_CD,5,8),
						T2.ITEM_CD,
						T2.SHORTAGE_DIV
				)	K1,
				DC_MST		K2,
				ITEM_MST	K3,
				CMCODE		K4
		WHERE	K1.DC_ID	= K2.DC_ID
		AND		K1.ITEM_ID	= K3.ITEM_ID
		AND		K1.SHORTAGE_DIV		= K4.CODE_CD(+)
		#if("$!{item_type}" == "FERT")
		AND		K3.ITYPE	IN ('FERT')
		#elseif("$!{item_type}" == "HAWA")
		AND		K3.ITYPE	IN ('HAWA')
		#else
		AND		K3.ITYPE	IN ('FERT','HAWA')
		#end
		#if("$!{search_type}" == "1020")
		AND		K3.DIVISION	IN ('10','20')
		#elseif("$!{search_type}" != "")		
		AND     K3.DIVISION        = '$!{search_type}'	
		#end
		AND		K4.CODE_GRP(+) 		= 'LDIV11'
		AND		K1.DC_ID			LIKE '%'||'$!{insel_dc}'||'%'		
		AND		(K1.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
					OR K3.ITEM_NAME	LIKE '%'||'$!{item_id}'||'%')
		AND		NVL(K1.SHORTAGE_DIV,'10') LIKE '$!{insel_close_gubn}'
		AND	'$!{sel_dw}' = 'DW1'
		#if("$!{in_sel_gubn}" == "01") -- SCM관리품목
		AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
		AND		MATERIAL_GROUP NOT LIKE '62%'
		AND		NOT (DIVISION IN ('60','99') AND SALES_CAT04 = '999')
		AND		HR_TY1 NOT LIKE '606006%'
		#elseif("$!{in_sel_gubn}" == "02") -- 수출/냉동/기타
		AND		((MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
				OR	MATERIAL_GROUP LIKE '62%'
				OR	(DIVISION IN ('60','99') AND SALES_CAT04 = '999')
				OR	HR_TY1 LIKE '606006%'
				)
		#end	
		GROUP
		BY		K1.ITEM_ID,
				K3.ITEM_NAME,
				K4.CODE_NM
		ORDER
		BY		1
		
	</query> 	

	<!-- WMS배송지점별 출고마감별 조회  --> 
	<query id="ip_05020_WMS_CloseInfo_list_DW2" paging="false"> 
	
		SELECT	K1.DC_ID,
				K2.DC_SHORT_NAME,
				K1.ITEM_ID,
				K3.ITEM_NAME,
				NVL(K4.CODE_NM,'정상마감')		"마감구분",
				SUM(ORDER_QTY)					"주문",
				SUM(CONFIRM_QTY)				"마감",
				SUM(ORDER_QTY)-SUM(CONFIRM_QTY)	"차이"
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
						T2.ITEM_CD					ITEM_ID,
						T2.SHORTAGE_DIV,
						SUM(T2.ORDER_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
						SUM(T2.CONFIRM_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
				FROM	LO020NM	T1,
						LO020ND	T2,
						CMITEM	ITM
				WHERE	T1.CENTER_CD		= T2.CENTER_CD
				AND		T1.BRAND_CD			= T2.BRAND_CD
				AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
				AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
				AND		T1.BRAND_CD			= '100001'	
				AND		T1.INOUT_CD			LIKE 'D1%'
				AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
				AND		T2.ITEM_CD			= ITM.ITEM_CD
				AND		TRIM(T2.BRAND_NO)	IS NOT NULL
				GROUP
				BY		SUBSTR(T1.CENTER_CD,5,8),
						T2.ITEM_CD,
						T2.SHORTAGE_DIV
				UNION	ALL
				SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
						T2.ITEM_CD					ITEM_ID,
						T2.SHORTAGE_DIV,
						SUM(T2.ORDER_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
						SUM(T2.CONFIRM_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
				FROM	LO020NM_G	T1,
						LO020ND_G	T2,
						CMITEM	ITM
				WHERE	T1.CENTER_CD		= T2.CENTER_CD
				AND		T1.BRAND_CD			= T2.BRAND_CD
				AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
				AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
				AND		T1.BRAND_CD			= '100001'	
				AND		T1.INOUT_CD			LIKE 'D1%'
				AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
				AND		T2.ITEM_CD			= ITM.ITEM_CD
				AND		TRIM(T2.BRAND_NO)	IS NOT NULL
				GROUP
				BY		SUBSTR(T1.CENTER_CD,5,8),
						T2.ITEM_CD,
						T2.SHORTAGE_DIV
				UNION	ALL
				SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
						T2.ITEM_CD					ITEM_ID,
						T2.SHORTAGE_DIV,
						SUM(T2.ORDER_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
						SUM(T2.CONFIRM_QTY/
							DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
				FROM	LO020NM_P	T1,
						LO020ND_P	T2,
						CMITEM	ITM
				WHERE	T1.CENTER_CD		= T2.CENTER_CD
				AND		T1.BRAND_CD			= T2.BRAND_CD
				AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
				AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
				AND		T1.BRAND_CD			= '100001'	
				AND		T1.INOUT_CD			LIKE 'D1%'
				AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
				AND		T2.ITEM_CD			= ITM.ITEM_CD
				AND		TRIM(T2.BRAND_NO)	IS NOT NULL
				GROUP
				BY		SUBSTR(T1.CENTER_CD,5,8),
						T2.ITEM_CD,
						T2.SHORTAGE_DIV
				)	K1,
				DC_MST		K2,
				ITEM_MST	K3,
				CMCODE		K4
		WHERE	K1.DC_ID	= K2.DC_ID
		AND		K1.ITEM_ID	= K3.ITEM_ID
		AND		K1.SHORTAGE_DIV		= K4.CODE_CD(+)	
		AND		K4.CODE_GRP(+) 		= 'LDIV11'
		#if("$!{item_type}" == "FERT")
		AND		K3.ITYPE	IN ('FERT')
		#elseif("$!{item_type}" == "HAWA")
		AND		K3.ITYPE	IN ('HAWA')
		#else
		AND		K3.ITYPE	IN ('FERT','HAWA')
		#end
		#if("$!{search_type}" == "1020")
		AND		K3.DIVISION	IN ('10','20')
		#elseif("$!{search_type}" != "")		
		AND     K3.DIVISION        = '$!{search_type}'	
		#end
		AND		K1.DC_ID			LIKE '%'||'$!{insel_dc}'||'%'		
		AND		(K1.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
					OR K3.ITEM_NAME	LIKE '%'||'$!{item_id}'||'%')
		AND		NVL(K1.SHORTAGE_DIV,'10') LIKE '$!{insel_close_gubn}'
		--AND		NVL(K1.SHORTAGE_DIV,'10') NOT LIKE '10'
		AND		'$!{sel_dw}' = 'DW2'
		#if("$!{in_sel_gubn}" == "01") -- SCM관리품목
		AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
		AND		MATERIAL_GROUP NOT LIKE '62%'
		AND		NOT (DIVISION IN ('60','99') AND SALES_CAT04 = '999')
		AND		HR_TY1 NOT LIKE '606006%'
		#elseif("$!{in_sel_gubn}" == "02") -- 수출/냉동/기타
		AND		((MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
				OR	MATERIAL_GROUP LIKE '62%'
				OR	(DIVISION IN ('60','99') AND SALES_CAT04 = '999')
				OR	HR_TY1 LIKE '606006%'
				)
		#end	
		GROUP
		BY		K1.DC_ID,
				K2.DC_SHORT_NAME,
				K1.ITEM_ID,
				K3.ITEM_NAME,
				K4.CODE_NM
		ORDER
		BY		1
		
	</query> 	
	
	<!-- WMS 일자별 출고마감별 분석  --> 
	<query id="ip_05020_WMS_CloseInfo_list_DW3" paging="alse"> 
	
		SELECT	TO_CHAR(OUTBOUND_DATE,'YYYYMMDD'),
				ROUND(SUM(ORDER_QTY),0)						"주문",
				ROUND(SUM(CONFIRM_QTY),0)					"출고",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'11',TERM)),0),0)	"재고부족",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'12',TERM)),0),0)	"배송출고통제",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'13',TERM)),0),0)	"이중발주",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'14',TERM)),0),0)	"거래처미주문",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'15',TERM)),0),0)	"당일출고의뢰",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'16',TERM)),0),0)	"물류미출고",
				NVL(ROUND(SUM(DECODE(CLOS_GUBN,'10',TERM)),0),0)	"기타",
				ROUND(SUM(TERM),0)									"미출고 소계",
				ROUND(ROUND(SUM(CONFIRM_QTY),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"출고(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'11',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"재고부족(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'12',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"배송출고통제(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'13',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"이중발주(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'14',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"거래처미주문(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'15',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"당일출고의뢰(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'16',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"물류미출고(%)",
				ROUND(NVL(ROUND(SUM(DECODE(CLOS_GUBN,'10',TERM)),0),0)/ROUND(SUM(ORDER_QTY),0)*100,2)	"기타(%)",
				ROUND(ROUND(SUM(TERM),0)/ROUND(SUM(ORDER_QTY),0)*100,2)									"미출고 소계(%)"
		FROM	(
				SELECT	K1.OUTBOUND_DATE,
						K1.SHORTAGE_DIV		CLOS_GUBN,
						SUM(ORDER_QTY)						ORDER_QTY,
						SUM(CONFIRM_QTY)				CONFIRM_QTY,
						SUM(ORDER_QTY)-SUM(CONFIRM_QTY)	TERM
				FROM	(
						SELECT	T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
								T2.ITEM_CD					ITEM_ID,
								NVL(RTRIM(T2.SHORTAGE_DIV),'10')	SHORTAGE_DIV,
								SUM(T2.ORDER_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
								SUM(T2.CONFIRM_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
						FROM	LO020NM	T1,
								LO020ND	T2,
								CMITEM	ITM
						WHERE	T1.CENTER_CD		= T2.CENTER_CD
						AND		T1.BRAND_CD			= T2.BRAND_CD
						AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
						AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
						AND		T1.BRAND_CD			= '100001'	
						AND		T1.INOUT_CD			LIKE 'D1%'
						AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
						AND		T2.ITEM_CD			= ITM.ITEM_CD
						AND		TRIM(T2.BRAND_NO)	IS NOT NULL
						GROUP
						BY		T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,8),
								T2.ITEM_CD,
								NVL(RTRIM(T2.SHORTAGE_DIV),'10')
						UNION	ALL
						SELECT	T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
								T2.ITEM_CD					ITEM_ID,
								NVL(RTRIM(T2.SHORTAGE_DIV),'10')	SHORTAGE_DIV,
								SUM(T2.ORDER_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
								SUM(T2.CONFIRM_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
						FROM	LO020NM_G	T1,
								LO020ND_G	T2,
								CMITEM	ITM
						WHERE	T1.CENTER_CD		= T2.CENTER_CD
						AND		T1.BRAND_CD			= T2.BRAND_CD
						AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
						AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
						AND		T1.BRAND_CD			= '100001'	
						AND		T1.INOUT_CD			LIKE 'D1%'
						AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
						AND		T2.ITEM_CD			= ITM.ITEM_CD
						AND		TRIM(T2.BRAND_NO)	IS NOT NULL
						GROUP
						BY		T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,8),
								T2.ITEM_CD,
								NVL(RTRIM(T2.SHORTAGE_DIV),'10')
						UNION	ALL
						SELECT	T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
								T2.ITEM_CD					ITEM_ID,
								NVL(RTRIM(T2.SHORTAGE_DIV),'10')	SHORTAGE_DIV,
								SUM(T2.ORDER_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
								SUM(T2.CONFIRM_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY
						FROM	LO020NM_P	T1,
								LO020ND_P	T2,
								CMITEM	ITM
						WHERE	T1.CENTER_CD		= T2.CENTER_CD
						AND		T1.BRAND_CD			= T2.BRAND_CD
						AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
						AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
						AND		T1.BRAND_CD			= '100001'	
						AND		T1.INOUT_CD			LIKE 'D1%'
						AND		T1.OUTBOUND_DATE	BETWEEN '$!{in_work_date}' AND '$!{in_to_date}'
						AND		T2.ITEM_CD			= ITM.ITEM_CD
						AND		TRIM(T2.BRAND_NO)	IS NOT NULL
						GROUP
						BY		T1.OUTBOUND_DATE,
								SUBSTR(T1.CENTER_CD,5,8),
								T2.ITEM_CD,
								NVL(RTRIM(T2.SHORTAGE_DIV),'10')
						)	K1,
						DC_MST		K2,
						ITEM_MST	K3,
						CMCODE		K4
				WHERE	K1.DC_ID	= K2.DC_ID
				AND		K1.ITEM_ID	= K3.ITEM_ID
				AND		K1.SHORTAGE_DIV		= K4.CODE_CD(+)
				#if("$!{item_type}" == "FERT")
				AND		K3.ITYPE	IN ('FERT')
				#elseif("$!{item_type}" == "HAWA")
				AND		K3.ITYPE	IN ('HAWA')
				#else
				AND		K3.ITYPE	IN ('FERT','HAWA')
				#end
				#if("$!{search_type}" == "1020")
				AND		K3.DIVISION	IN ('10','20')
				#elseif("$!{search_type}" != "")		
				AND     K3.DIVISION        = '$!{search_type}'	
				#end	
				AND		K4.CODE_GRP(+) 		= 'LDIV11'
				AND		K1.DC_ID			LIKE '%'||'$!{insel_dc}'||'%'		
				AND		(K1.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
							OR K3.ITEM_NAME	LIKE '%'||'$!{item_id}'||'%')
				AND		NVL(K1.SHORTAGE_DIV,'10') LIKE '$!{insel_close_gubn}'
				AND		'$!{sel_dw}' = 'DW3'
				#if("$!{in_sel_gubn}" == "01") -- SCM관리품목
				AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
				AND		MATERIAL_GROUP NOT LIKE '62%'
				AND		NOT (DIVISION IN ('60','99') AND SALES_CAT04 = '999')
				AND		HR_TY1 NOT LIKE '606006%'
				#elseif("$!{in_sel_gubn}" == "02") -- 수출/냉동/기타
				AND		((MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
					OR	MATERIAL_GROUP LIKE '62%'
					OR	(DIVISION IN ('60','99') AND SALES_CAT04 = '999')
					OR	HR_TY1 LIKE '606006%'
						)
				#end				
				GROUP
				BY		K1.OUTBOUND_DATE,
						K1.SHORTAGE_DIV
				)
		HAVING	ROUND(SUM(ORDER_QTY),0) &gt; 0
		GROUP
		BY		OUTBOUND_DATE
		ORDER
		BY		1
		
	</query> 	
	
	<!-- WMS 일자별 결품조회  --> 
	<query id="ip_05020_WMS_CloseInfo_list_DW4" paging="alse"> 
		SELECT	CNFM_DATE			"일자",
				SUM(ORDER_QTY)		"총주문량",
				SUM(CONFIRM_QTY)	"마감량",
        		SUM(MINAP)			"배정미납",
        		SUM(DIV_1)			"재고부족",
                SUM(DIV_2)			"주문오류",
                SUM(DIV_3)			"긴급오더",
                SUM(DIV_4)			"배송오류",
                SUM(DIV_5)			"수송오류",
                SUM(DIV_0)			"기타",            		
        		SUM(SUM_DEFAULT),            		
        		NVL(ROUND((SUM(DIV_1)/DECODE(SUM(ORDER_QTY),0,NULL,SUM(ORDER_QTY)))*100,2),0)		"재고부족결품율",
        		NVL(ROUND((SUM(MINAP)/DECODE(SUM(ORDER_QTY),0,NULL,SUM(ORDER_QTY)))*100,2),0)		"배정미납율"            		
        FROM    (        
				SELECT	K1.CNFM_DATE					CNFM_DATE,        
						ROUND(SUM(K1.ODER_BOX),0)		ORDER_QTY,
						ROUND(SUM(K1.CONFIRM_BOX),0)	CONFIRM_QTY,
                		0								SALES_MEAN_1MONTH,
                		0								MODI_BOX,
               			0								MINAP,
                		CASE 	WHEN SCM_REASON = 1
                     			THEN ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)
                     			ELSE 0	
                     			END		DIV_1,
           				CASE	WHEN SCM_REASON = 2
                     			THEN ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)
                     			ELSE 0	
                     			END		DIV_2,
            			CASE 	WHEN SCM_REASON = 3
                     			THEN ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)
                     			ELSE 0		
                     			END		DIV_3,
            			CASE 	WHEN SCM_REASON = 4
                     			THEN ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)
                     			ELSE 0		
                     			END		DIV_4,
            			CASE 	WHEN SCM_REASON = 5
                     			THEN ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)
                     			ELSE 0	
                     			END		DIV_5,
            			CASE	WHEN SCM_REASON = 0
                     			THEN ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)
                     			ELSE 0	
                     			END		DIV_0,					
						ROUND(SUM(K1.ODER_BOX - K1.CONFIRM_BOX),0)		SUM_DEFAULT			
				FROM	WMS_DEFAULT_REASON 	K1,
						DC_MST				K2,
						ITEM_MST			K3,
						CMCODE				K4
						WHERE	K1.DC_ID			= K2.DC_ID
						AND		K1.ITEM_ID			= K3.ITEM_ID
						AND		K1.WMS_REASON		= K4.CODE_CD(+)
						--AND		K3.ITYPE	IN ('FERT','HAWA')	
						AND		K4.CODE_GRP(+) 		= 'LDIV11'
						AND		K1.CNFM_DATE	BETWEEN TO_CHAR(TO_DATE('$!{in_work_date}'),'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{in_to_date}'),'YYYYMMDD')
						AND		(K1.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
							OR K3.ITEM_NAME	LIKE '%'||'$!{item_name}'||'%')
						#if("$!{search_type}" == "1020")
						AND		K3.DIVISION	IN ('10','20')
						#elseif("$!{search_type}" != "")		
						AND     K3.DIVISION        = '$!{search_type}'	
						#end
						#if("$!{item_type}" == "FERT")
               			AND		K3.ITYPE = 'FERT'
               			#elseif("$!{item_type}" == "HAWA")
               			AND		K3.ITYPE = 'HAWA'
               			#end
						AND		'DW4' = 'DW4'		
						GROUP
				BY		K1.CNFM_DATE,						
                        K1.SCM_REASON
          		UNION ALL
        		SELECT  CNFM_DATE,    
       	 				0						 		ORDER_QTY,
        				0						 		CONFIRM_QTY,    	  
    		   			NVL(SUM(SALES_MEAN_1MONTH),0)   SALES_MEAN_1MONTH,
         	   			NVL(SUM(MODI_BOX),0) 		 	MODI_BOX,
         	   			NVL(SUM(MINAP),0),
                    	0 DIV_1,
                    	0 DIV_2,
                    	0 DIV_3,
                    	0 DIV_4,
                    	0 DIV_5,
                    	0 DIV_0,
                    	0 SUM_DEFAULT
        		FROM	(
                		SELECT 	CNFM_DATE,
                				ITEM_ID,
                				MAX(SALES_MEAN_1MONTH) 		SALES_MEAN_1MONTH,
                        		MAX(QTY) 					MODI_BOX,					--전월일평균 판매량 - 배정걸린 품목의 해당일판매량 2015-04-01 수정 MODI_BOX -> QTY
                        		CASE 	WHEN MAX(SALES_MEAN_1MONTH) - MAX(QTY) >0
                        				THEN MAX(SALES_MEAN_1MONTH) - MAX(QTY)
                            			ELSE 0
                            	END        MINAP                
                        FROM	( 
	               				SELECT  SD.CNFM_DATE,
	               					 	SD.PROD_CODE			ITEM_ID,
	                        		 	AV.SALES_MEAN_1MONTH 	SALES_MEAN_1MONTH,	                        		 	
	                        		 	NVL(SA.QTY,0)			QTY
	               				FROM 	SDORT204 SD, 
	               						ITEM_MST IM,
	               						(
	                                	SELECT 	DISTINCT CNFM_DATE, PROD_CODE		
										FROM 	SDORT203
										WHERE 	CNFM_DATE BETWEEN TO_CHAR(TO_DATE('$!{in_work_date}'),'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{in_to_date}'),'YYYYMMDD')
										AND 	ALLOC_REASON='21'    --사유 : 재고부족
										AND 	ALLOC_ZONE='01'		 --공급할당 : 전국
										)SD2,
										(
										SELECT	WMS.CNFM_DATE,
	                            				WMS.ITEM_ID,
	                                    		SUM(WMS.CONFIRM_BOX)	QTY
	                            		FROM	WMS_DEFAULT_REASON WMS
	                            		WHERE	WMS.CNFM_DATE BETWEEN TO_CHAR(TO_DATE('$!{in_work_date}'),'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{in_to_date}'),'YYYYMMDD')
	                           		 	GROUP
	                            		BY		WMS.CNFM_DATE,
	                            				WMS.ITEM_ID
										)SA,
										(										   		  				
			                            SELECT  WMS.ITEM_ID,
			                                    ROUND(SUM(WMS.CONFIRM_BOX)/CNT,0)  SALES_MEAN_1MONTH	                                    
			                            FROM    WMS_DEFAULT_REASON      WMS, 
			                                    ITEM_MST      IM,
			                                    (
			                                    SELECT  SUM(1) CNT
			                                    FROM    CAL_MST
			                                    WHERE   CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{in_work_date}','YYYY-MM-DD'),-1),'MM') AND 
			                                    LAST_DAY(TRUNC(ADD_MONTHS(TO_DATE('$!{in_work_date}','YYYY-MM-DD'),-1),'MM'))
			                                    AND     HOLIDAY_FLAG IS NULL                                        
			                                    )CAL                                                                                                               
			                            WHERE   WMS.ITEM_ID      = IM.ITEM_ID
                                        AND     WMS.ITEM_ID     IN (SELECT   DISTINCT PROD_CODE        
			                                    FROM     SDORT203
			                                    WHERE    CNFM_DATE BETWEEN TO_CHAR(TO_DATE('$!{in_work_date}'),'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{in_to_date}'),'YYYYMMDD')
			                                    AND      ALLOC_REASON='21'    --사유 : 재고부족
			                                    AND      ALLOC_ZONE='01')
			                            AND		(IM.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
												OR IM.ITEM_NAME	LIKE '%'||'$!{item_name}'||'%')
			                            AND     WMS.CNFM_DATE  BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{in_work_date}','YYYY-MM-DD'),-1),'MM'),'YYYYMMDD') AND 
			                                    TO_CHAR(LAST_DAY(TRUNC(ADD_MONTHS(TO_DATE('$!{in_work_date}','YYYY-MM-DD'),-1),'MM')),'YYYYMMDD')
			                            #if("$!{search_type}" == "1020")
										AND		IM.DIVISION	IN ('10','20')
										#elseif("$!{search_type}" != "")		
										AND     IM.DIVISION   = '$!{search_type}'	
										#end                   				
			               				#if("$!{item_type}" == "FERT")
			               				AND		IM.ITYPE = 'FERT'			               				
			               				#elseif("$!{item_type}" == "HAWA")
			               				AND		IM.ITYPE = 'HAWA'
			               				#end 
			                            GROUP 
			                            BY      WMS.ITEM_ID,
			                                    CNT
										)AV                      					
	               				WHERE 	SD.CNFM_DATE BETWEEN TO_CHAR(TO_DATE('$!{in_work_date}'),'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{in_to_date}'),'YYYYMMDD')
	               				AND		SD.CNFM_DATE = SD2.CNFM_DATE
	               				AND		SD.CNFM_DATE = SA.CNFM_DATE(+)
	                        	AND		SD.PROD_CODE = SD2.PROD_CODE
	               				AND		SD.PROD_CODE = IM.ITEM_ID
	               				AND		SD.PROD_CODE = SA.ITEM_ID(+) 
	               				AND		SD.PROD_CODE = AV.ITEM_ID
	               				AND		(IM.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
										OR IM.ITEM_NAME	LIKE '%'||'$!{item_name}'||'%')
	               				#if("$!{search_type}" == "1020")
								AND		IM.DIVISION	IN ('10','20')
								#elseif("$!{search_type}" != "")		
								AND     IM.DIVISION        = '$!{search_type}'	
								#end               			      			
	               				#if("$!{item_type}" == "FERT")
	               				AND		IM.ITYPE = 'FERT'	               				
	               				#elseif("$!{item_type}" == "HAWA")
	               				AND		IM.ITYPE = 'HAWA'
	               				#end	               					               				
               			)                          
                		GROUP 
                		BY 		CNFM_DATE,
                				ITEM_ID
                 )
                 GROUP 
         		 BY 	CNFM_DATE                              
			)
		WHERE	'$!{sel_dw}' = 'DW4'		
		GROUP 
		BY		CNFM_DATE 
		ORDER
		BY		CNFM_DATE
		
	</query> 
	
	<!-- WMS 출고마감별 SCM전용 사유콤보리스트 -->
	<query id="ip_05040_WMS_CloseInfo_Scm_list_combo" paging="flase">
		SELECT  CD, CD_NAME CD_NAME
        FROM    CODE_MST
        WHERE   CD_GRP = 'LDIV11_SCM'
	</query>
	
	<!-- WMS 출고마감별 사유관리  --> 
	<query id="ip_05040_WMS_CloseInfo_Scm_list" paging="false"> 
	
		SELECT	K1.DC_ID,
				K2.DC_SHORT_NAME,
				K1.ITEM_ID,
				K3.ITEM_NAME,
				K1.WMS_REASON								"물류마감INDEX",
				NVL(K4.CODE_NM,'정상마감')					"물류마감",
				ROUND(SUM(ODER_BOX),0)						"주문",
				ROUND(SUM(CONFIRM_BOX),0)					"마감",
				ROUND(SUM(ODER_BOX)-SUM(CONFIRM_BOX),0)		"차이",
				K1.SCM_REASON								"SCM마감",
				K1.BIGO										"비고"
		FROM	WMS_DEFAULT_REASON K1,
				DC_MST		K2,
				ITEM_MST	K3,
				CMCODE		K4				
		WHERE	K1.DC_ID			= K2.DC_ID
		AND		K1.ITEM_ID			= K3.ITEM_ID
		AND		K1.WMS_REASON		= K4.CODE_CD(+)	
		AND		K4.CODE_GRP(+) 		= 'LDIV11'
		AND		K3.ITYPE	IN ('FERT','HAWA')
		AND		K1.CNFM_DATE	= 	'$!{start_date}'
		AND		K1.DC_ID			LIKE '%'||'$!{insel_dc}'||'%'		
		AND		(K1.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
					OR K3.ITEM_NAME	LIKE '%'||'$!{item_id}'||'%')
		AND		NVL(K1.WMS_REASON,'10') LIKE '$!{insel_close_gubn}'		
		--AND		NVL(K1.SHORTAGE_DIV,'10') NOT LIKE '10'
	#if("$!{in_sel_gubn}" == "01") -- SCM관리품목
		AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
		AND		MATERIAL_GROUP NOT LIKE '62%'
		AND		NOT (DIVISION IN ('60','99') AND SALES_CAT04 = '999')
		AND		HR_TY1 NOT LIKE '606006%'
	#elseif("$!{in_sel_gubn}" == "02") -- 수출/냉동/기타
		AND		((MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999')
				OR	MATERIAL_GROUP LIKE '62%'
				OR	(DIVISION IN ('60','99') AND SALES_CAT04 = '999')
				OR	HR_TY1 LIKE '606006%'
				)
	#end
		GROUP
		BY		K1.DC_ID,
				K2.DC_SHORT_NAME,
				K1.ITEM_ID,
				K3.ITEM_NAME,
				K4.CODE_NM,
				K4.CODE_CD,
				K1.WMS_REASON,
				K1.SCM_REASON,
				K1.BIGO				
		ORDER
		BY		1
		
	</query> 		

	<!-- WMS 출고마감별 사유관리 팝업  --> 
	<query id="ip_05040_WMS_CloseInfo_Scm_list_pop" paging="false"> 
	
		SELECT	K1.DC_ID,
				K2.DC_SHORT_NAME,
				K1.ITEM_ID,
				K3.ITEM_NAME,
				K1.WMS_REASON								"물류마감INDEX",
				NVL(K4.CODE_NM,'정상마감')					"물류마감",
				ROUND(SUM(ODER_BOX),0)						"주문",
				ROUND(SUM(CONFIRM_BOX),0)					"마감",
				ROUND(SUM(ODER_BOX)-SUM(CONFIRM_BOX),0)		"차이",
				K1.SCM_REASON								"SCM마감",
				K1.BIGO										"비고"
		FROM	WMS_DEFAULT_REASON K1,
				DC_MST		K2,
				ITEM_MST	K3,
				CMCODE		K4				
		WHERE	K1.DC_ID			= K2.DC_ID
		AND		K1.ITEM_ID			= K3.ITEM_ID
		AND		K1.WMS_REASON		= K4.CODE_CD(+)	
		AND		K4.CODE_GRP(+) 		= 'LDIV11'
		AND		K3.ITYPE	LIKE '%'||'$!{itype}'||'%'
		--AND		K3.ITYPE	IN ('FERT','HAWA')
		AND		K1.CNFM_DATE	= 	'$!{cnfm_date}'
		AND		K1.SCM_REASON	= 	'$!{reason}'
		#if("$!{search_type}" == "1020")
		AND		K3.DIVISION	IN ('10','20')
		#elseif("$!{search_type}" != "")		
		AND     K3.DIVISION        = '$!{search_type}'	
		#end 
		GROUP
		BY		K1.DC_ID,
				K2.DC_SHORT_NAME,
				K1.ITEM_ID,
				K3.ITEM_NAME,
				K4.CODE_NM,
				K4.CODE_CD,
				K1.WMS_REASON,
				K1.SCM_REASON,
				K1.BIGO	
		#if("$!{reason}" == "0") 
		HAVING 	ROUND(SUM(ODER_BOX)-SUM(CONFIRM_BOX),0) > 0
		#end		
		ORDER
		BY		1
		
	</query> 		
	
	<!-- WMS 출고마감별 사유관리 팝업 (배정미납)  --> 
	<query id="ip_05040_WMS_CloseInfo_Scm_list_pop2" paging="false"> 
								
		SELECT 	ITEM_ID,
                ITEM_NAME,
                MAX(SALES_MEAN_1MONTH),
                MAX(MODI_BOX),
                MAX(QTY),
                CASE	WHEN MAX(SALES_MEAN_1MONTH) - MAX(QTY) > 0
                		THEN MAX(SALES_MEAN_1MONTH) - MAX(QTY)
                		ELSE 0
                		END	 MINAP
                FROM              
                   (								   		  				
                    SELECT  WMS.ITEM_ID,
                    		IM.ITEM_NAME,
                            ROUND(SUM(WMS.CONFIRM_BOX)/CNT,0)  SALES_MEAN_1MONTH,
                            0		MODI_BOX,
                            0		QTY	                                    
                    FROM    WMS_DEFAULT_REASON      WMS, 
                            ITEM_MST      IM,
                            (
                            SELECT  SUM(1) CNT
                            FROM    CAL_MST
                            WHERE   CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),-1),'MM') AND 
                            LAST_DAY(TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),-1),'MM'))
                            AND     HOLIDAY_FLAG IS NULL                                        
                            )CAL                                                                                                               
                    WHERE   WMS.ITEM_ID      = IM.ITEM_ID
                    AND     WMS.ITEM_ID     IN (SELECT   DISTINCT PROD_CODE        
                            FROM     SDORT203
                            WHERE    CNFM_DATE BETWEEN TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
                            AND      ALLOC_REASON='21'    --사유 : 재고부족
                            AND      ALLOC_ZONE='01')
                    AND		(IM.ITEM_ID	LIKE '%'||'$!{item_id}'||'%'
							OR IM.ITEM_NAME	LIKE '%'||'$!{item_name}'||'%')
                    AND     WMS.CNFM_DATE  BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),-1),'MM'),'YYYYMMDD') AND 
                            TO_CHAR(LAST_DAY(TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),-1),'MM')),'YYYYMMDD')
                    #if("$!{search_type}" == "1020")
					AND		IM.DIVISION	IN ('10','20')
					#elseif("$!{search_type}" != "")		
					AND     IM.DIVISION   = '$!{search_type}'	
					#end
					#if("$!{itype}" == "FERT")
					AND		IM.ITYPE = 'FERT'       				  
					#elseif("$!{itype}" == "HAWA")
					AND		IM.ITYPE = 'HAWA'
					#end
                    GROUP 
                    BY      WMS.ITEM_ID,
                    		IM.ITEM_NAME,
                            CNT
                    UNION ALL  
 					SELECT	SD.PROD_CODE		ITEM_ID,
        					IM.ITEM_NAME,
        					0					SALES_MEAN_1MONTH,        
        					SUM(SD.MODI_BOX) 	MODI_BOX,
        					0					QTY
					FROM	SDORT204 SD, 
							(
							SELECT 	DISTINCT CNFM_DATE, PROD_CODE, DEPT_CODE		
							FROM 	SDORT203
							WHERE 	CNFM_DATE = '$!{cnfm_date}'
							AND 	ALLOC_REASON='21'    --사유 : 재고부족
							AND 	ALLOC_ZONE='01'	
							)SD2,							
							ITEM_MST IM
					WHERE	SD.CNFM_DATE = SD2.CNFM_DATE
					AND		SD.PROD_CODE = IM.ITEM_ID					
					AND		SD.CNFM_DATE = '$!{cnfm_date}'
					AND		SD.PROD_CODE = SD2.PROD_CODE
					AND		SD.DEPT_CODE = SD2.DEPT_CODE
					#if("$!{itype}" == "FERT")
					AND		IM.ITYPE = 'FERT'       				   
					#elseif("$!{itype}" == "HAWA")
					AND		IM.ITYPE = 'HAWA'
					#end					
					#if("$!{search_type}" == "1020")
					AND		IM.DIVISION	IN ('10','20')
					#elseif("$!{search_type}" != "")		
					AND     IM.DIVISION        = '$!{search_type}'	
					#end
					GROUP
					BY		SD.PROD_CODE, IM.ITEM_NAME
					UNION ALL
                    SELECT	WMS.ITEM_ID	ITEM_ID,
                    		IM.ITEM_NAME,
                            0						SALES_MEAN_1MONTH,        
        					0 						MODI_BOX,
        					SUM(WMS.CONFIRM_BOX)	QTY
                    FROM	WMS_DEFAULT_REASON WMS, 
                    		ITEM_MST IM,
                    		(
							SELECT 	DISTINCT CNFM_DATE, PROD_CODE		
							FROM 	SDORT203
							WHERE 	CNFM_DATE = '$!{cnfm_date}'
							AND 	ALLOC_REASON='21'    --사유 : 재고부족
							AND 	ALLOC_ZONE='01'	
							)SD2
                    WHERE	WMS.ITEM_ID		= IM.ITEM_ID
                    AND		WMS.CNFM_DATE	= '$!{cnfm_date}'                   
                    AND		WMS.ITEM_ID  	= SD2.PROD_CODE
                    AND		WMS.CNFM_DATE 	= SD2.CNFM_DATE
					#if("$!{itype}" == "FERT")
					AND		IM.ITYPE = 'FERT'       				
					#elseif("$!{itype}" == "HAWA")
					AND		IM.ITYPE = 'HAWA'
					#end					
					#if("$!{search_type}" == "1020")
					AND		IM.DIVISION	IN ('10','20')
					#elseif("$!{search_type}" != "")		
					AND     IM.DIVISION        = '$!{search_type}'	
					#end
					GROUP
					BY		WMS.ITEM_ID, IM.ITEM_NAME 
					)
		GROUP BY   ITEM_ID, ITEM_NAME


		
	</query>
	
	<!-- 재고부족 배송결품분석  --> 
	<query id="ip_05030_DelvShortageAnal_list" paging="false"> 
	
		SELECT	S1.DC_ID,
				f_getdcname(S1.DC_ID)	DC_NAME,
				S1.ITEM_ID,
				S4.ITEM_NAME,
				NVL(S2.RECEIPT_PRE,0)		RECEIPT_PRE,
				NVL(S2.BASE_STOCK,0)	BASE_STOCK,
				NVL(S2.RECEIPT,0)		RECEIPT,
				NVL(S2.ISSUE,0)		ISSUE,
				S1.ORDER_QTY,
				S1.CONFIRM_QTY,
				S1.TERM,
				S1.ORDER_CNT,
				TO_CHAR(S1.MIN_CLOS_DTTM,'YYYY-MM-DD HH24:MI:SS'),
				TO_CHAR(S1.MAX_CLOS_DTTM,'YYYY-MM-DD HH24:MI:SS'),
				S3.SRC_LOC,
				f_getdcname(S3.SRC_LOC)	SRC_DC_NAME,
				S3.BRAND_NO,
				f_get_code_name('TRANS_STATE',S3.TRANS_STATE) TRANS_STATE,
				SHORTAGE_DIV,
				S3.QTY,
				S3.CHGO_QTY,
				TO_CHAR(S3.CHGO_DTTM,'YYYY-MM-DD HH24:MI:SS'),
				S3.IPGO_QTY,
				TO_CHAR(S3.IPGO_DTTM,'YYYY-MM-DD HH24:MI:SS')
		FROM	(
				/* 결품정보 */
				SELECT	K1.DC_ID,
						K1.ITEM_ID,
						SUM(ORDER_QTY)					ORDER_QTY,
						SUM(CONFIRM_QTY)				CONFIRM_QTY,
						SUM(ORDER_QTY)-SUM(CONFIRM_QTY)	TERM,
						MIN(MIN_CLOS_DTTM)				MIN_CLOS_DTTM,
						MAX(MAX_CLOS_DTTM)				MAX_CLOS_DTTM,
						SUM(ORDER_CNT)					ORDER_CNT,
						MAX(REG_DTTM)					REG_DTTM
				FROM	(
						SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
								T2.ITEM_CD					ITEM_ID,
								SUM(T2.ORDER_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
								SUM(T2.CONFIRM_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY,
								MIN(T2.ENTRY_DATETIME)											MIN_CLOS_DTTM,
								MAX(T2.ENTRY_DATETIME)											MAX_CLOS_DTTM,
								COUNT(T2.ITEM_CD)												ORDER_CNT,
								MAX(T1.REG_DATETIME)											REG_DTTM
						FROM	LO020NM	T1,
								LO020ND	T2,
								CMITEM	ITM
						WHERE	T1.CENTER_CD		= T2.CENTER_CD
						AND		T1.BRAND_CD			= T2.BRAND_CD
						AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
						AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
						AND		T1.BRAND_CD			= '100001'	
						AND		T1.INOUT_CD			LIKE 'D1%'
						AND		T1.OUTBOUND_DATE	= '$!{in_work_date}'
						AND		T2.ITEM_CD			= ITM.ITEM_CD
						AND		TRIM(T2.BRAND_NO)	IS NOT NULL
						AND		T2.SHORTAGE_DIV		= '11' /* 재고부족 */
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,8),
								T2.ITEM_CD
						UNION	ALL
						SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
								T2.ITEM_CD					ITEM_ID,
								SUM(T2.ORDER_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
								SUM(T2.CONFIRM_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY,
								MIN(T2.ENTRY_DATETIME)											MIN_CLOS_DTTM,
								MAX(T2.ENTRY_DATETIME)											MAX_CLOS_DTTM,
								COUNT(T2.ITEM_CD)												ORDER_CNT,
								MAX(T1.REG_DATETIME)											REG_DTTM
						FROM	LO020NM_G	T1,
								LO020ND_G	T2,
								CMITEM	ITM
						WHERE	T1.CENTER_CD		= T2.CENTER_CD
						AND		T1.BRAND_CD			= T2.BRAND_CD
						AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
						AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
						AND		T1.BRAND_CD			= '100001'	
						AND		T1.INOUT_CD			LIKE 'D1%'
						AND		T1.OUTBOUND_DATE	= '$!{in_work_date}'
						AND		T2.ITEM_CD			= ITM.ITEM_CD
						AND		TRIM(T2.BRAND_NO)	IS NOT NULL
						AND		T2.SHORTAGE_DIV		= '11' /* 재고부족 */
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,8),
								T2.ITEM_CD
						UNION	ALL
						SELECT	SUBSTR(T1.CENTER_CD,5,8)	DC_ID,
								T2.ITEM_CD					ITEM_ID,
								SUM(T2.ORDER_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			ORDER_QTY,
								SUM(T2.CONFIRM_QTY/
									DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))			CONFIRM_QTY,
								MIN(T2.ENTRY_DATETIME)											MIN_CLOS_DTTM,
								MAX(T2.ENTRY_DATETIME)											MAX_CLOS_DTTM,
								COUNT(T2.ITEM_CD)												ORDER_CNT,
								MAX(T1.REG_DATETIME)											REG_DTTM	
						FROM	LO020NM_P	T1,
								LO020ND_P	T2,
								CMITEM	ITM
						WHERE	T1.CENTER_CD		= T2.CENTER_CD
						AND		T1.BRAND_CD			= T2.BRAND_CD
						AND		T1.OUTBOUND_DATE	= T2.OUTBOUND_DATE
						AND		T1.OUTBOUND_NO		= T2.OUTBOUND_NO
						AND		T1.BRAND_CD			= '100001'	
						AND		T1.INOUT_CD			LIKE 'D1%'
						AND		T1.OUTBOUND_DATE	= '$!{in_work_date}'
						AND		T2.ITEM_CD			= ITM.ITEM_CD
						AND		TRIM(T2.BRAND_NO)	IS NOT NULL
						AND		T2.SHORTAGE_DIV		= '11' /* 재고부족 */
						GROUP
						BY		SUBSTR(T1.CENTER_CD,5,8),
								T2.ITEM_CD
						)			K1
				GROUP
				BY		K1.DC_ID,
						K1.ITEM_ID
				)	S1,
				(
				/* 재고,입출고정보 */
				SELECT	DC_ID,
						ITEM_ID,
						RECEIPT_PRE,
						BASE_STOCK,
						RECEIPT+RECEIPT_EXPT	RECEIPT,
						ISSUE+ISSUE_EXPT		ISSUE
				FROM	DC_DATAWAREHOUSE
				WHERE	CNFM_DATE	= REPLACE('$!{in_work_date}','-','')
				)	S2,
				(
				/* 수송계획 정보 */
				SELECT	TGT_LOC	DC_ID,
						SRC_LOC,
						ITEM_ID,
						BRAND_NO,
						TRANS_STATE,
						QTY,
						CHGO_QTY,
						CHGO_DTTM,
						IPGO_QTY,
						IPGO_DTTM,
						f_get_WMScode_name('LDIV11',SHORTAGE_DIV) SHORTAGE_DIV
				FROM	IF_TRANS_PLAN
				WHERE	TRANS_DATE	=	(
										SELECT	MAX(CAL_DATE)
										FROM	CAL_MST
										WHERE	CAL_DATE		&lt; '$!{in_work_date}'
										AND		HOLIDAY_FLAG	IS NULL
										) 
				)	S3,
				ITEM_MST	S4	
		WHERE	S1.DC_ID	= S2.DC_ID(+)
		AND		S1.DC_ID	= S3.DC_ID(+)
		AND		S1.ITEM_ID	= S2.ITEM_ID(+)
		AND		S1.ITEM_ID	= S3.ITEM_ID(+)	
		AND		S1.ITEM_ID	= S4.ITEM_ID
		ORDER
		BY		S1.DC_ID,
				S1.ITEM_ID,
				S3.SRC_LOC,
				S3.BRAND_NO
		
	</query> 

	<!-- 
	=======================
	  판매계획vs실적 조회
	=======================
	-->	

	<!-- 판매계획vs실적 조회 조회단위  --> 
	<query id="ip_06020_SALES_PLAN_VS_ACT" paging="false"> 

		SELECT	CD,
				CD_NAME
		FROM	CODE_MST, DUAL
		WHERE	CD_GRP	LIKE 'SALES_PLAN_VS_ACT'
		AND		TO_NUMBER(CD) 		>= TO_NUMBER('$!{in_dept_grad_code}')
		ORDER
		BY		TO_NUMBER(CD)

	</query> 


	<!-- 판매계획vs실적 조회  --> 
	<query id="ip_06020_SalesPlan_vs_Act_list" paging="false"> 

		/* 일간(D) */
		#if("$!{in_sel_type}" == "20")
		
		/* 사업부단위 조회 */
		SELECT	DECODE(ROLL_GUBN,0,NULL,K5.DEPT_CODE)	PRIO_DEPT_CODE,
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K5.DEPT_NAME
				END	PRIO_DEPT_NAME,
				DECODE(ROLL_GUBN,0,NULL,K4.DEPT_CODE)	DEPT_CODE,
				DECODE(ROLL_GUBN,0,NULL,K4.DEPT_NAME)	DEPT_NAME,
				NVL(SUM(GL.GOAL_BOX),0)		GOAL_BOX,
				DECODE(K2.GUBN,'01','판매계획','판매실적')	GUBN,
				NVL(SUM(TERM_SUM),0)		TERM_SUM,
				NVL(SUM(D01),0)				D01,
				NVL(SUM(D02),0)				D02,
				NVL(SUM(D03),0)				D03,
				NVL(SUM(D04),0)				D04,
				NVL(SUM(D05),0)				D05,
				NVL(SUM(D06),0)				D06,
				NVL(SUM(D07),0)				D07,
				NVL(SUM(D08),0)				D08,
				NVL(SUM(D09),0)				D09,
				NVL(SUM(D10),0)				D10,
				NVL(SUM(D11),0)				D11,
				NVL(SUM(D12),0)				D12,
				NVL(SUM(D13),0)				D13,
				NVL(SUM(D14),0)				D14,
				NVL(SUM(D15),0)				D15,
				NVL(SUM(D16),0)				D16,
				NVL(SUM(D17),0)				D17,
				NVL(SUM(D18),0)				D18,
				NVL(SUM(D19),0)				D19,
				NVL(SUM(D20),0)				D20,
				NVL(SUM(D21),0)				D21,
				NVL(SUM(D22),0)				D22,
				NVL(SUM(D23),0)				D23,
				NVL(SUM(D24),0)				D24,
				NVL(SUM(D25),0)				D25,
				NVL(SUM(D26),0)				D26,
				NVL(SUM(D27),0)				D27,
				NVL(SUM(D28),0)				D28,
				NVL(SUM(D29),0)				D29,
				NVL(SUM(D30),0)				D30,
				NVL(SUM(D31),0)             D31         
		FROM	(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				/* 판매계획 */
				SELECT	SALES_LOC,
						'01'		GUBN,
						SUM(PLAN_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,PLAN_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,PLAN_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,PLAN_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,PLAN_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,PLAN_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,PLAN_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,PLAN_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,PLAN_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,PLAN_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,PLAN_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,PLAN_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,PLAN_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,PLAN_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,PLAN_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,PLAN_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,PLAN_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,PLAN_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,PLAN_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,PLAN_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,PLAN_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,PLAN_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,PLAN_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,PLAN_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,PLAN_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,PLAN_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,PLAN_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,PLAN_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,PLAN_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,PLAN_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,PLAN_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,PLAN_BOX))	D31
				FROM	(				
						/* 판매계획 */
						SELECT	S1.SALES_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')			SALE_DATE,
								SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY)	PLAN_BOX
						FROM	NFOS_SALES_PLAN_WEEKLY	S1,
								V_NFOS_PLAN_VERSION		S2,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)						D2
						WHERE	S1.YYYY		= S2.YYYY
						AND		S1.VERSION	= S2.VERSION
						AND		S1.YYYYMMDD	= S2.YYYYMMDD
						AND		S1.ITEM_ID	= D2.ITEM_ID
						AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						GROUP
						BY		S1.SALES_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')	
						)
				GROUP
				BY		SALES_LOC	
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				/* 실적 */
				SELECT	SALES_LOC,
						'02'		GUBN,
						SUM(SELL_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,SELL_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,SELL_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,SELL_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,SELL_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,SELL_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,SELL_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,SELL_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,SELL_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,SELL_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,SELL_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,SELL_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,SELL_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,SELL_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,SELL_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,SELL_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,SELL_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,SELL_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,SELL_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,SELL_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,SELL_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,SELL_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,SELL_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,SELL_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,SELL_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,SELL_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,SELL_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,SELL_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,SELL_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,SELL_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,SELL_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,SELL_BOX))	D31
				FROM	(				
						/* 실적취합당시 조직으로! */
						SELECT	DEPT_CODE						SALES_LOC,
								TO_DATE(CNFM_DATE,'YYYY-MM-DD')	SALE_DATE,
								SUM(SELL_BOX)					SELL_BOX
						FROM	SDRDT103	D1,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)			D2
						WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						AND		SELL_GUBN_CODE	= '01'
						AND		D1.PROD_CODE	= D2.ITEM_ID
						GROUP
						BY		DEPT_CODE,
								TO_DATE(CNFM_DATE,'YYYY-MM-DD')
						)
				GROUP
				BY		SALES_LOC
			#end
				)			K1,
				(
				/* 당월목표 */
				SELECT	DEPT_CODE		SALES_LOC,
						SUM(GOAL_BOX)	GOAL_BOX
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				GROUP
				BY		DEPT_CODE
				)			GL,
				(
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'01'	GUBN --판매계획용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				UNION	ALL
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'02'	GUBN --판매실적용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				)			K2,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K3,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K4,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K5,
				(
				/* 합계를 구하기 위한 부분 */
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
			#end
				)			K6,
				(
				/* 조회대상 영업지점 조회 */
				/* 판매계획 */
				SELECT	DISTINCT	S1.SALES_LOC	DEPT_CODE
				FROM	NFOS_SALES_PLAN_WEEKLY	S1,
						V_NFOS_PLAN_VERSION		S2,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)						D2
				WHERE	S1.YYYY		= S2.YYYY
				AND		S1.VERSION	= S2.VERSION
				AND		S1.YYYYMMDD	= S2.YYYYMMDD
				AND		S1.ITEM_ID	= D2.ITEM_ID
				AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				HAVING	SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) != 0
				GROUP
				BY		S1.SALES_LOC
				UNION		
				/* 실적취합당시 조직으로! */
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDRDT103	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				AND		SELL_GUBN_CODE	= '01'
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(SELL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				UNION		
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(GOAL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				)			K7
		WHERE	K2.DEPT_CODE	= K1.SALES_LOC(+) 
		AND		K2.DEPT_CODE	= GL.SALES_LOC(+)
		AND		K2.PRIO_DEPT_CODE = K3.DEPT_CODE
		AND		K3.PRIO_DEPT_CODE = K4.DEPT_CODE
		AND		K4.PRIO_DEPT_CODE = K5.DEPT_CODE
		AND		K2.GUBN				= K1.GUBN(+)
		AND		K2.GUBN				= K6.GUBN
		AND		K2.DEPT_CODE		= K7.DEPT_CODE
		GROUP
		BY		DECODE(ROLL_GUBN,0,NULL,K5.DEPT_CODE),
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K5.DEPT_NAME
				END,
				DECODE(ROLL_GUBN,0,NULL,K4.DEPT_CODE),
				DECODE(ROLL_GUBN,0,NULL,K4.DEPT_NAME),
				K2.GUBN
		ORDER
		BY		PRIO_DEPT_CODE,	DEPT_CODE,
				GUBN

		#elseif("$!{in_sel_type}" == "30")

		/* 영업부단위 조회 */
		SELECT	DECODE(ROLL_GUBN,0,NULL,K4.DEPT_CODE)	PRIO_DEPT_CODE,
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K4.DEPT_NAME
				END	PRIO_DEPT_NAME,
				DECODE(ROLL_GUBN,0,NULL,K3.DEPT_CODE)	DEPT_CODE,
				DECODE(ROLL_GUBN,0,NULL,K3.DEPT_NAME)	DEPT_NAME,
				NVL(SUM(GL.GOAL_BOX),0)		GOAL_BOX,
				DECODE(K2.GUBN,'01','판매계획','판매실적')	GUBN,
				NVL(SUM(TERM_SUM),0)		TERM_SUM,
				NVL(SUM(D01),0)				D01,
				NVL(SUM(D02),0)				D02,
				NVL(SUM(D03),0)				D03,
				NVL(SUM(D04),0)				D04,
				NVL(SUM(D05),0)				D05,
				NVL(SUM(D06),0)				D06,
				NVL(SUM(D07),0)				D07,
				NVL(SUM(D08),0)				D08,
				NVL(SUM(D09),0)				D09,
				NVL(SUM(D10),0)				D10,
				NVL(SUM(D11),0)				D11,
				NVL(SUM(D12),0)				D12,
				NVL(SUM(D13),0)				D13,
				NVL(SUM(D14),0)				D14,
				NVL(SUM(D15),0)				D15,
				NVL(SUM(D16),0)				D16,
				NVL(SUM(D17),0)				D17,
				NVL(SUM(D18),0)				D18,
				NVL(SUM(D19),0)				D19,
				NVL(SUM(D20),0)				D20,
				NVL(SUM(D21),0)				D21,
				NVL(SUM(D22),0)				D22,
				NVL(SUM(D23),0)				D23,
				NVL(SUM(D24),0)				D24,
				NVL(SUM(D25),0)				D25,
				NVL(SUM(D26),0)				D26,
				NVL(SUM(D27),0)				D27,
				NVL(SUM(D28),0)				D28,
				NVL(SUM(D29),0)				D29,
				NVL(SUM(D30),0)				D30,
				NVL(SUM(D31),0)             D31         
		FROM	(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				/* 판매계획 */
				SELECT	SALES_LOC,
						'01'		GUBN,
						SUM(PLAN_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,PLAN_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,PLAN_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,PLAN_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,PLAN_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,PLAN_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,PLAN_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,PLAN_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,PLAN_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,PLAN_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,PLAN_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,PLAN_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,PLAN_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,PLAN_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,PLAN_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,PLAN_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,PLAN_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,PLAN_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,PLAN_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,PLAN_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,PLAN_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,PLAN_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,PLAN_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,PLAN_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,PLAN_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,PLAN_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,PLAN_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,PLAN_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,PLAN_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,PLAN_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,PLAN_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,PLAN_BOX))	D31
				FROM	(				
						/* 판매계획 */
						SELECT	S1.SALES_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')			SALE_DATE,
								SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY)	PLAN_BOX
						FROM	NFOS_SALES_PLAN_WEEKLY	S1,
								V_NFOS_PLAN_VERSION		S2,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)						D2
						WHERE	S1.YYYY		= S2.YYYY
						AND		S1.VERSION	= S2.VERSION
						AND		S1.YYYYMMDD	= S2.YYYYMMDD
						AND		S1.ITEM_ID	= D2.ITEM_ID
						AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						GROUP
						BY		S1.SALES_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')	
						)
				GROUP
				BY		SALES_LOC	
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				/* 실적 */
				SELECT	SALES_LOC,
						'02'		GUBN,
						SUM(SELL_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,SELL_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,SELL_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,SELL_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,SELL_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,SELL_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,SELL_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,SELL_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,SELL_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,SELL_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,SELL_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,SELL_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,SELL_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,SELL_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,SELL_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,SELL_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,SELL_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,SELL_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,SELL_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,SELL_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,SELL_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,SELL_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,SELL_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,SELL_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,SELL_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,SELL_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,SELL_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,SELL_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,SELL_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,SELL_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,SELL_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,SELL_BOX))	D31
				FROM	(				
						/* 실적취합당시 조직으로! */
						SELECT	DEPT_CODE						SALES_LOC,
								TO_DATE(CNFM_DATE,'YYYY-MM-DD')	SALE_DATE,
								SUM(SELL_BOX)					SELL_BOX
						FROM	SDRDT103	D1,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)			D2
						WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						AND		SELL_GUBN_CODE	= '01'
						AND		D1.PROD_CODE	= D2.ITEM_ID
						GROUP
						BY		DEPT_CODE,
								TO_DATE(CNFM_DATE,'YYYY-MM-DD')
						)
				GROUP
				BY		SALES_LOC
			#end
				)			K1,
				(
				/* 당월목표 */
				SELECT	DEPT_CODE		SALES_LOC,
						SUM(GOAL_BOX)	GOAL_BOX
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				GROUP
				BY		DEPT_CODE
				)			GL,
				(
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'01'	GUBN --판매계획용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				UNION	ALL
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'02'	GUBN --판매실적용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				)			K2,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K3,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K4,
				(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
			#end				
				)			K6,
				(
				/* 조회대상 영업지점 조회 */
				/* 판매계획 */
				SELECT	DISTINCT	S1.SALES_LOC	DEPT_CODE
				FROM	NFOS_SALES_PLAN_WEEKLY	S1,
						V_NFOS_PLAN_VERSION		S2,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)						D2
				WHERE	S1.YYYY		= S2.YYYY
				AND		S1.VERSION	= S2.VERSION
				AND		S1.YYYYMMDD	= S2.YYYYMMDD
				AND		S1.ITEM_ID	= D2.ITEM_ID
				AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				HAVING	SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) != 0
				GROUP
				BY		S1.SALES_LOC
				UNION		
				/* 실적취합당시 조직으로! */
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDRDT103	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				AND		SELL_GUBN_CODE	= '01'
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(SELL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				UNION		
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(GOAL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				)			K7
		WHERE	K2.DEPT_CODE	= K1.SALES_LOC(+) 
		AND		K2.DEPT_CODE	= GL.SALES_LOC(+)
		AND		K2.PRIO_DEPT_CODE = K3.DEPT_CODE
		AND		K3.PRIO_DEPT_CODE = K4.DEPT_CODE
		AND		K2.GUBN				= K1.GUBN(+)
		AND		K2.GUBN				= K6.GUBN
		AND		K2.DEPT_CODE		= K7.DEPT_CODE
		GROUP
		BY		DECODE(ROLL_GUBN,0,NULL,K4.DEPT_CODE),
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K4.DEPT_NAME
				END,
				DECODE(ROLL_GUBN,0,NULL,K3.DEPT_CODE),
				DECODE(ROLL_GUBN,0,NULL,K3.DEPT_NAME),
				K2.GUBN
		ORDER
		BY		PRIO_DEPT_CODE,	DEPT_CODE,
				GUBN

		#elseif("$!{in_sel_type}" == "40")
		
		/* 지점단위 조회 */
		SELECT	DECODE(ROLL_GUBN,0,NULL,K3.DEPT_CODE)	PRIO_DEPT_CODE,
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K3.DEPT_NAME
				END	PRIO_DEPT_NAME,
				DECODE(ROLL_GUBN,0,NULL,K2.DEPT_CODE)	DEPT_CODE,
				DECODE(ROLL_GUBN,0,NULL,K2.DEPT_NAME)	DEPT_NAME,
				NVL(SUM(GL.GOAL_BOX),0)		GOAL_BOX,
				DECODE(K2.GUBN,'01','판매계획','판매실적')	GUBN,
				NVL(SUM(TERM_SUM),0)		TERM_SUM,
				NVL(SUM(D01),0)				D01,
				NVL(SUM(D02),0)				D02,
				NVL(SUM(D03),0)				D03,
				NVL(SUM(D04),0)				D04,
				NVL(SUM(D05),0)				D05,
				NVL(SUM(D06),0)				D06,
				NVL(SUM(D07),0)				D07,
				NVL(SUM(D08),0)				D08,
				NVL(SUM(D09),0)				D09,
				NVL(SUM(D10),0)				D10,
				NVL(SUM(D11),0)				D11,
				NVL(SUM(D12),0)				D12,
				NVL(SUM(D13),0)				D13,
				NVL(SUM(D14),0)				D14,
				NVL(SUM(D15),0)				D15,
				NVL(SUM(D16),0)				D16,
				NVL(SUM(D17),0)				D17,
				NVL(SUM(D18),0)				D18,
				NVL(SUM(D19),0)				D19,
				NVL(SUM(D20),0)				D20,
				NVL(SUM(D21),0)				D21,
				NVL(SUM(D22),0)				D22,
				NVL(SUM(D23),0)				D23,
				NVL(SUM(D24),0)				D24,
				NVL(SUM(D25),0)				D25,
				NVL(SUM(D26),0)				D26,
				NVL(SUM(D27),0)				D27,
				NVL(SUM(D28),0)				D28,
				NVL(SUM(D29),0)				D29,
				NVL(SUM(D30),0)				D30,
				NVL(SUM(D31),0)             D31         
		FROM	(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				/* 판매계획 */
				SELECT	SALES_LOC,
						'01'		GUBN,
						SUM(PLAN_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,PLAN_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,PLAN_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,PLAN_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,PLAN_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,PLAN_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,PLAN_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,PLAN_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,PLAN_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,PLAN_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,PLAN_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,PLAN_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,PLAN_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,PLAN_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,PLAN_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,PLAN_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,PLAN_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,PLAN_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,PLAN_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,PLAN_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,PLAN_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,PLAN_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,PLAN_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,PLAN_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,PLAN_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,PLAN_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,PLAN_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,PLAN_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,PLAN_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,PLAN_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,PLAN_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,PLAN_BOX))	D31
				FROM	(				
						/* 판매계획 */
						SELECT	S1.SALES_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')			SALE_DATE,
								SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY)	PLAN_BOX
						FROM	NFOS_SALES_PLAN_WEEKLY	S1,
								V_NFOS_PLAN_VERSION		S2,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)						D2
						WHERE	S1.YYYY		= S2.YYYY
						AND		S1.VERSION	= S2.VERSION
						AND		S1.YYYYMMDD	= S2.YYYYMMDD
						AND		S1.ITEM_ID	= D2.ITEM_ID
						AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						GROUP
						BY		S1.SALES_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')	
						)
				GROUP
				BY		SALES_LOC	
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				/* 실적 */
				SELECT	SALES_LOC,
						'02'		GUBN,
						SUM(SELL_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,SELL_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,SELL_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,SELL_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,SELL_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,SELL_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,SELL_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,SELL_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,SELL_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,SELL_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,SELL_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,SELL_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,SELL_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,SELL_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,SELL_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,SELL_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,SELL_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,SELL_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,SELL_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,SELL_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,SELL_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,SELL_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,SELL_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,SELL_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,SELL_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,SELL_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,SELL_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,SELL_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,SELL_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,SELL_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,SELL_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,SELL_BOX))	D31
				FROM	(				
						/* 실적취합당시 조직으로! */
						SELECT	DEPT_CODE						SALES_LOC,
								TO_DATE(CNFM_DATE,'YYYY-MM-DD')	SALE_DATE,
								SUM(SELL_BOX)					SELL_BOX
						FROM	SDRDT103	D1,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)			D2
						WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						AND		SELL_GUBN_CODE	= '01'
						AND		D1.PROD_CODE	= D2.ITEM_ID
						GROUP
						BY		DEPT_CODE,
								TO_DATE(CNFM_DATE,'YYYY-MM-DD')
						)
				GROUP
				BY		SALES_LOC
			#end
				)			K1,
				(
				/* 당월목표 */
				SELECT	DEPT_CODE		SALES_LOC,
						SUM(GOAL_BOX)	GOAL_BOX
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				GROUP
				BY		DEPT_CODE
				)			GL,
				(
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'01'	GUBN --판매계획용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				UNION	ALL
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'02'	GUBN --판매실적용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				)			K2,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K3,
				(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
			#end				
				)			K6,
				(
				/* 조회대상 영업지점 조회 */
				/* 판매계획 */
				SELECT	DISTINCT	S1.SALES_LOC	DEPT_CODE
				FROM	NFOS_SALES_PLAN_WEEKLY	S1,
						V_NFOS_PLAN_VERSION		S2,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)						D2
				WHERE	S1.YYYY		= S2.YYYY
				AND		S1.VERSION	= S2.VERSION
				AND		S1.YYYYMMDD	= S2.YYYYMMDD
				AND		S1.ITEM_ID	= D2.ITEM_ID
				AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				HAVING	SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) != 0
				GROUP
				BY		S1.SALES_LOC
				UNION		
				/* 실적취합당시 조직으로! */
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDRDT103	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				AND		SELL_GUBN_CODE	= '01'
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(SELL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				UNION		
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(GOAL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				)			K7
		WHERE	K2.DEPT_CODE	= K1.SALES_LOC(+) 
		AND		K2.DEPT_CODE	= GL.SALES_LOC(+)
		AND		K2.PRIO_DEPT_CODE = K3.DEPT_CODE
		AND		K2.GUBN				= K1.GUBN(+)
		AND		K2.GUBN				= K6.GUBN
		AND		K2.DEPT_CODE		= K7.DEPT_CODE
		GROUP
		BY		DECODE(ROLL_GUBN,0,NULL,K3.DEPT_CODE),
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K3.DEPT_NAME
				END,
				DECODE(ROLL_GUBN,0,NULL,K2.DEPT_CODE),
				DECODE(ROLL_GUBN,0,NULL,K2.DEPT_NAME),
				K2.GUBN
		ORDER
		BY		PRIO_DEPT_CODE,	DEPT_CODE,
				GUBN

		#elseif("$!{in_sel_type}" == "50")
		
		/* 지점-배송지점단위 */
		SELECT	DECODE(ROLL_GUBN,0,NULL,K2.DEPT_CODE)	DEPT_CODE,
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K2.DEPT_NAME
				END	DEPT_NAME,
				DECODE(ROLL_GUBN,0,NULL,NVL(SUM(GL.GOAL_BOX),0))		GOAL_BOX,
				DECODE(ROLL_GUBN,0,NULL,K1.DC_ID)	DC_ID,
				DECODE(ROLL_GUBN,0,NULL,F_GETDCNAME(K1.DC_ID))	DC_NAME,
				DECODE(K2.GUBN,'01','판매계획','판매실적')	GUBN,
				NVL(SUM(TERM_SUM),0)		TERM_SUM,
				NVL(SUM(D01),0)				D01,
				NVL(SUM(D02),0)				D02,
				NVL(SUM(D03),0)				D03,
				NVL(SUM(D04),0)				D04,
				NVL(SUM(D05),0)				D05,
				NVL(SUM(D06),0)				D06,
				NVL(SUM(D07),0)				D07,
				NVL(SUM(D08),0)				D08,
				NVL(SUM(D09),0)				D09,
				NVL(SUM(D10),0)				D10,
				NVL(SUM(D11),0)				D11,
				NVL(SUM(D12),0)				D12,
				NVL(SUM(D13),0)				D13,
				NVL(SUM(D14),0)				D14,
				NVL(SUM(D15),0)				D15,
				NVL(SUM(D16),0)				D16,
				NVL(SUM(D17),0)				D17,
				NVL(SUM(D18),0)				D18,
				NVL(SUM(D19),0)				D19,
				NVL(SUM(D20),0)				D20,
				NVL(SUM(D21),0)				D21,
				NVL(SUM(D22),0)				D22,
				NVL(SUM(D23),0)				D23,
				NVL(SUM(D24),0)				D24,
				NVL(SUM(D25),0)				D25,
				NVL(SUM(D26),0)				D26,
				NVL(SUM(D27),0)				D27,
				NVL(SUM(D28),0)				D28,
				NVL(SUM(D29),0)				D29,
				NVL(SUM(D30),0)				D30,
				NVL(SUM(D31),0)             D31         
		FROM	(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				/* 판매계획 */
				SELECT	SALES_LOC,
						DC_ID,
						'01'		GUBN,
						SUM(PLAN_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,PLAN_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,PLAN_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,PLAN_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,PLAN_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,PLAN_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,PLAN_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,PLAN_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,PLAN_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,PLAN_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,PLAN_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,PLAN_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,PLAN_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,PLAN_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,PLAN_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,PLAN_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,PLAN_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,PLAN_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,PLAN_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,PLAN_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,PLAN_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,PLAN_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,PLAN_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,PLAN_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,PLAN_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,PLAN_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,PLAN_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,PLAN_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,PLAN_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,PLAN_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,PLAN_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,PLAN_BOX))	D31
				FROM	(				
						/* 판매계획 */
						SELECT	S1.SALES_LOC,
								S1.DELIV_LOC	DC_ID,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')			SALE_DATE,
								SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY)	PLAN_BOX
						FROM	NFOS_SALES_PLAN_WEEKLY	S1,
								V_NFOS_PLAN_VERSION		S2,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)						D2
						WHERE	S1.YYYY		= S2.YYYY
						AND		S1.VERSION	= S2.VERSION
						AND		S1.YYYYMMDD	= S2.YYYYMMDD
						AND		S1.ITEM_ID	= D2.ITEM_ID
						AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						GROUP
						BY		S1.SALES_LOC,
								S1.DELIV_LOC,
								TO_DATE(S1.YYYYMMDD,'YYYY-MM-DD')	
						)
				GROUP
				BY		SALES_LOC,
						DC_ID	
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				/* 실적 */
				SELECT	SALES_LOC,
						DC_ID,
						'02'		GUBN,
						SUM(SELL_BOX)																TERM_SUM,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 0,SELL_BOX))	D01,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 1,SELL_BOX))	D02,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 2,SELL_BOX))	D03,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 3,SELL_BOX))	D04,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 4,SELL_BOX))	D05,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 5,SELL_BOX))	D06,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 6,SELL_BOX))	D07,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 7,SELL_BOX))	D08,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 8,SELL_BOX))	D09,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+ 9,SELL_BOX))	D10,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+10,SELL_BOX))	D11,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+11,SELL_BOX))	D12,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+12,SELL_BOX))	D13,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+13,SELL_BOX))	D14,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+14,SELL_BOX))	D15,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+15,SELL_BOX))	D16,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+16,SELL_BOX))	D17,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+17,SELL_BOX))	D18,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+18,SELL_BOX))	D19,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+19,SELL_BOX))	D20,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+20,SELL_BOX))	D21,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+21,SELL_BOX))	D22,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+22,SELL_BOX))	D23,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+23,SELL_BOX))	D24,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+24,SELL_BOX))	D25,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+25,SELL_BOX))	D26,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+26,SELL_BOX))	D27,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+27,SELL_BOX))	D28,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+28,SELL_BOX))	D29,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+29,SELL_BOX))	D30,
						SUM(DECODE(SALE_DATE,to_date('$!{in_fr_date}','YYYY-MM-DD')+30,SELL_BOX))	D31
				FROM	(				
						/* 실적취합당시 조직으로! */
						SELECT	D1.SALES_LOC,
								D1.SALE_DATE,
								D1.DC_ID,
								SUM(SELL_BOX)					SELL_BOX
						FROM	(
								SELECT  A.DEPT_CODE				SALES_LOC    ,
										A.STOR_CODE				DC_ID    ,
										TO_DATE(A.CNFM_DATE,'YYYY-MM-DD')	SALE_DATE,
										B.PROD_CODE				ITEM_ID,
										SUM(
											CASE
											WHEN D.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
												CASE
												WHEN SUBSTR(B.ITEM_CATG,1,2) = 'YO' THEN
													DECODE(B.UPDT_GUBN,'01',B.REQT_BOX,B.SELL_BOX)
												ELSE
													-1*DECODE(B.UPDT_GUBN,'01',B.REQT_BOX,B.SELL_BOX)
												END
											ELSE
												DECODE(B.UPDT_GUBN,'01',B.REQT_BOX,B.SELL_BOX) * D.SIGN1
											END
										)					SELL_BOX        
								FROM    SDORT101    A,
										SDORT102    B,
										(
										SELECT	CODE		ITEM_CATG,
												CODE_NAME4	SIGN1
										FROM	SDSTT500
										WHERE	CODE_GUBN	= 'OR103'
										AND		CODE_NAME2	= 'Y'
										AND		CODE_NAME3	= '01'
										)			D
								WHERE   A.SLIP_NO		= B.SLIP_NO
								AND		SUBSTR(A.SLIP_GUBN_CODE,1,1)	= 'Y'
								AND		SUBSTR(A.SLIP_GUBN_CODE,1,2)	NOT IN ('YR') /* 반품 제외 */
								AND		B.ITEM_CATG			= D.ITEM_CATG(+)
								AND		A.CNFM_DATE			BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
								AND		'$!{in_act_type}'	IN ('00','01')
								GROUP 
								BY		A.DEPT_CODE,
										A.STOR_CODE,
										A.CNFM_DATE,
										B.PROD_CODE
								)	D1,
								(
								SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
								FROM	ITEM_HIST	T1,
										ITEM_MST	T2
								WHERE	END_DATE(+)	= '99991231'
								AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
							#if("$!{in_sel_gubn}" == "01")	
								AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
							#elseif("$!{in_sel_gubn}" == "05")
								AND		(--품종 대중소
										('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
										OR
										('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
										)
							#else
								AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
							#end
								)			D2
						WHERE	D1.ITEM_ID	= D2.ITEM_ID
						GROUP
						BY		D1.SALES_LOC,
								D1.DC_ID,
								D1.SALE_DATE
						)
				GROUP
				BY		SALES_LOC,
						DC_ID
			#end
				)			K1,
				(
				/* 당월목표 */
				SELECT	DEPT_CODE		SALES_LOC,
						SUM(GOAL_BOX)	GOAL_BOX
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				GROUP
				BY		DEPT_CODE
				)			GL,
				(
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'01'	GUBN --판매계획용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				UNION	ALL
				SELECT	DEPT_CODE,
						DEPT_NAME,
						PRIO_DEPT_CODE,
						'02'	GUBN --판매실적용
				FROM	SDSTT401
				WHERE	DEPT_GRAD_CODE	= '40'
				AND		APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				START
				WITH	DEPT_CODE		= '$!{in_sales_loc}'
				CONNECT
				BY		PRIOR DEPT_CODE 		= PRIO_DEPT_CODE
				AND		PRIOR APPL_STRT_YYMM	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR APPL_END_YYMM		&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		PRIOR DEPT_GRAD_CODE	&lt; '40'
				)			K2,
				(
				SELECT	*
				FROM	SDSTT401
				WHERE	APPL_STRT_YYMM 	&lt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		APPL_END_YYMM	&gt;= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				)			K3,
				(
			#if("$!{in_act_type}" != "03") /* 판매실적만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'01'	GUBN
				FROM	DUAL
			#end
			#if("$!{in_act_type}" == "01") /* 판매계획vs실적 조회시 */
				UNION	ALL
			#end
			#if("$!{in_act_type}" != "02") /* 판매계획만 조회시 제외 */
				SELECT	0		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
				UNION	ALL
				SELECT	1		ROLL_GUBN,
						'02'	GUBN
				FROM	DUAL
			#end				
				)			K6,
				(
				/* 조회대상 영업지점 조회 */
				/* 판매계획 */
				SELECT	DISTINCT	S1.SALES_LOC	DEPT_CODE
				FROM	NFOS_SALES_PLAN_WEEKLY	S1,
						V_NFOS_PLAN_VERSION		S2,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)						D2
				WHERE	S1.YYYY		= S2.YYYY
				AND		S1.VERSION	= S2.VERSION
				AND		S1.YYYYMMDD	= S2.YYYYMMDD
				AND		S1.ITEM_ID	= D2.ITEM_ID
				AND		S1.YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				HAVING	SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) != 0
				GROUP
				BY		S1.SALES_LOC
				UNION		
				/* 실적취합당시 조직으로! */
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDRDT103	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_DATE		BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				AND		SELL_GUBN_CODE	= '01'
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(SELL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				UNION		
				SELECT	DISTINCT	DEPT_CODE
				FROM	SDPLT102	D1,
						(
						SELECT	NVL(OLD_ITEM_ID,T2.ITEM_ID)	ITEM_ID
						FROM	ITEM_HIST	T1,
								ITEM_MST	T2
						WHERE	END_DATE(+)	= '99991231'
						AND		NEW_ITEM_ID(+)	= T2.ITEM_ID
					#if("$!{in_sel_gubn}" == "01")	
						AND		T2.ITEM_ID	= '$!{in_item_id}'  --품목코드
					#elseif("$!{in_sel_gubn}" == "05")
						AND		(--품종 대중소
								('$!{in_item_name}' LIKE '대_%' AND SALES_CAT01 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '중_%' AND SALES_CAT02 = '$!{in_item_id}')
								OR
								('$!{in_item_name}' LIKE '소_%' AND SALES_CAT03 = '$!{in_item_id}')
								)
					#else
						AND		T2.HR_TY1 LIKE '$!{in_item_id}'||'%' --사업코드,브랜드,대표코드
					#end
						)			D2
				WHERE	CNFM_YYMM	= TO_CHAR(TO_DATE('$!{in_fr_date}','YYYY-MM-DD'),'YYYYMM')
				AND		D1.PROD_CODE	= D2.ITEM_ID
				HAVING	SUM(GOAL_BOX) != 0
				GROUP
				BY		DEPT_CODE
				)			K7
		WHERE	K2.DEPT_CODE	= K1.SALES_LOC(+) 
		AND		K2.DEPT_CODE	= GL.SALES_LOC(+)
		AND		K2.PRIO_DEPT_CODE = K3.DEPT_CODE
		AND		K2.GUBN				= K1.GUBN(+)
		AND		K2.GUBN				= K6.GUBN
		AND		K2.DEPT_CODE		= K7.DEPT_CODE
		GROUP
		BY		DECODE(ROLL_GUBN,0,NULL,K2.DEPT_CODE),
				CASE 
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '01' THEN '판매계획계'
					WHEN ROLL_GUBN =  0 AND K2.GUBN = '02' THEN '판매실적계'
					ELSE K2.DEPT_NAME
				END,
				DECODE(ROLL_GUBN,0,NULL,K1.DC_ID),
				DECODE(ROLL_GUBN,0,NULL,F_GETDCNAME(K1.DC_ID)),
				K2.GUBN
		ORDER
		BY		DEPT_CODE,DC_ID,
				GUBN

		#else
	
			/* 화면load */
			SELECT	
						''
			FROM	DUAL
			WHERE	1 = 0	
		
		#end

	</query> 

	<!-- 
	=======================
	  SCM품목추적조회
	=======================
	-->	
	<!-- SCM품목추적조회 --> 
	<query id="ip_07010_Item_Trace_list" paging="false"> 
		
		/* SCM품목추적조회_MAIN */
		SELECT	TO_CHAR(T1.INBOUND_DATE,'YYYY-MM-DD'),
				SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
				F_GETDCNAME(SUBSTR(T1.CENTER_CD,5,4))	DC_NAME,
				T1.ITEM_CD,
				ITM.ITEM_NM,
				SUM(T1.CONFIRM_QTY/	
						DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))	IPGO,
				''	BL_NO
		FROM	(
				SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD, CONFIRM_QTY
				FROM	LI030NM
				UNION	ALL
				SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD, CONFIRM_QTY
				FROM	LI030NM_G
				UNION	ALL
				SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD, CONFIRM_QTY
				FROM	LI030NM_P
				)		T1,
				CMITEM	ITM
		WHERE	T1.INBOUND_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
		AND		T1.ITEM_CD		= '$!{in_item_id}'
		AND		T1.ITEM_CD		= ITM.ITEM_CD
		AND		T1.INOUT_CD		IN ('E11','E12')  --생산,매입입고
		GROUP
		BY		T1.INBOUND_DATE,
				SUBSTR(T1.CENTER_CD,5,4),
				T1.ITEM_CD,
				ITM.ITEM_NM
		UNION	ALL
		/* 수입정보 기간,품목,BL */
		SELECT	TO_CHAR(T1.INBOUND_DATE,'YYYY-MM-DD'),
				SUBSTR(T1.CENTER_CD,5,4)	DC_ID,
				F_GETDCNAME(SUBSTR(T1.CENTER_CD,5,4))	DC_NAME,
				T1.ITEM_CD,
				ITM.ITEM_NM,
				SUM(T1.CONFIRM_QTY/	
						DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))	IPGO,
				T2.BL_NO
		FROM	(
				SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
				FROM	LI020NM	T1,
						LI030NM	T2
				WHERE	T1.CENTER_CD	= T2.CENTER_CD
				AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
				AND		T1.BRAND_CD		= T2.BRAND_CD
				AND		T1.INBOUND_NO	= T2.INBOUND_NO
				AND		T1.BRAND_NO		IS NOT NULL
				UNION	ALL
				SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
				FROM	LI020NM_P	T1,
						LI030NM_P	T2
				WHERE	T1.CENTER_CD	= T2.CENTER_CD
				AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
				AND		T1.BRAND_CD		= T2.BRAND_CD
				AND		T1.INBOUND_NO	= T2.INBOUND_NO
				AND		T1.BRAND_NO		IS NOT NULL
				UNION	ALL
				SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
				FROM	LI020NM_G	T1,
						LI030NM_G	T2
				WHERE	T1.CENTER_CD	= T2.CENTER_CD
				AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
				AND		T1.BRAND_CD		= T2.BRAND_CD
				AND		T1.INBOUND_NO	= T2.INBOUND_NO
				AND		T1.BRAND_NO		IS NOT NULL
				)		T1,
				CMITEM	ITM,
				(
				SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
				FROM	LI010NM
				WHERE	ORDER_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
				AND		BL_NO		IS NOT NULL
				AND		INOUT_CD	= 'E13'
				UNION	ALL
				SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
				FROM	LI010NM_G
				WHERE	ORDER_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
				AND		BL_NO		IS NOT NULL
				AND		INOUT_CD	= 'E13'
				UNION	ALL
				SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
				FROM	LI010NM_P
				WHERE	ORDER_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
				AND		BL_NO		IS NOT NULL
				AND		INOUT_CD	= 'E13'
				)		T2
		WHERE	T1.INBOUND_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
		AND		T1.ITEM_CD		LIKE '%'||'$!{in_item_id}'||'%'
		AND		T1.ITEM_CD		= ITM.ITEM_CD
		AND		T1.INOUT_CD		= 'E13'  --수입입고
		AND		T1.CENTER_CD	= T2.CENTER_CD
		AND		T1.BRAND_DATE	= T2.BRAND_DATE
		AND		T1.BRAND_NO		= T2.BRAND_NO
		AND		T2.BL_NO		LIKE '%'||'$!{in_bl_no}'
		GROUP
		BY		T1.INBOUND_DATE,
				SUBSTR(T1.CENTER_CD,5,4),
				T1.ITEM_CD,
				ITM.ITEM_NM,
				T2.BL_NO
		ORDER
		BY		1,2,4

	</query> 	

	<!-- SCM품목추적조회_재고정보 --> 
	<query id="ip_07010_Item_Trace_list2" paging="false"> 

		/* SCM품목추적조회_재고정보 */
		SELECT	SUBSTR(T1.CENTER_CD,5,4)				DC_ID,
				F_GETDCNAME(SUBSTR(T1.CENTER_CD,5,4))	DC_NAME,
				SUM(T1.STOCK_QTY/	
						DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))	STOCK
		FROM	(
				SELECT	CENTER_CD, INBOUND_SEQ, ITEM_CD, STOCK_QTY
				FROM	LS010NM
				UNION	ALL
				SELECT	CENTER_CD, INBOUND_SEQ, ITEM_CD, STOCK_QTY
				FROM	LS010NM_G
				UNION	ALL
				SELECT	CENTER_CD, INBOUND_SEQ, ITEM_CD, STOCK_QTY
				FROM	LS010NM_P
				)		T1,
				(
				/* 생산/국내매입 정보 */
				SELECT	T1.ITEM_CD,
						T1.INBOUND_SEQ
				FROM	(
						SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD
						FROM	LI030NM
						UNION	ALL
						SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD
						FROM	LI030NM_G
						UNION	ALL
						SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD
						FROM	LI030NM_P
						)		T1,
						CMITEM	ITM
				WHERE	T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
				AND		T1.INBOUND_DATE	= '$!{sel_date}'
				AND		T1.ITEM_CD		= '$!{sel_item_id}'
				AND		T1.ITEM_CD		= ITM.ITEM_CD
				AND		T1.INOUT_CD		IN ('E11','E12')  --생산/매입입고
				GROUP
				BY		T1.ITEM_CD,
						T1.INBOUND_SEQ
				UNION	ALL
				/* 수입정보 기간,품목,BL */
				SELECT	DISTINCT
						T1.ITEM_CD,
						T1.INBOUND_SEQ
				FROM	(
						SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
						FROM	LI020NM	T1,
								LI030NM	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.BRAND_NO		IS NOT NULL
						AND		T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		T1.INBOUND_DATE	= '$!{sel_date}'
						AND		T2.ITEM_CD		= '$!{sel_item_id}'
						AND		T1.INOUT_CD		= 'E13'  -- 수입입고
						UNION	ALL
						SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
						FROM	LI020NM_P	T1,
								LI030NM_P	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.BRAND_NO		IS NOT NULL
						AND		T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		T1.INBOUND_DATE	= '$!{sel_date}'
						AND		T2.ITEM_CD		= '$!{sel_item_id}'
						AND		T1.INOUT_CD		= 'E13'  -- 수입입고
						UNION	ALL
						SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
						FROM	LI020NM_G	T1,
								LI030NM_G	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.BRAND_NO		IS NOT NULL
						AND		T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		T1.INBOUND_DATE	= '$!{sel_date}'
						AND		T2.ITEM_CD		= '$!{sel_item_id}'
						AND		T1.INOUT_CD		= 'E13'  -- 수입입고
						)		T1,
						CMITEM	ITM,
						(
						SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
						FROM	LI010NM
						WHERE	CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		ORDER_DATE	= '$!{sel_date}'
						AND		INOUT_CD	= 'E13'  -- 수입입고
						AND		BL_NO		= '$!{sel_bl_no}'
						UNION	ALL
						SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
						FROM	LI010NM_G
						WHERE	CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		ORDER_DATE	= '$!{sel_date}'
						AND		INOUT_CD	= 'E13'  -- 수입입고
						AND		BL_NO		= '$!{sel_bl_no}'
						UNION	ALL
						SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
						FROM	LI010NM_P
						WHERE	CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		ORDER_DATE	= '$!{sel_date}'
						AND		INOUT_CD	= 'E13'  -- 수입입고
						AND		BL_NO		= '$!{sel_bl_no}'
						)		T2
				WHERE	T1.ITEM_CD		= ITM.ITEM_CD
				AND		T1.CENTER_CD	= T2.CENTER_CD
				AND		T1.BRAND_DATE	= T2.BRAND_DATE
				AND		T1.BRAND_NO		= T2.BRAND_NO		
				)			T2,
				CMITEM		ITM
		WHERE	T1.INBOUND_SEQ	= T2.INBOUND_SEQ
		AND		T1.ITEM_CD		= T2.ITEM_CD
		AND		T1.ITEM_CD		= ITM.ITEM_CD
		GROUP
		BY		SUBSTR(T1.CENTER_CD,5,4)
		ORDER
		BY		1

	</query> 

	<!-- SCM품목추적조회_거래처_출고정보 --> 
	<query id="ip_07010_Item_Trace_list3" paging="false"> 

		/* SCM품목추적조회_거래처_출고정보 */
		SELECT	TO_CHAR(T1.OUTBOUND_DATE,'YYYY-MM-DD')	OUTBOUND_DATE,
				T1.REAL_DELIVERY_CD,
				T4.CUST_NAME,
				T5.ADRS_SIDO||' '||T5.ADRS_GUGUN||' '||T5.ADRS_DONG||' '||REPLACE(T4.CUST_ADRS,T5.ADRS_DONG,'') ADRS_NAME,
				T4.TEL_NO,
				SUM(T1.CONFIRM_QTY/	
						DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))	CHGO
		FROM	(
				SELECT	CENTER_CD, INBOUND_SEQ, OUTBOUND_DATE, ITEM_CD, INOUT_CD, REAL_DELIVERY_CD, CONFIRM_QTY 
				FROM	LO030NM
				UNION	ALL
				SELECT	CENTER_CD, INBOUND_SEQ, OUTBOUND_DATE, ITEM_CD, INOUT_CD, REAL_DELIVERY_CD, CONFIRM_QTY
				FROM	LO030NM_G
				UNION	ALL
				SELECT	CENTER_CD, INBOUND_SEQ, OUTBOUND_DATE, ITEM_CD, INOUT_CD, REAL_DELIVERY_CD, CONFIRM_QTY 
				FROM	LO030NM_P
				)		T1,
				CMITEM	ITM,
				(
				/* 생산/국내매입 정보 */
				SELECT	T1.ITEM_CD,
						T1.INBOUND_SEQ
				FROM	(
						SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD
						FROM	LI030NM
						UNION	ALL
						SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD
						FROM	LI030NM_G
						UNION	ALL
						SELECT	CENTER_CD, INBOUND_SEQ, INBOUND_DATE, ITEM_CD, INOUT_CD
						FROM	LI030NM_P
						)		T1,
						CMITEM	ITM
				WHERE	T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
				AND		T1.INBOUND_DATE	= '$!{sel_date}'
				AND		T1.ITEM_CD		= '$!{sel_item_id}'
				AND		T1.ITEM_CD		= ITM.ITEM_CD
				AND		T1.INOUT_CD		IN ('E11','E12')  --생산/매입입고
				GROUP
				BY		T1.ITEM_CD,
						T1.INBOUND_SEQ
				UNION	ALL
				/* 수입정보 기간,품목,BL */
				SELECT	DISTINCT
						T1.ITEM_CD,
						T1.INBOUND_SEQ
				FROM	(
						SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
						FROM	LI020NM	T1,
								LI030NM	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.BRAND_NO		IS NOT NULL
						AND		T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		T1.INBOUND_DATE	= '$!{sel_date}'
						AND		T2.ITEM_CD		= '$!{sel_item_id}'
						AND		T1.INOUT_CD		= 'E13'  -- 수입입고
						UNION	ALL
						SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
						FROM	LI020NM_P	T1,
								LI030NM_P	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.BRAND_NO		IS NOT NULL
						AND		T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		T1.INBOUND_DATE	= '$!{sel_date}'
						AND		T2.ITEM_CD		= '$!{sel_item_id}'
						AND		T1.INOUT_CD		= 'E13'  -- 수입입고
						UNION	ALL
						SELECT	T2.CENTER_CD, T2.INBOUND_SEQ, T2.INBOUND_DATE, T2.ITEM_CD, T2.INOUT_CD, T2.CONFIRM_QTY, T1.BRAND_DATE, T1.BRAND_NO
						FROM	LI020NM_G	T1,
								LI030NM_G	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.BRAND_NO		IS NOT NULL
						AND		T1.CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		T1.INBOUND_DATE	= '$!{sel_date}'
						AND		T2.ITEM_CD		= '$!{sel_item_id}'
						AND		T1.INOUT_CD		= 'E13'  -- 수입입고
						)		T1,
						CMITEM	ITM,
						(
						SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
						FROM	LI010NM
						WHERE	CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		ORDER_DATE	= '$!{sel_date}'
						AND		INOUT_CD	= 'E13'  -- 수입입고
						AND		BL_NO		= '$!{sel_bl_no}'
						UNION	ALL
						SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
						FROM	LI010NM_G
						WHERE	CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		ORDER_DATE	= '$!{sel_date}'
						AND		INOUT_CD	= 'E13'  -- 수입입고
						AND		BL_NO		= '$!{sel_bl_no}'
						UNION	ALL
						SELECT	CENTER_CD,	BRAND_DATE, BRAND_NO, BL_NO
						FROM	LI010NM_P
						WHERE	CENTER_CD	= '1300'||'$!{sel_dc_id}'
						AND		ORDER_DATE	= '$!{sel_date}'
						AND		INOUT_CD	= 'E13'  -- 수입입고
						AND		BL_NO		= '$!{sel_bl_no}'
						)		T2
				WHERE	T1.ITEM_CD		= ITM.ITEM_CD
				AND		T1.CENTER_CD	= T2.CENTER_CD
				AND		T1.BRAND_DATE	= T2.BRAND_DATE
				AND		T1.BRAND_NO		= T2.BRAND_NO		
				)			T3,
				SDSTT101	T4,
				SDSTT002	T5
		WHERE	T1.INBOUND_SEQ		= T3.INBOUND_SEQ
		AND		T1.ITEM_CD			= T3.ITEM_CD
		AND		T1.OUTBOUND_DATE	>= '$!{sel_date}'
		AND		SUBSTR(T1.INOUT_CD,1,2)		= 'D1'
		AND		T1.ITEM_CD			= ITM.ITEM_CD
		AND		T1.REAL_DELIVERY_CD	= T4.CUST_CODE
		AND		T4.CUST_POST_NO	= 	T5.POST_NO
		GROUP
		BY		TO_CHAR(T1.OUTBOUND_DATE,'YYYY-MM-DD'),
				T1.REAL_DELIVERY_CD,
				T4.CUST_NAME,
				T5.ADRS_SIDO||' '||T5.ADRS_GUGUN||' '||T5.ADRS_DONG||' '||REPLACE(T4.CUST_ADRS,T5.ADRS_DONG,''),
				T4.TEL_NO
		ORDER
		BY		OUTBOUND_DATE, CUST_NAME
		
	</query> 

	<!-- SCM품목추적조회_B/L POPUP --> 
	<query id="ip_07010_BL_popup" paging="false"> 

		SELECT	DISTINCT	BRAND_DATE, BL_NO
		FROM	LI010NM	T1,
				LI010ND T2
		WHERE	T1.CENTER_CD	= T2.CENTER_CD
		AND		T1.BRAND_CD		= T2.BRAND_CD
		AND		T1.ORDER_DATE	= T2.ORDER_DATE
		AND		T1.ORDER_NO		= T2.ORDER_NO
		AND		T1.ORDER_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
		AND		T1.BL_NO		IS NOT NULL
		AND		T1.INOUT_CD		= 'E13'
		AND		T2.ITEM_CD		LIKE '%'||'$!{in_item_id}'||'%'
		UNION	ALL
		SELECT	DISTINCT	BRAND_DATE, BL_NO
		FROM	LI010NM_G	T1,
				LI010ND_G T2
		WHERE	T1.CENTER_CD	= T2.CENTER_CD
		AND		T1.BRAND_CD		= T2.BRAND_CD
		AND		T1.ORDER_DATE	= T2.ORDER_DATE
		AND		T1.ORDER_NO		= T2.ORDER_NO
		AND		T1.ORDER_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
		AND		T1.BL_NO		IS NOT NULL
		AND		T1.INOUT_CD		= 'E13'
		AND		T2.ITEM_CD		LIKE '%'||'$!{in_item_id}'||'%'
		UNION	ALL
		SELECT	DISTINCT	BRAND_DATE, BL_NO
		FROM	LI010NM_P	T1,
				LI010ND_P T2
		WHERE	T1.CENTER_CD	= T2.CENTER_CD
		AND		T1.BRAND_CD		= T2.BRAND_CD
		AND		T1.ORDER_DATE	= T2.ORDER_DATE
		AND		T1.ORDER_NO		= T2.ORDER_NO
		AND		T1.ORDER_DATE	BETWEEN  TO_DATE('$!{in_fr_date}','YYYY-MM-DD')	AND TO_DATE('$!{in_to_date}','YYYY-MM-DD')
		AND		T1.BL_NO		IS NOT NULL
		AND		T1.INOUT_CD		= 'E13'
		AND		T2.ITEM_CD		LIKE '%'||'$!{in_item_id}'||'%'
		ORDER
		BY		1,2

	</query> 		

	<!-- 
	=======================
	  품종군 일자별 추이현황
	=======================
	-->	
	<!-- 품종군 일자별 추이현황 --> 
	<query id="ip_06030_Prty_InOut_analysis_list" paging="false"> 

	#if( "$!{insel_prty}" == "01" &amp;&amp; "$!{sel_gubn}" == "PRTY")
		-- 면/스낵 조회
		SELECT	K0.CNFM_DATE,
				TO_CHAR(TO_DATE(K0.CNFM_DATE),'DY')						DAY,
				DECODE(K0.CNFM_DATE ,TO_CHAR(SYSDATE,'YYYYMMDD'),1
									,TO_CHAR(TRUNC(SYSDATE,'D')+15,'YYYYMMDD'),2,0)	CURR_FLAG,
				-- 생산실적 OR 생산계획(면류) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(DECODE(K0.DIVISION,'10',NVL(K2.PROD_BOX,0))),0)		-- 생산실적
					ELSE
						NVL(MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.PROD_PLAN))),0)	-- 생산계획
				END		PROD_10,
				--------------------------------------------------------------------
				-- 판매실적 OR 판매계획(면류) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(DECODE(K0.DIVISION,'10',K3.SELL_BOX)),0)			-- 판매실적
					ELSE
						NVL(MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN))),0)-- 판매계획
				END		SELL_10,
				--------------------------------------------------------------------
				-- 기초재고 OR 예상재고(면류) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))	-- 기초재고
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						MAX(DECODE(K1.DIVISION,'10',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))	-- 예상재고		
				END		STOC_10,
				--------------------------------------------------------------------
				-- 재고일수(면류) --------------------------------------
				DECODE(MAX(SALES_MEAN_3WEEK), 0, 999,<!--2013-03-27 3주 평균 0으로 인한 데이터 미시연 해결 : 3주 평균이 0이명 999로 세팅 SCM팀 정승용 사원 요청 -->
				ROUND(
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))
						/MAX(DECODE(K1.DIVISION,'10',SALES_MEAN_3WEEK)) 			-- 재고일수
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						(MAX(DECODE(K1.DIVISION,'10',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN))))
						/MAX(DECODE(K1.DIVISION,'10',SALES_MEAN_3WEEK))				-- 재고일수(예상)		
				END,1))		RATE_10,
				--------------------------------------------------------------------
				--------------------------------------------------------------------
				-- 생산실적 OR 생산계획(스낵) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(DECODE(K0.DIVISION,'20',NVL(K2.PROD_BOX,0))),0)		-- 생산실적
					ELSE
						NVL(MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.PROD_PLAN))),0)	-- 생산계획
				END		PROD_20,
				--------------------------------------------------------------------
				-- 판매실적 OR 판매계획(스낵) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(DECODE(K0.DIVISION,'20',K3.SELL_BOX)),0)			-- 판매실적
					else
						NVL(MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN))),0)-- 판매계획
				END		SELL_20,
				--------------------------------------------------------------------
				-- 기초재고 OR 예상재고(스낵) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))	-- 기초재고
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						MAX(DECODE(K1.DIVISION,'20',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))	-- 예상재고		
				END		STOC_20,
				--------------------------------------------------------------------
				-- 재고일수(스낵) --------------------------------------
				ROUND(
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))
						/MAX(DECODE(K1.DIVISION,'20',SALES_MEAN_3WEEK)) 			-- 재고일수
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						(MAX(DECODE(K1.DIVISION,'20',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN))))
						/MAX(DECODE(K1.DIVISION,'20',SALES_MEAN_3WEEK))				-- 재고일수(예상)		
				END,1)		RATE_20,
				--------------------------------------------------------------------
				-- 생산실적 OR 생산계획(합계) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(DECODE(K0.DIVISION,'10',NVL(K2.PROD_BOX,0)))
						+ MAX(DECODE(K0.DIVISION,'20',NVL(K2.PROD_BOX,0))),0)		-- 생산실적
					ELSE
						NVL(
						NVL(MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.PROD_PLAN))),0)
						+ 
						NVL(MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.PROD_PLAN))),0)
								,0)	-- 생산계획
				END		PROD_TOT,
				--------------------------------------------------------------------
				-- 판매실적 OR 판매계획(합계) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(DECODE(K0.DIVISION,'10',K3.SELL_BOX))
						+ MAX(DECODE(K0.DIVISION,'20',K3.SELL_BOX)),0)				-- 판매실적
					else
						NVL(
						NVL(MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN))),0)
						+ 
						NVL(MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN))),0)
								,0)-- 판매계획
				END		SELL_TOT,
				--------------------------------------------------------------------
				-- 기초재고 OR 예상재고(합계) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))
						+ MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))	-- 기초재고
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						MAX(DECODE(K1.DIVISION,'10',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))
						+ MAX(DECODE(K1.DIVISION,'20',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))	-- 예상재고		
				END		STOC_TOT,
				--------------------------------------------------------------------
				-- 재고일수(합계) --------------------------------------
				ROUND(
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						(MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))
						+ MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK)))
						)
						/(MAX(DECODE(K1.DIVISION,'10',SALES_MEAN_3WEEK))
						 + MAX(DECODE(K1.DIVISION,'20',SALES_MEAN_3WEEK))
						 ) 			-- 재고일수
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						(MAX(DECODE(K1.DIVISION,'10',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))
						+ MAX(DECODE(K1.DIVISION,'20',CURR_STOCK))		
						+ SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN)))	
						- SUM(DECODE(K1.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))
						)
						/(MAX(DECODE(K1.DIVISION,'10',SALES_MEAN_3WEEK))
						 + MAX(DECODE(K1.DIVISION,'20',SALES_MEAN_3WEEK))
						 )				-- 재고일수(예상)		
				END,1)		RATE_TOT,
				--------------------------------------------------------------------
				-- 판매계획(합계) --------------------------------------
				NVL(MAX(DECODE(K0.DIVISION,'10',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN2)))
						+ MAX(DECODE(K0.DIVISION,'20',
								DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN2))),0)	SALE_PLAN
				--------------------------------------------------------------------
		FROM	(
				SELECT	YYYYMMDD	CNFM_DATE,
						CD			DIVISION
				FROM	CAL_MST	T1,
						(
						SELECT	CD
						FROM	CODE_MST
						WHERE	CD_GRP	= 'DIVISION'
						AND		CD	IN ('10','20')
						)		T2
				WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				)		K0,
				(
				SELECT	T1.CNFM_DATE,
						T2.DIVISION,
						CASE
							WHEN T1.CNFM_DATE &gt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
								SUM(SALES_PLAN+PROM_PLAN)
							WHEN T1.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD') THEN
								SUM(ISSUE)
							ELSE	0
						END							SALES_PLAN,
						CASE
							WHEN T1.CNFM_DATE &gt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
								SUM(RECEIPT_EXPT)
							ELSE	0
						END							PROD_PLAN,
						SUM(BASE_STOCK)				BASE_STOCK,
						SUM(SALES_PLAN+PROM_PLAN)	SALES_PLAN2
				FROM	DC_DATAWAREHOUSE	T1,
						ITEM_MST			T2,
						(
						SELECT	YYYYMMDD
						FROM	CAL_MST
						WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						)					T3
				WHERE	T1.ITEM_ID		= T2.ITEM_ID
				AND		T1.CNFM_DATE	= T3.YYYYMMDD
				AND		T2.ITYPE		= 'FERT'
				AND		T2.DIVISION		IN ('10','20')
				AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
				AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE (TRIM(EXPORT_FLAG) IS NULL OR DC_ID IN ('8913','8914')))
				GROUP
				BY		T1.CNFM_DATE,
						T2.DIVISION
				)		K1,
				(
				-- 생산실적
				SELECT	TO_CHAR(START_DTTM,'YYYYMMDD')	CNFM_DATE,
						T2.DIVISION,
						SUM(COMPL_QTY)		PROD_BOX
				FROM	V_ERP_PO_MES	T1,
						ITEM_MST		T2
				WHERE	TO_CHAR(START_DTTM,'YYYYMMDD')	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				AND		T1.ITEM_ID	= T2.ITEM_ID
				AND		T2.ITYPE		= 'FERT'
				AND		T2.DIVISION		IN ('10','20')
				AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
				GROUP
				BY		TO_CHAR(START_DTTM,'YYYYMMDD'),
						T2.DIVISION
				)		K2,
				(
				-- 판매실적
				SELECT	TO_CHAR(SALE_DATE,'YYYYMMDD')	CNFM_DATE,
						T2.DIVISION,
						SUM(T1.QTY)						SELL_BOX
				FROM	SALES_ACT	T1,
						ITEM_MST	T2,
						(
						SELECT	CAL_DATE
						FROM	CAL_MST
						WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						)					T3
				WHERE	T1.DOMAIN		= 'DO'
				AND		T1.SALE_DATE	= T3.CAL_DATE
				AND		T1.ITEM_ID		= T2.ITEM_ID
				AND		T2.ITYPE		= 'FERT'
				AND		T2.DIVISION		IN ('10','20')
				AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
				AND		T1.DELIV_LOC	IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
				GROUP
				BY		TO_CHAR(SALE_DATE,'YYYYMMDD'),
						T2.DIVISION
				)		K3,
				(
				-- 당일재고, 3주평균
				SELECT	T2.DIVISION,
						SUM(BASE_STOCK)				CURR_STOCK,
						SUM(SALES_MEAN_3WEEK)		SALES_MEAN_3WEEK 
				FROM	DC_DATAWAREHOUSE	T1,
						ITEM_MST			T2
				WHERE	T1.ITEM_ID		= T2.ITEM_ID
				AND		T1.CNFM_DATE	= TO_CHAR(SYSDATE,'YYYYMMDD')
				AND		T2.ITYPE		= 'FERT'
				AND		T2.DIVISION		IN ('10','20')
				AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'				
				AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE (TRIM(EXPORT_FLAG) IS NULL OR DC_ID IN ('8913','8914')))
				GROUP
				BY		T2.DIVISION
				)		K4	
		WHERE	K0.CNFM_DATE	&gt;= K1.CNFM_DATE
		AND		K0.CNFM_DATE	= K2.CNFM_DATE(+)
		AND		K0.CNFM_DATE	= K3.CNFM_DATE(+)
		AND		K0.DIVISION		= K1.DIVISION
		AND		K0.DIVISION		= K2.DIVISION(+)
		AND		K0.DIVISION		= K3.DIVISION(+)
		AND		K0.DIVISION		= K4.DIVISION(+)
		GROUP
		BY		K0.CNFM_DATE
		ORDER
		BY		K0.CNFM_DATE	DESC

	#else
		-- 조회
		-- sel_gubn =  "$!{sel_gubn}"
		-- insel_prty = "$!{insel_prty}"
		SELECT	K0.CNFM_DATE,
				TO_CHAR(TO_DATE(K0.CNFM_DATE),'DY')						DAY,
				DECODE(K0.CNFM_DATE ,TO_CHAR(SYSDATE,'YYYYMMDD'),1
									,TO_CHAR(TRUNC(SYSDATE,'D')+15,'YYYYMMDD'),2,0)	CURR_FLAG,
				-- 생산실적 OR 생산계획(면류) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(NVL(K2.PROD_BOX,0)),0)			-- 생산실적
					ELSE
						NVL(MAX(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.PROD_PLAN)),0)	-- 생산계획
				END		PROD_10,
				--------------------------------------------------------------------
				-- 판매실적 OR 판매계획(면류) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						NVL(MAX(K3.SELL_BOX),0)										-- 판매실적
					else
						NVL(MAX(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN)),0)	-- 판매계획
				END		SELL_10,
				--------------------------------------------------------------------
				-- 기초재고 OR 예상재고(면류) --------------------------------------
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK))		-- 기초재고
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						MAX(CURR_STOCK)		
						+ SUM(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN))	
						- SUM(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN))	-- 예상재고		
				END		STOC_10,
				--------------------------------------------------------------------
				-- 재고일수(면류) --------------------------------------
				DECODE(MAX(SALES_MEAN_3WEEK), 0, 999,<!--2013-03-27 3주 평균 0으로 인한 데이터 미시연 해결 : 3주 평균이 0이명 999로 세팅 SCM팀 정승용 사원 요청 -->
				ROUND(
				CASE
					WHEN K0.CNFM_DATE &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
						MAX(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.BASE_STOCK))
						/MAX(SALES_MEAN_3WEEK) 										-- 재고일수
					ELSE -- 예상재고 = 기초재고 + 생산계획 - 판매계획
						(MAX(CURR_STOCK)		
						+ SUM(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.PROD_PLAN))	
						- SUM(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,0,K1.SALES_PLAN)))
						/MAX(SALES_MEAN_3WEEK)										-- 재고일수(예상)		
				END,1))		RATE_10,
				NVL(MAX(DECODE(K0.CNFM_DATE,K1.CNFM_DATE,K1.SALES_PLAN2)),0)		SALE_PLAN
		FROM	(
				SELECT	YYYYMMDD	CNFM_DATE
				FROM	CAL_MST	T1
				WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				)		K0,
				(
				SELECT	CNFM_DATE,
						SUM(SALES_PLAN)	SALES_PLAN,
						SUM(PROD_PLAN)	PROD_PLAN,
						SUM(BASE_STOCK)	BASE_STOCK,
						SUM(SALES_PLAN2)	SALES_PLAN2
				FROM	(
						SELECT	T1.CNFM_DATE,
								CASE
									WHEN T1.CNFM_DATE &gt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN
										SUM(SALES_PLAN+PROM_PLAN)
									WHEN T1.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD') THEN
										SUM(ISSUE)
									ELSE	0
								END							SALES_PLAN,
								CASE
									WHEN T1.CNFM_DATE &gt;= TO_CHAR(SYSDATE,'YYYYMMDD') THEN
										SUM(RECEIPT_EXPT)
									ELSE	0
								END							PROD_PLAN,
								SUM(BASE_STOCK)				BASE_STOCK,
								SUM(SALES_PLAN+PROM_PLAN)	SALES_PLAN2
						FROM	DC_DATAWAREHOUSE	T1,
								ITEM_MST			T2,
								(
								SELECT	YYYYMMDD
								FROM	CAL_MST
								WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
								)					T3
						WHERE	T1.ITEM_ID		= T2.ITEM_ID
						AND		T1.CNFM_DATE	= T3.YYYYMMDD
						#if( "$!{insel_prty}" != "07" )
							AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE (TRIM(EXPORT_FLAG) IS NULL OR DC_ID IN ('8913','8914')))
						#end	
						#if( "$!{sel_gubn}" == "PRTY")
							#if( "$!{insel_prty}" == "02")
								-- 면
								AND		T2.ITYPE		= 'FERT'
								AND		T2.DIVISION		= '10'
								AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
								AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
							#elseif( "$!{insel_prty}" == "03")
								-- 스낵
								AND		T2.ITYPE		= 'FERT'
								AND		T2.DIVISION		= '20'
								AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
								AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
							#elseif( "$!{insel_prty}" == "04")
								-- 기타제품
								AND		T2.ITYPE		= 'FERT'
								AND		T2.DIVISION		NOT IN ('10','20')
								AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
								AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
							#elseif( "$!{insel_prty}" == "05")
								-- 상품(백산수,냉동제외)
								AND		T2.ITYPE			= 'HAWA'
								--AND	T2.MATERIAL_GROUP 	!= '61310' 				-- 삼다수 제외
								AND		T2.MATERIAL_GROUP 	!= '63410' 				-- 백산수 제외(SCM팀 이승용 대리 요청 : 2013-07-04)
								AND		T2.HR_TY1 			NOT LIKE '606006%' 		-- 냉동제외
								AND		T2.HR_TY1 			NOT LIKE '9090029000'	-- 액기스 제외
								AND 	T2.BASE_UOM			!= 'KG'  -- KG단위 상품 제외
							#elseif( "$!{insel_prty}" == "06")
								-- 백산수2L
								AND		T2.ITYPE		= 'HAWA'
								--AND	T2.ITEM_ID 		= '901000081'
								AND		T2.ITEM_ID 		= '903000702' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
							#elseif( "$!{insel_prty}" == "061")
								-- 백산수0.6L
								AND		T2.ITYPE		= 'HAWA'
								--AND	T2.ITEM_ID 		= '901000082'
								AND		T2.ITEM_ID 		= '903000701' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
							#elseif( "$!{insel_prty}" == "07")
								-- 수출
								AND		T2.ITYPE		= 'FERT'
								AND		T2.CAT03		LIKE 'O%'
							#elseif( "$!{insel_prty}" == "08")
								-- 유통가공품(제품)
								AND		T2.ITEM_ID	IN (
														SELECT	DISTINCT	ITEM_ID
														FROM	ITEM_CAPA
														WHERE	PLANT_ID	= '1300'
														)
								AND		T2.ITYPE	= 'FERT'
								AND		T2.SEARCH_FLAG	= 'Y'						
							#elseif( "$!{insel_prty}" == "09")
								-- 유통가공품(상품)
								AND		T2.ITEM_ID	IN (
														SELECT	DISTINCT	ITEM_ID
														FROM	ITEM_CAPA
														WHERE	PLANT_ID	= '1300'
														)
								AND		T2.ITYPE	= 'HAWA'
								AND		T2.SEARCH_FLAG	= 'Y'						
							#end
						#else
							AND		T2.ITEM_ID 		= '$!{in_item_id}'
						#end
						GROUP
						BY		T1.CNFM_DATE
						#if( "$!{insel_prty}" == "07" &amp;&amp; "$!{sel_gubn}" == "PRTY")
							UNION	ALL
							/* 수출오더를 판매계획에 포함 */
							SELECT  A.SHIP_PLAN_DATE	CNFM_DATE,
									SUM(B.REQT_BOX)		SALES_PLAN,
									0					PROD_PLAN,
									0					BASE_STOCK,
									0					SALES_PLAN2
							FROM    SDORT101    A,
									SDORT102    B,
									ITEM_MST	C
							WHERE   A.SLIP_NO						=	B.SLIP_NO
							AND     A.SHIP_PLAN_DATE				&gt;=	TO_CHAR(SYSDATE, 'YYYYMMDD')
							AND		SUBSTR(A.SLIP_GUBN_CODE,1,1)	= 'X'
							AND		LENGTH(A.CNFM_DATE) 			= 8  
							AND		B.PROD_CODE						= C.ITEM_ID
							AND		A.UPDT_GUBN						!= 'DE'
							AND		C.ITYPE							= 'FERT'
							AND		C.CAT03				LIKE 'O%'	
							GROUP
							BY		A.SHIP_PLAN_DATE
						#end
						)
				GROUP
				BY		CNFM_DATE
				)		K1,
				(
				-- 생산실적
				SELECT	TO_CHAR(START_DTTM,'YYYYMMDD')	CNFM_DATE,
						SUM(COMPL_QTY)		PROD_BOX
				FROM	V_ERP_PO_MES	T1,
						ITEM_MST		T2
				WHERE	TO_CHAR(START_DTTM,'YYYYMMDD')	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
				AND		T1.ITEM_ID	= T2.ITEM_ID
				#if( "$!{sel_gubn}" == "PRTY")
					#if( "$!{insel_prty}" == "02")
						-- 면
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		= '10'
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
					#elseif( "$!{insel_prty}" == "03")
						-- 스낵
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		= '20'
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
					#elseif( "$!{insel_prty}" == "04")
						-- 기타제품
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		NOT IN ('10','20')
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
					#elseif( "$!{insel_prty}" == "07")
						-- 수출
						AND		T2.ITYPE		= 'FERT'
						AND		T2.CAT03		LIKE 'O%'
					#elseif( "$!{insel_prty}" == "08")
						-- 유통가공품(제품)
						AND		T2.ITEM_ID	IN (
												SELECT	DISTINCT	ITEM_ID
												FROM	ITEM_CAPA
												WHERE	PLANT_ID	= '1300'
												)
						AND		T2.ITYPE	= 'FERT'
						AND		T2.SEARCH_FLAG	= 'Y'						
					#elseif( "$!{insel_prty}" == "09")
						-- 유통가공품(상품)
						AND		T2.ITEM_ID	IN (
												SELECT	DISTINCT	ITEM_ID
												FROM	ITEM_CAPA
												WHERE	PLANT_ID	= '1300'
												)
						AND		T2.ITYPE	= 'HAWA'
						AND		T2.SEARCH_FLAG	= 'Y'						
					#else
						AND	1=0
					#end
				#else
					AND		T2.ITEM_ID 		= '$!{in_item_id}'
				#end	
				GROUP
				BY		TO_CHAR(START_DTTM,'YYYYMMDD')
				UNION ALL
				/* 매입입고 */
				SELECT	TO_CHAR(INBOUND_DATE,'YYYYMMDD') CNFM_DATE,
						SUM(T1.CONFIRM_QTY/	
							DECODE(T4.MIN_UNIT_UOM,'EA',T4.BOX_UNIT_QTY,1))	PROD_BOX
				FROM	(
						SELECT	T1.INBOUND_DATE, T1.CENTER_CD, T1.FACT_CD, T2.ITEM_CD, T2.ITEM_STATE, T2.CONFIRM_QTY
						FROM	LI020NM	T1,
								LI020ND	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.INOUT_CD		IN ('E12','E13')
						UNION	ALL
						SELECT	T1.INBOUND_DATE, T1.CENTER_CD, T1.FACT_CD, T2.ITEM_CD, T2.ITEM_STATE, T2.CONFIRM_QTY
						FROM	LI020NM_G	T1,
								LI020ND_G	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.INOUT_CD		IN ('E12','E13')
						UNION	ALL
						SELECT	T1.INBOUND_DATE, T1.CENTER_CD, T1.FACT_CD, T2.ITEM_CD, T2.ITEM_STATE, T2.CONFIRM_QTY
						FROM	LI020NM_P	T1,
								LI020ND_P	T2
						WHERE	T1.CENTER_CD	= T2.CENTER_CD
						AND		T1.BRAND_CD		= T2.BRAND_CD
						AND		T1.INBOUND_DATE	= T2.INBOUND_DATE
						AND		T1.INBOUND_NO	= T2.INBOUND_NO
						AND		T1.INOUT_CD		IN ('E12','E13')
						)			T1,
						ITEM_MST	T2,
						CMITEM		T4,
						(
						SELECT	CAL_DATE
						FROM	CAL_MST
						WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						)			T5	
				WHERE	T1.INBOUND_DATE	= T5.CAL_DATE
				AND		T1.ITEM_CD		= T2.ITEM_ID
				AND		T1.ITEM_CD		= T4.ITEM_CD
				AND		T1.ITEM_STATE	= 'A'
				#if( "$!{sel_gubn}" == "PRTY")
					#if( "$!{insel_prty}" == "05")
						-- 상품(백산수,냉동제외)
						AND		T2.ITYPE			= 'HAWA'
						--AND	T2.MATERIAL_GROUP 	!= '61310' 				-- 삼다수 제외
						AND		T2.MATERIAL_GROUP 	!= '63410' 				-- 백산수 제외(SCM팀 이승용 대리 요청 : 2013-07-04)
						AND		T2.HR_TY1 			NOT LIKE '606006%' 		-- 냉동제외
						AND		T2.HR_TY1 			NOT LIKE '9090029000' 	-- 액기스 제외
						AND 	T2.BASE_UOM			!= 'KG'  -- KG단위 상품 제외
					#elseif( "$!{insel_prty}" == "06")
						-- 백산수2L
						AND		T2.ITYPE		= 'HAWA'
						--AND	T2.ITEM_ID 		= '901000081'
						AND		T2.ITEM_ID 		= '903000702' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
					#elseif( "$!{insel_prty}" == "061")
						-- 백산수0.6L
						AND		T2.ITYPE		= 'HAWA'
						--AND	T2.ITEM_ID 		= '901000082'
						AND		T2.ITEM_ID 		= '903000701' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
					#else
						AND	1=0
					#end	
				#else
					AND		T2.ITEM_ID 		= '$!{in_item_id}'
				#end	
				GROUP
				BY		TO_CHAR(INBOUND_DATE,'YYYYMMDD')				
				)		K2,
				(
				-- 판매실적
				SELECT	TO_CHAR(SALE_DATE,'YYYYMMDD')	CNFM_DATE,
						SUM(T1.QTY)						SELL_BOX
				FROM	SALES_ACT	T1,
						ITEM_MST	T2,
						(
						SELECT	CAL_DATE
						FROM	CAL_MST
						WHERE	YYYYMMDD BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						)					T3
				WHERE	SALE_DATE	= T3.CAL_DATE
				AND		T1.ITEM_ID	= T2.ITEM_ID
				#if( "$!{insel_prty}" != "07"  &amp;&amp; "$!{sel_gubn}" == "PRTY")
					AND		T1.DOMAIN	= 'DO'
					AND		T1.DELIV_LOC		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
				#end	
				#if( "$!{sel_gubn}" == "PRTY" )
					#if( "$!{insel_prty}" == "02")
						-- 면
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		= '10'
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
						AND		T1.DELIV_LOC	IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
					#elseif( "$!{insel_prty}" == "03")
						-- 스낵
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		= '20'
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
						AND		T1.DELIV_LOC	IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
					#elseif( "$!{insel_prty}" == "04")
						-- 기타제품
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		NOT IN ('10','20')
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
						AND		T1.DELIV_LOC	IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
					#elseif( "$!{insel_prty}" == "05")
						-- 상품(백산수,냉동제외)
						AND		T2.ITYPE			= 'HAWA'
						--AND	T2.MATERIAL_GROUP 	!= '61310' 				-- 삼다수 제외
						AND		T2.MATERIAL_GROUP 	!= '63410' 				-- 백산수 제외(SCM팀 이승용 대리 요청 : 2013-07-04)
						AND		T2.HR_TY1 			NOT LIKE '606006%' 		-- 냉동제외
						AND		T2.HR_TY1 			NOT LIKE '9090029000'	-- 액기스 제외
						AND 	T2.BASE_UOM			!= 'KG'  -- KG단위 상품 제외
					#elseif( "$!{insel_prty}" == "06")
						-- 백산수2L
						AND		T2.ITYPE		= 'HAWA'
						--AND	T2.ITEM_ID 		= '901000081'
						AND		T2.ITEM_ID 		= '903000702' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
					#elseif( "$!{insel_prty}" == "061")
						-- 백산수0.6L
						AND		T2.ITYPE		= 'HAWA'
						--AND	T2.ITEM_ID 		= '901000082'
						AND		T2.ITEM_ID 		= '903000701' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
					#elseif( "$!{insel_prty}" == "07")
						-- 수출
						AND		T2.ITYPE		= 'FERT'
						AND		T2.CAT03		LIKE 'O%'
					#elseif( "$!{insel_prty}" == "08")
						-- 유통가공품(제품)
						AND		T2.ITEM_ID	IN (
												SELECT	DISTINCT	ITEM_ID
												FROM	ITEM_CAPA
												WHERE	PLANT_ID	= '1300'
												)
						AND		T2.ITYPE	= 'FERT'
						AND		T2.SEARCH_FLAG	= 'Y'						
					#elseif( "$!{insel_prty}" == "09")
						-- 유통가공품(상품)
						AND		T2.ITEM_ID	IN (
												SELECT	DISTINCT	ITEM_ID
												FROM	ITEM_CAPA
												WHERE	PLANT_ID	= '1300'
												)
						AND		T2.ITYPE	= 'HAWA'
						AND		T2.SEARCH_FLAG	= 'Y'						
					#end
				#else
						AND		T2.ITEM_ID 		= '$!{in_item_id}'
				#end
				GROUP
				BY		TO_CHAR(SALE_DATE,'YYYYMMDD')
				)		K3,
				(
				-- 당일재고, 3주평균
				SELECT	SUM(BASE_STOCK)				CURR_STOCK,
						SUM(SALES_MEAN_3WEEK)		SALES_MEAN_3WEEK 
				FROM	DC_DATAWAREHOUSE	T1,
						ITEM_MST			T2
				WHERE	T1.ITEM_ID		= T2.ITEM_ID
				AND		T1.CNFM_DATE	= TO_CHAR(SYSDATE,'YYYYMMDD')
				#if( "$!{insel_prty}" != "07")
					--2015-09-16 수정사항 수출품목 조회시 수출창고도 포함
					AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE (TRIM(EXPORT_FLAG) IS NULL OR DC_ID IN ('8913','8914')))
					--AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
				#end	
				#if( "$!{sel_gubn}" == "PRTY")
					#if( "$!{insel_prty}" == "02")
						-- 면
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		= '10'
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
						AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
					#elseif( "$!{insel_prty}" == "03")
						-- 스낵
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		= '20'
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
						AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
					#elseif( "$!{insel_prty}" == "04")
						-- 기타제품
						AND		T2.ITYPE		= 'FERT'
						AND		T2.DIVISION		NOT IN ('10','20')
						AND		NVL(T2.CAT03,'XX') NOT LIKE 'O%'
						AND		T1.DC_ID		IN (SELECT	DC_ID FROM DC_MST WHERE TRIM(EXPORT_FLAG) IS NULL)
					#elseif( "$!{insel_prty}" == "05")
						-- 상품(백산수,냉동제외)
						AND		T2.ITYPE			= 'HAWA'
						--AND	T2.MATERIAL_GROUP 	!= '61310' 				-- 삼다수 제외
						AND		T2.MATERIAL_GROUP 	!= '63410' 				-- 백산수 제외(SCM팀 이승용 대리 요청 : 2013-07-04)
						AND		T2.HR_TY1 			NOT LIKE '606006%' 		-- 냉동제외
						AND		T2.HR_TY1 			NOT LIKE '9090029000'	-- 액기스 제외
						AND 	T2.BASE_UOM			!= 'KG'  -- KG단위 상품 제외
					#elseif( "$!{insel_prty}" == "06")
						-- 백산수2L
						AND		T2.ITYPE		= 'HAWA'
						--AND	T2.ITEM_ID 		= '901000081'
						AND		T2.ITEM_ID 		= '903000702' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
					#elseif( "$!{insel_prty}" == "061")
						-- 백산수0.6L
						AND		T2.ITYPE		= 'HAWA'
						--AND	T2.ITEM_ID 		= '901000082'
						AND		T2.ITEM_ID 		= '903000701' --(SCM팀 이승용 대리 요청으로 백산수로 변경 : 2013-07-04)
					#elseif( "$!{insel_prty}" == "07")
						-- 수출
						AND		T2.ITYPE		= 'FERT'
						AND		T2.CAT03		LIKE 'O%'
					#elseif( "$!{insel_prty}" == "08")
						-- 유통가공품(제품)
						AND		T2.ITEM_ID	IN (
												SELECT	DISTINCT	ITEM_ID
												FROM	ITEM_CAPA
												WHERE	PLANT_ID	= '1300'
												)
						AND		T2.ITYPE	= 'FERT'
						AND		T2.SEARCH_FLAG	= 'Y'						
					#elseif( "$!{insel_prty}" == "09")
						-- 유통가공품(상품)
						AND		T2.ITEM_ID	IN (
												SELECT	DISTINCT	ITEM_ID
												FROM	ITEM_CAPA
												WHERE	PLANT_ID	= '1300'
												)
						AND		T2.ITYPE	= 'HAWA'
						AND		T2.SEARCH_FLAG	= 'Y'						
					#end
				#else
						AND		T2.ITEM_ID 		= '$!{in_item_id}'
				#end	
				)		K4	
		WHERE	K0.CNFM_DATE	&gt;= K1.CNFM_DATE
		AND		K0.CNFM_DATE	= K2.CNFM_DATE(+)
		AND		K0.CNFM_DATE	= K3.CNFM_DATE(+)
		GROUP
		BY		K0.CNFM_DATE
		ORDER
		BY		K0.CNFM_DATE	DESC	

	#end

	</query> 

	<!-- 
	=======================
	  SCM주문추적조회
	=======================
	-->	

	<!-- 배송지점 --> 
	<query id="ip_07020_DC_list" paging="false"> 

		SELECT	DC_ID, DC_SHORT_NAME
		FROM	DC_MST,	DUAL
		WHERE	RDC_FLAG	= 'Y'
		AND		MADE_TYPE	!= 'DE'
		ORDER
		BY		PLANT_ID, DC_ID
	</query> 
	
	<!-- 영업지점 2013-03-13 추가 우종균--> 
	<query id="ip_07020_Sales_list" paging="false"> 

		SELECT	DEPT_CODE,
				DEPT_NAME
		FROM	SDSTT401, DUAL
		WHERE DEPT_GRAD_CODE = '40'
		AND		APPL_END_YYMM	= '999912'		
		AND		SUPL_APPL_GUBN	IS NULL
		ORDER	BY	1
	</query>	

	<!-- SCM주문추적조회 --> 
	<query id="ip_07020_Order_Trace_list" paging="false"> 

	
		SELECT	TO_CHAR(TO_DATE(CNFM_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') CNFM_DATE,
				F_GETDCNAME(T1.DC_ID)	DC_NAME,
				DOMAIN,
				SLIP_GUBN,
				T2.DEPT_NAME,
				HAN_NAME,
				T3.CUST_NAME,
				SLIP_NO,
				SEQ_NO,
				REQT_BOX,
				SELL_BOX,
				NVL(F_GET_NFOS_IN_DTTM( CNFM_DATE, SLIP_NO, SEQ_NO , '$!{in_item_id}'),IPUT_DTTM)	IPUT_DTTM,
				CASE
					WHEN F_GET_NFOS_UPDT_GUBN( CNFM_DATE, SLIP_NO, SEQ_NO , '$!{in_item_id}') = '00' THEN 
						'NFOS삭제'
					ELSE
						CHGO_GUBN
				END	CHGO_GUBN,
				SHORTAGE_GUBN,
				CLOS_DTTM
		FROM	(
			    SELECT  A.CNFM_DATE,
						A.STOR_CODE						DC_ID,
						CASE
							WHEN	A.SLIP_GUBN_CODE = 'D15' OR A.SLIP_GUBN_CODE = 'D16' THEN   
									'수출'		
							ELSE 	'일반'
						END		DOMAIN,
						CASE
							--WHEN A.SLIP_GUBN_CODE &gt;= 'D11' AND  A.SLIP_GUBN_CODE &lt;= 'D19'	THEN
							--	'일반'
							--WHEN SUBSTR(A.SLIP_GUBN_CODE,1,1) = 'D' AND A.SLIP_GUBN_CODE &gt; 'D19' AND	A.SLIP_GUBN_CODE != 'D1E'	THEN
							--	'타계정'
							WHEN A.SLIP_GUBN_CODE = 'D1E'	THEN
								'부서타계정'
							WHEN A.SLIP_GUBN_CODE = 'PRE_D1E'	THEN
								'결재상신'
							WHEN SUBSTR(A.SLIP_GUBN_CODE,1,2) = 'E3' THEN -- 회송
								'회송'
							WHEN	A.SLIP_GUBN_CODE = 'D15' OR A.SLIP_GUBN_CODE = 'D16' THEN
								'수출출고'
							WHEN B.ITEM_CATG IS NOT NULL	THEN 
								'일반'
							ELSE
							 	'타계정'
						END								SLIP_GUBN,
			            NVL(A.DEPT_CODE, ' ')			DEPT_CODE,	<!-- 2013-03-29 SCM팀 이승용 대리 요청건 해결 : 부서 계정이 없는 해외 영업팀 데이터를 NVL로 처리 -->
						IPUT_EMP_NAME					HAN_NAME,
						A.CUST_ID						CUST_CODE,
			            A.BRAND_NO						SLIP_NO,
						A.BRAND_LINE_NO					SEQ_NO,
						ROUND(A.REQT_BOX,1)				REQT_BOX,
						ROUND(NVL(A.SELL_BOX,0),1)		SELL_BOX,
						TO_CHAR(A.REG_DATETIME,'YYYY-MM-DD HH24:MI:SS')							IPUT_DTTM,
						DECODE(A.OUTBOUND_STATE,'20','마감','마감전')	 						CHGO_GUBN,
						f_get_WMScode_name('LDIV11',A.SHORTAGE_DIV)								SHORTAGE_GUBN,
			    		TO_CHAR(A.ENTRY_DATETIME,'YYYY-MM-DD HH24:MI:SS')						CLOS_DTTM,
			    		A.REG_DATETIME, A.ENTRY_DATETIME
				FROM    (
						SELECT	TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD')	CNFM_DATE,
								SUBSTR(DEH.CENTER_CD,5,4)			STOR_CODE,
								DEH.INOUT_CD						SLIP_GUBN_CODE,
								DEH.DEPT_CD							DEPT_CODE,
								DEH.DELIVERY_CD				CUST_ID,
								DEH.SALESMAN_NM						IPUT_EMP_NAME,
								DED.BRAND_NO,
								DED.BRAND_LINE_NO,
								DED.ITEM_CD,
								SUM(DED.ORDER_QTY	/	
									(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		REQT_BOX,
								MAX(NVL(T2.CONFIRM_QTY,0)	/	
									(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		SELL_BOX,
								MIN(DEH.REG_DATETIME)	REG_DATETIME,
								MAX(DED.OUTBOUND_STATE)	OUTBOUND_STATE,
								MAX(DED.SHORTAGE_DIV)	SHORTAGE_DIV,
								MAX(DED.ENTRY_DATETIME)	ENTRY_DATETIME,
								DED.OTHER_ACCOUNT_CD
						FROM	LO010NM		DEH,
								LO010ND		DED,
								CMITEM		ITM,
								(
								SELECT	CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD, SUM(CONFIRM_QTY)	CONFIRM_QTY 
								FROM	LO020ND
								WHERE	BRAND_CD	IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
								-- 배송지점	
								#if( "$!{tgt_loc_sel}" != "%" ) 
									AND CENTER_CD = '1300'||'$!{tgt_loc_sel}'
								#end
								AND		OUTBOUND_DATE BETWEEN '$!{in_fr_date}'	AND '$!{in_to_date}'
								AND		ITEM_CD		= '$!{in_item_id}'
								GROUP
								BY		CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD
								)			T2	
						WHERE	DEH.CENTER_CD			=	DED.CENTER_CD
						AND		DEH.BRAND_CD			=	DED.BRAND_CD
						AND		DEH.ORDER_DATE			=	DED.ORDER_DATE
						AND		DEH.ORDER_NO			=	DED.ORDER_NO
						AND		DEH.BRAND_CD			IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
						-- 배송지점	
						#if( "$!{tgt_loc_sel}" != "%" ) 
								AND DEH.CENTER_CD = '1300'||'$!{tgt_loc_sel}'
						#end
						AND		DEH.OUTBOUND_STATE		&gt;=	'10'
						AND		DED.ITEM_STATE			=	'A'
						AND		DED.ITEM_CD				=	ITM.ITEM_CD
						AND		ITM.ITEM_DIV			IN	('FERT','HAWA')
						AND		DEH.ORDER_DATE			BETWEEN '$!{in_fr_date}'	AND '$!{in_to_date}'
						AND		DED.ITEM_CD				= '$!{in_item_id}'
						AND		DED.BRAND_NO			= T2.BRAND_NO(+)
						AND		DED.BRAND_LINE_NO		= T2.BRAND_LINE_NO(+)
						AND		DED.BRAND_DATE			= T2.BRAND_DATE(+)
						AND		DED.ITEM_CD				= T2.ITEM_CD(+)
						AND		DED.CENTER_CD			= T2.CENTER_CD(+)
						GROUP	BY	TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD'),
									SUBSTR(DEH.CENTER_CD,5,4),
									DEH.INOUT_CD,
									DEH.DEPT_CD,
									DEH.DELIVERY_CD,
									DEH.SALESMAN_NM,
									DED.BRAND_NO,
									DED.BRAND_LINE_NO,
									DED.ITEM_CD,
									DED.OTHER_ACCOUNT_CD
						UNION	ALL	
						SELECT	TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD')	CNFM_DATE,
								SUBSTR(DEH.CENTER_CD,5,4)			STOR_CODE,
								DEH.INOUT_CD						SLIP_GUBN_CODE,
								DEH.DEPT_CD							DEPT_CODE,
								DEH.DELIVERY_CD				CUST_ID,
								DEH.SALESMAN_NM						IPUT_EMP_NAME,
								DED.BRAND_NO,
								DED.BRAND_LINE_NO,
								DED.ITEM_CD,
								SUM(DED.ORDER_QTY	/	
									(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		REQT_BOX,
								MAX(NVL(T2.CONFIRM_QTY,0)	/	
									(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		SELL_BOX,
								MIN(DEH.REG_DATETIME)	REG_DATETIME,
								MAX(DED.OUTBOUND_STATE)	OUTBOUND_STATE,
								MAX(DED.SHORTAGE_DIV)	SHORTAGE_DIV,
								MAX(DED.ENTRY_DATETIME)	ENTRY_DATETIME,
								DED.OTHER_ACCOUNT_CD
						FROM	LO010NM_G	DEH,
								LO010ND_G	DED,
								CMITEM		ITM,
								(
								SELECT	CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD, SUM(CONFIRM_QTY)	CONFIRM_QTY  
								FROM	LO020ND_G
								WHERE	BRAND_CD	IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
								-- 배송지점	
								#if( "$!{tgt_loc_sel}" != "%" ) 
									AND CENTER_CD = '1300'||'$!{tgt_loc_sel}'
								#end
								AND		OUTBOUND_DATE BETWEEN '$!{in_fr_date}'	AND '$!{in_to_date}'
								AND		ITEM_CD		= '$!{in_item_id}'
								GROUP
								BY		CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD
								)			T2	
						WHERE	DEH.CENTER_CD			=	DED.CENTER_CD
						AND		DEH.BRAND_CD			=	DED.BRAND_CD
						AND		DEH.ORDER_DATE			=	DED.ORDER_DATE
						AND		DEH.ORDER_NO			=	DED.ORDER_NO
						AND		DEH.BRAND_CD			IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
						-- 배송지점	
						#if( "$!{tgt_loc_sel}" != "%" ) 
								AND DEH.CENTER_CD = '1300'||'$!{tgt_loc_sel}'
						#end
						AND		DEH.OUTBOUND_STATE		&gt;=	'10'
						AND		DED.ITEM_STATE			=	'A'
						AND		DED.ITEM_CD				=	ITM.ITEM_CD
						AND		ITM.ITEM_DIV			IN	('FERT','HAWA')
						AND		DEH.ORDER_DATE			BETWEEN '$!{in_fr_date}'	AND '$!{in_to_date}'
						AND		DED.ITEM_CD				= '$!{in_item_id}'
						AND		DED.BRAND_NO			= T2.BRAND_NO(+)
						AND		DED.BRAND_LINE_NO		= T2.BRAND_LINE_NO(+)
						AND		DED.BRAND_DATE			= T2.BRAND_DATE(+)
						AND		DED.ITEM_CD				= T2.ITEM_CD(+)
						AND		DED.CENTER_CD			= T2.CENTER_CD(+)
						GROUP	BY	TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD'),
									SUBSTR(DEH.CENTER_CD,5,4),
									DEH.INOUT_CD,
									DEH.DEPT_CD,
									DEH.DELIVERY_CD,
									DEH.SALESMAN_NM,
									DED.BRAND_NO,
									DED.BRAND_LINE_NO,
									DED.ITEM_CD,
									DED.OTHER_ACCOUNT_CD
						UNION	ALL
						SELECT	TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD')	CNFM_DATE,
								SUBSTR(DEH.CENTER_CD,5,4)			STOR_CODE,
								DEH.INOUT_CD						SLIP_GUBN_CODE,
								DEH.DEPT_CD							DEPT_CODE,
								DEH.DELIVERY_CD				CUST_ID,
								DEH.SALESMAN_NM						IPUT_EMP_NAME,
								DED.BRAND_NO,
								DED.BRAND_LINE_NO,
								DED.ITEM_CD,
								SUM(DED.ORDER_QTY	/	
									(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		REQT_BOX,
								MAX(NVL(T2.CONFIRM_QTY,0)	/	
									(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		SELL_BOX,
								MIN(DEH.REG_DATETIME)	REG_DATETIME,
								MAX(DED.OUTBOUND_STATE)	OUTBOUND_STATE,
								MAX(DED.SHORTAGE_DIV)	SHORTAGE_DIV,
								MAX(DED.ENTRY_DATETIME)	ENTRY_DATETIME,
								DED.OTHER_ACCOUNT_CD
						FROM	LO010NM_P	DEH,
								LO010ND_P	DED,
								CMITEM		ITM,
								(
								SELECT	CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD, SUM(CONFIRM_QTY)	CONFIRM_QTY  
								FROM	LO020ND_P
								WHERE	BRAND_CD	IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
								-- 배송지점	
								#if( "$!{tgt_loc_sel}" != "%" ) 
									AND CENTER_CD = '1300'||'$!{tgt_loc_sel}'
								#end
								AND		OUTBOUND_DATE BETWEEN '$!{in_fr_date}'	AND '$!{in_to_date}'
								AND		ITEM_CD		= '$!{in_item_id}'
								GROUP
								BY		CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD
								)			T2
						WHERE	DEH.CENTER_CD			=	DED.CENTER_CD
						AND		DEH.BRAND_CD			=	DED.BRAND_CD
						AND		DEH.ORDER_DATE			=	DED.ORDER_DATE
						AND		DEH.ORDER_NO			=	DED.ORDER_NO
						AND		DEH.BRAND_CD			IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
						-- 배송지점	
						#if( "$!{tgt_loc_sel}" != "%" ) 
								AND DEH.CENTER_CD = '1300'||'$!{tgt_loc_sel}'
						#end
						AND		DEH.OUTBOUND_STATE		&gt;=	'10'
						AND		DED.ITEM_STATE			=	'A'
						AND		DED.ITEM_CD				=	ITM.ITEM_CD
						AND		ITM.ITEM_DIV			IN	('FERT','HAWA')
						AND		DEH.ORDER_DATE			BETWEEN '$!{in_fr_date}'	AND '$!{in_to_date}'
						AND		DED.ITEM_CD				= '$!{in_item_id}'
						AND		DED.BRAND_NO			= T2.BRAND_NO(+)
						AND		DED.BRAND_LINE_NO		= T2.BRAND_LINE_NO(+)
						AND		DED.BRAND_DATE			= T2.BRAND_DATE(+)
						AND		DED.ITEM_CD				= T2.ITEM_CD(+)
						AND		DED.CENTER_CD			= T2.CENTER_CD(+)
						GROUP	BY	TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD'),
									SUBSTR(DEH.CENTER_CD,5,4),
									DEH.INOUT_CD,
									DEH.DEPT_CD,
									DEH.DELIVERY_CD,
									DEH.SALESMAN_NM,
									DED.BRAND_NO,
									DED.BRAND_LINE_NO,
									DED.ITEM_CD,
									DED.OTHER_ACCOUNT_CD
						UNION	ALL
						-- VER 12.5 결제상신되고 물류전표 생성되지 않은 부서타계정 취합.
						SELECT	(
								-- ORDER날짜를 기준으로 출고일자(DUE_DATE)는 영업일 기준 다음날이다.
								SELECT	MIN(YYYYMMDD)
								FROM	CAL_MST
								WHERE	CAL_DATE	> TRUNC(SYSDATE)
								AND		HOLIDAY_FLAG IS NULL
								)															CNFM_DATE,
								SUBSTR(DEH.CENTER_CD,5,4)									STOR_CODE,
								'PRE_D1E'													SLIP_GUBN_CODE,
								DEH.DEPT_CODE												DEPT_CODE,
								DEH.IPUT_USER												CUST_ID,
								T3.HAN_NAME													IPUT_EMP_NAME,
								SUBSTR(DEH.CENTER_CD,5,4)||
								DEH.ORDER_DATE||LPAD(TO_NUMBER(DEH.ORDER_NO)+5000,4,'0')	BRAND_NO,
								LPAD(DEH.LINE_NO,6,'0')										BRAND_LINE_NO,
								DEH.ITEM_CD													ITEM_CD,
								NVL(DEH.BOX_QTY,0)											REQT_BOX,
								0															SELL_BOX,
								DEH.IPUT_DATE												REG_DATE,
								'10'														OUTBOUND_STATE,
								NULL,NULL,NULL
						FROM	EDIROUTTACTORDER	DEH,
								ITEM_MST			ITM,
								NCOMT005			T3
						WHERE	DEH.ITEM_CD	= ITM.ITEM_ID
						AND		ITYPE	IN ('FERT','HAWA')
						AND		DEH.ORDER_DATE >= TO_CHAR(SYSDATE - 3,'YYYYMMDD')  -- 결제상신 3일전까지는 감안
						AND		DEH.STATUS IN ('2','9') --STATUS상태 : '1' 입력, '2' 상신중  '3' 반려, '9' 결재완료
						AND		DEH.IPUT_USER	= T3.EMP_NO
						AND		DEH.ITEM_CD		= '$!{in_item_id}'
						AND		TRUNC(SYSDATE) 	&lt;=  '$!{in_fr_date}'
						-- 배송지점	
						#if( "$!{tgt_loc_sel}" != "%" ) 
								AND DEH.CENTER_CD = '1300'||'$!{tgt_loc_sel}'
						#end
						AND		NOT EXISTS
								(
								SELECT	T1.CENTER_CD
								FROM	LO010ND		T1
								WHERE	T1.CENTER_CD		= DEH.CENTER_CD
								AND		T1.BRAND_CD		IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
								AND		T1.BRAND_NO			= DEH.ORDER_DATE||LPAD(DEH.ORDER_NO,4,'0')
								AND		T1.BRAND_LINE_NO	= TO_NUMBER(DEH.LINE_NO)
								AND		T1.ORDER_DATE	BETWEEN SYSDATE - 3 AND SYSDATE + 3 
								AND		T1.ITEM_CD			= '$!{in_item_id}'
								UNION	ALL
								SELECT	T1.CENTER_CD
								FROM	LO010ND_P		T1
								WHERE	T1.CENTER_CD		= DEH.CENTER_CD
								AND		T1.BRAND_CD		IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
								AND		T1.BRAND_NO			= DEH.ORDER_DATE||LPAD(DEH.ORDER_NO,4,'0')
								AND		T1.BRAND_LINE_NO	= TO_NUMBER(DEH.LINE_NO)
								AND		T1.ORDER_DATE	BETWEEN SYSDATE - 3 AND SYSDATE + 3
								AND		T1.ITEM_CD			= '$!{in_item_id}'
								UNION	ALL 
								SELECT	T1.CENTER_CD
								FROM	LO010ND_G		T1
								WHERE	T1.CENTER_CD		= DEH.CENTER_CD
								AND		T1.BRAND_CD		IN('100001','100002')	-- 태경 3PL 운용으로 이한 브랜드 코드 수정 : 2013-08-21 우종균
								AND		T1.BRAND_NO			= DEH.ORDER_DATE||LPAD(DEH.ORDER_NO,4,'0')
								AND		T1.BRAND_LINE_NO	= TO_NUMBER(DEH.LINE_NO)
								AND		T1.ORDER_DATE	BETWEEN SYSDATE - 3 AND SYSDATE + 3						
								AND		T1.ITEM_CD			= '$!{in_item_id}'
								)						
						)		    A,
						(
						SELECT	CODE		ITEM_CATG
						FROM	SDSTT500
						WHERE	CODE_GUBN	= 'OR103'
						AND		CODE_NAME2	= 'Y'
						AND		CODE_NAME3	= '01'
						)			B
			    WHERE   A.SLIP_GUBN_CODE	NOT LIKE 'D2%' -- 수송제외
				AND		A.OTHER_ACCOUNT_CD	= B.ITEM_CATG(+)				
				)			T1,
				(
				SELECT	DEPT_CODE, DEPT_NAME
				FROM	SDSTT401
				WHERE	APPL_END_YYMM = '999912'
				AND		DEPT_GRAD_CODE	= '40'
				UNION	ALL
				SELECT	DEPT_CODE,	DEPT_NAME_ABBR	DEPT_NAME
				FROM	NCOMT001		
				)			T2,
				SDSTT101	T3
		WHERE	T1.DEPT_CODE	= T2.DEPT_CODE(+)
		AND		T1.CUST_CODE	= T3.CUST_CODE(+)
		AND		T1.DEPT_CODE	LIKE'$!{sales_list}'		
		-- 마감시간
		#if( "$!{in_input_gubn}" == "01" ) 
			-- 18시 이후	
			AND CNFM_DATE	&gt; TO_CHAR(REG_DATETIME,'YYYYMMDD') AND TO_CHAR(REG_DATETIME,'HH24MISS') &gt; '180000'
		#elseif( "$!{in_input_gubn}" == "02" )	
			-- 17시 이후ㄱ
			AND CNFM_DATE	&gt; TO_CHAR(REG_DATETIME,'YYYYMMDD') AND TO_CHAR(REG_DATETIME,'HH24MISS') &gt; '170000'
		#end
		-- 전표구분
		#if( "$!{in_slip_gubn}" == "01" ) 
			-- 일반	
			AND SLIP_GUBN = '일반'
		#elseif( "$!{in_slip_gubn}" == "02" )	
			-- 회송
			AND (SLIP_GUBN = '회송' OR SLIP_GUBN = '타계정회송')
		#elseif( "$!{in_slip_gubn}" == "03" )	
			-- 부서타계정
			AND (SLIP_GUBN = '타계정' OR SLIP_GUBN = '부서타계정' OR SLIP_GUBN = '결재상신')
		#elseif( "$!{in_slip_gubn}" == "04" )	
			-- 수출
			AND (SLIP_GUBN = '수출출고') 
		#end
		-- 마감구분
		#if( "$!{in_clos_gubn}" == "01" ) 
			-- 전체
		#elseif( "$!{in_clos_gubn}" == "02" )	
			-- 마감
			AND (CHGO_GUBN = '마감')
		#elseif( "$!{in_clos_gubn}" == "03" )	
			-- 마감전
			AND (CHGO_GUBN = '마감전' )
		#elseif( "$!{in_clos_gubn}" == "04" )	
			-- 마감수량차이
			AND CHGO_GUBN = '마감' AND REQT_BOX != SELL_BOX
		#end
		ORDER	BY	CNFM_DATE,DC_ID,DEPT_NAME,HAN_NAME
	</query> 

	<!-- 
	=======================
	  EDI발주전환 분석조회
	=======================
	-->	

	<!-- EDI발주전환 분석조회 --> 
	<query id="ip_07040_EDIvsNFOS_analysis" paging="false"> 

	#if("$!{in_sel_gubn}" == "01") 

		/* 전체조회 */
		SELECT	T1.PROD_CODE,
				F_GET_ITEM_NAME(T1.PROD_CODE)	PROD_NAME,
				T3.DEPT_CODE,
				T4.DEPT_NAME,
				T1.CUST_CODE,
				T5.CUST_NAME,
				SUM(T1.ODER_BOX)		"발주박스",
				SUM(NVL(NFOS_BOX,0))	"주문전환",
				T3.EMP_NO,
				T3.HAN_NAME
		FROM	(
				SELECT	CUST_CODE,
						PROD_CODE,
						SUM(ODER_BOX)	ODER_BOX
				FROM	SDORT120
				WHERE	CNFM_DATE	= REPLACE('$!{cnfm_date}','-','')
				AND		PROD_CODE	!= '000000000' 
				AND		ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
				GROUP
				BY		CUST_CODE,
						PROD_CODE
				)	T1,
				(
				SELECT	T1.SOLD_PART	CUST_CODE,
						T2.PROD_CODE,
						SUM(T2.REQT_BOX)	NFOS_BOX
				FROM	SDORT101	T1,
						SDORT102	T2
				WHERE	T1.SLIP_NO	= T2.SLIP_NO
				AND		SUBSTR(SLIP_GUBN_CODE,1,2)	= 'YO'
				AND		T1.CNFM_DATE	= REPLACE('$!{cnfm_date}','-','')
				AND		T1.UPDT_GUBN	!= '00'
				AND		T2.UPDT_GUBN	!= '00'				
				GROUP
				BY		T1.SOLD_PART,
						T2.PROD_CODE
				)	T2,
				(
				SELECT	DISTINCT	T1.CUST_CODE, T1.DEPT_CODE, T1.STOR_CODE, T3.EMP_NO,T3.HAN_NAME
				FROM	SDSTT103	T1,
						SDSTT105	T2,
						NCOMT005	T3
				WHERE	T1.SALE_ORG	= '1000'
				AND		T1.SALE_ORG	= T2.SALE_ORG
				AND		T1.CUST_CODE	= T2.CUST_CODE
				AND		T2.PRTN_CUST_CODE	= T3.EMP_NO
				AND		T2.PRTN_ROLE	= 'VE'
				)	T3,
				SDSTT401	T4,
				SDSTT101	T5
		WHERE	T4.APPL_END_YYMM	= '999912'
		AND		T1.CUST_CODE	= T2.CUST_CODE(+)
		AND		T1.PROD_CODE	= T2.PROD_CODE(+)
		AND		T1.CUST_CODE	= T3.CUST_CODE
		AND		T3.DEPT_CODE	= T4.DEPT_CODE	
		AND		T1.CUST_CODE	= T5.CUST_CODE
		HAVING	SUM(T1.ODER_BOX)-SUM(NVL(NFOS_BOX,0)) > 0 
		GROUP
		BY		T1.PROD_CODE,
				T3.DEPT_CODE,
				T4.DEPT_NAME,
				T1.CUST_CODE,
				T5.CUST_NAME,
				T3.EMP_NO,
				T3.HAN_NAME
		ORDER
		BY		1,2,4
	
	#elseif("$!{in_sel_gubn}" == "02")
	
		SELECT	T1.PROD_CODE,
				F_GET_ITEM_NAME(T1.PROD_CODE)	PROD_NAME,
				T3.DEPT_CODE,
				T4.DEPT_NAME,
				T1.CUST_CODE,
				T5.CUST_NAME,
				SUM(T1.ODER_BOX)		"발주박스",
				SUM(NVL(NFOS_BOX,0))	"주문전환",
				T6.MODI_BOX				"공급할당",
				T6.REMN_BOX				"배정잔량",
				T3.EMP_NO,
				T3.HAN_NAME
		FROM	(
				SELECT	CUST_CODE,
						PROD_CODE,
						SUM(ODER_BOX)	ODER_BOX
				FROM	SDORT120
				WHERE	CNFM_DATE	= REPLACE('$!{cnfm_date}','-','')
				AND		ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
				AND		PROD_CODE	!= '000000000' 
				GROUP
				BY		CUST_CODE,
						PROD_CODE
				)	T1,
				(
				SELECT	T1.SOLD_PART	CUST_CODE,
						T2.PROD_CODE,
						SUM(T2.REQT_BOX)	NFOS_BOX
				FROM	SDORT101	T1,
						SDORT102	T2
				WHERE	T1.SLIP_NO	= T2.SLIP_NO
				AND		SUBSTR(SLIP_GUBN_CODE,1,2)	= 'YO'
				AND		T1.CNFM_DATE	= REPLACE('$!{cnfm_date}','-','')
				AND		T1.UPDT_GUBN	!= '00'
				AND		T2.UPDT_GUBN	!= '00'				
				GROUP
				BY		T1.SOLD_PART,
						T2.PROD_CODE
				)	T2,
				(
				SELECT	DISTINCT	T1.CUST_CODE, T1.DEPT_CODE, T1.STOR_CODE, T3.EMP_NO,T3.HAN_NAME
				FROM	SDSTT103	T1,
						SDSTT105	T2,
						NCOMT005	T3
				WHERE	T1.SALE_ORG	= '1000'
				AND		T1.SALE_ORG	= T2.SALE_ORG
				AND		T1.CUST_CODE	= T2.CUST_CODE
				AND		T2.PRTN_CUST_CODE	= T3.EMP_NO
				AND		T2.PRTN_ROLE	= 'VE'
				)	T3,
				SDSTT401	T4,
				SDSTT101	T5,
				(
				SELECT	T1.DEPT_CODE,
						T1.PROD_CODE,
						SUM(MODI_BOX)	MODI_BOX,
						SUM(REMN_BOX)	REMN_BOX
				FROM	SDORT204	T1,
						SDORT203	T2
				WHERE	T1.CNFM_DATE	= REPLACE('$!{cnfm_date}','-','')
				AND		T1.CNFM_DATE	= T2.CNFM_DATE
				AND		T1.DEPT_CODE	= T2.DEPT_CODE
				AND		T1.PROD_CODE	= T2.PROD_CODE
				AND		T2.ALLOC_GUBN	= '2'
				GROUP
				BY		T1.DEPT_CODE,
						T1.PROD_CODE
				)			T6
		WHERE	T4.APPL_END_YYMM	= '999912'
		AND		T1.CUST_CODE	= T2.CUST_CODE(+)
		AND		T1.PROD_CODE	= T2.PROD_CODE(+)
		AND		T1.CUST_CODE	= T3.CUST_CODE
		AND		T3.DEPT_CODE	= T4.DEPT_CODE	
		AND		T1.CUST_CODE	= T5.CUST_CODE
		AND		T3.DEPT_CODE	= T6.DEPT_CODE
		AND		T1.PROD_CODE	= T6.PROD_CODE 
		HAVING	SUM(T1.ODER_BOX)-SUM(NVL(NFOS_BOX,0)) > 0 
		GROUP
		BY		T1.PROD_CODE,
				T3.DEPT_CODE,
				T4.DEPT_NAME,
				T1.CUST_CODE,
				T5.CUST_NAME,
				T6.MODI_BOX,
				T6.REMN_BOX,
				T3.EMP_NO,
				T3.HAN_NAME
		ORDER
		BY		1,3,5
	
	#else
		
		SELECT	1
		FROM	DUAL, DUAL
		WHERE	1=0

	#end

	</query> 

	<!-- 
	=======================
	  NFOS긴급주문조회
	=======================
	-->	

	<!-- NFOS긴급주문조회 --> 
	<query id="ip_07050_NFOS_RushOrder_list" paging="false"> 

		SELECT  T1.DEPT_CODE,
		        F_GETSALESLOCNAME(T1.DEPT_CODE)	DEPT_NAME,
		        T1.STOR_CODE,
		        F_GET_DC_NAME(T1.STOR_CODE)		STOR_NAME,
				T1.SOLD_PART,
		        T5.CUST_NAME,
		        T1.PROD_CODE,
		        F_GET_ITEM_NAME(T1.PROD_CODE)	ITEM_NAME,
				T1.REQT_BOX        "주문량",
		        T1.SELL_BOX        "마감량",
				SLIP_NO,
				TO_CHAR(TO_DATE(T1.IPUT_DATE||T1.IPUT_TIME,'YYYYMMDD HH24MISS'),'YYYY/MM/DD HH24:MI:SS')	IPUT_DATE,
				T1.EMP_NO,
				T8.HAN_NAME
		FROM    (
				SELECT	HEAD_DEPT_CODE,
						SALE_DEPT_CODE,
						DEPT_CODE,
						SOLD_PART,
						STOR_CODE,
						PROD_CODE,
						REQT_BOX,
						SELL_BOX,
						CNFM_DATE,
						A.SLIP_NO,
						IPUT_DATE,
						IPUT_TIME,
						EMP_NO
				FROM    SDORT101	A,
						SDORT102	B,
						(-- 이전영업일
						SELECT	MAX(YYYYMMDD)	I_DATE
						FROM	CAL_MST
						WHERE	HOLIDAY_FLAG	IS NULL
						AND		YYYYMMDD	&lt; REPLACE('$!{cnfm_date}','-','')
						)			C
				WHERE	A.SLIP_NO        	= B.SLIP_NO
				AND		A.CNFM_DATE  		= REPLACE('$!{cnfm_date}','-','')
				----
                AND     (    
                            ( A.IPUT_DATE    = C.I_DATE  AND    A.IPUT_TIME > '180000' )
                         OR
                         --               
                            ( A.IPUT_DATE    >= A.CNFM_DATE )
                        )				
				----
--                AND        (
--                            (        A.IPUT_DATE    = C.I_DATE    
--                                AND    A.IPUT_TIME &gt; '$!{in_iput_date}'   
--                            )
--                        OR IPUT_DATE    &gt; REPLACE('$!{cnfm_date}','-','')
--                        )
				AND        SUBSTR(SLIP_GUBN_CODE,1,2)	= 'YO'
				AND        B.UPDT_GUBN					!= '00'
		        )			T1,
		        SDSTT101	T5,
		        NCOMT005	T8
		WHERE	T1.SOLD_PART	= T5.CUST_CODE
		AND		T1.EMP_NO		= T8.EMP_NO
		ORDER
		BY		T1.DEPT_CODE,
		        T1.STOR_CODE,
		        T1.PROD_CODE
        
	</query> 

	<!-- 
	=======================
	  일자별 유통본부별 EDI정보조회
	=======================
	-->	

	<!--일자별 유통본부별 EDI정보조회 --> 
	<query id="ip_07060_EDI_Group_Analysis" paging="false"> 

		SELECT	DECODE(GROUPING(CNFM_DATE),0,CNFM_DATE,'총계')	CNFM_DATE,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI22),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI22)))	EDI22,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI21),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI21)))	EDI21,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI23),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI23)))	EDI23,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI03),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI03)))	EDI03,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI20),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI20)))	EDI20,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI26),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI26)))	EDI26,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI33),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI33)))	EDI33,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI27),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI27)))	EDI27,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI29),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI29)))	EDI29,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI_TOT),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI_TOT)))	EDI_TOT,
				DECODE(GROUPING(CNFM_DATE),0,MAX(EDI_BIG3_TOT),
											 SUM(DECODE(CNFM_DATE,'평균',0,EDI_BIG3_TOT)))	EDI_BIG3_TOT,
				DECODE(GROUPING(CNFM_DATE),0,MAX(SELL_BOX),
											 SUM(DECODE(CNFM_DATE,'평균',0,SELL_BOX)))	SELL_BOX,
				DECODE(GROUPING(CNFM_DATE),0,MAX(BIG3_RATE),
											 ROUND((  SUM(DECODE(CNFM_DATE,'평균',0,EDI22))
												+SUM(DECODE(CNFM_DATE,'평균',0,EDI21))
												+SUM(DECODE(CNFM_DATE,'평균',0,EDI23)))
												/SUM(DECODE(CNFM_DATE,'평균',0,SELL_BOX))
												*100,2))		BIG3_RATE,	
				DECODE(GROUPING(CNFM_DATE),0,MAX(TOT_RATE),
											 ROUND(  SUM(DECODE(CNFM_DATE,'평균',0,EDI_TOT))
									   			/SUM(DECODE(CNFM_DATE,'평균',0,SELL_BOX))
									   			*100,2))		TOT_RATE,
				DECODE(GROUPING(CNFM_DATE),0,MAX(PYEAR_EDI_TOT),
											 SUM(DECODE(CNFM_DATE,'평균',0,PYEAR_EDI_TOT)))	PYEAR_EDI_TOT,
				DECODE(GROUPING(CNFM_DATE),0,MAX(PYEAR_EDI_BIG3_TOT),
											 SUM(DECODE(CNFM_DATE,'평균',0,PYEAR_EDI_BIG3_TOT)))	PYEAR_EDI_BIG3_TOT,
				DECODE(GROUPING(CNFM_DATE),0,MAX(PYEAR_SELL_BOX),
											 SUM(DECODE(CNFM_DATE,'평균',0,PYEAR_SELL_BOX)))	PYEAR_SELL_BOX
		FROM	(		
				SELECT	DECODE(GROUPING(T1.CNFM_DATE),0,
									TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'YYYY-MM-DD')||'('||TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'DY')||')', '평균')	CNFM_DATE,
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI22),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI22))/T2.DAY_CNT,0))		EDI22,			-- 이마트
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI21),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI21))/T2.DAY_CNT,0))		EDI21,			-- 홈플러스
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI23),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI23))/T2.DAY_CNT,0))		EDI23,			-- 롯데마트
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI03),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI03))/T2.DAY_CNT,0))		EDI03,			-- 메가마트
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI20),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI20))/T2.DAY_CNT,0))		EDI20,			-- GS_CVS
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI26),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI26))/T2.DAY_CNT,0))		EDI26,			-- 롯데슈퍼
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI27),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI27))/T2.DAY_CNT,0))		EDI27,			-- 바로코사
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI29),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI29))/T2.DAY_CNT,0))		EDI29,			-- 서원유통
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI33),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI33))/T2.DAY_CNT,0))		EDI33,			-- 서원유통
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI_TOT),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI_TOT))/T2.DAY_CNT,0))		EDI_TOT,		-- 계
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(EDI_BIG3_TOT),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,EDI_BIG3_TOT))/T2.DAY_CNT,0))	EDI_BIG3_TOT,	-- BIG3계
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(SELL_BOX),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,SELL_BOX))/T2.DAY_CNT,0))		SELL_BOX,		-- 주문총량		
						DECODE(GROUPING(T1.CNFM_DATE),0,DECODE(SUM(SELL_BOX),0,0,ROUND((SUM(EDI22)+SUM(EDI21)+SUM(EDI23))/SUM(SELL_BOX)*100,2)),
								NULL)	BIG3_RATE,	-- BIG3비율
						DECODE(GROUPING(T1.CNFM_DATE),0,DECODE(SUM(SELL_BOX),0,0,ROUND(SUM(EDI_TOT)/SUM(SELL_BOX)*100,2)),
								NULL)	TOT_RATE,	-- 전체비율
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(PYEAR_EDI_TOT),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,PYEAR_EDI_TOT))/T2.DAY_CNT,0))	PYEAR_EDI_TOT,	-- 전년 EDI계
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(PYEAR_EDI_BIG3_TOT),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,PYEAR_EDI_BIG3_TOT))/T2.DAY_CNT,0))	PYEAR_EDI_BIG3_TOT,	-- 전년 BIG3계
						DECODE(GROUPING(T1.CNFM_DATE),0,SUM(PYEAR_SELL_BOX),
														ROUND(SUM(DECODE(T2.HOLIDAY_FLAG,'Y',0,PYEAR_SELL_BOX))/T2.DAY_CNT,0))		PYEAR_SELL_BOX		-- 전년 주문총량
				FROM	(			
						SELECT	T1.CNFM_DATE										CNFM_DATE,
							#if("$!{in_qty_gubn}" == "QTY")
								-- 수량
								NVL(SUM(DECODE(GRUP_CODE,'22',T1.ODER_BOX,'32',T1.ODER_BOX)),0)		EDI22,
								NVL(SUM(DECODE(GRUP_CODE,'21',T1.ODER_BOX)),0)		EDI21,
								NVL(SUM(DECODE(GRUP_CODE,'23',T1.ODER_BOX)),0)		EDI23,
								NVL(SUM(DECODE(GRUP_CODE,'03',T1.ODER_BOX)),0)		EDI03,
								NVL(SUM(DECODE(GRUP_CODE,'20',T1.ODER_BOX)),0)		EDI20,
								NVL(SUM(DECODE(GRUP_CODE,'26',T1.ODER_BOX)),0)		EDI26,
								NVL(SUM(DECODE(GRUP_CODE,'27',T1.ODER_BOX)),0)		EDI27,
								--임시방편 나중에 원복한다 서원유통 전용
								DECODE(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_BOX)),0),0,NVL(SUM(DECODE(GRUP_CODE,'34',T1.ODER_BOX)),0)
								,NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_BOX)),0))  	EDI29,                                
								--NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_BOX)),0)		EDI29,
								NVL(SUM(DECODE(GRUP_CODE,'33',T1.ODER_BOX)),0)		EDI33,
								SUM(T1.ODER_BOX)									EDI_TOT,
								SUM(
									CASE
										WHEN GRUP_CODE IN ('21','32','23') THEN T1.ODER_BOX
										ELSE 0
									END
									)												EDI_BIG3_TOT,
							#else
								-- 금액
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'22',T1.ODER_AMT,'32',T1.ODER_AMT)),0)/1000,0)		EDI22,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'21',T1.ODER_AMT)),0)/1000,0)		EDI21,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'23',T1.ODER_AMT)),0)/1000,0)		EDI23,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'03',T1.ODER_AMT)),0)/1000,0)		EDI03,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'20',T1.ODER_AMT)),0)/1000,0)		EDI20,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'26',T1.ODER_AMT)),0)/1000,0)		EDI26,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'27',T1.ODER_AMT)),0)/1000,0)		EDI27,
								--임시방편 나중에 원복한다 서원유통 전용
								DECODE(ROUND(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_AMT)),0)/1000,0),0,ROUND(NVL(SUM(DECODE(GRUP_CODE,'34',T1.ODER_AMT)),0)/1000,0)
								,ROUND(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_AMT)),0)/1000,0))  	EDI29,
								--ROUND(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_AMT)),0)/1000,0)		EDI29,
								ROUND(NVL(SUM(DECODE(GRUP_CODE,'33',T1.ODER_AMT)),0)/1000,0)		EDI33,
								ROUND(SUM(T1.ODER_AMT)/1000,0)										EDI_TOT,
								ROUND(SUM(
									CASE
										WHEN GRUP_CODE IN ('21','32','23') THEN T1.ODER_AMT
										ELSE 0
									END
									)/1000,0)														EDI_BIG3_TOT,
							#end
								0													SELL_BOX,
								0													PYEAR_EDI_TOT,
								0													PYEAR_EDI_BIG3_TOT,
								0													PYEAR_SELL_BOX
						FROM 	(
								SELECT	T1.CNFM_DATE,
										T1.PROD_CODE,
										T1.GRUP_CODE,
										SUM(T1.ODER_BOX)	ODER_BOX,
										SUM(T1.ODER_AMT)	ODER_AMT
								FROM	SDORT120	T1,
										(
										SELECT	CUST_CODE, MIN(STOR_CODE)	DC_ID
										FROM	SDSTT103
										WHERE	SALE_ORG	= '1000'
										AND		TRIM(STOR_CODE)	IS NOT NULL
										GROUP
										BY		CUST_CODE	
										)			T3
								WHERE	CNFM_DATE	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
								AND		GRUP_CODE	IN (
														SELECT	CD
														FROM	CODE_MST
														WHERE	CD_GRP	= 'GRUP_CODE1'
														)
								AND		T1.CUST_CODE	= T3.CUST_CODE
								AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
							#if("$!{in_input_gubn}" == "01")
								-- 18시 기준
								AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
							#elseif("$!{in_input_gubn}" == "02")
								-- 2시반 기준
								AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'143000'
							#end
								GROUP
								BY		T1.CNFM_DATE,
										T1.PROD_CODE,
										T1.GRUP_CODE
								)	T1
						WHERE	T1.PROD_CODE IN  (
								SELECT	K1.ITEM_ID
								FROM	ITEM_MST	K1,
										SDSTT500	K2
								WHERE	K2.CODE			= K1.SALES_CAT03
								AND		CODE_GUBN	= 'ST310'
								#if("$!{in_sell_gubn}" == "F")
									-- 제품
									AND		K2.CODE_NAME2 = 'F'
								#elseif("$!{in_sell_gubn}" == "H")
									-- 상품
									AND		K2.CODE_NAME2 = 'H'
								#end
								AND		ITYPE		IN ('FERT','HAWA')
								)
						GROUP
						BY		T1.CNFM_DATE
						UNION	ALL
						/* 전년 동일 BIG3 EDI량 조회 */
						SELECT	TO_CHAR(ADD_MONTHS(TO_DATE(T1.CNFM_DATE,'YYYY-MM-DD'),12),'YYYYMMDD') CNFM_DATE,
								0	EDI22,        
								0	EDI21,        
								0	EDI23,        
								0	EDI03,        
								0	EDI20,        
								0	EDI26,        
								0	EDI27,        
								0	EDI29,        
								0	EDI33,        
								0	EDI_TOT, 
								0	EDI_BIG3_TOT, 
								0	SELL_BOX,
								#if("$!{in_qty_gubn}" == "QTY")
								-- 수량
									SUM(T1.ODER_BOX)
								#else
								-- 금액
									ROUND(SUM(T1.ODER_AMT)/1000,0)
								#end	PYEAR_EDI_TOT,
								#if("$!{in_qty_gubn}" == "QTY")
								-- 수량
									SUM(
										CASE WHEN GRUP_CODE	IN ('21','22','23','32') THEN T1.ODER_BOX
											 ELSE 0
										END)
								#else
								-- 금액
									ROUND(SUM(
										CASE WHEN GRUP_CODE	IN ('21','22','23','32') THEN T1.ODER_AMT
											 ELSE 0
										END)/1000,0)
								#end	PYEAR_EDI_BIG3_TOT,
								0		PYEAR_SELL_BOX
						FROM	SDORT120	T1,
								ITEM_MST	T2,
								(
								SELECT	CUST_CODE, MIN(STOR_CODE)	DC_ID
								FROM	SDSTT103
								WHERE	SALE_ORG	= '1000'
								AND		TRIM(STOR_CODE)	IS NOT NULL
								GROUP
								BY		CUST_CODE	
								)			T3,
								SDSTT500	T4
						WHERE	CNFM_DATE	BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE('$!{in_fr_date}','-',''),'YYYY-MM-DD'),-12),'YYYYMMDD')
											AND 	TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE('$!{in_to_date}','-',''),'YYYY-MM-DD'),-12),'YYYYMMDD')
						AND		T1.PROD_CODE	= T2.ITEM_ID
						AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
						AND		T2.ITYPE	IN ('FERT','HAWA')
						AND		T1.CUST_CODE	= T3.CUST_CODE
					#if("$!{in_input_gubn}" == "01")
						-- 18시 기준
						AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
					#elseif("$!{in_input_gubn}" == "02")
						-- 2시반 기준
						AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'143000'
					#end
						AND		T4.CODE_GUBN	= 'ST310'
						AND		T4.CODE			= T2.SALES_CAT03
					#if("$!{in_sell_gubn}" == "F")
						-- 제품
						AND		T4.CODE_NAME2 = 'F'
					#elseif("$!{in_sell_gubn}" == "H")
						-- 상품
						AND		T4.CODE_NAME2 = 'H'
					#end
						GROUP
						BY		TO_CHAR(ADD_MONTHS(TO_DATE(T1.CNFM_DATE,'YYYY-MM-DD'),12),'YYYYMMDD')
						UNION	ALL
						/* 3. 전체 영업오더 마감 수량(과거) - 영업실적테이블 사용 */
						SELECT	T1.CNFM_DATE,
								0	EDI22,        
								0	EDI21,        
								0	EDI23,        
								0	EDI03,        
								0	EDI20,        
								0	EDI26,        
								0	EDI27,        
								0	EDI29,        
								0	EDI33,        
								0	EDI_TOT, 
								0	EDI_BIG3_TOT,      
							#if("$!{in_qty_gubn}" == "QTY")
								-- 수량
								SUM(DECODE(T1.CNFM_DATE,TO_CHAR(SYSDATE,'YYYYMMDD'),0,SELL_BOX))	
							#else
								-- 금액
								ROUND(SUM(DECODE(T1.CNFM_DATE,TO_CHAR(SYSDATE,'YYYYMMDD'),0,SUPL_AMT))/1000,0)	
							#end	SELL_BOX,
								0	PYEAR_EDI_TOT,
								0	PYEAR_EDI_BIG3_TOT,
								0	PYEAR_SELL_BOX
						FROM	SDRDT103	T1,
								ITEM_MST	T2,
								SDSTT500	T4
						WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						AND		T1.SELL_GUBN_CODE	= '01'
						AND		T1.PROD_CODE	= T2.ITEM_ID
						AND		T4.CODE_GUBN	= 'ST310'
						AND		T4.CODE			= T2.SALES_CAT03
					#if("$!{in_sell_gubn}" == "F")
						-- 제품
						AND		T4.CODE_NAME2 = 'F'
					#elseif("$!{in_sell_gubn}" == "H")
						-- 상품
						AND		T4.CODE_NAME2 = 'H'
					#end
						GROUP
						BY		T1.CNFM_DATE
						UNION	ALL
						/* 4. 전체 영업오더 마감 수량(오늘이후) - 전표테이블 사용 */
						SELECT	T1.CNFM_DATE,
								0	EDI22,        
								0	EDI21,        
								0	EDI23,        
								0	EDI03,        
								0	EDI20,        
								0	EDI26,        
								0	EDI27,        
								0	EDI29,        
								0	EDI33,        
								0	EDI_TOT, 
								0	EDI_BIG3_TOT,      
								SUM(
									CASE
										WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
											CASE
											WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
												T1.SELL_BOX
											ELSE
												-1*T1.SELL_BOX
											END
										ELSE
											T1.SELL_BOX * T3.SIGN1
									END
								)	SELL_BOX,
								0	PYEAR_EDI_TOT,
								0	PYEAR_EDI_BIG3_TOT,
								0	PYEAR_SELL_BOX
						FROM	(
								SELECT	T1.CNFM_DATE,
										T2.PROD_CODE,
										T2.ITEM_CATG,
										#if("$!{in_qty_gubn}" == "QTY")
											-- 수량
											SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
										#else
											-- 금액
											ROUND(SUM(T2.SUPL_AMT)/1000,0)	SELL_BOX
										#end
								FROM	SDORT101	T1,
										SDORT102	T2
								WHERE	T1.SLIP_NO		= T2.SLIP_NO
								AND		T1.CNFM_DATE	&gt;= TO_CHAR(SYSDATE,'YYYYMMDD')
								AND		T1.CNFM_DATE	&lt;= REPLACE('$!{in_to_date}','-','')
								AND		T1.UPDT_GUBN	!= '00'
								AND		T2.UPDT_GUBN	!= '00'	
								AND		SUBSTR(T2.ITEM_CATG,1,2) = 'YO'
								GROUP
								BY		T1.CNFM_DATE,
										T2.ITEM_CATG,
										T2.PROD_CODE
								)			T1,
								ITEM_MST	T2,
								(
								SELECT	CODE		ITEM_CATG,
										CODE_NAME4	SIGN1
								FROM	SDSTT500
								WHERE	CODE_GUBN	= 'OR103'
								AND		CODE_NAME2	= 'Y'
								AND		CODE_NAME3	= '01'
								)			T3,
								SDSTT500	T4
						WHERE	T1.ITEM_CATG 	= T3.ITEM_CATG(+)
						AND		T1.PROD_CODE	= T2.ITEM_ID
						AND		T4.CODE_GUBN	= 'ST310'
						AND		T4.CODE			= T2.SALES_CAT03
					#if("$!{in_sell_gubn}" == "F")
						-- 제품
						AND		T4.CODE_NAME2 = 'F'
					#elseif("$!{in_sell_gubn}" == "H")
						-- 상품
						AND		T4.CODE_NAME2 = 'H'
					#end
						GROUP
						BY		T1.CNFM_DATE
						UNION	ALL
						/* 5. 전년동일(과거) - 영업실적테이블 사용 */
						SELECT	TO_CHAR(ADD_MONTHS(TO_DATE(T1.CNFM_DATE,'YYYY-MM-DD'),12),'YYYYMMDD')	CNFM_DATE,
								0	EDI22,        
								0	EDI21,        
								0	EDI23,        
								0	EDI03,        
								0	EDI20,        
								0	EDI26,        
								0	EDI27,        
								0	EDI29,        
								0	EDI33,        
								0	EDI_TOT, 
								0	EDI_BIG3_TOT, 
								0 	SELL_BOX,
								0	PYEAR_EDI_TOT,	
								0	PYEAR_EDI_BIG3_TOT,
							#if("$!{in_qty_gubn}" == "QTY")
								-- 수량
								SUM(SELL_BOX)	
							#else
								-- 금액
								ROUND(SUM(SUPL_AMT)/1000,0)	
							#end	PYEAR_SELL_BOX
						FROM	SDRDT103	T1,
								ITEM_MST	T2,
								SDSTT500	T4
						WHERE	T1.CNFM_DATE	BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE('$!{in_fr_date}','-',''),'YYYY-MM-DD'),-12),'YYYYMMDD')
												AND 	TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE('$!{in_to_date}','-',''),'YYYY-MM-DD'),-12),'YYYYMMDD')
						AND		T1.SELL_GUBN_CODE	= '01'
						AND		T1.PROD_CODE	= T2.ITEM_ID
						AND		T4.CODE_GUBN	= 'ST310'
						AND		T4.CODE			= T2.SALES_CAT03
					#if("$!{in_sell_gubn}" == "F")
						-- 제품
						AND		T4.CODE_NAME2 = 'F'
					#elseif("$!{in_sell_gubn}" == "H")
						-- 상품
						AND		T4.CODE_NAME2 = 'H'
					#end
						GROUP
						BY		TO_CHAR(ADD_MONTHS(TO_DATE(T1.CNFM_DATE,'YYYY-MM-DD'),12),'YYYYMMDD')
						)	T1,
						(
						SELECT	YYYYMMDD,
								NVL(HOLIDAY_FLAG,'N')	HOLIDAY_FLAG,
								(
								/* 영업일수 */
								SELECT	COUNT(YYYYMMDD)
								FROM	CAL_MST
								WHERE	YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
								AND		HOLIDAY_FLAG IS NULL
								)						DAY_CNT
						FROM	CAL_MST
						WHERE	YYYYMMDD	BETWEEN REPLACE('$!{in_fr_date}','-','') AND REPLACE('$!{in_to_date}','-','')
						)	T2
				WHERE	T1.CNFM_DATE	= T2.YYYYMMDD						
				GROUP
				BY		ROLLUP(T1.CNFM_DATE), DAY_CNT
				)
		GROUP
		BY		ROLLUP(CNFM_DATE)		

	</query> 

	<!--EDI 유통본부별 품목별 상세 --> 
	<query id="ip_07060_EDI_Group_Item_Detail_Popup" paging="false">

	SELECT	DECODE(GB.GUBN,'1',E1.ITEM_ID,
				DECODE(GB.GUBN,'2','면합계',
					DECODE(GB.GUBN,'3','스낵합계',
	            		DECODE(GB.GUBN,'4','밥합계',
	            			DECODE(GB.GUBN,'5','기타제품합계',
	            				DECODE(GB.GUBN,'6','상품합계','전체합계')))))
				) GUBN,
	        DECODE(GB.GUBN,'1',E1.ITEM_NAME,
				DECODE(GB.GUBN,'2','',
					DECODE(GB.GUBN,'3','',
	            		DECODE(GB.GUBN,'4','',
	            			DECODE(GB.GUBN,'5','',
	            				DECODE(GB.GUBN,'6','','')))))
				) ITEM_NAME,
	        SUM	(
	            CASE 	
	        		WHEN GB.GUBN	=	'1' THEN E1.EDI22			
	        		WHEN GB.GUBN	=	'2' THEN
	                	CASE	WHEN	E2.DIVISION	=	'10' 	AND	E2.ITYPE	=	'FERT'	THEN E1.EDI22 
	                    		ELSE 0 
	                    END		--면
					WHEN GB.GUBN	=	'3' THEN
	                	CASE	WHEN	E2.DIVISION	=	'20'	AND	E2.ITYPE	=	'FERT'	THEN E1.EDI22   	--스낵
	                    		ELSE 0
						END                            	         	
	                WHEN GB.GUBN	=	'4' THEN
	                	CASE 	WHEN	E2.DIVISION	=	'40' 	AND	E2.ITYPE	=	'FERT'	THEN E1.EDI22	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI22	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI22	--상품
	                    		ELSE 0
	                    END
	        		ELSE E1.EDI22
	            END
				)"이마트",
	        SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI21
	        		WHEN GB.GUBN	=	'2' THEN
	                	CASE	WHEN	E2.DIVISION	='10'	AND	E2.ITYPE	='FERT'	THEN	E1.EDI21		--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN
	                	CASE	WHEN	E2.DIVISION	='20'	AND	E2.ITYPE	='FERT'	THEN	E1.EDI21   	--스낵
	                    		ELSE 0
	                    END	         	
	                WHEN GB.GUBN	=	'4' THEN
	                	CASE	WHEN	E2.DIVISION	='40'	AND	E2.ITYPE	='FERT'	THEN	E1.EDI21	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI21	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI21	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI21
	            END
				)"홈플러스",
	 		SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI23
	        		WHEN GB.GUBN	=	'2' THEN
	                	CASE	WHEN	E2.DIVISION	='10'	AND	E2.ITYPE	='FERT'	THEN E1.EDI23	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN
	                	CASE	WHEN	E2.DIVISION	='20'	AND	E2.ITYPE	='FERT'	THEN E1.EDI23  	--스낵
	                    		ELSE 0
	                    END         	
	                WHEN GB.GUBN	=	'4' THEN
	                	CASE	WHEN	E2.DIVISION	='40'	AND	E2.ITYPE	='FERT'	THEN E1.EDI23	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI23	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI23	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI23
	            END
				)"롯데마트",
	      	SUM	(
	            CASE 	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI03
	        		WHEN GB.GUBN	=	'2' THEN
	                	CASE	WHEN	 E2.DIVISION	='10'	AND	E2.ITYPE	='FERT'	THEN E1.EDI03	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN
	                	CASE	WHEN	E2.DIVISION	='20'	AND	E2.ITYPE	='FERT'	THEN E1.EDI03  	--스낵
	                    		ELSE 0
	                    END         	
	                WHEN GB.GUBN	=	'4' THEN
	                	CASE	WHEN	E2.DIVISION	='40'	AND	E2.ITYPE	='FERT'	THEN E1.EDI03	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI03	--기타제품
	                   			ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI03	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI03
	            END
				)"메가마트",
	        SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI20
	        		WHEN GB.GUBN	=	'2' THEN
	                	CASE	WHEN	E2.DIVISION	='10'	AND	E2.ITYPE	='FERT'	THEN E1.EDI20	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN
	                	CASE	WHEN	E2.DIVISION	='20'	AND	E2.ITYPE	='FERT'	THEN E1.EDI20  	--스낵
	                    		ELSE 0
	                    END         	
	                WHEN GB.GUBN	=	'4' THEN
	                	CASE	WHEN	E2.DIVISION	='40'	AND	E2.ITYPE	='FERT'	THEN E1.EDI20	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI20	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI20	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI20
	            END
				)"GS_CVS",
	      SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI26
	        		WHEN GB.GUBN	=	'2'THEN 
	                	CASE	WHEN	E2.DIVISION	='10'	AND	E2.ITYPE	='FERT'	THEN E1.EDI26	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20'	AND	E2.ITYPE	='FERT'	THEN E1.EDI26  	--스낵     
	                    		ELSE 0
	                    END    	
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40'	AND	E2.ITYPE	='FERT'	THEN E1.EDI26	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI26	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI26	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI26
	            END
				)"롯데슈퍼",
	      SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI33
	        		WHEN GB.GUBN	=	'2'THEN 
	                	CASE	WHEN	E2.DIVISION	='10'	AND	E2.ITYPE	='FERT'	THEN E1.EDI33	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20'	AND	E2.ITYPE	='FERT'	THEN E1.EDI33  	--스낵     
	                    		ELSE 0
	                    END    	
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40'	AND	E2.ITYPE	='FERT'	THEN E1.EDI33	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI33	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI33	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI33
	            END
				)"롯데로지",
		  SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI27
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI27	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                    CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI27  	--스낵
	                    		ELSE 0
	                    END         	
	                WHEN GB.GUBN	=	'4' THEN 
	                    CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI27	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI27	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI27	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI27
	            END
				)"바로코사",
	       SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI29
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI29	--면
	                   			ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI29  	--스낵
	                    		ELSE 0
	                    END         	
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI29	--밥
	                    		ELSE 0
	                    END         	
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI29	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI29	--상품
	                    		ELSE 0
	                    END       	
	            	ELSE E1.EDI29
	            END
				)"서원유통", 	        	
	     SUM	(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI_TOT
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI_TOT	--면
	                    		ELSE 0 
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI_TOT  	--스낵         	
	                    		ELSE 0 
	                    END
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI_TOT	--밥
	                    		ELSE 0 
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI_TOT	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI_TOT	--상품
	                    		ELSE 0
	                    END  
					ELSE E1.EDI_TOT
	            END
				)"계", 
		SUM		(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.SELL_BOX
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.SELL_BOX	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.SELL_BOX  	--스낵         	
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.SELL_BOX	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.SELL_BOX	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.SELL_BOX	--상품
	                    		ELSE 0
	                    END 
					ELSE E1.SELL_BOX
	            END
				)"당일판매", 
		SUM		(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.PRE_EDI_TOT
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.PRE_EDI_TOT	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.PRE_EDI_TOT  	--스낵         	
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.PRE_EDI_TOT	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.PRE_EDI_TOT	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.PRE_EDI_TOT	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.PRE_EDI_TOT
	            END
				)"전일EDI", 
		SUM		(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.PRE_SELL_BOX
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.PRE_SELL_BOX	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.PRE_SELL_BOX  	--스낵         	
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'4' THEN 
	                    CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.PRE_SELL_BOX	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.PRE_SELL_BOX	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.PRE_SELL_BOX	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.PRE_SELL_BOX
	            END
				)"전일판매",
		SUM		(
	            CASE	
	        		WHEN GB.GUBN	=	'1' THEN	E1.EDI_MEAN_1WEEK
	        		WHEN GB.GUBN	=	'2' THEN 
	                	CASE	WHEN	E2.DIVISION	='10' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI_MEAN_1WEEK	--면
	                    		ELSE 0
	                    END
					WHEN GB.GUBN	=	'3' THEN 
	                	CASE	WHEN	E2.DIVISION	='20' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI_MEAN_1WEEK  	--스낵         	
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'4' THEN 
	                	CASE	WHEN	E2.DIVISION	='40' 				AND	E2.ITYPE	='FERT'	THEN E1.EDI_MEAN_1WEEK	--밥
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'5' THEN
	                	CASE	WHEN	E2.DIVISION	NOT IN('10','20','40')	AND	E2.ITYPE	='FERT' THEN E1.EDI_MEAN_1WEEK	--기타제품
	                    		ELSE 0
	                    END
	                WHEN GB.GUBN	=	'6' THEN
	                	CASE	WHEN	E2.ITYPE	='HAWA' THEN E1.EDI_MEAN_1WEEK	--상품
	                    		ELSE 0
	                    END
	            	ELSE E1.EDI_MEAN_1WEEK
	            END
				)"일주평균(EDI)"		
	FROM	(
			SELECT	ITEM_ID,
					F_GET_ITEM_NAME(ITEM_ID) 	ITEM_NAME,
					SUM(EDI22)					EDI22,   
					SUM(EDI21)					EDI21, 
					SUM(EDI23)					EDI23, 
					SUM(EDI03)					EDI03, 
					SUM(EDI20)					EDI20,   
					SUM(EDI26)					EDI26, 
					SUM(EDI27)					EDI27, 
					SUM(EDI29)					EDI29, 
					SUM(EDI33)					EDI33, 
					SUM(EDI_TOT)				EDI_TOT,
					SUM(SELL_BOX)				SELL_BOX,
					SUM(PRE_EDI_TOT)			PRE_EDI_TOT,
					SUM(PRE_SELL_BOX)			PRE_SELL_BOX,
					SUM(EDI_MEAN_1WEEK)			EDI_MEAN_1WEEK
			FROM	(		
					SELECT	T1.PROD_CODE					ITEM_ID,
						#if("$!{in_qty_gubn}" == "QTY")
							-- 수량	
							NVL(SUM(DECODE(GRUP_CODE,'32',T1.ODER_BOX)),0)		EDI22,      
							NVL(SUM(DECODE(GRUP_CODE,'21',T1.ODER_BOX)),0)		EDI21,      
							NVL(SUM(DECODE(GRUP_CODE,'23',T1.ODER_BOX)),0)		EDI23,      
							NVL(SUM(DECODE(GRUP_CODE,'03',T1.ODER_BOX)),0)		EDI03,      
							NVL(SUM(DECODE(GRUP_CODE,'20',T1.ODER_BOX)),0)		EDI20,      
							NVL(SUM(DECODE(GRUP_CODE,'26',T1.ODER_BOX)),0)		EDI26,      
							NVL(SUM(DECODE(GRUP_CODE,'27',T1.ODER_BOX)),0)		EDI27,
							DECODE(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_BOX)),0),0,NVL(SUM(DECODE(GRUP_CODE,'34',T1.ODER_BOX)),0),
							NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_BOX)),0))		EDI29, 
							NVL(SUM(DECODE(GRUP_CODE,'33',T1.ODER_BOX)),0)		EDI33,      
							SUM(T1.ODER_BOX)									EDI_TOT,    
						#else
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'32',T1.ODER_AMT)),0)/1000,0)		EDI22,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'21',T1.ODER_AMT)),0)/1000,0)		EDI21,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'23',T1.ODER_AMT)),0)/1000,0)		EDI23,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'03',T1.ODER_AMT)),0)/1000,0)		EDI03,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'20',T1.ODER_AMT)),0)/1000,0)		EDI20,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'26',T1.ODER_AMT)),0)/1000,0)		EDI26,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'27',T1.ODER_AMT)),0)/1000,0)		EDI27,      
							DECODE(ROUND(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_AMT)),0)/1000,0),0,ROUND(NVL(SUM(DECODE(GRUP_CODE,'34',T1.ODER_AMT)),0)/1000,0),
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'29',T1.ODER_AMT)),0)/1000,0))		EDI29,      
							ROUND(NVL(SUM(DECODE(GRUP_CODE,'33',T1.ODER_AMT)),0)/1000,0)		EDI33,      
							ROUND(SUM(T1.ODER_AMT)/1000,0)									EDI_TOT, 
						#end	
							0													SELL_BOX,
							0													PRE_EDI_TOT,
							0													PRE_SELL_BOX,
							0													EDI_MEAN_1WEEK
					FROM 	(
							SELECT	T1.PROD_CODE,
									T1.GRUP_CODE,
									SUM(T1.ODER_BOX)	ODER_BOX,
									SUM(T1.ODER_AMT)	ODER_AMT
							FROM	SDORT120	T1,
									(
									SELECT	CUST_CODE, MIN(STOR_CODE)	DC_ID
									FROM	SDSTT103
									WHERE	SALE_ORG	= '1000'
									AND		TRIM(STOR_CODE)	IS NOT NULL
									GROUP
									BY		CUST_CODE	
									)			T3
							WHERE	CNFM_DATE	= REPLACE('$!{in_cnfm_date}','-','')
							AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
							AND		GRUP_CODE	IN (
													SELECT	CD
													FROM	CODE_MST
													WHERE	CD_GRP	= 'GRUP_CODE1'
													)
							AND		T1.CUST_CODE	= T3.CUST_CODE
						#if("$!{in_input_gubn}" == "01")
							-- 18시 기준
							AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
						#elseif("$!{in_input_gubn}" == "02")
							-- 2시반 기준
							AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'143000'
						#end
							GROUP
							BY		T1.PROD_CODE,
									T1.GRUP_CODE
							)	T1
					WHERE	T1.PROD_CODE IN  (
							SELECT	K1.ITEM_ID
							FROM	ITEM_MST	K1,
									SDSTT500	K2
							WHERE	K2.CODE			= K1.SALES_CAT03
							AND		CODE_GUBN	= 'ST310'
							#if("$!{in_sell_gubn}" == "F")
								-- 제품
								AND		K2.CODE_NAME2 = 'F'
							#elseif("$!{in_sell_gubn}" == "H")
								-- 상품
								AND		K2.CODE_NAME2 = 'H'
							#end
							AND		ITYPE		IN ('FERT','HAWA')
							)
					GROUP
					BY		T1.PROD_CODE
					UNION	ALL
					/* 전일 EDI판매 */
					SELECT	T1.PROD_CODE	ITEM_ID,
							0	EDI22,        
							0	EDI21,        
							0	EDI23,        
							0	EDI03,        
							0	EDI20,        
							0	EDI26,        
							0	EDI27,        
							0	EDI29,        
							0	EDI33,        
							0	EDI_TOT,
							0	SELL_BOX, 
						#if("$!{in_qty_gubn}" == "QTY")
							-- 수량	
							SUM(T1.ODER_BOX)	PRE_EDI_TOT,
						#else
							-- 금액
							ROUND(SUM(T1.ODER_AMT)/1000,0)	PRE_EDI_TOT,
						#end
							0					PRE_SELL_BOX,
							0					EDI_MEAN_1WEEK
					FROM	SDORT120	T1,
							ITEM_MST	T2,
							(
							SELECT	CUST_CODE, MIN(STOR_CODE)	DC_ID
							FROM	SDSTT103
							WHERE	SALE_ORG	= '1000'
							AND		TRIM(STOR_CODE)	IS NOT NULL
							GROUP
							BY		CUST_CODE	
							)			T3,
							(
							SELECT	MAX(YYYYMMDD)	YYYYMMDD
							FROM	CAL_MST
							WHERE	YYYYMMDD &lt; REPLACE('$!{in_cnfm_date}','-','')
							AND		HOLIDAY_FLAG IS NULL
							)			T4,
							SDSTT500	T5
					WHERE	CNFM_DATE	=	T4.YYYYMMDD
					AND		GRUP_CODE	IN (
											SELECT	CD
											FROM	CODE_MST
											WHERE	CD_GRP	= 'GRUP_CODE1'
											)
					AND		T1.PROD_CODE	= T2.ITEM_ID
					AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
					AND		T2.ITYPE	IN ('FERT','HAWA')
					AND		T1.CUST_CODE	= T3.CUST_CODE
				#if("$!{in_input_gubn}" == "01")
					-- 18시 기준
					AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
				#elseif("$!{in_input_gubn}" == "02")
					-- 2시반 기준
					AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'143000'
				#end
					AND		T5.CODE_GUBN	= 'ST310'
					AND		T5.CODE			= T2.SALES_CAT03
				#if("$!{in_sell_gubn}" == "F")
					-- 제품
					AND		T5.CODE_NAME2 = 'F'
				#elseif("$!{in_sell_gubn}" == "H")
					-- 상품
					AND		T5.CODE_NAME2 = 'H'
				#end
					GROUP
					BY		T1.PROD_CODE
					UNION	ALL
					/* 전일+당일판매(과거) */
					SELECT	T1.PROD_CODE		ITEM_ID,
							0	EDI22,        
							0	EDI21,        
							0	EDI23,        
							0	EDI03,        
							0	EDI20,        
							0	EDI26,        
							0	EDI27,        
							0	EDI29,        
							0	EDI33,        
							0	EDI_TOT, 
						#if("$!{in_qty_gubn}" == "QTY")
							-- 수량
							SUM(DECODE(T1.CNFM_DATE, REPLACE('$!{in_cnfm_date}','-',''), SELL_BOX))	SELL_BOX,
						#else
							-- 금액
							ROUND(SUM(DECODE(T1.CNFM_DATE, REPLACE('$!{in_cnfm_date}','-',''), SUPL_AMT))/1000,0)	SELL_BOX,
						#end
							0					PRE_EDI_TOT,
						#if("$!{in_qty_gubn}" == "QTY")
							-- 수량
							SUM(DECODE(T1.CNFM_DATE, T3.YYYYMMDD, SELL_BOX))	PRE_SELL_BOX,
						#else
							-- 금액
							ROUND(SUM(DECODE(T1.CNFM_DATE, T3.YYYYMMDD, SUPL_AMT))/1000,0)	PRE_SELL_BOX,
						#end
							0					EDI_MEAN_1WEEK
					FROM	SDRDT103	T1,
							ITEM_MST	T2,
							(
							SELECT	MAX(YYYYMMDD)	YYYYMMDD
							FROM	CAL_MST
							WHERE	YYYYMMDD  &lt; REPLACE('$!{in_cnfm_date}','-','')
							AND		HOLIDAY_FLAG IS NULL
							)			T3,
							SDSTT500	T4
					WHERE	T1.CNFM_DATE	BETWEEN 	T3.YYYYMMDD AND REPLACE('$!{in_cnfm_date}','-','')
					AND		T1.CNFM_DATE	&lt; TO_CHAR(SYSDATE, 'YYYYMMDD')
					AND		T1.SELL_GUBN_CODE	= '01'
					AND		T1.PROD_CODE	= T2.ITEM_ID
					AND		T4.CODE_GUBN	= 'ST310'
					AND		T4.CODE			= T2.SALES_CAT03
				#if("$!{in_sell_gubn}" == "F")
					-- 제품
					AND		T4.CODE_NAME2 = 'F'
				#elseif("$!{in_sell_gubn}" == "H")
					-- 상품
					AND		T4.CODE_NAME2 = 'H'
				#end
					GROUP
					BY		T1.PROD_CODE
					UNION	ALL
					/* 전일+당일판매(오늘이후) */
					SELECT	T1.PROD_CODE,
							0	EDI22,        
							0	EDI21,        
							0	EDI23,        
							0	EDI03,        
							0	EDI20,        
							0	EDI26,        
							0	EDI27,        
							0	EDI29,        
							0	EDI33,        
							0	EDI_TOT,
							SUM(
								CASE
									WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
										CASE
										WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
											DECODE(T1.CNFM_DATE,REPLACE('$!{in_cnfm_date}','-',''),T1.SELL_BOX)
										ELSE
											-1*DECODE(T1.CNFM_DATE,REPLACE('$!{in_cnfm_date}','-',''),T1.SELL_BOX)
										END
									ELSE
										DECODE(T1.CNFM_DATE,REPLACE('$!{in_cnfm_date}','-',''),T1.SELL_BOX) * T3.SIGN1
								END
							)	SELL_BOX,      
							0					PRE_EDI_TOT,
							SUM(
								CASE
									WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
										CASE
										WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
											DECODE(T1.CNFM_DATE,T5.PRE_DATE,T1.SELL_BOX)
										ELSE
											-1*DECODE(T1.CNFM_DATE,T5.PRE_DATE,T1.SELL_BOX)
										END
									ELSE
										DECODE(T1.CNFM_DATE,T5.PRE_DATE,T1.SELL_BOX) * T3.SIGN1
								END
							)	PRE_SELL_BOX,
							0					EDI_MEAN_1WEEK
					FROM	(
							SELECT	T1.CNFM_DATE,
									T2.PROD_CODE,
									T2.ITEM_CATG,
									#if("$!{in_qty_gubn}" == "QTY")
										-- 수량
										SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
									#else
										-- 금액
										ROUND(SUM(T2.SUPL_AMT)/1000,0)	SELL_BOX
									#end
							FROM	SDORT101	T1,
									SDORT102	T2
							WHERE	T1.SLIP_NO		= T2.SLIP_NO
							AND		T1.CNFM_DATE	&gt;= TO_CHAR(SYSDATE,'YYYYMMDD')
							AND		T1.CNFM_DATE	&lt;= REPLACE('$!{in_cnfm_date}','-','')
							AND		T1.UPDT_GUBN	!= '00'
							AND		T2.UPDT_GUBN	!= '00'	
							AND		SUBSTR(T2.ITEM_CATG,1,2) = 'YO'
							GROUP
							BY		T1.CNFM_DATE,
									T2.ITEM_CATG,
									T2.PROD_CODE
							)			T1,
							ITEM_MST	T2,
							(
							SELECT	CODE		ITEM_CATG,
									CODE_NAME4	SIGN1
							FROM	SDSTT500
							WHERE	CODE_GUBN	= 'OR103'
							AND		CODE_NAME2	= 'Y'
							AND		CODE_NAME3	= '01'
							)			T3,
							SDSTT500	T4,
							(
							SELECT	MAX(YYYYMMDD)	PRE_DATE
							FROM	CAL_MST
							WHERE	YYYYMMDD  &lt; REPLACE('$!{in_cnfm_date}','-','')
							AND		HOLIDAY_FLAG IS NULL
							)			T5
					WHERE	T1.ITEM_CATG 	= T3.ITEM_CATG(+)
					AND		T1.PROD_CODE	= T2.ITEM_ID
					AND		T4.CODE_GUBN	= 'ST310'
					AND		T4.CODE			= T2.SALES_CAT03
				#if("$!{in_sell_gubn}" == "F")
					-- 제품
					AND		T4.CODE_NAME2 = 'F'
				#elseif("$!{in_sell_gubn}" == "H")
					-- 상품
					AND		T4.CODE_NAME2 = 'H'
				#end
					GROUP
					BY		T1.PROD_CODE					
					UNION	ALL		
					/* 일주평균 */
					SELECT	T1.PROD_CODE,
							0	EDI22,        
							0	EDI21,        
							0	EDI23,        
							0	EDI03,        
							0	EDI20,        
							0	EDI26,        
							0	EDI27,        
							0	EDI29,        
							0	EDI33,        
							0	EDI_TOT,
							0	SELL_BOX, 
							0	PRE_EDI_TOT,
							0	PRE_SELL_BOX,
							ROUND(SUM(T1.ODER_BOX)/6,0)	EDI_MEAN_1WEEK
					FROM	(
							SELECT	T1.CNFM_DATE,
									T1.PROD_CODE,
								#if("$!{in_qty_gubn}" == "QTY")
									-- 수량	
									SUM(ODER_BOX)		ODER_BOX
								#else
									-- 금액
									ROUND(SUM(ODER_AMT)/1000,0)		ODER_BOX
								#end	
							FROM	SDORT120	T1,
									ITEM_MST	T2,
									SDSTT500	T4
							WHERE	GRUP_CODE IN (
													SELECT	CD
													FROM	CODE_MST
													WHERE	CD_GRP	= 'GRUP_CODE1'
													)
							AND		T1.CNFM_DATE	BETWEEN TO_CHAR(TO_DATE(REPLACE('$!{in_cnfm_date}','-',''),'YYYY-MM-DD') - 12,'YYYYMMDD')
													AND TO_CHAR(TO_DATE(REPLACE('$!{in_cnfm_date}','-',''),'YYYY-MM-DD') - 1,'YYYYMMDD')
							AND		T1.PROD_CODE	= T2.ITEM_ID
							AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
						#if("$!{in_input_gubn}" == "01")
							-- 18시 기준
							AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
						#elseif("$!{in_input_gubn}" == "02")
							-- 2시반 기준
							AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'143000'
						#end
							AND		T4.CODE_GUBN	= 'ST310'
							AND		T4.CODE			= T2.SALES_CAT03
						#if("$!{in_sell_gubn}" == "F")
							-- 제품
							AND		T4.CODE_NAME2 = 'F'
						#elseif("$!{in_sell_gubn}" == "H")
							-- 상품
							AND		T4.CODE_NAME2 = 'H'
						#end	
							GROUP
							BY		T1.CNFM_DATE,
									T1.PROD_CODE
							)		T1,
							(
							SELECT	MIN(YYYYMMDD)	FR_DATE,
									MAX(YYYYMMDD)	TO_DATE
							FROM	(
									SELECT	YYYYMMDD, RANK() OVER (ORDER BY YYYYMMDD	DESC) RANK
									FROM	CAL_MST
									WHERE	HOLIDAY_FLAG 	IS NULL
									AND		CAL_DATE		&lt;= ( /* 오늘날짜 이후의 경우는 오늘날짜의 정보를 가져온다 */
															CASE 
																WHEN REPLACE('$!{in_cnfm_date}','-','') &gt; TO_CHAR(SYSDATE,'YYYYMMDD') THEN 
																	TO_CHAR(SYSDATE,'YYYYMMDD')
																ELSE
																	REPLACE('$!{in_cnfm_date}','-','')
															END
															)
									)
							WHERE	RANK &lt;= 6
							)	T2
					WHERE	T1.CNFM_DATE	BETWEEN T2.FR_DATE AND T2.TO_DATE	
					GROUP
					BY		T1.PROD_CODE
					)
			HAVING	SUM(EDI_TOT) + SUM(PRE_EDI_TOT) > 0
			GROUP	BY		ITEM_ID		
			-- ORDER	BY		1,2
			)	E1,
			(
	        SELECT	*
	        FROM 	ITEM_MST
	        )	E2,
	        (
	        SELECT  '1' AS GUBN	--품목 합계
	        FROM    DUAL
	        UNION   ALL
	        SELECT  '2' AS GUBN	--면 합계
	        FROM    DUAL            
	        UNION	ALL
	        SELECT  '3' AS GUBN	--스낵		
	        FROM    DUAL
	        UNION	ALL
	        SELECT  '4' AS GUBN	--밥		
	        FROM    DUAL
	        UNION	ALL
	        SELECT  '5' AS GUBN	--기타제품		
	        FROM    DUAL
	        UNION	ALL
	        SELECT  '6' AS GUBN	--상품		
	        FROM    DUAL
	        UNION	ALL
	        SELECT  '7' AS GUBN	--전체		
	        FROM    DUAL
			) GB
	WHERE	E1.ITEM_ID	=	E2.ITEM_ID
	GROUP	BY	
				DECODE(GB.GUBN,'1',E1.ITEM_ID,
					DECODE(GB.GUBN,'2','면합계',
						DECODE(GB.GUBN,'3','스낵합계',
		            		DECODE(GB.GUBN,'4','밥합계',
		            			DECODE(GB.GUBN,'5','기타제품합계',
		            				DECODE(GB.GUBN,'6','상품합계','전체합계')))))
				),
		        DECODE(GB.GUBN,'1',E1.ITEM_NAME,
					DECODE(GB.GUBN,'2','',
						DECODE(GB.GUBN,'3','',
		            		DECODE(GB.GUBN,'4','',
		            			DECODE(GB.GUBN,'5','',
		            				DECODE(GB.GUBN,'6','','')))))
				),
                DECODE(GB.GUBN,'1',1,
					DECODE(GB.GUBN,'2',2,
						DECODE(GB.GUBN,'3',3,
		            		DECODE(GB.GUBN,'4',4,
		            			DECODE(GB.GUBN,'5',5,
		            				DECODE(GB.GUBN,'6',6,7)))))
		        )
	ORDER	BY	DECODE(GB.GUBN,'1',1,
					DECODE(GB.GUBN,'2',2,
						DECODE(GB.GUBN,'3',3,
		            		DECODE(GB.GUBN,'4',4,
		            			DECODE(GB.GUBN,'5',5,
		            				DECODE(GB.GUBN,'6',6,7)))))
		        )
		        , 1
		
	</query> 

	<!-- 
	=======================
	  EDI발주전환분석조회
	=======================
	-->	

	<!--EDI발주전환분석조회 --> 

	<query id="ip_07070_grup_code1" paging="false"> 

		SELECT	CD, CD_NAME
		FROM	CODE_MST, DUAL
		WHERE	CD_GRP	= 'GRUP_CODE1'
		AND		CD IN ('32','21','23','03','20','26','33','27','29','34')
		ORDER
		BY		CAT02

	</query> 

	<query id="ip_07070_EDI_Order_Analysis_list" paging="false"> 

		SELECT	K1.CNFM_DATE,
				K1.PROD_CODE,
		        K3.ITEM_NAME,
		        DECODE(K2.GUBN,'01','발주량','02','납품량','미납량')	GUBN,
		        NVL(SUM(DECODE(K1.GRUP_CODE,'32',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI32,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'21',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI21,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'23',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI23,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'03',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI03,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'20',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI20,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'26',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI26,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'33',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI33,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'27',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI27,      
		        NVL(SUM(DECODE(K1.GRUP_CODE,'29',DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP))),0)		EDI29,      
		        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.SELL_BOX,K1.GAP)),0)		EDI_TOT      
		FROM	(
		        SELECT	CNFM_DATE,
		                PROD_CODE,
		                GRUP_CODE,
		                CUST_CODE,
		                SUM(ODER_BOX)	ODER_BOX,
		                SUM(SELL_BOX)	SELL_BOX,
		                DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) GAP
		        FROM	(
		                    SELECT	T1.CNFM_DATE,
		                            T1.PROD_CODE,
		                            T1.GRUP_CODE,
		                            T1.CUST_CODE,
		                            SUM(T1.ODER_BOX)	ODER_BOX,
		                            0					SELL_BOX
		                    FROM	SDORT120	T1
		                    WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            				AND 	REPLACE('$!{end_date}','-','')	
		                    AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정         				
		                    AND		T1.GRUP_CODE	IN (
		                                            SELECT	CD
		                                            FROM	CODE_MST
		                                            WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
		                                            AND		CD = '$!{grup_code1}'
	#end		                                            
													)
		                    -- 18시 기준
		                    AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
		                    GROUP
		                    BY		T1.CNFM_DATE,
		                            T1.PROD_CODE,
		                            T1.GRUP_CODE,
		                            T1.CUST_CODE                
		                    UNION	ALL                
		                    SELECT	T1.CNFM_DATE,
		                            T1.PROD_CODE,
		                            T6.GRUP_CODE,
		                            T1.CUST_CODE,
		                            0			ODER_BOX,
		                            SUM(
		                                CASE
		                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
		                                        CASE
		                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
		                                            0
		                                        ELSE
		                                            0
		                                        END
		                                    ELSE
		                                       T1.SELL_BOX * T3.SIGN1
		                                END
		                            )	SELL_BOX
		                    FROM	(
		                            SELECT	T1.CNFM_DATE,
		                                    T2.PROD_CODE,
		                                    T2.ITEM_CATG,
		                                    T1.SOLD_PART	CUST_CODE,                                         -- 수량
		                                        SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
		                            FROM	SDORT101	T1,
		                                    SDORT102	T2
		                            WHERE	T1.SLIP_NO		= T2.SLIP_NO
		                            AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            						AND 	REPLACE('$!{end_date}','-','')	
		                            AND		T1.UPDT_GUBN	!= '00'
		                            AND		T2.UPDT_GUBN	!= '00'	
		                            AND		SUBSTR(T2.ITEM_CATG,1,2) NOT LIKE 'YR' -- 반품만 제외
		                            GROUP
		                            BY		T1.CNFM_DATE,
		                                    T2.ITEM_CATG,
		                                    T2.PROD_CODE,
		                                    T1.SOLD_PART
		                            )			T1,
		                            ITEM_MST	T2,
		                            (
		                            SELECT	CODE		ITEM_CATG,
		                                    CODE_NAME4	SIGN1
		                            FROM	SDSTT500
		                            WHERE	CODE_GUBN	= 'OR103'
		                            AND		CODE_NAME2	= 'Y'
		                            AND		CODE_NAME3	= '01'
		                            )			T3,
		                            SDSTT500	T4,
		                            (
		                            SELECT	YYYYMMDD	CNFM_DATE
		                            FROM	CAL_MST
		                            WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
		                            					AND 	REPLACE('$!{end_date}','-','')
		                            )			T5,
		                            SDSTT101	T6
		                    WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
		                    AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
		                    AND		T1.PROD_CODE	= T2.ITEM_ID
		                    AND		T4.CODE_GUBN	= 'ST310'
		                    AND		T4.CODE			= T2.SALES_CAT03
		                    AND		T1.CUST_CODE	= T6.CUST_CODE
		                    AND		T6.GRUP_CODE	IN (
		                                                    SELECT	CD
		                                                    FROM	CODE_MST
		                                                    WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
		                                            AND		CD = '$!{grup_code1}'
	#end		                                            
		                                                    )
		                    GROUP
		                    BY		T1.CNFM_DATE,
		                            T1.PROD_CODE,
		                            T6.GRUP_CODE,
		                            T1.CUST_CODE	                
		                    )
		        GROUP
		        BY		   	CNFM_DATE,
		                    PROD_CODE,
		                    GRUP_CODE,
		                    CUST_CODE                             	
				)	K1,
		        (
		        SELECT	'01'	GUBN,
		        		1		ORD
		        FROM	DUAL
		        UNION	ALL                    
		        SELECT	'02'	GUBN,
		        		2		ORD
		        FROM	DUAL
		        UNION	ALL                    
		        SELECT	'03'	GUBN,
		        		3		ORD
		        FROM	DUAL 
		        )	K2,
		        ITEM_MST	K3,
		        SDSTT101	K4
		WHERE	K1.PROD_CODE	= K3.ITEM_ID
		AND		K1.CUST_CODE	= K4.CUST_CODE   
	#if("$!{item_type}" == "FERT")
		-- 제품
		AND		K3.ITYPE = 'FERT'
	#elseif("$!{item_type}" == "HAWA")
		-- 상품
		AND		K3.ITYPE = 'HAWA'
	#end		                                
	#if( "$!{search_type}" == "1020" )
     	AND		K3.DIVISION        IN ('10','20')
    #elseif ( "$!{search_type}" == "P40" )
    	AND		K3.CAT03 = 'P40'
    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
     	AND		K3.DIVISION        = '$!{search_type}'
    #end 
	#if( "$!{search_item}" != "" )
    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
					OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
    #end 
		GROUP
		BY		K1.CNFM_DATE,
				K1.PROD_CODE,
		        K3.ITEM_NAME,
		        K2.GUBN
		ORDER
		BY		2,1,3   

	</query> 

	<!--EDI발주전환분석조회 DW2--> 
	<query id="ip_07070_EDI_Order_Analysis_Detail_list" paging="false"> 

		/* Detail Query 점포명|제품코드|제품명|발주량|주문량|미납량 */
		SELECT	K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
		        K1.PROD_CODE,
		        SUM(ODER_BOX)	ODER_BOX,
		        SUM(SELL_BOX)	SELL_BOX,
		        DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) GAP
		FROM	(
		        SELECT	T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
		                SUM(T1.ODER_BOX)	ODER_BOX,
		                0					SELL_BOX
		        FROM	SDORT120	T1
		        WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            	AND 	REPLACE('$!{end_date}','-','')	
		        AND		T1.GRUP_CODE	IN (
		                                SELECT	CD
		                                FROM	CODE_MST
		                                WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
                                        AND		CD = '$!{grup_code1}'
	#end		                                            
		                                )
		        -- 18시 기준
		        AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
		        GROUP
		        BY		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE                
		        UNION	ALL                
		        SELECT	T1.PROD_CODE,
		                T6.GRUP_CODE,
		                T1.CUST_CODE,
		                0			ODER_BOX,
		                SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.SELL_BOX * T3.SIGN1
                            END
                        	)	SELL_BOX
		        FROM	(
		                SELECT	T1.CNFM_DATE,
		                        T2.PROD_CODE,
		                        T2.ITEM_CATG,
		                        T1.SOLD_PART	CUST_CODE,                         
		                            SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
		                FROM	SDORT101	T1,
		                        SDORT102	T2
		                WHERE	T1.SLIP_NO		= T2.SLIP_NO
		                AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            			AND 	REPLACE('$!{end_date}','-','')	
		                AND		T1.UPDT_GUBN	!= '00'
		                AND		T2.UPDT_GUBN	!= '00'	
		                AND		T2.ITEM_CATG NOT LIKE 'YR%'  -- 반품만 제외
		                GROUP
		                BY		T1.CNFM_DATE,
		                        T2.ITEM_CATG,
		                        T2.PROD_CODE,
		                        T1.SOLD_PART
		                )			T1,
		                ITEM_MST	T2,
		                (
		                SELECT	CODE		ITEM_CATG,
		                        CODE_NAME4	SIGN1
		                FROM	SDSTT500
		                WHERE	CODE_GUBN	= 'OR103'
		                AND		CODE_NAME2	= 'Y'
		                AND		CODE_NAME3	= '01'
		                )			T3,
		                SDSTT500	T4,
		                (
		                SELECT	YYYYMMDD	CNFM_DATE
		                FROM	CAL_MST
		                WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
		                            		AND 	REPLACE('$!{end_date}','-','')	
		                )			T5,
		                SDSTT101	T6
		        WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
		        AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
		        AND		T1.PROD_CODE	= T2.ITEM_ID
		        AND		T4.CODE_GUBN	= 'ST310'
		        AND		T4.CODE			= T2.SALES_CAT03
		        AND		T1.CUST_CODE	= T6.CUST_CODE
		        AND		T6.GRUP_CODE	IN (
		                                        SELECT	CD
		                                        FROM	CODE_MST
		                                        WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
		                                        AND		CD = '$!{grup_code1}'
	#end		                                            
		                                        )
		        GROUP
		        BY		T1.PROD_CODE,
		                T6.GRUP_CODE,
		                T1.CUST_CODE	                
		        )	K1,
		        SDSTT101	K2,
		        ITEM_MST	K3
		WHERE	K1.CUST_CODE	= K2.CUST_CODE
		AND		K1.PROD_CODE	= K3.ITEM_ID        
	#if("$!{item_type}" == "FERT")
		-- 제품
		AND		K3.ITYPE = 'FERT'
	#elseif("$!{item_type}" == "HAWA")
		-- 상품
		AND		K3.ITYPE = 'HAWA'
	#end		                                
	#if( "$!{search_type}" == "1020" )
     	AND		K3.DIVISION        IN ('10','20')
    #elseif ( "$!{search_type}" == "P40" )
    	AND		K3.CAT03 = 'P40'
    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
     	AND		K3.DIVISION        = '$!{search_type}'
    #end 
	#if( "$!{search_item}" != "" )
    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
					OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
    #end 
		HAVING		DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) &gt; 0            
		GROUP
		BY		K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
				K1.PROD_CODE
		ORDER
		BY		1,3		
		
	</query> 

	<query id="ip_07080_Daily_EDI_Order_Analysis_list_DW1_HEADER" paging="false"> 

		SELECT	'D'||LPAD(T1.SEQ - 1, 2, '0'), T1.MM||'/'||T1.DD, NVL2(T2.YYYYMMDD,50,0) LEN
		FROM	(
		        SELECT	YYYYMMDD, MM, DD, ROWNUM SEQ
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD')
		        )		T1,
				(
		        SELECT	YYYYMMDD
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
		        )		T2
		WHERE	T1.YYYYMMDD = T2.YYYYMMDD(+)
		ORDER
		BY		T1.SEQ

	</query> 
	
	<query id="ip_07080_Daily_EDI_Order_Analysis_list_DW1_HEADER_NEW" paging="false"> 

		SELECT	'D'||LPAD(T1.SEQ - 1, 2, '0'), T1.MM||'/'||T1.DD, NVL2(T2.YYYYMMDD,50,0) LEN
		FROM	(
		        SELECT	YYYYMMDD, MM, DD, ROWNUM SEQ
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD')
		        )		T1,
				(
		        SELECT	YYYYMMDD
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
		        )		T2
		WHERE	T1.YYYYMMDD = T2.YYYYMMDD(+)
		UNION ALL
		SELECT	'D'||LPAD(T1.SEQ - 1, 2, '0')||'_AMT', T1.MM||'/'||T1.DD, NVL2(T2.YYYYMMDD,50,0) LEN
		FROM	(
		        SELECT	YYYYMMDD, MM, DD, ROWNUM SEQ
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD')
		        )		T1,
				(
		        SELECT	YYYYMMDD
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
		        )		T2
		WHERE	T1.YYYYMMDD = T2.YYYYMMDD(+)
		UNION ALL
        		SELECT	'D'||LPAD(T1.SEQ - 1, 2, '0')||'_2', T1.MM||'/'||T1.DD, NVL2(T2.YYYYMMDD,50,0) LEN
		FROM	(
		        SELECT	YYYYMMDD, MM, DD, ROWNUM SEQ
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD')
		        )		T1,
				(
		        SELECT	YYYYMMDD
		        FROM	CAL_MST
		        WHERE	YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
		        )		T2
		WHERE	T1.YYYYMMDD = T2.YYYYMMDD(+)
		ORDER
		BY		1

	</query> 

	<query id="ip_07080_Daily_EDI_Order_Analysis_list" paging="false"> 

	#if("$!{chk_edi_reason}" != "Y")

		SELECT	PROD_CODE,
				ITEM_NAME,
		        GUBN_NAME,
		        SUM(D00)	D00,
		        SUM(D01)	D01,
		        SUM(D02)	D02,
		        SUM(D03)	D03,
		        SUM(D04)	D04,
		        SUM(D05)	D05,
		        SUM(D06)	D06,
		        SUM(D07)	D07,
		        SUM(D08)	D08,
		        SUM(D09)	D09,
		        SUM(D10)	D10,
		        SUM(D11)	D11,
		        SUM(D12)	D12,
		        SUM(D13)	D13,
		        SUM(D14)	D14,
		        SUM(D15)	D15,
		        SUM(D16)	D16,
		        SUM(D17)	D17,
		        SUM(D18)	D18,
		        SUM(D19)	D19,
		        SUM(D20)	D20,
		        SUM(D21)	D21,
		        SUM(D22)	D22,
		        SUM(D23)	D23,
		        SUM(D24)	D24,
		        SUM(D25)	D25,
		        SUM(D26)	D26,
		        SUM(D27)	D27,
		        SUM(D28)	D28,
		        SUM(D29)	D29,
		        SUM(D30)	D30,
		        SUM(TOT)	TOT        
		FROM	(
				
				#if("$!{in_qty_gubn}" == "QTY") 
				--2014-10-29 조회조건에 수량,금액 추가 SCM이승용 요
		        SELECT	DECODE(GROUPING(K1.PROD_CODE),0,K1.PROD_CODE,'')					PROD_CODE,
				        DECODE(GROUPING(K1.PROD_CODE),0,K3.ITEM_NAME,'합 계')			  	ITEM_NAME,
		                K2.GUBN,
				        DECODE(K2.GUBN,'01','발주량','02','주문량','03','납품량','미납량')		GUBN_NAME,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D00,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D01,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D02,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D03,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D04,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D05,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D06,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D07,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D08,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D09,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D10,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D11,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D12,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D13,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D14,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D15,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D16,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D17,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D18,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D19,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D20,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D21,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D22,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D23,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D24,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D25,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D26,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D27,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D28,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D29,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D30,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP)),0)	TOT
				#else
				 SELECT	DECODE(GROUPING(K1.PROD_CODE),0,K1.PROD_CODE,'')					PROD_CODE,
				        DECODE(GROUPING(K1.PROD_CODE),0,K3.ITEM_NAME,'합 계')			  	ITEM_NAME,
		                K2.GUBN,
				        DECODE(K2.GUBN,'01','발주량','02','주문량','03','납품량','미납량')		GUBN_NAME,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D00,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D01,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D02,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D03,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D04,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D05,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D06,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D07,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D08,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D09,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D10,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D11,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D12,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D13,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D14,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D15,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D16,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D17,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D18,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D19,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D20,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D21,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D22,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D23,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D24,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D25,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D26,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D27,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D28,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D29,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D30,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT)),0)	TOT		
				#end
				FROM	(
				        SELECT	CNFM_DATE,
				                PROD_CODE,
				                GRUP_CODE,
				                CUST_CODE,
				                SUM(ODER_BOX)	ODER_BOX,
				                SUM(ODER_AMT)	ODER_AMT,
		                        SUM(REQT_BOX)	REQT_BOX,
				                SUM(SELL_BOX)	SELL_BOX,
				                SUM(REQT_AMT)	REQT_AMT,
				                SUM(SELL_AMT)	SELL_AMT,				                
				                DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) GAP,
				                DECODE(SIGN(SUM(ODER_AMT)-SUM(SELL_AMT)),-1,0,SUM(ODER_AMT)-SUM(SELL_AMT)) GAP_AMT
				        FROM	(
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE,
				                            SUM(T1.ODER_BOX)	ODER_BOX,
				                            SUM(T1.ODER_AMT)	ODER_AMT,
		                                    0					REQT_BOX,
				                            0					SELL_BOX,
				                            0					REQT_AMT,
				                            0					SELL_AMT
				                    FROM	SDORT120	T1
				                    WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            				AND 	REPLACE('$!{end_date}','-','')	
				                    AND		T1.GRUP_CODE	= '$!{grup_code1}'
				                    AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
				                    -- 18시 기준
				                    AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE                
				                    UNION	ALL                
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE,
				                            0			ODER_BOX,
				                            0			ODER_AMT,
		                                    SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_BOX * T3.SIGN1
				                                END
				                            )	REQT_BOX,
				                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_BOX * T3.SIGN1
				                                END
				                            )	SELL_BOX,
				                             SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_AMT * T3.SIGN1
				                                END
				                            )	REQT_AMT,
				                              SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_AMT * T3.SIGN1
				                                END
				                            )	SELL_AMT				                           
				                    FROM	(
				                            SELECT	T1.CNFM_DATE,
				                                    T2.PROD_CODE,
				                                    T2.ITEM_CATG,
				                                    T1.SOLD_PART	CUST_CODE,                                         -- 수량
				                                    SUM(T2.REQT_BOX)	REQT_BOX,
				                                    SUM(T2.SELL_BOX)	SELL_BOX,
                                                    SUM(T2.REQT_BOX*SELL_PRIC) REQT_AMT,
                                                    SUM(T2.SELL_BOX*SELL_PRIC) SELL_AMT
				                                    -- SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
				                            FROM	SDORT101	T1,
				                                    SDORT102	T2
				                            WHERE	T1.SLIP_NO		= T2.SLIP_NO
				                            AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            						AND 	REPLACE('$!{end_date}','-','')	
				                            AND		T1.UPDT_GUBN	!= '00'
				                            AND		T2.UPDT_GUBN	!= '00'	
				                            --AND		SUBSTR(T2.ITEM_CATG,1,2) NOT LIKE 'YR' -- 반품만 제외
				                            AND		(SUBSTR(T2.ITEM_CATG,1,2) = 'YO' OR
				                            			( SUBSTR(T2.ITEM_CATG,1,2) = 'YS' AND  T1.REFR_DOC IS NOT NULL)
				                            		)
				                            GROUP
				                            BY		T1.CNFM_DATE,
				                                    T2.ITEM_CATG,
				                                    T2.PROD_CODE,
				                                    T1.SOLD_PART
				                            )			T1,
				                            ITEM_MST	T2,
				                            (
				                            SELECT	CODE		ITEM_CATG,
				                                    CODE_NAME4	SIGN1
				                            FROM	SDSTT500
				                            WHERE	CODE_GUBN	= 'OR103'
				                            AND		CODE_NAME2	= 'Y'
				                            AND		CODE_NAME3	= '01'
				                            AND		CODE NOT IN ('YSSE') --일반회송 0으로 취급 2014-11-10 이승용 요청
				                            )			T3,
				                            SDSTT500	T4,
				                            (
				                            SELECT	YYYYMMDD	CNFM_DATE
				                            FROM	CAL_MST
				                            WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
				                            					AND 	REPLACE('$!{end_date}','-','')
				                            )			T5,
				                            SDSTT101	T6
				                    WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
				                    AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
				                    AND		T1.PROD_CODE	= T2.ITEM_ID
				                    AND		T4.CODE_GUBN	= 'ST310'
				                    AND		T4.CODE			= T2.SALES_CAT03
				                    AND		T1.CUST_CODE	= T6.CUST_CODE
				                    AND		T6.GRUP_CODE	= '$!{grup_code1}'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE	                
				                    )
				        GROUP
				        BY		   	CNFM_DATE,
				                    PROD_CODE,
				                    GRUP_CODE,
				                    CUST_CODE                             	
						)	K1,
				        (
				        SELECT	'01'	GUBN,
				        		1		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'02'	GUBN,
				        		2		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'03'	GUBN,
				        		3		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'04'	GUBN,
				        		4		ORD
				        FROM	DUAL  
				        )	K2,
				        ITEM_MST	K3,
				        SDSTT101	K4
				WHERE	K1.PROD_CODE	= K3.ITEM_ID
				AND		K1.CUST_CODE	= K4.CUST_CODE  
				AND		K4.GRUP_CODE	= '$!{grup_code1}' 
			#if("$!{item_type}" == "FERT")
				-- 제품
				AND		K3.ITYPE = 'FERT'
			#elseif("$!{item_type}" == "HAWA")
				-- 상품
				AND		K3.ITYPE = 'HAWA'
			#end		                                
			#if( "$!{search_type}" == "1020" )
		     	AND		K3.DIVISION        IN ('10','20')
		    #elseif ( "$!{search_type}" == "P40" )
		    	AND		K3.CAT03 = 'P40'
		    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
		     	AND		K3.DIVISION        = '$!{search_type}'
		    #end 
			#if( "$!{search_item}" != "" )
		    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
							OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		    #end 
				GROUP
				BY		ROLLUP(K1.PROD_CODE),
				        K3.ITEM_NAME,
				        K2.GUBN
				)
		GROUP
		BY		PROD_CODE,
				ITEM_NAME,
				GUBN,        
		        GUBN_NAME               
		ORDER
		BY		1,GUBN

	#else

		SELECT	PROD_CODE,
				ITEM_NAME,
		        GUBN_NAME,
		        SUM(D00)	D00,
		        SUM(D01)	D01,
		        SUM(D02)	D02,
		        SUM(D03)	D03,
		        SUM(D04)	D04,
		        SUM(D05)	D05,
		        SUM(D06)	D06,
		        SUM(D07)	D07,
		        SUM(D08)	D08,
		        SUM(D09)	D09,
		        SUM(D10)	D10,
		        SUM(D11)	D11,
		        SUM(D12)	D12,
		        SUM(D13)	D13,
		        SUM(D14)	D14,
		        SUM(D15)	D15,
		        SUM(D16)	D16,
		        SUM(D17)	D17,
		        SUM(D18)	D18,
		        SUM(D19)	D19,
		        SUM(D20)	D20,
		        SUM(D21)	D21,
		        SUM(D22)	D22,
		        SUM(D23)	D23,
		        SUM(D24)	D24,
		        SUM(D25)	D25,
		        SUM(D26)	D26,
		        SUM(D27)	D27,
		        SUM(D28)	D28,
		        SUM(D29)	D29,
		        SUM(D30)	D30,
		        SUM(TOT)	TOT        
		FROM	(
				#if("$!{in_qty_gubn}" == "QTY")
		        SELECT	DECODE(GROUPING(K1.PROD_CODE),0,K1.PROD_CODE,'')					PROD_CODE,
				        DECODE(GROUPING(K1.PROD_CODE),0,K3.ITEM_NAME,'합 계')			  	ITEM_NAME,
		                K2.GUBN,
				      	DECODE(K2.GUBN,'01','발주량','02','주문량','03','납품량','04','농심사유','05','이마트사유','06','켈로그사유','미납량')		GUBN_NAME,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D00,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D01,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D02,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D03,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D04,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D05,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D06,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D07,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D08,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D09,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D10,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D11,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D12,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D13,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D14,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D15,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D16,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D17,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D18,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D19,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D20,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D21,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D22,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D23,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D24,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D25,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D26,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D27,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D28,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D29,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D30,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP)),0)	TOT
				#else
				 SELECT	DECODE(GROUPING(K1.PROD_CODE),0,K1.PROD_CODE,'')					PROD_CODE,
				        DECODE(GROUPING(K1.PROD_CODE),0,K3.ITEM_NAME,'합 계')			  	ITEM_NAME,
		                K2.GUBN,
				         DECODE(K2.GUBN,'01','발주량','02','주문량','03','납품량','04','농심사유','05','이마트사유','06','켈로그사유','미납량')		GUBN_NAME,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D00,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D01,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D02,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D03,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D04,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D05,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D06,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D07,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D08,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D09,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D10,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D11,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D12,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D13,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D14,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D15,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D16,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D17,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D18,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D19,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D20,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D21,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D22,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D23,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D24,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D25,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D26,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D27,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D28,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D29,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)		D30,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT)),0)	TOT	
				#end
				FROM	(
				        SELECT	CNFM_DATE,
				                PROD_CODE,
				                GRUP_CODE,
				                CUST_CODE,
				                SUM(ODER_BOX)	ODER_BOX,
		                        SUM(REQT_BOX)	REQT_BOX,
				                SUM(SELL_BOX)	SELL_BOX,
                                SUM(REASON_NS)	REASON_NS,
                                SUM(REASON_EM)	REASON_EM,
                                SUM(REASON_KL)	REASON_KL,
                                SUM(ODER_AMT)	ODER_AMT,
                                SUM(REQT_AMT)	REQT_AMT,
                                SUM(SELL_AMT)	SELL_AMT,
				                DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)-SUM(REASON_EM)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)-SUM(REASON_EM)) GAP,
				                DECODE(SIGN(SUM(ODER_AMT)-SUM(SELL_AMT)-SUM(REASON_EM)),-1,0,SUM(ODER_AMT)-SUM(SELL_AMT)-SUM(REASON_EM)) GAP_AMT
				        FROM	(
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE,
				                            SUM(T1.ODER_BOX)	ODER_BOX,
		                                    0					REQT_BOX,
				                            0					SELL_BOX,
                                            0					REASON_NS,
                                            0					REASON_EM,
                                            0					REASON_KL,
                                            SUM(T1.ODER_AMT)	ODER_AMT,
                                            0					REQT_AMT,
                                            0					SELL_AMT
				                    FROM	SDORT120	T1
				                    WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            				AND 	REPLACE('$!{end_date}','-','')	
				                    AND		T1.GRUP_CODE	= '$!{grup_code1}'
				                    AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
				                    -- 18시 기준
				                    AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE                
				                    UNION	ALL                
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE,
				                            0			ODER_BOX,
		                                    SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_BOX * T3.SIGN1
				                                END
				                            )	REQT_BOX,
				                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_BOX * T3.SIGN1
				                                END
				                            )	SELL_BOX,
                                            0	REASON_NS,
                                            0	REASON_EM,
                                            0	REASON_KL,
                                            0	ODER_AMT,                                            
                                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_AMT * T3.SIGN1
				                                END
				                            )	REQT_AMT, 
                                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_AMT * T3.SIGN1
				                                END
				                            )	SELL_AMT                                           
				                    FROM	(
				                            SELECT	T1.CNFM_DATE,
				                                    T2.PROD_CODE,
				                                    T2.ITEM_CATG,
				                                    T1.SOLD_PART	CUST_CODE,                                         -- 수량
				                                    SUM(T2.REQT_BOX)	REQT_BOX,
				                                    SUM(T2.SELL_BOX)	SELL_BOX,
				                                    SUM(T2.REQT_BOX*SELL_PRIC) REQT_AMT,		--SDORT120 에서 ODER 수량 및 금액을, SDORT102에서 REQT, SELL 수량 및 금액을 가져온다
                                                    SUM(T2.SELL_BOX*SELL_PRIC) SELL_AMT
				                                    -- SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
				                            FROM	SDORT101	T1,
				                                    SDORT102	T2
				                            WHERE	T1.SLIP_NO		= T2.SLIP_NO
				                            AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            						AND 	REPLACE('$!{end_date}','-','')	
				                            AND		T1.UPDT_GUBN	!= '00'
				                            AND		T2.UPDT_GUBN	!= '00'	
				                            --AND		SUBSTR(T2.ITEM_CATG,1,2) NOT LIKE 'YR' -- 반품만 제외
				                            AND		(SUBSTR(T2.ITEM_CATG,1,2) = 'YO' OR
				                            			( SUBSTR(T2.ITEM_CATG,1,2) = 'YS' AND  T1.REFR_DOC IS NOT NULL)
				                            		)
				                            GROUP
				                            BY		T1.CNFM_DATE,
				                                    T2.ITEM_CATG,
				                                    T2.PROD_CODE,
				                                    T1.SOLD_PART
				                            )			T1,
				                            ITEM_MST	T2,
				                            (
				                            SELECT	CODE		ITEM_CATG,
				                                    CODE_NAME4	SIGN1
				                            FROM	SDSTT500
				                            WHERE	CODE_GUBN	= 'OR103'
				                            AND		CODE_NAME2	= 'Y'
				                            AND		CODE_NAME3	= '01'
				                            AND		CODE NOT IN ('YSSE') --일반회송 0으로 취급 2014-11-10 이승용 요청
				                            )			T3,
				                            SDSTT500	T4,
				                            (
				                            SELECT	YYYYMMDD	CNFM_DATE
				                            FROM	CAL_MST
				                            WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
				                            					AND 	REPLACE('$!{end_date}','-','')
				                            )			T5,
				                            SDSTT101	T6
				                    WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
				                    AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
				                    AND		T1.PROD_CODE	= T2.ITEM_ID
				                    AND		T4.CODE_GUBN	= 'ST310'
				                    AND		T4.CODE			= T2.SALES_CAT03
				                    AND		T1.CUST_CODE	= T6.CUST_CODE
				                    AND		T6.GRUP_CODE	= '$!{grup_code1}'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE
				                    UNION	ALL
                                    SELECT	CNFM_DATE,
                                            PROD_CODE,
                                            '32'		GRUP_CODE,
                                            CUST_CODE,
                                            0					ODER_BOX,
		                                    0					REQT_BOX,
				                            0					SELL_BOX,
				                            0					ODER_AMT,
                                            0					REQT_AMT,
                                            0					SELL_AMT,
                                            TO_NUMBER(ALLOT_LACK)+TO_NUMBER(STOCK_LACK)+TO_NUMBER(SEND_NOT)+TO_NUMBER(ODER_CONV_NOT)+TO_NUMBER(NS_ETC)							REASON_NS,
                                            TO_NUMBER(NOMAL_CLOSE)+TO_NUMBER(EMER_ODER)+TO_NUMBER(ODER_ERR)+TO_NUMBER(COST_ERR)+TO_NUMBER(BEFORE_STOCK)+TO_NUMBER(REFUS_STOCK)+TO_NUMBER(E_MART_ETC)	REASON_EM,
                                            TO_NUMBER(KELOG)																		REASON_KL
                                    FROM	SDORT127
                                    WHERE	CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            					AND 	REPLACE('$!{end_date}','-','')	
		                            AND		'$!{grup_code1}' = '32'	                
				                    )
				        GROUP
				        BY		   	CNFM_DATE,
				                    PROD_CODE,
				                    GRUP_CODE,
				                    CUST_CODE                             	
						)	K1,
				        (
				        SELECT	'01'	GUBN,
				        		1		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'02'	GUBN,
				        		2		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'03'	GUBN,
				        		3		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'04'	GUBN,
				        		4		ORD
				        FROM	DUAL  
				        UNION	ALL                    
				        SELECT	'05'	GUBN,
				        		5		ORD
				        FROM	DUAL  
				        UNION	ALL                    
				        SELECT	'06'	GUBN,
				        		6		ORD
				        FROM	DUAL  
				        UNION	ALL                    
				        SELECT	'07'	GUBN,
				        		7		ORD
				        FROM	DUAL  
				        )	K2,
				        ITEM_MST	K3,
				        SDSTT101	K4
				WHERE	K1.PROD_CODE	= K3.ITEM_ID
				AND		K1.CUST_CODE	= K4.CUST_CODE  
				AND		K4.GRUP_CODE	= '$!{grup_code1}' 
			#if("$!{item_type}" == "FERT")
				-- 제품
				AND		K3.ITYPE = 'FERT'
			#elseif("$!{item_type}" == "HAWA")
				-- 상품
				AND		K3.ITYPE = 'HAWA'
			#end		                                
			#if( "$!{search_type}" == "1020" )
		     	AND		K3.DIVISION        IN ('10','20')
		    #elseif ( "$!{search_type}" == "P40" )
		    	AND		K3.CAT03 = 'P40'
		    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
		     	AND		K3.DIVISION        = '$!{search_type}'
		    #end 
			#if( "$!{search_item}" != "" )
		    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
							OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		    #end 
				GROUP
				BY		ROLLUP(K1.PROD_CODE),
				        K3.ITEM_NAME,
				        K2.GUBN
				)
		GROUP
		BY		PROD_CODE,
				ITEM_NAME,
				GUBN,        
		        GUBN_NAME               
		ORDER
		BY		1,GUBN
	
	#end

	</query> 
	
	
	<query id="ip_07080_Daily_EDI_Order_Analysis_list_new" paging="false"> 

	#if("$!{chk_edi_reason}" != "Y")

		SELECT	PROD_CODE,
				ITEM_NAME,
		        GUBN_NAME,
		        SUM(D00)	D00,
		        SUM(D01)	D01,
		        SUM(D02)	D02,
		        SUM(D03)	D03,
		        SUM(D04)	D04,
		        SUM(D05)	D05,
		        SUM(D06)	D06,
		        SUM(D07)	D07,
		        SUM(D08)	D08,
		        SUM(D09)	D09,
		        SUM(D10)	D10,
		        SUM(D11)	D11,
		        SUM(D12)	D12,
		        SUM(D13)	D13,
		        SUM(D14)	D14,
		        SUM(D15)	D15,
		        SUM(D16)	D16,
		        SUM(D17)	D17,
		        SUM(D18)	D18,
		        SUM(D19)	D19,
		        SUM(D20)	D20,
		        SUM(D21)	D21,
		        SUM(D22)	D22,
		        SUM(D23)	D23,
		        SUM(D24)	D24,
		        SUM(D25)	D25,
		        SUM(D26)	D26,
		        SUM(D27)	D27,
		        SUM(D28)	D28,
		        SUM(D29)	D29,
		        SUM(D30)	D30,
		        SUM(TOT)	TOT,
		        SUM(D00_AMT)	D00_AMT,
		        SUM(D01_AMT)	D01_AMT,
		        SUM(D02_AMT)	D02_AMT,
		        SUM(D03_AMT)	D03_AMT,
		        SUM(D04_AMT)	D04_AMT,
		        SUM(D05_AMT)	D05_AMT,
		        SUM(D06_AMT)	D06_AMT,
		        SUM(D07_AMT)	D07_AMT,
		        SUM(D08_AMT)	D08_AMT,
		        SUM(D09_AMT)	D09_AMT,
		        SUM(D10_AMT)	D10_AMT,
		        SUM(D11_AMT)	D11_AMT,
		        SUM(D12_AMT)	D12_AMT,
		        SUM(D13_AMT)	D13_AMT,
		        SUM(D14_AMT)	D14_AMT,
		        SUM(D15_AMT)	D15_AMT,
		        SUM(D16_AMT)	D16_AMT,
		        SUM(D17_AMT)	D17_AMT,
		        SUM(D18_AMT)	D18_AMT,
		        SUM(D19_AMT)	D19_AMT,
		        SUM(D20_AMT)	D20_AMT,
		        SUM(D21_AMT)	D21_AMT,
		        SUM(D22_AMT)	D22_AMT,
		        SUM(D23_AMT)	D23_AMT,
		        SUM(D24_AMT)	D24_AMT,
		        SUM(D25_AMT)	D25_AMT,
		        SUM(D26_AMT)	D26_AMT,
		        SUM(D27_AMT)	D27_AMT,
		        SUM(D28_AMT)	D28_AMT,
		        SUM(D29_AMT)	D29_AMT,
		        SUM(D30_AMT)	D30_AMT,
		        SUM(TOT_AMT)	TOT_AMT         
		FROM	(
			    SELECT	DECODE(GROUPING(K1.PROD_CODE),0,K1.PROD_CODE,'')					PROD_CODE,
				        DECODE(GROUPING(K1.PROD_CODE),0,K3.ITEM_NAME,'합 계')			  	ITEM_NAME,
		                K2.GUBN,
				        DECODE(K2.GUBN,'01','발주량','02','주문량','03','납품량','미납량')		GUBN_NAME,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D00,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D01,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D02,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D03,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D04,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D05,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D06,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D07,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D08,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D09,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D10,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D11,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D12,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D13,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D14,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D15,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D16,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D17,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D18,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D19,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D20,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D21,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D22,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D23,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D24,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D25,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D26,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D27,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D28,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D29,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP))),0)		D30,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,K1.GAP)),0)	TOT,				
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D00_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D01_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D02_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D03_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D04_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D05_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D06_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D07_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D08_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D09_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D10_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D11_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D12_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D13_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D14_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D15_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D16_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D17_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D18_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D19_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D20_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D21_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D22_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D23_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D24_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D25_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D26_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D27_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D28_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D29_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT))),0)		D30_AMT,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,K1.GAP_AMT)),0)	TOT_AMT		
				FROM	(
				        SELECT	CNFM_DATE,
				                PROD_CODE,
				                GRUP_CODE,
				                CUST_CODE,
				                SUM(ODER_BOX)	ODER_BOX,
				                SUM(ODER_AMT)	ODER_AMT,
		                        SUM(REQT_BOX)	REQT_BOX,
				                SUM(SELL_BOX)	SELL_BOX,
				                SUM(REQT_AMT)	REQT_AMT,
				                SUM(SELL_AMT)	SELL_AMT,				                
				                DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) GAP,
				                DECODE(SIGN(SUM(ODER_AMT)-SUM(SELL_AMT)),-1,0,SUM(ODER_AMT)-SUM(SELL_AMT)) GAP_AMT
				        FROM	(
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE,
				                            SUM(T1.ODER_BOX)	ODER_BOX,
				                            SUM(T1.ODER_AMT)	ODER_AMT,
		                                    0					REQT_BOX,
				                            0					SELL_BOX,
				                            0					REQT_AMT,
				                            0					SELL_AMT
				                    FROM	SDORT120	T1
				                    WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            				AND 	REPLACE('$!{end_date}','-','')	
				                    AND		T1.GRUP_CODE	= '$!{grup_code1}'
				                    AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
				                    -- 18시 기준
				                    AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE                
				                    UNION	ALL                
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE,
				                            0			ODER_BOX,
				                            0			ODER_AMT,
		                                    SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_BOX * T3.SIGN1
				                                END
				                            )	REQT_BOX,
				                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_BOX * T3.SIGN1
				                                END
				                            )	SELL_BOX,
				                             SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_AMT * T3.SIGN1
				                                END
				                            )	REQT_AMT,
				                              SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_AMT * T3.SIGN1
				                                END
				                            )	SELL_AMT				                           
				                    FROM	(
				                            SELECT	T1.CNFM_DATE,
				                                    T2.PROD_CODE,
				                                    T2.ITEM_CATG,
				                                    T1.SOLD_PART	CUST_CODE,                                         -- 수량
				                                    SUM(T2.REQT_BOX)	REQT_BOX,
				                                    SUM(T2.SELL_BOX)	SELL_BOX,
                                                    SUM(T2.REQT_BOX*SELL_PRIC) REQT_AMT,
                                                    SUM(T2.SELL_BOX*SELL_PRIC) SELL_AMT
				                                    -- SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
				                            FROM	SDORT101	T1,
				                                    SDORT102	T2
				                            WHERE	T1.SLIP_NO		= T2.SLIP_NO
				                            AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            						AND 	REPLACE('$!{end_date}','-','')	
				                            AND		T1.UPDT_GUBN	!= '00'
				                            AND		T2.UPDT_GUBN	!= '00'	
				                            --AND		SUBSTR(T2.ITEM_CATG,1,2) NOT LIKE 'YR' -- 반품만 제외
				                            AND		(SUBSTR(T2.ITEM_CATG,1,2) = 'YO' OR
				                            			( SUBSTR(T2.ITEM_CATG,1,2) = 'YS' AND  T1.REFR_DOC IS NOT NULL)
				                            		)
				                            GROUP
				                            BY		T1.CNFM_DATE,
				                                    T2.ITEM_CATG,
				                                    T2.PROD_CODE,
				                                    T1.SOLD_PART
				                            )			T1,
				                            ITEM_MST	T2,
				                            (
				                            SELECT	CODE		ITEM_CATG,
				                                    CODE_NAME4	SIGN1
				                            FROM	SDSTT500
				                            WHERE	CODE_GUBN	= 'OR103'
				                            AND		CODE_NAME2	= 'Y'
				                            AND		CODE_NAME3	= '01'
				                            AND		CODE NOT IN ('YSSE') --일반회송 0으로 취급 2014-11-10 이승용 요청
				                            )			T3,
				                            SDSTT500	T4,
				                            (
				                            SELECT	YYYYMMDD	CNFM_DATE
				                            FROM	CAL_MST
				                            WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
				                            					AND 	REPLACE('$!{end_date}','-','')
				                            )			T5,
				                            SDSTT101	T6
				                    WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
				                    AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
				                    AND		T1.PROD_CODE	= T2.ITEM_ID
				                    AND		T4.CODE_GUBN	= 'ST310'
				                    AND		T4.CODE			= T2.SALES_CAT03
				                    AND		T1.CUST_CODE	= T6.CUST_CODE
				                    AND		T6.GRUP_CODE	= '$!{grup_code1}'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE	                
				                    )
				        GROUP
				        BY		   	CNFM_DATE,
				                    PROD_CODE,
				                    GRUP_CODE,
				                    CUST_CODE                             	
						)	K1,
				        (
				        SELECT	'01'	GUBN,
				        		1		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'02'	GUBN,
				        		2		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'03'	GUBN,
				        		3		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'04'	GUBN,
				        		4		ORD
				        FROM	DUAL  
				        )	K2,
				        ITEM_MST	K3,
				        SDSTT101	K4
				WHERE	K1.PROD_CODE	= K3.ITEM_ID
				AND		K1.CUST_CODE	= K4.CUST_CODE  
				AND		K4.GRUP_CODE	= '$!{grup_code1}' 
			#if("$!{item_type}" == "FERT")
				-- 제품
				AND		K3.ITYPE = 'FERT'
			#elseif("$!{item_type}" == "HAWA")
				-- 상품
				AND		K3.ITYPE = 'HAWA'
			#end		                                
			#if( "$!{search_type}" == "1020" )
		     	AND		K3.DIVISION        IN ('10','20')
		    #elseif ( "$!{search_type}" == "P40" )
		    	AND		K3.CAT03 = 'P40'
		    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
		     	AND		K3.DIVISION        = '$!{search_type}'
		    #end 
			#if( "$!{search_item}" != "" )
		    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
							OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		    #end 
				GROUP
				BY		ROLLUP(K1.PROD_CODE),
				        K3.ITEM_NAME,
				        K2.GUBN
				)
		GROUP
		BY		PROD_CODE,
				ITEM_NAME,
				GUBN,        
		        GUBN_NAME               
		ORDER
		BY		1,GUBN

	#else

		SELECT	PROD_CODE,
				ITEM_NAME,
		        GUBN_NAME,
		        SUM(D00)	D00,
		        SUM(D01)	D01,
		        SUM(D02)	D02,
		        SUM(D03)	D03,
		        SUM(D04)	D04,
		        SUM(D05)	D05,
		        SUM(D06)	D06,
		        SUM(D07)	D07,
		        SUM(D08)	D08,
		        SUM(D09)	D09,
		        SUM(D10)	D10,
		        SUM(D11)	D11,
		        SUM(D12)	D12,
		        SUM(D13)	D13,
		        SUM(D14)	D14,
		        SUM(D15)	D15,
		        SUM(D16)	D16,
		        SUM(D17)	D17,
		        SUM(D18)	D18,
		        SUM(D19)	D19,
		        SUM(D20)	D20,
		        SUM(D21)	D21,
		        SUM(D22)	D22,
		        SUM(D23)	D23,
		        SUM(D24)	D24,
		        SUM(D25)	D25,
		        SUM(D26)	D26,
		        SUM(D27)	D27,
		        SUM(D28)	D28,
		        SUM(D29)	D29,
		        SUM(D30)	D30,
		        SUM(TOT)	TOT        
		FROM	(				
		        SELECT	DECODE(GROUPING(K1.PROD_CODE),0,K1.PROD_CODE,'')					PROD_CODE,
				        DECODE(GROUPING(K1.PROD_CODE),0,K3.ITEM_NAME,'합 계')			  	ITEM_NAME,
		                K2.GUBN,
				      	DECODE(K2.GUBN,'01','발주량','02','주문량','03','납품량','04','농심사유','05','이마트사유','06','켈로그사유','미납량')		GUBN_NAME,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D00,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D01,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D02,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D03,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D04,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D05,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D06,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D07,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D08,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D09,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D10,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D11,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D12,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D13,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D14,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D15,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D16,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D17,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D18,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D19,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D20,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D21,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D22,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D23,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D24,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D25,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D26,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D27,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D28,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D29,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP))),0)		D30,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_BOX,'02',K1.REQT_BOX,'03',K1.SELL_BOX,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP)),0)	TOT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 0 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D00_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 1 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D01_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 2 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D02_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 3 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D03_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 4 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D04_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 5 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D05_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 6 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D06_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 7 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D07_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 8 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D08_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 9 ,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D09_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 10,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D10_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 11,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D11_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 12,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D12_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 13,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D13_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 14,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D14_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 15,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D15_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 16,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D16_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 17,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D17_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 18,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D18_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 19,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D19_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 20,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D20_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 21,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D21_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 22,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D22_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 23,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D23_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 24,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D24_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 25,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D25_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 26,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D26_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 27,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D27_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 28,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D28_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 29,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D29_AMT,
				        NVL(SUM(DECODE(K1.CNFM_DATE,TO_CHAR(TO_DATE(REPLACE('$!{start_date}','-',''),'YYYY-MM-DD') + 30,'YYYYMMDD'),DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT))),0)	D30_AMT,
				        NVL(SUM(DECODE(K2.GUBN,'01',K1.ODER_AMT,'02',K1.REQT_AMT,'03',K1.SELL_AMT,'04',K1.REASON_NS,'05',K1.REASON_EM,'06',K1.REASON_KL,K1.GAP_AMT)),0)	TOT_AMT	
				FROM	(
				        SELECT	CNFM_DATE,
				                PROD_CODE,
				                GRUP_CODE,
				                CUST_CODE,
				                SUM(ODER_BOX)	ODER_BOX,
		                        SUM(REQT_BOX)	REQT_BOX,
				                SUM(SELL_BOX)	SELL_BOX,
                                SUM(REASON_NS)	REASON_NS,
                                SUM(REASON_EM)	REASON_EM,
                                SUM(REASON_KL)	REASON_KL,
                                SUM(ODER_AMT)	ODER_AMT,
                                SUM(REQT_AMT)	REQT_AMT,
                                SUM(SELL_AMT)	SELL_AMT,
				                DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)-SUM(REASON_EM)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)-SUM(REASON_EM)) GAP,
				                DECODE(SIGN(SUM(ODER_AMT)-SUM(SELL_AMT)-SUM(REASON_EM)),-1,0,SUM(ODER_AMT)-SUM(SELL_AMT)-SUM(REASON_EM)) GAP_AMT
				        FROM	(
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE,
				                            SUM(T1.ODER_BOX)	ODER_BOX,
		                                    0					REQT_BOX,
				                            0					SELL_BOX,
                                            0					REASON_NS,
                                            0					REASON_EM,
                                            0					REASON_KL,
                                            SUM(T1.ODER_AMT)	ODER_AMT,
                                            0					REQT_AMT,
                                            0					SELL_AMT
				                    FROM	SDORT120	T1
				                    WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            				AND 	REPLACE('$!{end_date}','-','')	
				                    AND		T1.GRUP_CODE	= '$!{grup_code1}'
				                    AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정
				                    -- 18시 기준
				                    AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T1.GRUP_CODE,
				                            T1.CUST_CODE                
				                    UNION	ALL                
				                    SELECT	T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE,
				                            0			ODER_BOX,
		                                    SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_BOX * T3.SIGN1
				                                END
				                            )	REQT_BOX,
				                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_BOX * T3.SIGN1
				                                END
				                            )	SELL_BOX,
                                            0	REASON_NS,
                                            0	REASON_EM,
                                            0	REASON_KL,
                                            0	ODER_AMT,                                            
                                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.REQT_AMT * T3.SIGN1
				                                END
				                            )	REQT_AMT, 
                                            SUM(
				                                CASE
				                                    WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
				                                        CASE
				                                        WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
				                                            0
				                                        ELSE
				                                            0
				                                        END
				                                    ELSE
				                                       T1.SELL_AMT * T3.SIGN1
				                                END
				                            )	SELL_AMT                                           
				                    FROM	(
				                            SELECT	T1.CNFM_DATE,
				                                    T2.PROD_CODE,
				                                    T2.ITEM_CATG,
				                                    T1.SOLD_PART	CUST_CODE,                                         -- 수량
				                                    SUM(T2.REQT_BOX)	REQT_BOX,
				                                    SUM(T2.SELL_BOX)	SELL_BOX,
				                                    SUM(T2.REQT_BOX*SELL_PRIC) REQT_AMT,		--SDORT120 에서 ODER 수량 및 금액을, SDORT102에서 REQT, SELL 수량 및 금액을 가져온다
                                                    SUM(T2.SELL_BOX*SELL_PRIC) SELL_AMT
				                                    -- SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
				                            FROM	SDORT101	T1,
				                                    SDORT102	T2
				                            WHERE	T1.SLIP_NO		= T2.SLIP_NO
				                            AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
				                            						AND 	REPLACE('$!{end_date}','-','')	
				                            AND		T1.UPDT_GUBN	!= '00'
				                            AND		T2.UPDT_GUBN	!= '00'	
				                            --AND		SUBSTR(T2.ITEM_CATG,1,2) NOT LIKE 'YR' -- 반품만 제외
				                            AND		(SUBSTR(T2.ITEM_CATG,1,2) = 'YO' OR
				                            			( SUBSTR(T2.ITEM_CATG,1,2) = 'YS' AND  T1.REFR_DOC IS NOT NULL)
				                            		)
				                            GROUP
				                            BY		T1.CNFM_DATE,
				                                    T2.ITEM_CATG,
				                                    T2.PROD_CODE,
				                                    T1.SOLD_PART
				                            )			T1,
				                            ITEM_MST	T2,
				                            (
				                            SELECT	CODE		ITEM_CATG,
				                                    CODE_NAME4	SIGN1
				                            FROM	SDSTT500
				                            WHERE	CODE_GUBN	= 'OR103'
				                            AND		CODE_NAME2	= 'Y'
				                            AND		CODE_NAME3	= '01'
				                            AND		CODE NOT IN ('YSSE') --일반회송 0으로 취급 2014-11-10 이승용 요청
				                            )			T3,
				                            SDSTT500	T4,
				                            (
				                            SELECT	YYYYMMDD	CNFM_DATE
				                            FROM	CAL_MST
				                            WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
				                            					AND 	REPLACE('$!{end_date}','-','')
				                            )			T5,
				                            SDSTT101	T6
				                    WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
				                    AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
				                    AND		T1.PROD_CODE	= T2.ITEM_ID
				                    AND		T4.CODE_GUBN	= 'ST310'
				                    AND		T4.CODE			= T2.SALES_CAT03
				                    AND		T1.CUST_CODE	= T6.CUST_CODE
				                    AND		T6.GRUP_CODE	= '$!{grup_code1}'
				                    GROUP
				                    BY		T1.CNFM_DATE,
				                            T1.PROD_CODE,
				                            T6.GRUP_CODE,
				                            T1.CUST_CODE
				                    UNION	ALL
                                    SELECT	CNFM_DATE,
                                            PROD_CODE,
                                            '32'		GRUP_CODE,
                                            CUST_CODE,
                                            0					ODER_BOX,
		                                    0					REQT_BOX,
				                            0					SELL_BOX,
				                            0					ODER_AMT,
                                            0					REQT_AMT,
                                            0					SELL_AMT,
                                            TO_NUMBER(ALLOT_LACK)+TO_NUMBER(STOCK_LACK)+TO_NUMBER(SEND_NOT)+TO_NUMBER(ODER_CONV_NOT)+TO_NUMBER(NS_ETC)							REASON_NS,
                                            TO_NUMBER(NOMAL_CLOSE)+TO_NUMBER(EMER_ODER)+TO_NUMBER(ODER_ERR)+TO_NUMBER(COST_ERR)+TO_NUMBER(BEFORE_STOCK)+TO_NUMBER(REFUS_STOCK)+TO_NUMBER(E_MART_ETC)	REASON_EM,
                                            TO_NUMBER(KELOG)																		REASON_KL
                                    FROM	SDORT127
                                    WHERE	CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            					AND 	REPLACE('$!{end_date}','-','')	
		                            AND		'$!{grup_code1}' = '32'	                
				                    )
				        GROUP
				        BY		   	CNFM_DATE,
				                    PROD_CODE,
				                    GRUP_CODE,
				                    CUST_CODE                             	
						)	K1,
				        (
				        SELECT	'01'	GUBN,
				        		1		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'02'	GUBN,
				        		2		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'03'	GUBN,
				        		3		ORD
				        FROM	DUAL
				        UNION	ALL                    
				        SELECT	'04'	GUBN,
				        		4		ORD
				        FROM	DUAL  
				        UNION	ALL                    
				        SELECT	'05'	GUBN,
				        		5		ORD
				        FROM	DUAL  
				        UNION	ALL                    
				        SELECT	'06'	GUBN,
				        		6		ORD
				        FROM	DUAL  
				        UNION	ALL                    
				        SELECT	'07'	GUBN,
				        		7		ORD
				        FROM	DUAL  
				        )	K2,
				        ITEM_MST	K3,
				        SDSTT101	K4
				WHERE	K1.PROD_CODE	= K3.ITEM_ID
				AND		K1.CUST_CODE	= K4.CUST_CODE  
				AND		K4.GRUP_CODE	= '$!{grup_code1}' 
			#if("$!{item_type}" == "FERT")
				-- 제품
				AND		K3.ITYPE = 'FERT'
			#elseif("$!{item_type}" == "HAWA")
				-- 상품
				AND		K3.ITYPE = 'HAWA'
			#end		                                
			#if( "$!{search_type}" == "1020" )
		     	AND		K3.DIVISION        IN ('10','20')
		    #elseif ( "$!{search_type}" == "P40" )
		    	AND		K3.CAT03 = 'P40'
		    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
		     	AND		K3.DIVISION        = '$!{search_type}'
		    #end 
			#if( "$!{search_item}" != "" )
		    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
							OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		    #end 
				GROUP
				BY		ROLLUP(K1.PROD_CODE),
				        K3.ITEM_NAME,
				        K2.GUBN
				)
		GROUP
		BY		PROD_CODE,
				ITEM_NAME,
				GUBN,        
		        GUBN_NAME               
		ORDER
		BY		1,GUBN
	
	#end

	</query> 

	<!--EDI발주전환분석조회 DW2--> 
	<query id="ip_07080_EDI_Order_Analysis_Detail_list" paging="false"> 
		/*2014-11-03 이강욱  배송지점, 담당자 추가 SCM 이승용 요청 */
		/* Detail Query 날짜|점포명|제품코드|제품명|발주량|주문량|미납량 */
		#if("$!{in_qty_gubn}" == "QTY")
		SELECT	K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
		        K1.PROD_CODE,
		        K1.CNFM_DATE,
				SUM(ODER_BOX)	ODER_BOX,
				SUM(REQT_BOX)	REQT_BOX,
		        SUM(SELL_BOX)	SELL_BOX,
		        F_getDCName(K4.DC_ID) DC_NAME,
		        DECODE(K4.SALES_NAME,NULL,K1.HAN_NAME,K4.SALES_NAME) SALES_NAME,
		        DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) GAP
		#else
		SELECT	K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
		        K1.PROD_CODE,
		        K1.CNFM_DATE,
				SUM(ODER_AMT)	ODER_AMT,
				SUM(REQT_AMT)	REQT_AMT,
		        SUM(SELL_AMT)	SELL_AMT,
		        F_getDCName(K4.DC_ID) DC_NAME,
		        DECODE(K4.SALES_NAME,NULL,K1.HAN_NAME,K4.SALES_NAME) SALES_NAME,
		        DECODE(SIGN(SUM(ODER_AMT)-SUM(SELL_AMT)),-1,0,SUM(ODER_AMT)-SUM(SELL_AMT)) GAP
		#end
		FROM	(
		        SELECT	T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
		                SUM(T1.ODER_BOX)	ODER_BOX,
		                SUM(T1.ODER_AMT)	ODER_AMT,
		                0					REQT_BOX,
		                0					REQT_AMT,
		                0					SELL_BOX,
		                0					SELL_AMT,
		                T3.HAN_NAME			HAN_NAME
		        FROM	SDORT120	T1,
		        		SDSTT105 	T2,
                        NCOMT005	T3,
                        NCOMT001	T4
		        WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            	AND 	REPLACE('$!{end_date}','-','')	
		        AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정   
		        AND 	T2.PRTN_ROLE	= 'VE'
              	AND 	T1.CUST_CODE = T2.CUST_CODE              	
				AND		T2.PRTN_CUST_CODE	= T3.EMP_NO
				AND		T4.APPL_END_DATE	= '99991231'
				AND		T3.DEPT_CODE		= T4.DEPT_CODE				                	
		        AND		T1.GRUP_CODE	IN (
		                                SELECT	CD
		                                FROM	CODE_MST
		                                WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
                                        AND		CD = '$!{grup_code1}'
	#end		                                            
		                                )
		        -- 18시 기준
		        AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
		        GROUP
		        BY		T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
		                T3.HAN_NAME               
		        UNION	ALL                
		        SELECT	T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T6.GRUP_CODE,
		                T1.CUST_CODE,
		                0			ODER_BOX,
		                0			ODER_AMT,
		                SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.REQT_BOX * T3.SIGN1
                            END
                        )	REQT_BOX,
                        SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.REQT_AMT * T3.SIGN1
                            END
                        )	REQT_AMT,
                        SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.SELL_BOX * T3.SIGN1
                            END
                        	)	SELL_BOX,
                        
                           SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.SELL_AMT * T3.SIGN1
                            END
                        )	SELL_AMT,
                        T8.HAN_NAME HAN_NAME
		        FROM	(
		                SELECT	T1.CNFM_DATE,
		                        T2.PROD_CODE,
		                        T2.ITEM_CATG,
		                        T1.SOLD_PART	CUST_CODE,                         
		                        SUM(T2.REQT_BOX)	REQT_BOX,
                                SUM(T2.SELL_BOX)	SELL_BOX,
                                SUM(T2.REQT_BOX*T2.SELL_PRIC)	REQT_AMT,
                                SUM(T2.SELL_BOX*T2.SELL_PRIC)	SELL_AMT
                                -- SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
		                FROM	SDORT101	T1,
		                        SDORT102	T2
		                WHERE	T1.SLIP_NO		= T2.SLIP_NO
		                AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            			AND 	REPLACE('$!{end_date}','-','')	
		                AND		T1.UPDT_GUBN	!= '00'
		                AND		T2.UPDT_GUBN	!= '00'	
		                AND		T2.ITEM_CATG NOT LIKE 'YR%'  -- 반품만 제외
		                GROUP
		                BY		T1.CNFM_DATE,
		                        T2.ITEM_CATG,
		                        T2.PROD_CODE,
		                        T1.SOLD_PART
		                )			T1,
		                ITEM_MST	T2,
		                (
		                SELECT	CODE		ITEM_CATG,
		                        CODE_NAME4	SIGN1
		                FROM	SDSTT500
		                WHERE	CODE_GUBN	= 'OR103'
		                AND		CODE_NAME2	= 'Y'
		                AND		CODE_NAME3	= '01'
		                AND		CODE NOT IN ('YSSE') --일반회송 0으로 취급 2014-11-10 이승용 요청
		                )			T3,
		                SDSTT500	T4,
		                (
		                SELECT	YYYYMMDD	CNFM_DATE
		                FROM	CAL_MST
		                WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
		                            		AND 	REPLACE('$!{end_date}','-','')	
		                )			T5,
		                SDSTT101	T6,
                        SDSTT105 	T7,
                        NCOMT005	T8,
                        NCOMT001	T9
		        WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
		        AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
		        AND		T1.PROD_CODE	= T2.ITEM_ID
		        AND		T4.CODE_GUBN	= 'ST310'
		        AND		T4.CODE			= T2.SALES_CAT03
		        AND		T1.CUST_CODE	= T6.CUST_CODE
		        AND		T1.CUST_CODE	= T7.CUST_CODE                
                AND 	T7.PRTN_ROLE	= 'VE'              
				AND		T7.PRTN_CUST_CODE	= T8.EMP_NO
				AND		T9.APPL_END_DATE	= '99991231'
				AND		T8.DEPT_CODE		= T9.DEPT_CODE
		        AND		T6.GRUP_CODE	IN (
		                                        SELECT	CD
		                                        FROM	CODE_MST
		                                        WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
		                                        AND		CD = '$!{grup_code1}'
	#end		                                            
		                                        )
		        GROUP
		        BY		T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T6.GRUP_CODE,
		                T1.CUST_CODE,
		                T8.HAN_NAME	                
		        )	K1,
		        SDSTT101	K2,
		        ITEM_MST	K3,				
		        (
		         SELECT	DISTINCT T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
                        T1.DC_ID,
                        T1.SALESMAN_NM SALES_NAME
                 FROM	(
                 		SELECT A.CNFM_DATE, A.PROD_CODE, A.GRUP_CODE, A.CUST_CODE, SUBSTR(B.CENTER_CD,5,4) DC_ID, B.SALESMAN_NM, B.ORDER_DATE
						FROM SDORT120 A, LO010NM B, LO010ND C
						WHERE A.CNFM_DATE BETWEEN REPLACE('$!{start_date}','-','') AND REPLACE('$!{end_date}','-','')
						AND A.PROD_CODE=C.ITEM_CD
						AND A.CUST_CODE = B.DELIVERY_CD
						AND B.ORDER_DATE=C.ORDER_DATE
						AND B.CENTER_CD = C.CENTER_CD
						AND B.BRAND_CD = C.BRAND_CD
						AND B.ORDER_NO=C.ORDER_NO
						UNION ALL
						SELECT A.CNFM_DATE, A.PROD_CODE, A.GRUP_CODE,A.CUST_CODE, SUBSTR(B.CENTER_CD,5,4) DC_ID,B.SALESMAN_NM, B.ORDER_DATE 
						FROM SDORT120 A, LO010NM_G B, LO010ND_G C
						WHERE A.CNFM_DATE BETWEEN REPLACE('$!{start_date}','-','') AND REPLACE('$!{end_date}','-','')
						AND A.PROD_CODE=C.ITEM_CD
						AND A.CUST_CODE = B.DELIVERY_CD
						AND B.ORDER_DATE=C.ORDER_DATE
						AND B.CENTER_CD = C.CENTER_CD
						AND B.BRAND_CD = C.BRAND_CD
						AND B.ORDER_NO=C.ORDER_NO
						UNION ALL
						SELECT A.CNFM_DATE, A.PROD_CODE,A.GRUP_CODE, A.CUST_CODE,SUBSTR(B.CENTER_CD,5,4)DC_ID, B.SALESMAN_NM, B.ORDER_DATE
						FROM SDORT120 A, LO010NM_P B, LO010ND_P C
						WHERE A.CNFM_DATE BETWEEN REPLACE('$!{start_date}','-','') AND REPLACE('$!{end_date}','-','')
						AND A.PROD_CODE=C.ITEM_CD
						AND A.CUST_CODE = B.DELIVERY_CD
						AND B.ORDER_DATE=C.ORDER_DATE
						AND B.CENTER_CD = C.CENTER_CD
						AND B.BRAND_CD = C.BRAND_CD
						AND B.ORDER_NO=C.ORDER_NO
                 		)T1
                 WHERE  T1.ORDER_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				 AND	T1.PROD_CODE	='$!{search_item}'
		        )K4
		WHERE	K1.CUST_CODE	= K2.CUST_CODE
		AND		K1.PROD_CODE	= K3.ITEM_ID  
		AND		K1.CNFM_dATE	= K4.CNFM_DATE(+)
        AND		K1.PROD_CODE	= K4.PROD_CODE(+)
        AND		K1.CUST_CODE	= K4.CUST_CODE(+)
        AND		K1.GRUP_CODE	= K4.GRUP_CODE(+)      
	#if("$!{item_type}" == "FERT")
		-- 제품
		AND		K3.ITYPE = 'FERT'
	#elseif("$!{item_type}" == "HAWA")
		-- 상품
		AND		K3.ITYPE = 'HAWA'
	#end		                                
	#if( "$!{search_type}" == "1020" )
     	AND		K3.DIVISION        IN ('10','20')
    #elseif ( "$!{search_type}" == "P40" )
    	AND		K3.CAT03 = 'P40'
    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
     	AND		K3.DIVISION        = '$!{search_type}'
    #end 
	#if( "$!{search_item}" != "" )
    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
					OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
    #end 
    	
		HAVING		DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) &gt; 0 
		
		
		          
		GROUP
		BY		K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
				K1.PROD_CODE,
				K1.CNFM_DATE,
				K4.DC_ID,
				K4.SALES_NAME,
				K1.HAN_NAME
		ORDER
		BY		1,4,5		
		
	</query> 	
	
	
	<query id="ip_07080_EDI_Order_Analysis_Detail_list_new" paging="false"> 
		/*2014-11-03 이강욱  배송지점, 담당자 추가 SCM 이승용 요청 */
		/* Detail Query 날짜|점포명|제품코드|제품명|발주량|주문량|미납량 */
		
		SELECT	K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
		        K1.PROD_CODE,
		        K1.CNFM_DATE,
				SUM(ODER_BOX)	ODER_BOX,
				SUM(REQT_BOX)	REQT_BOX,
		        SUM(SELL_BOX)	SELL_BOX,
		        F_getDCName(K4.DC_ID) DC_NAME,
		        DECODE(K4.SALES_NAME,NULL,K1.HAN_NAME,K4.SALES_NAME) SALES_NAME,
		        DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) GAP,		
				SUM(ODER_AMT)	ODER_AMT,
				SUM(REQT_AMT)	REQT_AMT,
		        SUM(SELL_AMT)	SELL_AMT,		       
		        DECODE(SIGN(SUM(ODER_AMT)-SUM(SELL_AMT)),-1,0,SUM(ODER_AMT)-SUM(SELL_AMT)) GAP_AMT
		FROM	(
		        SELECT	T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
		                SUM(T1.ODER_BOX)	ODER_BOX,
		                SUM(T1.ODER_AMT)	ODER_AMT,
		                0					REQT_BOX,
		                0					REQT_AMT,
		                0					SELL_BOX,
		                0					SELL_AMT,
		                T3.HAN_NAME			HAN_NAME
		        FROM	SDORT120	T1,
		        		SDSTT105 	T2,
                        NCOMT005	T3,
                        NCOMT001	T4
		        WHERE	T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            	AND 	REPLACE('$!{end_date}','-','')	
		        AND		T1.ERR_GUBN		!= '16'  --2014-10-31 NFOS 삭제표시 데이터 안 보이게 수정   
		        AND 	T2.PRTN_ROLE	= 'VE'
              	AND 	T1.CUST_CODE = T2.CUST_CODE              	
				AND		T2.PRTN_CUST_CODE	= T3.EMP_NO
				AND		T4.APPL_END_DATE	= '99991231'
				AND		T3.DEPT_CODE		= T4.DEPT_CODE				                	
		        AND		T1.GRUP_CODE	IN (
		                                SELECT	CD
		                                FROM	CODE_MST
		                                WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
                                        AND		CD = '$!{grup_code1}'
	#end		                                            
		                                )
		        -- 18시 기준
		        AND		T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
		        GROUP
		        BY		T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
		                T3.HAN_NAME               
		        UNION	ALL                
		        SELECT	T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T6.GRUP_CODE,
		                T1.CUST_CODE,
		                0			ODER_BOX,
		                0			ODER_AMT,
		                SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.REQT_BOX * T3.SIGN1
                            END
                        )	REQT_BOX,
                        SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.REQT_AMT * T3.SIGN1
                            END
                        )	REQT_AMT,
                        SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.SELL_BOX * T3.SIGN1
                            END
                        	)	SELL_BOX,
                        
                           SUM(
                            CASE
                                WHEN T3.ITEM_CATG IS NULL THEN /* 타계정 실적이다 */
                                    CASE
                                    WHEN SUBSTR(T1.ITEM_CATG,1,2) = 'YO' THEN
                                        0
                                    ELSE
                                        0
                                    END
                                ELSE
                                   T1.SELL_AMT * T3.SIGN1
                            END
                        )	SELL_AMT,
                        T8.HAN_NAME HAN_NAME
		        FROM	(
		                SELECT	T1.CNFM_DATE,
		                        T2.PROD_CODE,
		                        T2.ITEM_CATG,
		                        T1.SOLD_PART	CUST_CODE,                         
		                        SUM(T2.REQT_BOX)	REQT_BOX,
                                SUM(T2.SELL_BOX)	SELL_BOX,
                                SUM(T2.REQT_BOX*T2.SELL_PRIC)	REQT_AMT,
                                SUM(T2.SELL_BOX*T2.SELL_PRIC)	SELL_AMT
                                -- SUM(DECODE(T2.UPDT_GUBN,'10',T2.SELL_BOX,T2.REQT_BOX))	SELL_BOX
		                FROM	SDORT101	T1,
		                        SDORT102	T2
		                WHERE	T1.SLIP_NO		= T2.SLIP_NO
		                AND		T1.CNFM_DATE	BETWEEN REPLACE('$!{start_date}','-','') 
		                            			AND 	REPLACE('$!{end_date}','-','')	
		                AND		T1.UPDT_GUBN	!= '00'
		                AND		T2.UPDT_GUBN	!= '00'	
		                AND		T2.ITEM_CATG NOT LIKE 'YR%'  -- 반품만 제외
		                GROUP
		                BY		T1.CNFM_DATE,
		                        T2.ITEM_CATG,
		                        T2.PROD_CODE,
		                        T1.SOLD_PART
		                )			T1,
		                ITEM_MST	T2,
		                (
		                SELECT	CODE		ITEM_CATG,
		                        CODE_NAME4	SIGN1
		                FROM	SDSTT500
		                WHERE	CODE_GUBN	= 'OR103'
		                AND		CODE_NAME2	= 'Y'
		                AND		CODE_NAME3	= '01'
		                AND		CODE NOT IN ('YSSE') --일반회송 0으로 취급 2014-11-10 이승용 요청
		                )			T3,
		                SDSTT500	T4,
		                (
		                SELECT	YYYYMMDD	CNFM_DATE
		                FROM	CAL_MST
		                WHERE	YYYYMMDD	BETWEEN REPLACE('$!{start_date}','-','') 
		                            		AND 	REPLACE('$!{end_date}','-','')	
		                )			T5,
		                SDSTT101	T6,
                        SDSTT105 	T7,
                        NCOMT005	T8,
                        NCOMT001	T9
		        WHERE	T1.CNFM_DATE	= T5.CNFM_DATE
		        AND		T1.ITEM_CATG 	= T3.ITEM_CATG(+)
		        AND		T1.PROD_CODE	= T2.ITEM_ID
		        AND		T4.CODE_GUBN	= 'ST310'
		        AND		T4.CODE			= T2.SALES_CAT03
		        AND		T1.CUST_CODE	= T6.CUST_CODE
		        AND		T1.CUST_CODE	= T7.CUST_CODE                
                AND 	T7.PRTN_ROLE	= 'VE'              
				AND		T7.PRTN_CUST_CODE	= T8.EMP_NO
				AND		T9.APPL_END_DATE	= '99991231'
				AND		T8.DEPT_CODE		= T9.DEPT_CODE
		        AND		T6.GRUP_CODE	IN (
		                                        SELECT	CD
		                                        FROM	CODE_MST
		                                        WHERE	CD_GRP	= 'GRUP_CODE1'
	#if( "$!{grup_code1}" != "" &amp;&amp; "$!{grup_code1}" != "null" )
		                                        AND		CD = '$!{grup_code1}'
	#end		                                            
		                                        )
		        GROUP
		        BY		T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T6.GRUP_CODE,
		                T1.CUST_CODE,
		                T8.HAN_NAME	                
		        )	K1,
		        SDSTT101	K2,
		        ITEM_MST	K3,				
		        (
		         SELECT	DISTINCT T1.CNFM_DATE,
		        		T1.PROD_CODE,
		                T1.GRUP_CODE,
		                T1.CUST_CODE,
                        T1.DC_ID,
                        T1.SALESMAN_NM SALES_NAME
                 FROM	(
                 		SELECT A.CNFM_DATE, A.PROD_CODE, A.GRUP_CODE, A.CUST_CODE, SUBSTR(B.CENTER_CD,5,4) DC_ID, B.SALESMAN_NM, B.ORDER_DATE
						FROM SDORT120 A, LO010NM B, LO010ND C
						WHERE A.CNFM_DATE BETWEEN REPLACE('$!{start_date}','-','') AND REPLACE('$!{end_date}','-','')
						AND A.PROD_CODE=C.ITEM_CD
						AND A.CUST_CODE = B.DELIVERY_CD
						AND B.ORDER_DATE=C.ORDER_DATE
						AND B.CENTER_CD = C.CENTER_CD
						AND B.BRAND_CD = C.BRAND_CD
						AND B.ORDER_NO=C.ORDER_NO
						UNION ALL
						SELECT A.CNFM_DATE, A.PROD_CODE, A.GRUP_CODE,A.CUST_CODE, SUBSTR(B.CENTER_CD,5,4) DC_ID,B.SALESMAN_NM, B.ORDER_DATE 
						FROM SDORT120 A, LO010NM_G B, LO010ND_G C
						WHERE A.CNFM_DATE BETWEEN REPLACE('$!{start_date}','-','') AND REPLACE('$!{end_date}','-','')
						AND A.PROD_CODE=C.ITEM_CD
						AND A.CUST_CODE = B.DELIVERY_CD
						AND B.ORDER_DATE=C.ORDER_DATE
						AND B.CENTER_CD = C.CENTER_CD
						AND B.BRAND_CD = C.BRAND_CD
						AND B.ORDER_NO=C.ORDER_NO
						UNION ALL
						SELECT A.CNFM_DATE, A.PROD_CODE,A.GRUP_CODE, A.CUST_CODE,SUBSTR(B.CENTER_CD,5,4)DC_ID, B.SALESMAN_NM, B.ORDER_DATE
						FROM SDORT120 A, LO010NM_P B, LO010ND_P C
						WHERE A.CNFM_DATE BETWEEN REPLACE('$!{start_date}','-','') AND REPLACE('$!{end_date}','-','')
						AND A.PROD_CODE=C.ITEM_CD
						AND A.CUST_CODE = B.DELIVERY_CD
						AND B.ORDER_DATE=C.ORDER_DATE
						AND B.CENTER_CD = C.CENTER_CD
						AND B.BRAND_CD = C.BRAND_CD
						AND B.ORDER_NO=C.ORDER_NO
                 		)T1
                 WHERE  T1.ORDER_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
				 AND	T1.PROD_CODE	='$!{search_item}'
		        )K4
		WHERE	K1.CUST_CODE	= K2.CUST_CODE
		AND		K1.PROD_CODE	= K3.ITEM_ID  
		AND		K1.CNFM_dATE	= K4.CNFM_DATE(+)
        AND		K1.PROD_CODE	= K4.PROD_CODE(+)
        AND		K1.CUST_CODE	= K4.CUST_CODE(+)
        AND		K1.GRUP_CODE	= K4.GRUP_CODE(+)      
	#if("$!{item_type}" == "FERT")
		-- 제품
		AND		K3.ITYPE = 'FERT'
	#elseif("$!{item_type}" == "HAWA")
		-- 상품
		AND		K3.ITYPE = 'HAWA'
	#end		                                
	#if( "$!{search_type}" == "1020" )
     	AND		K3.DIVISION        IN ('10','20')
    #elseif ( "$!{search_type}" == "P40" )
    	AND		K3.CAT03 = 'P40'
    #elseif ("$!{search_type}" != "" &amp;&amp; "$!{search_type}" != "null")
     	AND		K3.DIVISION        = '$!{search_type}'
    #end 
	#if( "$!{search_item}" != "" )
    	[AND    (K3.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
					OR   K3.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
    #end 
    	
		HAVING		DECODE(SIGN(SUM(ODER_BOX)-SUM(SELL_BOX)),-1,0,SUM(ODER_BOX)-SUM(SELL_BOX)) &gt; 0 
		
		
		          
		GROUP
		BY		K2.CUST_NAME,
				K1.CUST_CODE,
				K3.ITEM_NAME,
				K1.PROD_CODE,
				K1.CNFM_DATE,
				K4.DC_ID,
				K4.SALES_NAME,
				K1.HAN_NAME
		ORDER
		BY		1,4,5		
		
	</query> 	
	
	<!-- 
	=======================
	  백산수 재고추적 조회
	=======================
	-->	
		
	<query id="ip_01110_Baeksansu_Stock_Trace_list" paging="false"> 
	SELECT   A.YYYYMMDD,
     		 DECODE(A.PROD_CODE,'108000006','903000729','108000008','903000702',A.PROD_CODE), 
     		 REPLACE(A.PROD_NAME,'(수출)',''),
             NVL(ROUND(SUM(A.STOCK_BOX),0),0)  			STOCK_BOX,
             NVL(ROUND(SUM(A.IPGO_BOX),0),0) 			IPGO_BOX,
             NVL(ROUND(SUM(A.CHGO_BOX),0),0)  			CHGO_BOX,
             NVL(ROUND(SUM(A.CHGO_BOX_2),0),0)  		CHGO_BOX_2,
             NVL(ROUND(SUM(B.STOCK_BOX),0),0)			STOCK_BOX_01,
             NVL(ROUND(SUM(B.IPGO_BOX),0),0)			IPGO_BOX_01,
             NVL(ROUND(SUM(B.CHGO_BOX),0),0)			CHGO_BOX_01, 
             NVL(ROUND(SUM(C.BASE_STOCK_8517),0),0)		STOCK_BOX_02,
             NVL(ROUND(SUM(C.RECEIPT_EXPT_8517),0),0)	IPGO_BOX_02,
             NVL(ROUND(SUM(C.TRANS_BOX_8517),0),0)		CHGO_BOX_02,
             NVL(ROUND(SUM(C.BASE_STOCK_8516),0),0)		STOCK_BOX_03,
             NVL(ROUND(SUM(C.RECEIPT_EXPT_8516),0),0)	IPGO_BOX_03,
             NVL(ROUND(SUM(C.TRANS_BOX_8516),0),0)		CHGO_BOX_03,  
             NVL(ROUND(SUM(C.BASE_STOCK_ELSE),0),0)		STOCK_BOX_04,
             NVL(ROUND(SUM(C.RECEIPT_EXPT_ELSE),0),0)	IPGO_BOX_04,
             NVL(ROUND(SUM(C.TRANS_BOX_ELSE),0),0)		CHGO_BOX_04          
             FROM
    (
	SELECT   YYYYMMDD,
     		 PROD_CODE, 
     		 PROD_NAME,
             ROUND(SUM(STOCK_BOX),0)   	STOCK_BOX,
             ROUND(SUM(IPGO_BOX),0) 		IPGO_BOX,
             ROUND(SUM(CHGO_BOX),0)  	CHGO_BOX,	--내수출고
             ROUND(SUM(CHGO_BOX_2),0)	CHGO_BOX_2	--대련출고                          
    FROM
		(
		 SELECT  A.YYYYMMDD,
                 A.PROD_CODE,
                 B.PROD_NAME,
                 0	STOCK_BOX,
                 0	CHGO_BOX,
                 0	CHGO_BOX_2,
                 SUM(A.PRO_BOX) IPGO_BOX                            
         FROM    dwglf400 A, dwgld310 B
         WHERE   A.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
         AND     A.SANGHO_GUBN = '2500'
         AND     A.PROD_CODE = B. PROD_CODE
         AND     B.BRND_CODE IN ('303011')	--백산수 브랜드코드
         GROUP BY A.YYYYMMDD, A.PROD_CODE, B.PROD_NAME
         UNION ALL	--내수판매(출고)
         SELECT	 A.YYYYMMDD,
         		 A.PROD_CODE,
                 B.PROD_NAME,
                 0	STOCK_BOX,                 
                 SUM(A.SELL_BOX)	CHGO_BOX,
                 0	CHGO_BOX,
                 0	IPGO_BOX
         FROM	 dwglf210 A, dwgld310 B
         WHERE   A.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
         AND     A.SANGHO_GUBN = '2500'
         AND     A.PROD_CODE = B. PROD_CODE
         AND     B.BRND_CODE IN ('303011')	--백산수 브랜드코드
         AND     B.PROD_NAME NOT LIKE '%수출%'
         GROUP BY A.YYYYMMDD, A.PROD_CODE, B.PROD_NAME
         UNION ALL   --수출출고
         SELECT	 A.ZGIBU YYYYMMDD,
         		 A.MATNR PROD_CODE,
         		 B.PROD_NAME,
         		 0	STOCK_BOX,
         		 0	CHGO_BOX,
         		 SUM(A.ZGIQTY)	CHGO_BOX_2,
         		 0	IPGO_BOX
         FROM	 SAPGCP.ZCMMT0032@GCPSEL A, dwgld310 B	
         WHERE	 A.ZGIMOV != '643' --641 운송중 재고 643 회사간 재고
         AND	 A.ZGIBU BETWEEN '$!{start_date}' AND '$!{end_date}'
         AND	 A.MATNR = B.PROD_CODE
         AND     B.BRND_CODE IN ('303011')	--백산수 브랜드코드
         GROUP BY A.ZGIBU, A.MATNR, B.PROD_NAME
         UNION ALL
         SELECT  A.YYYYMMDD,
                 A.PROD_CODE, 
                 B.PROD_NAME,
                 SUM(A.STOCK_BOX)	STOCK_BOX,
                 0	CHGO_BOX,
                 0	CHGO_BOX_2,
                 0  IPGO_BOX                           
         FROM    dwglf500t1 A, dwgld310 b
         WHERE   A.YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
         AND     A.SANGHO_GUBN = '2500'
         AND     A.PROD_CODE = b.PROD_CODE
         AND     B.BRND_CODE IN ('303011')	--백산수 브랜드코드
         GROUP BY  A.YYYYMMDD, A.PROD_CODE, B.PROD_NAME	
         )
         GROUP BY  YYYYMMDD, PROD_CODE, PROD_NAME	
         )A,
         (
         SELECT 	A.YYYYMMDD,
         			A.PROD_CODE,       
         			B.PROD_NAME,          
                    ROUND(SUM(A.STOCK_BOX),0)	 	STOCK_BOX,
                    ROUND(SUM(C.IPGO_bOX),0)	 	IPGO_BOX,
                    ROUND(SUM(D.CHGO_BOX),0)	 	CHGO_BOX 
         FROM    (
         		--대련 기초재고
                     SELECT  YYYYMMDD, 
                     		 PROD_CODE,                             
                             STOCK_BOX                             
                     FROM    dwglf500
                     WHERE   YYYYMMDD BETWEEN '$!{start_date}' AND '$!{end_date}'
                     AND     SANGHO_GUBN = '2500'                    
                  )A, dwgld310 B,
                 --대련 입고량
                 (
                  SELECT	A.ZGRBU YYYYMMDD,
                  			A.MATNR PROD_CODE,
                  			SUM(A.ZGIQTY) IPGO_BOX
        		  FROM	    SAPGCP.ZCMMT0032@GCPSEL A, dwgld310 B	
         		  WHERE	 A.ZGRST='3150'
        		  AND	 A.ZGRBU BETWEEN '$!{start_date}' AND '$!{end_date}'
        		  AND	 A.ZGIMOV != '643'
        		  AND	 A.MATNR = B.PROD_CODE
         		  AND	 B.BRND_CODE IN ('303011')
         		  GROUP BY A.ZGRBU,A.MATNR
                 )C,
                 (
                 --대련 출고량
        	         SELECT  H.ZFETD YYYYMMDD,
     						 decode(i.matnr,'903000701','108000009','903000702','108000008','903000729','108000006',i.matnr) prod_code,                            
                             SUM(i.blmenge) CHGO_BOX
                     FROM    sapncp.zimtbl@ncpsel h, sapncp.zimtblit@ncpsel i
                     WHERE   h.zfblno = i.zfblno
                     AND     h.zfetd BETWEEN '$!{start_date}' AND '$!{end_date}'     -- 선적일
                     --AND     h.zfreta = '00000000'
                     --AND     i.matnr IN ('903000701', '903000702','903000729','108000006','108000008','108000009') /*수출백산수*/  
                     GROUP BY H.ZFETD, decode(i.matnr,'903000701','108000009','903000702','108000008','903000729','108000006',i.matnr)                     
                )D
         WHERE   A.PROD_CODE 	= B.PROD_CODE      
         AND     B.BRND_CODE IN ('303011')
         AND	 A.YYYYMMDD  	= D.YYYYMMDD(+)
         AND	 A.YYYYMMDD	 	= C.YYYYMMDD(+)
         AND	 A.PROD_CODE	= D.PROD_CODE(+)
         AND	 A.PROD_CODE	= C.PROD_CODE(+)
         --AND     b.prod_name like '%수출%' /*수출백산수만*/  
         GROUP BY A.YYYYMMDD, A.PROD_CODE, B.PROD_NAME       
         )B,
         (   
    	 SELECT	A.CNFM_DATE	YYYYMMDD,    	 		
    	 		DECODE(NVL(A.ITEM_ID,NVL(B.ITEM_ID,C.ITEM_ID)),'903000701','108000009','903000702','108000008','903000729','108000006',NVL(A.ITEM_ID,NVL(B.ITEM_ID,C.ITEM_ID))) PROD_CODE,
                A.BASE_STOCK BASE_STOCK_8517,
                B.BASE_STOCK BASE_STOCK_8516,
                C.BASE_STOCK BASE_STOCK_ELSE,
                A.RECEIPT_EXPT RECEIPT_EXPT_8517,
                B.RECEIPT_EXPT RECEIPT_EXPT_8516,
                A.TRANS_BOX + B.TRANS_BOX RECEIPT_EXPT_ELSE,
                A.TRANS_BOX TRANS_BOX_8517,
                B.TRANS_BOX TRANS_BOX_8516,
                D.QTY 	TRANS_BOX_ELSE
    	 FROM	(
         		SELECT 	CNFM_DATE,
                		DECODE(ITEM_ID,'903000701','108000009','903000702','108000008','903000729','108000006',ITEM_ID) ITEM_ID,
                		SUM(BASE_STOCK) BASE_STOCK,
                        SUM(RECEIPT_EXPT) RECEIPT_EXPT,
                        SUM(TRANS_BOX) TRANS_BOX
                FROM	DC_DATAWAREHOUSE
                WHERE	CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
                AND		ITEM_ID IN ('903000702','903000729')
                AND		DC_ID='8517'
                GROUP BY	CNFM_DATE,DECODE(ITEM_ID,'903000701','108000009','903000702','108000008','903000729','108000006',ITEM_ID)
                )A,
                (
         		SELECT 	CNFM_DATE,
                		DECODE(ITEM_ID,'903000701','108000009','903000702','108000008','903000729','108000006',ITEM_ID) ITEM_ID,
                		SUM(BASE_STOCK) BASE_STOCK,
                        SUM(RECEIPT_EXPT) RECEIPT_EXPT,
                        SUM(TRANS_BOX) TRANS_BOX
                FROM	DC_DATAWAREHOUSE
                WHERE	CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
                AND		ITEM_ID IN ('903000702','903000729')
                AND		DC_ID='8516'
                 GROUP BY	CNFM_DATE,DECODE(ITEM_ID,'903000701','108000009','903000702','108000008','903000729','108000006',ITEM_ID) 
                )B,
                (
         		SELECT 	DC.CNFM_DATE,
                		DECODE(DC.ITEM_ID,'903000701','108000009','903000702','108000008','903000729','108000006',DC.ITEM_ID) ITEM_ID,
                		SUM(DC.BASE_STOCK) 	BASE_STOCK,
                        SUM(DC.RECEIPT)  	RECEIPT_EXPT,
                        SUM(DC.TRANS_BOX) 	TRANS_BOX
                FROM	DC_DATAWAREHOUSE DC  
                WHERE	DC.CNFM_DATE BETWEEN '$!{start_date}' AND '$!{end_date}'
                AND		DC.ITEM_ID IN ('903000702','903000729')
                AND		DC.DC_ID NOT IN ('8516','8517')
                GROUP BY	DC.CNFM_DATE,DECODE(DC.ITEM_ID,'903000701','108000009','903000702','108000008','903000729','108000006',DC.ITEM_ID) 
                )C,
                (
                SELECT	TO_CHAR(SALE_DATE,'YYYYMMDD') CNFM_DATE,
                		DECODE(ITEM_ID,'903000702','108000008') ITEM_ID,
                		SUM(QTY) QTY 
                FROM 	SALES_ACT
                WHERE 	DOMAIN='DO'
                AND	 	ITEM_ID	=	'903000702'
                AND		SALE_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD') AND TO_DATE('$!{end_date}','YYYY-MM-DD')
                GROUP 
                BY 		SALE_DATE,
                		ITEM_ID
                UNION ALL
                SELECT	TO_CHAR(SALE_DATE,'YYYYMMDD') CNFM_DATE,
                		DECODE(ITEM_ID,'903000729','108000006') ITEM_ID,
                		SUM(QTY)  QTY
                FROM 	SALES_ACT
                WHERE 	DOMAIN='DO'
                AND	 	ITEM_ID	=	'903000729'
                AND		SALE_DATE BETWEEN TO_DATE('$!{start_date}','YYYY-MM-DD') AND TO_DATE('$!{end_date}','YYYY-MM-DD')
                GROUP 
                BY 		SALE_DATE,
                		ITEM_ID
                )D
    	 WHERE	A.CNFM_DATE = B.CNFM_DATE
         AND	A.CNFM_DATE = C.CNFM_DATE  
         AND	A.CNFM_DATE = D.CNFM_DATE       
         AND	C.ITEM_ID = A.ITEM_ID(+)
         AND	C.ITEM_ID = B.ITEM_ID(+)
         AND	C.ITEM_ID = D.ITEM_ID
         )C       
         WHERE (A.PROD_CODE	LIKE '%'||'$!{search_item}'||'%'
			OR	A.PROD_NAME LIKE '%'||'$!{search_item}'||'%')
		 AND	A.PROD_CODE	= B.PROD_CODE
		 AND	A.PROD_CODE = C.PROD_CODE(+)
		 AND	A.YYYYMMDD	= B.YYYYMMDD(+)
		 AND	A.YYYYMMDD	= C.YYYYMMDD(+)
		  AND	A.PROD_CODE IN ('108000006','108000008')
         GROUP BY A.YYYYMMDD, A.PROD_CODE, A.PROD_NAME
         ORDER BY 1,2
	</query>		
	
	<!-- 
	=======================
	  EDI eCvan 조회 분석
	=======================
	-->	
		
	<query id="ip_07090_EDI_eCvan_Analysis_list" paging="false">
	SELECT 	TO_CHAR(TO_DATE(S1.CNFM_DATE),'YYYY-MM-DD'),			
			MAX(S2.ODER_BOX)	"발주량",
			MAX(S2.ODER_AMT)	"발주액",
			MAX(S3.SELL_BOX)	"납품량",
			MAX(S3.SELL_AMT)	"납품액",
            ROUND(SUM(S1.EDI_DEFAULT_QTY),0)                             "EDI미납량",
            ROUND(SUM(S1.EDI_DEFAULT_AMOUNT),0)                          "EDI미납액",
            ROUND(SUM(S1.NS_MINAP),0)                                    "농심미납",
            ROUND(SUM(S1.NS_MINAP_AMT),0)                                "농심미납액",
            ROUND(SUM(S1.EDI_MINAP),0)                                   "이마트미납",
            ROUND(SUM(S1.EDI_MINAP_AMT),0)                               "이마트미납액",
            ROUND(DECODE(MAX(S2.ODER_AMT),0,0,SUM(S1.EDI_DEFAULT_AMOUNT)/MAX(S2.ODER_AMT))*100,1)||'%'         	"EDI미납률",            
            ROUND(SUM(S1.ECV_QTY),0)                                                						   	"ECV납품량",               
            ROUND(SUM(S1.ECV_AMOUNT),0)                                                					   		"ECV납품액",
            ROUND(SUM(S1.ECV_DEFAULT_QTY),0)                                                                    "ECV미납량",
            ROUND(SUM(S1.ECV_DEFAULT_AMOUNT),0)                                                                 "ECV미납액",
            ROUND(DECODE(SUM(S1.EDI_AMOUNT),0,0,SUM(S1.ECV_DEFAULT_AMOUNT)/SUM(S1.EDI_AMOUNT))*100,1)||'%'      "ECV미납률",
            ROUND(SUM(S1.EDI_DEFAULT_QTY)     - SUM(S1.ECV_DEFAULT_QTY),0)                                      "미납차이량",    
            ROUND(SUM(S1.EDI_DEFAULT_AMOUNT) - SUM(S1.ECV_DEFAULT_AMOUNT),0)                                    "미납차이액",
            CASE WHEN DECODE(SUM(S1.EDI_AMOUNT),0,0,ROUND((SUM(S1.EDI_DEFAULT_AMOUNT)/SUM(S1.EDI_AMOUNT))*100,1)) > 10
                 THEN ROUND(SUM(S1.NS_MINAP_AMT) * 0.03,0)
                 ELSE CASE WHEN DECODE(MAX(S2.ODER_AMT),0,0,ROUND((SUM(S1.NS_MINAP_AMT)/MAX(S2.ODER_AMT))*100,1)) &lt; 5
                            THEN ROUND(SUM(S1.NS_MINAP_AMT) * 0.03,0)
                            ELSE    ROUND(SUM(S1.NS_MINAP_AMT) * 0.03,0)        
                            END
            END                                                                                                 "EDI미납손해배상금",
            CASE WHEN DECODE(SUM(S1.ECV_AMOUNT),0,0,ROUND((SUM(S1.ECV_DEFAULT_AMOUNT)/SUM(S1.ECV_AMOUNT))*100,1)) > 10
                 THEN ROUND(SUM(S1.ECV_DEFAULT_AMOUNT) * 0.03,0)
                 ELSE CASE WHEN DECODE(SUM(S1.ECV_AMOUNT),0,0,ROUND((SUM(S1.ECV_DEFAULT_AMOUNT)/SUM(S1.ECV_AMOUNT))*100,1)) &lt; 5
                            THEN ROUND(SUM(S1.ECV_DEFAULT_AMOUNT) * 0.03,0)
                            ELSE    ROUND(SUM(S1.ECV_DEFAULT_AMOUNT) * 0.03,0)
                            END
            END                                                                                                 "ECV미납손해배상금"                
    FROM    (
            SELECT  T1.CNFM_DATE    			CNFM_DATE,
                    T1.PROD_CODE,                    
                    T1.CUST_CODE,                   
                    ''        					DEFAULT_CODE_NS,
                    0        					NS_MINAP,
                    0        					NS_MINAP_AMT,
                    0        					EDI_MINAP,   
                    0        					EDI_MINAP_AMT,        
                    SUM(T1.EDI_QTY)            	ECV_QTY,
                    SUM(T1.EDI_AMOUNT)        	ECV_AMOUNT,
                    SUM(T1.EDI_QTY)     - SUM(T1.DEFAULT_QTY)    		ECV_SELL_QTY,
                    SUM(T1.EDI_AMOUNT)  - SUM(T1.DEFAULT_AMOUNT) 		ECV_SELL_AMOUNT,
                    SUM(T1.DEFAULT_QTY)        							ECV_DEFAULT_QTY,
                    SUM(T1.DEFAULT_AMOUNT)    							ECV_DEFAULT_AMOUNT,
                    0                        EDI_QTY,
                    0                        EDI_AMOUNT,
                    0                        EDI_SELL_QTY,
                    0                        EDI_SELL_AMOUNT,
                    0                        EDI_DEFAULT_QTY,
                    0                        EDI_DEFAULT_AMOUNT
            FROM
            (
            SELECT  T1.CNFM_DATE          CNFM_DATE,
                    T1.ITEM_ID            PROD_CODE,                    
                    T1.CUST_CODE,                   
                    CASE
                        WHEN T2.MULTI_FLAG = 'V' -- 비쥬얼 제품이면 EDI 발주 수량을 그대로 유지한다
                        THEN T1.EDI_QTY
                        WHEN NVL(F_GET_ITEM_NAME(T1.ITEM_ID),CUST_ITEM_NAME) LIKE '%(S)%'  -- 신라면(S) 등의 20개 박스들이 상품은 EDI 발주 수량을 그대로 유지한다
                        THEN T1.EDI_QTY
                        WHEN T1.ITEM_ID = '101000103' OR T1.ITEM_ID = '101000165' OR T1.ITEM_ID = '101000048' -- 30봉 단위인 '정품'류는 EDI 발주 수량을 그대로 유지한다(신라면, 짜파, 안성탕면 정품..)
                        THEN T1.EDI_QTY
                        WHEN T1.ITEM_ID = '101002115' -- 신라면 블랙 정품은 EDI 발주 수량을 그대로 유지한다
                        THEN T1.EDI_QTY
                        WHEN T1.ITEM_ID = '103000005' -- 카프리선 일부제품은 '카프리썬딸기와키위','카프리선아이스?'  EDI_QTY / 10
                        THEN T1.EDI_QTY/10
                        WHEN T1.ITEM_ID = '903000564' OR T1.ITEM_ID = '903000565'-- 카프리선 대용량 "카프리선 카시스"  EDI_QTY / 15
                        THEN T1.DEFAULT_QTY/15                    
                        WHEN T2.SALES_CAT03 = '134' -- 그외 카프리선은 박스단위 판매 !!
                        THEN T1.EDI_QTY
                        WHEN (F_GET_ITEM_NAME(T1.ITEM_ID) LIKE '%VONO%' AND F_GET_ITEM_NAME(T1.ITEM_ID) LIKE '%(30입)%') -- VONO 종류중 (30입)은   EDI_QTY / 30
                        THEN ROUND(T1.EDI_QTY/30,0)
                        WHEN T1.ITEM_ID IS NULL -- 본부 조정으로 오더 전환을 막은 품목은 EDI 발주량을 변환없이 보여준다
                        THEN T1.EDI_QTY
                        ELSE ROUND(T1.EDI_QTY/DECODE(T3.VIEW_PROD_BOX, 1 ,T3.VIEW_PROD_PICE, T3.VIEW_PROD_BOX))  
                    END EDI_QTY,
                    CASE
                        WHEN T2.MULTI_FLAG = 'V' -- 비쥬얼 제품이면 EDI 발주 수량을 그대로 유지한다
                        THEN T1.DEFAULT_QTY
                        WHEN NVL(F_GET_ITEM_NAME(T1.ITEM_ID),CUST_ITEM_NAME) LIKE '%(S)%'  -- 신라면(S) 등의 20개 박스들이 상품은 EDI 발주 수량을 그대로 유지한다
                        THEN T1.DEFAULT_QTY
                        WHEN T1.ITEM_ID = '101000103' OR T1.ITEM_ID = '101000165' OR T1.ITEM_ID = '101000048' -- 30봉 단위인 '정품'류는 EDI 발주 수량을 그대로 유지한다(신라면, 짜파, 안성탕면 정품..)
                        THEN T1.DEFAULT_QTY
                        WHEN T1.ITEM_ID = '101002115' -- 신라면 블랙 정품은 EDI 발주 수량을 그대로 유지한다
                        THEN T1.DEFAULT_QTY
                        WHEN T1.ITEM_ID = '103000005' -- 카프리선 일부제품은 '카프리썬딸기와키위','카프리선아이스?'  EDI_QTY / 10
                        THEN T1.DEFAULT_QTY/10
                        WHEN T1.ITEM_ID = '903000564' OR T1.ITEM_ID = '903000565'-- 카프리선 대용량 "카프리선 카시스"  EDI_QTY / 15
                        THEN T1.DEFAULT_QTY/15
                        WHEN T2.SALES_CAT03 = '134' -- 그외 카프리선은 박스단위 판매 !!
                        THEN T1.DEFAULT_QTY
                        WHEN (F_GET_ITEM_NAME(T1.ITEM_ID) LIKE '%VONO%' AND F_GET_ITEM_NAME(T1.ITEM_ID) LIKE '%(30입)%') -- VONO 종류중 (30입)은   EDI_QTY / 30
                        THEN ROUND(T1.EDI_QTY/30,0)
                        WHEN T1.ITEM_ID IS NULL -- 본부 조정으로 오더 전환을 막은 품목은 EDI 발주량을 변환없이 보여준다
                        THEN T1.DEFAULT_QTY
                        ELSE ROUND(T1.DEFAULT_QTY/DECODE(T3.VIEW_PROD_BOX, 1 ,T3.VIEW_PROD_PICE, T3.VIEW_PROD_BOX))  
                    END  DEFAULT_QTY,
                    CASE
                        WHEN T2.MULTI_FLAG = 'V' -- 비쥬얼 제품이면 EDI 발주 수량을 그대로 유지한다
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        WHEN NVL(F_GET_ITEM_NAME(T1.ITEM_ID),CUST_ITEM_NAME) LIKE '%(S)%'  -- 신라면(S) 등의 20개 박스들이 상품은 EDI 발주 수량을 그대로 유지한다
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        WHEN T1.ITEM_ID = '101000103' OR T1.ITEM_ID = '101000165' OR T1.ITEM_ID = '101000048' -- 30봉 단위인 '정품'류는 EDI 발주 수량을 그대로 유지한다(신라면, 짜파, 안성탕면 정품..)
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        WHEN T1.ITEM_ID = '101002115' -- 신라면 블랙 정품은 EDI 발주 수량을 그대로 유지한다
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        WHEN T1.ITEM_ID = '103000005' -- 카프리선 일부제품은 '카프리썬딸기와키위','카프리선아이스?'  EDI_QTY / 10
                        THEN (T1.EDI_AMOUNT*10)/T1.EDI_QTY
                        WHEN T1.ITEM_ID = '903000564' OR T1.ITEM_ID = '903000565'-- 카프리선 대용량 "카프리선 카시스"  EDI_QTY / 15
                        THEN (T1.EDI_AMOUNT*15)/T1.EDI_QTY
                        WHEN T2.SALES_CAT03 = '134' -- 그외 카프리선은 박스단위 판매 !!
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        WHEN (F_GET_ITEM_NAME(T1.ITEM_ID) LIKE '%VONO%' AND F_GET_ITEM_NAME(T1.ITEM_ID) LIKE '%(30입)%') -- VONO 종류중 (30입)은   EDI_QTY / 30
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        WHEN T1.ITEM_ID IS NULL -- 본부 조정으로 오더 전환을 막은 품목은 EDI 발주량을 변환없이 보여준다
                        THEN T1.EDI_AMOUNT/T1.EDI_QTY
                        ELSE ROUND(T1.EDI_AMOUNT/(T1.EDI_QTY/DECODE(T3.VIEW_PROD_BOX, 1 ,T3.VIEW_PROD_PICE, T3.VIEW_PROD_BOX)))  
                    END  EDI_AMOUNT,     
                    ----------------------------------------------------------------------------------------
                    T1.DEFAULT_AMOUNT 
            FROM    EDI_DEFAULT T1,
                    ITEM_MST T2,
                    (
                    /*발주량 환산 - VIEW_PROD_BOX : 박스내 판매단위 수량 */
                    SELECT  *
                    FROM    SDSTT301
                    WHERE   SALE_ORG = '1000' -- 국내판매           
                    ) T3                               
            WHERE    T1.ITEM_ID     = T2.ITEM_ID
            AND        T1.ITEM_ID    =    T3.PROD_CODE
            AND        T1.GROUP_CODE IN ('32')            
            AND        T2.ITYPE LIKE '%'||'$!{item_type}'||'%'
            AND        T1.CNFM_DATE BETWEEN  '$!{start_date}' AND '$!{end_date}'      
            )T1
            GROUP BY T1.CNFM_DATE,
                     T1.PROD_CODE,                     
                     T1.CUST_CODE                     
            UNION ALL 
            SELECT  K1.CNFM_DATE     CNFM_DATE,
                    K1.PROD_CODE,                  
                    K1.CUST_CODE,                   
                    K1.DEFAULT_CODE_NS,
                      CASE WHEN K1.DEFAULT_CODE_NS IN ('101','103','104','105','111','106','102')
                         THEN SUM(DEFAULT_BOX)
                         ELSE 0
                         END        NS_MINAP,   
                       CASE WHEN K1.DEFAULT_CODE_NS IN ('101','103','104','105','111','106','102')
                         THEN SUM(DEFAULT_AMT)
                         ELSE 0
                         END        NS_MINAP_AMT,                   
                    CASE WHEN K1.DEFAULT_CODE_NS IN ('201','202','204','208','209','210','207','211','212','213','214','215')
                         THEN SUM(DEFAULT_BOX)
                         ELSE 0
                         END        EDI_MINAP,
                    CASE WHEN K1.DEFAULT_CODE_NS IN ('201','202','204','208','209','210','207','211','212','213','214','215')
                         THEN SUM(DEFAULT_AMT)
                         ELSE 0
                         END         EDI_MINAP_AMT,
                    0                ECV_QTY,
                    0                ECV_AMOUNT,
                    0                ECV_SELL_QTY,
                    0                ECV_SELL_AMOUNT,
                    0                ECV_DEFAULT_QTY,
                    0                ECV_DEFAULT_AMOUNT,
                    SUM(ODER_BOX)    EDI_QTY,
                    SUM(ODER_AMT)    EDI_AMOUNT,
                    SUM(SELL_BOX)    EDI_SELL_QTY,                       
                    SUM(SELL_AMT)    EDI_SELL_AMOUNT,
                    SUM(DEFAULT_BOX),
                    SUM(DEFAULT_AMT)        
            FROM    ( 
	                 SELECT  T1.CNFM_DATE, 
		                    T1.PROD_CODE,
		                    T1.ITEM_NAME,
		                    T1.CUST_CODE,
		                    T1.CUST_NAME,
		                    T1.ODER_BOX,
		                    T1.ODER_AMT,
		                    T1.SELL_BOX,
		                    T1.SELL_AMT,
		                    T1.HS_BOX,
		                    T1.ODER_BOX - T1.SELL_BOX   DEFAULT_BOX,
		                    T1.ODER_AMT - T1.SELL_AMT   DEFAULT_AMT,
		                    T1.DEFAULT_CODE_NS,
		                    T1.STOR_CODE,
		                    T1.DC_NAME,
		                    T1.DEPT_CODE,
		                    T1.DEPT_NAME
		            FROM    (    
					        SELECT  CNFM_DATE,
					                ALLOC_GUBN,
					                JEJU_GUBN,                
					                PROD_CODE,
					                ITEM_NAME,
					                CUST_CODE,
					                CUST_NAME,
					                CASE WHEN ALLOC_GUBN ='Y'   --배정품목이면 EDI 발주량이 주문량이다
					                     THEN ODER_BOX
					                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
					                          THEN DECODE(DEPT_CODE,'144',ODER_BOX,ODER_BOX2)
					                          ELSE ODER_BOX2
					                          END
					                END     ODER_BOX,
					                CASE WHEN ALLOC_GUBN ='Y'   --금액은 EDI 120 TABLE 단가는 무시한다. 
					                     THEN ODER_AMT
					                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
					                          THEN DECODE(DEPT_CODE,'144',ODER_AMT,ODER_AMT2)
					                          ELSE ODER_AMT2
					                          END
					                END     ODER_AMT,
					                SELL_BOX,    
					                SELL_AMT,   
					                HS_BOX,
					                DEFAULT_CODE_NS,
					                STOR_CODE,
					                DC_NAME,
					                DEPT_CODE,
					                DEPT_NAME,    
					                HAN_NAME,
					                BIGO                                
					        FROM    (        
					                SELECT  S1.CNFM_DATE,
					                        S1.PROD_CODE,         
					                        S2.ALLOC_GUBN,
					                        S2.JEJU_GUBN,
					                        S1.ITEM_NAME,
					                        S1.CUST_CODE,
					                        S1.CUST_NAME,  
					                        S1.STOR_CODE, 
					                        S1.DC_NAME,
					                        S1.DEPT_CODE,
					                        S1.DEPT_NAME,
					                        S1.HAN_NAME,
					                        SUM(S1.ODER_BOX)   ODER_BOX,
					                        SUM(S1.ODER_AMT)   ODER_AMT,
					                        SUM(S1.ODER_BOX2)  ODER_BOX2, 
					                        SUM(S1.ODER_AMT2)  ODER_AMT2,      
					                        SUM(S1.SELL_BOX) - SUM(S1.HS_BOX)  SELL_BOX,
					                        SUM(S1.SELL_AMT) - SUM(S1.HS_AMT)  SELL_AMT,
					                        SUM(S1.HS_BOX)     HS_BOX,
					                        S3.DEFAULT_CODE_NS,
					                        S3.BIGO
					                FROM    (
					                        /* 주문량 */
					                        SELECT    T1.CNFM_DATE,
					                                T1.PROD_CODE,
					                                T8.ITEM_NAME,
					                                T1.CUST_CODE,
					                                T4.CUST_NAME,
					                                T5.STOR_CODE,
					                                F_GET_DC_NAME(T5.STOR_CODE) DC_NAME,
					                                T5.DEPT_CODE,
					                                T9.DEPT_NAME,
					                                SUM(T1.ODER_BOX)    ODER_BOX,
					                                SUM(T1.ODER_AMT)    ODER_AMT,
					                                0                   ODER_BOX2,
					                                0                   ODER_AMT2,
					                                0                   SELL_BOX,
					                                0                   SELL_AMT,
					                                0                   HS_BOX,
					                                0                   HS_AMT,
					                                T7.HAN_NAME
					                        FROM    SDORT120    T1,
					                                SDSTT101    T4,
					                                SDSTT103    T5,
					                                SDSTT105    T6,
					                                NCOMT005    T7,
					                                ITEM_MST    T8,
					                                SDSTT401    T9                        
					                        WHERE   T1.CNFM_DATE        BETWEEN	'$!{start_date}' AND '$!{end_date}'            
					                        AND     T1.ERR_GUBN           != '16'
					                        AND     T1.GRUP_CODE        = '32'            
					                        AND     T1.CUST_CODE        = T4.CUST_CODE
					                        AND     T4.HEAD_CUST_CODE   = '1020073'
					                        AND     T1.CUST_CODE        = T5.CUST_CODE
					                        AND     T5.SALE_ORG         = '1000'
					                        AND     T1.CUST_CODE        = T6.CUST_CODE                      
					                        AND     T6.PRTN_ROLE        = 'VE'
					                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
					                        AND     T1.PROD_CODE         = T8.ITEM_ID
					                        AND     T5.DEPT_CODE         = T9.DEPT_CODE
					                        AND     T9.APPL_END_YYMM     = '999912'					                        
					                        AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
					                        GROUP
					                        BY      T1.CNFM_DATE,
					                                T1.PROD_CODE,
					                                T8.ITEM_NAME,
					                                T1.CUST_CODE,
					                                T4.CUST_NAME,
					                                T5.DEPT_CODE,
					                                T7.HAN_NAME,
					                                T9.DEPT_NAME,
					                                T5.STOR_CODE
					                        /* 판매량 */
					                        UNION ALL 
					                        SELECT  T2.CNFM_DATE,
					                                T3.PROD_CODE,
					                                T8.ITEM_NAME,
					                                T2.SOLD_PART,
					                                T4.CUST_NAME,
					                                T5.STOR_CODE,
					                                F_GET_DC_NAME(T5.STOR_CODE),                        
					                                T5.DEPT_CODE,
					                                T9.DEPT_NAME,
					                                0                   ODER_BOX,
					                                0                   ODER_AMT,
					                                SUM(T3.ODER_BOX)    ODER_BOX2,
					                                SUM(T3.ODER_AMT)    ODER_AMT2,
					                                SUM(T3.SELL_BOX)    SELL_BOX,
					                                SUM(T3.SUPL_AMT)    SELL_AMT,
					                                0                   HS_BOX,
					                                0                   HS_AMT,
					                                T7.HAN_NAME
					                        FROM    SDORT101    T2,
					                                SDORT102    T3,
					                                SDSTT101    T4,
					                                SDSTT103    T5,
					                                SDSTT105    T6,
					                                NCOMT005    T7,
					                                ITEM_MST    T8,
					                                SDSTT401    T9                        
					                        WHERE   T2.CNFM_DATE        BETWEEN	'$!{start_date}' AND '$!{end_date}'                 
					                        AND     T2.SLIP_NO          = T3.SLIP_NO
					                        AND     T4.GRUP_CODE        = '32'            
					                        AND     T2.SOLD_PART        = T4.CUST_CODE
					                        AND     T4.HEAD_CUST_CODE   = '1020073'
					                        AND     T2.SOLD_PART        = T5.CUST_CODE
					                        AND     T5.SALE_ORG            = '1000'
					                        AND     T2.SOLD_PART        = T6.CUST_CODE  
					                        AND     T2.UPDT_GUBN       != '00'
					                        AND     T3.UPDT_GUBN       != '00'                    
					                        AND     T6.PRTN_ROLE        = 'VE'
					                        AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
					                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
					                        AND     T3.PROD_CODE        = T8.ITEM_ID
					                        AND     T5.DEPT_CODE         = T9.DEPT_CODE
					                        AND     T9.APPL_END_YYMM     = '999912'                    
					                        GROUP
					                        BY      T2.CNFM_DATE,
					                                T3.PROD_CODE,
					                                T8.ITEM_NAME,
					                                T2.SOLD_PART,
					                                T4.CUST_NAME,
					                                T5.STOR_CODE,
					                                T5.DEPT_CODE,
					                                T9.DEPT_NAME,                
					                                T7.HAN_NAME                                    
					                        UNION ALL
					                        /* 회송량 */                
					                        SELECT  T2.CNFM_DATE,
					                                T3.PROD_CODE,
					                                T8.ITEM_NAME,
					                                T2.SOLD_PART,
					                                T4.CUST_NAME,
					                                T5.STOR_CODE,
					                                F_GET_DC_NAME(T5.STOR_CODE),                        
					                                T5.DEPT_CODE,
					                                T9.DEPT_NAME,
					                                0                   ODER_BOX,
					                                0                   ODER_AMT,
					                                0    				ODER_BOX2,
					                                0    				ODER_AMT2,
					                                0                   SELL_BOX,
					                                0                   SELL_AMT,
					                                SUM(T3.SELL_BOX)    HS_BOX, 
					                                SUM(T3.SUPL_AMT)    HS_AMT,                       
					                                T7.HAN_NAME
					                        FROM    SDORT101    T2,
					                                SDORT102    T3,
					                                SDSTT101    T4,
					                                SDSTT103    T5,
					                                SDSTT105    T6,
					                                NCOMT005    T7,
					                                ITEM_MST    T8,
					                                SDSTT401    T9                        
					                        WHERE   T2.CNFM_DATE        BETWEEN	'$!{start_date}' AND '$!{end_date}'           
					                        AND     T2.SLIP_NO          = T3.SLIP_NO
					                        AND     T4.GRUP_CODE        = '32'            
					                        AND     T2.SOLD_PART        = T4.CUST_CODE
					                        AND     T4.HEAD_CUST_CODE   = '1020073'
					                        AND     T2.SOLD_PART        = T5.CUST_CODE
					                        AND     T5.SALE_ORG            = '1000'
					                        AND     T2.UPDT_GUBN       != '00'
					                        AND     T3.UPDT_GUBN       != '00'  
					                        AND     T2.SOLD_PART        = T6.CUST_CODE                      
					                        AND     T6.PRTN_ROLE        = 'VE'
					                        AND     T2.SLIP_GUBN_CODE LIKE 'YS%'
					                        AND     T2.REFR_DOC IS  NOT  NULL
					                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
					                        AND     T3.PROD_CODE        = T8.ITEM_ID
					                        AND     T5.DEPT_CODE         = T9.DEPT_CODE
					                        AND     T9.APPL_END_YYMM     = '999912'                    
					                        GROUP
					                        BY      T2.CNFM_DATE,
					                                T3.PROD_CODE,
					                                T8.ITEM_NAME,
					                                T2.SOLD_PART,
					                                T4.CUST_NAME,
					                                T5.STOR_CODE,
					                                T5.DEPT_CODE,
					                                T9.DEPT_NAME,                
					                                T7.HAN_NAME                                    
					                        )S1,
					                        (
					                        SELECT  PROD_CODE,
					                        		CNFM_DATE,
					                                MAX(DECODE(GUBN,'1','Y','')) ALLOC_GUBN,
					                                MAX(DECODE(GUBN,'2','Y','')) JEJU_GUBN
					                        FROM    (
					                                SELECT  CNFM_DATE,
					                                		PROD_CODE,                                
					                                        '1'         GUBN
					                                FROM    SDORT203
					                                WHERE   CNFM_DATE   BETWEEN	'$!{start_date}' AND '$!{end_date}'  
					                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
				                                    AND     ALLOC_ZONE  = '01'
				                                    GROUP
				                                    BY      CNFM_DATE,
				                                    		PROD_CODE
				                                    UNION ALL
				                                    SELECT  CNFM_DATE,
				                                    		PROD_CODE,                  
				                                            '2'         GUBN
				                                    FROM    SDORT203
				                                    WHERE   CNFM_DATE   BETWEEN	'$!{start_date}' AND '$!{end_date}'  
				                                    AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
				                                    AND     ALLOC_ZONE    = '11'
				                                    GROUP
				                                    BY      CNFM_DATE,
				                                    		PROD_CODE
				                                    )
					                            GROUP
					                            BY      CNFM_DATE,
					                            		PROD_CODE
					                            )S2,
					                            (
					                            SELECT  DISTINCT CNFM_DATE,
					                                    PROD_CODE,
					                                    CUST_CODE,
					                                    BIGO,
					                                    DEFAULT_CODE_NS
					                            FROM    EDI_DEFAULT_NS
					                            WHERE   CNFM_DATE BETWEEN	'$!{start_date}' AND '$!{end_date}'                             
					                            )S3
					                WHERE   S1.PROD_CODE = S2.PROD_CODE(+)
					                AND		S1.CNFM_DATE = S2.CNFM_DATE(+)
					                AND     S1.PROD_CODE = S3.PROD_CODE(+)
					                AND     S1.CNFM_DATE = S3.CNFM_DATE(+)
					                AND     S1.CUST_CODE = S3.CUST_CODE(+)
					                GROUP 
					                BY      S1.CNFM_DATE,
					                        S1.PROD_CODE,            
					                        S1.ITEM_NAME,
					                        S1.CUST_CODE,
					                        S1.CUST_NAME,   
					                        S2.ALLOC_GUBN,
					                        S2.JEJU_GUBN,
					                        S1.STOR_CODE, 
					                        S1.DC_NAME,
					                        S1.DEPT_CODE,
					                        S1.DEPT_NAME,
					                        S1.HAN_NAME,
					                        S3.BIGO,
					                        S3.DEFAULT_CODE_NS    
		                			)
		            			)T1, 
		            			ITEM_MST T2        
					    WHERE   DECODE(SIGN(T1.ODER_BOX - T1.SELL_BOX),-1,0,T1.ODER_BOX - T1.SELL_BOX) > 0      
					    AND   T1.PROD_CODE = T2.ITEM_ID
	            		)K1  
	            GROUP
	            BY		K1.CNFM_DATE,
	            		K1.PROD_CODE,
	            		K1.CUST_CODE,
	            		K1.DEFAULT_CODE_NS 
            )S1,
            (
            SELECT  T1.CNFM_DATE,                    
                    SUM(T1.ODER_BOX)    ODER_BOX,
                    SUM(T1.ODER_AMT)	ODER_AMT                    
            FROM    SDORT120    T1,
                    SDSTT101    T4,
                    SDSTT103    T5,
                    SDSTT105    T6,
                    NCOMT005    T7,
                    ITEM_MST    T8,
                    SDSTT401    T9                        
            WHERE   T1.CNFM_DATE    	BETWEEN	'$!{start_date}' AND '$!{end_date}'            
            AND     T1.ERR_GUBN    	   != '16'
            AND     T1.GRUP_CODE    	= '32'            
            AND     T1.CUST_CODE    	= T4.CUST_CODE
            AND     T4.HEAD_CUST_CODE 	= '1020073'
            AND     T1.CUST_CODE    	= T5.CUST_CODE
            AND     T5.SALE_ORG     	= '1000'
            AND     T1.CUST_CODE    	= T6.CUST_CODE                      
            AND     T6.PRTN_ROLE    	= 'VE'
            AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
            AND     T1.PROD_CODE     	= T8.ITEM_ID
            AND     T5.DEPT_CODE     	= T9.DEPT_CODE
            AND     T9.APPL_END_YYMM 	= '999912'
            AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
            GROUP
            BY      T1.CNFM_DATE
            )S2,
            (
            SELECT  T2.CNFM_DATE,                    
                    SUM(T3.SELL_BOX)    SELL_BOX,
                    SUM(T3.SUPL_AMT)	SELL_AMT                   
            FROM    SDORT101    T2,
                    SDORT102    T3,
                    SDSTT101    T4,
                    SDSTT103    T5,
                    SDSTT105    T6,
                    NCOMT005    T7,
                    ITEM_MST    T8,
                    SDSTT401    T9                        
            WHERE   T2.CNFM_DATE    	BETWEEN	'$!{start_date}' AND '$!{end_date}'                 
            AND     T2.SLIP_NO      	= T3.SLIP_NO
            AND     T4.GRUP_CODE    	= '32'            
            AND     T2.SOLD_PART    	= T4.CUST_CODE
            AND     T4.HEAD_CUST_CODE 	= '1020073'
            AND     T2.SOLD_PART    	= T5.CUST_CODE
            AND     T5.SALE_ORG    		= '1000'
            AND     T2.SOLD_PART    	= T6.CUST_CODE  
            AND		T2.UPDT_GUBN	   != '00' 
            AND		T3.UPDT_GUBN	   != '00'                 
            AND     T6.PRTN_ROLE    	= 'VE'
            AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
            AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
            AND     T3.PROD_CODE    	= T8.ITEM_ID
            AND     T5.DEPT_CODE     	= T9.DEPT_CODE
            AND     T9.APPL_END_YYMM 	= '999912'                    
            GROUP
            BY      T2.CNFM_DATE
            )S3
            WHERE	S1.CNFM_DATE = S2.CNFM_DATE   
            AND		S1.CNFM_DATE = S3.CNFM_DATE
            GROUP BY S1.CNFM_DATE
            ORDER BY S1.CNFM_DATE

	</query>	
	
	<query id="ip_07090_EDI_eCvan_Analysis_pop_list" paging="false">
	/* 유통본부 미납 추적분석(농심) 팝업 그리드 */			
	
	SELECT  T1.CNFM_DATE,
			T1.PROD_CODE                                "품목코드",
	        T1.ITEM_NAME                                "품목명",
	        T1.CUST_CODE                                "거래처코드",
	        T1.CUST_NAME                                "거래처명",
	        T1.ODER_BOX                                 "주문량",
	        T1.SELL_BOX                                 "판매량",	        
	        T1.ODER_BOX - T1.SELL_BOX                   "미납량",
	        T1.DEFAULT_CODE_NS                          "사유",
	        T1.STOR_CODE                                "배송지점코드",
	        T1.DC_NAME                                  "배송지점",
	        T1.DEPT_CODE                                "영업지점코드",
	        T1.DEPT_NAME                                "영업지점명",    
	        T1.HAN_NAME                                 "담당자",
	        T1.BIGO                                     "비고" 
	FROM    (    
	        SELECT  CNFM_DATE,
	                ALLOC_GUBN,
	                JEJU_GUBN,                
	                PROD_CODE,
	                ITEM_NAME,
	                CUST_CODE,
	                CUST_NAME,
	                CASE WHEN ALLOC_GUBN ='Y'   --배정품목이면 EDI 발주량이 주문량이다
	                     THEN ODER_BOX
	                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
	                          THEN DECODE(DEPT_CODE,'144',ODER_BOX,ODER_BOX2)
	                          ELSE ODER_BOX2
	                          END
	                END 	ODER_BOX,
	                SELL_BOX,       
	                HS_BOX,
	                DEFAULT_CODE_NS,
	                STOR_CODE,
	                DC_NAME,
	                DEPT_CODE,
	                DEPT_NAME,    
	                HAN_NAME,
	                BIGO                                
	        FROM    (        
	                SELECT  S1.CNFM_DATE,
	                        S1.PROD_CODE,         
	                        S2.ALLOC_GUBN,
	                        S2.JEJU_GUBN,
	                        S1.ITEM_NAME,
	                        S1.CUST_CODE,
	                        S1.CUST_NAME,  
	                        S1.STOR_CODE, 
	                        S1.DC_NAME,
	                        S1.DEPT_CODE,
	                        S1.DEPT_NAME,
	                        S1.HAN_NAME,
	                        SUM(S1.ODER_BOX)   ODER_BOX,
	                        SUM(S1.ODER_BOX2)  ODER_BOX2,       
	                        SUM(S1.SELL_BOX) - SUM(S1.HS_BOX)  SELL_BOX,
	                        SUM(S1.HS_BOX)     HS_BOX,
	                        S3.DEFAULT_CODE_NS,
	                        S3.BIGO
	                FROM    (
	                        /* 주문량 */
	                        SELECT    T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE) DC_NAME,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                SUM(T1.ODER_BOX)    ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT120    T1,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T1.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')              
	                        AND     T1.ERR_GUBN    	   != '16'
	                        AND     T1.GRUP_CODE    	= '32'            
	                        AND     T1.CUST_CODE    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T1.CUST_CODE    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG     	= '1000'
	                        AND     T1.CUST_CODE    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T1.PROD_CODE     	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'
	                        AND		T8.ITYPE LIKE '%'||'$!{item_type}'||'%'
	                        AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
	                        GROUP
	                        BY      T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.DEPT_CODE,
	                                T7.HAN_NAME,
	                                T9.DEPT_NAME,
	                                T5.STOR_CODE
	                        /* 판매량 */
	                        UNION ALL 
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                SUM(T3.ODER_BOX)    ODER_BOX2,
	                                SUM(T3.SELL_BOX)    SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')               
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE  
	                        AND		T2.UPDT_GUBN	   != '00' 
	                        AND		T3.UPDT_GUBN	   != '00'                 
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND		T8.ITYPE LIKE '%'||'$!{item_type}'||'%'
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        UNION ALL
	                        /* 회송량 */                
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                SUM(T3.SELL_BOX)    HS_BOX,                        
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')           
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND		T2.UPDT_GUBN	   != '00'
	                        AND		T3.UPDT_GUBN	   != '00'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YS%'
	                        AND     T2.REFR_DOC IS  NOT  NULL
	                        AND		T8.ITYPE LIKE '%'||'$!{item_type}'||'%'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        )S1,
	                        (
	                        SELECT  PROD_CODE,
	                                MAX(DECODE(GUBN,'1','Y','')) ALLOC_GUBN,
	                                MAX(DECODE(GUBN,'2','Y','')) JEJU_GUBN
	                        FROM    (
	                                SELECT  PROD_CODE,                                
	                                        '1'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   = REPLACE('$!{cnfm_date}', '-','')
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE  = '01'
	                                GROUP
	                                BY      PROD_CODE
	                                UNION ALL
	                                SELECT  PROD_CODE,                                
	                                        '2'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   = REPLACE('$!{cnfm_date}', '-','')
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE	= '11'
	                                GROUP
	                                BY      PROD_CODE
	                                )
	                        GROUP
	                        BY      PROD_CODE
	                        )S2,
	                        (
	                        SELECT	DISTINCT CNFM_DATE,
	                                PROD_CODE,
	                                CUST_CODE,
	                                BIGO,
	                                DEFAULT_CODE_NS
	                        FROM	EDI_DEFAULT_NS
	                        WHERE	CNFM_DATE = REPLACE('$!{cnfm_date}', '-','')	                        
	                        )S3
	            WHERE   S1.PROD_CODE = S2.PROD_CODE(+)
	            AND     S1.PROD_CODE = S3.PROD_CODE(+)
	            AND     S1.CNFM_DATE = S3.CNFM_DATE(+)
	            AND     S1.CUST_CODE = S3.CUST_CODE(+)
	            GROUP 
	            BY      S1.CNFM_DATE,
	                    S1.PROD_CODE,            
	                    S1.ITEM_NAME,
	                    S1.CUST_CODE,
	                    S1.CUST_NAME,   
	                    S2.ALLOC_GUBN,
	                    S2.JEJU_GUBN,
	                    S1.STOR_CODE, 
	                    S1.DC_NAME,
	                    S1.DEPT_CODE,
	                    S1.DEPT_NAME,
	                    S1.HAN_NAME,
	                    S3.BIGO,
	                    S3.DEFAULT_CODE_NS    
	            )
	        )T1, ITEM_MST T2        
	WHERE   DECODE(SIGN(T1.ODER_BOX - T1.SELL_BOX),-1,0,T1.ODER_BOX - T1.SELL_BOX) > 0  
	AND		T2.ITYPE LIKE '%'||'$!{item_type}'||'%'    
	AND     T1.PROD_CODE = T2.ITEM_ID   
	#if("$!{gubn}" == "1") 
	AND		T1.DEFAULT_CODE_NS IN ('101','103','104','105','111','106','102')    
	#elseif("$!{gubn}" == "2")
	AND		T1.DEFAULT_CODE_NS IN ('201','202','204','208','209','210','207','211','212','213','214','215')
	#else		
	#end 
	ORDER
	BY		1,2,4
		
		
		       	
	</query>
	
	<query id="ip_07090_EDI_eCvan_Analysis_pop_list_ecv" paging="false">
		SELECT  ED.CNFM_DATE,
		        NVL(ED.ITEM_ID, CUST_ITEM_ID) ITEM_ID,
		        NVL(F_GET_ITEM_NAME(ED.ITEM_ID),CUST_ITEM_NAME) ITEM_NAME,
		        NVL(ED.CUST_CODE, CUST_STORE_CODE) CUST_CODE,
		        REPLACE(REPLACE(NVL(CU.CUST_NAME,CUST_STORE_NAME),'(주)신세계마트'),'(주)신세계') CUST_NAME,
                ----------------------------------------------------------------------------------------
                CASE
                    WHEN IM.MULTI_FLAG = 'V' -- 비쥬얼 제품이면 EDI 발주 수량을 그대로 유지한다
                    THEN ED.EDI_QTY
                    WHEN NVL(F_GET_ITEM_NAME(ED.ITEM_ID),CUST_ITEM_NAME) LIKE '%(S)%'  -- 신라면(S) 등의 20개 박스들이 상품은 EDI 발주 수량을 그대로 유지한다
                    THEN ED.EDI_QTY
                    WHEN ED.ITEM_ID = '101000103' OR ED.ITEM_ID = '101000165' OR ED.ITEM_ID = '101000048' -- 30봉 단위인 '정품'류는 EDI 발주 수량을 그대로 유지한다(신라면, 짜파, 안성탕면 정품..)
                    THEN ED.EDI_QTY
                    WHEN ED.ITEM_ID = '101002115' -- 신라면 블랙 정품은 EDI 발주 수량을 그대로 유지한다
                    THEN ED.EDI_QTY
                    WHEN ED.ITEM_ID = '103000005' -- 카프리선 일부제품은 '카프리썬딸기와키위','카프리선아이스?'  EDI_QTY / 10
                    THEN ED.EDI_QTY/10
                    WHEN ED.ITEM_ID = '903000564' OR ED.ITEM_ID = '903000565'-- 카프리선 대용량 "카프리선 카시스"  EDI_QTY / 15
                    THEN ED.DEFAULT_QTY/15                    
                    WHEN IM.SALES_CAT03 = '134' -- 그외 카프리선은 박스단위 판매 !!
                    THEN ED.EDI_QTY
                    WHEN (F_GET_ITEM_NAME(ED.ITEM_ID) LIKE '%VONO%' AND F_GET_ITEM_NAME(ED.ITEM_ID) LIKE '%(30입)%') -- VONO 종류중 (30입)은   EDI_QTY / 30
                    THEN ROUND(ED.EDI_QTY/30,0)
                    WHEN ED.ITEM_ID IS NULL -- 본부 조정으로 오더 전환을 막은 품목은 EDI 발주량을 변환없이 보여준다
                    THEN ED.EDI_QTY
                    ELSE ROUND(ED.EDI_QTY/DECODE(CV.VIEW_PROD_BOX, 1 ,CV.VIEW_PROD_PICE, CV.VIEW_PROD_BOX))  
                END "발주량",
                CASE
                    WHEN IM.MULTI_FLAG = 'V' -- 비쥬얼 제품이면 EDI 발주 수량을 그대로 유지한다
                    THEN ED.DEFAULT_QTY
                    WHEN NVL(F_GET_ITEM_NAME(ED.ITEM_ID),CUST_ITEM_NAME) LIKE '%(S)%'  -- 신라면(S) 등의 20개 박스들이 상품은 EDI 발주 수량을 그대로 유지한다
                    THEN ED.DEFAULT_QTY
                    WHEN ED.ITEM_ID = '101000103' OR ED.ITEM_ID = '101000165' OR ED.ITEM_ID = '101000048' -- 30봉 단위인 '정품'류는 EDI 발주 수량을 그대로 유지한다(신라면, 짜파, 안성탕면 정품..)
                    THEN ED.DEFAULT_QTY
                    WHEN ED.ITEM_ID = '101002115' -- 신라면 블랙 정품은 EDI 발주 수량을 그대로 유지한다
                    THEN ED.DEFAULT_QTY
                    WHEN ED.ITEM_ID = '103000005' -- 카프리선 일부제품은 '카프리썬딸기와키위','카프리선아이스?'  EDI_QTY / 10
                    THEN ED.DEFAULT_QTY/10
                    WHEN ED.ITEM_ID = '903000564' OR ED.ITEM_ID = '903000565'-- 카프리선 대용량 "카프리선 카시스"  EDI_QTY / 15
                    THEN ED.DEFAULT_QTY/15
                    WHEN IM.SALES_CAT03 = '134' -- 그외 카프리선은 박스단위 판매 !!
                    THEN ED.DEFAULT_QTY
                    WHEN (F_GET_ITEM_NAME(ED.ITEM_ID) LIKE '%VONO%' AND F_GET_ITEM_NAME(ED.ITEM_ID) LIKE '%(30입)%') -- VONO 종류중 (30입)은   EDI_QTY / 30
                    THEN ROUND(ED.EDI_QTY/30,0)
                    WHEN ED.ITEM_ID IS NULL -- 본부 조정으로 오더 전환을 막은 품목은 EDI 발주량을 변환없이 보여준다
                    THEN ED.DEFAULT_QTY
                    ELSE ROUND(ED.DEFAULT_QTY/DECODE(CV.VIEW_PROD_BOX, 1 ,CV.VIEW_PROD_PICE, CV.VIEW_PROD_BOX))  
                END  "미납량",
                CASE
                    WHEN IM.MULTI_FLAG = 'V' -- 비쥬얼 제품이면 EDI 발주 수량을 그대로 유지한다
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    WHEN NVL(F_GET_ITEM_NAME(ED.ITEM_ID),CUST_ITEM_NAME) LIKE '%(S)%'  -- 신라면(S) 등의 20개 박스들이 상품은 EDI 발주 수량을 그대로 유지한다
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    WHEN ED.ITEM_ID = '101000103' OR ED.ITEM_ID = '101000165' OR ED.ITEM_ID = '101000048' -- 30봉 단위인 '정품'류는 EDI 발주 수량을 그대로 유지한다(신라면, 짜파, 안성탕면 정품..)
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    WHEN ED.ITEM_ID = '101002115' -- 신라면 블랙 정품은 EDI 발주 수량을 그대로 유지한다
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    WHEN ED.ITEM_ID = '103000005' -- 카프리선 일부제품은 '카프리썬딸기와키위','카프리선아이스?'  EDI_QTY / 10
                    THEN (ED.EDI_AMOUNT*10)/ED.EDI_QTY
                    WHEN ED.ITEM_ID = '903000564' OR ED.ITEM_ID = '903000565'-- 카프리선 대용량 "카프리선 카시스"  EDI_QTY / 15
                    THEN (ED.EDI_AMOUNT*15)/ED.EDI_QTY
                    WHEN IM.SALES_CAT03 = '134' -- 그외 카프리선은 박스단위 판매 !!
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    WHEN (F_GET_ITEM_NAME(ED.ITEM_ID) LIKE '%VONO%' AND F_GET_ITEM_NAME(ED.ITEM_ID) LIKE '%(30입)%') -- VONO 종류중 (30입)은   EDI_QTY / 30
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    WHEN ED.ITEM_ID IS NULL -- 본부 조정으로 오더 전환을 막은 품목은 EDI 발주량을 변환없이 보여준다
                    THEN ED.EDI_AMOUNT/ED.EDI_QTY
                    ELSE ROUND(ED.EDI_AMOUNT/(ED.EDI_QTY/DECODE(CV.VIEW_PROD_BOX, 1 ,CV.VIEW_PROD_PICE, CV.VIEW_PROD_BOX)))  
                END  "단가",     
		        ----------------------------------------------------------------------------------------
                ED.DEFAULT_AMOUNT "미납금액",
		        ED.DEFAULT_CODE "사유코드",   --ED.DEFAULT_CODE
		        DECODE(ED.ITEM_ID, NULL, '102', ED.DEFAULT_CODE) "사유명",   -- ITEM_ID MAPPING 실패인상품은 본부에서 오더 전환을 막아놓은 사례임
		        ED.DC_ID,
		        REPLACE(REPLACE(ED.DC_NAME,'배송'),'제품') DC_NAME,
		        ED.DEPT_CODE,
		        REPLACE(ED.DEPT_NAME, '지점') DEPT_NAME,
		        ED.HAN_NAME,
		        ED.TEL_NO,
		        ED.COMMT "비고", -- COMMT
		        AL.ALLOC_FLAG,
		        CASE
		            WHEN (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		            THEN ''
		            ELSE DECODE(ED.ITEM_ID, NULL, NULL, '중지')
		        END SELL_STOP_DATE,
		        IM.SPEC,
		        EDI_GUBN,
                CUST_ITEM_ID,
                CUST_STORE_CODE,
                CASE
                    WHEN SUBSTR(DECODE(ED.ITEM_ID, NULL, '102', ED.DEFAULT_CODE),1,1) = 1 THEN '농심'
                    WHEN SUBSTR(DECODE(ED.ITEM_ID, NULL, '102', ED.DEFAULT_CODE),1,1) = 2 THEN '거래처'
                    WHEN SUBSTR(DECODE(ED.ITEM_ID, NULL, '102', ED.DEFAULT_CODE),1,1) = 3 THEN '캘로그'
                    ELSE '기타'
                END DEFAULT_GUBN                
		FROM    EDI_DEFAULT ED, SDSTT101 CU,
		        (
		        /*발주량 환산 - VIEW_PROD_BOX : 박스내 판매단위 수량 */
		        SELECT  *
		        FROM    SDSTT301
		        WHERE   SALE_ORG = '1000' -- 국내판매           
		        ) CV,
		        (
				SELECT  CNFM_DATE, 
				        PROD_CODE	ITEM_ID,   
				        MAX(ALLOC_GUBN) ALLOC_GUBN,
				        'Y' ALLOC_FLAG
				FROM    SDORT203
		        WHERE   CNFM_DATE	= REPLACE('$!{cnfm_date}', '-','')
		        AND     ALLOC_GUBN	= '2'   -- 2 -> '관리'             
				GROUP BY CNFM_DATE, 
				        PROD_CODE  		        
		        )AL	, ITEM_MST IM	        
		WHERE   ED.CUST_CODE = CU.CUST_CODE(+)
		AND     ED.ITEM_ID = CV.PROD_CODE(+)
		AND     ED.ITEM_ID  = AL.ITEM_ID(+)
		AND     ED.ITEM_ID  = IM.ITEM_ID(+)
		AND		IM.ITYPE LIKE '%'||'$!{item_type}'||'%'   
		AND     ED.CNFM_DATE = REPLACE('$!{cnfm_date}', '-','')		
	    ORDER
	    BY		1,2,4
	</query>
	
	<query id="ip_07090_EDI_eCvan_Analysis_pop_list_all" paging="false">
	/* 유통본부 미납 추적분석(농심) POP_ALL 그리드 DW1 */			
	SELECT  T1.CNFM_DATE                                "작업일",
	        T1.PROD_CODE                                "품목코드",
	        T1.ITEM_NAME                                "품목명",
	        T1.CUST_CODE                                "거래처코드",
	        T1.CUST_NAME                                "거래처명",
	        T1.ODER_BOX                                 "주문량",
	        T1.SELL_BOX                                 "판매량",
	        T1.ODER_BOX - T1.SELL_BOX                   "미납량",
	        T1.DEFAULT_CODE_NS                          "사유",
	        T1.STOR_CODE                                "배송지점코드",
	        T1.DC_NAME                                  "배송지점",
	        T1.DEPT_CODE                                "영업지점코드",
	        T1.DEPT_NAME                                "영업지점명",    
	        T1.HAN_NAME                                 "담당자",
	        T1.BIGO                                     "비고" 
	FROM    (    
	        SELECT  CNFM_DATE,
	                ALLOC_GUBN,
	                JEJU_GUBN,                
	                PROD_CODE,
	                ITEM_NAME,
	                CUST_CODE,
	                CUST_NAME,
	                CASE WHEN ALLOC_GUBN ='Y'   --배정품목이면 EDI 발주량이 주문량이다
	                     THEN ODER_BOX
	                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
	                          THEN DECODE(DEPT_CODE,'144',ODER_BOX,ODER_BOX2)
	                          ELSE ODER_BOX2
	                          END
	                END 	ODER_BOX,
	                SELL_BOX,       
	                HS_BOX,
	                DEFAULT_CODE_NS,
	                STOR_CODE,
	                DC_NAME,
	                DEPT_CODE,
	                DEPT_NAME,    
	                HAN_NAME,
	                BIGO                                
	        FROM    (        
	                SELECT  S1.CNFM_DATE,
	                        S1.PROD_CODE,         
	                        S2.ALLOC_GUBN,
	                        S2.JEJU_GUBN,
	                        S1.ITEM_NAME,
	                        S1.CUST_CODE,
	                        S1.CUST_NAME,  
	                        S1.STOR_CODE, 
	                        S1.DC_NAME,
	                        S1.DEPT_CODE,
	                        S1.DEPT_NAME,
	                        S1.HAN_NAME,
	                        SUM(S1.ODER_BOX)   ODER_BOX,
	                        SUM(S1.ODER_BOX2)  ODER_BOX2,       
	                        SUM(S1.SELL_BOX) - SUM(S1.HS_BOX)  SELL_BOX,
	                        SUM(S1.HS_BOX)     HS_BOX,
	                        S3.DEFAULT_CODE_NS,
	                        S3.BIGO
	                FROM    (
	                        /* 주문량 */
	                        SELECT    T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE) DC_NAME,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                SUM(T1.ODER_BOX)    ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT120    T1,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T1.CNFM_DATE    	BETWEEN  '$!{start_date}' AND '$!{end_date}'         
	                        AND     T1.ERR_GUBN    	   != '16'
	                        AND     T1.GRUP_CODE    	= '32'            
	                        AND     T1.CUST_CODE    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T1.CUST_CODE    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG     	= '1000'
	                        AND     T1.CUST_CODE    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T1.PROD_CODE     	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'
	                        AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
	                        GROUP
	                        BY      T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.DEPT_CODE,
	                                T7.HAN_NAME,
	                                T9.DEPT_NAME,
	                                T5.STOR_CODE
	                        /* 판매량 */
	                        UNION ALL 
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                SUM(T3.ODER_BOX)    ODER_BOX2,
	                                SUM(T3.SELL_BOX)    SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	BETWEEN  '$!{start_date}' AND '$!{end_date}'              
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE  
	                        AND		T2.UPDT_GUBN	   != '00' 
	                        AND		T3.UPDT_GUBN	   != '00'                 
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        UNION ALL
	                        /* 회송량 */                
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                SUM(T3.SELL_BOX)    HS_BOX,                        
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	BETWEEN  '$!{start_date}' AND '$!{end_date}'    
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND		T2.UPDT_GUBN	   != '00'
	                        AND		T3.UPDT_GUBN	   != '00'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YS%'
	                        AND     T2.REFR_DOC IS  NOT  NULL
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        )S1,
	                        (
	                        SELECT  CNFM_DATE,
	                        		PROD_CODE,
	                                MAX(DECODE(GUBN,'1','Y','')) ALLOC_GUBN,
	                                MAX(DECODE(GUBN,'2','Y','')) JEJU_GUBN
	                        FROM    (
	                                SELECT  CNFM_DATE,
	                                		PROD_CODE,                                
	                                        '1'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   BETWEEN  '$!{start_date}' AND '$!{end_date}'
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE  = '01'
	                                GROUP
	                                BY      CNFM_DATE,
	                                		PROD_CODE
	                                UNION ALL
	                                SELECT  CNFM_DATE,
	                                		PROD_CODE,                                
	                                        '2'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   BETWEEN  '$!{start_date}' AND '$!{end_date}'
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE	= '11'
	                                GROUP
	                                BY      CNFM_DATE,
	                                		PROD_CODE
	                                )
	                        GROUP
	                        BY      CNFM_DATE,
	                        		PROD_CODE
	                        )S2,
	                        (
	                        SELECT	DISTINCT CNFM_DATE,
	                                PROD_CODE,
	                                CUST_CODE,
	                                BIGO,
	                                DEFAULT_CODE_NS
	                        FROM	EDI_DEFAULT_NS
	                        WHERE	CNFM_DATE BETWEEN  '$!{start_date}' AND '$!{end_date}'                    
	                        )S3
	            WHERE   S1.PROD_CODE = S2.PROD_CODE(+)
	            AND		S1.CNFM_DATE = S2.CNFM_DATE(+)
	            AND     S1.PROD_CODE = S3.PROD_CODE(+)
	            AND     S1.CNFM_DATE = S3.CNFM_DATE(+)
	            AND     S1.CUST_CODE = S3.CUST_CODE(+)
	            GROUP 
	            BY      S1.CNFM_DATE,
	                    S1.PROD_CODE,            
	                    S1.ITEM_NAME,
	                    S1.CUST_CODE,
	                    S1.CUST_NAME,   
	                    S2.ALLOC_GUBN,
	                    S2.JEJU_GUBN,
	                    S1.STOR_CODE, 
	                    S1.DC_NAME,
	                    S1.DEPT_CODE,
	                    S1.DEPT_NAME,
	                    S1.HAN_NAME,
	                    S3.BIGO,
	                    S3.DEFAULT_CODE_NS    
	            )
	        )T1, ITEM_MST T2        
	WHERE   DECODE(SIGN(T1.ODER_BOX - T1.SELL_BOX),-1,0,T1.ODER_BOX - T1.SELL_BOX) > 0      
	AND     T1.PROD_CODE = T2.ITEM_ID   
	AND		T2.ITYPE LIKE '%'||'$!{item_type}'||'%'
	#if("$!{default_code_ns}" == "")
	AND		(T1.DEFAULT_CODE_NS LIKE '%'||'$!{default_code_ns}'||'%'  OR T1.DEFAULT_CODE_NS IS NULL)
	#else
	AND		T1.DEFAULT_CODE_NS LIKE '%'||'$!{default_code_ns}'||'%'  
	#end
	ORDER
	BY		1,2,4
	
	</query>
	
	<query id="ip_07090_EDI_eCvan_Analysis_pop_list_all2" paging="false">
		
		/* 유통본부 미납 추적분석(농심) POP_ALL 그리드 DW2 */			
	SELECT  T1.CNFM_DATE                                "작업일",
	        T1.PROD_CODE                                "품목코드",
	        T1.ITEM_NAME                                "품목명",
	        T1.CUST_CODE                                "거래처코드",
	        T1.CUST_NAME                                "거래처명",
	        T1.ODER_BOX                                 "주문량",
	        T1.SELL_BOX                                 "판매량",
	        T1.ODER_BOX - T1.SELL_BOX                   "미납량",
	        T1.DEFAULT_CODE_NS                          "사유",
	        T1.STOR_CODE                                "배송지점코드",
	        T1.DC_NAME                                  "배송지점",
	        T1.DEPT_CODE                                "영업지점코드",
	        T1.DEPT_NAME                                "영업지점명",    
	        T1.HAN_NAME                                 "담당자",
	        T1.BIGO                                     "비고" 
	FROM    (    
	        SELECT  CNFM_DATE,
	                ALLOC_GUBN,
	                JEJU_GUBN,                
	                PROD_CODE,
	                ITEM_NAME,
	                CUST_CODE,
	                CUST_NAME,
	                CASE WHEN ALLOC_GUBN ='Y'   --배정품목이면 EDI 발주량이 주문량이다
	                     THEN ODER_BOX
	                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
	                          THEN DECODE(DEPT_CODE,'144',ODER_BOX,ODER_BOX2)
	                          ELSE ODER_BOX2
	                          END
	                END 	ODER_BOX,
	                SELL_BOX,       
	                HS_BOX,
	                DEFAULT_CODE_NS,
	                STOR_CODE,
	                DC_NAME,
	                DEPT_CODE,
	                DEPT_NAME,    
	                HAN_NAME,
	                BIGO                                
	        FROM    (        
	                SELECT  S1.CNFM_DATE,
	                        S1.PROD_CODE,         
	                        S2.ALLOC_GUBN,
	                        S2.JEJU_GUBN,
	                        S1.ITEM_NAME,
	                        S1.CUST_CODE,
	                        S1.CUST_NAME,  
	                        S1.STOR_CODE, 
	                        S1.DC_NAME,
	                        S1.DEPT_CODE,
	                        S1.DEPT_NAME,
	                        S1.HAN_NAME,
	                        SUM(S1.ODER_BOX)   ODER_BOX,
	                        SUM(S1.ODER_BOX2)  ODER_BOX2,       
	                        SUM(S1.SELL_BOX) - SUM(S1.HS_BOX)  SELL_BOX,
	                        SUM(S1.HS_BOX)     HS_BOX,
	                        S3.DEFAULT_CODE_NS,
	                        S3.BIGO
	                FROM    (
	                        /* 주문량 */
	                        SELECT    T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE) DC_NAME,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                SUM(T1.ODER_BOX)    ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT120    T1,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T1.CNFM_DATE    	BETWEEN  '$!{start_date}' AND '$!{end_date}'         
	                        AND     T1.ERR_GUBN    	   != '16'
	                        AND     T1.GRUP_CODE    	= '32'            
	                        AND     T1.CUST_CODE    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	!= '1020073'
	                        AND     T1.CUST_CODE    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG     	= '1000'
	                        AND     T1.CUST_CODE    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T1.PROD_CODE     	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'
	                        AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
	                        GROUP
	                        BY      T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.DEPT_CODE,
	                                T7.HAN_NAME,
	                                T9.DEPT_NAME,
	                                T5.STOR_CODE
	                        /* 판매량 */
	                        UNION ALL 
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                SUM(T3.ODER_BOX)    ODER_BOX2,
	                                SUM(T3.SELL_BOX)    SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	BETWEEN  '$!{start_date}' AND '$!{end_date}'              
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	!= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE  
	                        AND		T2.UPDT_GUBN	   != '00' 
	                        AND		T3.UPDT_GUBN	   != '00'                 
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        UNION ALL
	                        /* 회송량 */                
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                SUM(T3.SELL_BOX)    HS_BOX,                        
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	BETWEEN  '$!{start_date}' AND '$!{end_date}'    
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	!= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND		T2.UPDT_GUBN	   != '00'
	                        AND		T3.UPDT_GUBN	   != '00'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YS%'
	                        AND     T2.REFR_DOC IS  NOT  NULL
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        )S1,
	                        (
	                        SELECT  CNFM_DATE,
	                        		PROD_CODE,
	                                MAX(DECODE(GUBN,'1','Y','')) ALLOC_GUBN,
	                                MAX(DECODE(GUBN,'2','Y','')) JEJU_GUBN
	                        FROM    (
	                                SELECT  CNFM_DATE,
	                                		PROD_CODE,                                
	                                        '1'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   BETWEEN  '$!{start_date}' AND '$!{end_date}'
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE  = '01'
	                                GROUP
	                                BY      CNFM_DATE,
	                                		PROD_CODE
	                                UNION ALL
	                                SELECT  CNFM_DATE,
	                                		PROD_CODE,                                
	                                        '2'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   BETWEEN  '$!{start_date}' AND '$!{end_date}'
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE	= '11'
	                                GROUP
	                                BY      CNFM_DATE,
	                                		PROD_CODE
	                                )
	                        GROUP
	                        BY      CNFM_DATE,
	                        		PROD_CODE
	                        )S2,
	                        (
	                        SELECT	DISTINCT CNFM_DATE,
	                                PROD_CODE,
	                                CUST_CODE,
	                                BIGO,
	                                DEFAULT_CODE_NS
	                        FROM	EDI_DEFAULT_NS
	                        WHERE	CNFM_DATE BETWEEN  '$!{start_date}' AND '$!{end_date}'                        
	                        )S3
	            WHERE   S1.PROD_CODE = S2.PROD_CODE(+)
	            AND		S1.CNFM_DATE = S2.CNFM_DATE(+)
	            AND     S1.PROD_CODE = S3.PROD_CODE(+)
	            AND     S1.CNFM_DATE = S3.CNFM_DATE(+)
	            AND     S1.CUST_CODE = S3.CUST_CODE(+)
	            GROUP 
	            BY      S1.CNFM_DATE,
	                    S1.PROD_CODE,            
	                    S1.ITEM_NAME,
	                    S1.CUST_CODE,
	                    S1.CUST_NAME,   
	                    S2.ALLOC_GUBN,
	                    S2.JEJU_GUBN,
	                    S1.STOR_CODE, 
	                    S1.DC_NAME,
	                    S1.DEPT_CODE,
	                    S1.DEPT_NAME,
	                    S1.HAN_NAME,
	                    S3.BIGO,
	                    S3.DEFAULT_CODE_NS    
	            )
	        )T1, ITEM_MST T2        
	WHERE   DECODE(SIGN(T1.ODER_BOX - T1.SELL_BOX),-1,0,T1.ODER_BOX - T1.SELL_BOX) > 0      
	AND     T1.PROD_CODE = T2.ITEM_ID   
	AND		T2.ITYPE LIKE '%'||'$!{item_type}'||'%'
	#if("$!{default_code_ns}" == "")
	AND		(T1.DEFAULT_CODE_NS LIKE '%'||'$!{default_code_ns}'||'%'  OR T1.DEFAULT_CODE_NS IS NULL)
	#else
	AND		T1.DEFAULT_CODE_NS LIKE '%'||'$!{default_code_ns}'||'%'  
	#end
	ORDER
	BY		1,2,4 
	</query>
		
<!--
=====================================================================================================
 끝  
=====================================================================================================
--> 

</queries>
