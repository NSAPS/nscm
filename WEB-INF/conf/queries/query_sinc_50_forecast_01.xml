<?xml version="1.0" encoding="EUC-KR"?>
<queries>	
     
    <!-- 편차분석(월) By KCKIM -->     
 	<query id="fc_05020_deflectionAnalysisMonthly_tailer" paging="true">
	    #if("$!{recordVar}" == "")
	    #set($recordVar = 0) 
	    #end  
           
	  SELECT /* fc_05020_deflectionAnalysisMonthly_tailer(월)*/
	         HID, HID_NM, ITEM_ID, ITEM_NAME, GUBUN_NM,
	         DECODE(NO,4,M0_NO_Q||'%',M0_NO_Q) M0_NO_Q,
	         DECODE(NO,4,M1_NO_Q||'%',M1_NO_Q) M1_NO_Q,
	         DECODE(NO,4,M2_NO_Q||'%',M2_NO_Q) M2_NO_Q,
	         DECODE(NO,4,M3_NO_Q||'%',M3_NO_Q) M3_NO_Q,
	         DECODE(NO,4,M4_NO_Q||'%',M4_NO_Q) M4_NO_Q,
	         DECODE(NO,4,M5_NO_Q||'%',M5_NO_Q) M5_NO_Q             
	    FROM    
	        (
			SELECT NO,
			       HID            AS HID, 
			       MIN(HID_NM)    AS HID_NM, 
			       ITEM_ID,
			       MIN(ITEM_NAME) AS ITEM_NAME,  
			       MIN(GUBUN_NM)  AS GUBUN_NM,
			       --NO,
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 0), 'YYYYMM') THEN MON.CNT ELSE 0 END) M0_NO_Q, --당월
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 1), 'YYYYMM') THEN MON.CNT ELSE 0 END) M1_NO_Q, --당월+1
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 2), 'YYYYMM') THEN MON.CNT ELSE 0 END) M2_NO_Q, --당월+2
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 3), 'YYYYMM') THEN MON.CNT ELSE 0 END) M3_NO_Q, --당월+3
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 4), 'YYYYMM') THEN MON.CNT ELSE 0 END) M4_NO_Q, --당월+4
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 5), 'YYYYMM') THEN MON.CNT ELSE 0 END) M5_NO_Q  --당월+5
			FROM
			    (   
			    SELECT SALES_LOC, ITEM_ID,  NO, YYYYMM,
		                  --1.판매실적/수요예측(판매실적적중률(예측))
		                  #if ("$!{diff_check2}" == "4")	                  
		                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(예측)') GUBUN_NM,
		                  SUM(
		                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
		                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
		                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
	   	                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR F_QTY = 0 ) THEN 0
	   	                                               WHEN (A_QTY &lt;= F_QTY)       THEN ROUND((A_QTY/F_QTY)*100,1) 
		                                               ELSE ROUND((F_QTY/A_QTY)*100,1)                      
		                                          END
		                       ELSE 0 
		                  END) AS CNT
		                  --2.판매실적/판매계획(판매실적적중률(계획))	                  
		                  #elseif("$!{diff_check3}" == "4")
		                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(계획)') GUBUN_NM,
		                  SUM(
		                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
		                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
		                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
		                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR S_QTY = 0 ) THEN 0
	   	                                               WHEN (A_QTY &lt;= S_QTY)       THEN ROUND((A_QTY/S_QTY)*100,1) 
		                                               ELSE ROUND((S_QTY/A_QTY)*100,1)                                        
		                                          END
		                       ELSE 0 
		                  END) AS CNT
		                  --3.판매계획/수요예측(판매계획적중률)
		                  #else
		                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매계획적중률(예측)') GUBUN_NM,
		                  SUM(
		                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
		                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
		                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
		                       WHEN NO = '4' THEN CASE WHEN (S_QTY = 0 OR F_QTY = 0 ) THEN 0
	   	                                               WHEN (S_QTY &lt;= F_QTY)       THEN ROUND((S_QTY/F_QTY)*100,1) 
		                                               ELSE ROUND((F_QTY/S_QTY)*100,1)                                        
		                                          END
		                       ELSE 0 
		                  END) AS CNT
		                  #end
	  			     FROM     
						(
						   SELECT SALES_LOC, ITEM_ID, YYYYMM,
						          SUM(S_QTY) S_QTY, SUM(F_QTY) F_QTY, SUM(A_QTY) A_QTY
						     FROM
								(
								 ---- NFOS_SALES_PLAN_MONTHLY  ------
								 SELECT SALES_LOC, ITEM_ID, YYYYMM, 
									SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) S_QTY,
									0 F_QTY, 0 A_QTY
								 FROM NFOS_SALES_PLAN_MONTHLY NP
							 #if ("$!{create_month}" == "")				 
								 WHERE NP.YYYYMM BETWEEN '210001' AND '210001' 
							 #else
								 WHERE NP.YYYYMM BETWEEN REPLACE ('$!{create_month}', '-', '')
								 							 AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 5), 'YYYYMM') 				 
							 #end	
							     AND NP.VERSION = 
										           (
											        --월별(MAX_VERSION)
						                            SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_MONTHLY_I01) */
						                                   DISTINCT VERSION
						                             FROM  NFOS_SALES_PLAN_MONTHLY VER
											 		WHERE YYYYMM    = NP.YYYYMM
			      									  AND SEQ       = NP.SEQ
			      									  AND ROWNUM    = 1
						                           )   
							 GROUP BY SALES_LOC, ITEM_ID, YYYYMM             
							 UNION ALL
							     ---- FCST_PLAN_MONTHLY  -----------
								 SELECT DEPT_CODE, PROD_CODE, CNFM_YYMM, 
									0 S_QTY, SUM(FORE_BOX) F_QTY, 0 A_QTY 
								   FROM FCST_PLAN_MONTHLY FCST
							 #if ("$!{create_month}" == "")				 
								 WHERE FCST.CNFM_YYMM BETWEEN '210001' AND '210001' 
							 #else
								 WHERE FCST.CNFM_YYMM BETWEEN REPLACE ('$!{create_month}', '-', '') 
								 						  AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 5), 'YYYYMM') 				 
							 #end
						     GROUP BY DEPT_CODE, PROD_CODE, CNFM_YYMM  
					         UNION ALL  
							      ----- SALES_ACT  -------------------
								  SELECT SALES_LOC, ITEM_ID,  TO_CHAR(ACT.SALE_DATE, 'YYYYMM') SALE_DATE, 
								       0 S_QTY, 0 F_QTY, SUM(QTY) A_QTY 
								  FROM SALES_ACT ACT 
							 #if ("$!{create_month}" == "")				 
								 WHERE ACT.SALE_DATE BETWEEN ADD_MONTHS(TO_DATE('210001','YYYYMM'), 0) 
								 AND ADD_MONTHS(TO_DATE('210001','YYYYMM'), 5) 				 
							 #else
								 WHERE ACT.SALE_DATE BETWEEN ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0) 
								 AND ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 5) 				 
							 #end
							 GROUP BY SALES_LOC, ITEM_ID,  TO_CHAR(ACT.SALE_DATE, 'YYYYMM')	 
						) 
						GROUP BY SALES_LOC, ITEM_ID, YYYYMM  
					    ) A, 
					       (SELECT 1 NO FROM DUAL 
			    			UNION ALL 
			    		    SELECT 2 NO FROM DUAL 
			    			UNION ALL 
			    		    SELECT 3 NO FROM DUAL 
			    			UNION ALL 
			    			SELECT 4 NO FROM DUAL 
					       )B
					    GROUP BY SALES_LOC, ITEM_ID, NO, YYYYMM
					    --ORDER BY SALES_LOC, ITEM_ID, NO, YYYYMM
					    )MON,
					    ( 
					     SELECT IM.ITEM_ID I_ITEM_ID,
						        IM.ITEM_NAME
					       FROM ITEM_MST IM
					     WHERE IM.MADE_TYPE != 'DE' ) IM, 		       
					    (
					       SELECT
							#if ("$!{org_gubun}" == "20")
								   HR3.HID         HID3,
								   HR1.HID         HID ,           --영업본부
								   HR1.HID_NAME    HID_NM,      
								   '0000'          PARENT_HID,     --농심
								   '농심'           PARENT_NM
							#elseif ("$!{org_gubun}" == "30")
								   HR3.HID         HID3,
								   HR2.HID         HID ,           --영업부
								   HR2.HID_NAME    HID_NM,      
								   HR1.HID         PARENT_HID,     --영업본부
								   HR1.HID_NAME    PARENT_NM
							#else
								   HR3.HID         HID,            --영업지점
								   HR3.HID_NAME    HID_NM,      
								   HR2.HID         PARENT_HID,     --영업부
								   HR2.HID_NAME    PARENT_NM     
							#end	                  
							      FROM HRCHY HR1,
								   HRCHY HR2,
								   HRCHY HR3
							    WHERE HR1.HID = HR2.PARENT_HID
							      AND HR2.HID = HR3.PARENT_HID
							      AND HR1.LVL = '20'
							      AND HR2.LVL = '30'
							      AND HR3.LVL = '40'
							      AND HR1.HTYPE = '영업'
							      AND HR2.HTYPE = '영업'
							      AND HR3.HTYPE = '영업' ) SITE,		          
					 #if ("$!{create_month}" == "")
						(
						SELECT  TO_DATE('21000101','YYYYMMDD') MM 
						  FROM  DUAL 
						) DAY_M		 		
				     #else
						(
						SELECT  TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM
						  FROM  DUAL
						) DAY_M  
					#end
			
				    #if (("$!{org_gubun}" == "20") || ("$!{org_gubun}" == "30"))
					WHERE MON.SALES_LOC = SITE.HID3
					#else
					WHERE MON.SALES_LOC = SITE.HID
					#end
			
					AND  IM.I_ITEM_ID     = MON.ITEM_ID
					AND ITEM_ID||ITEM_NAME LIKE '%'||'$!{item_id}'||'%'  
				    #if("$!{org_gubun}" == "40")
					    AND HID LIKE '%'||'$!{sales_org}'||'%'   	 	   
				    #end
					GROUP BY HID, ITEM_ID, NO   
					HAVING NO IN ('1', '2', '3') OR (NO IN('$!{diff_check1}', '$!{diff_check2}', '$!{diff_check3}') AND SUM(CNT) >= TO_NUMBER(${recordVar}))
					ORDER BY HID, ITEM_ID, NO  
			)				
	</query> 

    <!-- 편차분석(월) By KCKIM -->     
 	<query id="fc_05020_deflectionAnalysisMonthly_excel">
	    #if("$!{recordVar}" == "")
	    #set($recordVar = 0) 
	    #end  
            
	  SELECT /* fc_05020_deflectionAnalysisMonthly_tailer(월)*/
	         HID, HID_NM, ITEM_ID, ITEM_NAME
	         /*, GUBUN_NM,
	         DECODE(NO,4,M0_NO_Q||'%',M0_NO_Q) M0_NO_Q,
	         DECODE(NO,4,M1_NO_Q||'%',M1_NO_Q) M1_NO_Q,
	         DECODE(NO,4,M2_NO_Q||'%',M2_NO_Q) M2_NO_Q,
	         DECODE(NO,4,M3_NO_Q||'%',M3_NO_Q) M3_NO_Q,
	         DECODE(NO,4,M4_NO_Q||'%',M4_NO_Q) M4_NO_Q,
	         DECODE(NO,4,M5_NO_Q||'%',M5_NO_Q) M5_NO_Q             
	         */
	    FROM    
	        (
			SELECT NO,
			       HID            AS HID, 
			       MIN(HID_NM)    AS HID_NM, 
			       ITEM_ID,
			       MIN(ITEM_NAME) AS ITEM_NAME,  
			       MIN(GUBUN_NM)  AS GUBUN_NM,
			       --NO,
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 0), 'YYYYMM') THEN MON.CNT ELSE 0 END) M0_NO_Q, --당월
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 1), 'YYYYMM') THEN MON.CNT ELSE 0 END) M1_NO_Q, --당월+1
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 2), 'YYYYMM') THEN MON.CNT ELSE 0 END) M2_NO_Q, --당월+2
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 3), 'YYYYMM') THEN MON.CNT ELSE 0 END) M3_NO_Q, --당월+3
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 4), 'YYYYMM') THEN MON.CNT ELSE 0 END) M4_NO_Q, --당월+4
			       SUM(CASE WHEN MON.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 5), 'YYYYMM') THEN MON.CNT ELSE 0 END) M5_NO_Q  --당월+5
			FROM
			    (   
			    SELECT SALES_LOC, ITEM_ID,  NO, YYYYMM,
		                  --1.판매실적/수요예측(판매실적적중률(예측))
		                  #if ("$!{diff_check2}" == "4")	                  
		                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(예측)') GUBUN_NM,
		                  SUM(
		                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
		                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
		                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
	   	                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR F_QTY = 0 ) THEN 0
													   WHEN (A_QTY &lt;= F_QTY)       THEN ROUND((A_QTY/F_QTY)*100,1) 
	                                             	   ELSE ROUND((F_QTY/A_QTY)*100,1)     
	                              		          END
		                       ELSE 0 
		                  END) AS CNT
		                  --2.판매실적/판매계획(판매실적적중률(계획))	                  
		                  #elseif("$!{diff_check3}" == "4")
		                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(계획)') GUBUN_NM,
		                  SUM(
		                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
		                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
		                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
		                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR S_QTY = 0 ) THEN 0
													   WHEN (A_QTY &lt;= S_QTY)       THEN ROUND((A_QTY/S_QTY)*100,1) 
	                                             	   ELSE ROUND((S_QTY/A_QTY)*100,1)     
	                              		          END
		                       ELSE 0 
		                  END) AS CNT
		                  --3.판매계획/수요예측(판매계획적중률)
		                  #else
		                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매계획적중률(예측)') GUBUN_NM,
		                  SUM(
		                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
		                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
		                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
		                       WHEN NO = '4' THEN CASE WHEN (S_QTY = 0 OR F_QTY = 0 ) THEN 0
													   WHEN (S_QTY &lt;= F_QTY)       THEN ROUND((S_QTY/F_QTY)*100,1) 
	                                             	   ELSE ROUND((F_QTY/S_QTY)*100,1)     
		                                           END
		                       ELSE 0 
		                  END) AS CNT
		                  #end
	  			     FROM     
						(
						   SELECT SALES_LOC, ITEM_ID, YYYYMM,
						          SUM(S_QTY) S_QTY, SUM(F_QTY) F_QTY, SUM(A_QTY) A_QTY
						     FROM
								(
								 ---- NFOS_SALES_PLAN_MONTHLY  ------
								 SELECT SALES_LOC, ITEM_ID, YYYYMM, 
									SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) S_QTY,
									0 F_QTY, 0 A_QTY
								 FROM NFOS_SALES_PLAN_MONTHLY NP
							 #if ("$!{create_month}" == "")				 
								 WHERE NP.YYYYMM BETWEEN '210001' AND '210001' 
							 #else
								 WHERE NP.YYYYMM BETWEEN REPLACE ('$!{create_month}', '-', '')
								 							 AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 5), 'YYYYMM') 				 
							 #end	
							     AND NP.VERSION = 
										           (
											        --월별(MAX_VERSION)
						                            SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_MONTHLY_I01) */
						                                   DISTINCT VERSION
						                             FROM  NFOS_SALES_PLAN_MONTHLY VER
											 		WHERE YYYYMM    = NP.YYYYMM
			      									  AND SEQ       = NP.SEQ
			      									  AND ROWNUM    = 1
						                           )   
							 GROUP BY SALES_LOC, ITEM_ID, YYYYMM             
							 UNION ALL
							     ---- FCST_PLAN_MONTHLY  -----------
								 SELECT DEPT_CODE, PROD_CODE, CNFM_YYMM, 
									0 S_QTY, SUM(FORE_BOX) F_QTY, 0 A_QTY 
								   FROM FCST_PLAN_MONTHLY FCST
							 #if ("$!{create_month}" == "")				 
								 WHERE FCST.CNFM_YYMM BETWEEN '210001' AND '210001' 
							 #else
								 WHERE FCST.CNFM_YYMM BETWEEN REPLACE ('$!{create_month}', '-', '') 
								 						  AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 5), 'YYYYMM') 				 
							 #end
						     GROUP BY DEPT_CODE, PROD_CODE, CNFM_YYMM  
					         UNION ALL  
							      ----- SALES_ACT  -------------------
								  SELECT SALES_LOC, ITEM_ID,  TO_CHAR(ACT.SALE_DATE, 'YYYYMM') SALE_DATE, 
								       0 S_QTY, 0 F_QTY, SUM(QTY) A_QTY 
								  FROM SALES_ACT ACT 
							 #if ("$!{create_month}" == "")				 
								 WHERE ACT.SALE_DATE BETWEEN ADD_MONTHS(TO_DATE('210001','YYYYMM'), 0) 
								 AND ADD_MONTHS(TO_DATE('210001','YYYYMM'), 5) 				 
							 #else
								 WHERE ACT.SALE_DATE BETWEEN ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0) 
								 AND ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 5) 				 
							 #end
							 GROUP BY SALES_LOC, ITEM_ID,  TO_CHAR(ACT.SALE_DATE, 'YYYYMM')	 
						) 
						GROUP BY SALES_LOC, ITEM_ID, YYYYMM  
					    ) A, 
					       (SELECT 1 NO FROM DUAL 
			    			UNION ALL 
			    		    SELECT 2 NO FROM DUAL 
			    			UNION ALL 
			    		    SELECT 3 NO FROM DUAL 
			    			UNION ALL 
			    			SELECT 4 NO FROM DUAL 
					       )B
					    GROUP BY SALES_LOC, ITEM_ID, NO, YYYYMM
					    --ORDER BY SALES_LOC, ITEM_ID, NO, YYYYMM
					    )MON,
					    ( 
					     SELECT IM.ITEM_ID I_ITEM_ID,
						        IM.ITEM_NAME
					       FROM ITEM_MST IM
					     WHERE IM.MADE_TYPE != 'DE' ) IM, 		       
					    (
					       SELECT
							#if ("$!{org_gubun}" == "20")
								   HR3.HID         HID3,
								   HR1.HID         HID ,           --영업본부
								   HR1.HID_NAME    HID_NM,      
								   '0000'          PARENT_HID,     --농심
								   '농심'           PARENT_NM
							#elseif ("$!{org_gubun}" == "30")
								   HR3.HID         HID3,
								   HR2.HID         HID ,           --영업부
								   HR2.HID_NAME    HID_NM,      
								   HR1.HID         PARENT_HID,     --영업본부
								   HR1.HID_NAME    PARENT_NM
							#else
								   HR3.HID         HID,            --영업지점
								   HR3.HID_NAME    HID_NM,      
								   HR2.HID         PARENT_HID,     --영업부
								   HR2.HID_NAME    PARENT_NM     
							#end	                  
							      FROM HRCHY HR1,
								   HRCHY HR2,
								   HRCHY HR3
							    WHERE HR1.HID = HR2.PARENT_HID
							      AND HR2.HID = HR3.PARENT_HID
							      AND HR1.LVL = '20'
							      AND HR2.LVL = '30'
							      AND HR3.LVL = '40'
							      AND HR1.HTYPE = '영업'
							      AND HR2.HTYPE = '영업'
							      AND HR3.HTYPE = '영업' ) SITE,		          
					 #if ("$!{create_month}" == "")
						(
						SELECT  TO_DATE('21000101','YYYYMMDD') MM 
						  FROM  DUAL 
						) DAY_M		 		
				     #else
						(
						SELECT  TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM
						  FROM  DUAL
						) DAY_M  
					#end
			
				    #if (("$!{org_gubun}" == "20") || ("$!{org_gubun}" == "30"))
					WHERE MON.SALES_LOC = SITE.HID3
					#else
					WHERE MON.SALES_LOC = SITE.HID
					#end
			
					AND  IM.I_ITEM_ID     = MON.ITEM_ID
					AND ITEM_ID||ITEM_NAME LIKE '%'||'$!{item_id}'||'%'  
				    #if("$!{org_gubun}" == "40")
					    AND HID LIKE '%'||'$!{sales_org}'||'%'   	 	   
				    #end
					GROUP BY HID, ITEM_ID, NO   
					HAVING NO IN ('1', '2', '3') OR (NO IN('$!{diff_check1}', '$!{diff_check2}', '$!{diff_check3}') AND SUM(CNT) >= TO_NUMBER(${recordVar}))
					ORDER BY HID, ITEM_ID, NO  
			)		 		
	</query> 	
	<!-- 편차분석(주_일) By KCKIM --> 
	<query id="fc_05030_deflectionAnalysisDaily_tailer" paging="true">
	    #if("$!{recordVar}" == "")
	    #set($recordVar = 0) 
	    #end
	     	    
		SELECT /* fc_05030_deflectionAnalysisDaily_tailer(주/일) */ 
		       HID, HID_NM, ITEM_ID, ITEM_NAME, GUBUN_NM,
		       DECODE(NO,4,D0_NO_Q||'%',D0_NO_Q) D0_NO_Q,
		       DECODE(NO,4,D1_NO_Q||'%',D1_NO_Q) D1_NO_Q,
		       DECODE(NO,4,D2_NO_Q||'%',D2_NO_Q) D2_NO_Q,
		       DECODE(NO,4,D3_NO_Q||'%',D3_NO_Q) D3_NO_Q,
		       DECODE(NO,4,D4_NO_Q||'%',D4_NO_Q) D4_NO_Q,
		       DECODE(NO,4,D5_NO_Q||'%',D5_NO_Q) D5_NO_Q,
		       DECODE(NO,4,D6_NO_Q||'%',D6_NO_Q) D6_NO_Q,
		       DECODE(NO,4,D7_NO_Q||'%',D7_NO_Q) D7_NO_Q,
		       DECODE(NO,4,D8_NO_Q||'%',D8_NO_Q) D8_NO_Q,
		       DECODE(NO,4,D9_NO_Q||'%',D9_NO_Q) D9_NO_Q, 
		       DECODE(NO,4,D10_NO_Q||'%',D10_NO_Q) D10_NO_Q,
		       DECODE(NO,4,D11_NO_Q||'%',D11_NO_Q) D11_NO_Q,
		       DECODE(NO,4,D12_NO_Q||'%',D12_NO_Q) D12_NO_Q,
		       DECODE(NO,4,D13_NO_Q||'%',D13_NO_Q) D13_NO_Q,
		       --------------------------------------------          
		       DECODE(NO,4,W2_NO_Q||'%',W2_NO_Q) W2_NO_Q,
		       DECODE(NO,4,W3_NO_Q||'%',W3_NO_Q) W3_NO_Q,
		       DECODE(NO,4,W4_NO_Q||'%',W4_NO_Q) W4_NO_Q,
		       DECODE(NO,4,W5_NO_Q||'%',W5_NO_Q) W5_NO_Q,
		       DECODE(NO,4,W6_NO_Q||'%',W6_NO_Q) W6_NO_Q,
		       DECODE(NO,4,W7_NO_Q||'%',W7_NO_Q) W7_NO_Q,
		       DECODE(NO,4,W8_NO_Q||'%',W8_NO_Q) W8_NO_Q,
		       DECODE(NO,4,W9_NO_Q||'%',W9_NO_Q) W9_NO_Q		       
	    FROM	    
		    ( 
			 SELECT    NO,
					   HID               AS HID,  
					   MIN(HID_NM)       AS HID_NM,    
					   ITEM_ID,      
					   MIN(ITEM_NAME)    AS ITEM_NAME,  
					   MIN(GUBUN_NM)     AS GUBUN_NM, 
					   ---------------------------------------------------------------------------------------------
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD, 'YYYYMMDD')    THEN CNT ELSE 0 END) D0_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+1, 'YYYYMMDD')  THEN CNT ELSE 0 END) D1_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+2, 'YYYYMMDD')  THEN CNT ELSE 0 END) D2_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+3, 'YYYYMMDD')  THEN CNT ELSE 0 END) D3_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+4, 'YYYYMMDD')  THEN CNT ELSE 0 END) D4_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+5, 'YYYYMMDD')  THEN CNT ELSE 0 END) D5_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+6, 'YYYYMMDD')  THEN CNT ELSE 0 END) D6_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+7, 'YYYYMMDD')  THEN CNT ELSE 0 END) D7_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+8, 'YYYYMMDD')  THEN CNT ELSE 0 END) D8_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+9, 'YYYYMMDD')  THEN CNT ELSE 0 END) D9_NO_Q,    --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+10, 'YYYYMMDD') THEN CNT ELSE 0 END) D10_NO_Q,   --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+11, 'YYYYMMDD') THEN CNT ELSE 0 END) D11_NO_Q,   --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+12, 'YYYYMMDD') THEN CNT ELSE 0 END) D12_NO_Q,   --당일
					   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+13, 'YYYYMMDD') THEN CNT ELSE 0 END) D13_NO_Q,   --당일
					   ------------------------------------------------------------------------------------------------		       		       
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*1), 'IYYYIW') THEN CNT ELSE 0 END) W2_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*2), 'IYYYIW') THEN CNT ELSE 0 END) W3_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*3), 'IYYYIW') THEN CNT ELSE 0 END) W4_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*4), 'IYYYIW') THEN CNT ELSE 0 END) W5_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*5), 'IYYYIW') THEN CNT ELSE 0 END) W6_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*6), 'IYYYIW') THEN CNT ELSE 0 END) W7_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*7), 'IYYYIW') THEN CNT ELSE 0 END) W8_NO_Q,    --당주
					   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*8), 'IYYYIW') THEN CNT ELSE 0 END) W9_NO_Q     --당주
				  FROM
				      (
					   SELECT SALES_LOC, ITEM_ID, NO, YYYYWW, YYYYMMDD,	                  
			                  #if ("$!{diff_check2}" == "4")
			                  --판매실적/수요예측(판매실적적중률(예측))                  
			                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(예측)') GUBUN_NM,
			                  SUM(
			                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
			                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
			                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
		   	                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR F_QTY = 0 ) THEN 0
														   WHEN (A_QTY &lt;= F_QTY)       THEN ROUND((A_QTY/F_QTY)*100,1) 
												           ELSE ROUND((F_QTY/A_QTY)*100,1)  
	                                                  END
			                       ELSE 0 
			                  END) AS CNT
			                  --2.판매실적/판매계획(판매실적적중률(계획))	                  
			                  #elseif("$!{diff_check3}" == "4")
			                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(계획)') GUBUN_NM,
			                  SUM(
			                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
			                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
			                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
			                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR S_QTY = 0 ) THEN 0
														   WHEN (A_QTY &lt;= S_QTY)       THEN ROUND((A_QTY/S_QTY)*100,1) 
												           ELSE ROUND((S_QTY/A_QTY)*100,1)     
	                      			                  END
			                       ELSE 0 
			                  END) AS CNT
			                  --3.판매계획/수요예측(판매계획적중률)
			                  #else
			                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매계획적중률(예측)') GUBUN_NM,
			                  SUM(
			                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
			                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
			                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
			                       WHEN NO = '4' THEN CASE WHEN (S_QTY = 0 OR F_QTY = 0 ) THEN 0
														   WHEN (S_QTY &lt;= F_QTY)       THEN ROUND((S_QTY/F_QTY)*100,1) 
											               ELSE ROUND((F_QTY/S_QTY)*100,1)   
	                                            END
			                       ELSE 0 
			                  END) AS CNT
			                  #end
					    FROM
					         (     
						     SELECT SALES_LOC, ITEM_ID, YYYYWW, YYYYMMDD,
								    SUM(S_QTY) S_QTY,
								    SUM(F_QTY) F_QTY,
								    SUM(A_QTY) A_QTY
							   FROM
								  (                      
								   ----------------------------------------------------------------------------------------------
								   /*  판매계획 START */		          
								   SELECT 
										 NF.SALES_LOC, NF.ITEM_ID,
										 NF.YYYYMMDD YYYYMMDD,
										 CAL.YYYYWW YYYYWW, 
										 SUM(NF.QTY) S_QTY,  
										 0 F_QTY,
										 0 A_QTY
								    FROM
										 (  
										 --MAX(VERSION)
										 SELECT NF.YYYY||NF.VERSION VER,
										        NF.SALES_LOC,
										        NF.ITEM_ID, 
										        NF.YYYYMMDD,
										        NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY QTY 
										  FROM NFOS_SALES_PLAN_WEEKLY NF
										   #if("$!{sdate}" == "")
										   WHERE NF.YYYYMMDD BETWEEN '21000101' AND '21000101'	          
										   #else  		    
										   WHERE NF.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
													 AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     		          
										   #end		    
										   	 AND NF.VERSION  = (
										   	                    -- SUB(TABLE) YYYYMMDD,SEQ와 MAIN(TABLE)의 YYYYMMDD, SEQ를 연결
															    SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
															            DISTINCT VERSION
																 FROM   NFOS_SALES_PLAN_WEEKLY VER
																#if("$!{sdate}" == "")
																 WHERE VER.YYYYMMDD BETWEEN '21000101' AND '21000101'					
																#else
																 WHERE VER.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
																			AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     						
																#end
																  AND VER.YYYYMMDD  = NF.YYYYMMDD
																  AND VER.SEQ       = NF.SEQ  
																  AND ROWNUM        = 1                       
																) 
									  ) NF, CAL_MST CAL                                  
								  WHERE NF.YYYYMMDD = CAL.YYYYMMDD
								  GROUP BY SALES_LOC, ITEM_ID, NF.YYYYMMDD, YYYYWW      
								   /*  판매계획 END */ 
								   ---------------------------------------------------------------------------------------------------			                        
								   UNION ALL  
								   ---------------------------------------------------------------------------------------------------
								  /*  수요계획 START */
								   SELECT DEPT_CODE, PROD_CODE, YYYYMMDD, WW,
									  SUM(S_QTY) S_QTY,
									  SUM(F_QTY) F_QTY,
									  SUM(A_QTY) A_QTY 
								     FROM    
									(
									SELECT 
									      FCST.CNFM_DATE YYYYMMDD,
									      CAL.YYYYWW WW,
									      DEPT_CODE, PROD_CODE, 
									      0 S_QTY, 
									      FORE_BOX F_QTY,
									      0 A_QTY
									FROM FCST_PLAN_WEEKLY FCST, CAL_MST CAL
									WHERE FCST.CNFM_DATE = CAL.YYYYMMDD 	
									#if("$!{sdate}" == "")
									  AND FCST.CNFM_DATE BETWEEN '21000101' AND '21000101'      
									#else  		    
									  AND FCST.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
									  AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD') 
									#end			
									)
								   GROUP BY DEPT_CODE, PROD_CODE, YYYYMMDD, WW            
								  /*  수요계획 END   */   
								  ---------------------------------------------------------------------------------------------------			                        
								  UNION ALL   					                
								  ---------------------------------------------------------------------------------------------------
								  /*  판매실적 START */
								  SELECT 
									SALES_LOC, ITEM_ID,
									YYYYMMDD,
									YYYYWW,                                   		                       
									0 S_QTY, 0 F_QTY, 
									SUM(QTY) A_QTY 
								       FROM CAL_MST CAL, SALES_ACT ACT 
								      WHERE CAL.CAL_DATE = ACT.SALE_DATE        		               
								  #if("$!{sdate}" == "")
								       AND ACT.SALE_DATE BETWEEN NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2) 
								       AND NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1)        
								  #else  		    
								       AND ACT.SALE_DATE BETWEEN NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2) 
								       AND NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1)
								  #end  					  
								  GROUP BY SALES_LOC, ITEM_ID, YYYYMMDD, YYYYWW
								  /*  판매실적 END */
								  ---------------------------------------------------------------------------------------------------
						   )  
					GROUP BY SALES_LOC, ITEM_ID, YYYYWW, YYYYMMDD     
				)A,
			   ( SELECT 1 NO FROM DUAL 
				 UNION 
				 SELECT 2 NO FROM DUAL 
				 UNION 
				 SELECT 3 NO FROM DUAL 
				 UNION
				 SELECT 4 NO FROM DUAL 
				)B
				GROUP BY SALES_LOC, ITEM_ID, NO, YYYYWW, YYYYMMDD
				)MAIN,		        		           
			   (
				 SELECT IM.ITEM_ID I_ITEM_ID,
					    IM.ITEM_NAME
				   FROM ITEM_MST IM
				 WHERE IM.MADE_TYPE != 'DE' ) IM ,
			    (
				 SELECT
				#if ("$!{org_gubun}" == "20")
				   HR3.HID         HID3,
				   HR1.HID         HID ,           --영업본부
				   HR1.HID_NAME    HID_NM,      
				   '0000'          PARENT_HID,     --농심
				   '농심'           PARENT_NM
				#elseif ("$!{org_gubun}" == "30")
				   HR3.HID         HID3,
				   HR2.HID         HID ,           --영업부
				   HR2.HID_NAME    HID_NM,      
				   HR1.HID         PARENT_HID,     --영업본부
				   HR1.HID_NAME    PARENT_NM
				#else
				   HR3.HID         HID,            --영업지점
				   HR3.HID_NAME    HID_NM,      
				   HR2.HID         PARENT_HID,     --영업부
				   HR2.HID_NAME    PARENT_NM     
				#end	                  
			      FROM HRCHY HR1,
				   HRCHY HR2,
				   HRCHY HR3
			    WHERE HR1.HID = HR2.PARENT_HID
			      AND HR2.HID = HR3.PARENT_HID
			      AND HR1.LVL = '20'
			      AND HR2.LVL = '30'
			      AND HR3.LVL = '40'
			      AND HR1.HTYPE = '영업'
			      AND HR2.HTYPE = '영업'
			      AND HR3.HTYPE = '영업' ) SITE,
			    #if ("$!{sdate}" == "") 
			       (
				    SELECT TO_DATE('21000101', 'YYYYMMDD') DD,
					     NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2) WW
				    FROM DUAL         			           
			       )DAY_WW
			    #else  
			       (
				  SELECT  
					 NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')-7, 2) DD,
					 NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')  , 2) WW 		         
				    FROM DUAL         			            
			       )DAY_WW 
			    #end
	 		
		 #if (("$!{org_gubun}" == "20") || ("$!{org_gubun}" == "30"))
		 WHERE MAIN.SALES_LOC = SITE.HID3
		 #else
		 WHERE MAIN.SALES_LOC = SITE.HID
		 #end			
		 AND  IM.I_ITEM_ID     = MAIN.ITEM_ID
		 AND  ITEM_ID||ITEM_NAME LIKE '%'||'$!{item_id}'||'%'  
		 
		 #if("$!{org_gubun}" == "40")
		 AND HID LIKE '%'||'$!{sales_org}'||'%'   	 	   
		 #end 
		 GROUP BY HID, ITEM_ID, NO    
		 HAVING NO IN ('1', '2', '3') OR (NO IN('$!{diff_check1}', '$!{diff_check2}', '$!{diff_check3}') AND SUM(CNT) >= TO_NUMBER(${recordVar}))
		 ORDER BY HID, ITEM_ID, NO  
		 )
 	</query>  

    <!-- 편차분석(주간) By KCKIM -->                      
	<query id="fc_05040_deflectionAnalysisWeekly_tailer" paging="true">

	    #if("$!{recordVar}" == "")
	    #set($recordVar = 0) 
	    #end
		SELECT /* fc_05040_deflectionAnalysisWeekly_tailer(주) */  
		       HID, HID_NM, ITEM_ID, ITEM_NAME, GUBUN_NM, 
		       DECODE(NO,4,D0_NO_Q||'%',D0_NO_Q) D0_NO_Q,
		       DECODE(NO,4,D1_NO_Q||'%',D1_NO_Q) D1_NO_Q,
		       DECODE(NO,4,D2_NO_Q||'%',D2_NO_Q) D2_NO_Q,
		       DECODE(NO,4,D3_NO_Q||'%',D3_NO_Q) D3_NO_Q,
		       DECODE(NO,4,D4_NO_Q||'%',D4_NO_Q) D4_NO_Q,
		       DECODE(NO,4,D5_NO_Q||'%',D5_NO_Q) D5_NO_Q,
		       DECODE(NO,4,D6_NO_Q||'%',D6_NO_Q) D6_NO_Q,
		       DECODE(NO,4,D7_NO_Q||'%',D7_NO_Q) D7_NO_Q,
		       DECODE(NO,4,D8_NO_Q||'%',D8_NO_Q) D8_NO_Q,
		       DECODE(NO,4,D9_NO_Q||'%',D9_NO_Q) D9_NO_Q, 
		       DECODE(NO,4,D10_NO_Q||'%',D10_NO_Q) D10_NO_Q,
		       DECODE(NO,4,D11_NO_Q||'%',D11_NO_Q) D11_NO_Q,
		       DECODE(NO,4,D12_NO_Q||'%',D12_NO_Q) D12_NO_Q,
		       DECODE(NO,4,D13_NO_Q||'%',D13_NO_Q) D13_NO_Q,
		       --------------------------------------------          
		       DECODE(NO,4,W2_NO_Q||'%',W2_NO_Q) W2_NO_Q,
		       DECODE(NO,4,W3_NO_Q||'%',W3_NO_Q) W3_NO_Q,
		       DECODE(NO,4,W4_NO_Q||'%',W4_NO_Q) W4_NO_Q,
		       DECODE(NO,4,W5_NO_Q||'%',W5_NO_Q) W5_NO_Q,
		       DECODE(NO,4,W6_NO_Q||'%',W6_NO_Q) W6_NO_Q,
		       DECODE(NO,4,W7_NO_Q||'%',W7_NO_Q) W7_NO_Q,
		       DECODE(NO,4,W8_NO_Q||'%',W8_NO_Q) W8_NO_Q,
		       DECODE(NO,4,W9_NO_Q||'%',W9_NO_Q) W9_NO_Q
		FROM	    
	    ( 
		SELECT NO,  
			   HID               AS HID,  
			   MIN(HID_NM)       AS HID_NM,    
			   ITEM_ID,      
			   MIN(ITEM_NAME)    AS ITEM_NAME, 
			   MIN(GUBUN_NM)     AS GUBUN_NM, 
			   ---------------------------------------------------------------------------------------------
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD,    'YYYYMMDD') THEN CNT ELSE 0 END) D0_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+1,  'YYYYMMDD') THEN CNT ELSE 0 END) D1_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+2,  'YYYYMMDD') THEN CNT ELSE 0 END) D2_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+3,  'YYYYMMDD') THEN CNT ELSE 0 END) D3_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+4,  'YYYYMMDD') THEN CNT ELSE 0 END) D4_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+5,  'YYYYMMDD') THEN CNT ELSE 0 END) D5_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+6,  'YYYYMMDD') THEN CNT ELSE 0 END) D6_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+7,  'YYYYMMDD') THEN CNT ELSE 0 END) D7_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+8,  'YYYYMMDD') THEN CNT ELSE 0 END) D8_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+9,  'YYYYMMDD') THEN CNT ELSE 0 END) D9_NO_Q,    --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+10, 'YYYYMMDD') THEN CNT ELSE 0 END) D10_NO_Q,   --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+11, 'YYYYMMDD') THEN CNT ELSE 0 END) D11_NO_Q,   --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+12, 'YYYYMMDD') THEN CNT ELSE 0 END) D12_NO_Q,   --당일
			   SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_WW.DD+13, 'YYYYMMDD') THEN CNT ELSE 0 END) D13_NO_Q,   --당일
			   ------------------------------------------------------------------------------------------------		       		       
		
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*1), 'IYYYIW') THEN CNT ELSE 0 END) W2_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*2), 'IYYYIW') THEN CNT ELSE 0 END) W3_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*3), 'IYYYIW') THEN CNT ELSE 0 END) W4_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*4), 'IYYYIW') THEN CNT ELSE 0 END) W5_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*5), 'IYYYIW') THEN CNT ELSE 0 END) W6_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*6), 'IYYYIW') THEN CNT ELSE 0 END) W7_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*7), 'IYYYIW') THEN CNT ELSE 0 END) W8_NO_Q,  --당주
			   SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*8), 'IYYYIW') THEN CNT ELSE 0 END) W9_NO_Q   --당주
		   FROM
			   ( 
			   SELECT SALES_LOC, ITEM_ID, NO, YYYYWW, YYYYMMDD,	                  
	                  #if ("$!{diff_check2}" == "4")	
	                  --판매실적/수요예측(판매실적적중률(예측))                  
	                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(예측)') GUBUN_NM,
	                  SUM(
	                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
	                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
	                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
   	                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR F_QTY = 0 ) THEN 0
												   WHEN (A_QTY &lt;= F_QTY)       THEN ROUND((A_QTY/F_QTY)*100,1) 
									               ELSE ROUND((F_QTY/A_QTY)*100,1)  
	                                          END
	                       ELSE 0 
	                  END) AS CNT
	                  --2.판매실적/판매계획(판매실적적중률(계획))	                  
	                  #elseif("$!{diff_check3}" == "4")
	                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매실적적중률(계획)') GUBUN_NM,
	                  SUM(
	                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
	                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
	                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
	                       WHEN NO = '4' THEN CASE WHEN (A_QTY = 0 OR S_QTY = 0 ) THEN 0
												   WHEN (A_QTY &lt;= S_QTY)       THEN ROUND((A_QTY/S_QTY)*100,1) 
									               ELSE ROUND((S_QTY/A_QTY)*100,1)
									          END
	                       ELSE 0 
	                  END) AS CNT
	                  --3.판매계획/수요예측(판매계획적중률)
	                  #else
	                  DECODE(NO, '1', '수요예측', '2', '판매계획', '3', '판매실적','4','판매계획적중률(예측)') GUBUN_NM,
	                  SUM(
	                  CASE WHEN NO = '1' THEN F_QTY  --수요예측 cnt
	                       WHEN NO = '2' THEN S_QTY  --판매계획 cnt
	                       WHEN NO = '3' THEN A_QTY  --판매실적 cnt
	                       WHEN NO = '4' THEN CASE WHEN (S_QTY = 0 OR F_QTY = 0 ) THEN 0
												   WHEN (S_QTY &lt;= F_QTY)       THEN ROUND((S_QTY/F_QTY)*100,1) 
									               ELSE ROUND((F_QTY/S_QTY)*100,1)
	                                           END
	                       ELSE 0 
	                  END) AS CNT
	                  #end
			    FROM
				(     
				  SELECT SALES_LOC, ITEM_ID, YYYYWW, YYYYMMDD,
					 SUM(S_QTY) S_QTY,
					 SUM(F_QTY) F_QTY,
					 SUM(A_QTY) A_QTY
				    FROM
					(                      
					   ----------------------------------------------------------------------------------------------
					   /*  판매계획 START */		          
						   SELECT 
							 NF.SALES_LOC, NF.ITEM_ID,
							 NF.YYYYMMDD YYYYMMDD,
							 CAL.YYYYWW YYYYWW, 
							 SUM(NF.QTY) S_QTY,  
							 0 F_QTY,
							 0 A_QTY
						    FROM
							( 
							--MAX(VERSION) 
							SELECT NF.YYYY||NF.VERSION VER,
							       NF.SALES_LOC,
							       NF.ITEM_ID, 
							       NF.YYYYMMDD,
							       NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY QTY 
							FROM NFOS_SALES_PLAN_WEEKLY NF
							#if("$!{sdate}" == "")
							 WHERE NF.YYYYMMDD BETWEEN '21000101' AND '21000101'						
							#else
							 WHERE NF.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 2), 'YYYYMMDD') 
											       AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     						
							#end					       
							  AND NF.VERSION  = (
												    SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */ 
    										        	   DISTINCT VERSION
													 FROM   NFOS_SALES_PLAN_WEEKLY VER
													#if("$!{sdate}" == "")
													 WHERE VER.YYYYMMDD BETWEEN '21000101'AND '21000101'							
													#else
													 WHERE VER.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 2), 'YYYYMMDD') 
																AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     						
													#end					       
													  AND VER.YYYYMMDD  = NF.YYYYMMDD
													  AND VER.SEQ       = NF.SEQ  
													  AND ROWNUM = 1                        
												  )
							 UNION ALL
							--MAX(VERSION)-1
							SELECT YYYY||VERSION,
							       SALES_LOC,
							       ITEM_ID,
							       YYYYMMDD,
							       NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY QTY 
							FROM NFOS_SALES_PLAN_WEEKLY NF
							
							#if("$!{sdate}" == "") 
							 WHERE YYYYMMDD BETWEEN '21000101' AND '21000101'							
							#else
							 WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-(7+0), 2), 'YYYYMMDD') 
										AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 1), 'YYYYMMDD')		                     						
							#end
							   AND VERSION = (
											 SELECT /*+ INDEX_DESC(SUB, NFOS_SALES_PLAN_WEEKLY_INDEX01) */ 
											        DISTINCT VERSION-1
											  FROM NFOS_SALES_PLAN_WEEKLY SUB
											#if("$!{sdate}" == "")
											 WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
														AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')							
											#else
											 WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-(7+0), 2), 'YYYYMMDD') 
														AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 1), 'YYYYMMDD')		                     						
											#end
											 AND YYYYMMDD = NF.YYYYMMDD
											 AND SEQ      = NF.SEQ
											 AND ROWNUM = 1 
										   )		                        		                         
							  ) NF, CAL_MST CAL
						 WHERE NF.YYYYMMDD = CAL.YYYYMMDD
						 GROUP BY SALES_LOC, ITEM_ID, NF.YYYYMMDD, YYYYWW      
						/*  판매계획 END */ 
				---------------------------------------------------------------------------------------------------			                        
				UNION ALL 				
				---------------------------------------------------------------------------------------------------
				/*  수요계획 START */
			    <!-- 
			    	1. 수요예측 생성시 SCM_FC.FCST_MAST에 FCST_CODE가 생성됨
			    	    (생성된 날짜(GEN_DATE)와  확정된 버전(FCST_CODE)을 찾을 수 있슴)
			    	2.  매주 화요일 주간 수요예측 데이터를 생성 시킴. 
			            2-1. 수요예측 코드      (FCST_CODE)    : 'WC08100601'
			            2-2. 수요예측 생성일   (GEN_DATE)     : '20081007' (화)
			            2-3. 수요예측일          (FCST_DATE)    : '20081006' (월)
			        3. 수요예측(주간)의 첫째주는 전주에 확정 생성한 최종 버전에 해당하는 수요예측을 보여준다.
			            PI 김무영D 요청      	
			    --> 
 				SELECT DEPT_CODE, PROD_CODE, YYYYMMDD, WW, 
				       SUM(S_QTY) S_QTY,
				       SUM(F_QTY) F_QTY,
				       SUM(A_QTY) A_QTY 
				 FROM    
					 (
					  --차주(일별)주간조회(수요예측) 
					  SELECT 
						   FCST.CNFM_DATE YYYYMMDD,
						   CAL.YYYYWW WW,
						   DEPT_CODE, PROD_CODE, 
						   0 S_QTY, 
						   FORE_BOX F_QTY,
						   0 A_QTY
					  FROM FCST_PLAN_WEEKLY FCST, CAL_MST CAL
					  WHERE FCST.CNFM_DATE = CAL.YYYYMMDD 	
					#if("$!{sdate}" == "")
					   AND FCST.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
								  AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')        
					#else  		    
					   AND FCST.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 2), 'YYYYMMDD') 
								  AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD') 
					#end			
					  UNION ALL 
					  --당주(일별)주간조회(수요예측)
					  SELECT -- FCST.FCST_CODE,
						 FCST.FCST_DATE YYYYMMDD,		                   
						 CAL.YYYYWW WW,
						 SITE_CODE, ITEM_CODE, 
						 0 S_QTY, 
						 ROUND(FCST_QTY,0) F_QTY,
						 0 A_QTY
					   FROM SCM_FC.FCST_PLAN_WEEKLY FCST, TMETA.CAL_MST CAL
					  WHERE FCST.FCST_DATE = CAL.CAL_DATE  
					#if("$!{sdate}" == "")
					   AND FCST.FCST_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
								 AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')        
					#else  		    
					   AND FCST.FCST_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-(7+0), 2), 'YYYYMMDD') 
								  AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 1), 'YYYYMMDD') 
					#end  
					    AND FCST.FCST_CODE =   
								  (
								      SELECT /*+ INDEX_DESC(M, FCST_MAST_INDEX01) */
									         DISTINCT FCST_CODE
									  FROM SCM_FC.FCST_MAST M
								     #if("$!{sdate}" == "")
								      WHERE GEN_DATEE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
										 				  AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')        
							         #else  		    
								      WHERE GEN_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-(7*2), 2), 'YYYYMMDD') 
										         		 AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-(7*1), 1), 'YYYYMMDD') 
								     #end			
								      AND OPER_TYPE = 'WCONF'
								      AND ROWNUM = 1
								   ) 
					  ) 
				 GROUP BY DEPT_CODE, PROD_CODE, YYYYMMDD, WW            
				 /*  수요계획 END   */   
				 ---------------------------------------------------------------------------------------------------			                        
				 UNION ALL   					                
				 ---------------------------------------------------------------------------------------------------
				/*  판매실적 START */
				 SELECT 
					SALES_LOC, ITEM_ID,
					YYYYMMDD,
					YYYYWW,                                   		                       
					0 S_QTY, 0 F_QTY, 
					SUM(QTY) A_QTY 
				  FROM CAL_MST CAL, SALES_ACT ACT 
				 WHERE CAL.CAL_DATE = ACT.SALE_DATE        		               
			      #if("$!{sdate}" == "")
			         AND ACT.SALE_DATE BETWEEN NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2) 
			         AND NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1)        
			      #else  		    
			         AND ACT.SALE_DATE BETWEEN NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2) 
			         AND NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1)
			      #end  					  
				 GROUP BY SALES_LOC, ITEM_ID, YYYYMMDD, YYYYWW
				/*  판매실적 END */
				---------------------------------------------------------------------------------------------------
			       )  
		        GROUP BY SALES_LOC, ITEM_ID, YYYYWW, YYYYMMDD     
			)A,
			(SELECT 1 NO FROM DUAL 
			  UNION 
			 SELECT 2 NO FROM DUAL 
			  UNION 
			 SELECT 3 NO FROM DUAL 
			  UNION 
			 SELECT 4 NO FROM DUAL 
			)B 
		       GROUP BY SALES_LOC, ITEM_ID, NO, YYYYWW, YYYYMMDD
			)MAIN,		        		           
		       (
			 SELECT IM.ITEM_ID I_ITEM_ID,
				IM.ITEM_NAME
			   FROM ITEM_MST IM
			 WHERE IM.MADE_TYPE != 'DE' ) IM ,
		      (
			 SELECT
			#if ("$!{org_gubun}" == "20")
			   HR3.HID         HID3,
			   HR1.HID         HID ,           --영업본부
			   HR1.HID_NAME    HID_NM,      
			   '0000'          PARENT_HID,     --농심
			   '농심'           PARENT_NM
			#elseif ("$!{org_gubun}" == "30")
			   HR3.HID         HID3,
			   HR2.HID         HID ,           --영업부
			   HR2.HID_NAME    HID_NM,      
			   HR1.HID         PARENT_HID,     --영업본부
			   HR1.HID_NAME    PARENT_NM
			#else
			   HR3.HID         HID,            --영업지점
			   HR3.HID_NAME    HID_NM,      
			   HR2.HID         PARENT_HID,     --영업부
			   HR2.HID_NAME    PARENT_NM     
			#end	                  
		      FROM HRCHY HR1,
			   HRCHY HR2,
			   HRCHY HR3
		    WHERE HR1.HID = HR2.PARENT_HID
		      AND HR2.HID = HR3.PARENT_HID
		      AND HR1.LVL = '20'
		      AND HR2.LVL = '30'
		      AND HR3.LVL = '40'
		      AND HR1.HTYPE = '영업'
		      AND HR2.HTYPE = '영업'
		      AND HR3.HTYPE = '영업' ) SITE,
		    #if ("$!{sdate}" == "") 
		       (
			  SELECT TO_DATE('21000101', 'YYYYMMDD') DD,
				 NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2) WW
			    FROM DUAL         			           
		       )DAY_WW
		    #else  
		       (
			  SELECT 
				 NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')-7, 2) DD,
				 NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'),   2) WW 		         
			    FROM DUAL         			            
		       )DAY_WW 
		    #end
		
		#if (("$!{org_gubun}" == "20") || ("$!{org_gubun}" == "30"))
		 WHERE MAIN.SALES_LOC = SITE.HID3
		#else
		 WHERE MAIN.SALES_LOC = SITE.HID
		#end			
		 AND  IM.I_ITEM_ID     = MAIN.ITEM_ID 
		 AND  ITEM_ID||ITEM_NAME LIKE '%'||'$!{item_id}'||'%'  
		#if("$!{org_gubun}" == "40")
		 AND HID LIKE '%'||'$!{sales_org}'||'%'   	 	    
		#end 
		 GROUP BY HID, ITEM_ID, NO    
		 HAVING NO IN ('1', '2', '3') OR (NO IN('$!{diff_check1}', '$!{diff_check2}', '$!{diff_check3}') AND SUM(CNT) >= TO_NUMBER(${recordVar}))
		 ORDER BY HID, ITEM_ID, NO  
		) 
 	</query> 
	<!-- 편차분석  END --> 
	 
	<query id="fc_05050_majorItemSalesTrend_tailer" paging="true">      
	    #if ("$!{periodGB2}" == "")		 
		--------------------------
		/* MONTHLY START */
		--------------------------
        SELECT /* fc_05050_majorItemSalesTrend_tailer(MONTHLY)*/
               PROD_CODE,
	       	   ITEM_NAME,
	       	   GUBUN_NM,
		       DECODE(NO,3,TO_CHAR(MAX_QTY,'999,999,999')||'%',MAX_QTY) MAX_QTY,
		       DECODE(NO,3,TO_CHAR(AVG_QTY,'999,999,999')||'%',AVG_QTY) AVG_QTY,
		       DECODE(NO,3,TO_CHAR(STD_QTY,'999,999,999')||'%',STD_QTY) STD_QTY,
		       DECODE(NO,3,TO_CHAR(SUM_QTY,'999,999,999')||'%',SUM_QTY) SUM_QTY,
		       -----------------------------------------
		       DECODE(NO,3,TO_CHAR(M0_NO_Q,'999,999,999')||'%', M0_NO_Q) M0_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M1_NO_Q,'999,999,999')||'%', M1_NO_Q) M1_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M2_NO_Q,'999,999,999')||'%', M2_NO_Q) M2_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M3_NO_Q,'999,999,999')||'%', M3_NO_Q) M3_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M4_NO_Q,'999,999,999')||'%', M4_NO_Q) M4_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M5_NO_Q,'999,999,999')||'%', M5_NO_Q) M5_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M6_NO_Q,'999,999,999')||'%', M6_NO_Q) M6_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M7_NO_Q,'999,999,999')||'%', M7_NO_Q) M7_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M8_NO_Q,'999,999,999')||'%', M8_NO_Q) M8_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M9_NO_Q,'999,999,999')||'%', M9_NO_Q) M9_NO_Q,     
		       DECODE(NO,3,TO_CHAR(M10_NO_Q,'999,999,999')||'%',M10_NO_Q) M10_NO_Q,   
		       DECODE(NO,3,TO_CHAR(M11_NO_Q,'999,999,999')||'%',M11_NO_Q) M11_NO_Q	 
        FROM		   
			(	
			 SELECT 
			       PROD_CODE, ITEM_NAME,  
			       NO,   
			       --YYYYMM,
			       MIN(GUBUN_NM)   GUBUN_NM, 
			       MAX(MAX_QTY)    MAX_QTY,  
			       MAX(AVG_QTY)    AVG_QTY, 
			       MAX(STD_QTY)    STD_QTY, 
			       SUM(SUM_QTY)    SUM_QTY, 
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 0),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M0_NO_Q, --당월    
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 1),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M1_NO_Q, --당월+1  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 2),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M2_NO_Q, --당월+2  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 3),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M3_NO_Q, --당월+3  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 4),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M4_NO_Q, --당월+4  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 5),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M5_NO_Q, --당월+5  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 6),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M6_NO_Q, --당월+6  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 7),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M7_NO_Q, --당월+7  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 8),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M8_NO_Q, --당월+8  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 9),  'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M9_NO_Q, --당월+9  
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 10), 'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M10_NO_Q,--당월+10 
			       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 11), 'YYYYMM') THEN A.SUM_QTY ELSE 0 END) M11_NO_Q --당월+11				
			 FROM		
			    (
				 SELECT
						PROD_CODE,
			            YYYYMM,
			            NO,
			            MIN(GUBUN_NM)   GUBUN_NM,
			            MAX(MAX_QTY) MAX_QTY,
			            MAX(AVG_QTY) AVG_QTY,
			            MAX(STD_QTY) STD_QTY, 				             
			            SUM(SUM_QTY) SUM_QTY
				FROM
				    (
				    SELECT PROD_CODE, 
				           YYYYMM, 
				           NO,  
				           --1.$!{checked_site1}
				           --2.$!{checked_site2}
				           --3.$!{martName}   
				           --4.$!{checked_uom} 
				            
				           #if (("$!{checked_site1}" == "Y"))
				           DECODE(NO,1,'농심매출',2,decode('$!{customer_name}','','거래처전체','$!{customer_name}')
				                               ,3,'판매비율(%)') GUBUN_NM,	           
				           #elseif("$!{checked_site2}" == "Y")			           	           
				           DECODE(NO,1,'농심매출',2,decode('$!{martName}', '','본부전체','$!{martName}')
				                                ,3,'판매비율(%)') GUBUN_NM,		
				           #else          
				           DECODE(NO,1,'농심매출',2,'거래처/본부매출',3,'판매비율(%)') GUBUN_NM,		           		                      
				           #end
				           (CASE NO WHEN 1 THEN SUM_T_QTY
				                    WHEN 2 THEN SUM_S_QTY
						            WHEN 3 THEN CASE WHEN (SUM(SUM_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               SUM(SUM_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                              /SUM(SUM_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                            )*100,1)	
		            				             	 ELSE 0
		            				             END           			                              
						    END
						   ) SUM_QTY,
				           (CASE NO WHEN 1 THEN MAX_T_QTY
				                    WHEN 2 THEN MAX_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(MAX_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(MAX_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                              /MAX(MAX_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                            )*100,1)	
		            				                 ELSE 0           
		            				             END           			                             
						    END
						   ) MAX_QTY,        
				           (CASE NO WHEN 1 THEN AVG_T_QTY
				                    WHEN 2 THEN AVG_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(AVG_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(AVG_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                              /MAX(AVG_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                            )*100,1)	
		            				                 ELSE 0          
		            				             END           			                             
						    END
						   ) AVG_QTY,      
				           (CASE NO WHEN 1 THEN STD_T_QTY
				                    WHEN 2 THEN STD_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(STD_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(STD_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                              /MAX(STD_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYMM, NO)
		            				                            )*100,1)	
		            				                  ELSE 0          
		            				             END           			                             
						    END
						   ) STD_QTY          
				    FROM      
				        (
					    SELECT PROD_CODE, YYYYMM,
						   MAX(SUM_T_QTY)             SUM_T_QTY,
						   MAX(MAX_T_QTY)             MAX_T_QTY,
						   MAX(AVG_T_QTY)             AVG_T_QTY,
						   MAX(STD_T_QTY)             STD_T_QTY,
						   SUM(SUM_S_QTY)             SUM_S_QTY,
						   MAX(MAX_S_QTY)             MAX_S_QTY,
						   ROUND(MAX(AVG_S_QTY),1)    AVG_S_QTY,
						   ROUND(MAX(STD_S_QTY),1)    STD_S_QTY
					    FROM
						( 
						  SELECT *
						    FROM
							(
							-- '거래처' (1)는 파라미터로 받고, '거래처' (2) 는 DEFAULT 조회조건의 파마미터의 값을 정의
							SELECT DECODE('$!{checked_site1}','Y', CUST_CODE, GRUP_CODE1) CUST_CD, --거래처/본부 선택
							       DECODE('$!{checked_site1}','Y', CUST_NAME, CD_NAME)    CUST_NM, --거래처/본부 선택
							       PROD_CODE,
							       YYYYMM, 
							       --1. 농심전체
							       SUM(SUM(QTY)) OVER(PARTITION BY PROD_CODE, YYYYMM)                  SUM_T_QTY,
							       MAX(MAX(QTY)) OVER(PARTITION BY PROD_CODE, YYYYMM)                  MAX_T_QTY,
							       ROUND(MAX(AVG(QTY)) OVER(PARTITION BY PROD_CODE, YYYYMM),1)         AVG_T_QTY,
							       ROUND(MAX(STDDEV(QTY)) OVER(PARTITION BY PROD_CODE, YYYYMM),1)      STD_T_QTY,
							       --2. 거래처별
							       SUM(QTY)                              SUM_S_QTY,
							       MAX(QTY)                              MAX_S_QTY,
							       ROUND(AVG(QTY),1)                     AVG_S_QTY,
							       ROUND(STDDEV(QTY),1)                  STD_S_QTY 
							FROM
							    (
							    --거래처별 실적 데이터 SET
							    SELECT SDR.PROD_CODE PROD_CODE,
								   SDR.CUST_CODE CUST_CODE,		                               
								   TO_CHAR(TO_DATE(SDR.CNFM_DATE, 'YYYYMMDD'), 'YYYYMM') YYYYMM,
								   DECODE('cnt','amount', SDR.SUPL_AMT, SDR.SELL_BOX) QTY
							    FROM SDRDT103  SDR
							    WHERE SDR.SELL_GUBN_CODE IN ('01', '02')
								    #if ("$!{create_month}" == "")
								      AND SDR.CNFM_DATE BETWEEN '210001'
								      AND TO_CHAR(ADD_MONTHS(TO_DATE('21000101', 'YYYYMMDD'), 11), 'YYYYMM') 
								    #else
								      AND SDR.CNFM_DATE BETWEEN REPLACE ('$!{create_month}', '-', '') 
								      AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 11), 'YYYYMM') 
								    #end   
								    ) A,
							    (
							     --유통본부 및 거래처조회 SET
							    SELECT C.CUST_ID,     --거래처코드
								   C.CUST_NAME,   --거래처명
								   C.GRUP_CODE1,  --유통본부코드
								   M.CD_NAME      --유통본부명  
							    FROM CUSTOMER C,
								(SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
							    WHERE C.GRUP_CODE1 = M.CD   
							    ) B
							WHERE A.CUST_CODE = B.CUST_ID     
							GROUP BY DECODE('$!{checked_site1}','Y', CUST_CODE, GRUP_CODE1), 
								 DECODE('$!{checked_site1}','Y', CUST_NAME, CD_NAME),
								 PROD_CODE, 
								 YYYYMM    
							)  
						--거래처및유통본부 조회 조건
						--------------------------- 
						#if("$!{customer_id}" != "")               
						[WHERE CUST_CD = '$!{customer_id}']   --거래처코드
						#elseif("$!{selected_gr_type1}" != "") 
						[WHERE CUST_CD = '$!{selected_gr_type1}'] --유통본부       
						#end   
						---------------------------   
					       )      
					    GROUP BY PROD_CODE, YYYYMM
				        )A,
				        (
				        SELECT 1 NO FROM DUAL 
				        UNION 
				        SELECT 2 NO FROM DUAL
				        UNION 
				        SELECT 3 NO FROM DUAL
				        )B 
				     )
			     GROUP BY PROD_CODE, NO, YYYYMM
			     )A,
			     (
			     SELECT IM.ITEM_ID I_ITEM_ID,
			            IM.ITEM_NAME
			     FROM ITEM_MST IM
			     WHERE IM.MADE_TYPE != 'DE' ) IM,
			 		#if ("$!{create_month}" == "")
				        (
				        SELECT  TO_DATE('210001', 'YYYYMM') MM 
				          FROM  DUAL 
				        ) DAY_M		 		
			 		#else 
				 		( 
						SELECT  TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM
						  FROM  DUAL
						) DAY_M  
					#end	   
			WHERE A.PROD_CODE = IM.I_ITEM_ID    
	        #if("$!{item_query}" == "") 
	        [AND IM.I_ITEM_ID||IM.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']   
       	    #else
        	[AND IM.I_ITEM_ID IN ($commonUtil.replaceAll("${item_query}", "''", "'"))]
        	#end   
	      
		GROUP BY PROD_CODE, ITEM_NAME, NO -- YYYYMM, NO
		ORDER BY PROD_CODE, ITEM_NAME, NO 
	)   
		-------------------------
		/* MONTHLY END */
		-------------------------
	
		#else
		-------------------------
	    /* WEEKLY START */ 
		-------------------------	
		SELECT  /*fc_05050_majorItemSalesTrend_tailer(WEEKLY)*/
			  PROD_CODE,
		      ITEM_NAME,
		      GUBUN_NM, 
		      DECODE(NO,3,TO_CHAR(MAX_QTY,'999,999,999')||'%',MAX_QTY) MAX_QTY,
              DECODE(NO,3,TO_CHAR(AVG_QTY,'999,999,999')||'%',AVG_QTY) AVG_QTY,
              DECODE(NO,3,TO_CHAR(STD_QTY,'999,999,999')||'%',STD_QTY) STD_QTY,
              DECODE(NO,3,TO_CHAR(SUM_QTY,'999,999,999')||'%',SUM_QTY) SUM_QTY,
              ------------------------------------------
              DECODE(NO,3,TO_CHAR(W0_NO_Q,'999,999,999')||'%',W0_NO_Q) W0_NO_Q,
              DECODE(NO,3,TO_CHAR(W1_NO_Q,'999,999,999')||'%',W1_NO_Q) W1_NO_Q,
              DECODE(NO,3,TO_CHAR(W2_NO_Q,'999,999,999')||'%',W2_NO_Q) W2_NO_Q,
              DECODE(NO,3,TO_CHAR(W3_NO_Q,'999,999,999')||'%',W3_NO_Q) W3_NO_Q,
              DECODE(NO,3,TO_CHAR(W4_NO_Q,'999,999,999')||'%',W4_NO_Q) W4_NO_Q,
              DECODE(NO,3,TO_CHAR(W5_NO_Q,'999,999,999')||'%',W5_NO_Q) W5_NO_Q,
              DECODE(NO,3,TO_CHAR(W6_NO_Q,'999,999,999')||'%',W6_NO_Q) W6_NO_Q,
              DECODE(NO,3,TO_CHAR(W7_NO_Q,'999,999,999')||'%',W7_NO_Q) W7_NO_Q,
              DECODE(NO,3,TO_CHAR(W8_NO_Q,'999,999,999')||'%',W8_NO_Q) W8_NO_Q,
              DECODE(NO,3,TO_CHAR(W9_NO_Q,'999,999,999')||'%',W9_NO_Q) W9_NO_Q,
              DECODE(NO,3,TO_CHAR(W10_NO_Q,'999,999,999')||'%',W10_NO_Q) W10_NO_Q,
              DECODE(NO,3,TO_CHAR(W11_NO_Q,'999,999,999')||'%',W11_NO_Q) W11_NO_Q  			
		FROM
		    (
			SELECT  
				   PROD_CODE, ITEM_NAME,  
				   NO, 
				   --YYYYWW,
			       MIN(GUBUN_NM)   GUBUN_NM, 
			       MAX(MAX_QTY)    MAX_QTY, 
			       MAX(AVG_QTY)    AVG_QTY, 
			       MAX(STD_QTY)    STD_QTY, 
			       SUM(SUM_QTY)    SUM_QTY, 
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+(-7*1), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W0_NO_Q,  --당주                 			    
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*0), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W1_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*1), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W2_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*2), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W3_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*3), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W4_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*4), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W5_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*5), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W6_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*6), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W7_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*7), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W8_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*8), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W9_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*9), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W10_NO_Q,  --당주
 			       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_WW.WW+( 7*10), 'IYYYIW') THEN A.SUM_QTY ELSE 0 END) W11_NO_Q  --당주       
			 FROM
			    (
			     SELECT
				     PROD_CODE,
				     YYYYWW,
				     NO,
				     MIN(GUBUN_NM)   GUBUN_NM,
				     SUM(SUM_QTY)    SUM_QTY,
				     MAX(MAX_QTY)    MAX_QTY,
				     MAX(AVG_QTY)    AVG_QTY,
				     MAX(STD_QTY)    STD_QTY 		
				FROM
				    (
				    SELECT PROD_CODE, 
				           YYYYWW,  
				           NO,  
				           --1.$!{checked_site1}
				           --2.$!{checked_site2}
				           --3.$!{martName}   
				           --4.$!{checked_uom} 
				            
				           #if (("$!{checked_site1}" == "Y"))
				           DECODE(NO,1,'농심매출',2,decode('$!{customer_name}','','거래처전체','$!{customer_name}')
				                                 ,3,'판매비율(%)') GUBUN_NM,	           
				           #elseif("$!{checked_site2}" == "Y")			           	           
				           DECODE(NO,1,'농심매출',2,decode('$!{martName}', '','본부전체','$!{martName}')
				                                 ,3,'판매비율(%)') GUBUN_NM,		
				           #else          
				           DECODE(NO,1,'농심매출',2,'거래처/본부매출',3,'판매비율(%)') GUBUN_NM,		           		                      
				           #end
				           (CASE NO WHEN 1 THEN SUM_T_QTY
				                    WHEN 2 THEN SUM_S_QTY
						            WHEN 3 THEN CASE WHEN (SUM(SUM_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               SUM(SUM_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                              /SUM(SUM_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                            )*100,1)
		            				                 ELSE 0           	
		            				             END           			                             
						    	  END
						   		 ) SUM_QTY,
				           (CASE NO WHEN 1 THEN MAX_T_QTY
				                    WHEN 2 THEN MAX_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(MAX_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(MAX_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                              /MAX(MAX_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                            )*100,1)	
		            				                 ELSE 0           
		            				             END           			                             
								    END
								   ) MAX_QTY,        
				           (CASE NO WHEN 1 THEN AVG_T_QTY
				                    WHEN 2 THEN AVG_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(AVG_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(AVG_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                              /MAX(AVG_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                            )*100,1)	
		            				                 ELSE 0           
		            				             END           			                             
								    END
								   ) AVG_QTY,      
				           (CASE NO WHEN 1 THEN STD_T_QTY
				                    WHEN 2 THEN STD_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(STD_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(STD_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                              /MAX(STD_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYWW, NO)
		            				                            )*100,1)	
		            				                 ELSE 0          
		            				             END           			                             
							    END
							   ) STD_QTY               
				    FROM      
				        (
					    SELECT PROD_CODE, YYYYWW,
							   MAX(SUM_T_QTY)             SUM_T_QTY,
							   MAX(MAX_T_QTY)             MAX_T_QTY,
							   MAX(AVG_T_QTY)             AVG_T_QTY,
							   MAX(STD_T_QTY)             STD_T_QTY,
							   SUM(SUM_S_QTY)             SUM_S_QTY,
							   MAX(MAX_S_QTY)             MAX_S_QTY,
							   ROUND(MAX(AVG_S_QTY),1)    AVG_S_QTY,
							   ROUND(MAX(STD_S_QTY),1)    STD_S_QTY
					    FROM
						( 
						  SELECT *
						    FROM
							(
							-- '거래처' (1)는 파라미터로 받고, '거래처' (2) 는 DEFAULT 조회조건의 파마미터의 값을 정의
							SELECT DECODE('$!{checked_site1}','Y', CUST_CODE, GRUP_CODE1) CUST_CD, --거래처/본부 선택
							       DECODE('$!{checked_site1}','Y', CUST_NAME, CD_NAME)    CUST_NM, --거래처/본부 선택
							       PROD_CODE,
							       YYYYWW, 
							       --1. 농심전체
							       SUM(SUM(QTY)) OVER(PARTITION BY PROD_CODE, YYYYWW)                  SUM_T_QTY,
							       MAX(MAX(QTY)) OVER(PARTITION BY PROD_CODE, YYYYWW)                  MAX_T_QTY,
							       ROUND(MAX(AVG(QTY)) OVER(PARTITION BY PROD_CODE, YYYYWW),1)         AVG_T_QTY,
							       ROUND(MAX(STDDEV(QTY)) OVER(PARTITION BY PROD_CODE, YYYYWW),1)      STD_T_QTY,
							       --2. 거래처별
							       SUM(QTY)                              SUM_S_QTY,
							       MAX(QTY)                              MAX_S_QTY,
							       ROUND(AVG(QTY),1)                     AVG_S_QTY,
							       ROUND(STDDEV(QTY),1)                  STD_S_QTY 
							FROM
							    (
								    --거래처별 실적 데이터 SET
								    SELECT SDR.PROD_CODE PROD_CODE,
									   SDR.CUST_CODE CUST_CODE,		                               
									   CAL.YYYYWW, 
									   DECODE('cnt','amount', SDR.SUPL_AMT, SDR.SELL_BOX) QTY
								    FROM SDRDT103  SDR, CAL_MST CAL
								    WHERE SDR.SELL_GUBN_CODE IN ('01', '02')
								     AND SDR.CNFM_DATE = CAL.YYYYMMDD
							#if("$!{sdate}" == "")
								     AND SDR.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD') 
				                     AND TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 1), 'YYYYMMDD')		          
							#else  		    
						             AND SDR.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
				                     AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     
							#end		
						         ) A,
							    (
							     --유통본부 및 거래처조회 SET
							    SELECT C.CUST_ID,     --거래처코드
								   C.CUST_NAME,   --거래처명
								   C.GRUP_CODE1,  --유통본부코드
								   M.CD_NAME      --유통본부명  
							    FROM CUSTOMER C,
								(SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
							    WHERE C.GRUP_CODE1 = M.CD   
							    ) B
							WHERE A.CUST_CODE = B.CUST_ID     
							GROUP BY DECODE('$!{checked_site1}','Y', CUST_CODE, GRUP_CODE1), 
								 DECODE('$!{checked_site1}','Y', CUST_NAME, CD_NAME),
								 PROD_CODE, 
								 YYYYWW    
							)  
						--거래처및유통본부 조회 조건
						--------------------------- 
						#if("$!{customer_id}" != "")               
						[WHERE CUST_CD = '$!{customer_id}']   --거래처코드
						#elseif("$!{selected_gr_type1}" != "") 
						[WHERE CUST_CD = '$!{selected_gr_type1}'] --유통본부       
						#end   
						---------------------------   
					       )      
					    GROUP BY PROD_CODE, YYYYWW
				        )A,
				        (
				        SELECT 1 NO FROM DUAL
				        UNION 
				        SELECT 2 NO FROM DUAL
				        UNION 
				        SELECT 3 NO FROM DUAL 
				        )B 
				     )   
				     GROUP BY PROD_CODE, NO, YYYYWW
				     )A,
				     (
				     SELECT IM.ITEM_ID I_ITEM_ID,
				            IM.ITEM_NAME
				     FROM ITEM_MST IM
				     WHERE IM.MADE_TYPE != 'DE' ) IM,
				     (
				#if("$!{sdate}" == "")
				      SELECT NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2) WW 
				             FROM DUAL 	
				#else
				      SELECT NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 2) WW 
				             FROM DUAL 				
				#end	 
				     )DAY_WW
			    WHERE A.PROD_CODE = IM.I_ITEM_ID 
		        #if("$!{item_query}" == "") 
		        [AND IM.I_ITEM_ID||IM.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']     
		        #else
		        [AND IM.I_ITEM_ID IN ($commonUtil.replaceAll("${item_query}", "''", "'"))]
		        #end   
		      
				GROUP BY PROD_CODE, ITEM_NAME, NO -- YYYYWW, NO
				ORDER BY PROD_CODE, ITEM_NAME, NO 
			)
		-------------------------
		/* WEEKLY END */
		-------------------------	
		#end	         
 	</query>  	   
 	<query id="fc_05060_majorItemSalesTrend_tailer" paging="true"> 

 	    SELECT  /* fc_05060_majorItemSalesTrend_tailer */ 
				PROD_CODE, ITEM_NAME, GUBUN_NM, 
	            DECODE(NO,3,TO_CHAR(MAX_QTY,'999,999,999')||'%',MAX_QTY) MAX_QTY,
	            DECODE(NO,3,TO_CHAR(AVG_QTY,'999,999,999')||'%',AVG_QTY) AVG_QTY,
	            DECODE(NO,3,TO_CHAR(STD_QTY,'999,999,999')||'%',STD_QTY) STD_QTY,
	            DECODE(NO,3,TO_CHAR(SUM_QTY,'999,999,999')||'%',SUM_QTY) SUM_QTY,
	            ------------------------------------------	 	    
	            DECODE(NO,3,TO_CHAR(D0_NO_Q,'999,999,999')||'%',D0_NO_Q) D0_NO_Q,
	            DECODE(NO,3,TO_CHAR(D1_NO_Q,'999,999,999')||'%',D1_NO_Q) D1_NO_Q,
	            DECODE(NO,3,TO_CHAR(D2_NO_Q,'999,999,999')||'%',D2_NO_Q) D2_NO_Q,
	            DECODE(NO,3,TO_CHAR(D3_NO_Q,'999,999,999')||'%',D3_NO_Q) D3_NO_Q,
	            DECODE(NO,3,TO_CHAR(D4_NO_Q,'999,999,999')||'%',D4_NO_Q) D4_NO_Q,
	            DECODE(NO,3,TO_CHAR(D5_NO_Q,'999,999,999')||'%',D5_NO_Q) D5_NO_Q,
	            DECODE(NO,3,TO_CHAR(D6_NO_Q,'999,999,999')||'%',D6_NO_Q) D6_NO_Q,
	            DECODE(NO,3,TO_CHAR(D7_NO_Q,'999,999,999')||'%',D7_NO_Q) D7_NO_Q,
	            DECODE(NO,3,TO_CHAR(D8_NO_Q,'999,999,999')||'%',D8_NO_Q) D8_NO_Q,
	            DECODE(NO,3,TO_CHAR(D9_NO_Q,'999,999,999')||'%',D9_NO_Q) D9_NO_Q,
	            --------------------------------------------
	            DECODE(NO,3,TO_CHAR(D10_NO_Q,'999,999,999')||'%',D10_NO_Q) D10_NO_Q,
	            DECODE(NO,3,TO_CHAR(D11_NO_Q,'999,999,999')||'%',D11_NO_Q) D11_NO_Q,
	            DECODE(NO,3,TO_CHAR(D12_NO_Q,'999,999,999')||'%',D12_NO_Q) D12_NO_Q,
	            DECODE(NO,3,TO_CHAR(D13_NO_Q,'999,999,999')||'%',D13_NO_Q) D13_NO_Q,
	            DECODE(NO,3,TO_CHAR(D14_NO_Q,'999,999,999')||'%',D14_NO_Q) D14_NO_Q,
	            DECODE(NO,3,TO_CHAR(D15_NO_Q,'999,999,999')||'%',D15_NO_Q) D15_NO_Q,
	            DECODE(NO,3,TO_CHAR(D16_NO_Q,'999,999,999')||'%',D16_NO_Q) D16_NO_Q,
	            DECODE(NO,3,TO_CHAR(D17_NO_Q,'999,999,999')||'%',D17_NO_Q) D17_NO_Q,
	            DECODE(NO,3,TO_CHAR(D18_NO_Q,'999,999,999')||'%',D18_NO_Q) D18_NO_Q,
	            DECODE(NO,3,TO_CHAR(D19_NO_Q,'999,999,999')||'%',D19_NO_Q) D19_NO_Q,
             	--------------------------------------------	            
	            DECODE(NO,3,TO_CHAR(D20_NO_Q,'999,999,999')||'%',D20_NO_Q) D20_NO_Q,
	            DECODE(NO,3,TO_CHAR(D21_NO_Q,'999,999,999')||'%',D21_NO_Q) D21_NO_Q,
	            DECODE(NO,3,TO_CHAR(D22_NO_Q,'999,999,999')||'%',D22_NO_Q) D22_NO_Q,
	            DECODE(NO,3,TO_CHAR(D23_NO_Q,'999,999,999')||'%',D23_NO_Q) D23_NO_Q,
	            DECODE(NO,3,TO_CHAR(D24_NO_Q,'999,999,999')||'%',D24_NO_Q) D24_NO_Q,
	            DECODE(NO,3,TO_CHAR(D25_NO_Q,'999,999,999')||'%',D25_NO_Q) D25_NO_Q,
	            DECODE(NO,3,TO_CHAR(D26_NO_Q,'999,999,999')||'%',D26_NO_Q) D26_NO_Q,
	            DECODE(NO,3,TO_CHAR(D27_NO_Q,'999,999,999')||'%',D27_NO_Q) D27_NO_Q,
	            DECODE(NO,3,TO_CHAR(D28_NO_Q,'999,999,999')||'%',D28_NO_Q) D28_NO_Q,
	            DECODE(NO,3,TO_CHAR(D29_NO_Q,'999,999,999')||'%',D29_NO_Q) D29_NO_Q,
	            DECODE(NO,3,TO_CHAR(D30_NO_Q,'999,999,999')||'%',D30_NO_Q) D30_NO_Q	 	          	 	    
 	     FROM
 	    	(
			SELECT    
			       PROD_CODE, ITEM_NAME,  
			       NO,
			       --YYYYDD,
			       MIN(GUBUN_NM)   GUBUN_NM, 
			       MAX(MAX_QTY)    MAX_QTY, 
			       MAX(AVG_QTY)    AVG_QTY, 
			       MAX(STD_QTY)    STD_QTY, 
			       SUM(SUM_QTY)    SUM_QTY,    
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD, 'YYYYMMDD')    THEN A.SUM_QTY ELSE 0 END) D0_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+1, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D1_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+2, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D2_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+3, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D3_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+4, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D4_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+5, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D5_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+6, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D6_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+7, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D7_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+8, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D8_NO_Q,--당일   
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+9, 'YYYYMMDD')  THEN A.SUM_QTY ELSE 0 END) D9_NO_Q, --당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+10, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D10_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+11, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D11_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+12, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D12_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+13, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D13_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+14, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D14_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+15, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D15_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+16, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D16_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+17, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D17_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+18, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D18_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+19, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D19_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+20, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D20_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+21, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D21_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+22, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D22_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+23, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D23_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+24, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D24_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+25, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D25_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+26, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D26_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+27, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D27_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+28, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D28_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+29, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D29_NO_Q,--당일  
			       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+30, 'YYYYMMDD') THEN A.SUM_QTY ELSE 0 END) D30_NO_Q --당일  
			  FROM		
			     (
			     SELECT
					     PROD_CODE,
					     YYYYDD,
					     NO,
					     MIN(GUBUN_NM)   GUBUN_NM,
					     SUM(SUM_QTY) SUM_QTY,
					     MAX(MAX_QTY) MAX_QTY,
					     MAX(AVG_QTY) AVG_QTY,
					     MAX(SUM_QTY) STD_QTY 		
				FROM 
				    (
				    SELECT PROD_CODE, 
				           YYYYDD, 
				           NO,   
				           #if (("$!{checked_site1}" == "Y"))
				           DECODE(NO,1,'농심매출',2,decode('$!{customer_name}','','거래처전체','$!{customer_name}')
				                               ,3,'판매비율(%)') GUBUN_NM,	           
				           #elseif("$!{checked_site2}" == "Y")			           	           
				           DECODE(NO,1,'농심매출',2,decode('$!{martName}', '','본부전체','$!{martName}')
				                                ,3,'판매비율(%)') GUBUN_NM,		
				           #else          
				           DECODE(NO,1,'농심매출',2,'거래처/본부매출',3,'판매비율(%)') GUBUN_NM,		           		                      
				           #end
				           (CASE NO WHEN 1 THEN SUM_T_QTY
				                    WHEN 2 THEN SUM_S_QTY
						            WHEN 3 THEN CASE WHEN (SUM(SUM_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               SUM(SUM_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                              /SUM(SUM_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                            )*100,1)	
		            				                 ELSE 0          
		            				             END           			                             
						    END
						   ) SUM_QTY,
				           (CASE NO WHEN 1 THEN MAX_T_QTY
				                    WHEN 2 THEN MAX_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(MAX_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(MAX_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                              /MAX(MAX_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                            )*100,1)	
		            				                  ELSE 0          
		            				             END           			                             
						    END
						   ) MAX_QTY,        
				           (CASE NO WHEN 1 THEN AVG_T_QTY
				                    WHEN 2 THEN AVG_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(AVG_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(AVG_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                              /MAX(AVG_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                            )*100,1)
		            				                 ELSE 0          	
		            				             END           			                             
						    END
						   ) AVG_QTY,      
				           (CASE NO WHEN 1 THEN STD_T_QTY
				                    WHEN 2 THEN STD_S_QTY
						            WHEN 3 THEN CASE WHEN (MAX(STD_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)>0)
						                             THEN
		            				                        ROUND((
		            				                               MAX(STD_S_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                              /MAX(STD_T_QTY) OVER(PARTITION BY PROD_CODE, YYYYDD, NO)
		            				                            )*100,1)	
		            				                  ELSE 0          
		            				             END           			                             
						    END
						   ) STD_QTY            
			    FROM      
			        (
		                SELECT PROD_CODE, YYYYDD,
		                       MAX(SUM_T_QTY)             SUM_T_QTY,
		                       MAX(MAX_T_QTY)             MAX_T_QTY,
		                       MAX(AVG_T_QTY)             AVG_T_QTY,
		                       MAX(STD_T_QTY)             STD_T_QTY,
		                       SUM(SUM_S_QTY)             SUM_S_QTY,
		                       MAX(MAX_S_QTY)             MAX_S_QTY,
		                       ROUND(MAX(AVG_S_QTY),1)    AVG_S_QTY,
		                       ROUND(MAX(STD_S_QTY),1)    STD_S_QTY
		                FROM
		                    ( 
		                      SELECT *
		                        FROM
		                            (
		                            -- '거래처' (1)는 파라미터로 받고, '거래처' (2) 는 DEFAULT 조회조건의 파마미터의 값을 정의
		                            SELECT DECODE('checked_site1','Y', CUST_CODE, GRUP_CODE1) CUST_CD, --거래처/본부 선택
		                                   DECODE('checked_site1','Y', CUST_NAME, CD_NAME)    CUST_NM, --거래처/본부 선택
		                                   PROD_CODE,
		                                   YYYYDD, 
		                                   --1. 농심전체
		                                   SUM(SUM(QTY)) OVER(PARTITION BY PROD_CODE, YYYYDD)                  SUM_T_QTY,
		                                   MAX(MAX(QTY)) OVER(PARTITION BY PROD_CODE, YYYYDD)                  MAX_T_QTY,
		                                   ROUND(MAX(AVG(QTY)) OVER(PARTITION BY PROD_CODE, YYYYDD),1)         AVG_T_QTY,
		                                   ROUND(MAX(STDDEV(QTY)) OVER(PARTITION BY PROD_CODE, YYYYDD),1)      STD_T_QTY,
		                                   --2. 거래처별
		                                   SUM(QTY)                              SUM_S_QTY,
		                                   MAX(QTY)                              MAX_S_QTY,
		                                   ROUND(AVG(QTY),1)                     AVG_S_QTY,
		                                   ROUND(STDDEV(QTY),1)                  STD_S_QTY 
		                            FROM
		                                (
		                                --거래처별 실적 데이터 SET
		                                SELECT SDR.PROD_CODE PROD_CODE,
		                                       SDR.CUST_CODE CUST_CODE,		                               
		                                       SDR.CNFM_DATE YYYYDD,
		                                	   DECODE('cnt','amount', SDR.SUPL_AMT, SDR.SELL_BOX) QTY
		                                FROM SDRDT103  SDR
		                                WHERE SDR.SELL_GUBN_CODE IN ('01', '02')
		        					#if("$!{sdate}" == "")
		        						 AND SDR.CNFM_DATE BETWEEN '21000101' AND '21000101'	          
		        					#else  		    
		        						 AND SDR.CNFM_DATE BETWEEN TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'),'YYYYMMDD') 
		        			             AND TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+31, 'YYYYMMDD')  		                     
		        				    #end				                      		                      
			                            ) A,
		                                (
		                                 --유통본부 및 거래처조회 SET
		                                SELECT C.CUST_ID,     --거래처코드
		                                       C.CUST_NAME,   --거래처명
		                                       C.GRUP_CODE1,  --유통본부코드
		                                       M.CD_NAME      --유통본부명
		                                FROM CUSTOMER C,
		                                    (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
		                                WHERE C.GRUP_CODE1 = M.CD   
		                                ) B
		                            WHERE A.CUST_CODE = B.CUST_ID     
		                            GROUP BY DECODE('checked_site1','Y', CUST_CODE, GRUP_CODE1), 
		                                     DECODE('checked_site1','Y', CUST_NAME, CD_NAME),
		                                     PROD_CODE,
		                                     YYYYDD    
		                            )  
		                    --거래처및유통본부 조회 조건   
		                    --------------------------- 
							#if("$!{customer_id}" != "")               
							[WHERE CUST_CD = '$!{customer_id}']   --거래처코드
							#elseif("$!{selected_gr_type1}" != "") 
							[WHERE CUST_CD = '$!{selected_gr_type1}'] --유통본부       
							#end   
		                    ---------------------------   
		                   )      
		                GROUP BY PROD_CODE, YYYYDD
	                 )A, 
			        (
			        SELECT 1 NO FROM DUAL 
			        UNION 
			        SELECT 2 NO FROM DUAL
			        UNION 
			        SELECT 3 NO FROM DUAL
			        )B 
			     )   
			     GROUP BY PROD_CODE, NO, YYYYDD
			     )A,
			     (
			     SELECT IM.ITEM_ID I_ITEM_ID,
			            IM.ITEM_NAME 
			     FROM ITEM_MST IM
			     WHERE IM.MADE_TYPE != 'DE' ) IM,		 
		#if("$!{sdate}" == "")		     
			     ( SELECT TO_DATE('21000101','YYYYMMDD') DD FROM DUAL ) DAY_D   
		#else
			     ( SELECT TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')DD FROM DUAL ) DAY_D   	
		#end	
			     
			WHERE A.PROD_CODE = IM.I_ITEM_ID  
	        #if("$!{item_query}" == "") 
	        [AND IM.I_ITEM_ID||IM.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']     
	        #else
	        [AND IM.I_ITEM_ID IN ($commonUtil.replaceAll("${item_query}", "''", "'"))]
	        #end   
			
			GROUP BY PROD_CODE, ITEM_NAME, NO --YYYYDD, NO
			ORDER BY PROD_CODE, ITEM_NAME, NO 
 	  )    
 	</query>     
   
    <!-- 판매현황 조회1(New) start -->   
    <query id="fc_05070_salesMonitoring_tailer" paging="true">
        #if ("$!{periodGB2}" == "")	
		--판매현황조회(1)_월별 
		SELECT  NO,
		       ITEM_ID_GB, 
		       ITEM_NM,
		       HID,  
		       PARENT_HID,
		       LPAD(' ',(NO+2)*2,' ')||HID_NM HID_NM,
		       OBJ_QTY,
		       ----------------------- M0
		       M0_ACT_Q,
		       TO_CHAR(M0_DIFF_Q, '999,999,999')||'%' M0_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q, '999,999,999')||'%' M0_DIFF_SUM,
		       ----------------------- M+1
		       M1_ACT_Q,
		       TO_CHAR(M1_DIFF_Q, '999,999,999')||'%' M1_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q, '999,999,999')||'%' M1_DIFF_SUM,
		       ----------------------- M+2
		       M2_ACT_Q,
		       TO_CHAR(M2_DIFF_Q, '999,999,999')||'%' M2_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q, '999,999,999')||'%' M2_DIFF_SUM,
		       ----------------------- M+3    
		       M3_ACT_Q,
		       TO_CHAR(M3_DIFF_Q, '999,999,999')||'%' M3_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q, '999,999,999')||'%' M3_DIFF_SUM,
		       ----------------------- M+4
		       M4_ACT_Q,
		       TO_CHAR(M4_DIFF_Q, '999,999,999')||'%' M4_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q, '999,999,999')||'%' M4_DIFF_SUM,
		       ----------------------- M+5
		       M5_ACT_Q,
		       TO_CHAR(M5_DIFF_Q, '999,999,999')||'%' M5_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q, '999,999,999')||'%' M5_DIFF_SUM,
		       ----------------------- M+6
		       M6_ACT_Q,
		       TO_CHAR(M6_DIFF_Q, '999,999,999')||'%' M6_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q, '999,999,999')||'%' M6_DIFF_SUM,
		       ----------------------- M+7
		       M7_ACT_Q,
		       TO_CHAR(M7_DIFF_Q, '999,999,999')||'%' M7_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q, '999,999,999')||'%' M7_DIFF_SUM,
		       -----------------------  M+8
		       M8_ACT_Q,
		       TO_CHAR(M8_DIFF_Q, '999,999,999')||'%' M8_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q, '999,999,999')||'%' M8_DIFF_SUM,
		       -----------------------  M+9
		       M9_ACT_Q,
		       TO_CHAR(M9_DIFF_Q, '999,999,999')||'%' M9_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q+M9_DIFF_Q, '999,999,999')||'%' M9_DIFF_SUM,
		       -----------------------  M+10
		       M10_ACT_Q,
		       TO_CHAR(M10_DIFF_Q, '999,999,999')||'%' M10_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q
		       +M9_DIFF_Q+M10_DIFF_Q, '999,999,999')||'%' M10_DIFF_SUM,
		       -----------------------  M+11
		       M11_ACT_Q,
		       TO_CHAR(M11_DIFF_Q, '999,999,999')||'%' M11_DIFF_Q,
		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q
		       +M9_DIFF_Q+M10_DIFF_Q+M11_DIFF_Q, '999,999,999')||'%' M11_DIFF_SUM
		 FROM
		    ( 
		    SELECT ITEM_ID_GB,
		           ITEM_NM,
		           NO,
		           HID,
		           PARENT_HID,
		           HID_NM,
		           OBJ_QTY,
		           M0_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M0_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M0_DIFF_Q, 
		           M1_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M1_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M1_DIFF_Q,
		           M2_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M2_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M2_DIFF_Q,
		           M3_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M3_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M3_DIFF_Q,
		           M4_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M4_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M4_DIFF_Q,
		           M5_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M5_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M5_DIFF_Q,
		           M6_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M6_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M6_DIFF_Q,
		           M7_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M7_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M7_DIFF_Q,
		           M8_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M8_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M8_DIFF_Q,
		           M9_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M9_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M9_DIFF_Q,
		           M10_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M10_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M10_DIFF_Q,
		           M11_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((M11_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) M11_DIFF_Q            
		    FROM
		        (
		        SELECT ITEM_ID_GB, 
		               MAX(ITEM_NM) ITEM_NM,
		               NO, 
		               PARENT_HID,
		               DECODE(NO,2,HID,PARENT_HID) HID,
		               MAX(DECODE(NO,2,HID_NM,PARENT_NM)) HID_NM,    --조직
		               SUM(OBJ_QTY) OBJ_QTY,                         --목표      
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,0), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M0_ACT_Q,       --M0실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,1), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M1_ACT_Q,       --M1실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,2), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M2_ACT_Q,       --M2실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,3), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M3_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,4), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M4_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,5), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M5_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,6), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M6_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,7), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M7_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,8), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M8_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,9), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M9_ACT_Q,       --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,10), 'YYYYMM') THEN ACT_QTY ELSE 0 END)         M10_ACT_Q,      --M3실적
		               SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,11), 'YYYYMM') THEN ACT_QTY ELSE 0 END)         M11_ACT_Q       --M3실적
		        FROM
		            (
		            SELECT *        
		             FROM   
		                (
		                SELECT ITEM_ID,
		                       PARENT_HID,
		                       HID,
		                       YYYYMM,
		                       MAX(PARENT_NM)   PARENT_NM,
		                       MAX(HID_NM)      HID_NM,
		                       SUM(OBJ_QTY)     OBJ_QTY,
		                       SUM(ACT_QTY)     ACT_QTY       
		                FROM
		                    (
		                    SELECT ITEM_ID,
		                           YYYYMM,
		                           SALES_LOC,
		                           OBJ_QTY,
		                           ACT_QTY
		                    FROM
		                        ( 
		                 		 --목표 (MAX 버전)
                                 ---- NFOS_SALES_PLAN_MONTHLY  ------
                                 SELECT ITEM_ID, YYYYMM, SALES_LOC,  
                                	    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) OBJ_QTY,
                                	    0 ACT_QTY,
                                	    1 GUBUN
                                 FROM NFOS_SALES_PLAN_MONTHLY NP
							   #if ("$!{create_month}" == "")				 
								WHERE NP.YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
								  AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
							   #else
								WHERE NP.YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
								   AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 11), 'YYYYMM') 				 
							   #end	
								   AND NP.VERSION = 
												   (
                                                    --월별(MAX_VERSION)
						                            SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_MONTHLY_I01) */
						                                   DISTINCT VERSION
                                                    FROM  NFOS_SALES_PLAN_MONTHLY VER
												   #if ("$!{create_month}" == "")				 
													WHERE YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
													  AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
												   #else
													WHERE YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
													  AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 11), 'YYYYMM') 				 
												   #end					 
                                                     AND YYYYMM    = NP.YYYYMM
                                                     AND SEQ       = NP.SEQ
                                                     AND ROWNUM = 1
				 								   )   
				              GROUP BY ITEM_ID, YYYYMM, SALES_LOC   
		                 UNION ALL
		                  --판매실적
						 SELECT PROD_CODE,
							    TO_CHAR(TO_DATE(SDR.CNFM_DATE, 'YYYYMMDD'), 'YYYYMM') CNFM_DATE,
							    DEPT_CODE,
							    0              OBJ_QTY,
							    SUM(SELL_BOX)  ACT_QTY,
							    2              GUBUN     --실적
			               FROM SDRDT103 SDR
			              WHERE SDR.SELL_GUBN_CODE IN ('01', '02')
						    #if ("$!{create_month}" == "")
							  AND SDR.CNFM_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001','YYYYMM'), 0), 'YYYYMM') 
							  AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 						          	 
						    #else
							  AND SDR.CNFM_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
							  AND TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE ('$!{create_month}', '-', ''), 'YYYYMM'), 11), 'YYYYMM') 						          	 		 
						    #end   
							GROUP BY PROD_CODE, TO_CHAR(TO_DATE(SDR.CNFM_DATE, 'YYYYMMDD'), 'YYYYMM'),  DEPT_CODE 
				            ) 
		               ) MAIN,
		               (
		               SELECT       
						      #if ("$!{org_GB1}" == "1")
							   HR3.HID         HID3,
							   HR1.HID         HID ,           --영업본부
							   HR1.HID_NAME    HID_NM,      
							   '0000'          PARENT_HID,     --농심
							   '농심'           PARENT_NM
						   #elseif ("$!{org_GB2}" == "2")
							   HR3.HID         HID3,
							   HR2.HID         HID ,           --영업부
							   HR2.HID_NAME    HID_NM,      
							   HR1.HID         PARENT_HID,     --영업본부
							   HR1.HID_NAME    PARENT_NM
						   #else
							   HR3.HID         HID,            --영업지점
							   HR3.HID_NAME    HID_NM,      
							   HR2.HID         PARENT_HID,     --영업부
							   HR2.HID_NAME    PARENT_NM     
						   #end	                  
					      FROM HRCHY HR1, HRCHY HR2, HRCHY HR3
        	            WHERE HR1.HID = HR2.PARENT_HID
        	              AND HR2.HID = HR3.PARENT_HID
					      AND HR1.LVL = '20'
					      AND HR2.LVL = '30'
					      AND HR3.LVL = '40'
        	              AND HR1.HTYPE = '영업'
        	              AND HR2.HTYPE = '영업'
        	              AND HR3.HTYPE = '영업'
 		                ) SITE
				#if (("$!{org_GB1}" == "1") || ("$!{org_GB2}" == "2"))
			        WHERE MAIN.SALES_LOC = SITE.HID3
			        #else
			        WHERE MAIN.SALES_LOC = SITE.HID
			        #end
		                GROUP BY ITEM_ID, PARENT_HID, HID, YYYYMM
		                ) A,
		                (
				    --품종분류(공통)
				    SELECT 
				    #if($!{item_GB1} == "1")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD1.CD         ITEM_ID_GB,       --(대)
					   CD1.CD_NAME    ITEM_NM  
				    #elseif($!{item_GB2} == "2")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD2.CD         ITEM_ID_GB,       --(중)
					   CD2.CD_NAME    ITEM_NM  
				    #elseif($!{item_GB3} == "3") 
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD3.CD         ITEM_ID_GB,       --(소)
					   CD3.CD_NAME    ITEM_NM      
				    #else 
					   ITEM.ITEM_ID   ITEM_ID_GB,
					   ITEM.ITEM_NAME ITEM_NM    
				    #end        
				    FROM ITEM_MST ITEM, 
					 CODE_MST CD1,       --(대)
					 CODE_MST CD2,       --(중)
					 CODE_MST CD3        --(소)
				    WHERE ITEM.SALES_CAT01 = CD1.CD
				      AND ITEM.SALES_CAT02 = CD2.CD
				      AND ITEM.SALES_CAT03 = CD3.CD
				      AND CD1.CD_GRP = 'SALES_CAT1'
				      AND CD2.CD_GRP = 'SALES_CAT2'
				      AND CD3.CD_GRP = 'SALES_CAT3'
				      ) ITEM_MST 
		
			    #if(($!{item_GB1} == "1")||($!{item_GB2} == "2")||($!{item_GB3} == "3"))
			    WHERE A.ITEM_ID = ITEM_MST.ITEM_ID_S
			    #else 
			    WHERE A.ITEM_ID = ITEM_MST.ITEM_ID_GB    
			    #end
		           ) GR1,
		           (
		            SELECT 1 NO FROM DUAL 
		            UNION
		            SELECT 2 NO FROM DUAL
		           ) B,	
			   (
			#if ("$!{create_month}" == "")
			    SELECT TO_DATE('210001','YYYYMM') MM FROM DUAL     
		        #else 
			    SELECT TO_DATE(REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM FROM DUAL         
			#end
			      ) DAY_M 
		        GROUP BY ITEM_ID_GB, PARENT_HID, NO, DECODE(NO,2,HID,PARENT_HID)    
		        --ORDER BY ITEM_ID, NO, PARENT_HID  
		        )
		    ) 
		ORDER BY ITEM_ID_GB, PARENT_HID, NO, HID 
    #else  	    
	--판매현황조회(1)_주별 
		SELECT NO,
		       ITEM_ID_GB,
		       ITEM_NM,
		       PARENT_HID,
		       HID,   
		       LPAD(' ',(NO+2)*2,' ')||HID_NM HID_NM,
		       OBJ_QTY,
		       ----------------------- W+0
		       W0_ACT_Q,
		       TO_CHAR(W0_DIFF_Q, '999,999,999')||'%' W0_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q, '999,999,999')||'%' W0_DIFF_SUM,
		       ----------------------- W+1
		       W1_ACT_Q,
		       TO_CHAR(W1_DIFF_Q, '999,999,999')||'%' W1_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q, '999,999,999')||'%' W1_DIFF_SUM,
		       ----------------------- W+2
		       W2_ACT_Q,
		       TO_CHAR(W2_DIFF_Q, '999,999,999')||'%' W2_DIFF_Q, 
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q, '999,999,999')||'%' W2_DIFF_SUM,
		       ----------------------- W+3
		       W3_ACT_Q,
		       TO_CHAR(W3_DIFF_Q, '999,999,999')||'%' W3_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q, '999,999,999')||'%' W3_DIFF_SUM,
		       ----------------------- W+4
		       W4_ACT_Q,
		       TO_CHAR(W4_DIFF_Q, '999,999,999')||'%' W4_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q, '999,999,999')||'%' W4_DIFF_SUM,
		       ----------------------- W+5
		       W5_ACT_Q,
		       TO_CHAR(W5_DIFF_Q, '999,999,999')||'%' W5_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q, '999,999,999')||'%' W5_DIFF_SUM,
		       ----------------------- W+6
		       W6_ACT_Q,
		       TO_CHAR(W6_DIFF_Q, '999,999,999')||'%' W6_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q, '999,999,999')||'%' W6_DIFF_SUM,
		       ----------------------- W+7
		       W7_ACT_Q,
		       TO_CHAR(W7_DIFF_Q, '999,999,999')||'%' W7_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q, '999,999,999')||'%' W7_DIFF_SUM,
		       ----------------------- W+8
		       W8_ACT_Q,
		       TO_CHAR(W8_DIFF_Q, '999,999,999')||'%' W8_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q, '999,999,999')||'%' W8_DIFF_SUM,
		       ----------------------- W+9
		       W9_ACT_Q,
		       TO_CHAR(W9_DIFF_Q, '999,999,999')||'%' W9_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q+W9_DIFF_Q, '999,999,999')||'%' W9_DIFF_SUM,
		       ----------------------- W+10
		       W10_ACT_Q,
		       TO_CHAR(W10_DIFF_Q, '999,999,999')||'%' W10_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q+W9_DIFF_Q+W10_DIFF_Q, '999,999,999')||'%' W10_DIFF_SUM,
		       ----------------------- W+11
		       W11_ACT_Q,
		       TO_CHAR(W11_DIFF_Q, '999,999,999')||'%' W11_DIFF_Q,
		       TO_CHAR(W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q+W9_DIFF_Q+W10_DIFF_Q+W11_DIFF_Q, '999,999,999')||'%' W11_DIFF_SUM
		FROM
		    ( 
		    SELECT ITEM_ID_GB,
		           ITEM_NM,
		           NO,
		           PARENT_HID,
		           HID,
		           HID_NM,
		           OBJ_QTY,
		           W0_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W0_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W0_DIFF_Q, 
		           W1_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W1_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W1_DIFF_Q,
		           W2_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W2_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W2_DIFF_Q,
		           W3_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W3_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W3_DIFF_Q,
		           W4_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W4_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W4_DIFF_Q,
		           W5_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W5_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W5_DIFF_Q,
		           W6_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W6_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W6_DIFF_Q,
		           W7_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W7_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W7_DIFF_Q,
		           W8_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W8_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W8_DIFF_Q,
		           W9_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W9_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W9_DIFF_Q,
		           W10_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W10_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W10_DIFF_Q,
		           W11_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W11_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) W11_DIFF_Q             
		    FROM
		        (
		        SELECT ITEM_ID_GB,  
		               MAX(ITEM_NM) ITEM_NM, 
		               NO, 
		               PARENT_HID,
		               DECODE(NO,2,HID,PARENT_HID) HID,
		               MAX(DECODE(NO,2,HID_NM,PARENT_NM)) HID_NM,    --조직
		               SUM(OBJ_QTY) OBJ_QTY,                         --목표      
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+(-7*1), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W0_ACT_Q,       --W0실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*0), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W1_ACT_Q,       --W1실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*1), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W2_ACT_Q,       --W2실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*2), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W3_ACT_Q,       --W3실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*3), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W4_ACT_Q,       --W4실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*4), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W5_ACT_Q,       --W5실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*5), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W6_ACT_Q,       --W6실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*6), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W7_ACT_Q,       --W7실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*7), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W8_ACT_Q,       --W8실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*8), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W9_ACT_Q,       --W9실적 
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*9), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W10_ACT_Q,      --W10실적
		               SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*10), 'YYYYWW') THEN ACT_QTY ELSE 0 END)         W11_ACT_Q       --W11실적
		        FROM
		            (
		            SELECT *        
		             FROM   
		                (
		                SELECT ITEM_ID,
		                       PARENT_HID,
		                       HID,
		                       YYYYWW,
		                       MAX(PARENT_NM)   PARENT_NM,
		                       MAX(HID_NM)      HID_NM,
		                       SUM(OBJ_QTY)     OBJ_QTY,
		                       SUM(ACT_QTY)     ACT_QTY       
		                FROM
		                    (
		                    SELECT ITEM_ID,
		                           YYYYWW,
		                           SALES_LOC,
		                           OBJ_QTY,
		                           ACT_QTY
		                    FROM
		                        ( 
                                 ---- NFOS_SALES_PLAN_MTHLY  ------ 
                                 SELECT ITEM_ID, 
                                        CAL.YYYYWW YYYYWW, 
                                        SALES_LOC,  
                                   	    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) OBJ_QTY,
                                	    0 ACT_QTY, 
                                	    1 GUBUN
                                 FROM NFOS_SALES_PLAN_WEEKLY NP, CAL_MST CAL
							#if("$!{sdate}" == "")
			  			        WHERE NP.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
						          AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')		          
							#else  		    
							WHERE NP.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
						          AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     
							#end		                       			       
								  AND NP.VERSION = 
										         (
		                                			--월별(MAX_VERSION)
		                                			SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
		                                			       DISTINCT VERSION
		                                			       FROM  NFOS_SALES_PLAN_WEEKLY VER
												#if("$!{sdate}" == "")
								  			        WHERE NP.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
											          AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')		          
												#else  		    
												WHERE NP.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
											          AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     
												#end		                       			       
		                                			  AND YYYYMMDD    = NP.YYYYMMDD
		                                			  AND SEQ         = NP.SEQ
		                                			  AND ROWNUM = 1
										          )  
                                   AND NP.YYYYMMDD = CAL.YYYYMMDD        		                            
                                 GROUP BY ITEM_ID, CAL.YYYYWW, SALES_LOC 
		                  UNION ALL
		                  --거래처실적 --------------------
							 SELECT PROD_CODE,
							        CAL.YYYYWW,
							        DEPT_CODE,
							        0          OBJ_QTY,
							        SUM(SELL_BOX)  ACT_QTY,
							        2          GUBUN     --실적
							  FROM SDRDT103 SDR, CAL_MST CAL
							 WHERE SDR.CNFM_DATE = CAL.YYYYMMDD
							   AND SDR.SELL_GUBN_CODE IN ('01', '02')
						      #if("$!{sdate}" == "")
							   AND SDR.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD') 
							   AND TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD') 
						      #else 
							   AND SDR.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
							   AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 2), 'YYYYMMDD') 	      
						      #end	                 
							 GROUP BY  PROD_CODE, CAL.YYYYWW, DEPT_CODE            
		                       ) 
		                   ) MAIN,  
		                   ( 
			            SELECT
			            #if ("$!{org_GB1}" == "1")
			                   HR3.HID         HID3,
			                   HR1.HID         HID ,           --영업본부
			                   HR1.HID_NAME    HID_NM,      
			                   '0000'          PARENT_HID,     --농심
			                   '농심'           PARENT_NM
		                #elseif ("$!{org_GB2}" == "2")
			                   HR3.HID         HID3,
			                   HR2.HID         HID ,           --영업부
			                   HR2.HID_NAME    HID_NM,      
			                   HR1.HID         PARENT_HID,     --영업본부
			                   HR1.HID_NAME    PARENT_NM
		                #else
			                   HR3.HID         HID,            --영업지점
			                   HR3.HID_NAME    HID_NM,      
			                   HR2.HID         PARENT_HID,     --영업부
			                   HR2.HID_NAME    PARENT_NM     
		                #end	                  
			              FROM HRCHY HR1,
			                   HRCHY HR2,
			                   HRCHY HR3
			            WHERE HR1.HID = HR2.PARENT_HID
			              AND HR2.HID = HR3.PARENT_HID
					      AND HR1.LVL = '20'
					      AND HR2.LVL = '30'
					      AND HR3.LVL = '40'
			              AND HR1.HTYPE = '영업'
			              AND HR2.HTYPE = '영업'
			              AND HR3.HTYPE = '영업'
		                    ) SITE
		            #if (("$!{org_GB1}" == "1") || ("$!{org_GB2}" == "2"))
			        WHERE MAIN.SALES_LOC = SITE.HID3
			        #else
			        WHERE MAIN.SALES_LOC = SITE.HID
			        #end
				GROUP BY ITEM_ID, PARENT_HID, HID, YYYYWW
		                ) A,
		                (
				    --품종분류(공통)
				    SELECT 
				    #if($!{item_GB1} == "1")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD1.CD         ITEM_ID_GB,       --(대)
					   CD1.CD_NAME    ITEM_NM  
				    #elseif($!{item_GB2} == "2")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD2.CD         ITEM_ID_GB,       --(중)
					   CD2.CD_NAME    ITEM_NM  
				    #elseif($!{item_GB3} == "3") 
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD3.CD         ITEM_ID_GB,       --(소)
					   CD3.CD_NAME    ITEM_NM      
				    #else 
					   ITEM.ITEM_ID   ITEM_ID_GB,
					   ITEM.ITEM_NAME ITEM_NM    
				    #end        
				    FROM ITEM_MST ITEM, 
						 CODE_MST CD1,       --(대)
						 CODE_MST CD2,       --(중)
						 CODE_MST CD3        --(소)
				    WHERE ITEM.SALES_CAT01 = CD1.CD
				      AND ITEM.SALES_CAT02 = CD2.CD
				      AND ITEM.SALES_CAT03 = CD3.CD
				      AND CD1.CD_GRP = 'SALES_CAT1'
				      AND CD2.CD_GRP = 'SALES_CAT2'
				      AND CD3.CD_GRP = 'SALES_CAT3'               
		                ) ITEM_MST
		    #if(($!{item_GB1} == "1")||($!{item_GB2} == "2")||($!{item_GB3} == "3"))
			WHERE A.ITEM_ID = ITEM_MST.ITEM_ID_S
		    #else 
			WHERE A.ITEM_ID = ITEM_MST.ITEM_ID_GB    
		    #end
		           ) GR1,
		           (
		            SELECT 1 NO FROM DUAL 
		            UNION
		            SELECT 2 NO FROM DUAL
		           ) B,
			    (
			#if("$!{sdate}" == "")
			      SELECT NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 3) WW 
			             FROM DUAL 	
			#else
			      SELECT NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 2) WW 
			             FROM DUAL 				
			#end	    
			     ) DAY_WW              
		        GROUP BY ITEM_ID_GB, NO, PARENT_HID, DECODE(NO,2,HID,PARENT_HID)  
		        --ORDER BY ITEM_ID, NO, PARENT_HID  
		        )
		    )   
		ORDER BY ITEM_ID_GB, PARENT_HID, NO, HID   
	#end 
    </query>
    <!-- 판매현황 조회1(월_주) end --> 
    
    <!-- 판매현황 조회1(일) start -->  
    <query id="fc_05080_salesMonitoring_tailer" paging="true">
        --판매현황조회(1)_일별  
		SELECT NO, 
		       ITEM_ID_GB,
		       ITEM_NM, 
		       PARENT_HID,
		       HID,  
		       LPAD(' ',(NO+2)*2,' ')||HID_NM HID_NM,
		       OBJ_QTY,
		       ----------------------- D+0
		       D0_ACT_Q,
		       TO_CHAR(D0_DIFF_Q, '999,999,999')||'%' D0_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q, '999,999,999')||'%' D0_DIFF_SUM,
		       ----------------------- D+1
		       D1_ACT_Q,
		       TO_CHAR(D1_DIFF_Q, '999,999,999')||'%' D1_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q, '999,999,999')||'%' D1_DIFF_SUM,
		       ----------------------- D+2
		       D2_ACT_Q,
		       TO_CHAR(D2_DIFF_Q, '999,999,999')||'%' D2_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q, '999,999,999')||'%' D2_DIFF_SUM,
		       ----------------------- D+3
		       D3_ACT_Q,
		       TO_CHAR(D3_DIFF_Q, '999,999,999')||'%' D3_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q, '999,999,999')||'%' D3_DIFF_SUM,
		       ----------------------- D+4
		       D4_ACT_Q,
		       TO_CHAR(D4_DIFF_Q, '999,999,999')||'%' D4_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q, '999,999,999')||'%' D4_DIFF_SUM,
		       ----------------------- D+5
		       D5_ACT_Q,
		       TO_CHAR(D5_DIFF_Q, '999,999,999')||'%' D5_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q, '999,999,999')||'%' D5_DIFF_SUM,
		       ----------------------- D+6
		       D6_ACT_Q,
		       TO_CHAR(D6_DIFF_Q, '999,999,999')||'%' D6_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q, '999,999,999')||'%' D6_DIFF_SUM,
		       ----------------------- D+7
		       D7_ACT_Q,
		       TO_CHAR(D7_DIFF_Q, '999,999,999')||'%' D7_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q, '999,999,999')||'%' D7_DIFF_SUM,
		       ----------------------- D+8
		       D8_ACT_Q,
		       TO_CHAR(D8_DIFF_Q, '999,999,999')||'%' D8_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q, '999,999,999')||'%' D8_DIFF_SUM,
		       ----------------------- D+9
		       D9_ACT_Q,
		       TO_CHAR(D9_DIFF_Q, '999,999,999')||'%' D9_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q, '999,999,999')||'%' D9_DIFF_SUM,
		       ----------------------- D+10
		       D10_ACT_Q,		       
		       TO_CHAR(D10_DIFF_Q, 'FM990.099')||'%' D10_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q, 'FM990.099')||'%' D10_DIFF_SUM,
		       ----------------------- D+11
		       D11_ACT_Q,
		       TO_CHAR(D11_DIFF_Q, 'FM990.099')||'%' D11_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q, '999,999,999')||'%' D11_DIFF_SUM,
		       ----------------------- D+12
		       D12_ACT_Q,
		       TO_CHAR(D12_DIFF_Q, 'FM990.099')||'%' D12_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q, '999,999,999')||'%' D12_DIFF_SUM,
		       ----------------------- D+13
		       D13_ACT_Q,
		       TO_CHAR(D13_DIFF_Q, 'FM990.99')||'%' D13_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q, '999,999,999')||'%' D13_DIFF_SUM,
		       ------------------------D+14
		       D14_ACT_Q,
		       TO_CHAR(D14_DIFF_Q,'FM990.099')||'%' D14_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q, 'FM990.099')||'%' D14_DIFF_SUM,
		       ------------------------D+15
		       D15_ACT_Q,
		       TO_CHAR(D15_DIFF_Q,'FM990.099')||'%' D15_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q, 'FM990.099')||'%' D15_DIFF_SUM,
		       ------------------------D+16
		       D16_ACT_Q,
		       TO_CHAR(D16_DIFF_Q, 'FM990.099')||'%' D16_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q, 'FM990.099')||'%' D16_DIFF_SUM,
		       ------------------------D+17
		       D17_ACT_Q,
		       TO_CHAR(D17_DIFF_Q, 'FM990.099')||'%' D17_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q, 'FM990.099')||'%' D17_DIFF_SUM,
		       ------------------------D+18
		       D18_ACT_Q,
		       TO_CHAR(D18_DIFF_Q,'FM990.099')||'%' D18_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q, 'FM990.099')||'%' D18_DIFF_SUM,
		       ------------------------D+19
		       D19_ACT_Q,
		       TO_CHAR(D19_DIFF_Q, 'FM990.099')||'%' D19_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q, 'FM990.099')||'%' D19_DIFF_SUM,
		       ------------------------D+20
		       D20_ACT_Q,
		       TO_CHAR(D20_DIFF_Q, 'FM990.099')||'%' D20_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q, 'FM990.099')||'%' D20_DIFF_SUM,
		       --------------------------------
		       D21_ACT_Q,
		       TO_CHAR(D21_DIFF_Q, 'FM990.099')||'%' D21_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q, 'FM990.099')||'%' D21_DIFF_SUM,
		       --------------------------------
		       D22_ACT_Q,
		       TO_CHAR(D22_DIFF_Q, 'FM990.099')||'%' D22_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q, 'FM990.099')||'%' D22_DIFF_SUM,
		       --------------------------------
		       D23_ACT_Q,
		       TO_CHAR(D23_DIFF_Q,'FM990.099')||'%' D23_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q, 'FM990.099')||'%' D23_DIFF_SUM,
		       --------------------------------
		       D24_ACT_Q,
		       TO_CHAR(D24_DIFF_Q,'FM990.099')||'%' D24_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q, 'FM990.099')||'%' D24_DIFF_SUM,
		       --------------------------------
		       D25_ACT_Q,
		       TO_CHAR(D25_DIFF_Q, 'FM990.099')||'%' D25_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q, 'FM990.099')||'%' D25_DIFF_SUM,
		       --------------------------------
		       D26_ACT_Q,
		       TO_CHAR(D26_DIFF_Q, 'FM990.099')||'%' D26_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q, 'FM990.099')||'%' D26_DIFF_SUM,
		       --------------------------------
		       D27_ACT_Q,
		       TO_CHAR(D27_DIFF_Q, 'FM990.099')||'%' D27_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q, 'FM990.099')||'%' D27_DIFF_SUM,
		       --------------------------------
		       D28_ACT_Q,
		       TO_CHAR(D28_DIFF_Q, 'FM990.099')||'%' D28_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q+D28_DIFF_Q, 'FM990.099')||'%' D28_DIFF_SUM,
		       --------------------------------
		       D29_ACT_Q,
		       TO_CHAR(D29_DIFF_Q, 'FM990.099')||'%' D29_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q+D28_DIFF_Q+D29_DIFF_Q, 'FM990.099')||'%' D29_DIFF_SUM,
		       --------------------------------
		       D30_ACT_Q,
		       TO_CHAR(D30_DIFF_Q, 'FM990.099')||'%' D30_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q+D28_DIFF_Q+D29_DIFF_Q+D30_DIFF_Q, 'FM990.099')||'%' D30_DIFF_SUM
		       --------------------------------   
		FROM
		    (
		    SELECT ITEM_ID_GB, 
		           ITEM_NM,
		           NO,
		           PARENT_HID,
		           HID,
		           HID_NM,
		           OBJ_QTY,
		           D0_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D0_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D0_DIFF_Q, 
		           D1_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D1_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D1_DIFF_Q,
		           D2_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D2_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D2_DIFF_Q,
		           D3_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D3_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D3_DIFF_Q,
		           D4_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D4_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D4_DIFF_Q,
		           D5_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D5_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D5_DIFF_Q,
		           D6_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D6_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D6_DIFF_Q,
		           D7_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D7_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D7_DIFF_Q,
		           D8_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D8_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D8_DIFF_Q,
		           D9_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D9_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D9_DIFF_Q,
		           D10_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D10_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D10_DIFF_Q,
		           
		           D11_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D11_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D11_DIFF_Q,		           
		           D12_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D12_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D12_DIFF_Q,
		           D13_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D13_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D13_DIFF_Q,
		           D14_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D14_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D14_DIFF_Q,
		           D15_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D15_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D15_DIFF_Q,
		           D16_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D16_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D16_DIFF_Q,
		           D17_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D17_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D17_DIFF_Q,
		           D18_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D18_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D18_DIFF_Q,
		           D19_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D19_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D19_DIFF_Q,
		           D20_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D20_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D20_DIFF_Q,
		           D21_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D21_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D21_DIFF_Q,
		           D22_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D22_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D22_DIFF_Q,
		           D23_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D23_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D23_DIFF_Q,
		           D24_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D24_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D24_DIFF_Q,
		           D25_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D25_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D25_DIFF_Q,
		           D26_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D26_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D26_DIFF_Q,
		           D27_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D27_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D27_DIFF_Q,
		           D28_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D28_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D28_DIFF_Q,
		           
		           D29_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D30_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D29_DIFF_Q,
		           D30_ACT_Q,
		           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D30_ACT_Q/OBJ_QTY)*100,1)
		                                  ELSE 0
		           END) D30_DIFF_Q
		    FROM
		        (
		        SELECT ITEM_ID_GB, 
		               MAX(ITEM_NM) ITEM_NM,
		               NO, 
		               PARENT_HID, 
		               DECODE(NO,2,HID,PARENT_HID) HID,
		               MAX(DECODE(NO,2,HID_NM,PARENT_NM)) HID_NM,    --조직
		               SUM(OBJ_QTY) OBJ_QTY,                         --목표      
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD,     'YYYYMMDD') THEN ACT_QTY ELSE 0 END)         D0_ACT_Q,     --당일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+1,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)         D1_ACT_Q,     --+1일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+2 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D2_ACT_Q,      --+2일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+3 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D3_ACT_Q,      --+3일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+4 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D4_ACT_Q,      --+4일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+5 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D5_ACT_Q,      --+5일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+6 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D6_ACT_Q,      --+6일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+7 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D7_ACT_Q,      --+7일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+8 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D8_ACT_Q,      --+8일	 	               
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+9 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D9_ACT_Q,      --+9일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+10,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D10_ACT_Q,     --+10일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+11,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D11_ACT_Q,     --+11일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+12,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D12_ACT_Q,     --+12일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+13,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D13_ACT_Q,     --+13일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+14,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D14_ACT_Q,     --+14일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+15,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D15_ACT_Q,     --+15일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+16,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D16_ACT_Q,     --+16일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+17,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D17_ACT_Q,     --+17일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+18,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D18_ACT_Q,     --+18일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+19,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D19_ACT_Q,     --+19일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+20,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D20_ACT_Q,     --+20일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+21,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D21_ACT_Q,     --+21일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+22,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D22_ACT_Q,     --+22일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+23,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D23_ACT_Q,     --+23일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+24,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D24_ACT_Q,     --+24일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+25,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D25_ACT_Q,     --+25일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+26,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D26_ACT_Q,     --+26일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+27,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D27_ACT_Q,     --+27일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+28,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D28_ACT_Q,     --+28일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+29,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D29_ACT_Q,     --+29일
		               SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+30,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D30_ACT_Q      --+30일
		        FROM
		            (
		            SELECT *        
		             FROM   
		                (
		                SELECT ITEM_ID,
		                       PARENT_HID,
		                       HID,
		                       YYYYDD,
		                       MAX(PARENT_NM)   PARENT_NM,
		                       MAX(HID_NM)      HID_NM,
		                       SUM(OBJ_QTY)     OBJ_QTY,
		                       SUM(ACT_QTY)     ACT_QTY       
		                FROM
		                    (
		                    SELECT ITEM_ID,
		                           YYYYDD,
		                           SALES_LOC,  
		                           OBJ_QTY,
		                           ACT_QTY
		                    FROM
		                        ( 
                                 ---- NFOS_SALES_PLAN_WEEKLY(일별)  ------ 
                                 SELECT ITEM_ID, 
                                        YYYYMMDD YYYYDD, 
                                        SALES_LOC,  
                                	    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) OBJ_QTY,
                                	    0 ACT_QTY,
                                	    1 GUBUN
                                 FROM NFOS_SALES_PLAN_WEEKLY NP
						    #if("$!{sdate}" == "")	   
								WHERE NP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('21000101', 'YYYYMMDD'), 'YYYYMMDD') 
		                          AND TO_CHAR(TO_DATE('21000101', 'YYYYMMDD')+30, 'YYYYMMDD') 						                   
						    #else
								WHERE NP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 'YYYYMMDD') 
		                          AND TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+30, 'YYYYMMDD')  
					        #end	                                                     	                    						                   
                                  AND NP.VERSION = 
                                		           (
		                                			--월별(MAX_VERSION)
		                                			SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
		                                			       DISTINCT VERSION
		                                			       FROM  NFOS_SALES_PLAN_WEEKLY VER
											    #if("$!{sdate}" == "")	   
													WHERE NP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('21000101', 'YYYYMMDD'), 'YYYYMMDD') 
							                          AND TO_CHAR(TO_DATE('21000101', 'YYYYMMDD')+30, 'YYYYMMDD') 						                   
											    #else
													WHERE NP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 'YYYYMMDD') 
							                          AND TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+30, 'YYYYMMDD')  
										        #end	
		                                			  AND YYYYMMDD    = NP.YYYYMMDD
		                                			  AND SEQ         = NP.SEQ
		                                			  AND ROWNUM = 1
                                                   )  
                                GROUP BY ITEM_ID, YYYYMMDD, SALES_LOC 
		                        UNION ALL
		                        --실적		                        
		                        SELECT PROD_CODE,
		                               CNFM_DATE YYYYDD,  
		                               DEPT_CODE,
		                               0              OBJ_QTY,
		                               SUM(SELL_BOX)  ACT_QTY,  --샘플
		                               2          GUBUN         --실적
		                         FROM SDRDT103 SDR
						#if("$!{sdate}" == "")	   
								WHERE SDR.CNFM_DATE BETWEEN TO_CHAR(TO_DATE('21000101', 'YYYYMMDD'), 'YYYYMMDD') 
		                          AND TO_CHAR(TO_DATE('21000101', 'YYYYMMDD')+30, 'YYYYMMDD')						          	 		 	
						#else
								WHERE SDR.CNFM_DATE BETWEEN TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 'YYYYMMDD') 
		                          AND TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+30, 'YYYYMMDD')						          	 		 				
						#end                       
								 GROUP BY PROD_CODE, CNFM_DATE, DEPT_CODE
							    ) 
		                   ) MAIN,
		                   (
						    SELECT
						#if ("$!{org_GB1}" == "1")
							   HR3.HID         HID3,
							   HR1.HID         HID ,           --영업본부
							   HR1.HID_NAME    HID_NM,      
							   '0000'          PARENT_HID,     --농심
							   '농심'           PARENT_NM
						#elseif ("$!{org_GB2}" == "2")
							   HR3.HID         HID3,
							   HR2.HID         HID ,           --영업부
							   HR2.HID_NAME    HID_NM,      
							   HR1.HID         PARENT_HID,     --영업본부
							   HR1.HID_NAME    PARENT_NM
						#else
							   HR3.HID         HID,            --영업지점
							   HR3.HID_NAME    HID_NM,      
							   HR2.HID         PARENT_HID,     --영업부
							   HR2.HID_NAME    PARENT_NM     
						#end	                  
						      FROM HRCHY HR1, HRCHY HR2, HRCHY HR3
						    WHERE HR1.HID = HR2.PARENT_HID
						      AND HR2.HID = HR3.PARENT_HID
						      AND HR1.LVL = '20'
						      AND HR2.LVL = '30'
						      AND HR3.LVL = '40'
						      AND HR1.HTYPE = '영업'
						      AND HR2.HTYPE = '영업'
						      AND HR3.HTYPE = '영업'
				        ) SITE
			    #if (("$!{org_GB1}" == "1") || ("$!{org_GB2}" == "2"))
				WHERE MAIN.SALES_LOC = SITE.HID3
				#else
				WHERE MAIN.SALES_LOC = SITE.HID
				#end
		                GROUP BY ITEM_ID, PARENT_HID, HID, YYYYDD
		                ) A,
		                (
				    --품종분류(공통)
				    SELECT 
				    #if($!{item_GB1} == "1")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD1.CD         ITEM_ID_GB,       --(대)
					   CD1.CD_NAME    ITEM_NM  
				    #elseif($!{item_GB2} == "2")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD2.CD         ITEM_ID_GB,       --(중)
					   CD2.CD_NAME    ITEM_NM  
				    #elseif($!{item_GB3} == "3") 
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD3.CD         ITEM_ID_GB,       --(소)
					   CD3.CD_NAME    ITEM_NM      
				    #else 
					   ITEM.ITEM_ID   ITEM_ID_GB,
					   ITEM.ITEM_NAME ITEM_NM    
				    #end        
				    FROM ITEM_MST ITEM, 
					     CODE_MST CD1,       --(대)
					     CODE_MST CD2,       --(중)
					     CODE_MST CD3        --(소)
				    WHERE ITEM.SALES_CAT01 = CD1.CD
				      AND ITEM.SALES_CAT02 = CD2.CD
				      AND ITEM.SALES_CAT03 = CD3.CD
				      AND CD1.CD_GRP = 'SALES_CAT1'
				      AND CD2.CD_GRP = 'SALES_CAT2'
				      AND CD3.CD_GRP = 'SALES_CAT3'               
				) ITEM_MST
			    #if(($!{item_GB1} == "1")||($!{item_GB2} == "2")||($!{item_GB3} == "3"))
				WHERE A.ITEM_ID = ITEM_MST.ITEM_ID_S
			    #else 
				WHERE A.ITEM_ID = ITEM_MST.ITEM_ID_GB    
			    #end
		           ) GR1,
		           (
		            SELECT 1 NO FROM DUAL 
		            UNION
		            SELECT 2 NO FROM DUAL
		           ) B,
			      (
			   #if("$!{sdate}" == "")
			      SELECT TO_DATE('21000101','YYYYMMDD') DD 
				     FROM DUAL 	
			   #else
			      SELECT TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD') DD 
				     FROM DUAL 				
			   #end	    
			      ) DAY_D   
		        GROUP BY ITEM_ID_GB, NO, PARENT_HID, DECODE(NO,2,HID,PARENT_HID)  
		        --ORDER BY ITEM_ID, NO, PARENT_HID  
		        )
		    )    
		ORDER BY ITEM_ID_GB, PARENT_HID, NO, HID        
     </query>
  	  
 	<!-- 판매현황 품종별 조회(월/주간) start --> 
 	<query id="fc_05090_itemSalesMonitoring_tailer" paging="true">
	     
    #if ("$!{periodGB2}" == "")	
            --판매현황조회2(월별)  
 		    SELECT /* fc_05090_itemSalesMonitoring_tailer */ 
		           NO,
		           CD1,
		           CD2,  
		           CD1_NM,    		           
		           LPAD(' ',(NO+2)*1,' ')||CD2_NM CD2_NM, 
		           OBJ_QTY,
     		       ----------------------- M0
    		       M0_ACT_Q,
    		       TO_CHAR(M0_DIFF_Q, '999,999,999')||'%' M0_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q, '999,999,999')||'%' M0_DIFF_SUM,
    		       ----------------------- M+1
    		       M1_ACT_Q,
    		       TO_CHAR(M1_DIFF_Q, '999,999,999')||'%' M1_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q, '999,999,999')||'%' M1_DIFF_SUM,
    		       ----------------------- M+2
    		       M2_ACT_Q,
    		       TO_CHAR(M2_DIFF_Q, '999,999,999')||'%' M2_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q, '999,999,999')||'%' M2_DIFF_SUM,
    		       ----------------------- M+3    
    		       M3_ACT_Q,
    		       TO_CHAR(M3_DIFF_Q, '999,999,999')||'%' M3_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q, '999,999,999')||'%' M3_DIFF_SUM,
    		       ----------------------- M+4
    		       M4_ACT_Q,
    		       TO_CHAR(M4_DIFF_Q, '999,999,999')||'%' M4_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q, '999,999,999')||'%' M4_DIFF_SUM,
    		       ----------------------- M+5
    		       M5_ACT_Q,
    		       TO_CHAR(M5_DIFF_Q, '999,999,999')||'%' M5_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q, '999,999,999')||'%' M5_DIFF_SUM,
    		       ----------------------- M+6
    		       M6_ACT_Q,
    		       TO_CHAR(M6_DIFF_Q, '999,999,999')||'%' M6_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q, '999,999,999')||'%' M6_DIFF_SUM,
    		       ----------------------- M+7
    		       M7_ACT_Q,
    		       TO_CHAR(M7_DIFF_Q, '999,999,999')||'%' M7_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q, '999,999,999')||'%' M7_DIFF_SUM,
    		       -----------------------  M+8
    		       M8_ACT_Q,
    		       TO_CHAR(M8_DIFF_Q, '999,999,999')||'%' M8_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q, '999,999,999')||'%' M8_DIFF_SUM,
    		       -----------------------  M+9
    		       M9_ACT_Q,
    		       TO_CHAR(M9_DIFF_Q, '999,999,999')||'%' M9_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q+M9_DIFF_Q, '999,999,999')||'%' M9_DIFF_SUM,
    		       -----------------------  M+10
    		       M10_ACT_Q,
    		       TO_CHAR(M10_DIFF_Q, '999,999,999')||'%' M10_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q
    		       +M9_DIFF_Q+M10_DIFF_Q, '999,999,999')||'%' M10_DIFF_SUM,
    		       -----------------------  M+11
    		       M11_ACT_Q,
    		       TO_CHAR(M11_DIFF_Q, '999,999,999')||'%' M11_DIFF_Q,
    		       TO_CHAR(M0_DIFF_Q+M1_DIFF_Q+M2_DIFF_Q+M3_DIFF_Q+M4_DIFF_Q+M5_DIFF_Q+M6_DIFF_Q+M7_DIFF_Q+M8_DIFF_Q
    		       +M9_DIFF_Q+M10_DIFF_Q+M11_DIFF_Q, '999,999,999')||'%' M11_DIFF_SUM
		     FROM
		         ( 		    
		           SELECT
			           NO,
			           CD1,
			           CD2,
			           CD1_NM,    		           
			           CD2_NM,
			           OBJ_QTY,
		               M0_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M0_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M0_DIFF_Q, 
    		           M1_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M1_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M1_DIFF_Q,
    		           M2_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M2_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M2_DIFF_Q,
    		           M3_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M3_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M3_DIFF_Q,
    		           M4_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M4_ACT_Q/OBJ_QTY)*100,1)
    	                                     ELSE 0
       	               END) M4_DIFF_Q,
    		           M5_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M5_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M5_DIFF_Q,
    		           M6_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M6_ACT_Q/OBJ_QTY)*100,1)
    	                                     ELSE 0
      	               END) M6_DIFF_Q,
    		           M7_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M7_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M7_DIFF_Q,
    		           M8_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M8_ACT_Q/OBJ_QTY)*100,1)
    	                                     ELSE 0
      	               END) M8_DIFF_Q,
    		           M9_ACT_Q,
    		          (CASE WHEN (OBJ_QTY>0) THEN ROUND((M9_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M9_DIFF_Q,
    	               M10_ACT_Q,
      	              (CASE WHEN (OBJ_QTY>0) THEN ROUND((M10_ACT_Q/OBJ_QTY)*100,1)
    		                                 ELSE 0
    		           END) M10_DIFF_Q,
    		           M11_ACT_Q,
                      (CASE WHEN (OBJ_QTY>0) THEN ROUND((M11_ACT_Q/OBJ_QTY)*100,1)
      	                                     ELSE 0
    		           END) M11_DIFF_Q    
	              FROM         
	                 (
	                 SELECT NO,
	                        CD1,
	        	            DECODE(NO,2,CD2,CD1) CD2,
	        	            MAX(CD1_NM) CD1_NM,
	        	            MAX(DECODE(NO,2,CD2_NM,CD1_NM||'계')) CD2_NM,
	        	            SUM(OBJ_QTY) OBJ_QTY,
	        	            --SUM(ACT_QTY),
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,0), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M0_ACT_Q,       --M0실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,1), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M1_ACT_Q,       --M1실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,2), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M2_ACT_Q,       --M2실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,3), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M3_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,4), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M4_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,5), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M5_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,6), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M6_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,7), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M7_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,8), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M8_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,9), 'YYYYMM') THEN ACT_QTY ELSE 0 END)          M9_ACT_Q,       --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,10), 'YYYYMM') THEN ACT_QTY ELSE 0 END)         M10_ACT_Q,      --M3실적
			                SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,11), 'YYYYMM') THEN ACT_QTY ELSE 0 END)         M11_ACT_Q               	            	                             
	                  FROM     
	                       (    
	                       SELECT *   
	                       FROM    
	                           (
	                           SELECT ITEM_ID,
	                                  YYYYMM,
	                                  OBJ_QTY,
	                                  ACT_QTY                                        
	                           FROM
	                               (
			                 		 --목표 (MAX 버전)
	                                 ---- NFOS_SALES_PLAN_MONTHLY  ------
	                                 SELECT ITEM_ID, YYYYMM, 
	                                	    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) OBJ_QTY,
	                                	    0 ACT_QTY,
	                                	    1 GUBUN
	                                 FROM NFOS_SALES_PLAN_MONTHLY NP
								   #if ("$!{create_month}" == "")				 
									WHERE NP.YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
									  AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
								   #else
									WHERE NP.YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
									   AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 11), 'YYYYMM') 				 
								   #end	
									   AND NP.VERSION = 
													   (
                                                        --월별(MAX_VERSION)
							                            SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_MONTHLY_I01) */
						                                       DISTINCT VERSION
                                                        FROM  NFOS_SALES_PLAN_MONTHLY VER
													   #if ("$!{create_month}" == "")				 
														WHERE YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
														  AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
													   #else
														WHERE YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
														   AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 11), 'YYYYMM') 				 
													   #end	
                                                         AND YYYYMM    = NP.YYYYMM
                                                         AND SEQ       = NP.SEQ
                                                         AND ROWNUM = 1
					 								   )    
					                 GROUP BY ITEM_ID, YYYYMM 
					                 UNION ALL
					                  --판매실적
									 SELECT PROD_CODE,
										    TO_CHAR(TO_DATE(SDR.CNFM_DATE, 'YYYYMMDD'), 'YYYYMM') CNFM_DATE,
										    0              OBJ_QTY,
										    SUM(SELL_BOX)  ACT_QTY,
										    2              GUBUN     --실적
						               FROM SDRDT103 SDR
						              WHERE SDR.SELL_GUBN_CODE IN ('01', '02')
									    #if ("$!{create_month}" == "")
										  AND SDR.CNFM_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001','YYYYMM'), 0), 'YYYYMM') 
										  AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 						          	 
									    #else
										  AND SDR.CNFM_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
										  AND TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE ('$!{create_month}', '-', ''), 'YYYYMM'), 11), 'YYYYMM') 						          	 		 
									    #end   
									  GROUP BY PROD_CODE, TO_CHAR(TO_DATE(SDR.CNFM_DATE, 'YYYYMMDD'), 'YYYYMM') 
	                                )
	                            ) MAIN,  
	                            (
	                           --품종분류(공통)
				    SELECT  
				    #if($!{item_GB1} == "1")
		   		           ITEM.ITEM_ID   ITEM_ID_S,
				           '000'          CD1,       --농심계
				           '농심'         CD1_NM,  
				           CD1.CD         CD2,       --품종(대)
				           CD1.CD_NAME    CD2_NM
				    #elseif($!{item_GB2} == "2")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD1.CD         CD1,       --(대)
					   CD1.CD_NAME    CD1_NM,
					   CD2.CD         CD2,       --(중)
					   CD2.CD_NAME    CD2_NM
				    #else 
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD2.CD         CD1,       --(중)
					   CD2.CD_NAME    CD1_NM,
					   CD3.CD         CD2,       --(소)
					   CD3.CD_NAME    CD2_NM 
				    #end       
	                            FROM ITEM_MST ITEM, 
	                                 CODE_MST CD1,       --(대)
	                                 CODE_MST CD2,       --(중)
	                                 CODE_MST CD3        --(소)
	                            WHERE ITEM.SALES_CAT01 = CD1.CD
	                              AND ITEM.SALES_CAT02 = CD2.CD
	                              AND ITEM.SALES_CAT03 = CD3.CD
	                              AND CD1.CD_GRP = 'SALES_CAT1'
	                              AND CD2.CD_GRP = 'SALES_CAT2'
	                              AND CD3.CD_GRP = 'SALES_CAT3'                               
	                           ) ITEM
	                         WHERE MAIN.ITEM_ID = ITEM.ITEM_ID_S  
	                     ) A,
	                     (
	                        SELECT 1 NO FROM DUAL
	                        UNION
	                        SELECT 2 NO FROM DUAL
	                     ) B,
	                    (
	#if ("$!{create_month}" == "") 
			        SELECT TO_DATE('210001','YYYYMM') MM FROM DUAL 
	#else
			        SELECT TO_DATE(REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM FROM DUAL 
	#end                  
	                         ) DAY_M    	 	  
			GROUP BY CD1, DECODE(NO,2,CD2,CD1), NO
			--ORDER BY CD1, CD2, NO
	        )
     )   	 
	ORDER BY CD1, CD2, NO
   
	#else 
     SELECT 
            NO,
		    CD1,
		    CD2,
		    CD1_NM,    		           
		    LPAD(' ',(NO+2)*1,' ')||CD2_NM CD2_NM,
		    OBJ_QTY,
            -----------------------
            W0_ACT_Q,
            W0_DIFF_Q,
            W0_DIFF_Q W0_DIFF_SUM,
            -----------------------
            W1_ACT_Q,
            W1_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q) W1_DIFF_SUM,
            --------------------------------
            W2_ACT_Q,
            W2_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q) W2_DIFF_SUM,
            --------------------------------       
            W3_ACT_Q,
            W3_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q) W3_DIFF_SUM,
            --------------------------------
            W4_ACT_Q,
            W4_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q) W4_DIFF_SUM,
            --------------------------------
            W5_ACT_Q,
            W5_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q) W5_DIFF_SUM,
            --------------------------------
            W6_ACT_Q,
            W6_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q) W6_DIFF_SUM,
            --------------------------------
            W7_ACT_Q,
            W7_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q) W7_DIFF_SUM,
            --------------------------------
            W8_ACT_Q,
            W8_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q) W8_DIFF_SUM,
            --------------------------------
            W9_ACT_Q,
            W9_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q+W9_DIFF_Q) W9_DIFF_SUM,
           --------------------------------
            W10_ACT_Q,
            W10_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q+W9_DIFF_Q+W10_DIFF_Q) W10_DIFF_SUM,
           --------------------------------
            W11_ACT_Q,
            W11_DIFF_Q,
           (W0_DIFF_Q+W1_DIFF_Q+W2_DIFF_Q+W3_DIFF_Q+W4_DIFF_Q+W5_DIFF_Q+W6_DIFF_Q+W7_DIFF_Q+W8_DIFF_Q+W9_DIFF_Q+W10_DIFF_Q+W11_DIFF_Q) W11_DIFF_SUM
      FROM
	     		   (  
	     		    SELECT  
	    		           NO,
	    		           CD1,
	    		           CD2,
	    		           CD1_NM,    		           
	    		           CD2_NM,
	    		           OBJ_QTY,	           
				           W0_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W0_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W0_DIFF_Q, 
				           W1_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W1_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W1_DIFF_Q,
				           W2_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W2_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W2_DIFF_Q,
				           W3_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W3_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W3_DIFF_Q,
				           W4_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W4_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W4_DIFF_Q,
				           W5_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W5_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W5_DIFF_Q,
				           W6_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W6_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W6_DIFF_Q,
				           W7_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W7_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W7_DIFF_Q,
				           W8_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W8_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W8_DIFF_Q,
				           W9_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W9_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W9_DIFF_Q,
				           W10_ACT_Q, 
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W10_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W10_DIFF_Q,
				           W11_ACT_Q,
				           (CASE WHEN (OBJ_QTY>0) THEN ROUND((W11_ACT_Q/OBJ_QTY)*100,1)
				                                  ELSE 0
				           END) W11_DIFF_Q             
		              FROM         
		                 (
		                 SELECT NO,
	                            CD1,
	            	            DECODE(NO,2,CD2,CD1) CD2,
	            	            MAX(CD1_NM) CD1_NM,
	            	            MAX(DECODE(NO,2,CD2_NM,CD1_NM||'계')) CD2_NM,
	            	            SUM(OBJ_QTY) OBJ_QTY,
	            	            --SUM(ACT_QTY),
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+(-7*1), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W0_ACT_Q,       --W0실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*0), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W1_ACT_Q,       --W1실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*1), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W2_ACT_Q,       --W2실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*2), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W3_ACT_Q,       --W3실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*3), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W4_ACT_Q,       --W4실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*4), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W5_ACT_Q,       --W5실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*5), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W6_ACT_Q,       --W6실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*6), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W7_ACT_Q,       --W7실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*7), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W8_ACT_Q,       --W8실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*8), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W9_ACT_Q,       --W9실적 
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*9), 'YYYYWW') THEN ACT_QTY ELSE 0 END)          W10_ACT_Q,      --W10실적
	                           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*10), 'YYYYWW') THEN ACT_QTY ELSE 0 END)         W11_ACT_Q       --W11실적
		                  FROM     
		                       (    
		                       SELECT *   
		                       FROM    
		                           ( 
		                           SELECT ITEM_ID,
		                                  YYYYWW,
		                                  OBJ_QTY,
		                                  ACT_QTY                                        
		                           FROM
		                               (
		                                 ---- NFOS_SALES_PLAN_MTHLY  ------ 
		                                 SELECT ITEM_ID, 
		                                        CAL.YYYYWW YYYYWW, 
		                                   	    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) OBJ_QTY,
		                                	    0 ACT_QTY,
		                                	    1 GUBUN
		                                 FROM NFOS_SALES_PLAN_WEEKLY NP, CAL_MST CAL
									#if("$!{sdate}" == "")
					  			        WHERE NP.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
								          AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')		          
									#else  		    
									WHERE NP.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
								          AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     
									#end		                       			       
										  AND NP.VERSION = 
											         (
			                                			--월별(MAX_VERSION)
			                                			SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
			                                			       DISTINCT VERSION
			                                			       FROM  NFOS_SALES_PLAN_WEEKLY VER
													#if("$!{sdate}" == "")
									  			        WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
												          AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')		          
													#else  		    
														WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
												          AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     
													#end		                       			       
			                                			  AND YYYYMMDD    = NP.YYYYMMDD
			                                			  AND SEQ         = NP.SEQ
			                                			  AND ROWNUM = 1
											          ) 
		                                   AND NP.YYYYMMDD = CAL.YYYYMMDD        		                            
		                                  GROUP BY ITEM_ID, CAL.YYYYWW 
					                  UNION ALL
					                  --거래처실적 --------------------
										 SELECT PROD_CODE,
										        CAL.YYYYWW,
										        0              OBJ_QTY,
										        SUM(SELL_BOX)  ACT_QTY,
										        2          GUBUN     --실적
										  FROM SDRDT103 SDR, CAL_MST CAL
										 WHERE SDR.CNFM_DATE = CAL.YYYYMMDD
										   AND SDR.SELL_GUBN_CODE IN ('01', '02')
									      #if("$!{sdate}" == "")
										   AND SDR.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD') 
										   AND TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD') 
									      #else 
										   AND SDR.CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
										   AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 2), 'YYYYMMDD') 	      
									      #end	                 
										 GROUP BY  PROD_CODE, CAL.YYYYWW          
		                                )
		                            ) MAIN,
		                            (
		                           --품종분류(공통)
							    SELECT  
							    #if($!{item_GB1} == "1")
								   ITEM.ITEM_ID   ITEM_ID_S,
								   '000'          CD1,       --농심계
								   '농심'         CD1_NM,  
								   CD1.CD         CD2,       --품종(대)
								   CD1.CD_NAME    CD2_NM
							    #elseif($!{item_GB2} == "2")
								   ITEM.ITEM_ID   ITEM_ID_S,
								   CD1.CD         CD1,       --(대)
								   CD1.CD_NAME    CD1_NM,
								   CD2.CD         CD2,       --(중)
								   CD2.CD_NAME    CD2_NM
							    #else 
								   ITEM.ITEM_ID   ITEM_ID_S,
								   CD2.CD         CD1,       --(중)
								   CD2.CD_NAME    CD1_NM,
								   CD3.CD         CD2,       --(소)
								   CD3.CD_NAME    CD2_NM 
							    #end    
	                                FROM ITEM_MST ITEM, 
		                                 CODE_MST CD1,       --(대)
		                                 CODE_MST CD2,       --(중)
		                                 CODE_MST CD3        --(소)
		                            WHERE ITEM.SALES_CAT01 = CD1.CD
		                              AND ITEM.SALES_CAT02 = CD2.CD
		                              AND ITEM.SALES_CAT03 = CD3.CD
		                              AND CD1.CD_GRP = 'SALES_CAT1'
		                              AND CD2.CD_GRP = 'SALES_CAT2'
		                              AND CD3.CD_GRP = 'SALES_CAT3'                               
		                           ) ITEM
		                         WHERE MAIN.ITEM_ID = ITEM.ITEM_ID_S   	
		                     ) A,
		                     (
		                        SELECT 1 NO FROM DUAL
		                        UNION
		                        SELECT 2 NO FROM DUAL
		                     ) B,
		                     ( 
		#if("$!{sdate}" == "")
					SELECT NEXT_DAY(TO_DATE('21000101','YYYYMMDD')-7, 2) WW --해당 첫주
					  FROM DUAL
		#else
					SELECT NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')-7, 2) WW --해당 첫주
					  FROM DUAL
		#end	              	              
				      ) DAY_WW       
			GROUP BY CD1, DECODE(NO,2,CD2,CD1), NO
			)	 
		)	
	ORDER BY CD1, CD2, NO  
	#end 
 
    </query>                       
 	<!-- 판매현황 품종별 조회(월/주간) end --> 

 	<!-- 판매현황 품종별 조회(일간) start --> 
 	<query id="fc_05100_itemSalesMonitoring_tailer" paging="true">
         SELECT /* fc_05100_itemSalesMonitoring_tailer */
                --NO,   
    		    CD1,
    		    CD2, 
    		    CD1_NM,    		           
    		    LPAD(' ',(NO+2)*1,' ')||CD2_NM CD2_NM,
    		    OBJ_QTY, 
		       ----------------------- D+0
		       D0_ACT_Q,
		       TO_CHAR(D0_DIFF_Q, '999,999,999')||'%' D0_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q, '999,999,999')||'%' D0_DIFF_SUM,
		       ----------------------- D+1
		       D1_ACT_Q,
		       TO_CHAR(D1_DIFF_Q, '999,999,999')||'%' D1_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q, '999,999,999')||'%' D1_DIFF_SUM,
		       ----------------------- D+2
		       D2_ACT_Q,
		       TO_CHAR(D2_DIFF_Q, '999,999,999')||'%' D2_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q, '999,999,999')||'%' D2_DIFF_SUM,
		       ----------------------- D+3
		       D3_ACT_Q,
		       TO_CHAR(D3_DIFF_Q, '999,999,999')||'%' D3_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q, '999,999,999')||'%' D3_DIFF_SUM,
		       ----------------------- D+4
		       D4_ACT_Q,
		       TO_CHAR(D4_DIFF_Q, '999,999,999')||'%' D4_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q, '999,999,999')||'%' D4_DIFF_SUM,
		       ----------------------- D+5
		       D5_ACT_Q,
		       TO_CHAR(D5_DIFF_Q, '999,999,999')||'%' D5_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q, '999,999,999')||'%' D5_DIFF_SUM,
		       ----------------------- D+6
		       D6_ACT_Q,
		       TO_CHAR(D6_DIFF_Q, '999,999,999')||'%' D6_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q, '999,999,999')||'%' D6_DIFF_SUM,
		       ----------------------- D+7
		       D7_ACT_Q,
		       TO_CHAR(D7_DIFF_Q, '999,999,999')||'%' D7_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q, '999,999,999')||'%' D7_DIFF_SUM,
		       ----------------------- D+8
		       D8_ACT_Q,
		       TO_CHAR(D8_DIFF_Q, '999,999,999')||'%' D8_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q, '999,999,999')||'%' D8_DIFF_SUM,
		       ----------------------- D+9
		       D9_ACT_Q,
		       TO_CHAR(D9_DIFF_Q, '999,999,999')||'%' D9_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q, '999,999,999')||'%' D9_DIFF_SUM,
		       ----------------------- D+10
		       D10_ACT_Q,		       
		       TO_CHAR(D10_DIFF_Q, 'FM990.099')||'%' D10_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q, 'FM990.099')||'%' D10_DIFF_SUM,
		       ----------------------- D+11
		       D11_ACT_Q,
		       TO_CHAR(D11_DIFF_Q, 'FM990.099')||'%' D11_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q, '999,999,999')||'%' D11_DIFF_SUM,
		       ----------------------- D+12
		       D12_ACT_Q,
		       TO_CHAR(D12_DIFF_Q, 'FM990.099')||'%' D12_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q, '999,999,999')||'%' D12_DIFF_SUM,
		       ----------------------- D+13
		       D13_ACT_Q,
		       TO_CHAR(D13_DIFF_Q, 'FM990.99')||'%' D13_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q, '999,999,999')||'%' D13_DIFF_SUM,
		       ------------------------D+14
		       D14_ACT_Q,
		       TO_CHAR(D14_DIFF_Q,'FM990.099')||'%' D14_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q, 'FM990.099')||'%' D14_DIFF_SUM,
		       ------------------------D+15
		       D15_ACT_Q,
		       TO_CHAR(D15_DIFF_Q,'FM990.099')||'%' D15_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q, 'FM990.099')||'%' D15_DIFF_SUM,
		       ------------------------D+16
		       D16_ACT_Q,
		       TO_CHAR(D16_DIFF_Q, 'FM990.099')||'%' D16_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q, 'FM990.099')||'%' D16_DIFF_SUM,
		       ------------------------D+17
		       D17_ACT_Q,
		       TO_CHAR(D17_DIFF_Q, 'FM990.099')||'%' D17_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q, 'FM990.099')||'%' D17_DIFF_SUM,
		       ------------------------D+18
		       D18_ACT_Q,
		       TO_CHAR(D18_DIFF_Q,'FM990.099')||'%' D18_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q, 'FM990.099')||'%' D18_DIFF_SUM,
		       ------------------------D+19
		       D19_ACT_Q,
		       TO_CHAR(D19_DIFF_Q, 'FM990.099')||'%' D19_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q, 'FM990.099')||'%' D19_DIFF_SUM,
		       ------------------------D+20
		       D20_ACT_Q,
		       TO_CHAR(D20_DIFF_Q, 'FM990.099')||'%' D20_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q, 'FM990.099')||'%' D20_DIFF_SUM,
		       --------------------------------
		       D21_ACT_Q,
		       TO_CHAR(D21_DIFF_Q, 'FM990.099')||'%' D21_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q, 'FM990.099')||'%' D21_DIFF_SUM,
		       --------------------------------
		       D22_ACT_Q,
		       TO_CHAR(D22_DIFF_Q, 'FM990.099')||'%' D22_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q, 'FM990.099')||'%' D22_DIFF_SUM,
		       --------------------------------
		       D23_ACT_Q,
		       TO_CHAR(D23_DIFF_Q,'FM990.099')||'%' D23_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q, 'FM990.099')||'%' D23_DIFF_SUM,
		       --------------------------------
		       D24_ACT_Q,
		       TO_CHAR(D24_DIFF_Q,'FM990.099')||'%' D24_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q, 'FM990.099')||'%' D24_DIFF_SUM,
		       --------------------------------
		       D25_ACT_Q,
		       TO_CHAR(D25_DIFF_Q, 'FM990.099')||'%' D25_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q, 'FM990.099')||'%' D25_DIFF_SUM,
		       --------------------------------
		       D26_ACT_Q,
		       TO_CHAR(D26_DIFF_Q, 'FM990.099')||'%' D26_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q, 'FM990.099')||'%' D26_DIFF_SUM,
		       --------------------------------
		       D27_ACT_Q,
		       TO_CHAR(D27_DIFF_Q, 'FM990.099')||'%' D27_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q, 'FM990.099')||'%' D27_DIFF_SUM,
		       --------------------------------
		       D28_ACT_Q,
		       TO_CHAR(D28_DIFF_Q, 'FM990.099')||'%' D28_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q+D28_DIFF_Q, 'FM990.099')||'%' D28_DIFF_SUM,
		       --------------------------------
		       D29_ACT_Q,
		       TO_CHAR(D29_DIFF_Q, 'FM990.099')||'%' D29_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q+D28_DIFF_Q+D29_DIFF_Q, 'FM990.099')||'%' D29_DIFF_SUM,
		       --------------------------------
		       D30_ACT_Q,
		       TO_CHAR(D30_DIFF_Q, 'FM990.099')||'%' D30_DIFF_Q,
		       TO_CHAR(D0_DIFF_Q+D1_DIFF_Q+D2_DIFF_Q+D3_DIFF_Q+D4_DIFF_Q+D5_DIFF_Q+D6_DIFF_Q+D7_DIFF_Q+D8_DIFF_Q+D9_DIFF_Q+D10_DIFF_Q+D11_DIFF_Q+D12_DIFF_Q+D13_DIFF_Q+D14_DIFF_Q
		       +D15_DIFF_Q+D16_DIFF_Q+D17_DIFF_Q+D18_DIFF_Q+D19_DIFF_Q+D20_DIFF_Q+D21_DIFF_Q+D22_DIFF_Q+D23_DIFF_Q+D24_DIFF_Q+D25_DIFF_Q+D26_DIFF_Q+D27_DIFF_Q+D28_DIFF_Q+D29_DIFF_Q+D30_DIFF_Q, 'FM990.099')||'%' D30_DIFF_SUM
		       --------------------------------   
          FROM
     		   ( 
     		    SELECT  
    		           NO,
    		           CD1,
    		           CD2,
    		           CD1_NM,    		           
    		           CD2_NM,
    		           OBJ_QTY, 
			           D0_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D0_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D0_DIFF_Q, 
			           D1_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D1_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D1_DIFF_Q,
			           D2_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D2_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D2_DIFF_Q,
			           D3_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D3_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D3_DIFF_Q,
			           D4_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D4_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D4_DIFF_Q,
			           D5_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D5_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D5_DIFF_Q,
			           D6_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D6_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D6_DIFF_Q,
			           D7_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D7_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D7_DIFF_Q,
			           D8_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D8_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D8_DIFF_Q,
			           D9_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D9_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D9_DIFF_Q,
			           D10_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D10_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D10_DIFF_Q,
			           
			           D11_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D11_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D11_DIFF_Q,		           
			           D12_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D12_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D12_DIFF_Q,
			           D13_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D13_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D13_DIFF_Q,
			           D14_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D14_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D14_DIFF_Q,
			           D15_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D15_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D15_DIFF_Q,
			           D16_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D16_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D16_DIFF_Q,
			           D17_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D17_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D17_DIFF_Q,
			           D18_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D18_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D18_DIFF_Q,
			           D19_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D19_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D19_DIFF_Q,
			           D20_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D20_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D20_DIFF_Q,
			           D21_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D21_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D21_DIFF_Q,
			           D22_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D22_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D22_DIFF_Q,
			           D23_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D23_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D23_DIFF_Q,
			           D24_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D24_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D24_DIFF_Q,
			           D25_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D25_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D25_DIFF_Q,
			           D26_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D26_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D26_DIFF_Q,
			           D27_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D27_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D27_DIFF_Q,
			           D28_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D28_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D28_DIFF_Q,
			           
			           D29_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D30_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D29_DIFF_Q,
			           D30_ACT_Q,
			           (CASE WHEN (OBJ_QTY>0) THEN ROUND((D30_ACT_Q/OBJ_QTY)*100,1)
			                                  ELSE 0
			           END) D30_DIFF_Q
	              FROM         
	                 (
	                 SELECT NO,
                            CD1,
            	            DECODE(NO,2,CD2,CD1) CD2,
            	            MAX(CD1_NM) CD1_NM,
            	            MAX(DECODE(NO,2,CD2_NM,CD1_NM||'계')) CD2_NM,
            	            SUM(OBJ_QTY) OBJ_QTY,
            	            --SUM(ACT_QTY),
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD,     'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D0_ACT_Q,     --당일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+1,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D1_ACT_Q,     --+1일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+2 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D2_ACT_Q,      --+2일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+3 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D3_ACT_Q,      --+3일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+4 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D4_ACT_Q,      --+4일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+5 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D5_ACT_Q,      --+5일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+6 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D6_ACT_Q,      --+6일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+7 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D7_ACT_Q,      --+7일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+8 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D8_ACT_Q,      --+8일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+9 ,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D9_ACT_Q,      --+9일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+10,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D10_ACT_Q,     --+10일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+11,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D11_ACT_Q,     --+11일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+12,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D12_ACT_Q,     --+12일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+13,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D13_ACT_Q,     --+13일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+14,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D14_ACT_Q,     --+14일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+15,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D15_ACT_Q,     --+15일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+16,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D16_ACT_Q,     --+16일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+17,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D17_ACT_Q,     --+17일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+18,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D18_ACT_Q,     --+18일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+19,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D19_ACT_Q,     --+19일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+20,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D20_ACT_Q,     --+20일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+21,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D21_ACT_Q,     --+21일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+22,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D22_ACT_Q,     --+22일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+23,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D23_ACT_Q,     --+23일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+24,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D24_ACT_Q,     --+24일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+25,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D25_ACT_Q,     --+25일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+26,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D26_ACT_Q,     --+26일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+27,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D27_ACT_Q,     --+27일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+28,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D28_ACT_Q,     --+28일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+29,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D29_ACT_Q,     --+29일
    		                SUM(CASE WHEN YYYYDD = TO_CHAR(DAY_D.DD+30,   'YYYYMMDD') THEN ACT_QTY ELSE 0 END)        D30_ACT_Q      --+30일         	            	                             
	                  FROM     
	                       (    
	                       SELECT *   
	                       FROM    
	                           (
	                           SELECT ITEM_ID,
	                                  YYYYDD,
	                                  OBJ_QTY,
	                                  ACT_QTY                                        
	                           FROM
	                               (
	                                 ---- NFOS_SALES_PLAN_WEEKLY(일별)  ------ 
	                                 SELECT ITEM_ID, 
	                                        YYYYMMDD YYYYDD, 
	                                	    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) OBJ_QTY,
	                                	    0 ACT_QTY,
	                                	    1 GUBUN
	                                 FROM NFOS_SALES_PLAN_WEEKLY NP
							    #if("$!{sdate}" == "")	   
									WHERE NP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('21000101', 'YYYYMMDD'), 'YYYYMMDD') 
			                          AND TO_CHAR(TO_DATE('21000101', 'YYYYMMDD')+30, 'YYYYMMDD') 						                   
							    #else
									WHERE NP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 'YYYYMMDD') 
			                          AND TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+30, 'YYYYMMDD')  
						        #end	                                                     	                    						                   
	                                  AND NP.VERSION = 
	                                		           (
			                                			--월별(MAX_VERSION)
			                                			SELECT /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
			                                			       VERSION
			                                			       FROM  NFOS_SALES_PLAN_WEEKLY VER
													#if("$!{sdate}" == "")
									  			        WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 2), 'YYYYMMDD') 
												          AND TO_CHAR(NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 1), 'YYYYMMDD')		          
													#else  		    
														WHERE YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
												          AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		                     
													#end		                       			       
			                                			  AND YYYYMMDD    = NP.YYYYMMDD
			                                			  AND SEQ         = NP.SEQ
			                                			  AND ROWNUM = 1
	                                                   )  
	                                GROUP BY ITEM_ID, YYYYMMDD 
			                        UNION ALL
			                        --실적		                        
			                        SELECT PROD_CODE,
			                               CNFM_DATE YYYYDD,  
			                               0              OBJ_QTY,
			                               SUM(SELL_BOX)  ACT_QTY,  --샘플
			                               2          GUBUN         --실적
			                         FROM SDRDT103 SDR
							#if("$!{sdate}" == "")	   
									WHERE SDR.CNFM_DATE BETWEEN TO_CHAR(TO_DATE('21000101', 'YYYYMMDD'), 'YYYYMMDD') 
			                          AND TO_CHAR(TO_DATE('21000101', 'YYYYMMDD')+30, 'YYYYMMDD')						          	 		 	
							#else
									WHERE SDR.CNFM_DATE BETWEEN TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD'), 'YYYYMMDD') 
			                          AND TO_CHAR(TO_DATE(REPLACE ('$!{sdate}', '-', ''), 'YYYYMMDD')+30, 'YYYYMMDD')						          	 		 				
							#end                       
									 GROUP BY PROD_CODE, CNFM_DATE  
	                                )
	                            ) MAIN,
	                            (
	                           --품종분류(공통)
				    SELECT   
				    #if($!{item_GB1} == "1")
					   ITEM.ITEM_ID           ITEM_ID_S,
					       '000'          CD1,       --농심계
					       '농심'          CD1_NM,  
					       CD1.CD         CD2,       --품종(대)
					       CD1.CD_NAME    CD2_NM
				    #elseif($!{item_GB2} == "2")
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD1.CD         CD1,       --(대)
					   CD1.CD_NAME    CD1_NM,
					   CD2.CD         CD2,       --(중)
					   CD2.CD_NAME    CD2_NM
				    #else 
					   ITEM.ITEM_ID   ITEM_ID_S,
					   CD2.CD         CD1,       --(중)
					   CD2.CD_NAME    CD1_NM,
					   CD3.CD         CD2,       --(소)
					   CD3.CD_NAME    CD2_NM 
				    #end       
                                FROM ITEM_MST ITEM, 
	                                 CODE_MST CD1,       --(대)
	                                 CODE_MST CD2,       --(중)
	                                 CODE_MST CD3        --(소)
	                            WHERE ITEM.SALES_CAT01 = CD1.CD
	                              AND ITEM.SALES_CAT02 = CD2.CD
	                              AND ITEM.SALES_CAT03 = CD3.CD
	                              AND CD1.CD_GRP = 'SALES_CAT1'
	                              AND CD2.CD_GRP = 'SALES_CAT2'
	                              AND CD3.CD_GRP = 'SALES_CAT3'                               
	                           ) ITEM
	                         WHERE MAIN.ITEM_ID = ITEM.ITEM_ID_S  
	                          --AND ITEM_ID = '101000103'    
	                          --AND YYYYMM  IN ('200807', '200808')  	
	                     ) A,
	                     (
	                        SELECT 1 NO FROM DUAL
	                        UNION
	                        SELECT 2 NO FROM DUAL
	                     ) B,
        	             (
		#if("$!{sdate}" == "")
	                      SELECT TO_DATE('2100101','YYYYMMDD')DD
        #else
	                      SELECT TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')DD
        #end
	                        FROM DUAL 
	                     ) DAY_D   
					GROUP BY CD1, DECODE(NO,2,CD2,CD1), NO	                     
                    )
		  )	
		ORDER BY CD1, CD2, NO  
 	
 	</query>
 	<!-- 판매현황 품종별 조회(일간) end --> 
  
    <!-- 유통채널별 판매현황 조회 start -->   
 	<query id="fc_05110_chanelSalesMonitoring_tailer" paging="true"> 	    
		SELECT /* fc_05110_chanelSalesMonitoring_tailer */
		       ITEM_ID,
		       ITEM_NM,
		       GB_NM1, 
		       GB_NM2,
		       DECODE(NO,3,TO_CHAR(CUST_TOTAL, '999,999,999')||'%',CUST_TOTAL) CUST_TOTAL,
		       ---------------------------------------------------------------------------
		       DECODE(NO,3,TO_CHAR(NVL(CUST_1,0), '999,999,999')||'%',NVL(CUST_1,0)) CUST_1,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_2,0), '999,999,999')||'%',NVL(CUST_2,0)) CUST_2,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_3,0), '999,999,999')||'%',NVL(CUST_3,0)) CUST_3,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_4,0), '999,999,999')||'%',NVL(CUST_4,0)) CUST_4,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_5,0), '999,999,999')||'%',NVL(CUST_5,0)) CUST_5,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_6,0), '999,999,999')||'%',NVL(CUST_6,0)) CUST_6,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_7,0), '999,999,999')||'%',NVL(CUST_7,0)) CUST_7,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_8,0), '999,999,999')||'%',NVL(CUST_8,0)) CUST_8,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_9,0), '999,999,999')||'%',NVL(CUST_9,0)) CUST_9,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_10,0), '999,999,999')||'%',NVL(CUST_10,0)) CUST_10,
		       -------------------------------------------------------------------------------
		       DECODE(NO,3,TO_CHAR(NVL(CUST_11,0), '999,999,999')||'%',NVL(CUST_11,0)) CUST_11,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_12,0), '999,999,999')||'%',NVL(CUST_12,0)) CUST_12,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_13,0), '999,999,999')||'%',NVL(CUST_13,0)) CUST_13,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_14,0), '999,999,999')||'%',NVL(CUST_14,0)) CUST_14,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_15,0), '999,999,999')||'%',NVL(CUST_15,0)) CUST_15,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_16,0), '999,999,999')||'%',NVL(CUST_16,0)) CUST_16,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_17,0), '999,999,999')||'%',NVL(CUST_17,0)) CUST_17,
		       DECODE(NO,3,TO_CHAR(NVL(CUST_18,0), '999,999,999')||'%',NVL(CUST_18,0)) CUST_18
		FROM
		    (
		    SELECT 
		           GB,
		           ITEM_ID,
		           MAX(ITEM_NM) ITEM_NM,
		           MAX(GB_NM1)  GB_NM1,
		           NO,
		           MAX(GB_NM2)  GB_NM2, 
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY_TOTAL)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM_TOTAL)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_DAY_TOTAL)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM_TOTAL)                          
		            END                                       
		           )CUST_TOTAL,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY1)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM1)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM1)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM1)                          
		            END                                       
		           )CUST_1,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY2)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM2)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM2)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM2)                          
		            END                                       
		           )CUST_2,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY3)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM3)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM3)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM3)                          
		            END                                       
		           )CUST_3,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY4)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM4)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM4)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM4)                          
		            END                                       
		           )CUST_4,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY5)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM5)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM5)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM5)                          
		            END                                       
		           )CUST_5,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY6)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM6)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM6)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM6)                          
		            END                                       
		           )CUST_6,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY7)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM7)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM7)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM7)                          
		            END                                       
		           )CUST_7,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY8)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM8)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM8)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM8)                          
		            END                                       
		           )CUST_8,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY9)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM9)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM9)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM9)                          
		            END                                       
		           )CUST_9,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY10)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM10)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN 
		                                                                         ROUND((SUM(SUM(CUST_SUM10)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM10)                          
		            END                                       
		           )CUST_10,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY11)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM11)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM11)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM11)                          
		            END                                       
		           )CUST_11,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY12)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM12)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM12)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM12)                          
		            END                                       
		           )CUST_12,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY13)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM13)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM13)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM13)                          
		            END                                       
		           )CUST_13,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY14)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM14)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM14)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM14)                          
		            END                                       
		           )CUST_14,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY15)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM15)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM15)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM15)                          
		            END                                       
		           )CUST_15,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY16)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM16)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM16)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM16)                          
		            END                                       
		           )CUST_16,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY17)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM17)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM17)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM17)                          
		            END                                       
		           )CUST_17,
		           (CASE WHEN GB = 1  THEN CASE WHEN NO = 1 THEN SUM(CUST_DAY18)
		                                        WHEN NO = 2 THEN SUM(CUST_SUM18)
		                                        WHEN NO = 3 THEN CASE WHEN (SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID)>0)
		                                                                    THEN ROUND((SUM(SUM(CUST_SUM18)) OVER(PARTITION BY ITEM_ID)
		                                                                         /SUM(SUM(CUST_SUM_TOTAL)) OVER(PARTITION BY ITEM_ID))*100,1)
		                                                               ELSE 0
		                                                         END                
		                                        ELSE 0
		                                   END     
		                 ELSE MAX(CUST_SUM18)                          
		            END                                       
		           )CUST_18              
		    FROM    
		        (
		        SELECT 
		               C.GB,		            
		               DECODE(GB,2,A.ITEM_ID,'000000000') ITEM_ID,
		               DECODE(GB,2,ITEM_NAME,NVL('$!{custName}','전체'))    ITEM_NM, 
		               MAX(DECODE(GB,2,CD1_NAME,NVL('$!{custName}','전체'))) GB_NM1,		           
		               NO,
		               MAX(GUBUN_NM) GB_NM2,	
		               --품종(대)계
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_TOTAL)  --일별합
		                                     END     
		                                ELSE SUM(CUST_TOTAL)
		               END                                   
		               ) CUST_DAY_TOTAL,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_TOTAL)  --누적합
		                                     END     
		                                ELSE SUM(CUST_TOTAL)
		               END                                   
		               ) CUST_SUM_TOTAL,
		               --거래처별계
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_1)                    
		                                     END     
		                                ELSE SUM(CUST_1)
		               END                                   
		               ) CUST_DAY1,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_1)                    
		                                     END     
		                                ELSE SUM(CUST_1)
		               END                                   
		               ) CUST_SUM1,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_2)                    
		                                     END     
		                                ELSE SUM(CUST_2)
		               END                                   
		               ) CUST_DAY2,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_2)                    
		                                     END     
		                                ELSE SUM(CUST_2)
		               END                                   
		               ) CUST_SUM2,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_3)                    
		                                     END     
		                                ELSE SUM(CUST_3)
		               END                                   
		               ) CUST_DAY3,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_3)                    
		                                     END     
		                                ELSE SUM(CUST_3)
		               END                                   
		               ) CUST_SUM3,    
		                (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_4)                    
		                                     END     
		                                ELSE SUM(CUST_4)
		               END                                   
		               ) CUST_DAY4,                 
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_4)                    
		                                     END     
		                                ELSE SUM(CUST_4)
		               END                                   
		               ) CUST_SUM4,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_5)                    
		                                     END     
		                                ELSE SUM(CUST_5)
		               END                                   
		               ) CUST_DAY5,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_5)                    
		                                     END     
		                                ELSE SUM(CUST_5)
		               END                                   
		               ) CUST_SUM5,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_6)                    
		                                     END     
		                                ELSE SUM(CUST_6)
		               END                                   
		               ) CUST_DAY6,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_6)                    
		                                     END     
		                                ELSE SUM(CUST_6)
		               END                                   
		               ) CUST_SUM6,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_7)                    
		                                     END     
		                                ELSE SUM(CUST_7)
		               END                                   
		               ) CUST_DAY7,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_7)                    
		                                     END     
		                                ELSE SUM(CUST_7)
		               END                                   
		               ) CUST_SUM7,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_8)                    
		                                     END     
		                                ELSE SUM(CUST_8)
		               END                                   
		               ) CUST_DAY8,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_8)                    
		                                     END     
		                                ELSE SUM(CUST_8)
		               END                                   
		               ) CUST_SUM8,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_9)                    
		                                     END     
		                                ELSE SUM(CUST_9)
		               END                                   
		               ) CUST_DAY9,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_9)                    
		                                     END     
		                                ELSE SUM(CUST_9)
		               END                                   
		               ) CUST_SUM9,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_10)                    
		                                     END     
		                                ELSE SUM(CUST_10)
		               END                                   
		               ) CUST_DAY10,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_10)                    
		                                     END     
		                                ELSE SUM(CUST_10)
		               END                                   
		               ) CUST_SUM10,
		               
		               --4444
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_11)                    
		                                     END     
		                                ELSE SUM(CUST_11)
		               END                                   
		               ) CUST_DAY11,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_11)                    
		                                     END     
		                                ELSE SUM(CUST_11)
		               END                                   
		               ) CUST_SUM11,
		                          
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_12)                    
		                                     END     
		                                ELSE SUM(CUST_12)
		               END                                   
		               ) CUST_DAY12,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_12)                    
		                                     END     
		                                ELSE SUM(CUST_12)
		               END                                   
		               ) CUST_SUM12,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_13)                    
		                                     END     
		                                ELSE SUM(CUST_13)
		               END                                   
		               ) CUST_DAY13,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_13)                    
		                                     END     
		                                ELSE SUM(CUST_13)
		               END                                   
		               ) CUST_SUM13,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_14)                    
		                                     END     
		                                ELSE SUM(CUST_14)
		               END                                   
		               ) CUST_DAY14,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_14)                    
		                                     END     
		                                ELSE SUM(CUST_14)
		               END                                   
		               ) CUST_SUM14,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_15)                    
		                                     END     
		                                ELSE SUM(CUST_15)
		               END                                   
		               ) CUST_DAY15,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_15)                    
		                                     END     
		                                ELSE SUM(CUST_15)
		               END                                   
		               ) CUST_SUM15,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_16)                    
		                                     END     
		                                ELSE SUM(CUST_16)
		               END                                   
		               ) CUST_DAY16,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_16)                    
		                                     END     
		                                ELSE SUM(CUST_16)
		               END                                   
		               ) CUST_SUM16,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_17)                    
		                                     END     
		                                ELSE SUM(CUST_17)
		               END                                   
		               ) CUST_DAY17,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_17)                    
		                                     END     
		                                ELSE SUM(CUST_17)
		               END                                   
		               ) CUST_SUM17,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 1 THEN  SUM(CUST_18)                    
		                                     END     
		                                ELSE SUM(CUST_18)
		               END                                   
		               ) CUST_DAY18,
		               (	           
		               CASE WHEN GB = 1 THEN CASE WHEN NO = 2 THEN  SUM(CUST_18)                    
		                                     END     
		                                ELSE SUM(CUST_18)
		               END                                   
		               ) CUST_SUM18
		    		    FROM
		    		        (
		    		        -- 거래처별 구성비 공식 : [거래처별누적/전체누적*100]
		    		        SELECT ITEM_ID,
		    		               YYYYDD,
		    		               NO,
		    		               DECODE(NO,1,'일계',2,'누적',3,'구성비') GUBUN_NM,
		    		               SUM(
		    		                 CASE WHEN NO = 1 THEN DAY_QTY
		    		                      WHEN NO = 2 THEN CUST_SUM
		    		                      WHEN NO = 3 THEN CASE WHEN (TOT_SUM > 0) THEN ROUND((DAY_QTY/TOT_SUM)*100,1)
		    		                                           ELSE 0
		    		                                      END
		    		                     ELSE 0
		    		                 END
		    		                ) CUST_TOTAL,
		    		                SUM(DECODE(NO,1,C1_DAY_QTY,2,C1_CUST_SUM,C1_RATIO)) CUST_1, 
		    		                SUM(DECODE(NO,1,C2_DAY_QTY,2,C2_CUST_SUM,C2_RATIO)) CUST_2,
		    		                SUM(DECODE(NO,1,C3_DAY_QTY,2,C3_CUST_SUM,C3_RATIO)) CUST_3, 
		    		                SUM(DECODE(NO,1,C4_DAY_QTY,2,C4_CUST_SUM,C4_RATIO)) CUST_4, 
		    		                SUM(DECODE(NO,1,C5_DAY_QTY,2,C5_CUST_SUM,C5_RATIO)) CUST_5, 
		    		                SUM(DECODE(NO,1,C6_DAY_QTY,2,C6_CUST_SUM,C6_RATIO)) CUST_6, 
		    		                SUM(DECODE(NO,1,C7_DAY_QTY,2,C7_CUST_SUM,C7_RATIO)) CUST_7, 
		    		                SUM(DECODE(NO,1,C8_DAY_QTY,2,C8_CUST_SUM,C8_RATIO)) CUST_8, 
		    		                SUM(DECODE(NO,1,C9_DAY_QTY,2,C9_CUST_SUM,C9_RATIO)) CUST_9, 
		    		                SUM(DECODE(NO,1,C10_DAY_QTY,2,C10_CUST_SUM,C10_RATIO)) CUST_10,
		    		                SUM(DECODE(NO,1,C11_DAY_QTY,2,C11_CUST_SUM,C11_RATIO)) CUST_11,
		    		                SUM(DECODE(NO,1,C12_DAY_QTY,2,C12_CUST_SUM,C12_RATIO)) CUST_12,
		    		                SUM(DECODE(NO,1,C13_DAY_QTY,2,C13_CUST_SUM,C13_RATIO)) CUST_13,
		    		                SUM(DECODE(NO,1,C14_DAY_QTY,2,C14_CUST_SUM,C14_RATIO)) CUST_14,
		    		                SUM(DECODE(NO,1,C15_DAY_QTY,2,C15_CUST_SUM,C15_RATIO)) CUST_15,
		    		                SUM(DECODE(NO,1,C16_DAY_QTY,2,C16_CUST_SUM,C16_RATIO)) CUST_16,
		    		                SUM(DECODE(NO,1,C17_DAY_QTY,2,C17_CUST_SUM,C17_RATIO)) CUST_17,
		    		                SUM(DECODE(NO,1,C18_DAY_QTY,2,C18_CUST_SUM,C18_RATIO)) CUST_18          
		    		        FROM
		    		            ( 
		                            SELECT ITEM_ID,
		                                   YYYYDD,
		                                   CUST_TYPE,
		                                   CD_NAME,
		                                   DAY_QTY,
		                                   CUST_SUM,
		                                   TOT_SUM,
		                                   DECODE(CUST_TYPE, '01', DAY_QTY)  C1_DAY_QTY, --특약점
		                                   DECODE(CUST_TYPE, '01', CUST_SUM) C1_CUST_SUM,
		                                   (CASE WHEN CUST_TYPE = '01' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C1_RATIO,             
		                                   DECODE(CUST_TYPE, '02', DAY_QTY) C2_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '02', CUST_SUM) C2_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '02' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C2_RATIO,   
		                                   DECODE(CUST_TYPE, '03', DAY_QTY) C3_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '03', CUST_SUM) C3_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '03' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C3_RATIO,   
		                                   DECODE(CUST_TYPE, '04', DAY_QTY) C4_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '04', CUST_SUM) C4_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '04' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C4_RATIO,   
		                                   DECODE(CUST_TYPE, '05', DAY_QTY) C5_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '05', CUST_SUM) C5_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '05' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C5_RATIO,   
		                                   DECODE(CUST_TYPE, '06', DAY_QTY) C6_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '06', CUST_SUM) C6_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '06' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C6_RATIO,   
		                                   DECODE(CUST_TYPE, '07', DAY_QTY) C7_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '07', CUST_SUM) C7_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '07' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C7_RATIO,   
		                                   DECODE(CUST_TYPE, '08', DAY_QTY) C8_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '08', CUST_SUM) C8_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '08' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C8_RATIO,   
		                                   DECODE(CUST_TYPE, '09', DAY_QTY) C9_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '09', CUST_SUM) C9_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '09' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C9_RATIO,   
		                                   DECODE(CUST_TYPE, '10', DAY_QTY) C10_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '10', CUST_SUM) C10_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '10' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C10_RATIO, 
		                                   DECODE(CUST_TYPE, '11', DAY_QTY) C11_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '11', CUST_SUM) C11_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '11' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C11_RATIO, 
		                                   DECODE(CUST_TYPE, '12', DAY_QTY) C12_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '12', CUST_SUM) C12_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '12' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C12_RATIO,                      
		                                   DECODE(CUST_TYPE, '13', DAY_QTY) C13_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '13', CUST_SUM) C13_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '13' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C13_RATIO,                      
		                                   DECODE(CUST_TYPE, '14', DAY_QTY) C14_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '14', CUST_SUM) C14_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '14' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C14_RATIO,                      
		                                   DECODE(CUST_TYPE, '15', DAY_QTY) C15_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '15', CUST_SUM) C15_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '15' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C15_RATIO,                      
		                                   DECODE(CUST_TYPE, '16', DAY_QTY) C16_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '16', CUST_SUM) C16_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '16' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C16_RATIO,                      
		                                   DECODE(CUST_TYPE, '17', DAY_QTY) C17_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '17', CUST_SUM) C17_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '17' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C17_RATIO,                      
		                                   DECODE(CUST_TYPE, '18', DAY_QTY) C18_DAY_QTY, --직거래점
		                                   DECODE(CUST_TYPE, '18', CUST_SUM) C18_CUST_SUM,       
		                                   (CASE WHEN CUST_TYPE = '18' THEN CASE WHEN (SIGN(TOT_SUM) = 1) THEN ROUND((CUST_SUM/TOT_SUM)*100,1)
		                                                                         ELSE 0
		                                                                    END
		                                         ELSE 0
		                                    END                                       
		                                   ) C18_RATIO 
		                            FROM
		                                (
		                                SELECT  
		                                       ITEM_ID,
		                                       CUST_TYPE,
		                                       MAX(CD_NAME)   CD_NAME,
		                                       SUM(DECODE(YYYYDD,REPLACE('$!{sdate}', '-', ''),DAY_QTY,0)) DAY_QTY,  --조회날짜를 파라미터로 받음
		                                       SUM(DAY_QTY)   CUST_SUM,                           
		                                       SUM(SUM(DAY_QTY)) OVER(PARTITION BY ITEM_ID) TOT_SUM,           
		                                       MAX(YYYYDD)    YYYYDD 
		                                FROM    
		                                    (
		                                    --1. CD_MST에 정의된 유통채널별 판매실적(SALES_ACT)
		                                    SELECT ACT.ITEM_ID, 
		                                           ACT.CUST_TYPE,
		                                           TO_CHAR(ACT.SALE_DATE, 'YYYYMMDD') YYYYDD,                                                 
		                                           MAX(CD_MST.CD_NAME) CD_NAME,
		                                           SUM(ACT.QTY) DAY_QTY,                                                          --일별  , 유통채널별(일계) 
		                                           SUM(SUM(ACT.QTY)) OVER(PARTITION BY ITEM_ID, CUST_TYPE) CUST_SUM               --제품별, 유통채널별(누적계)            		                       
		                                    FROM SALES_ACT ACT, CODE_MST  CD_MST
		                                    WHERE ACT.CUST_TYPE = CD_MST.CD
		                                      AND CD_MST.CD_GRP = 'FCST_GRPCD'                          
		                                      /* 기간(조회월의 1일 ~ 조회일까지의 판매실적) */                 
		        		              #if("$!{sdate}" == "") 
					                          AND SALE_DATE BETWEEN TO_DATE('21000101','YYYYMMDD') AND LAST_DAY(TO_DATE('21000101','YYYYMMDD'))
		        				      #else
			        	                      AND SALE_DATE BETWEEN TO_DATE(SUBSTR(REPLACE('$!{sdate}', '-', ''),1,6),'YYYYMM') 
			          		                  AND TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')
		        				      #end     
		                                    GROUP BY ACT.ITEM_ID, ACT.CUST_TYPE, TO_CHAR(ACT.SALE_DATE, 'YYYYMMDD') 
		                                    )
		                                 WHERE YYYYDD  &lt;= REPLACE('$!{sdate}', '-', '')
		                                GROUP BY ITEM_ID, CUST_TYPE
		                                )
		        		            ) A,
		        		            (
		        		              SELECT 1 NO FROM DUAL
		        		              UNION
		        		              SELECT 2 NO FROM DUAL
		        		              UNION 
		        		              SELECT 3 NO FROM DUAL
		        		            ) B 
		        		        GROUP BY ITEM_ID, YYYYDD, NO
		        		           
		        		        ) A,
		        		        (
		        		        --품종분류(공통)
		        		        SELECT ITEM.ITEM_ID,
		        		               ITEM.ITEM_NAME, 
		        		               CD1.CD_GRP,
		        		               CD1.CD CD1,       --(대)
		        		               CD1.CD_NAME CD1_NAME  
		        		        FROM ITEM_MST ITEM, 
		        		             CODE_MST CD1,       --(대)
		        		             CODE_MST CD2,       --(중)
		        		             CODE_MST CD3        --(소)
		        		        WHERE ITEM.SALES_CAT01 = CD1.CD
		        		          AND ITEM.SALES_CAT02 = CD2.CD
		        		          AND ITEM.SALES_CAT03 = CD3.CD
		        		          AND CD1.CD_GRP = 'SALES_CAT1'
		        		          AND CD2.CD_GRP = 'SALES_CAT2'
		        		          AND CD3.CD_GRP = 'SALES_CAT3'
		        		          
		    		        ) B,
		    			    (        		    
		    		          SELECT 1 GB FROM DUAL
		    		          UNION
		    		          SELECT 2 GB FROM DUAL
		    		        ) C 
		    	              
		    		    WHERE A.ITEM_ID = B.ITEM_ID
		    		    [AND  B.ITEM_ID||B.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']   
		    
		    		    GROUP BY C.GB,		            
		    	                 DECODE(GB,2,A.ITEM_ID,'000000000'),
		    	                 DECODE(GB,2,ITEM_NAME,NVL('$!{custName}','전체')),
		    			         NO 
		        )	    		   
		    GROUP BY GB, ITEM_ID, NO
		    ORDER BY GB, ITEM_ID, NO
		    )	   
        </query>	  	    
 	<!-- 유통채널별 판매현황 조회 end -->
 	
 	<!-- 판매계획 변동률 분석 start -->     
 	<query id="fc_05120_salesPlan_Rate_tailer" paging="true">
 	    
 	    #if ("$!{periodGB2}" == "")		 		 
		--------------------------
		/* MONTHLY START */
		--------------------------	
		SELECT /* fc_05120_salesPlan_Rate_tailer */
		    HID,
	        HID_NM,
	        VER,
	        DECODE(NO,2,TO_CHAR(M0_VER_Q, 'FM990.099')||'%', M0_VER_Q) MO_VER_Q,
	        DECODE(NO,2,TO_CHAR(M1_VER_Q, 'FM990.099')||'%', M1_VER_Q) M1_VER_Q,
	        DECODE(NO,2,TO_CHAR(M2_VER_Q, 'FM990.099')||'%', M2_VER_Q) M2_VER_Q,
	        DECODE(NO,2,TO_CHAR(M3_VER_Q, 'FM990.099')||'%', M3_VER_Q) M3_VER_Q,
	        DECODE(NO,2,TO_CHAR(M4_VER_Q, 'FM990.099')||'%', M4_VER_Q) M4_VER_Q,
	        DECODE(NO,2,TO_CHAR(M5_VER_Q, 'FM990.099')||'%', M5_VER_Q) M5_VER_Q,
	        DECODE(NO,2,TO_CHAR(M6_VER_Q, 'FM990.099')||'%', M6_VER_Q) M6_VER_Q,
	        DECODE(NO,2,TO_CHAR(M7_VER_Q, 'FM990.099')||'%', M7_VER_Q) M7_VER_Q,
	        DECODE(NO,2,TO_CHAR(M8_VER_Q, 'FM990.099')||'%', M8_VER_Q) M8_VER_Q,
	        DECODE(NO,2,TO_CHAR(M9_VER_Q, 'FM990.099')||'%', M9_VER_Q) M9_VER_Q,
	        DECODE(NO,2,TO_CHAR(M10_VER_Q, 'FM990.099')||'%', M10_VER_Q) M10_VER_Q,
	        DECODE(NO,2,TO_CHAR(M11_VER_Q, 'FM990.099')||'%', M11_VER_Q) M11_VER_Q
		FROM
	 	    (
	 	    SELECT NO, 
	               HID,
	               MAX(HID_NM) HID_NM,
	               DECODE(NO,2,'변동률(%)',VER) VER,
		           MAX(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,0), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M0_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,1), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M1_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,2), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M2_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,3), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M3_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,4), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M4_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,5), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M5_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,6), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M6_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,7), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M7_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,8), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M8_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,9), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M9_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,10), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M10_VER_Q,
		           SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(DAY_M.MM,11), 'YYYYMM') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) M11_VER_Q  
		    FROM
		        (
		        SELECT  SALES_LOC, 
		                VER,
		                YYYYMM,
		                NO,
		                ORG_QTY,
		                FIRST_AMT,
		                LAST_AMT,
		               (
		                 CASE WHEN (FIRST_AMT > 0) THEN ROUND((LAST_AMT-FIRST_AMT)/FIRST_AMT*100,0)
		                      ELSE 0
		                 END
		               ) DIFF_QTY,
		               COUNT(VER)OVER (PARTITION BY SALES_LOC, YYYYMM, NO) VER_CNT   
		        FROM
		            (
		            SELECT SALES_LOC, VER, YYYYMM,
		                   SUM(QTY) ORG_QTY,
		                   FIRST_VALUE(SUM(QTY)) OVER 
		                              (PARTITION BY SALES_LOC, YYYYMM ORDER BY VER
		                               ROWS BETWEEN UNBOUNDED PRECEDING
		                                    AND     UNBOUNDED FOLLOWING
		                              ) FIRST_AMT,                       
		                   LAST_VALUE(SUM(QTY)) OVER 
		                              (PARTITION BY SALES_LOC, YYYYMM ORDER BY VER
		                               ROWS BETWEEN UNBOUNDED PRECEDING
		                                    AND     UNBOUNDED FOLLOWING
		                              ) LAST_AMT
		            FROM
		                (
		                SELECT SALES_LOC,
		                       VERSION VER, 
		                       ITEM_ID, 
		                       YYYYMM,
		                       SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) QTY
		                FROM NFOS_SALES_PLAN_MONTHLY
	 			    #if ("$!{create_month}" == "")				 
					   WHERE YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
					    AND TO_CHAR(ADD_MONTHS(TO_DATE('210001', 'YYYYMM'), 0), 'YYYYMM') 
					 #else
					   WHERE YYYYMM BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM') 
					    AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 11), 'YYYYMM') 				 
					 #end
						 	                
		                GROUP BY SALES_LOC, ITEM_ID, YYYYMM, VERSION
		                ) 
		            GROUP BY SALES_LOC, VER, YYYYMM    
		            --ORDER BY SALES_LOC, VER, YYYYMM 
		            ) A,
		            (
		              SELECT 1 NO FROM DUAL
		              UNION ALL
		              SELECT 2 NO FROM DUAL
		            ) B   
		        ) A,
		        (
			    SELECT
			#if ("$!{org_GB1}" == "1")
				   HR3.HID         HID3,
				   HR1.HID         HID ,           --영업본부
				   HR1.HID_NAME    HID_NM,      
				   '0000'          PARENT_HID,     --농심
				   '농심'           PARENT_NM
			#elseif ("$!{org_GB2}" == "2")
				   HR3.HID         HID3,
				   HR2.HID         HID ,           --영업부
				   HR2.HID_NAME    HID_NM,      
				   HR1.HID         PARENT_HID,     --영업본부
				   HR1.HID_NAME    PARENT_NM
			#else
				   HR3.HID         HID,            --영업지점
				   HR3.HID_NAME    HID_NM,      
				   HR2.HID         PARENT_HID,     --영업부
				   HR2.HID_NAME    PARENT_NM     
			#end	                  
			      FROM HRCHY HR1,
				   HRCHY HR2,
				   HRCHY HR3
			    WHERE HR1.HID = HR2.PARENT_HID
			      AND HR2.HID = HR3.PARENT_HID
			      AND HR1.LVL = '20'
			      AND HR2.LVL = '30'
			      AND HR3.LVL = '40'
			      AND HR1.HTYPE = '영업'
			      AND HR2.HTYPE = '영업'
			      AND HR3.HTYPE = '영업'
		        ) SITE,
		        (
	 
		 	#if ("$!{create_month}" == "")
	 	          SELECT TO_DATE('21000101','YYYYMM') MM
		    #else
	 	          SELECT TO_DATE(REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM	    
		    #end
		          FROM DUAL
		        ) DAY_M
		    
		    #if (("$!{org_GB1}" == "1") || ("$!{org_GB2}" == "2"))
			WHERE A.SALES_LOC = SITE.HID3
			#else
			WHERE A.SALES_LOC = SITE.HID
			#end

 		    [AND A.SALES_LOC = '${sales_org}']   	 	   
				    			
		    GROUP BY HID, NO, DECODE(NO,2,'변동률(%)',VER)
		    ORDER BY HID   
		    )
	  #else 
      SELECT /* 판매계획 변동률 (주간) */ 
		    HID,
	        HID_NM,
	        VER,
	        DECODE(NO,2,TO_CHAR(W0_VER_Q, 'FM990.099')||'%', W0_VER_Q) W0_VER_Q,
	        DECODE(NO,2,TO_CHAR(W1_VER_Q, 'FM990.099')||'%', W1_VER_Q) W1_VER_Q,
	        DECODE(NO,2,TO_CHAR(W2_VER_Q, 'FM990.099')||'%', W2_VER_Q) W2_VER_Q,
	        DECODE(NO,2,TO_CHAR(W3_VER_Q, 'FM990.099')||'%', W3_VER_Q) W3_VER_Q,
	        DECODE(NO,2,TO_CHAR(W4_VER_Q, 'FM990.099')||'%', W4_VER_Q) W4_VER_Q,
	        DECODE(NO,2,TO_CHAR(W5_VER_Q, 'FM990.099')||'%', W5_VER_Q) W5_VER_Q,
	        DECODE(NO,2,TO_CHAR(W6_VER_Q, 'FM990.099')||'%', W6_VER_Q) W6_VER_Q,
	        DECODE(NO,2,TO_CHAR(W7_VER_Q, 'FM990.099')||'%', W7_VER_Q) W7_VER_Q,
	        DECODE(NO,2,TO_CHAR(W8_VER_Q, 'FM990.099')||'%', W8_VER_Q) W8_VER_Q,
	        DECODE(NO,2,TO_CHAR(W9_VER_Q, 'FM990.099')||'%', W9_VER_Q) W9_VER_Q,
	        DECODE(NO,2,TO_CHAR(W10_VER_Q, 'FM990.099')||'%', W10_VER_Q) W10_VER_Q,
	        DECODE(NO,2,TO_CHAR(W11_VER_Q, 'FM990.099')||'%', W11_VER_Q) W11_VER_Q         
      FROM
	      (          
	      SELECT     
	           NO,   
	           HID,  
	           MAX(HID_NM) HID_NM, 
	           DECODE(NO,2,'변동률(%)',VER) VER,
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+(-7*1), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W0_VER_Q,       --W0_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*0), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W1_VER_Q,       --W1_VER            
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*1), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W2_VER_Q,       --W1_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*2), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W3_VER_Q,       --W2_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*3), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W4_VER_Q,       --W3_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*4), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W5_VER_Q,       --W4_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*5), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W6_VER_Q,       --W5_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*6), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W7_VER_Q,       --W6_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*7), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W8_VER_Q,       --W7_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*8), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W9_VER_Q,       --W8_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*9), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W10_VER_Q,     --W10_VER
	           SUM(CASE WHEN YYYYWW = TO_CHAR(DAY_WW.WW+( 7*10), 'YYYYWW') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) W11_VER_Q      --W11_VER 
	    FROM
	        (
	        SELECT  SALES_LOC, 
	                VER,
	                YYYYWW,
	                NO,
	                ORG_QTY,
	                FIRST_AMT,
	                LAST_AMT,
	               (
	                 CASE WHEN (FIRST_AMT > 0) THEN ROUND((LAST_AMT-FIRST_AMT)/FIRST_AMT*100,0)
	                      ELSE 0
	                 END
	               ) DIFF_QTY,  
	               COUNT(VER)OVER (PARTITION BY SALES_LOC, YYYYWW, NO) VER_CNT   
	        FROM
	            (
	            SELECT SALES_LOC, VER, YYYYWW,
	                   SUM(QTY) ORG_QTY,
	                   FIRST_VALUE(SUM(QTY)) OVER 
	                              (PARTITION BY SALES_LOC, YYYYWW ORDER BY VER
	                               ROWS BETWEEN UNBOUNDED PRECEDING
	                                    AND     UNBOUNDED FOLLOWING
	                              ) FIRST_AMT,                       
	                   LAST_VALUE(SUM(QTY)) OVER 
	                              (PARTITION BY SALES_LOC, YYYYWW ORDER BY VER
	                               ROWS BETWEEN UNBOUNDED PRECEDING
	                                    AND     UNBOUNDED FOLLOWING
	                              ) LAST_AMT
	            FROM
	                (
	                SELECT SALES_LOC, 
	                       NF.YYYY||NF.VERSION VER, 
	                       ITEM_ID, 
	                       CAL.YYYYWW YYYYWW,
	                       SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) QTY
	                FROM NFOS_SALES_PLAN_WEEKLY NF, CAL_MST CAL
	                WHERE NF.YYYYMMDD = CAL.YYYYMMDD
				#if("$!{sdate}" == "")
			         AND NF.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD') 
	                 AND TO_CHAR(NEXT_DAY(TO_DATE('21000101', 'YYYYMMDD'), 2), 'YYYYMMDD')		          
				#else  		    
			         AND NF.YYYYMMDD BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 		         
	                 AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 2), 'YYYYMMDD') 		                     
			    #end
			        GROUP BY  SALES_LOC, NF.YYYY||NF.VERSION, ITEM_ID, CAL.YYYYWW
	                ) 
	            GROUP BY SALES_LOC, VER, YYYYWW    
	            ) A,
	            (
	              SELECT 1 NO FROM DUAL
	              UNION ALL
	              SELECT 2 NO FROM DUAL
	            ) B   
	        ) A,
	        (
		    SELECT
		#if ("$!{org_GB1}" == "1")
			   HR3.HID         HID3,
			   HR1.HID         HID ,           --영업본부
			   HR1.HID_NAME    HID_NM,      
			   '0000'          PARENT_HID,     --농심
			   '농심'           PARENT_NM
		#elseif ("$!{org_GB2}" == "2")
			   HR3.HID         HID3,
			   HR2.HID         HID ,           --영업부
			   HR2.HID_NAME    HID_NM,      
			   HR1.HID         PARENT_HID,     --영업본부
			   HR1.HID_NAME    PARENT_NM
		#else
			   HR3.HID         HID,            --영업지점
			   HR3.HID_NAME    HID_NM,      
			   HR2.HID         PARENT_HID,     --영업부
			   HR2.HID_NAME    PARENT_NM     
		#end	                  
		  FROM HRCHY HR1,
			   HRCHY HR2, 
			   HRCHY HR3
		    WHERE HR1.HID = HR2.PARENT_HID
		      AND HR2.HID = HR3.PARENT_HID
		      AND HR1.LVL = '20'
		      AND HR2.LVL = '30'
		      AND HR3.LVL = '40'
		      AND HR1.HTYPE = '영업'
		      AND HR2.HTYPE = '영업'
		      AND HR3.HTYPE = '영업'  
	        ) SITE,
	        (
			#if("$!{sdate}" == "")
			     SELECT NEXT_DAY(TO_DATE('21000101','YYYYMMDD'), 3) WW 
			            FROM DUAL ) DAY_WW                    			
			#else
			     --조회일자의 해당주의 월요일부터 조회
			     SELECT NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')-7, 2) WW 
			            FROM DUAL ) DAY_WW                    			
			#end  
	
		    #if (("$!{org_GB1}" == "1") || ("$!{org_GB2}" == "2"))
			WHERE A.SALES_LOC = SITE.HID3
			#else
			WHERE A.SALES_LOC = SITE.HID
			#end  		  

		    [AND A.SALES_LOC = '${sales_org}']   	 	   
			
	    GROUP BY HID, NO, DECODE(NO,2,'변동률(%)',VER)
	    ORDER BY HID 
	    )
	  #end    
 	</query>

 	<query id="fc_05130_salesPlan_Rate_tailer" paging="true">
      SELECT /* 판매계획 변동률 (일간) */ 
	       HID,
	       HID_NM,
	       VER,
	       DECODE(NO,2,TO_CHAR(D0_VER_Q, 'FM990.099')||'%',  D0_VER_Q)  D0_VER_Q,
	       DECODE(NO,2,TO_CHAR(D1_VER_Q, 'FM990.099')||'%',  D1_VER_Q)  D1_VER_Q,
	       DECODE(NO,2,TO_CHAR(D2_VER_Q, 'FM990.099')||'%',  D2_VER_Q)  D2_VER_Q,
	       DECODE(NO,2,TO_CHAR(D3_VER_Q, 'FM990.099')||'%',  D3_VER_Q)  D3_VER_Q,
	       DECODE(NO,2,TO_CHAR(D4_VER_Q, 'FM990.099')||'%',  D4_VER_Q)  D4_VER_Q,
	       DECODE(NO,2,TO_CHAR(D5_VER_Q, 'FM990.099')||'%',  D5_VER_Q)  D5_VER_Q,
	       DECODE(NO,2,TO_CHAR(D6_VER_Q, 'FM990.099')||'%',  D6_VER_Q)  D6_VER_Q,
	       DECODE(NO,2,TO_CHAR(D7_VER_Q, 'FM990.099')||'%',  D7_VER_Q)  D7_VER_Q,
	       DECODE(NO,2,TO_CHAR(D8_VER_Q, 'FM990.099')||'%',  D8_VER_Q)  D8_VER_Q,
	       DECODE(NO,2,TO_CHAR(D9_VER_Q, 'FM990.099')||'%',  D9_VER_Q)  D9_VER_Q,
	       DECODE(NO,2,TO_CHAR(D10_VER_Q, 'FM990.099')||'%', D10_VER_Q) D10_VER_Q,
	       DECODE(NO,2,TO_CHAR(D11_VER_Q, 'FM990.099')||'%', D11_VER_Q) D11_VER_Q,
	       DECODE(NO,2,TO_CHAR(D12_VER_Q, 'FM990.099')||'%', D12_VER_Q) D12_VER_Q,
	       DECODE(NO,2,TO_CHAR(D13_VER_Q, 'FM990.099')||'%', D13_VER_Q) D13_VER_Q,
	       DECODE(NO,2,TO_CHAR(D14_VER_Q, 'FM990.099')||'%', D14_VER_Q) D14_VER_Q,
	       DECODE(NO,2,TO_CHAR(D15_VER_Q, 'FM990.099')||'%', D15_VER_Q) D15_VER_Q,
	       DECODE(NO,2,TO_CHAR(D16_VER_Q, 'FM990.099')||'%', D16_VER_Q) D16_VER_Q,
	       DECODE(NO,2,TO_CHAR(D17_VER_Q, 'FM990.099')||'%', D17_VER_Q) D17_VER_Q,
	       DECODE(NO,2,TO_CHAR(D18_VER_Q, 'FM990.099')||'%', D18_VER_Q) D18_VER_Q,
	       DECODE(NO,2,TO_CHAR(D19_VER_Q, 'FM990.099')||'%', D19_VER_Q) D19_VER_Q,
	       DECODE(NO,2,TO_CHAR(D20_VER_Q, 'FM990.099')||'%', D20_VER_Q) D20_VER_Q,
	       DECODE(NO,2,TO_CHAR(D21_VER_Q, 'FM990.099')||'%', D21_VER_Q) D21_VER_Q,
	       DECODE(NO,2,TO_CHAR(D22_VER_Q, 'FM990.099')||'%', D22_VER_Q) D22_VER_Q,
	       DECODE(NO,2,TO_CHAR(D23_VER_Q, 'FM990.099')||'%', D23_VER_Q) D23_VER_Q,
	       DECODE(NO,2,TO_CHAR(D24_VER_Q, 'FM990.099')||'%', D24_VER_Q) D24_VER_Q,
	       DECODE(NO,2,TO_CHAR(D25_VER_Q, 'FM990.099')||'%', D25_VER_Q) D25_VER_Q,
	       DECODE(NO,2,TO_CHAR(D26_VER_Q, 'FM990.099')||'%', D26_VER_Q) D26_VER_Q,
	       DECODE(NO,2,TO_CHAR(D27_VER_Q, 'FM990.099')||'%', D27_VER_Q) D27_VER_Q,
	       DECODE(NO,2,TO_CHAR(D28_VER_Q, 'FM990.099')||'%', D28_VER_Q) D28_VER_Q,
	       DECODE(NO,2,TO_CHAR(D29_VER_Q, 'FM990.099')||'%', D29_VER_Q) D29_VER_Q,
	       DECODE(NO,2,TO_CHAR(D30_VER_Q, 'FM990.099')||'%', D30_VER_Q) D30_VER_Q
      FROM
	      (     
	      SELECT     
	           NO,   
	           HID,  
	           MAX(HID_NM) HID_NM, 
	           DECODE(NO,2,'변동률(%)',VER) VER,
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+0, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY)   ELSE 0 END)D0_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+1, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D1_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+2, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D2_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+3, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D3_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+4, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D4_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+5, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D5_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+6, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D6_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+7, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D7_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+8, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D8_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+9, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END)  D9_VER_Q,--당일	       
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+10, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D10_VER_Q,--당일
		       --------------------------------------------------------------------------------------------------------------------------------
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+11, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D11_VER_Q,--당일	        
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+12, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D12_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+13, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D13_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+14, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D14_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+15, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D15_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+16, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D16_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+17, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D17_VER_Q,--당일                                 
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+18, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D18_VER_Q,--당일                                 
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+19, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D19_VER_Q,--당일 
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+20, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D20_VER_Q,--당일
		       --------------------------------------------------------------------------------------------------------------------------------
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+21, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D21_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+22, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D22_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+23, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D23_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+24, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D24_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+25, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D25_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+26, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D26_VER_Q,--당일
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+27, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D27_VER_Q,--당일                                 
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+28, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D28_VER_Q,--당일                                 
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+29, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D29_VER_Q,--당일 
		       SUM(CASE WHEN YYYYMMDD = TO_CHAR(DAY_D.DD+30, 'YYYYMMDD') THEN DECODE(NO,2,DIFF_QTY/VER_CNT,ORG_QTY) ELSE 0 END) D30_VER_Q --당일
	    FROM
	        (
	        SELECT  SALES_LOC, 
	                VER,
	                YYYYMMDD,
	                NO,
	                ORG_QTY,
	                FIRST_AMT,
	                LAST_AMT,
	               (
	                 CASE WHEN (FIRST_AMT > 0) THEN ROUND((LAST_AMT-FIRST_AMT)/FIRST_AMT*100,0)
	                      ELSE 0
	                 END
	               ) DIFF_QTY,  
	               COUNT(VER)OVER (PARTITION BY SALES_LOC, YYYYMMDD, NO) VER_CNT   
	        FROM
	            (
	            SELECT SALES_LOC, VER, YYYYMMDD,
	                   SUM(QTY) ORG_QTY,
	                   FIRST_VALUE(SUM(QTY)) OVER 
	                              (PARTITION BY SALES_LOC, YYYYMMDD ORDER BY VER
	                               ROWS BETWEEN UNBOUNDED PRECEDING
	                                    AND     UNBOUNDED FOLLOWING
	                              ) FIRST_AMT,                       
	                   LAST_VALUE(SUM(QTY)) OVER 
	                              (PARTITION BY SALES_LOC, YYYYMMDD ORDER BY VER
	                               ROWS BETWEEN UNBOUNDED PRECEDING
	                                    AND     UNBOUNDED FOLLOWING
	                              ) LAST_AMT
	            FROM
	                (
	                SELECT SALES_LOC, 
	                       YYYY||VERSION VER, 
	                       ITEM_ID, 
	                       YYYYMMDD,
	                       SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) QTY
	                FROM NFOS_SALES_PLAN_WEEKLY NF
				#if("$!{sdate}" == "")
					WHERE NF.YYYYMMDD BETWEEN TO_CHAR(TO_DATE(REPLACE('21000101', '-', ''), 'YYYYMMDD')+0, 'YYYYMMDD')	         
	                                      AND TO_CHAR(TO_DATE(REPLACE('21000101', '-', ''), 'YYYYMMDD')+31, 'YYYYMMDD')		                     
				#else  		    
					WHERE NF.YYYYMMDD BETWEEN TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+0, 'YYYYMMDD')	         
	                                      AND TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+31, 'YYYYMMDD')		                     
			    #end
			        GROUP BY  SALES_LOC, YYYY||VERSION, ITEM_ID, YYYYMMDD
	                ) 
	            GROUP BY SALES_LOC, VER, YYYYMMDD    
	            ) A,
	            (
	              SELECT 1 NO FROM DUAL
	              UNION ALL
	              SELECT 2 NO FROM DUAL
	            ) B   
	        ) A,
	        (
		    SELECT
		#if ("$!{org_GB1}" == "1")
			   HR3.HID         HID3,
			   HR1.HID         HID ,           --영업본부
			   HR1.HID_NAME    HID_NM,      
			   '0000'          PARENT_HID,     --농심
			   '농심'           PARENT_NM
		#elseif ("$!{org_GB2}" == "2")
			   HR3.HID         HID3,
			   HR2.HID         HID ,           --영업부
			   HR2.HID_NAME    HID_NM,      
			   HR1.HID         PARENT_HID,     --영업본부
			   HR1.HID_NAME    PARENT_NM
		#else
			   HR3.HID         HID,            --영업지점
			   HR3.HID_NAME    HID_NM,      
			   HR2.HID         PARENT_HID,     --영업부
			   HR2.HID_NAME    PARENT_NM     
		#end	                  
		  FROM HRCHY HR1,
			   HRCHY HR2, 
			   HRCHY HR3
		    WHERE HR1.HID = HR2.PARENT_HID
		      AND HR2.HID = HR3.PARENT_HID
		      AND HR1.LVL = '20'
		      AND HR2.LVL = '30'
		      AND HR3.LVL = '40'
		      AND HR1.HTYPE = '영업'
		      AND HR2.HTYPE = '영업'
		      AND HR3.HTYPE = '영업'  
	        ) SITE,
	       (
			#if("$!{sdate}" == "")
		         SELECT TO_DATE(REPLACE ('2008-10-20', '-', ''),'YYYYMMDD') DD 
	               FROM DUAL 
	           		                			
			#else
			     --조회일자의 해당주의 월요일부터 조회
		         SELECT TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD') DD 
	               FROM DUAL
			#end  
	       ) DAY_D
	       
		    #if (("$!{org_GB1}" == "1") || ("$!{org_GB2}" == "2"))
			WHERE A.SALES_LOC = SITE.HID3
			#else 
			WHERE A.SALES_LOC = SITE.HID
			#end   
 
		    [AND A.SALES_LOC = '${sales_org}']   	 	   
					  
	    GROUP BY HID, NO, DECODE(NO,2,'변동률(%)',VER)
	    ORDER BY HID
	    )
 	</query> 	 	
 	<!-- 판매계획 변동률 분석 end -->   

 	<!-- 유통재고 실판매정보 분석 start -->   
    <query id="fc_05140_disInvActSalesInfo_tailer" paging="true">
    #if ("$!{periodGB2}" == "")		 
	--------------------------
	/* MONTHLY START */
	--------------------------
	
	SELECT /* fc_05140_disInvActSalesInfo_tailer(월) */
	       PROD_CODE,  
	       MIN(ITEM_NAME) ITEM_NM,
	       DECODE(GUBUN,'00','농심판매', '01', '실판매', '02', '유통재고', '재고일수') GUBUN_NM,
	       MAX(QTY)             MAX_QTY,  -- 조회기간내 최대판매(수량)
	       ROUND(AVG(QTY),2)    AVG_QTY,  -- 조회기간내 평균판매(수량)
	       ROUND(STDDEV(QTY),2) STD_QTY,  -- 조회기간내 표준편차(수량) 
	       SUM(QTY)             SUM_QTY,  -- 조회기간내 합계   (수량) 
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 0), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M0_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 1), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M1_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 2), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M2_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 3), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M3_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 4), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M4_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 5), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M5_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 6), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M6_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 7), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M7_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 8), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M8_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 9), 'YYYYMM')  THEN A.QTY ELSE 0 END)  M9_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 10), 'YYYYMM') THEN A.QTY ELSE 0 END) M10_NO_Q,--당월
	       SUM(CASE WHEN A.YYYYMM = TO_CHAR (ADD_MONTHS (DAY_M.MM, 11), 'YYYYMM') THEN A.QTY ELSE 0 END) M11_NO_Q --당월           
	FROM
	       (
	       -- 재고일수를 한 컬럼(QTY)으로 GROUP BY    
	       SELECT PROD_CODE, CUST_CODE, YYYYMM, --NO,
	              DECODE(NO,1,GUBUN,'04') GUBUN,
	              DECODE(NO,1,MAX(QTY),AVG(INV_DAY)) QTY
	        FROM
	            (
	            -- 재고일수를 계산
	            SELECT
	                   PROD_CODE, 
	                   CUST_CODE,
	                   YYYYMM,
	                   GUBUN,
	                   -- 실판매,유통재고,농심판매를 한 컬럼QTY(수량)으로 합치기 
	                   DECODE(GUBUN, '01', ACT_BOX, '02', INV_BOX, NST_QTY) QTY,
	                   -- 재고일수 : 실판매(수량)/유통재고(수량)
	                   ROUND(
	                   (CASE WHEN (SUM(INV_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYMM)>0) THEN  (SUM(ACT_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYMM)
	                                                                                                     /SUM(INV_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYMM))
	                                                                                               ELSE  0
	                   END
	                   ),2) INV_DAY
	            FROM
	                (
	                --1. 농심판매 집합1
	                SELECT PROD_CODE,
	                       CUST_CODE,
	                       SUBSTR(CNFM_DATE,1,6) YYYYMM,  
	                       0 ACT_BOX,                                                            -- 실판매
	                       0 INV_BOX,                                      				 	     -- 유통재고
	                       SUM(DECODE('$!{checked_uom}','amount', SUPL_AMT, SELL_BOX)) NST_QTY,  -- 농심판매
	                       '00' GUBUN  
	                FROM SDRDT103 
	                WHERE SELL_GUBN_CODE IN ('01', '02')
	                #if ("$!{create_month}" == "")
	                 AND CNFM_DATE = '21000101'
	                #else
	                 AND SUBSTR(CNFM_DATE,1,6) BETWEEN REPLACE ('$!{create_month}', '-', '')
	                                               AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM')              
	                #end
	                GROUP BY PROD_CODE, CUST_CODE, SUBSTR(CNFM_DATE,1,6)
	                ---------
	                UNION ALL -- 집합1+집합2
	                ---------
	                --2. 실판매(01)/유통재고(02) 집합2
	                SELECT PROD_CODE,
	                       CUST_CODE, 
	                       SUBSTR(CNFM_DATE,1,6) YYYYMM,
	                       SUM(DECODE(GUBN_CODE, '01', DECODE('$!{checked_uom}','amount', ODER_AMT, ODER_BOX))) ACT_BOX, -- 실판매
	                       SUM(DECODE(GUBN_CODE, '02', DECODE('$!{checked_uom}','amount', ODER_AMT, ODER_BOX))) INV_BOX, -- 유통재고  
	                       0 NST_QTY,                                                                                    -- 농심판매   
	                       GUBN_CODE GUBUN
	                FROM SDORT121
	                WHERE GUBN_CODE IN ('01', '02')
	                #if ("$!{create_month}" == "")
	                 AND CNFM_DATE = '21000101'
	                #else
	                 AND SUBSTR(CNFM_DATE,1,6) BETWEEN REPLACE ('$!{create_month}', '-', '')
	                                               AND TO_CHAR(ADD_MONTHS(TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM'), 0), 'YYYYMM')              
	                #end
	                GROUP BY  PROD_CODE, CUST_CODE, SUBSTR(CNFM_DATE,1,6), GUBN_CODE
	                )  
	             ) A,
	             (
	              SELECT 1 NO FROM DUAL
	              UNION ALL
	              SELECT 2 NO FROM DUAL
	             ) B         
	         GROUP BY PROD_CODE, CUST_CODE, YYYYMM, NO, DECODE(NO,1,GUBUN,'04')  
	        ) A,         
	        (
	          SELECT ITEM_ID, ITEM_NAME FROM ITEM_MST  ) ITEM, 
	        ( 
	        -- 유통본부 (CUSTOMER의 테이블의 데이터가 맞질 않음)
	        SELECT CUST_ID,    
	               CUST_NAME CUST_NM,
	               GRUP_CODE1 GR_CD, 
	               CD_NAME MART_NM
	        FROM CUSTOMER C,
	            (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
	        WHERE C.GRUP_CODE1 = M.CD 
            -- 거래처/본부 N개 선택 조건     
		    #if("$!{checked_site1}" == "Y") 
			  [AND C.CUST_ID IN ($commonUtil.replaceAll("${cust_query}", "''", "'"))]	    
		    #else   
			  [AND C.GRUP_CODE1 IN ($commonUtil.replaceAll("${mart_query}", "''", "'"))]	    
		    #end         
	        ) CUST_INFO,
	        (
	 		#if ("$!{create_month}" == "")
		        SELECT  TO_DATE('210001', 'YYYYMM') MM 
		          FROM  DUAL 
	 		#else
				SELECT  TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM') MM
				  FROM  DUAL
			#end
		    ) DAY_M     				          
	    WHERE A.PROD_CODE = ITEM.ITEM_ID
	      #if("$!{item_query}" == "") 
	      [AND ITEM.ITEM_ID||ITEM.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']     
	      #else
	      [AND ITEM.ITEM_ID IN ($commonUtil.replaceAll("${item_query}", "''", "'"))]
	      #end   
	      AND CUST_INFO.CUST_ID = A.CUST_CODE    
	    GROUP BY PROD_CODE, GUBUN  
	    ORDER BY PROD_CODE, GUBUN
	     
    #else 		  
	--------------------------
	/* WEEKLY START */
	--------------------------
	SELECT /* fc_05140_disInvActSalesInfo_tailer(W) */
	       PROD_CODE,  
	       MIN(ITEM_NAME) ITEM_NM,
	       DECODE(GUBUN,'00','농심판매', '01', '실판매', '02', '유통재고', '재고일수') GUBUN_NM,
	       MAX(QTY)             MAX_QTY,  -- 조회기간내 최대판매(수량)
	       ROUND(AVG(QTY),2)    AVG_QTY,  -- 조회기간내 평균판매(수량)
	       ROUND(STDDEV(QTY),2) STD_QTY,  -- 조회기간내 표준편차(수량) 
	       SUM(QTY)             SUM_QTY,  -- 조회기간내 합계   (수량) 
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+(-7*1), 'IYYYIW')  THEN A.QTY ELSE 0 END) W0_NO_Q,  --당주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*0), 'IYYYIW')  THEN A.QTY ELSE 0 END) W1_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*1), 'IYYYIW')  THEN A.QTY ELSE 0 END) W2_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*2), 'IYYYIW')  THEN A.QTY ELSE 0 END) W3_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*3), 'IYYYIW')  THEN A.QTY ELSE 0 END) W4_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*4), 'IYYYIW')  THEN A.QTY ELSE 0 END) W5_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*5), 'IYYYIW')  THEN A.QTY ELSE 0 END) W6_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*6), 'IYYYIW')  THEN A.QTY ELSE 0 END) W7_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*7), 'IYYYIW')  THEN A.QTY ELSE 0 END) W8_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*8), 'IYYYIW')  THEN A.QTY ELSE 0 END) W9_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*9), 'IYYYIW')  THEN A.QTY ELSE 0 END) W10_NO_Q,  --1주
	       SUM(CASE WHEN A.YYYYWW = TO_CHAR(DAY_W.WW+( 7*10), 'IYYYIW') THEN A.QTY ELSE 0 END) W11_NO_Q  --1주       
	FROM
	       (
	       -- 재고일수를 한 컬럼(QTY)으로 GROUP BY    
	       SELECT PROD_CODE, CUST_CODE, YYYYWW, --NO,
	              DECODE(NO,1,GUBUN,'04') GUBUN,
	              DECODE(NO,1,MAX(QTY),AVG(INV_DAY)) QTY
	        FROM
	            (
	            -- 재고일수를 계산
	            SELECT
	                   PROD_CODE, 
	                   CUST_CODE,
	                   YYYYWW,
	                   GUBUN,
	                   -- 실판매,유통재고,농심판매를 한 컬럼QTY(수량)으로 합치기 
	                   DECODE(GUBUN, '01', ACT_BOX, '02', INV_BOX, NST_QTY) QTY,
	                   -- 재고일수 : 실판매(수량)/유통재고(수량)
	                   ROUND(
	                   (CASE WHEN (SUM(INV_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYWW)>0) THEN  (SUM(ACT_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYWW)
	                                                                                                     /SUM(INV_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYWW))
	                                                                                               ELSE  0
	                   END
	                   ),2) INV_DAY
	            FROM
	                (
	                --1. 농심판매 집합1
	                SELECT PROD_CODE,
	                       CUST_CODE,
	                       CAL.YYYYWW YYYYWW,  
	                       0 ACT_BOX,                                                            -- 실판매
	                       0 INV_BOX,                                      				 	     -- 유통재고
	                       SUM(DECODE('$!{checked_uom}','amount', SUPL_AMT, SELL_BOX)) NST_QTY,  -- 농심판매
	                       '00' GUBUN  
	                FROM SDRDT103 SDR, CAL_MST CAL
	                WHERE SELL_GUBN_CODE IN ('01', '02')
	                 AND  SDR.CNFM_DATE = CAL.YYYYMMDD
	                #if ("$!{sdate}" == "")
	                 AND CNFM_DATE = '21000101'
				    #else                   		      
			         AND CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
                   					   AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		
      	            #end
	                GROUP BY PROD_CODE, CUST_CODE, CAL.YYYYWW
	                ---------
	                UNION ALL -- 집합1+집합2
	                ---------
	                --2. 실판매(01)/유통재고(02) 집합2
	                SELECT PROD_CODE,
	                       CUST_CODE, 
	                       CAL.YYYYWW YYYYWW,
	                       SUM(DECODE(GUBN_CODE, '01', DECODE('$!{checked_uom}','amount', ODER_AMT, ODER_BOX))) ACT_BOX, -- 실판매
	                       SUM(DECODE(GUBN_CODE, '02', DECODE('$!{checked_uom}','amount', ODER_AMT, ODER_BOX))) INV_BOX, -- 유통재고  
	                       0 NST_QTY,                                                                                    -- 농심판매   
	                       GUBN_CODE GUBUN
	                FROM SDORT121 SDO, CAL_MST CAL
	               WHERE GUBN_CODE IN ('01', '02')
	                 AND SDO.CNFM_DATE = CAL.YYYYMMDD
	                #if ("$!{sdate}" == "")
	                 AND CNFM_DATE = '21000101'
	                #else
			         AND CNFM_DATE BETWEEN TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')-7, 2), 'YYYYMMDD') 
                   					   AND TO_CHAR(NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+(7*10), 1), 'YYYYMMDD')		
	                #end
	                GROUP BY  PROD_CODE, CUST_CODE, CAL.YYYYWW, GUBN_CODE
	                )  
	             ) A,
	             (
	              SELECT 1 NO FROM DUAL
	              UNION ALL
	              SELECT 2 NO FROM DUAL
	             ) B         
	         GROUP BY PROD_CODE, CUST_CODE, YYYYWW, NO, DECODE(NO,1,GUBUN,'04')  
	        ) A,         
	        (
	          SELECT ITEM_ID, ITEM_NAME 
	            FROM ITEM_MST  
	        ) ITEM, 
	        (  
	        -- 유통본부 (CUSTOMER의 테이블의 데이터가 맞질 않음)
	        SELECT CUST_ID,    
	               CUST_NAME CUST_NM,
	               GRUP_CODE1 GR_CD, 
	               CD_NAME MART_NM
	        FROM CUSTOMER C,
	            (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
	        WHERE C.GRUP_CODE1 = M.CD 
            -- 거래처/본부 N개 선택 조건
            -- 거래처/본부 N개 선택 조건     
		    #if("$!{checked_site1}" == "Y") 
			  [AND C.CUST_ID IN ($commonUtil.replaceAll("${cust_query}", "''", "'"))]	    
		    #else   
			  [AND C.GRUP_CODE1 IN ($commonUtil.replaceAll("${mart_query}", "''", "'"))]	    
		    #end         	        
	        ) CUST_INFO,
	        (
	 		#if ("$!{sdate}" == "")
			     SELECT NEXT_DAY(TO_DATE('21000101','YYYYMMDD')-7, 2) WW  FROM DUAL                  			
	 		#else
	 		     -- 당주 월요일 부터 ~  
			     SELECT NEXT_DAY(TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')-7, 2) WW FROM DUAL
			#end 
		    ) DAY_W     				          
	    WHERE A.PROD_CODE = ITEM.ITEM_ID
	      AND CUST_INFO.CUST_ID = A.CUST_CODE   
	      #if("$!{item_query}" == "") 
	      [AND ITEM.ITEM_ID||ITEM.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']     
	      #else
	      [AND ITEM.ITEM_ID IN ($commonUtil.replaceAll("${item_query}", "''", "'"))]
	      #end   	             
	    GROUP BY PROD_CODE, GUBUN  
	    ORDER BY PROD_CODE, GUBUN	  
	 #end    
 	</query>   	 	 	 
 		  
    <query id="fc_05150_disInvActSalesInfo_tailer" paging="true">
 	SELECT /* fc_05150_disInvActSalesInfo_tailer(D) */
	       PROD_CODE,  
	       MIN(ITEM_NAME) ITEM_NM,
	       DECODE(GUBUN,'00','농심판매', '01', '실판매', '02', '유통재고', '재고일수') GUBUN_NM,
	       MAX(QTY)             MAX_QTY,  -- 조회기간내 최대판매(수량)
	       ROUND(AVG(QTY),1)    AVG_QTY,  -- 조회기간내 평균판매(수량)
	       ROUND(STDDEV(QTY),1) STD_QTY,  -- 조회기간내 표준편차(수량) 
	       SUM(QTY)             SUM_QTY,  -- 조회기간내 합계   (수량) 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD,   'YYYYMMDD')  THEN A.QTY ELSE 0 END) D0_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+1, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D1_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+2, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D2_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+3, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D3_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+4, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D4_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+5, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D5_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+6, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D6_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+7, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D7_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+8, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D8_NO_Q,--당일  
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+9, 'YYYYMMDD')  THEN A.QTY ELSE 0 END) D9_NO_Q, --당일 
	       -----------------------------------------------------------------QTY--------------------------   
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+10, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D10_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+11, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D11_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+12, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D12_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+13, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D13_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+14, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D14_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+15, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D15_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+16, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D16_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+17, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D17_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+18, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D18_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+19, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D19_NO_Q,--당일 
	       -----------------------------------------------------------------QTY---------------------------- 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+20, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D20_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+21, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D21_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+22, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D22_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+23, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D23_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+24, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D24_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+25, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D25_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+26, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D26_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+27, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D27_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+28, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D28_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+29, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D29_NO_Q,--당일 
	       SUM(CASE WHEN A.YYYYDD = TO_CHAR(DAY_D.DD+30, 'YYYYMMDD') THEN A.QTY ELSE 0 END) D30_NO_Q --당일
    	FROM    
	       (
	       -- 재고일수를 한 컬럼(QTY)으로 GROUP BY    
	       SELECT PROD_CODE, CUST_CODE, YYYYDD, --NO,
	              DECODE(NO,1,GUBUN,'04') GUBUN,
	              DECODE(NO,1,MAX(QTY),AVG(INV_DAY)) QTY
	        FROM
	            (
	            -- 재고일수를 계산
	            SELECT
	                   PROD_CODE, 
	                   CUST_CODE,
	                   YYYYDD,
	                   GUBUN,
	                   -- 실판매,유통재고,농심판매를 한 컬럼QTY(수량)으로 합치기 
	                   DECODE(GUBUN, '01', ACT_BOX, '02', INV_BOX, NST_QTY) QTY,
	                   -- 재고일수 : 실판매(수량)/유통재고(수량)
	                   ROUND(
	                   (CASE WHEN (SUM(INV_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYDD)>0) THEN  (SUM(ACT_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYDD)
	                                                                                                     /SUM(INV_BOX) OVER(PARTITION BY PROD_CODE, CUST_CODE, YYYYDD))
	                                                                                               ELSE  0
	                   END
	                   ),1) INV_DAY
	            FROM
	                (
	                --1. 농심판매 집합1
	                SELECT PROD_CODE,
	                       CUST_CODE,
	                       CNFM_DATE YYYYDD,  
	                       0 ACT_BOX,                                                            -- 실판매
	                       0 INV_BOX,                                      				 	     -- 유통재고
	                       SUM(DECODE('$!{checked_uom}','amount', SUPL_AMT, SELL_BOX)) NST_QTY,  -- 농심판매
	                       '00' GUBUN  
	                FROM SDRDT103 SDR
	                WHERE SELL_GUBN_CODE IN ('01', '02')
				#if("$!{sdate}" == "")
	                  AND CNFM_DATE = '21000101'
				#else  		    
			          AND CNFM_DATE BETWEEN TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'),'YYYYMMDD') 
                      					AND TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+31,'YYYYMMDD') 		  
                #end      					                   
		        	GROUP BY PROD_CODE, CUST_CODE, CNFM_DATE
	                ---------
	                UNION ALL -- 집합1+집합2
	                ---------
	                --2. 실판매(01)/유통재고(02) 집합2
	                SELECT PROD_CODE,
	                       CUST_CODE, 
	                       CNFM_DATE YYYYDD,
	                       SUM(DECODE(GUBN_CODE, '01', DECODE('$!{checked_uom}','amount', ODER_AMT, ODER_BOX))) ACT_BOX, -- 실판매
	                       SUM(DECODE(GUBN_CODE, '02', DECODE('$!{checked_uom}','amount', ODER_AMT, ODER_BOX))) INV_BOX, -- 유통재고  
	                       0 NST_QTY,                                                                                    -- 농심판매   
	                       GUBN_CODE GUBUN
	                FROM SDORT121 SDO
	               WHERE GUBN_CODE IN ('01', '02') 
 				#if("$!{sdate}" == "")
  	                  AND CNFM_DATE = '21000101'
				#else  		    
			          AND CNFM_DATE BETWEEN TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD'), 'YYYYMMDD') 
                      					AND TO_CHAR(TO_DATE(REPLACE('$!{sdate}', '-', ''), 'YYYYMMDD')+31,'YYYYMMDD') 		                     
	            #end
	                GROUP BY  PROD_CODE, CUST_CODE, CNFM_DATE, GUBN_CODE
	                )  
	             ) A,
	             (
	              SELECT 1 NO FROM DUAL
	              UNION ALL
	              SELECT 2 NO FROM DUAL
	             ) B         
	         GROUP BY PROD_CODE, CUST_CODE, YYYYDD, NO, DECODE(NO,1,GUBUN,'04')  
	        ) A,         
	        (
	          SELECT ITEM_ID, ITEM_NAME 
	            FROM ITEM_MST  
	        ) ITEM, 
	        (  
	        -- 유통본부 (CUSTOMER의 테이블의 데이터가 맞질 않음)
	        SELECT CUST_ID,    
	               CUST_NAME CUST_NM,
	               GRUP_CODE1 GR_CD, 
	               CD_NAME MART_NM
	        FROM CUSTOMER C,
	            (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
	        WHERE C.GRUP_CODE1 = M.CD 
            -- 거래처/본부 N개 선택 조건
            -- 거래처/본부 N개 선택 조건     
		    #if("$!{checked_site1}" == "Y") 
			  [AND C.CUST_ID IN ($commonUtil.replaceAll("${cust_query}", "''", "'"))]	    
		    #else   
			  [AND C.GRUP_CODE1 IN ($commonUtil.replaceAll("${mart_query}", "''", "'"))]	    
		    #end         	        
	        ) CUST_INFO,
	        (
		#if("$!{sdate}" == "")		     
		     SELECT TO_DATE('21000101','YYYYMMDD') DD FROM DUAL   
		#else
		     SELECT TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')DD FROM DUAL 	
		#end	
			 ) DAY_D      				          
	    WHERE A.PROD_CODE = ITEM.ITEM_ID
	      AND CUST_INFO.CUST_ID = A.CUST_CODE          
	      #if("$!{item_query}" == "") 
	      [AND ITEM.ITEM_ID||ITEM.ITEM_NAME LIKE '%'||'$!{item_id}'||'%']     
	      #else
	      [AND ITEM.ITEM_ID IN ($commonUtil.replaceAll("${item_query}", "''", "'"))]
	      #end    

	    GROUP BY PROD_CODE, GUBUN  
	    ORDER BY PROD_CODE, GUBUN	     
    </query> 	 	
 	<!-- 유통재고 실판매정보 분석 end -->   
 	
 	<!-- 수요예측 분석 공통 쿼리 start -->
	<query id="org_list">   
		SELECT DECODE(LVL, 20, '영업본부', 30, '영업부', '영업지점') LVL_NM, LVL 
		FROM HRCHY,
		    (SELECT 1 FROM DUAL) B
		WHERE HTYPE = '영업'
		GROUP BY LVL_TYPE, LVL
		ORDER BY LVL DESC  
	</query>	
 
	<query id="new_org_list">
	  SELECT  DISTINCT HC.HID, HC.HID_NAME
	          FROM  HRCHY HC
	         WHERE  HC.HTYPE = '영업' 
	           AND  HC.LVL   = '40' 
	           AND	HC.MADE_TYPE != 'DE'
	         ORDER  BY HC.HID
	</query>

 	<!-- 유통본부 조회 --> 
	<query id="grup_code1_list" paging="true">
		SELECT CD, CD_NAME 
		FROM CODE_MST,
		    (SELECT 1 FROM DUAL) B 
		WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부'
 	</query>	

 	<!-- 거래처  조회 --> 
	<query id="customer_code_list" paging="true">
		--거래처
		SELECT CUST_ID, CUST_NAME
		FROM CUSTOMER C, 
		    (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
		WHERE C.GRUP_CODE1 = M.CD 
		[AND  C.CUST_ID = '${random_code}']
		[AND  C.CUST_NAME LIKE '%'||'${random_name}'||'%'] 
		ORDER BY CUST_NAME   
 	</query>	
 	
	<query id="select_item" paging="true">
	  SELECT IM.ITEM_ID, IM.ITEM_NAME
	    FROM ITEM_MST IM, 
	        (SELECT 1 FROM DUAL) B 
	  WHERE  IM.MADE_TYPE != 'DE'
	  [AND  IM.ITEM_ID||IM.ITEM_NAME LIKE '%'||'$!{item_search}'||'%']  
	 ORDER 	BY IM.ITEM_ID 
 	</query>	
    
 	<query id="customer_cCode_list" paging="true"> 	
		-- 유통본부 (CUSTOMER의 테이블의 데이터가 맞질 않음) 
		-- 1. 거래처별 조회
		SELECT CUST_ID, CUST_NAME
		 FROM CUSTOMER C,
		     (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
		WHERE C.GRUP_CODE1 = M.CD  
	    [AND  CUST_ID||CUST_NAME LIKE '%'||'$!{cust_search}'||'%']  		
		GROUP BY CUST_ID, CUST_NAME
		ORDER BY CUST_ID
 	</query>	 
 
	<query id="customer_mCode_list" paging="true"> 	
		-- 유통본부 (CUSTOMER의 테이블의 데이터가 맞질 않음)
		-- 2. 본부별 조회 
		SELECT GRUP_CODE1 GRUP_CODE1,
		       CD_NAME    CUST_NM
		FROM CUSTOMER C,
		    (SELECT CD, CD_NAME FROM CODE_MST WHERE CD_GRP = 'GRUP_CODE1' AND DESCR = '유통본부') M
		WHERE C.GRUP_CODE1 = M.CD  
		[AND  GRUP_CODE1||CD_NAME LIKE '%'||'$!{cust_search}'||'%']
		GROUP BY GRUP_CODE1, CD_NAME
		ORDER BY GRUP_CODE1  
 	</query>	
 	
 	<query id="month12_list">  
 	     #if ("$!{periodGB1}" == "M" || "$!{periodGB2}" == "") 
		 SELECT  TO_CHAR (ADD_MONTHS (MM.YYYYMM, 0), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 1), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 2), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 3), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 4), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 5), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 6), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 7), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 8), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 9), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 10), 'YYYY-MM')
		        ,TO_CHAR (ADD_MONTHS (MM.YYYYMM, 11), 'YYYY-MM')
		  FROM  
		 		#if ("$!{create_month}" == "")
			        (
			        SELECT  SYSDATE YYYYMM 
			          FROM  DUAL
			        ) MM		 		
		 		#else
			 		(
					SELECT  TO_DATE (REPLACE ('$!{create_month}', '-', ''),'YYYYMM') YYYYMM
					  FROM  DUAL
					) MM
				#end	
		#elseif ("$!{periodGB2}" == "W")
		 SELECT  TO_CHAR(DAY_WW.WW+(-7*1), 'IYYYIW')WW0,
		         TO_CHAR(DAY_WW.WW+( 7*0), 'IYYYIW')WW1,
		         TO_CHAR(DAY_WW.WW+( 7*1), 'IYYYIW')WW2,
		         TO_CHAR(DAY_WW.WW+( 7*2), 'IYYYIW')WW3,
		         TO_CHAR(DAY_WW.WW+( 7*3), 'IYYYIW')WW4,
		         TO_CHAR(DAY_WW.WW+( 7*4), 'IYYYIW')WW5,
		         TO_CHAR(DAY_WW.WW+( 7*5), 'IYYYIW')WW6,
		         TO_CHAR(DAY_WW.WW+( 7*6), 'IYYYIW')WW7,
		         TO_CHAR(DAY_WW.WW+( 7*7), 'IYYYIW')WW8,
		         TO_CHAR(DAY_WW.WW+( 7*8), 'IYYYIW')WW9,
		         TO_CHAR(DAY_WW.WW+( 7*9), 'IYYYIW')WW10,
		         TO_CHAR(DAY_WW.WW+( 7*10), 'IYYYIW')WW11
		  FROM  
		 		#if ("$!{sdate}" == "")
                (
                 SELECT NEXT_DAY(sysdate, 2) WW 
                 FROM DUAL )  DAY_WW                    	 		
		 		#else
		 		(
				SELECT  NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'),2) WW
				  FROM  DUAL ) DAY_WW
				#end			
		#end		
	</query>	
 
 	<query id="weekly12_list"> 
		 SELECT  TO_CHAR(DAY_WW.WW+(-7*1), 'IYYYIW')WW0,
		         TO_CHAR(DAY_WW.WW+( 7*0), 'IYYYIW')WW1,
		         TO_CHAR(DAY_WW.WW+( 7*1), 'IYYYIW')WW2,
		         TO_CHAR(DAY_WW.WW+( 7*2), 'IYYYIW')WW3,
		         TO_CHAR(DAY_WW.WW+( 7*3), 'IYYYIW')WW4,
		         TO_CHAR(DAY_WW.WW+( 7*4), 'IYYYIW')WW5,
		         TO_CHAR(DAY_WW.WW+( 7*5), 'IYYYIW')WW6,
		         TO_CHAR(DAY_WW.WW+( 7*6), 'IYYYIW')WW7,
		         TO_CHAR(DAY_WW.WW+( 7*7), 'IYYYIW')WW8,
		         TO_CHAR(DAY_WW.WW+( 7*8), 'IYYYIW')WW9,
		         TO_CHAR(DAY_WW.WW+( 7*9), 'IYYYIW')WW10,
		         TO_CHAR(DAY_WW.WW+( 7*10), 'IYYYIW')WW11
		  FROM  
		 		#if ("$!{sdate}" == "")
                (
                 SELECT NEXT_DAY(sysdate, 2) WW 
                 FROM DUAL )  DAY_WW                    	 		
		 		#else
		 		(
				SELECT  NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'),2) WW
				  FROM  DUAL ) DAY_WW
				#end	
	</query>	 
  
 	<query id="daily31_list"> 
	 	SELECT  TO_CHAR(DD+0 , 'YYYYMMDD') D0 ,
			TO_CHAR(DD+1 , 'YYYYMMDD') D1 ,
			TO_CHAR(DD+2 , 'YYYYMMDD') D2 ,
			TO_CHAR(DD+3 , 'YYYYMMDD') D3 ,
			TO_CHAR(DD+4 , 'YYYYMMDD') D4 ,
			TO_CHAR(DD+5 , 'YYYYMMDD') D5 ,
			TO_CHAR(DD+6 , 'YYYYMMDD') D6 ,
			TO_CHAR(DD+7 , 'YYYYMMDD') D7 ,
			TO_CHAR(DD+8 , 'YYYYMMDD') D8 ,
			TO_CHAR(DD+9 , 'YYYYMMDD') D9 ,
			TO_CHAR(DD+10, 'YYYYMMDD') D10,
			TO_CHAR(DD+11, 'YYYYMMDD') D11,
			TO_CHAR(DD+12, 'YYYYMMDD') D12,
			TO_CHAR(DD+13, 'YYYYMMDD') D13,
			TO_CHAR(DD+14, 'YYYYMMDD') D14,
			TO_CHAR(DD+15, 'YYYYMMDD') D15,
			TO_CHAR(DD+16, 'YYYYMMDD') D16,
			TO_CHAR(DD+17, 'YYYYMMDD') D17,
			TO_CHAR(DD+18, 'YYYYMMDD') D18,
			TO_CHAR(DD+19, 'YYYYMMDD') D19,
			TO_CHAR(DD+20, 'YYYYMMDD') D20,
			TO_CHAR(DD+21, 'YYYYMMDD') D21,
			TO_CHAR(DD+22, 'YYYYMMDD') D22,
			TO_CHAR(DD+23, 'YYYYMMDD') D23,
			TO_CHAR(DD+24, 'YYYYMMDD') D24,
			TO_CHAR(DD+25, 'YYYYMMDD') D25,
			TO_CHAR(DD+26, 'YYYYMMDD') D26,
			TO_CHAR(DD+27, 'YYYYMMDD') D27,
			TO_CHAR(DD+28, 'YYYYMMDD') D28,
			TO_CHAR(DD+29, 'YYYYMMDD') D29,
			TO_CHAR(DD+30, 'YYYYMMDD') D30       
	    FROM 
	 		#if ("$!{sdate}" == "")
            (
              SELECT SYSDATE DD 
             FROM DUAL 
            )                    	 		
	 		#else
	 		(
			SELECT  TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD') DD
			  FROM  DUAL 
			 )
			#end							    
 	</query>
 	
 	<query id="weekly_list">  
	SELECT /* weekly_list */
	      /*
	      TO_CHAR (DAY_WW.WW+(-7*1), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+(-7*1), 'YYYYMMDD') w00,
	      TO_CHAR (DAY_WW.WW+( 7*1), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*0), 'YYYYMMDD') w01,
	      TO_CHAR (DAY_WW.WW+( 7*1), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*1), 'YYYYMMDD') w02,      
	      TO_CHAR (DAY_WW.WW+( 7*2), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*2), 'YYYYMMDD') w03,
	      TO_CHAR (DAY_WW.WW+( 7*3), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*3), 'YYYYMMDD') w04,
	      TO_CHAR (DAY_WW.WW+( 7*4), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*4), 'YYYYMMDD') w05,
	      TO_CHAR (DAY_WW.WW+( 7*5), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*5), 'YYYYMMDD') w06,
	      TO_CHAR (DAY_WW.WW+( 7*6), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*6), 'YYYYMMDD') w07,
	      TO_CHAR (DAY_WW.WW+( 7*7), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*7), 'YYYYMMDD') w08,
	      TO_CHAR (DAY_WW.WW+( 7*8), 'WW')||'주'||'\n'||TO_CHAR(DAY_WW.WW+( 7*8), 'YYYYMMDD') w09
	      */

	      TO_CHAR (DAY_WW.WW+(-7*1), 'WW')||'주' w00,
	      TO_CHAR (DAY_WW.WW+( 7*1), 'WW')||'주' w01,
	      TO_CHAR (DAY_WW.WW+( 7*1), 'WW')||'주' w02,      
	      TO_CHAR (DAY_WW.WW+( 7*2), 'WW')||'주' w03,
	      TO_CHAR (DAY_WW.WW+( 7*3), 'WW')||'주' w04,
	      TO_CHAR (DAY_WW.WW+( 7*4), 'WW')||'주' w05,
	      TO_CHAR (DAY_WW.WW+( 7*5), 'WW')||'주' w06,
	      TO_CHAR (DAY_WW.WW+( 7*6), 'WW')||'주' w07,
	      TO_CHAR (DAY_WW.WW+( 7*7), 'WW')||'주' w08,
	      TO_CHAR (DAY_WW.WW+( 7*8), 'WW')||'주' w09		      
	  FROM    
	 		#if ("$!{sdate}" == "") 
	     		(
	                SELECT NEXT_DAY(SYSDATE, 3) WW
	                FROM DUAL  
	            )DAY_WW
	 		#else  
		 		(
				SELECT  NEXT_DAY(TO_DATE (REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 3) WW
				  FROM  DUAL
				) DAY_WW
			#end 
            		  
	</query>	
	
	<query id="weekly_sub_list"> 
		SELECT /* weekly_sub_list */
	      TO_CHAR(DAY_WW.WW1+(-7*1-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+(-7*1), 'MMDD') d00,
	      TO_CHAR(DAY_WW.WW1+( 7*0-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*0), 'MMDD') d01,
	      TO_CHAR(DAY_WW.WW1+( 7*1-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*1), 'MMDD') d02,
	      TO_CHAR(DAY_WW.WW1+( 7*2-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*2), 'MMDD') d03,
	      TO_CHAR(DAY_WW.WW1+( 7*3-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*3), 'MMDD') d04,
	      TO_CHAR(DAY_WW.WW1+( 7*4-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*4), 'MMDD') d05,
	      TO_CHAR(DAY_WW.WW1+( 7*5-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*5), 'MMDD') d06,
	      TO_CHAR(DAY_WW.WW1+( 7*6-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*6), 'MMDD') d07,
	      TO_CHAR(DAY_WW.WW1+( 7*7-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*7), 'MMDD') d08,
	      TO_CHAR(DAY_WW.WW1+( 7*8-2), 'MMDD')||'~'||TO_CHAR(DAY_WW.WW2+( 7*8), 'MMDD') d09
		  FROM   
		 		#if ("$!{sdate}" == "") 
		     		(
                      SELECT NEXT_DAY(SYSDATE, 3) WW1,
                             NEXT_DAY(SYSDATE, 7) WW2
                        FROM DUAL     
		            )DAY_WW
		 		#else  
			 		(
                      SELECT NEXT_DAY(TO_DATE (REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 3) WW1,
                             NEXT_DAY(TO_DATE (REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 7) WW2
					  
					  FROM  DUAL
					) DAY_WW
				#end             		  
	</query>	 

	<query id="day_Weekly_main_list"> 
     SELECT /* day_Weekly_main_list */
            -------------------------------------
     	    TO_CHAR(CAL.DD+( 7*-1), 'IYYYIW') W00,
            TO_CHAR(CAL.DD+( 7*0), 'IYYYIW') W01,
            TO_CHAR(CAL.DD+( 7*1), 'IYYYIW') W02, 
            TO_CHAR(CAL.DD+( 7*2), 'IYYYIW') W03,
            TO_CHAR(CAL.DD+( 7*3), 'IYYYIW') W04,
            TO_CHAR(CAL.DD+( 7*4), 'IYYYIW') W05,
            TO_CHAR(CAL.DD+( 7*5), 'IYYYIW') W06,
            TO_CHAR(CAL.DD+( 7*6), 'IYYYIW') W07,
            TO_CHAR(CAL.DD+( 7*7), 'IYYYIW') W08,
            TO_CHAR(CAL.DD+( 7*8), 'IYYYIW') W09 
            -------------------------------------
            -- 10주 --
            -------------------------------------            
       FROM   
	 		#if ("$!{sdate}" == "") 
	          (
	          SELECT CAL_DATE DD 
	          FROM CAL_MST,
	               (SELECT 1 FROM DUAL) B 
	          WHERE YYYYWW = TO_CHAR(TRUNC(SYSDATE, 'DD'), 'IYYYIW')
	            AND WEEK_DAY = '월'
	          ) CAL 
	 		#else  
	          (
	          SELECT CAL_DATE DD  
	          FROM CAL_MST,
	               (SELECT 1 FROM DUAL) B 
	          WHERE YYYYWW = TO_CHAR(TRUNC(TO_DATE (REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 'DD'), 'IYYYIW')
	            AND WEEK_DAY = '월'
	          ) CAL 
			#end   	
	</query>	 
	
	<query id="day_Weekly_sub_list"> 
     SELECT /* day_weekly_sub_list */
            ----------------------------------
            TO_CHAR(CAL.DD+0, 'YYYYMMDD')  d0,
            TO_CHAR(CAL.DD+1, 'YYYYMMDD')  d1,
            TO_CHAR(CAL.DD+2 , 'YYYYMMDD') d2, 
            TO_CHAR(CAL.DD+3 , 'YYYYMMDD') d3,
            TO_CHAR(CAL.DD+4 , 'YYYYMMDD') d4, 
            TO_CHAR(CAL.DD+5 , 'YYYYMMDD') d5, 
            TO_CHAR(CAL.DD+6 , 'YYYYMMDD') d6, 
            TO_CHAR(CAL.DD+7 , 'YYYYMMDD') d7, 
            TO_CHAR(CAL.DD+8 , 'YYYYMMDD') d8, 
            TO_CHAR(CAL.DD+9 , 'YYYYMMDD') d9, 
            TO_CHAR(CAL.DD+10, 'YYYYMMDD') d10,
            TO_CHAR(CAL.DD+11, 'YYYYMMDD') d11,
            TO_CHAR(CAL.DD+12, 'YYYYMMDD') d12,
            TO_CHAR(CAL.DD+13, 'YYYYMMDD') d13
            -------------------------------------
            -- 10주 --
            -------------------------------------            
       FROM   
	 		#if ("$!{sdate}" == "") 
	          (
	          SELECT CAL_DATE DD 
	          FROM CAL_MST,
	              (SELECT 1 FROM DUAL) B
	          WHERE YYYYWW = TO_CHAR(TRUNC(SYSDATE, 'DD'), 'IYYYIW')
	            AND WEEK_DAY = '월'
	          ) CAL 
	 		#else  
	          (
	          SELECT CAL_DATE DD  
	          FROM CAL_MST,
	              (SELECT 1 FROM DUAL) B 
	          WHERE YYYYWW = TO_CHAR(TRUNC(TO_DATE (REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 'DD'), 'IYYYIW')
	            AND WEEK_DAY = '월'
	          ) CAL 
			#end             		  
	</query> 
	
	<!-- 품종구분(대) -->
	<query id="custGB_B_list"> 
		SELECT CD.CD           CD,      
		       MAX(CD.CD_NAME) CD_NM  
		FROM  CODE_MST CD,
		      (SELECT 1 FROM DUAL) B       
		WHERE CD.CD_GRP = 'SALES_CAT1'
		GROUP BY CD 
	</query>			
	
	<!-- 유통채널 -->
	<query id="fcst_grp_list"> 
		SELECT --CD, 
		       CD_NAME
		FROM CODE_MST,
		     (SELECT 1 FROM DUAL) B
		WHERE CD_GRP = 'FCST_GRPCD'    
		ORDER BY CD
    </query>
    
    <!-- END --> 
    <!-- 수요예측 분석 공통 쿼리 end --> 
    
    	   
<!-- 수요예측 분석 By KKCKIM end -->
</queries>
      