<?xml version="1.0" encoding="EUC-KR"?>
<queries>	

<!--
=====================================================================================================
	TEMPLATE 
=====================================================================================================
--> 
		
	
	<!-- 계획 수정 그룹 상세 리스트 -->
	<query id="dumy_lst">
	
			select 'x' from dual 
	
	</query>

	
	<!-- 
	=======================
		TEMPLATE 
	=======================
	--> 
	
	<!-- TEMPLATE --> 
	<query id="template_query_id" paging="true"> 
			
			SELECT 	'TEMPLATE' TEMPLATE
			FROM 		DUAL
			
	</query> 
	
	<!-- ITERATOR QUERY TEMPLATE --> 
	<query id="iterator_query_template_query_id" fix="fix_var" iterator="iterator_var"> 
			
			SELECT 	'TEMPLATE' TEMPLATE
			FROM 		DUAL
			
	</query>
	
	<!-- 
	=======================
		TEST 
	=======================
	-->
	
	<!--  공장할당 결과 조정 조회 --> 
	<query id="plantAllocationPlanResultAnalysis_list_TEST">
	
            SELECT  '1' NO, -- 0
                    VERSION VERSION, --공장할당VERSION 1
                    RES_TP RES_TP,     --설비유형 2 
                    ITEM_ID ITEM_ID, --자재코드 3 
                    ITEM_NAME ITEM_NAME, --자재코드명 4
                    ROUND(W3_AVG_RATIO,2) W3_AVG_RATIO, --3주평균접근율 5
                    ROUND(W1_AVG_RATIO,2) W1_AVG_RATIO, --1주평균접근율 6
                    TO_CHAR(SAFETY_STOCK,'999,999,999') SAFETY_STOCK, --안전재고 7
                    TO_CHAR(BASE_STOCK,'999,999,999') BASE_STOCK, --기초재고 8
                    TO_CHAR(RECEIPT_EXPT,'999,999,999') RECEIPT_EXPT, --금주생산계획 9
                    TO_CHAR(SALES_PLAN,'999,999,999') SALES_PLAN, --금주판매계획 10
                    ROUND(SALES_VS_WEEK1_AVG,2) SALES_VS_WEEK1_AVG, --1주평균판매대비 11
                    TO_CHAR(EXPERT_STOCK,'999,999,999') EXPERT_STOCK, --예상재고(차주초) 12
                    TO_CHAR(N_RECEIPT_EXPT,'999,999,999') N_RECEIPT_EXPT, --차주생산계획 13
                    -------------------------------------------------------------------------------------------------          
                    TO_CHAR(TRUNC(TO_DATE('2009-02-05','YYYY-MM-DD'),'D')+6+(7*0),'YYYY-MM-DD') RP0_DAY, --당주(월) 14 -- 변경(토)
                    TO_CHAR(TRUNC(TO_DATE('2009-02-05','YYYY-MM-DD'),'D')+6+(7*1),'YYYY-MM-DD') RP1_DAY, --차주(월) 15 -- 변경(토)
                    TO_CHAR(TRUNC(TO_DATE('2009-02-05','YYYY-MM-DD'),'D')+6+(7*2),'YYYY-MM-DD') RP2_DAY, --차차주(월) 16 -- 변경(토)
                    RP_QTY0 RP0_QTY, --보충요구량(당주) 17
                    RP_QTY1 RP1_QTY, --보충요구량(차주) 18
                    RP_QTY2 RP2_QTY, --보충요구량(차차주) 19
                    NVL(TRIM(PO_QTY1),0) PO_QTY1, --생산필요량(차주) 20
                    NVL(TRIM(PO_QTY2),0) PO_QTY2, --생산필요량(차차주) 21
                    TO_CHAR(NN_SALES_PLAN,'999,999,999') NN_SALES_PLAN,   --차차주판매계획 22        
                    TO_CHAR(EXPERT_STOCK3,'999,999,999') EXPERT_STOCK3,   --예상재고(차차주) 23
                    -------------------------------------------------------------------------------------------------          
                    TO_CHAR(NWK_ADJ_QTY,'999,999,999') NWK_ADJ_QTY, --요구/생산 차이 24
                    TO_CHAR(N_SALES_PLAN,'999,999,999') N_SALES_PLAN,           --차주판매계획 25
                    TO_CHAR(EXPERT_STOCK2,'999,999,999') EXPERT_STOCK2,        --예상재고 26   
                    W1_NFOS,    -- 1주판매계획 27
                    W1_ACT,    -- 1주판매실적 28
                    W3_NFOS,    -- 3주판매계획 29
                    W3_ACT,    -- 3주판매실적 30
                    ROUND(N_PLAN_VS_STOCK_WORK,1) N_PLAN_VS_STOCK_WORK,  --차주계획대비재고일수 31
                    ROUND(N_ACT_VS_STOCK_WORK,1) N_ACT_VS_STOCK_WORK,      --차주실적대비재고일수 32
                    ROUND(NN_PLAN_VS_STOCK_WORK,1) NN_PLAN_VS_STOCK_WORK, --차차주계획대비재고일수 33
                    ROUND(NN_ACT_VS_STOCK_WORK,1) NN_ACT_VS_STOCK_WORK, --차차주계획대비재고일수 34
                    NN_WORK NNWK_WORK, -- 차차주 영업일수 35
                    SALES_MEAN_1WEEK SALES_MEAN_1WEEK, --1주 평균 판매 36
                    ROUND(NNN_ACT_VS_STOCK_WORK,1) NNN_ACT_VS_STOCK_WORK,    --차차차주실적대비재고일수 37
                    SALES_ACT_VS_SALES_PLAN_1 SALES_ACT_VS_SALES_PLAN_1, --금주 판매계획 - 금주 1주 평균 판매실적 38
                    SALES_ACT_VS_SALES_PLAN_2 SALES_ACT_VS_SALES_PLAN_2, --차주 판매계획 - 차주 1주 평균 판매실적 39
                    SALES_ACT_VS_SALES_PLAN_3 SALES_ACT_VS_SALES_PLAN_3, --차차주 판매계획 - 차차주 1주 평균 판매실적 40
                    SALES_ACT_VS_SALES_PLAN_1 + SALES_ACT_VS_SALES_PLAN_2 W1_SALES_PLAN_DIFF, -- 1주평균 판매 계획 가감량 41  
                    SALES_ACT_3W_VS_SALES_PLAN_1 + SALES_ACT_3W_VS_SALES_PLAN_2 W3_SALES_PLAN_DIFF -- 3주평균 판매 계획 가감량 42       
            FROM    
                    ( 
                    SELECT  RES_TP.CD1    RES_TP,    --설비유형
                            RES_TP.CD1_NM RES_TP_NM, --설비유형명 
                            D.VERSION,               --공장할당VERSION
                            D.ITEM_ID,               --자재코드
                            IM.ITEM_NAME,            --자재코드명          
                            A.W3_AVG_RATIO,          --3주평균접근율
                            A.W1_AVG_RATIO,          --1주평균접근율
                            C.SAFETY_STOCK,          --안전재고
                            B.BASE_STOCK,            --기초재고
                            B.RECEIPT_EXPT,          --금주생산계획
                            B.SALES_PLAN,            --금주판매계획
                            B.SALES_VS_WEEK1_AVG,    --1주평균판매대비
                            B.EXPERT_STOCK,          --예상재고(차주초)
                            B.EXPERT_STOCK*WO.N_WORK / DECODE(B.N_SALES_PLAN, 0, 1, B.N_SALES_PLAN)		  N_PLAN_VS_STOCK_WORK, --차주계획대비재고일수
                            B.EXPERT_STOCK / DECODE(B.SALES_MEAN_1WEEK, 0, 1, B.SALES_MEAN_1WEEK) N_ACT_VS_STOCK_WORK,  --차주실적대비재고일수
                            B.N_RECEIPT_EXPT,        --차주생산계획
                            D.RP_QTY0 RP_QTY0,       --보충요구량(당주)               
                            D.RP_QTY1 RP_QTY1,       --보충요구량(차주)                                  
                            B.N_SALES_PLAN ,         --차주판매계획
                        #if("$!{checked_pa_pr}" == "PR")
                        	NVL(B.N_RECEIPT_EXPT ,0) - NVL(D.RP_QTY1,0) NWK_ADJ_QTY,        --요구/생산 차이
                        	B.N_RECEIPT_EXPT PO_QTY1,       --생산필요량(차주)
                            NVL(B.EXPERT_STOCK,0)+(NVL(B.N_RECEIPT_EXPT,0)-NVL(B.N_SALES_PLAN,0)) EXPERT_STOCK2, --예상재고(차주)  
                            (NVL(B.EXPERT_STOCK,0)+(NVL(B.N_RECEIPT_EXPT,0)-NVL(B.N_SALES_PLAN,0)))*WO.NN_WORK / DECODE(NVL(B.NN_SALES_PLAN,1), 0, 1, NVL(B.NN_SALES_PLAN,1))		  NN_PLAN_VS_STOCK_WORK, --차차주계획대비재고일수
                            (NVL(B.EXPERT_STOCK,0)+(NVL(B.N_RECEIPT_EXPT,0)-NVL(B.N_SALES_PLAN,0))) / DECODE(NVL(B.SALES_MEAN_1WEEK,1), 0, 1, NVL(B.SALES_MEAN_1WEEK,1)) NN_ACT_VS_STOCK_WORK,  --차차주실적대비재고일수
                            NVL(B.EXPERT_STOCK,0)+(NVL(B.N_RECEIPT_EXPT,0)-NVL(B.N_SALES_PLAN,0))+(NVL(D.RP_QTY2,0)-NVL(B.NN_SALES_PLAN,0)) EXPERT_STOCK3,  --예상재고(차차주)
                            (NVL(B.EXPERT_STOCK,0)+(NVL(B.N_RECEIPT_EXPT,0)-NVL(B.N_SALES_PLAN,0))+(NVL(D.RP_QTY2,0)-NVL(B.NN_SALES_PLAN,0))) /
                            DECODE(NVL(B.SALES_MEAN_1WEEK,1), 0, 1, NVL(B.SALES_MEAN_1WEEK,1)) NNN_ACT_VS_STOCK_WORK,  --차차차주실적대비재고일수
                        #else
                        	NVL(D.RP_QTY1,0) - NVL(D.RP_QTY1,0) NWK_ADJ_QTY,        --요구/생산 차이
                        	D.RP_QTY1 PO_QTY1,       --생산필요량(차주)
                            NVL(B.EXPERT_STOCK,0)+(NVL(D.RP_QTY1,0)-NVL(B.N_SALES_PLAN,0)) EXPERT_STOCK2, --예상재고(차주)  
                            (NVL(B.EXPERT_STOCK,0)+(NVL(D.RP_QTY1,0)-NVL(B.N_SALES_PLAN,0)))*WO.NN_WORK / DECODE(NVL(B.NN_SALES_PLAN,1), 0, 1, NVL(B.NN_SALES_PLAN,1))		  NN_PLAN_VS_STOCK_WORK, --차차주계획대비재고일수
                            (NVL(B.EXPERT_STOCK,0)+(NVL(D.RP_QTY1,0)-NVL(B.N_SALES_PLAN,0))) / DECODE(NVL(B.SALES_MEAN_1WEEK,1), 0, 1, NVL(B.SALES_MEAN_1WEEK,1)) NN_ACT_VS_STOCK_WORK,  --차차주실적대비재고일수
                            NVL(B.EXPERT_STOCK,0)+(NVL(D.RP_QTY1,0)-NVL(B.N_SALES_PLAN,0))+(NVL(D.RP_QTY2,0)-NVL(B.NN_SALES_PLAN,0)) EXPERT_STOCK3,  --예상재고(차차주)
                            (NVL(B.EXPERT_STOCK,0)+(NVL(D.RP_QTY1,0)-NVL(B.N_SALES_PLAN,0))+(NVL(D.RP_QTY2,0)-NVL(B.NN_SALES_PLAN,0))) /
                            DECODE(NVL(B.SALES_MEAN_1WEEK,1), 0, 1, NVL(B.SALES_MEAN_1WEEK,1)) NNN_ACT_VS_STOCK_WORK,  --차차차주실적대비재고일수
                        #end
                            D.RP_QTY2 RP_QTY2,       --보충요구량(차차주)               
                            D.RP_QTY2 PO_QTY2,       --생산필요량(차차주)
                            B.NN_SALES_PLAN,         --판매계획(차차주)                     
                    		A.W1_NFOS,	-- 1주판매계획
                    		A.W1_ACT,	-- 1주판매실적
                    		A.W3_NFOS,	-- 3주판매계획
                    		A.W3_ACT,	-- 3주판매실적                  
                    		WO.NN_WORK,  -- 차차주 영업일수
                    		DECODE(B.SALES_MEAN_1WEEK, 0, 1, B.SALES_MEAN_1WEEK) SALES_MEAN_1WEEK, -- 1주평균 판매
                    		B.SALES_PLAN - (NVL(A.W1_ACT,0) * (NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD'), 1)- TO_DATE('$!{sdate}','YYYY-MM-DD'))) SALES_ACT_VS_SALES_PLAN_1,
                    		B.N_SALES_PLAN - (NVL(A.W1_ACT,0) * 6) SALES_ACT_VS_SALES_PLAN_2,
                    		B.NN_SALES_PLAN - (NVL(A.W1_ACT,0) * 6) SALES_ACT_VS_SALES_PLAN_3,
                    		B.SALES_PLAN - (NVL(A.W3_ACT,0) * (NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD'), 1)- TO_DATE('$!{sdate}','YYYY-MM-DD'))) SALES_ACT_3W_VS_SALES_PLAN_1,
                    		B.N_SALES_PLAN - (NVL(A.W3_ACT,0) * 6) SALES_ACT_3W_VS_SALES_PLAN_2
                    FROM
                            (
                            --1. 판매계획/판매실적
                            SELECT  ITEM_ID,
                                    --1. 전월(판매계획/판매실적)
                                    /*
                                    ROUND(MAX(CASE WHEN  (M_ACT>0) THEN M_NFOS/M_ACT
                                    ELSE 0
                                    END),2) M_AVG_RATIO,
                                    */
                                    W1_NFOS,	-- 1주판매계획
                                    W1_ACT,		-- 1주평균판매실적
                                    W3_NFOS,	-- 3주판매계획
                                    W3_ACT,		-- 3주평균판매실적
                                    --2. 3주평균(판매계획/판매실적)
                                    ROUND(MAX(CASE WHEN  (W3_ACT>0) THEN W3_NFOS/W3_ACT
                                    ELSE 0
                                    END),2) W3_AVG_RATIO,
                                    --3. 1주평균(판매계획/판매실적)
                                    ROUND(MAX(CASE WHEN  (W1_ACT>0) THEN W1_NFOS/W1_ACT
                                    ELSE 0
                                    END),2) W1_AVG_RATIO
                                    --4. 당월경영계획
                                    --SUM(M_NFO_QTY) M_NFO_QTY                          
                            FROM    
                                    (
                                    SELECT  ITEM_ID,     
                                            --1. 전월(판매계획,판매실적)
                                            ---------------------------------------------------------
                                            SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM') THEN NFO_QTY END) M_NFOS,  
                                            SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM') THEN ACT_QTY END) M_ACT, 
                                            ---------------------------------------------------------      
                                            --2. 3주평균접근율
                                            --------------------------------------------------------------------------------------
                                            ROUND(SUM(CASE WHEN YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*3), 'IYYYIW') 
                                                 AND TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                             THEN NFO_QTY
                                            ELSE 0
                                            END
                                            )/18,2) W3_NFOS,
                                            ROUND(SUM(CASE WHEN YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*3), 'IYYYIW') 
                                                 AND TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                             THEN ACT_QTY
                                            ELSE 0
                                            END
                                            )/18,2) W3_ACT,
                                            --------------------------------------------------------------------------------------
                                            --3. 1주평균접근율
                                            ROUND(SUM(CASE WHEN YYYYWW  = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                               THEN NFO_QTY
                                            ELSE 0
                                            END
                                            )/6,2) W1_NFOS,
                                            ROUND(SUM(CASE WHEN YYYYWW  = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                               THEN ACT_QTY
                                            ELSE 0
                                            END
                                            )/6,2) W1_ACT,       
                                            SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM') THEN NFO_QTY
                                            END 
                                            ) M_NFO_QTY --당월경영계획      
                                    FROM    
                                            (
                                            --1. 전월 2개월간의 판매계획 
                                            SELECT 
                                                    NF.ITEM_ID,
                                                    CAL.YYYYMM, 
                                                    CAL.YYYYWW,
                                                    CAL.YYYYMMDD,       
                                                    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) NFO_QTY,
                                                    0 ACT_QTY
                                            FROM    NFOS_SALES_PLAN_WEEKLY NF, CAL_MST CAL
                                            WHERE   NF.YYYYMMDD = CAL.YYYYMMDD
                                            AND     CAL.YYYYMM  BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM')
                                            AND     TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM')
                                            /* 판매계획 버전 수정 start */
                                            AND     NF.VERSION =  
                                                                (
                                                                SELECT  /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
                                                                        VERSION
                                                                FROM    NFOS_SALES_PLAN_WEEKLY VER, CAL_MST CAL_S
                                                                WHERE   VER.YYYYMMDD = CAL_S.YYYYMMDD
                                                                AND     CAL_S.YYYYMM  BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM')
                                                                                      AND     TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM')                                                 
                                                                AND     VER.YYYYMMDD = NF.YYYYMMDD
                                                                AND     VER.SEQ      = NF.SEQ
                                                                AND     ROWNUM = 1
                                                                )
                                            /* 판매계획 버전 수정 end */
                                            GROUP   BY NF.ITEM_ID,  CAL.YYYYMM, CAL.YYYYWW, CAL.YYYYMMDD
                                            UNION   ALL
                                            --2. 전월 2개월간의 판매실적
                                            SELECT  ITEM_ID, 
                                                    CAL.YYYYMM, 
                                                    CAL.YYYYWW,
                                                    CAL.YYYYMMDD,  
                                                    0 NFO_QTY,
                                                    SUM(ACT.QTY) ACT_QTY
                                            FROM    SALES_ACT_RECENT ACT, CAL_MST CAL
                                            WHERE   ACT.SALE_DATE = CAL.CAL_DATE
                                            AND     CAL.YYYYMM  BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM')
                                                                AND     TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM')
                                            GROUP   BY ITEM_ID, CAL.YYYYMM, CAL.YYYYWW, CAL.YYYYMMDD
                                            )
                                    --WHERE ITEM_ID  IN ('102000124', '101000057')    
                                    GROUP BY ITEM_ID   
                                    )
                            GROUP BY ITEM_ID,W1_NFOS,W1_ACT,W3_NFOS,W3_ACT
                            )   A,
                            (
                            /*   
                            *  1. 기초재고            : 조회일자(오늘)에 해당하는 BASE_STOCK  SUM
                            *  2. 금주생산계획        : 조회일자(오늘)에서 마지막 영업일까지(조회일자 주의 토요일)  SUM
                            *  3. 금주판매계획        : 조회일자(오늘)에서 마지막 영업일까지(조회일자 주의 토요일)  SUM
                            *  4. 1주일 평균판매      : 조회일자(오늘)에 해당하는 SALES_MEAN_1WEEK SUM
                            *  5. 금주잔여판매일수    :  조회일자(오늘)을 포함해서 영업 마감일까지(조회일자 주의 토요일) 일수
                            *  6. 1주평균판매대비     : (금주판매계획/(1주일평균판매*금주잔여판매일수)) * 100
                            *  7. 예상재고(차주초)    : 기초재고 + 금주생산계획 - 금주판매계획
                            *  8. 차주생산계획        : 조회일자(오늘)기준 차주에서 차주 마지막 영업일까지(조회일자 주의 토요일)  SUM
                            */ 
                            SELECT  ITEM_ID,
                                    BASE_STOCK,         --기초재고
                                    RECEIPT_EXPT,       --금주생산계획
                                    SALES_PLAN ,        --금주판매계획
                                    ROUND(SALES_PLAN / DECODE((SALES_MEAN_1WEEK * SALES_DAY),0,1,(SALES_MEAN_1WEEK * SALES_DAY)),2) 
                                    SALES_VS_WEEK1_AVG,    -- 1주평균판매대비
                                    BASE_STOCK + RECEIPT_EXPT - SALES_PLAN  EXPERT_STOCK,  -- 예상재고(차주초)
                                    N_RECEIPT_EXPT,     --차주생산계획
                                    N_SALES_PLAN,       --차주판매계획 
                                    NN_SALES_PLAN,      --차주판매계획
                                    SALES_MEAN_1WEEK	--1주평균판매                   
                            FROM        
                                    (
                                    SELECT  ITEM_ID,
                                            SUM(DECODE(YYYYMMDD, REPLACE ('$!{sdate}', '-', ''),BASE_STOCK,0))                              BASE_STOCK,                        --기초재고
                                            SUM(CASE WHEN  YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'IYYYIW')
									                       AND YYYYMMDD >= TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'YYYYMMDD')
									                 THEN  RECEIPT_EXPT
									                 ELSE  0
									            END)       RECEIPT_EXPT,                      --금주생산계획
                                            SUM(DECODE(YYYYWW  , TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+(7*1), 'IYYYIW'),RECEIPT_EXPT))  N_RECEIPT_EXPT,                    --차주생산계획        
                                            SUM(CASE WHEN  YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'IYYYIW')
									                       AND YYYYMMDD >= TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'YYYYMMDD')
									                 THEN  SALES_PLAN
									                 ELSE  0
									            END)       SALES_PLAN,                      --금주판매계획                                             
                                            SUM(DECODE(YYYYWW  , TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+(7*1), 'IYYYIW'),SALES_PLAN))    N_SALES_PLAN,                      --차주판매계획
                                            SUM(DECODE(YYYYWW  , TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+(7*2), 'IYYYIW'),SALES_PLAN))    NN_SALES_PLAN,                     --차차주판매계획                                      
                                            SUM(DECODE(YYYYMMDD, REPLACE ('$!{sdate}', '-', ''),SALES_MEAN_1WEEK,0))                        SALES_MEAN_1WEEK,                  --1주일 평균판매
                                            NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 1)- TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD') SALES_DAY      --금주잔여판매일수 
                                    FROM
                                            (
                                            SELECT  DD.ITEM_ID,
                                                    DECODE(DC.DC_ID, NULL, 0, DD.BASE_STOCK) BASE_STOCK,
                                                    DD.RECEIPT_EXPT,
                                                    (DD.SALES_PLAN+DD.PROM_PLAN) SALES_PLAN, --판매계획수량수정(2008.11.12 수정)
                                                    SALES_MEAN_1WEEK,
                                                    CAL.YYYYWW,
                                                    CAL.YYYYMMDD
                                            FROM    DC_DATAWAREHOUSE DD, CAL_MST CAL,
										            (
										            SELECT 	DC_ID, DC_NAME
								               		  FROM 	DC_MST
								                	 WHERE 	CDC_FLAG = 'Y'
								                	UNION 
								                 	SELECT 	DC_ID, DC_NAME
								               		  FROM 	DC_MST
								                	 WHERE 	RDC_FLAG = 'Y'    
										            ) DC
										    WHERE   DD.CNFM_DATE = CAL.YYYYMMDD
										    AND     DD.DC_ID    =   DC.DC_ID(+)
                                            /* 당주 월요일부터 ~ 당주 일요일까지 */    
                                            AND     DD.CNFM_DATE BETWEEN  TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')+(7*-1), 2), 'YYYYMMDD')
                                                                 AND      TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')+(7*2) , 1)  , 'YYYYMMDD')          
                                            )
                                    GROUP BY ITEM_ID, NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 1)- TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')  
                                    )   
                            )   B,
                            (
                            /* 
                          *  조회 일자에 해당하는 안전재고 (DC_ID에 해당 없이 모두 SUM) 
                          */
                            SELECT SP.WORK_DATE, SP.ITEM_ID, ROUND(SUM(SP.SAFETY_STOCK)+SUM(SP.CAMP_STOC)+ SUM(NVL(SP.FA_STOCK,0)) +
                                    SUM(DECODE(SIGN(TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                                        DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')),-1,0,
                                        NVL(SP.SAVE_STOC,0)))),0)      SAFETY_STOCK
                            FROM    STOCK_POLICY_QTY  SP,
                                    (
                                    SELECT  MAX(WORK_DATE) WORK_DATE
                                    FROM    STOCK_POLICY_QTY
                                    WHERE   LOC_TYPE = 'DC'
                                    )   MV
                            WHERE   SP.WORK_DATE = MV.WORK_DATE
                            GROUP   BY SP.WORK_DATE, SP.ITEM_ID
                            --ORDER    BY PY.ITEM_ID
                            )   C,
                            (
                            /*
                          * 당주, 차주, 차차주 보충 요구량
                          *//*
                            SELECT  PA.VERSION VERSION,
                                    ITEM_ID,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) RP_QTY0,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*1), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) RP_QTY1,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) +
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) RP_QTY2
                            FROM    PLANT_ALLOC_PLAN PA, CAL_MST CAL
                            WHERE   PA.DUE_DATE = CAL.CAL_DATE
                            AND     PA.VERSION||'2' = '$!{plant_alloc_version}'||'2'
                            AND     CAL.YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW')
                                                AND     TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW')  
                            GROUP   BY PA.VERSION, ITEM_ID
                            */
                            SELECT '$!{plant_alloc_version}' VERSION, IM.ITEM_ID
                            	   , NVL(PA.RP_QTY0, 0) RP_QTY0, NVL(PA.RP_QTY1, 0) RP_QTY1, NVL(PA.RP_QTY2, 0) RP_QTY2--, IM.ITEM_NAME, IM.CAT03
                            FROM (
                                    SELECT  PA.VERSION VERSION,
                                            PA.ITEM_ID,
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) RP_QTY0,
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*1), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) +
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) RP_QTY1,
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) RP_QTY2
                                    FROM    PLANT_ALLOC_PLAN PA, CAL_MST CAL
                                    WHERE   PA.DUE_DATE = CAL.CAL_DATE
		                            AND     PA.VERSION = '$!{plant_alloc_version}'
		                            AND     PA.SEQ = 2
                                    AND     CAL.YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW')
                                                        AND     TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW')
                                    GROUP   BY PA.VERSION, PA.ITEM_ID
                                    ) PA, ITEM_MST IM
                            WHERE IM.ITEM_ID = PA.ITEM_ID(+)
                            AND 	(    (IM.ITYPE = 'FERT' AND IM.CAT03 IN ('P10', 'P11', 'F10'))
                                      OR (IM.ITYPE IN ('FERT') AND IM.ETC_FLAG = '900') )
                            AND 	IM.ITEM_STATUS = 'ST'
                            AND 	'$!{plant_alloc_version}' IS NOT NULL
                            --
                            UNION ALL
                            --
                            SELECT  PA.VERSION VERSION,
                                    PA.ITEM_ID,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) RP_QTY0,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*1), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) RP_QTY1,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) RP_QTY2
                            FROM    PLANT_ALLOC_PLAN PA, CAL_MST CAL, ITEM_MST IM
                            WHERE   PA.DUE_DATE = CAL.CAL_DATE
                            AND     PA.VERSION = '$!{plant_alloc_version}'
                            AND     PA.SEQ = 2
                            AND     CAL.YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW')
                                                AND     TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW')
                            AND 	PA.ITEM_ID = IM.ITEM_ID
                            AND 	IM.ITEM_STATUS = 'ST' AND IM.CAT03 = 'O10'
                            AND 	'$!{plant_alloc_version}' IS NOT NULL
                            GROUP   BY PA.VERSION, PA.ITEM_ID
                            --
                            UNION	ALL
                            --
                            /* 수출 MTS는 모두 보이게 한다. */
                            SELECT	'$!{plant_alloc_version}'	VERSION,
									ITEM_ID,
									0	RP_QTY0,
									0	RP_QTY1,
									0	RP_QTY2
							FROM	ITEM_MST
							WHERE	ITEM_STATUS	= 'ST'
							AND		CAT03 		= 'O10'
							AND		MTO_MTS_TYPE = '0002'
							AND		ITEM_ID	NOT IN 
									(
									SELECT	PA.ITEM_ID
									FROM	PLANT_ALLOC_PLAN PA,
											ITEM_MST IM
									WHERE	PA.ITEM_ID	= IM.ITEM_ID
									AND 	IM.ITEM_STATUS = 'ST' AND IM.CAT03 = 'O10'
									AND     PA.VERSION = '$!{plant_alloc_version}'
									)
							AND		'$!{checked_domain}' IS NOT NULL
                            )   D,
                            (
                            /*
                          *      임시 품종 분류 대분류(설비유형이 정의되면 변경 예정)
                          */
                            SELECT  ITEM.ITEM_ID,
                                    CD1.CD         CD1, 
                                    CD1.CD_NAME    CD1_NM
                            FROM    ITEM_MST ITEM, 
                                    CODE_MST CD1
                            WHERE   ITEM.CAT06 = CD1.CD
                            AND     CD1.CD_GRP = 'CAT06'
                            )   RES_TP,
                            ( 
                            SELECT  IM.ITEM_ID,
                                    IM.ITEM_NAME
                            FROM    ITEM_MST IM
                            WHERE   IM.MADE_TYPE != 'DE' 
                        #if("$!{checked_domain}" == "DO")
                        	/* 내수 제품*/
                            AND     (IM.MATERIAL_GROUP &lt; '5K000' OR  IM.MATERIAL_GROUP &gt; '5S999')
                        #elseif("$!{checked_domain}" == "EXMTS")
                        	/* 수출 제품(MTS) */
                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
                            AND		IM.MTO_MTS_TYPE	= '0002'
                        #elseif("$!{checked_domain}" == "EXMTO")
                        	/* 수출 제품(MTO) */
                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
                            AND		IM.MTO_MTS_TYPE	= '0001'
                        #end                            
                            )   IM,
                            /* 차주, 차차주 영업 일수 */
                            (
                            SELECT  fn_nscm_get_workingday01(REPLACE('2009-01-14','-',''), 
                                 							 TO_CHAR(NEXT_DAY(TO_DATE('2009-01-14','YYYY-MM-DD'), 1), 'YYYYMMDD')) T_WORK, -- 금주 영업일수
                            		fn_nscm_get_workingday01(TO_CHAR(NEXT_DAY('$!{sdate}',2),'YYYYMMDD'), 
							                                 TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+6, 1), 'YYYYMMDD')) N_WORK, -- 차주 영업일수
							        fn_nscm_get_workingday01(TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+7, 2),'YYYYMMDD'),
							                                 TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+13, 1), 'YYYYMMDD')) NN_WORK,  -- 차차주 영업일수
							        TO_CHAR(NEXT_DAY('$!{sdate}',2),'YYYYMMDD') N_MON,  -- 차주 월요일                               
							        TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+6, 1), 'YYYYMMDD') N_SUN,	-- 차주 일요일 
							        TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+7, 2),'YYYYMMDD') NN_MON, 	-- 차차주 월요일
							        TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+13, 1), 'YYYYMMDD') NN_SUN	-- 차차주 일요일
							FROM DUAL
                            ) WO           
                    WHERE   D.ITEM_ID = B.ITEM_ID(+)
                    AND     D.ITEM_ID = C.ITEM_ID(+)    
                    AND     D.ITEM_ID = A.ITEM_ID(+)
                    AND     D.ITEM_ID = IM.ITEM_ID
                    AND     D.ITEM_ID = RES_TP.ITEM_ID(+)
                    )   A   
            --WHEREITEM_ID IN ('101000982', '101000066')
            /* 
                최신 공장할당 버전이 PLANT_ALLOC_ITEM_ADJ 테이블에있으면 
                UNION ALL 위쪽 쿼리 실행 안함 
           */
            WHERE   NOT EXISTS ( 
                                SELECT  DISTINCT PA.VERSION
	                            FROM    PLANT_ALLOC_ITEM_ADJ PA,
	                            		(
	                            		SELECT  IM.ITEM_ID,
			                                    IM.ITEM_NAME
			                            FROM    ITEM_MST IM
			                            WHERE   IM.MADE_TYPE != 'DE' 
			                        #if("$!{checked_domain}" == "DO")
			                        	/* 내수 제품*/
			                            AND     (IM.MATERIAL_GROUP &lt; '5K000' OR  IM.MATERIAL_GROUP &gt; '5S999')
			                        #elseif("$!{checked_domain}" == "EXMTS")
			                        	/* 수출 제품(MTS) */
			                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
			                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
			                            AND		IM.MTO_MTS_TYPE	= '0002'
			                        #elseif("$!{checked_domain}" == "EXMTO")
			                        	/* 수출 제품(MTO) */
			                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
			                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
			                            AND		IM.MTO_MTS_TYPE	= '0001'
			                        #end
	                            		) IM
	                            WHERE   PA.VERSION = '$!{plant_alloc_version}'
	                            AND		PA.ITEM_ID	= IM.ITEM_ID
                               )   
            --GROUP   BY DECODE(NO,1,RES_TP,2,RES_TP, NULL), DECODE(NO,1,ITEM_ID,2,'소계'), NO   
            UNION   ALL
            /* 
                PLANT_ALLOC_ITEM_ADJ 테이블에 공장할당 버전과 일치하는 버전이 존재하면 실행 
           */
            SELECT  '1' NO, -- 0
                    VERSION VERSION, --공장할당VERSION 1
                    RES_TP RES_TP,     --설비유형 2 
                    ITEM_ID ITEM_ID, --자재코드 3 
                    ITEM_NAME ITEM_NAME, --자재코드명 4
                    ROUND(W3_AVG_RATIO,2) W3_AVG_RATIO, --3주평균접근율 5
                    ROUND(W1_AVG_RATIO,2) W1_AVG_RATIO, --1주평균접근율 6
                    TO_CHAR(SAFETY_STOCK,'999,999,999') SAFETY_STOCK, --안전재고 7
                    TO_CHAR(BASE_STOCK,'999,999,999') BASE_STOCK, --기초재고 8
                    TO_CHAR(RECEIPT_EXPT,'999,999,999') RECEIPT_EXPT, --금주생산계획 9
                    TO_CHAR(SALES_PLAN,'999,999,999') SALES_PLAN, --금주판매계획 10
                    ROUND(SALES_VS_WEEK1_AVG,2) SALES_VS_WEEK1_AVG, --1주평균판매대비 11
                    TO_CHAR(EXPERT_STOCK,'999,999,999') EXPERT_STOCK, --예상재고(차주초) 12
                    TO_CHAR(N_RECEIPT_EXPT,'999,999,999') N_RECEIPT_EXPT, --차주생산계획 13
                    -------------------------------------------------------------------------------------------------          
                    TO_CHAR(TRUNC(TO_DATE('2009-02-05','YYYY-MM-DD'),'D')+6+(7*0),'YYYY-MM-DD') RP0_DAY, --당주(월) 14 -- 변경(토)
                    TO_CHAR(TRUNC(TO_DATE('2009-02-05','YYYY-MM-DD'),'D')+6+(7*1),'YYYY-MM-DD') RP1_DAY, --차주(월) 15 -- 변경(토)
                    TO_CHAR(TRUNC(TO_DATE('2009-02-05','YYYY-MM-DD'),'D')+6+(7*2),'YYYY-MM-DD') RP2_DAY, --차차주(월) 16 -- 변경(토)
                    RP_QTY0 RP0_QTY, --보충요구량(당주) 17
                    RP_QTY1 RP1_QTY, --보충요구량(차주) 18
                    RP_QTY2 RP2_QTY, --보충요구량(차차주) 19
                    NVL(TRIM(PO_QTY1),0) PO_QTY1, --생산필요량(차주) 20
                    NVL(TRIM(PO_QTY2),0) PO_QTY2, --생산필요량(차차주) 21
                    TO_CHAR(NN_SALES_PLAN,'999,999,999') NN_SALES_PLAN,   --차차주판매계획 22        
                    TO_CHAR(EXPERT_STOCK3,'999,999,999') EXPERT_STOCK3,   --예상재고(차차주) 23
                    -------------------------------------------------------------------------------------------------          
                    TO_CHAR(NWK_ADJ_QTY,'999,999,999') NWK_ADJ_QTY, --요구/생산 차이 24
                    TO_CHAR(N_SALES_PLAN,'999,999,999') N_SALES_PLAN,           --차주판매계획 25
                    TO_CHAR(EXPERT_STOCK2,'999,999,999') EXPERT_STOCK2,        --예상재고 26   
                    W1_NFOS,    -- 1주판매계획 27
                    W1_ACT,    -- 1주판매실적 28
                    W3_NFOS,    -- 3주판매계획 29
                    W3_ACT,    -- 3주판매실적 30
                    ROUND(N_PLAN_VS_STOCK_WORK,1) N_PLAN_VS_STOCK_WORK,  --차주계획대비재고일수 31
                    ROUND(N_ACT_VS_STOCK_WORK,1) N_ACT_VS_STOCK_WORK,      --차주실적대비재고일수 32
                    ROUND(NN_PLAN_VS_STOCK_WORK,1) NN_PLAN_VS_STOCK_WORK, --차차주계획대비재고일수 33
                    ROUND(NN_ACT_VS_STOCK_WORK,1) NN_ACT_VS_STOCK_WORK, --차차주계획대비재고일수 34
                    NN_WORK NNWK_WORK, -- 차차주 영업일수 35
                    SALES_MEAN_1WEEK SALES_MEAN_1WEEK, --1주 평균 판매 36
                    ROUND(NNN_ACT_VS_STOCK_WORK,1) NNN_ACT_VS_STOCK_WORK,    --차차차주실적대비재고일수 37
                    SALES_ACT_VS_SALES_PLAN_1 SALES_ACT_VS_SALES_PLAN_1, --금주 판매계획 - 금주 1주 평균 판매실적 38
                    SALES_ACT_VS_SALES_PLAN_2 SALES_ACT_VS_SALES_PLAN_2, --차주 판매계획 - 차주 1주 평균 판매실적 39
                    SALES_ACT_VS_SALES_PLAN_3 SALES_ACT_VS_SALES_PLAN_3, --차차주 판매계획 - 차차주 1주 평균 판매실적 40
                    SALES_ACT_VS_SALES_PLAN_1 + SALES_ACT_VS_SALES_PLAN_2 W1_SALES_PLAN_DIFF, -- 1주평균 판매 계획 가감량 41  
                    SALES_ACT_3W_VS_SALES_PLAN_1 + SALES_ACT_3W_VS_SALES_PLAN_2 W3_SALES_PLAN_DIFF -- 3주평균 판매 계획 가감량 42
    FROM    
                    ( 
                    SELECT  RES_TP.CD1    RES_TP,    --설비유형
                            RES_TP.CD1_NM RES_TP_NM, --설비유형명 
                            D.VERSION,               --공장할당VERSION
                            D.ITEM_ID,               --자재코드
                            IM.ITEM_NAME,            --자재코드명          
                            A.W3_AVG_RATIO,          --3주평균접근율
                            A.W1_AVG_RATIO,          --1주평균접근율
                            C.SAFETY_STOCK,          --안전재고
                            B.BASE_STOCK,            --기초재고
                            B.RECEIPT_EXPT,          --금주생산계획
                            B.SALES_PLAN,            --금주판매계획
                            B.SALES_VS_WEEK1_AVG,    --1주평균판매대비
                            B.EXPERT_STOCK,          --예상재고(차주초)
                            B.EXPERT_STOCK*WO.N_WORK / DECODE(B.N_SALES_PLAN, 0, 1, B.N_SALES_PLAN)		  N_PLAN_VS_STOCK_WORK, --차주계획대비재고일수
                            B.EXPERT_STOCK / DECODE(B.SALES_MEAN_1WEEK, 0, 1, B.SALES_MEAN_1WEEK) N_ACT_VS_STOCK_WORK,  --차주실적대비재고일수
                            B.N_RECEIPT_EXPT,        --차주생산계획
                            D.RP_QTY0 RP_QTY0,       --보충요구량(당주)               
                            D.RP_QTY1 RP_QTY1,       --보충요구량(차주)               
                            PT.W02_LST_PRODQTY PO_QTY1,       --생산필요량(차주)
                            NVL(PT.W02_LST_PRODQTY,0) - NVL(D.RP_QTY1,0) NWK_ADJ_QTY,        --요구/생산 차이
                            B.N_SALES_PLAN ,         --차주판매계획                                            
                            NVL(B.EXPERT_STOCK,0)+(NVL(PT.W02_LST_PRODQTY,0)-NVL(B.N_SALES_PLAN,0)) EXPERT_STOCK2, --예상재고(차주)  
                            (NVL(B.EXPERT_STOCK,0)+(NVL(PT.W02_LST_PRODQTY,0)-NVL(B.N_SALES_PLAN,0)))*WO.NN_WORK / DECODE(NVL(B.NN_SALES_PLAN,1), 0, 1, NVL(B.NN_SALES_PLAN,1))		  NN_PLAN_VS_STOCK_WORK, --차차주계획대비재고일수
                            (NVL(B.EXPERT_STOCK,0)+(NVL(PT.W02_LST_PRODQTY,0)-NVL(B.N_SALES_PLAN,0))) / DECODE(NVL(B.SALES_MEAN_1WEEK,1), 0, 1, NVL(B.SALES_MEAN_1WEEK,1)) NN_ACT_VS_STOCK_WORK,  --차차주실적대비재고일수
                            NVL(B.EXPERT_STOCK,0)+(NVL(PT.W02_LST_PRODQTY,0)-NVL(B.N_SALES_PLAN,0))+(NVL(D.RP_QTY2,0)-NVL(B.NN_SALES_PLAN,0)) EXPERT_STOCK3,  --예상재고(차차주)
                            (NVL(B.EXPERT_STOCK,0)+(NVL(PT.W02_LST_PRODQTY,0)-NVL(B.N_SALES_PLAN,0))+(NVL(D.RP_QTY2,0)-NVL(B.NN_SALES_PLAN,0))) /
                            DECODE(NVL(B.SALES_MEAN_1WEEK,1), 0, 1, NVL(B.SALES_MEAN_1WEEK,1)) NNN_ACT_VS_STOCK_WORK,  --차차차주실적대비재고일수
                            D.RP_QTY2 RP_QTY2,       --보충요구량(차차주)               
                            PT.W03_LST_PRODQTY PO_QTY2,       --생산필요량(차차주)
                            B.NN_SALES_PLAN,         --판매계획(차차주)                              
                    		A.W1_NFOS,	-- 1주판매계획
                    		A.W1_ACT,	-- 1주판매실적
                    		A.W3_NFOS,	-- 3주판매계획
                    		A.W3_ACT,   -- 3주판매실적
                    		WO.NN_WORK,  -- 차차주 영업일수
                    		DECODE(B.SALES_MEAN_1WEEK, 0, 1, B.SALES_MEAN_1WEEK) SALES_MEAN_1WEEK, -- 1주평균 판매
                    		B.SALES_PLAN - (NVL(A.W1_ACT,0) * (NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD'), 1)- TO_DATE('$!{sdate}','YYYY-MM-DD'))) SALES_ACT_VS_SALES_PLAN_1,
		            		B.N_SALES_PLAN - (NVL(A.W1_ACT,0) * 6) SALES_ACT_VS_SALES_PLAN_2,
		            		B.NN_SALES_PLAN - (NVL(A.W1_ACT,0) * 6) SALES_ACT_VS_SALES_PLAN_3,
                    		B.SALES_PLAN - (NVL(A.W3_ACT,0) * (NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD'), 1)- TO_DATE('$!{sdate}','YYYY-MM-DD'))) SALES_ACT_3W_VS_SALES_PLAN_1,
                    		B.N_SALES_PLAN - (NVL(A.W3_ACT,0) * 6) SALES_ACT_3W_VS_SALES_PLAN_2                    		
                    FROM
                            (
                            --1. 판매계획/판매실적
                            SELECT  ITEM_ID,
                                    --1. 전월(판매계획/판매실적)
                                    /*
                                    ROUND(MAX(CASE WHEN  (M_ACT>0) THEN M_NFOS/M_ACT
                                    ELSE 0
                                    END),2) M_AVG_RATIO,
                                    */
                                    W1_NFOS,	-- 1주판매계획
                                    W1_ACT,		-- 1주판매실적
                                    W3_NFOS,	-- 3주판매계획
                                    W3_ACT,		-- 3주판매실적
                                    --2. 3주평균(판매계획/판매실적)
                                    ROUND(MAX(CASE WHEN  (W3_ACT>0) THEN W3_NFOS/W3_ACT
                                    ELSE 0
                                    END),2) W3_AVG_RATIO,
                                    --3. 1주평균(판매계획/판매실적)
                                    ROUND(MAX(CASE WHEN  (W1_ACT>0) THEN W1_NFOS/W1_ACT
                                    ELSE 0
                                    END),2) W1_AVG_RATIO
                                    --4. 당월경영계획
                                    --SUM(M_NFO_QTY) M_NFO_QTY                          
                            FROM    
                                    (
                                    SELECT  ITEM_ID,     
                                            --1. 전월(판매계획,판매실적)
                                            ---------------------------------------------------------
                                            SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM') THEN NFO_QTY END) M_NFOS,  
                                            SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM') THEN ACT_QTY END) M_ACT, 
                                            ---------------------------------------------------------      
                                            --2. 3주평균접근율
                                            --------------------------------------------------------------------------------------
                                            ROUND(SUM(CASE WHEN YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*3), 'IYYYIW') 
                                                 AND TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                             THEN NFO_QTY
                                            ELSE 0
                                            END
                                            )/18,2) W3_NFOS,
                                            ROUND(SUM(CASE WHEN YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*3), 'IYYYIW') 
                                                 AND TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                             THEN ACT_QTY
                                            ELSE 0
                                            END
                                            )/18,2) W3_ACT,
                                            --------------------------------------------------------------------------------------
                                            --3. 1주평균접근율
                                            ROUND(SUM(CASE WHEN YYYYWW  = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                               THEN NFO_QTY
                                            ELSE 0
                                            END
                                            )/6,2) W1_NFOS,
                                            ROUND(SUM(CASE WHEN YYYYWW  = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')-( 7*1), 'IYYYIW')
                                               THEN ACT_QTY
                                            ELSE 0
                                            END
                                            )/6,2) W1_ACT,       
                                            SUM(CASE WHEN YYYYMM = TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM') THEN NFO_QTY
                                            END 
                                            ) M_NFO_QTY --당월경영계획      
                                    FROM    
                                            (
                                            --1. 전월 2개월간의 판매계획 
                                            SELECT 
                                                    NF.ITEM_ID,
                                                    CAL.YYYYMM, 
                                                    CAL.YYYYWW,
                                                    CAL.YYYYMMDD,       
                                                    SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY) NFO_QTY,
                                                    0 ACT_QTY
                                            FROM    NFOS_SALES_PLAN_WEEKLY NF, CAL_MST CAL
                                            WHERE   NF.YYYYMMDD = CAL.YYYYMMDD
                                            AND     CAL.YYYYMM  BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM')
                                                                AND     TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM')
                                            /* 판매계획 버전 수정 start */
                                            AND     NF.VERSION =  
                                                                (
                                                                SELECT  /*+ INDEX_DESC(VER, NFOS_SALES_PLAN_WEEKLY_INDEX01) */
                                                                        VERSION
                                                                FROM    NFOS_SALES_PLAN_WEEKLY VER, CAL_MST CAL_S
                                                                WHERE   VER.YYYYMMDD = CAL_S.YYYYMMDD
                                                                AND     CAL_S.YYYYMM  BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM')
                                                                                      AND     TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM')                                                 
                                                                AND     VER.YYYYMMDD = NF.YYYYMMDD
                                                                AND     VER.SEQ      = NF.SEQ
                                                                AND     ROWNUM = 1
                                                                )
                                            /* 판매계획 버전 수정 end */
                                            GROUP   BY NF.ITEM_ID,  CAL.YYYYMM, CAL.YYYYWW, CAL.YYYYMMDD
                                            UNION   ALL
                                            --2. 전월 2개월간의 판매실적
                                            SELECT  ITEM_ID, 
                                                    CAL.YYYYMM, 
                                                    CAL.YYYYWW,
                                                    CAL.YYYYMMDD,  
                                                    0 NFO_QTY,
                                                    SUM(ACT.QTY) ACT_QTY
                                            FROM    SALES_ACT_RECENT ACT, CAL_MST CAL
                                            WHERE   ACT.SALE_DATE = CAL.CAL_DATE
                                            AND     CAL.YYYYMM  BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), -1),'YYYYMM')
                                                                AND     TO_CHAR(ADD_MONTHS(TO_DATE('$!{sdate}','YYYY-MM-DD'), 0),'YYYYMM')
                                            GROUP   BY ITEM_ID, CAL.YYYYMM, CAL.YYYYWW, CAL.YYYYMMDD
                                            )
                                    --WHERE ITEM_ID  IN ('102000124', '101000057')    
                                    GROUP BY ITEM_ID   
                                    )
                            GROUP BY ITEM_ID,W1_NFOS,W1_ACT,W3_NFOS,W3_ACT
                            )   A,
                            (
                            /*   
                            *  1. 기초재고            : 조회일자(오늘)에 해당하는 BASE_STOCK  SUM
                            *  2. 금주생산계획        : 조회일자(오늘)에서 마지막 영업일까지(조회일자 주의 토요일)  SUM
                            *  3. 금주판매계획        : 조회일자(오늘)에서 마지막 영업일까지(조회일자 주의 토요일)  SUM
                            *  4. 1주일 평균판매      : 조회일자(오늘)에 해당하는 SALES_MEAN_1WEEK SUM
                            *  5. 금주잔여판매일수    :  조회일자(오늘)을 포함해서 영업 마감일까지(조회일자 주의 토요일) 일수
                            *  6. 1주평균판매대비     : (금주판매계획/(1주일평균판매*금주잔여판매일수)) * 100
                            *  7. 예상재고(차주초)    : 기초재고 + 금주생산계획 - 금주판매계획
                            *  8. 차주생산계획        : 조회일자(오늘)기준 차주에서 차주 마지막 영업일까지(조회일자 주의 토요일)  SUM
                            */ 
                            SELECT  ITEM_ID,
                                    BASE_STOCK,         --기초재고
                                    RECEIPT_EXPT,       --금주생산계획
                                    SALES_PLAN ,        --금주판매계획
                                    ROUND(SALES_PLAN / DECODE((SALES_MEAN_1WEEK * SALES_DAY),0,1,(SALES_MEAN_1WEEK * SALES_DAY)),2) 
                                    SALES_VS_WEEK1_AVG,    -- 1주평균판매대비
                                    BASE_STOCK + RECEIPT_EXPT - SALES_PLAN  EXPERT_STOCK,  -- 예상재고(차주초)
                                    N_RECEIPT_EXPT,     --차주생산계획
                                    N_SALES_PLAN,       --차주판매계획 
                                    NN_SALES_PLAN,      --차주판매계획  
                                    SALES_MEAN_1WEEK	--1주평균판매                  
                            FROM        
                                    (
                                    SELECT  ITEM_ID,
                                            SUM(DECODE(YYYYMMDD, REPLACE ('$!{sdate}', '-', ''),BASE_STOCK,0))                              BASE_STOCK,                        --기초재고
                                            SUM(CASE WHEN  YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'IYYYIW')
									                       AND YYYYMMDD >= TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'YYYYMMDD')
									                 THEN  RECEIPT_EXPT
									                 ELSE  0
									            END)       RECEIPT_EXPT,                      --금주생산계획
                                            SUM(DECODE(YYYYWW  , TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+(7*1), 'IYYYIW'),RECEIPT_EXPT))  N_RECEIPT_EXPT,                    --차주생산계획        
                                            SUM(CASE WHEN  YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'IYYYIW')
									                       AND YYYYMMDD >= TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD'), 'YYYYMMDD')
									                 THEN  SALES_PLAN
									                 ELSE  0
									            END)       SALES_PLAN,                      --금주판매계획                                                
                                            SUM(DECODE(YYYYWW  , TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+(7*1), 'IYYYIW'),SALES_PLAN))    N_SALES_PLAN,                      --차주판매계획
                                            SUM(DECODE(YYYYWW  , TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+(7*2), 'IYYYIW'),SALES_PLAN))    NN_SALES_PLAN,                     --차차주판매계획                                      
                                            SUM(DECODE(YYYYMMDD, REPLACE ('$!{sdate}', '-', ''),SALES_MEAN_1WEEK,0))                        SALES_MEAN_1WEEK,                  --1주일 평균판매
                                            NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 1)- TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD') SALES_DAY      --금주잔여판매일수 
                                    FROM
                                            (
                                            SELECT  DD.ITEM_ID,
                                                    DECODE(DC.DC_ID, NULL, 0, DD.BASE_STOCK) BASE_STOCK,
                                                    DD.RECEIPT_EXPT,
                                                    (DD.SALES_PLAN+DD.PROM_PLAN) SALES_PLAN, --판매계획수량수정(2008.11.12 수정)
                                                    SALES_MEAN_1WEEK,
                                                    CAL.YYYYWW,
                                                    CAL.YYYYMMDD
                                            FROM    DC_DATAWAREHOUSE DD, CAL_MST CAL,
										            (
										            SELECT 	DC_ID, DC_NAME
								               		  FROM 	DC_MST
								                	 WHERE 	CDC_FLAG = 'Y'
								                	UNION 
								                 	SELECT 	DC_ID, DC_NAME
								               		  FROM 	DC_MST
								                	 WHERE 	RDC_FLAG = 'Y'    
										            ) DC
										    WHERE   DD.CNFM_DATE = CAL.YYYYMMDD
										    AND     DD.DC_ID    =   DC.DC_ID(+)
                                            /* 당주 월요일부터 ~ 당주 일요일까지 */    
                                            AND     DD.CNFM_DATE BETWEEN  TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')+(7*-1), 2), 'YYYYMMDD')
                                                                 AND      TO_CHAR(NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')+(7*2) , 1)  , 'YYYYMMDD')          
                                            )
                                    GROUP BY ITEM_ID, NEXT_DAY(TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD'), 1)- TO_DATE(REPLACE ('$!{sdate}', '-', ''),'YYYYMMDD')  
                                    )   
                            )B,
                            (
                            /* 
                            * 조회 일자에 해당하는 안전재고 (DC_ID에 해당 없이 모두 SUM) 
                            */
                            SELECT SP.WORK_DATE, SP.ITEM_ID, ROUND(SUM(SP.SAFETY_STOCK)+SUM(SP.CAMP_STOC)+ SUM(NVL(SP.FA_STOCK,0)) +
                                    SUM(DECODE(SIGN(TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                                        DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-TO_DATE(REPLACE('$!{sdate}', '-', ''),'YYYYMMDD')),-1,0,
                                        NVL(SP.SAVE_STOC,0)))),0)     SAFETY_STOCK
                            FROM    STOCK_POLICY_QTY  SP,
                                    (
                                    SELECT  MAX(WORK_DATE) WORK_DATE
                                    FROM    STOCK_POLICY_QTY
                                    WHERE   LOC_TYPE = 'DC'
                                    )   MV
                            WHERE   SP.WORK_DATE = MV.WORK_DATE
                            GROUP   BY SP.WORK_DATE, SP.ITEM_ID
                            ) C,
                            (
                            /*
                            SELECT  PA.VERSION VERSION,
                                    ITEM_ID,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) RP_QTY0,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*1), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) RP_QTY1,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW') THEN QTY
                                    ELSE 0
                                    END) RP_QTY2
                            FROM    PLANT_ALLOC_PLAN PA, CAL_MST CAL
                            WHERE   PA.DUE_DATE = CAL.CAL_DATE
                            AND     PA.VERSION||'2' = '$!{plant_alloc_version}'||'2'
                            AND     CAL.YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW')
                                                AND     TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW')  
                            GROUP   BY PA.VERSION, ITEM_ID
                            */
                            SELECT '$!{plant_alloc_version}' VERSION, IM.ITEM_ID
                            	   , NVL(PA.RP_QTY0, 0) RP_QTY0, NVL(PA.RP_QTY1, 0) RP_QTY1, NVL(PA.RP_QTY2, 0) RP_QTY2--, IM.ITEM_NAME, IM.CAT03
                            FROM (
                                    SELECT  PA.VERSION VERSION,
                                            PA.ITEM_ID,
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) RP_QTY0,
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*1), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) +
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) RP_QTY1,
                                            SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW') THEN PA.QTY
                                            ELSE 0
                                            END) RP_QTY2
                                    FROM    PLANT_ALLOC_PLAN PA, CAL_MST CAL
                                    WHERE   PA.DUE_DATE = CAL.CAL_DATE
		                            AND     PA.VERSION = '$!{plant_alloc_version}'
		                            AND     PA.SEQ = 2
                                    AND     CAL.YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW')
                                                        AND     TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW')
                                    GROUP   BY PA.VERSION, PA.ITEM_ID
                                    ) PA, ITEM_MST IM
                            WHERE IM.ITEM_ID = PA.ITEM_ID(+)
                            AND 	(    (IM.ITYPE = 'FERT' AND IM.CAT03 IN ('P10', 'P11', 'F10'))
                                      OR (IM.ITYPE IN ('FERT') AND IM.ETC_FLAG = '900') )
                            AND 	IM.ITEM_STATUS = 'ST'
                            AND 	'$!{plant_alloc_version}' IS NOT NULL
                            --
                            UNION ALL
                            --
                            SELECT  PA.VERSION VERSION,
                                    PA.ITEM_ID,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) RP_QTY0,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*1), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) +
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) RP_QTY1,
                                    SUM(CASE WHEN CAL.YYYYWW = TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW') THEN PA.QTY
                                    ELSE 0
                                    END) RP_QTY2
                            FROM    PLANT_ALLOC_PLAN PA, CAL_MST CAL, ITEM_MST IM
                            WHERE   PA.DUE_DATE = CAL.CAL_DATE
                            AND     PA.VERSION = '$!{plant_alloc_version}'
                            AND     PA.SEQ = 2
                            AND     CAL.YYYYWW  BETWEEN TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*0), 'IYYYIW')
                                                AND     TO_CHAR(TO_DATE('$!{sdate}','YYYY-MM-DD')+( 7*2), 'IYYYIW')
                            AND 	PA.ITEM_ID = IM.ITEM_ID
                            AND 	IM.ITEM_STATUS = 'ST' AND IM.CAT03 = 'O10'
                            AND 	'$!{plant_alloc_version}' IS NOT NULL
                            GROUP   BY PA.VERSION, PA.ITEM_ID
                            --
                            UNION	ALL
                            --
                            /* 수출 MTS는 모두 보이게 한다. */
                            SELECT	'$!{plant_alloc_version}'	VERSION,
									ITEM_ID,
									0	RP_QTY0,
									0	RP_QTY1,
									0	RP_QTY2
							FROM	ITEM_MST
							WHERE	ITEM_STATUS	= 'ST'
							AND		CAT03 		= 'O10'
							AND		MTO_MTS_TYPE = '0002'
							AND		ITEM_ID	NOT IN 
									(
									SELECT	PA.ITEM_ID
									FROM	PLANT_ALLOC_PLAN PA,
											ITEM_MST IM
									WHERE	PA.ITEM_ID	= IM.ITEM_ID
									AND 	IM.ITEM_STATUS = 'ST' AND IM.CAT03 = 'O10'
									AND     PA.VERSION = '$!{plant_alloc_version}'
									)
							AND		'$!{checked_domain}' IS NOT NULL
                            ) D,
                            (
                            /*
                            당주, 차주, 차차주 생산 필요량  
                          */
                            SELECT  IL.VERSION, IL.ITEM_ID, 
                                    A.DUE_DATE AS W01_DUE_DATE, A.LST_PRODQTY AS W01_LST_PRODQTY, 
                                    B.DUE_DATE AS W02_DUE_DATE, B.LST_PRODQTY AS W02_LST_PRODQTY, 
                                    C.DUE_DATE AS W03_DUE_DATE, C.LST_PRODQTY AS W03_LST_PRODQTY 
                            FROM    (
                                    SELECT  DISTINCT PT.VERSION, PT.ITEM_ID
                                    FROM    PLANT_ALLOC_ITEM_ADJ PT
                                    WHERE   VERSION = '$!{plant_alloc_version}'
                                    )   IL,   
                                    (
                                    SELECT  PT.VERSION, PT.ITEM_ID, PT.DUE_DATE, PT.LST_PRODQTY 
                                    FROM    PLANT_ALLOC_ITEM_ADJ PT  
                                    WHERE   VERSION = '$!{plant_alloc_version}'
                                    AND     PT.DUE_DATE = TRUNC(TO_DATE('$!{sdate}','YYYY-MM-DD'),'D')+6+(7*0)
                                    )   A, -- 당주
                                    ( 
                                    SELECT  PT.VERSION, PT.ITEM_ID, PT.DUE_DATE, PT.LST_PRODQTY 
                                    FROM    PLANT_ALLOC_ITEM_ADJ PT  
                                    WHERE   VERSION = '$!{plant_alloc_version}'
                                    AND     PT.DUE_DATE = TRUNC(TO_DATE('$!{sdate}','YYYY-MM-DD'),'D')+6+(7*1)
                                    )   B, -- 차주
                                    ( 
                                    SELECT  PT.VERSION, PT.ITEM_ID, PT.DUE_DATE, PT.LST_PRODQTY 
                                    FROM    PLANT_ALLOC_ITEM_ADJ PT  
                                    WHERE   VERSION = '$!{plant_alloc_version}'
                                    AND     PT.DUE_DATE = TRUNC(TO_DATE('$!{sdate}','YYYY-MM-DD'),'D')+6+(7*2)
                                    )   C -- 차차주
                            WHERE   IL.VERSION = A.VERSION(+)
                            AND     IL.VERSION = B.VERSION(+)
                            AND     IL.VERSION = C.VERSION(+)
                            AND     IL.ITEM_ID = A.ITEM_ID(+)
                            AND     IL.ITEM_ID = B.ITEM_ID(+)
                            AND     IL.ITEM_ID = C.ITEM_ID(+)      
                            )   PT,
                            (
                            SELECT  ITEM.ITEM_ID,
                                    CD1.CD         CD1, 
                                    CD1.CD_NAME    CD1_NM
                            FROM    ITEM_MST ITEM, 
                                    CODE_MST CD1
                            WHERE   ITEM.CAT06 = CD1.CD
                            AND     CD1.CD_GRP = 'CAT06'
                            )   RES_TP,
                            ( 
                            SELECT  IM.ITEM_ID,
                                    IM.ITEM_NAME
                            FROM    ITEM_MST IM
                            WHERE   IM.MADE_TYPE != 'DE' 
                        #if("$!{checked_domain}" == "DO")
                        	/* 내수 제품*/
                            AND     (IM.MATERIAL_GROUP &lt; '5K000' OR  IM.MATERIAL_GROUP &gt; '5S999')
                        #elseif("$!{checked_domain}" == "EXMTS")
                        	/* 수출 제품(MTS) */
                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
                            AND		IM.MTO_MTS_TYPE	= '0002'
                        #elseif("$!{checked_domain}" == "EXMTO")
                        	/* 수출 제품(MTO) */
                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
                            AND		IM.MTO_MTS_TYPE	= '0001'
                        #end
                            ) IM ,
                            /* 차주, 차차주 영업 일수 */
                            (
                            SELECT  fn_nscm_get_workingday01(TO_CHAR(NEXT_DAY('$!{sdate}',2),'YYYYMMDD'), 
							                                 TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+6, 1), 'YYYYMMDD')) N_WORK, -- 차주 영업일수
							        fn_nscm_get_workingday01(TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+7, 2),'YYYYMMDD'),
							                                 TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+13, 1), 'YYYYMMDD')) NN_WORK,  -- 차차주 영업일수
							        TO_CHAR(NEXT_DAY('$!{sdate}',2),'YYYYMMDD') N_MON,  -- 차주 월요일                               
							        TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+6, 1), 'YYYYMMDD') N_SUN,	-- 차주 일요일 
							        TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+7, 2),'YYYYMMDD') NN_MON, 	-- 차차주 월요일
							        TO_CHAR(NEXT_DAY(TO_DATE('$!{sdate}','YYYY-MM-DD')+13, 1), 'YYYYMMDD') NN_SUN	-- 차차주 일요일
							FROM DUAL
                            ) WO                
                    WHERE   D.ITEM_ID = B.ITEM_ID(+)
                    AND     D.ITEM_ID = C.ITEM_ID(+)    
                    AND     D.ITEM_ID = A.ITEM_ID(+)
                    AND     D.ITEM_ID = IM.ITEM_ID
                    AND     D.ITEM_ID = RES_TP.ITEM_ID(+)
                    AND     D.VERSION = PT.VERSION(+)
                    AND     D.ITEM_ID = PT.ITEM_ID(+)
                    )   A    
            --WHERE ITEM_ID IN ('101000982', '101000066')
            WHERE   EXISTS ( 
                            SELECT  DISTINCT PA.VERSION
                            FROM    PLANT_ALLOC_ITEM_ADJ PA,
                            		(
                            		SELECT  IM.ITEM_ID,
		                                    IM.ITEM_NAME
		                            FROM    ITEM_MST IM
		                            WHERE   IM.MADE_TYPE != 'DE' 
		                        #if("$!{checked_domain}" == "DO")
		                        	/* 내수 제품*/
		                            AND     (IM.MATERIAL_GROUP &lt; '5K000' OR  IM.MATERIAL_GROUP &gt; '5S999')
		                        #elseif("$!{checked_domain}" == "EXMTS")
		                        	/* 수출 제품(MTS) */
		                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
		                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
		                            AND		IM.MTO_MTS_TYPE	= '0002'
		                        #elseif("$!{checked_domain}" == "EXMTO")
		                        	/* 수출 제품(MTO) */
		                            AND     IM.MATERIAL_GROUP &gt;= '5K000'
		                            AND     IM.MATERIAL_GROUP &lt;= '5S999'
		                            AND		IM.MTO_MTS_TYPE	= '0001'
		                        #end
                            		) IM
                            WHERE   PA.VERSION = '$!{plant_alloc_version}'
                            AND		PA.ITEM_ID	= IM.ITEM_ID
                           )   
            --GROUP   BY DECODE(NO,1,RES_TP,2,RES_TP, NULL), DECODE(NO,1,ITEM_ID,2,'소계'), NO
            --ORDER	BY 4,3,1 
            ORDER   BY 3,4,1 --설비유형
      				  
	</query>
	
	<!--  일간생산계획 분석(재구성) 조회 -->
	<query id="sc_11020_dailyProductionPlanAnalysisNew_test">
						
		#if("$!{plant_version}" == "")
			SELECT	PLANT_ID, VERSION
			FROM	DAILY_SCH_PLAN_SHIFT
			WHERE	1 = 0
		#else
            SELECT  TL.PLANT_ID                        PLANT_ID,       --0     공장코드                                                                                                                                                                                                                                                                                                                                                      
                    TL.PLANT_NAME                      PLANT_NAME ,    --1     공장                                                                                                                                                                                                                                                                                                                                                          
                    TL.TEAM_NAME                       TEAM_NAME,      --2     원가부문                                                                                                                                                                                                                                                                                                                                                      
                    TL.PROC_ID                         PROC_ID,        --3     작업장 코드                                                                                                                                                                                                                                                                                                                                                   
                    TL.PROC_NAME                       PROC_NAME,      --4     작업장 명                                                                                                                                                                                                                                                                                                                                                     
                    TL.ITEM_ID                         ITEM_ID,        --5     제품 코드                                                                                                                                                                                                                                                                                                                                                     
                    TL.ITEM_NAME                       ITEM_NAME,      --6     제품 명                                                                                                                                                                                                                                                                                                                                                       
                    TL.SPEC                            SPEC,           --7     규격                                                                                                                                                                                                                                                                                                                                                         
                    TL.VERSION                         VERSION,        --8     버전                                                                                                                                                                                                                                                                                                                                                         
                    TL.SEQ                             SEQ,            --9     SEQ                                                                                                                                                                                                                                                                                                                                                          
                    TL.MTO_MTS_TYPE                    MTO_MTS_TYPE,   --10    MTO/MTS                                                                                                                                                                                                                                                                                                                                                      
                    TL.ORD_NO                          ORD_NO,         --11    수출(MTO) 오더 번호      
                    FA.QTY                             FA_QTY,         --12    공장할당량(의뢰량)                                                                                                                                                                                                                                                                                                                          
                    /* SHIFT별 수량 */                                                                                                                                                                                                                                                                                                                                                                                                                                 
                    TRIM(TL.D01A)                      D01A,           --13    월/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D01B)                      D01B,           --14      월/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D01C)                      D01C,           --15    월/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D02A)                      D02A,           --16    화/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D02B)                      D02B,           --17    화/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D02C)                      D02C,           --18    화/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D03A)                      D03A,           --19    수/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D03B)                      D03B,           --20    수/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D03C)                      D03C,           --21    수/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D04A)                      D04A,           --22    목/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D04B)                      D04B,           --23    목/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D04C)                      D04C,           --24    목/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D05A)                      D05A,           --25    금/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D05B)                      D05B,           --26    금/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D05C)                      D05C,           --27    금/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D06A)                      D06A,           --28    토/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D06B)                      D06B,           --29    토/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D06C)                      D06C,           --30    토/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D07A)                      D07A,           --31    일/조                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D07B)                      D07B,           --32    일/주                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.D07C)                      D07C,           --33    일/야                                                                                                                                                                                                                                                                                                                                                                               
                    TRIM(TL.TOT )                      TOT,            --34    합계   
                    NVL(TL.TOT,0) - NVL(FA.QTY,0)      PROD_FA_DIFF,   --35    생산량 - 의뢰량                                                                                                                                                                                                                                                                                                                                                                       
                    /* SHIFT별 연장 정보 */                                                                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG01A                           BG01A,          --36    월/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG01B                           BG01B,          --37    월/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG01C                           BG01C,          --38    월/야                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG02A                           BG02A,          --39    화/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG02B                           BG02B,          --40    화/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG02C                           BG02C,          --41    화/야                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG03A                           BG03A,          --42    수/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG03B                           BG03B,          --43    수/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG03C                           BG03C,          --44    수/야                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG04A                           BG04A,          --45    목/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG04B                           BG04B,          --46    목/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG04C                           BG04C,          --47    목/야                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG05A                           BG05A,          --48    금/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG05B                           BG05B,          --49    금/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG05C                           BG05C,          --50    금/야                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG06A                           BG06A,          --51    토/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG06B                           BG06B,          --52    토/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG06C                           BG06C,          --53    토/야                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG07A                           BG07A,          --54    일/조                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG07B                           BG07B,          --55    일/주                                                                                                                                                                                                                                                                                                                                                        
                    WD.BG07C                           BG07C,          --56    일/야                                                                                                                                                                                                                                                                                                                                                        
                    TL.TEAM_ID                         TEAM_ID,        --57                                                                                                                                                                                                                                                                                                                                                                 
                    TL.CAT04                           CAT04,          --58                                                                                                                                                                                                                                                                                                                                                                 
                    TL.RECIPE_TYPE                     RECIPE_TYPE,    --59                                                                                                                                                                                                                                                                                                                                                                 
                    TRUNC(TL.LABOR_WOMAN,1)            LABOR_WOMAN,    --60    TO 여                                                                                                                                                                                                                                                                                                                                                        
                    TL.ORD_ITEM_NO                     ORD_ITEM_NO,    --61                                                                                                                                                                                                                                                                                                                                                                 
                    PO.SHIFT_1_PO                      SHIFT_1_PO,     --62    인원정보                                                                                                                                                                                                                                                                                                                                                 
                    PO.SHIFT_3_PO                      SHIFT_3_PO,     --63    인원정보                                                                                                                                                                                                                                                                                                                                                 
                    PO.SHIFT_5_PO                      SHIFT_5_PO,     --64    인원정보 
                    /* 계획 수정 그룹 코드 */
                    TL.GC01A                           GC01A,          --65                                                                                                                                                                                                                                                                                                                                                    
                    TL.GC01B                           GC01B,          --66                                                                                                                                                                                                                                                                                                                                                    
                    TL.GC01C                           GC01C,          --67                                                                                                                                                                                                                                                                                                                                                    
                    TL.GC02A                           GC02A,          --68                                                                                                                                                                                                                                                                                                                                                    
                    TL.GC02B                           GC02B,          --69                                                                                                                                                                                                                                                                                                                                                    
                    TL.GC02C                           GC02C,          --70                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC03A                           GC03A,          --71                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC03B                           GC03B,          --72                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC03C                           GC03C,          --73                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC04A                           GC04A,          --74                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC04B                           GC04B,          --75                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC04C                           GC04C,          --76                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC05A                           GC05A,          --77                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC05B                           GC05B,          --78                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC05C                           GC05C,          --79                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC06A                           GC06A,          --80                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC06B                           GC06B,          --81                                                                                                                                                                                                                                                                                                                                                      
                    TL.GC06C                           GC06C,          --82                                                                                                                                                                                                                                                                                                                                                        
                    TL.GC07A                           GC07A,          --83                                                                                                                                                                                                                                                                                                                                                        
                    TL.GC07B                           GC07B,          --84                                                                                                                                                                                                                                                                                                                                                        
                    TL.GC07C                           GC07C,          --85  
                    /* 계획 수정 그룹 상세 코드 */
                    TL.DC01A                           DC01A,          --86                   
                    TL.DC01B                           DC01B,          --87  
                    TL.DC01C                           DC01C,          --88  
                    TL.DC02A                           DC02A,          --89  
                    TL.DC02B                           DC02B,          --90  
                    TL.DC02C                           DC02C,          --91  
                    TL.DC03A                           DC03A,          --92  
                    TL.DC03B                           DC03B,          --93  
                    TL.DC03C                           DC03C,          --94  
                    TL.DC04A                           DC04A,          --95  
                    TL.DC04B                           DC04B,          --96  
                    TL.DC04C                           DC04C,          --97  
                    TL.DC05A                           DC05A,          --98  
                    TL.DC05B                           DC05B,          --99  
                    TL.DC05C                           DC05C,          --100 
                    TL.DC06A                           DC06A,          --101 
                    TL.DC06B                           DC06B,          --102 
                    TL.DC06C                           DC06C,          --103 
                    TL.DC07A                           DC07A,          --104 
                    TL.DC07B                           DC07B,          --105 
                    TL.DC07C                           DC07C,          --106
                    /* 계획 수정 내용 */
                    TL.RM01A                           RM01A,          --107           
                    TL.RM01B                           RM01B,          --108 
                    TL.RM01C                           RM01C,          --109 
                    TL.RM02A                           RM02A,          --110 
                    TL.RM02B                           RM02B,          --111 
                    TL.RM02C                           RM02C,          --112 
                    TL.RM03A                           RM03A,          --113 
                    TL.RM03B                           RM03B,          --114 
                    TL.RM03C                           RM03C,          --115 
                    TL.RM04A                           RM04A,          --116 
                    TL.RM04B                           RM04B,          --117 
                    TL.RM04C                           RM04C,          --118 
                    TL.RM05A                           RM05A,          --119 
                    TL.RM05B                           RM05B,          --120 
                    TL.RM05C                           RM05C,          --121 
                    TL.RM06A                           RM06A,          --122 
                    TL.RM06B                           RM06B,          --123 
                    TL.RM06C                           RM06C,          --124 
                    TL.RM07A                           RM07A,          --125 
                    TL.RM07B                           RM07B,          --126 
                    TL.RM07C                           RM07C,          --127
                    /* 알림 사항 */
                    TL.PM01A                           PM01A,          --128          
                    TL.PM01B                           PM01B,          --129
                    TL.PM01C                           PM01C,          --130
                    TL.PM02A                           PM02A,          --131
                    TL.PM02B                           PM02B,          --132
                    TL.PM02C                           PM02C,          --133
                    TL.PM03A                           PM03A,          --134
                    TL.PM03B                           PM03B,          --135
                    TL.PM03C                           PM03C,          --136
                    TL.PM04A                           PM04A,          --137
                    TL.PM04B                           PM04B,          --138
                    TL.PM04C                           PM04C,          --139
                    TL.PM05A                           PM05A,          --140
                    TL.PM05B                           PM05B,          --141
                    TL.PM05C                           PM05C,          --142
                    TL.PM06A                           PM06A,          --143
                    TL.PM06B                           PM06B,          --144
                    TL.PM06C                           PM06C,          --145
                    TL.PM07A                           PM07A,          --146
                    TL.PM07B                           PM07B,          --147
                    TL.PM07C                           PM07C,          --148 
                    TL.ITEM_ORDER                                      --149                                                                                                                                                                                                                                                                                                                                          
            FROM    (                    
                    SELECT  HR.PLANT_ID, HR.PLANT_NAME, HR.TEAM_NAME, HR.PROC_ID, HR.PROC_NAME, 
                            DS.ITEM_ID, IM.ITEM_NAME, IM.SPEC, NE.LABOR_WOMAN, DS.VERSION, DS.SEQ, 
                            DECODE(IM.MTO_MTS_TYPE, '0001','O', '0002', 'S') MTO_MTS_TYPE, DS.ORD_NO                                                
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D01A 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D01B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D01C   
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D02A 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D02B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D02C   
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D03A 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D03B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D03C 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D04A 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D04B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D04C 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D05A  
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D05B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D05C 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D06A  
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D06B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D06C 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE NULL END) D07A 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE NULL END) D07B 
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE NULL END) D07C                                                    
                            ---------------------------------------------------------------------------------------------------------------------------
                            , SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DS.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DS.SHIFT_QTY  ELSE 0 END)               
                            + SUM(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DS.SHIFT_QTY  ELSE 0 END) TOT
                            ----------------------------------------------------------------------------------------------------------------------------
                            , HR.TEAM_ID, NVL(IM.CAT04,IM.RECIPE_TYPE) CAT04, IM.RECIPE_TYPE, DS.ORD_ITEM_NO
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 계획 수정 그룹 코드 */
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC01A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC01B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC01C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC02A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC02B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC02C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC03A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC03B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC03C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC04A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC04B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC04C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC05A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC05B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC05C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC06A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC06B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC06C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC07A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC07B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC07C  
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 계획 수정 그룹 상세 코드 */
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC01A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC01B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC01C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC02A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC02B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC02C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC03A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC03B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC03C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC04A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC04B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC04C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC05A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC05B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC05C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC06A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC06B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC06C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC07A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC07B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC07C
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 계획 수정 내용 */
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM01A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM01B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM01C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM02A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM02B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM02C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM03A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM03B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM03C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM04A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM04B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM04C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM05A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM05B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM05C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM06A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM06B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM06C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM07A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM07B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM07C
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 알림 사항 */
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM01A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM01B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+0, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM01C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM02A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM02B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+1, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM02C   
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM03A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM03B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+2, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM03C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM04A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM04B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+3, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM04C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM05A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM05B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+4, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM05C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM06A  
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM06B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+5, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM06C 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM07A 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM07B 
                            , MAX(CASE WHEN DS.PROD_DATES = TO_CHAR(WK.MON+6, 'YYYYMMDD') AND DS.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM07C                                                                                    
                    		, HR.ITEM_ORDER    
                    FROM    DAILY_SCH_PLAN_SHIFT DS, 
                            ITEM_MST IM, 
                            SCH_ITEM_RANK HR,
                            (
                            -- DEFAULT : 차주, 차주 월요일
                        #if("$!{checked_weekly}" == "w0")
                            SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
                        #elseif("$!{checked_weekly}" == "w2")
                            SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
                        #else
                            SELECT NEXT_DAY(SYSDATE,2) MON --차주
                        #end                                  
                            FROM   DUAL
                            ) WK,
                            (
                            /* ITEM_CAPA 의 필요인원 정보 SELECT */
                            SELECT  DISTINCT 
                                    PLANT_ID, ITEM_ID, LINE_ID, PROC_ID, LABOR_MAN, LABOR_WOMAN
                            FROM    ITEM_CAPA
                            WHERE   MADE_TYPE != 'DE'
                            ORDER   BY PLANT_ID, ITEM_ID, LINE_ID, PROC_ID, LABOR_MAN, LABOR_WOMAN
                            ) NE,
                            (
                            /* 계획 수정 내역 및 알림 사항 */
                            SELECT  A.CAT_ID, A.PLANT_ID, A.VERSION, A.SEQ, A.WO_ID, A.ITEM_ID, A.PROC_ID, A.LINE_ID, 
                                    TO_CHAR(A.PROD_DATES,'YYYYMMDD') PROD_DATES, A.SHIFT_TYPE,
                                    A.REASON01, A.REASON02, A.REASON_MSG, A.PLAN_MSG
                            FROM    DAILY_SCH_PLAN_HISTORY A,
                                    (
                                    SELECT  
                                            MAX(HT.HIS_NO) HIS_NO, HT.CAT_ID, HT.PLANT_ID, HT.VERSION,
                                            HT.ITEM_ID, HT.LINE_ID, HT.PROC_ID, HT.PROD_DATES, HT.SHIFT_TYPE  
                                    FROM    DAILY_SCH_PLAN_HISTORY HT
                                    GROUP   BY HT.CAT_ID, HT.PLANT_ID, HT.VERSION, HT.ITEM_ID, 
                                            HT.LINE_ID, HT.PROC_ID, HT.PROD_DATES, HT.SHIFT_TYPE 
                                    ) B
                            WHERE   A.HIS_NO     = B.HIS_NO
                            AND     A.CAT_ID     = B.CAT_ID
                            AND     A.PLANT_ID   = B.PLANT_ID
                            AND     A.VERSION    = B.VERSION
                            AND     A.ITEM_ID    = B.ITEM_ID
                            AND     A.LINE_ID    = B.LINE_ID
                            AND     A.PROD_DATES = B.PROD_DATES
                            AND     A.SHIFT_TYPE = B.SHIFT_TYPE 
                            ) DH
                        #if( "$!{line_grp}" != "" )
                            ,
                            (
                            SELECT  CM.CAT02 PLANT_ID, CM.CAT03 LINE_ID, CM.CAT04 PROC_ID
                            FROM    CODE_MST CM
                            WHERE   CM.CD_GRP = 'LINE_GRP'
                            AND     CM.CAT01 IN ($commonUtil.replaceAll("${line_grp}","''","'"))                            
                            ) CM  
                        #end                                     
                    WHERE   DS.CAT_ID = 'PS' 
                    AND     ($commonUtil.replaceAll("$!{plant_version}","''","'"))
                    AND     DS.PROD_DATES BETWEEN  TO_CHAR(WK.MON,'YYYYMMDD') AND TO_CHAR(WK.MON+6,'YYYYMMDD') 
                    AND     DS.CAT_ID     = HR.CAT_ID
                    AND     DS.PLANT_ID   = HR.PLANT_ID
                    AND     DS.LINE_ID    = HR.LINE_ID
                    AND     DS.PROC_ID    = HR.PROC_ID
                    AND     DS.ITEM_ID    = HR.ITEM_ID
                    AND     DS.ITEM_ID    = IM.ITEM_ID
                #if("$!{checked_multi}" == "visual")
                    AND      IM.MULTI_FLAG = 'V'
                #elseif("$!{checked_multi}" == "multi")
                    AND      IM.MULTI_FLAG = 'M'
                #elseif("$!{checked_multi}" == "normal")
                    AND      IM.MULTI_FLAG IS NULL
                #end                            
                    AND     IM.ITYPE      = 'FERT'
                    AND     DS.PLANT_ID   = NE.PLANT_ID(+)
                    AND     DS.ITEM_ID    = NE.ITEM_ID(+)
                    AND     DS.PROC_ID    = NE.PROC_ID(+)
                #if( "$!{line_grp}" != "" )
                    AND     DS.PLANT_ID = CM.PLANT_ID
                    AND     DS.PROC_ID = CM.PROC_ID 
                #end
                #if("$!{domain}" == "DO")
                    /* 내수 제품*/
                    AND     (IM.MATERIAL_GROUP &lt; '5K000' OR  IM.MATERIAL_GROUP &gt; '5S999')
                #elseif("$!{domain}" == "EX")
                    /* 수출 제품*/
                    AND     IM.MATERIAL_GROUP &gt;= '5K000'
                    AND     IM.MATERIAL_GROUP &lt;= '5S999'
                #end                             
                    AND     DS.CAT_ID     = DH.CAT_ID(+)
                    AND     DS.PLANT_ID   = DH.PLANT_ID(+)
                    AND     DS.VERSION    = DH.VERSION(+)
                    AND     DS.SEQ        = DH.SEQ(+)
                    AND		DS.ITEM_ID	  = DH.ITEM_ID(+)
                    AND     DS.LINE_ID    = DH.LINE_ID(+)
                    AND     DS.PROC_ID    = DH.PROC_ID(+)
                    AND     DS.PROD_DATES = DH.PROD_DATES(+)
                    AND     DS.SHIFT_TYPE = DH.SHIFT_TYPE(+)
                    GROUP   BY HR.PLANT_ID, HR.PLANT_NAME, HR.TEAM_NAME, HR.PROC_ID, HR.PROC_NAME, DS.ITEM_ID, IM.ITEM_NAME, IM.SPEC, 
                            NE.LABOR_WOMAN, DS.VERSION, DS.SEQ, IM.MTO_MTS_TYPE, DS.ORD_NO, HR.TEAM_ID, IM.CAT04, IM.RECIPE_TYPE, 
                            DS.ORD_ITEM_NO, HR.ITEM_ORDER   
                    ) TL,
                    (
                    -- O : 연장 , N : 일반
                    SELECT  PLANT_ID, PROC_ID,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+0,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG01A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+0,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG01B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+0,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG01C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+1,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG02A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+1,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG02B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+1,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG02C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+2,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG03A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+2,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG03B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+2,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG03C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+3,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG04A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+3,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG04B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+3,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG04C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+4,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG05A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+4,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG05B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+4,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG05C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+5,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG06A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+5,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG06B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+5,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG06C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+6,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG07A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+6,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG07B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+6,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG07C
                            -------------------------------------------------------------------------------------------------
                    FROM    WORK_DIARY WD,
                            (
                            -- DEFAULT : 차주, 차주 월요일
                        #if("$!{checked_weekly}" == "w0")
                            SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
                        #elseif("$!{checked_weekly}" == "w2")
                            SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
                        #else
                            SELECT NEXT_DAY(SYSDATE,2) MON --차주
                        #end 
                            FROM   DUAL
                            ) WK
                    WHERE   WD.DUTY_DATE &gt;= TO_CHAR(WK.MON,'YYYYMMDD')
                    AND     WD.DUTY_DATE &lt;= TO_CHAR(WK.MON+6,'YYYYMMDD')
                    GROUP   BY WD.PLANT_ID, WD.PROC_ID
                    ) WD,
                    (
                    -- DEFAULT : 차주, 차주 월요일
                #if("$!{checked_weekly}" == "w0")
                    SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
                #elseif("$!{checked_weekly}" == "w2")
                    SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
                #else
                    SELECT NEXT_DAY(SYSDATE,2) MON --차주
                #end 
                    FROM   DUAL
                    ) WK,
                    (
                    /* 원가부문별 인원정보 */
                    SELECT  WD.PLANT_ID, WD.PROC_ID, WD.DUTY_DATE,
                            MAX(CASE
                            WHEN SUBSTR(WD.SHIFT_ID,1,3) IN ('JOG','OTD','OTJ')
                            THEN    WD.DUTY_TEAM||'('||PA.PO_NUM||')'
                            ELSE NULL
                            END)     SHIFT_1_PO,
                            MAX(CASE
                            WHEN SUBSTR(WD.SHIFT_ID,1,3) = 'DAY'
                            THEN    WD.DUTY_TEAM||'('||PA.PO_NUM||')'
                            ELSE NULL
                            END)     SHIFT_3_PO,
                            MAX(CASE
                            WHEN SUBSTR(WD.SHIFT_ID,1,3) IN ('NIG','OTN')
                            THEN    WD.DUTY_TEAM||'('||PA.PO_NUM||')'
                            ELSE NULL
                            END)     SHIFT_5_PO
                    FROM    WORK_DIARY WD,
                            V_PROC_PO_ABC PA
                    WHERE   WD.PLANT_ID  = PA.PLANT_ID(+)
                    AND     WD.PROC_ID   = PA.PROC_ID(+)
                    AND     WD.DUTY_TEAM = PA.DUTY_TEAM(+) 
                    GROUP   BY WD.PLANT_ID, WD.PROC_ID, WD.DUTY_DATE
                    ) PO,
                    (
                    SELECT  PA.PLANT_ID, PA.ITEM_ID,
                            DECODE(IM.MTO_MTS_TYPE, '0001', SUBSTR(PA.ORDER_INFO,0,10), '0002', 'XX') ORD_NO,
                            DECODE(IM.MTO_MTS_TYPE, '0001', SUBSTR(PA.ORDER_INFO,12,6), '0002', 'XX') ORD_ITEM_NO, 
                            SUM(PA.QTY) QTY
                    FROM    PLANT_ALLOC_PLAN PA,
                            (
                            /* 공장할당 확정 버전 중 최신 버전 */
                            SELECT  MAX(VERSION) MX_VER
                            FROM    PLAN_VERSION_LOG
                            WHERE   CAT_ID = 'FA'
                            AND     SEQ    = '1'
                            AND     STATUS > 22 --23:계획확정
                            ) MX,
                            (
		                    -- DEFAULT : 차주, 차주 월요일
		                #if("$!{checked_weekly}" == "w0")
		                    SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
		                #elseif("$!{checked_weekly}" == "w2")
		                    SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
		                #else
		                    SELECT NEXT_DAY(SYSDATE,2) MON --차주
		                #end 
		                    FROM   DUAL
		                    ) WK,
                            ITEM_MST IM
                    WHERE   PA.VERSION  = MX.MX_VER
                    AND     PA.SEQ      = '1'        
                    AND     PA.PLANT_ID IN ('1110','1120','1130','1140','1160','1170','1180')
                    AND     PA.DUE_DATE BETWEEN WK.MON AND WK.MON+6
                    AND     PA.ITEM_ID = IM.ITEM_ID
                    GROUP   BY PA.VERSION, PA.SEQ, PA.PLANT_ID, PA.ITEM_ID,
                            DECODE(IM.MTO_MTS_TYPE, '0001', SUBSTR(PA.ORDER_INFO,0,10), '0002', 'XX'),
                            DECODE(IM.MTO_MTS_TYPE, '0001', SUBSTR(PA.ORDER_INFO,12,6), '0002', 'XX')
                    ORDER   BY PA.PLANT_ID, PA.ITEM_ID
                    ) FA
            WHERE   TL.PLANT_ID  = WD.PLANT_ID
            AND     TL.PROC_ID   = WD.PROC_ID 
            AND     TL.PLANT_ID  = PO.PLANT_ID(+)
            AND     TL.TEAM_ID   = PO.PROC_ID(+)
            AND     PO.DUTY_DATE = TO_CHAR(WK.MON,'YYYYMMDD') 
            AND     TL.PLANT_ID  = FA.PLANT_ID(+)
            AND     TL.ITEM_ID   = FA.ITEM_ID(+) 
            AND		TL.ORD_NO	 = FA.ORD_NO(+)
            AND		TL.ORD_ITEM_NO = FA.ORD_ITEM_NO(+)            
            ----------------------------------------------------------------------------------------------------------------------------------
            --PLANT_ID, TEAM_ID, PROC_ID, ITEM_ORDER
            ORDER   BY 1, 58, 4, 150		
		#end
			
	</query>
	
	<query id="daily_header">
			select SEQ
			       ||'!%!'||CAL.YYYY     --년
			       ||'!%!'||CAL.MM       --월
			       ||'!%!'||CAL.DD       --일
			       ||'!%!'||CAL.WEEK_DAY --주차(한글)
			       ||'!%!'||CAL.WEEK_NO  --주차(숫자)
			       ||'!%!'||CAL.CAL_DATE --날짜(DATE형)
			       ||'!%!'||CAL.YYYYMMDD --날자(VARCHAR)
			       ||'!%!'||CAL.YYYYWW   --년주차(52)
			  from (
			             --당주,차주,차차주에 대한 날짜를 가져온다.
			             select 1 as SEQ ,to_date(to_char(SYSDATE,'YYYYMMDD')) as WEEK_DATE from DUAL union all 
			             select 2 as SEQ ,to_date(to_char(SYSDATE+7,'YYYYMMDD')) as WEEK_DATE from DUAL union all  
			             select 3 as SEQ ,to_date(to_char(SYSDATE+14,'YYYYMMDD')) as WEEK_DATE from DUAL 
			        ) IDX 
			        -----------------------------------------------------
			        --주차를 가져온다.
			        inner join CAL_MST WEK
			        on  IDX.WEEK_DATE = WEK.CAL_DATE
			        -----------------------------------------------------
			        --주차에 대한  일자를 가져온다.
			        inner join CAL_MST CAL
			        on  WEK.YYYYWW = CAL.YYYYWW
			  order by CAL.CAL_DATE
	</query>
	
	<query id="msg_version_check">
	
			SELECT  MAX(TO_NUMBER(DS.MSG_VERSION)) MSG_VERSION
			FROM    PLAN_MSG_VERSION DS
			WHERE	($commonUtil.replaceAll("$!{plant_version}","''","'"))
	
	</query>
	
	<query id="msg_version_delete">
	
			DELETE  PLAN_MSG_VERSION DS
			WHERE   ($commonUtil.replaceAll("$!{plant_version}","''","'"))
			AND     DS.MSG_VERSION = '$!{msg_version}'	
	
	</query>
	
	<query id="msg_version_insert">
			
			INSERT  INTO PLAN_MSG_VERSION(VERSION, PLANT_ID, MSG_VERSION, MADE_DTTM)
			SELECT  '$!{version}' VERSION, $commonUtil.replaceAll("$!{plant_id}","''","'") PLANT_ID, '$!{msg_version}' MSG_VERSION, SYSDATE MADE_DTTM 
			FROM    DUAL 														
			WHERE   NOT EXISTS  (												
			                        SELECT  VERSION							
			                        FROM    PLAN_MSG_VERSION DS				
			                        WHERE   DS.PLANT_ID = $commonUtil.replaceAll("$!{plant_id}","''","'")	
			                        AND     DS.VERSION  = '$!{version}'	
			                        AND     MSG_VERSION = '$!{msg_version}' 
			                    )	
	
	</query>
	  
	<!-- 계획 수정 그룹 리스트 -->
	<query id="msg_group_code_list">
	  
			SELECT  CD, CD_NAME
			FROM    CODE_MST
			WHERE   CD_GRP = 'MSG_GROUP'
	 
	</query>
	
	<!-- 생산계획 보정 메시지 저장 -->
	<query id="save_msg">
	
			MERGE   INTO DAILY_SCH_PLAN_HISTORY SH
			USING   (
			        SELECT  
			                TO_CHAR(SYSDATE,'YYYYMMDD')         AS MODIFY_DATE, 
			                DS.CAT_ID                           AS CAT_ID, 
			                DS.PLANT_ID                         AS PLANT_ID, 
			                DS.VERSION                          AS VERSION,  
			                DS.SEQ                              AS SEQ,
			                DS.WO_ID                            AS WO_ID,                                 
			                DS.ITEM_ID                          AS ITEM_ID,      
			                DS.LINE_ID                          AS LINE_ID,  
			                DS.PROC_ID                          AS PROC_ID,  
			                TO_DATE('$!{start_dates}','YYYY MM/DD(DY)') + $!{prod_dates_seq}   AS PROD_DATES,    
			                DS.SHIFT_TYPE                       AS SHIFT_TYPE,
			                DS.SHIFT_QTY                        AS TO_SHIFT_QTY, 
			                '$!{reason01}'                      AS REASON01, 
			                '$!{reason02}'                      AS REASON02, 
			                '$!{reason_msg}'                    AS REASON_MSG,
			                '$!{plan_msg}'                      AS PLAN_MSG,
			                DS.ORD_NO                           AS ORD_NO,
			                DS.ORD_ITEM_NO                      AS ORD_ITEM_NO,
			                MX.MX_HIS_NO                        AS MX_HIS_NO,
			                CASE 
                                    WHEN PV.STATUS > 22
                                    THEN 'Y'
                                    ELSE NULL
                            END                                 AS CNF_FLAG
			        FROM    DAILY_SCH_PLAN_SHIFT DS,
			                (
			                SELECT  
			                        MAX(HIS_NO) MX_HIS_NO
			                FROM    DAILY_SCH_PLAN_HISTORY DS
			                WHERE   DS.MODIFY_DATE  = TO_CHAR(SYSDATE,'YYYYMMDD')
			                AND     DS.CAT_ID       = '$!{cat_id}'
			                AND     DS.PLANT_ID     = '$!{plant_id}'
			                AND     DS.VERSION      = '$!{version}'
			                AND     DS.ITEM_ID      = '$!{item_id}'
			                AND     DS.PROC_ID      = '$!{proc_id}'
			                AND     DS.PROD_DATES   = TO_DATE('$!{start_dates}','YYYY MM/DD(DY)') + $!{prod_dates_seq}
			                AND     DS.SHIFT_TYPE   = '$!{shift_type}'
			                ORDER   BY DS.MODIFY_DATE, DS.CAT_ID, DS.PLANT_ID, DS.VERSION, DS.ITEM_ID,
			                DS.PROC_ID, DS.PROD_DATES, DS.SHIFT_TYPE, DS.TO_SHIFT_QTY
			                ) MX,
                            PLAN_VERSION_LOG PV 
			        WHERE   DS.CAT_ID     = '$!{cat_id}'
			        AND     DS.PLANT_ID   = '$!{plant_id}'
			        AND     DS.VERSION    = '$!{version}'
			        AND     DS.SEQ        = '$!{seq}'
			        AND     DS.ITEM_ID    = '$!{item_id}'
			        AND     DS.PROC_ID    = '$!{proc_id}'
			        AND     DS.PROD_DATES = TO_CHAR(TO_DATE('$!{start_dates}','YYYY MM/DD(DY)') + $!{prod_dates_seq},'YYYYMMDD')
			        AND     DS.SHIFT_TYPE = '$!{shift_type}'
			        AND     NVL(DS.ORD_NO     ,'XX') = NVL('$!{ord_no}'     ,'XX') 
			        AND     NVL(DS.ORD_ITEM_NO,'XX') = NVL('$!{ord_item_no}','XX') 
			        AND     DS.CAT_ID     = PV.CAT_ID(+)
                    AND     DS.VERSION    = PV.VERSION(+)               
		#if("$!{cat_id}" == "PS") -- 완제품 계획일때
					AND		DS.PLANT_ID	  = (
											SELECT	PLANT_ID
											FROM	ENGN_BAT_MST
											WHERE	PERIOD_TYPE	= 'DAILY'
											AND		CAT_ID		= 'PS'
											AND		SUB_CAT		= PV.SUB_CAT)
		#end   
			        ) TMP
			ON      (   
			            SH.MODIFY_DATE  = TMP.MODIFY_DATE
			        AND SH.CAT_ID       = TMP.CAT_ID
			        AND SH.PLANT_ID     = TMP.PLANT_ID
			        AND SH.VERSION      = TMP.VERSION
			        AND SH.SEQ          = TMP.SEQ
			        AND SH.WO_ID        = TMP.WO_ID
			        AND SH.ITEM_ID      = TMP.ITEM_ID
			        AND SH.LINE_ID      = TMP.LINE_ID
			        AND SH.PROC_ID      = TMP.PROC_ID
			        AND SH.PROD_DATES   = TMP.PROD_DATES
			        AND SH.SHIFT_TYPE   = TMP.SHIFT_TYPE
			        AND SH.TO_SHIFT_QTY = TMP.TO_SHIFT_QTY
			        AND SH.HIS_NO       = TMP.MX_HIS_NO
			        ) 
			WHEN    MATCHED THEN
			        UPDATE
			        SET     SH.REASON01     = TMP.REASON01
			                ,SH.REASON02    = TMP.REASON02
			                ,SH.REASON_MSG  = TMP.REASON_MSG
			                ,SH.PLAN_MSG    = TMP.PLAN_MSG
			                ,SH.MADE_DTTM   = SYSDATE
			                ,SH.MADE_BY     = '$!{user_id}'
			                ,SH.CNF_FLAG    = TMP.CNF_FLAG
                            ,SH.ORD_NO      = TMP.ORD_NO
                            ,SH.ORD_ITEM_NO = TMP.ORD_ITEM_NO
			WHEN    NOT MATCHED THEN
			INSERT
			        (
			         SH.HIS_NO      ,SH.MODIFY_DATE     ,SH.CAT_ID          ,SH.PLANT_ID        ,SH.VERSION        
			        ,SH.SEQ         ,SH.WO_ID           ,SH.ITEM_ID         ,SH.LINE_ID         ,SH.PROC_ID        
			        ,SH.PROD_DATES  ,SH.SHIFT_TYPE      ,SH.FROM_SHIFT_QTY  ,SH.TO_SHIFT_QTY    ,SH.REASON01       
			        ,SH.REASON02    ,SH.REASON_MSG      ,SH.PLAN_MSG        ,SH.MADE_TYPE       ,SH.MADE_DTTM      
			        ,SH.MADE_BY		,SH.CNF_FLAG        ,SH.ORD_NO          ,SH.ORD_ITEM_NO  
			        ) VALUES
			        (
			         S_HIS_NO.NEXTVAL   ,TMP.MODIFY_DATE    ,TMP.CAT_ID     ,TMP.PLANT_ID       ,TMP.VERSION       
			        ,TMP.SEQ            ,TMP.WO_ID          ,TMP.ITEM_ID    ,TMP.LINE_ID        ,TMP.PROC_ID       
			        ,TMP.PROD_DATES     ,TMP.SHIFT_TYPE     ,''             ,TMP.TO_SHIFT_QTY   ,TMP.REASON01      
			        ,TMP.REASON02       ,TMP.REASON_MSG     ,TMP.PLAN_MSG   ,'AD'               ,SYSDATE           
			        ,'$!{user_id}'		,TMP.CNF_FLAG       ,TMP.ORD_NO     ,TMP.ORD_ITEM_NO
			        );	
	
	</query>
	
	<!-- 공장별, 작업장별 생산가능 제품 리스트 및 TO여, 구분 정보 리스트 -->
	<query id="plant_proc_prod_item_list">
	
			SELECT  
			        IC.ITEM_ID, IM.ITEM_NAME, IM.SPEC, IC.LABOR_WOMAN,
			        DECODE(IM.MTO_MTS_TYPE, '0001','O', '0002', 'S') MTO_MTS_TYPE
			FROM    (
			        /* 공장별, 작업장별 생산제품 리스트 및 TO여 인원정보 */
			        SELECT  DISTINCT
			                PLANT_ID, PROC_ID, ITEM_ID, LABOR_WOMAN
			        FROM    ITEM_CAPA 
			        WHERE   MADE_TYPE != 'DE'
			        AND		ITEM_TYPE  = '$!{item_type}'
			        -- 생산계획 미 반영 작업장 제외
					AND (PLANT_ID, LINE_ID, ITEM_ID) NOT IN
								(
								SELECT	PLANT_ID, LINE_ID, ITEM_ID
								FROM	ITEM_PLANT_LINE_CTL
								WHERE	USE_FLAG	= 'N'
								)
			        )         IC,
			        ITEM_MST  IM
			WHERE   IC.PLANT_ID = '$!{plant_id}'
			AND     IC.PROC_ID  = '$!{proc_id}'
			AND     IC.ITEM_ID  = IM.ITEM_ID
			AND		IM.ITEM_STATUS != 'D1'
			ORDER   BY IC.ITEM_ID
	
	</query>
	
	<!-- 공장별 생산 가능 작업장 리스트 -->
	<query id="plant_prod_proc_list">
	
            SELECT  DISTINCT
                    IC.PROC_ID, HR.PROC_NAME
            FROM    ITEM_CAPA IC
                    ----------------------------------------------------
                    /* 제품 생산 가능 마지막 공정 */
                    INNER JOIN
                    (
                    SELECT  PLANT_ID, ITEM_ID, PROD_VER, MAX(OPER_ID) MX_OPER
                    FROM    ITEM_CAPA 
                    WHERE   MADE_TYPE != 'DE'
                    AND     ITEM_TYPE  = '$!{item_type}'
                    GROUP   BY PLANT_ID, ITEM_ID, PROD_VER
                    ) A
                    ON  IC.PLANT_ID = A.PLANT_ID
                    AND IC.ITEM_ID  = A.ITEM_ID
                    AND IC.PROD_VER = A.PROD_VER
                    AND IC.OPER_ID  = A.MX_OPER
                    ----------------------------------------------------
                    /* 공장, 작업장 리스트 */
                    LEFT OUTER JOIN
                    V_PROC HR
                    ON  IC.PLANT_ID = HR.PLANT_ID
                    AND IC.PROC_ID  = HR.PROC_ID
            WHERE   IC.MADE_TYPE != 'DE'
            AND     IC.ITEM_TYPE  = '$!{item_type}'
            AND     IC.PLANT_ID   = '$!{plant_id}'
            ORDER   BY IC.PROC_ID	
	
	</query>
	
	<!-- 반제품 : 공장별 생산 가능 작업장 리스트 -->
	<query id="semi_plant_prod_proc_list">
	
            SELECT  DISTINCT
                    IC.PROC_ID, HR.PROC_NAME
            FROM    ITEM_CAPA IC
                    ----------------------------------------------------
                    /* 제품 생산 가능 마지막 공정 */
                    INNER JOIN
                    (
                    SELECT  PLANT_ID, ITEM_ID, PROD_VER, MAX(OPER_ID) MX_OPER
                    FROM    ITEM_CAPA 
                    WHERE   MADE_TYPE != 'DE'
                    AND     ITEM_TYPE  = '$!{item_type}'
                    AND     ITEM_ID    NOT LIKE '72%'
                    GROUP   BY PLANT_ID, ITEM_ID, PROD_VER
                    UNION   ALL
                    SELECT  PLANT_ID, ITEM_ID, PROD_VER, MIN(OPER_ID) MX_OPER
                    FROM    ITEM_CAPA 
                    WHERE   MADE_TYPE != 'DE'
                    AND     ITEM_TYPE  = '$!{item_type}'
                    AND     ITEM_ID    LIKE '72%'
                    GROUP   BY PLANT_ID, ITEM_ID, PROD_VER
                    ) A
                    ON  IC.PLANT_ID = A.PLANT_ID
                    AND IC.ITEM_ID  = A.ITEM_ID
                    AND IC.PROD_VER = A.PROD_VER
                    AND IC.OPER_ID  = A.MX_OPER
                    ----------------------------------------------------
                    /* 공장, 작업장 리스트 */
                    LEFT OUTER JOIN
                    V_PROC HR
                    ON  IC.PLANT_ID = HR.PLANT_ID
                    AND IC.PROC_ID  = HR.PROC_ID
            WHERE   IC.MADE_TYPE != 'DE'
            AND     IC.ITEM_TYPE  = '$!{item_type}'
            AND     IC.PLANT_ID   = '$!{plant_id}'
            ORDER   BY IC.PROC_ID
	
	</query>

	
	<!-- 계획 수정 그룹 상세 리스트 -->
	<query id="msg_group_detail_list">
	
			SELECT  B.CD_GRP, B.CD, B.CD_NAME
			FROM    CODE_MST A,
			        CODE_MST B
			WHERE   A.CD_GRP = 'MSG_GROUP'
			AND     B.CD_GRP = A.CD_NAME 
	
	</query>
	
	<!-- 완제품 계획수립화면에 보정이력을 가져오는 쿼리. -->
	<query id="productionPlanAnalysis_test_pop">
	
         select HRC.PLANT_NAME
               ,HRC.PROC_NAME
               ,ITM.ITEM_NAME
               ,to_char(HIS.PROD_DATES,'YYYY-MM-DD') as PROD_DATES
               ,decode(HIS.SHIFT_TYPE,1,'■□□',3,'□■□',5,'□□■') as SFHIT_TYPE
               ,to_char(HIS.FROM_SHIFT_QTY,'FM999,999,999') as FROM_SHIFT_QTY
               ,to_char(HIS.TO_SHIFT_QTY,'FM999,999,999') as TO_SHIFT_QTY
               ,HIS.REASON_MSG
               ,HIS.PLAN_MSG
               ,decode(HIS.MADE_TYPE,'UP','수정','AD','추가','DE','삭제') as MADE_TYPE
               ,to_char(HIS.MADE_DTTM ,'MM/DD HH24:MI:SS') as MADE_DTTM
               ,HIS.MADE_BY
          from (
                    select --동일 제품이 여러변 변경된 경우 HIS_NO가 가장 큰것을 가져온다.
                           DS.HIS_NO ,dense_rank() over ( partition by DS.PLANT_ID 
                                                                      ,DS.PROC_ID 
                                                                      ,DS.ITEM_ID 
                                                                      ,DS.PROD_DATES 
                                                                      ,DS.SHIFT_TYPE 
                                                              order by DS.HIS_NO DESC) as HIS_RANK
                          ,DS.PLANT_ID 
                          ,DS.PROC_ID 
                          ,DS.ITEM_ID 
                          ,DS.PROD_DATES 
                          ,DS.SHIFT_TYPE 
                          ,DS.REASON01 
                          ,DS.REASON02 
                          ,DS.REASON_MSG 
                          ,DS.PLAN_MSG
                          ,DS.FROM_SHIFT_QTY 
                          ,DS.TO_SHIFT_QTY 
                          ,DS.MADE_TYPE       
                          ,DS.MADE_DTTM 
                          ,DS.MADE_BY
                      from DAILY_SCH_PLAN_HISTORY DS
                     where DS.MODIFY_DATE like '%'
                       and DS.CAT_ID      = 'PS'
                       and ($commonUtil.replaceAll("$!{palnVersion}","''","'"))
               ) HIS
               inner join ( select 'X' from DUAL ) DMY
               on  HIS.HIS_RANK = 1 
               ---------------------------------------------------------
               --작업장 텍스트명을가져 온다.
               left outer join V_HRCHY_PROC HRC
               on  HRC.PLANT_ID=HIS.PLANT_ID
               and HRC.PROC_ID =HIS.PROC_ID
               ---------------------------------------------------------
               --제품에 대한 텍스트명을가져온다
               left outer join ITEM_MST ITM
               on  ITM.ITEM_ID = HIS.ITEM_ID 
         order by PLANT_ID ,PROC_ID ,ITEM_ID ,PROD_DATES ,HIS.SHIFT_TYPE
	
	</query>
	
	<!--  일간 반제품 생산계획 분석(재구성) 조회 -->
	<query id="sc_12020_dailySemifinishedProductPlanAnalysisNew_list_test">
						
		#if("$!{semi_version}" == "")
			SELECT	PLANT_ID, VERSION
			FROM	DAILY_SCH_PLAN_SHIFT
			WHERE	1 = 0
		#else
            SELECT  
                    TL.PLANT_ID                PLANT_ID,       --0  공장코드         
                    TL.PLANT_NAME              PLANT_NAME,     --1  공장             
                    TL.TEAM_ID                 TEAM_ID,        --2  원가부문 코드
                    TL.TEAM_NAME               TEAM_NAME,      --3  원가부문         
                    TL.PROC_ID                 PROC_ID,        --4  작업장 코드      
                    TL.PROC_NAME               PROC_NAME,      --5  작업장 명        
                    TL.ITEM_ID                 ITEM_ID,        --6  제품 코드        
                    TL.ITEM_NAME               ITEM_NAME,      --7  제품 명          
                    TL.SPEC                    SPEC,           --8  규격             
                    TL.VERSION                 VERSION,        --9  버전            
                    TL.SEQ                     SEQ,            --10 SEQ             
                    /* SHIFT별 수량 */                                                                                  
                    ROUND(TL.D01A)              D01A,           --11 월/조           
                    ROUND(TL.D01B)              D01B,           --12 월/주           
                    ROUND(TL.D01C)              D01C,           --13 월/야           
                    ROUND(TL.D02A)              D02A,           --14 화/조           
                    ROUND(TL.D02B)              D02B,           --15 화/주           
                    ROUND(TL.D02C)              D02C,           --16 화/야           
                    ROUND(TL.D03A)              D03A,           --17 수/조           
                    ROUND(TL.D03B)              D03B,           --18 수/주           
                    ROUND(TL.D03C)              D03C,           --19 수/야           
                    ROUND(TL.D04A)              D04A,           --20 목/조           
                    ROUND(TL.D04B)              D04B,           --21 목/주           
                    ROUND(TL.D04C)              D04C,           --22 목/야           
                    ROUND(TL.D05A)              D05A,           --23 금/조           
                    ROUND(TL.D05B)              D05B,           --24 금/주           
                    ROUND(TL.D05C)              D05C,           --25 금/야           
                    ROUND(TL.D06A)              D06A,           --26 토/조           
                    ROUND(TL.D06B)              D06B,           --27 토/주           
                    ROUND(TL.D06C)              D06C,           --28 토/야           
                    ROUND(TL.D07A)              D07A,           --29 일/조           
                    ROUND(TL.D07B)              D07B,           --30 일/주           
                    ROUND(TL.D07C)              D07C,           --31 일/야           
                    ROUND(TL.TOT )              TOT,            --32 합계            
                    /* SHIFT별 연장 정보 */                                                                              
                    WD.BG01A                   BG01A,          --33 월/조           
                    WD.BG01B                   BG01B,          --34 월/주           
                    WD.BG01C                   BG01C,          --35 월/야           
                    WD.BG02A                   BG02A,          --36 화/조           
                    WD.BG02B                   BG02B,          --37 화/주           
                    WD.BG02C                   BG02C,          --38 화/야           
                    WD.BG03A                   BG03A,          --39 수/조           
                    WD.BG03B                   BG03B,          --40 수/주           
                    WD.BG03C                   BG03C,          --41 수/야           
                    WD.BG04A                   BG04A,          --42 목/조           
                    WD.BG04B                   BG04B,          --43 목/주           
                    WD.BG04C                   BG04C,          --44 목/야           
                    WD.BG05A                   BG05A,          --45 금/조           
                    WD.BG05B                   BG05B,          --46 금/주           
                    WD.BG05C                   BG05C,          --47 금/야           
                    WD.BG06A                   BG06A,          --48 토/조           
                    WD.BG06B                   BG06B,          --49 토/주           
                    WD.BG06C                   BG06C,          --50 토/야           
                    WD.BG07A                   BG07A,          --51 일/조           
                    WD.BG07B                   BG07B,          --52 일/주           
                    WD.BG07C                   BG07C,          --53 일/야  
                    /* 계획 수정 그룹 코드 */                 
					TL.GC01A                   GC01A,          --54
					TL.GC01B                   GC01B,          --55
					TL.GC01C                   GC01C,          --56
					TL.GC02A                   GC02A,          --57
					TL.GC02B                   GC02B,          --58
					TL.GC02C                   GC02C,          --59
					TL.GC03A                   GC03A,          --60
					TL.GC03B                   GC03B,          --61
					TL.GC03C                   GC03C,          --62
					TL.GC04A                   GC04A,          --63
					TL.GC04B                   GC04B,          --64
					TL.GC04C                   GC04C,          --65
					TL.GC05A                   GC05A,          --66
					TL.GC05B                   GC05B,          --67
					TL.GC05C                   GC05C,          --68
					TL.GC06A                   GC06A,          --69
					TL.GC06B                   GC06B,          --70
					TL.GC06C                   GC06C,          --71
					TL.GC07A                   GC07A,          --72
					TL.GC07B                   GC07B,          --73
					TL.GC07C                   GC07C,          --74
                    /* 계획 수정 그룹 상세 코드 */                                    
                    TL.DC01A                   DC01A,          --75                   
                    TL.DC01B                   DC01B,          --76                   
                    TL.DC01C                   DC01C,          --77                   
                    TL.DC02A                   DC02A,          --78                   
                    TL.DC02B                   DC02B,          --79                   
                    TL.DC02C                   DC02C,          --80                   
                    TL.DC03A                   DC03A,          --81                   
                    TL.DC03B                   DC03B,          --82                   
                    TL.DC03C                   DC03C,          --83                   
                    TL.DC04A                   DC04A,          --84                   
                    TL.DC04B                   DC04B,          --85                   
                    TL.DC04C                   DC04C,          --86                   
                    TL.DC05A                   DC05A,          --87                   
                    TL.DC05B                   DC05B,          --88                   
                    TL.DC05C                   DC05C,          --89                   
                    TL.DC06A                   DC06A,          --90                   
                    TL.DC06B                   DC06B,          --91                   
                    TL.DC06C                   DC06C,          --92                   
                    TL.DC07A                   DC07A,          --93                   
                    TL.DC07B                   DC07B,          --94                   
                    TL.DC07C                   DC07C,          --95                   
                    /* 계획 수정 내용 */                                              
                    TL.RM01A                   RM01A,          --96                    
                    TL.RM01B                   RM01B,          --97                    
                    TL.RM01C                   RM01C,          --98                    
                    TL.RM02A                   RM02A,          --99                    
                    TL.RM02B                   RM02B,          --100                   
                    TL.RM02C                   RM02C,          --101                   
                    TL.RM03A                   RM03A,          --102                   
                    TL.RM03B                   RM03B,          --103                   
                    TL.RM03C                   RM03C,          --104                   
                    TL.RM04A                   RM04A,          --105                   
                    TL.RM04B                   RM04B,          --106                   
                    TL.RM04C                   RM04C,          --107                   
                    TL.RM05A                   RM05A,          --108                   
                    TL.RM05B                   RM05B,          --109                   
                    TL.RM05C                   RM05C,          --110                   
                    TL.RM06A                   RM06A,          --111                   
                    TL.RM06B                   RM06B,          --112                   
                    TL.RM06C                   RM06C,          --113                   
                    TL.RM07A                   RM07A,          --114                   
                    TL.RM07B                   RM07B,          --115                   
                    TL.RM07C                   RM07C,          --116                   
                    /* 알림 사항 */                                                   
                    TL.PM01A                   PM01A,          --117                  
                    TL.PM01B                   PM01B,          --118                  
                    TL.PM01C                   PM01C,          --119                 
                    TL.PM02A                   PM02A,          --120                  
                    TL.PM02B                   PM02B,          --121                  
                    TL.PM02C                   PM02C,          --122                  
                    TL.PM03A                   PM03A,          --123                  
                    TL.PM03B                   PM03B,          --124                  
                    TL.PM03C                   PM03C,          --125                  
                    TL.PM04A                   PM04A,          --126                  
                    TL.PM04B                   PM04B,          --127                 
                    TL.PM04C                   PM04C,          --128                  
                    TL.PM05A                   PM05A,          --129                  
                    TL.PM05B                   PM05B,          --130                  
                    TL.PM05C                   PM05C,          --131                  
                    TL.PM06A                   PM06A,          --132                  
                    TL.PM06B                   PM06B,          --133                  
                    TL.PM06C                   PM06C,          --134                  
                    TL.PM07A                   PM07A,          --135                  
                    TL.PM07B                   PM07B,          --136                  
                    TL.PM07C                   PM07C,          --137                  
                    TL.CAT_ID                   CAT_ID,         --138
                    TL.BAT_TO_EA				BAT_TO_EA		--139
            FROM    (
                    SELECT  
                            A.PLANT_ID,     A.PLANT_NAME,   A.TEAM_ID,      A.TEAM_NAME,    A.PROC_ID,      
                            A.PROC_NAME,    A.ITEM_ID,      A.ITEM_NAME,    A.SPEC,         A.VERSION,      
                            A.SEQ,                          
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D01A,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D01B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D01C,    
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D02A,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D02B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D02C,    
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D03A,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D03B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D03C,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D04A,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D04B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D04C,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D05A,   
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D05B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D05C,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D06A,   
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D06B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D06C,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE NULL END) D07A,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE NULL END) D07B,  
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE NULL END) D07C,                                                      
                            ---------------------------------------------------------------------------------------------------------------------------
                            SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  A.SHIFT_QTY  ELSE 0 END)
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  A.SHIFT_QTY  ELSE 0 END)               
                            + SUM(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  A.SHIFT_QTY  ELSE 0 END) TOT
                            /* 계획 수정 그룹 코드 */
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC01A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC01B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC01C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC02A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC02B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC02C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC03A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC03B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC03C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC04A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC04B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC04C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC05A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC05B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC05C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC06A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC06B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC06C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON01  ELSE NULL END) GC07A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON01  ELSE NULL END) GC07B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON01  ELSE NULL END) GC07C  
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 계획 수정 그룹 상세 코드 */
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC01A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC01B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC01C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC02A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC02B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC02C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC03A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC03B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC03C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC04A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC04B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC04C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC05A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC05B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC05C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC06A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC06B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC06C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON02  ELSE NULL END) DC07A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON02  ELSE NULL END) DC07B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON02  ELSE NULL END) DC07C
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 계획 수정 내용 */
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM01A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM01B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM01C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM02A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM02B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM02C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM03A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM03B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM03C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM04A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM04B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM04C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM05A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM05B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM05C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM06A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM06B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM06C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.REASON_MSG  ELSE NULL END) RM07A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.REASON_MSG  ELSE NULL END) RM07B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.REASON_MSG  ELSE NULL END) RM07C
                            ----------------------------------------------------------------------------------------------------------------------------
                            /* 알림 사항 */
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM01A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM01B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+0, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM01C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM02A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM02B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+1, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM02C   
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM03A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM03B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+2, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM03C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM04A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM04B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+3, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM04C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM05A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM05B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+4, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM05C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM06A  
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM06B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+5, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM06C 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '1' THEN  DH.PLAN_MSG  ELSE NULL END) PM07A 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '3' THEN  DH.PLAN_MSG  ELSE NULL END) PM07B 
                            , MAX(CASE WHEN A.PROD_DATES = TO_CHAR(A.MON+6, 'YYYYMMDD') AND A.SHIFT_TYPE = '5' THEN  DH.PLAN_MSG  ELSE NULL END) PM07C                            
                            ----------------------------------------------------------------------------------------------------------------------------
                            ,A.CAT_ID, BA.BAT_TO_EA
                     FROM   (
                            SELECT    
                                    HR.PLANT_ID,    HR.PLANT_NAME,  HR.TEAM_NAME,   HR.PROC_ID, HR.PROC_NAME, 
                                    DS.ITEM_ID,     IM.ITEM_NAME,   IM.SPEC,        DS.VERSION, DS.SEQ, 
                                    HR.TEAM_ID,     DS.CAT_ID,      DS.PROD_DATES,  WK.MON,     DS.SHIFT_TYPE, 
                                    DS.SHIFT_QTY,   DS.LINE_ID
                            FROM    DAILY_SCH_PLAN_SHIFT DS, 
                                    ITEM_MST IM, 
                                    V_LAST_PROC_LIST HR, -- 마지막 작업장 리스트
                                    (
                                    -- DEFAULT : 차주, 차주 월요일
                                #if("$!{checked_weekly}" == "w0")
                                    SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
                                #elseif("$!{checked_weekly}" == "w2")
                                    SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
                                #else
                                    SELECT NEXT_DAY(SYSDATE,2) MON --차주
                                #end                                  
                                    FROM   DUAL
                                    ) WK
                            WHERE   ( ( DS.CAT_ID = 'SS' AND DS.VERSION = '$!{semi_version}' [$commonUtil.replaceAll("${semi_plant}","''","'")] )
                                    )
                            AND     DS.PROD_DATES BETWEEN  TO_CHAR(WK.MON,'YYYYMMDD') AND TO_CHAR(WK.MON+6,'YYYYMMDD') 
                            AND     HR.PLANT_ID = DS.PLANT_ID
                            AND     DS.PROC_ID  = HR.PROC_ID
                            AND     DS.ITEM_ID  NOT LIKE '72%'
                            AND     DS.ITEM_ID  = IM.ITEM_ID
                            AND     IM.ITYPE   != 'FERT'                            
                            UNION ALL
                            SELECT  
                                    HR.PLANT_ID,    HR.PLANT_NAME,  HR.TEAM_NAME,   HR.PROC_ID,     HR.PROC_NAME,   
                                    DS.ITEM_ID,     IM.ITEM_NAME,   IM.SPEC,        DS.VERSION,     DS.SEQ, 
                                    HR.TEAM_ID,     DS.CAT_ID,      DS.PROD_DATES,  WK.MON,         DS.SHIFT_TYPE, 
                                    DS.SHIFT_QTY,   DS.LINE_ID
                            FROM    DAILY_SCH_PLAN_SHIFT DS, 
                                    ITEM_MST IM, 
                                    V_HRCHY_PROC HR, -- 작업장 리스트
                                    (
                                    -- DEFAULT : 차주, 차주 월요일
                                #if("$!{checked_weekly}" == "w0")
                                    SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
                                #elseif("$!{checked_weekly}" == "w2")
                                    SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
                                #else
                                    SELECT NEXT_DAY(SYSDATE,2) MON --차주
                                #end                                  
                                    FROM   DUAL
                                    ) WK,
                                    (
                                    /* 기지류의 첫공정(투입공정) 추출 */
                                    SELECT  
                                            PLANT_ID, ITEM_ID, PROD_VER, LINE_ID, PROC_ID
                                    FROM    SCH_OPER_RANK_SEMI
                                    WHERE   ITEM_ID   LIKE '72%'
                                    AND     OPER_RANK = 1
                                    ) OP
                            WHERE   ( ( DS.CAT_ID = 'SS' AND DS.VERSION = '$!{semi_version}' [$commonUtil.replaceAll("${semi_plant}","''","'")] )
                                    ) 
                            AND     DS.PROD_DATES BETWEEN  TO_CHAR(WK.MON,'YYYYMMDD') AND TO_CHAR(WK.MON+6,'YYYYMMDD') 
                            AND     HR.PLANT_ID = DS.PLANT_ID
                            AND     DS.ITEM_ID  LIKE '72%'
                            AND     HR.PROC_ID  = DS.PROC_ID
                            AND     DS.PLANT_ID = OP.PLANT_ID 
                            AND     DS.ITEM_ID  = OP.ITEM_ID 
                            AND     DS.PROD_VER = OP.PROD_VER 
                            AND     DS.LINE_ID  = OP.LINE_ID 
                            AND     DS.PROC_ID  = OP.PROC_ID
                            AND     DS.ITEM_ID  = IM.ITEM_ID
                            AND     IM.ITYPE   != 'FERT'                            
                            ) A,
                            (
                            /* 계획 수정 내역 및 알림 사항 */
                            SELECT  A.CAT_ID, A.PLANT_ID, A.VERSION, A.SEQ, A.WO_ID, A.ITEM_ID, A.PROC_ID, A.LINE_ID, 
                                    TO_CHAR(A.PROD_DATES,'YYYYMMDD') PROD_DATES, A.SHIFT_TYPE,
                                    A.REASON01, A.REASON02, A.REASON_MSG, A.PLAN_MSG
                            FROM    DAILY_SCH_PLAN_HISTORY A,
                                    (
                                    SELECT  
                                            MAX(HT.HIS_NO) HIS_NO, HT.CAT_ID, HT.PLANT_ID, HT.VERSION,
                                            HT.ITEM_ID, HT.LINE_ID, HT.PROC_ID, HT.PROD_DATES, HT.SHIFT_TYPE  
                                    FROM    DAILY_SCH_PLAN_HISTORY HT
                                    GROUP   BY HT.CAT_ID, HT.PLANT_ID, HT.VERSION, HT.ITEM_ID, 
                                            HT.LINE_ID, HT.PROC_ID, HT.PROD_DATES, HT.SHIFT_TYPE 
                                    ) B
                            WHERE   A.HIS_NO     = B.HIS_NO
                            AND     A.CAT_ID     = B.CAT_ID
                            AND     A.PLANT_ID   = B.PLANT_ID
                            AND     A.VERSION    = B.VERSION
                            AND     A.ITEM_ID    = B.ITEM_ID
                            AND     A.LINE_ID    = B.LINE_ID
                            AND     A.PROD_DATES = B.PROD_DATES
                            AND     A.SHIFT_TYPE = B.SHIFT_TYPE 
                            ) DH,
							(
							/* 반제품 BAT-EA환산수량 : 꼭 EA만 아니고 생산기본단위 기준으로 변환 */
							SELECT	T1.PLANT_ID, T1.PROC_ID, T1.ITEM_ID,
									MAX(T2.BAT_TO_EA)	BAT_TO_EA	
							FROM	ITEM_CAPA	T1,
									(
									SELECT	T1.PLANT_ID, T1.PROD_VER, T1.ITEM_ID,
											MAX(ROUND(DECODE(T1.QTY,0,0, 
												-- ROUTING의 CONV_UOM이 생산기준단위가 아니면 환산 필요 
												-- 예를들면 BAT->EA를 구할 때 ROUTING안에서는 단위가 'KG'인 경우가 존재한다.
												CASE 
													WHEN T2.BASE_UOM = T1.CONV_UOM THEN
														T1.CONV_QTY
													ELSE
														F_GETCONV_UOM(T1.ITEM_ID, T1.CONV_UOM, T2.BASE_UOM,T1.CONV_QTY)
												END
												/T1.QTY),0))	BAT_TO_EA
									FROM	ITEM_CAPA 	T1,
											ITEM_MST	T2
									WHERE	T1.ITEM_TYPE	= 'HALB'
									AND		T1.ITEM_ID		= T2.ITEM_ID
									AND		T1.QTY_UOM		= 'BAT'
									GROUP
									BY		T1.PLANT_ID, T1.PROD_VER, T1.ITEM_ID
									)			T2
							WHERE	T1.PLANT_ID	= T2.PLANT_ID
							AND		T1.ITEM_ID	= T2.ITEM_ID
							AND		T1.PROD_VER	= T2.PROD_VER
							GROUP
							BY		T1.PLANT_ID, T1.PROC_ID, T1.ITEM_ID
							)	BA
                        #if( "$!{line_grp}" != "" )
                            ,
                            (
                            /* 라인 그룹 */
                            SELECT  
                                    CM.CAT02 PLANT_ID, CM.CAT03 LINE_ID, CM.CAT04 PROC_ID
                            FROM    CODE_MST CM
                            WHERE   CM.CD_GRP = 'HALB_LINE_GRP'
                            AND     CM.CAT01  IN ($commonUtil.replaceAll("${line_grp}","''","'"))
                            ) CM 
                        #end
                    WHERE   A.CAT_ID     = DH.CAT_ID(+)
                    AND     A.PLANT_ID   = DH.PLANT_ID(+)
                    AND     A.VERSION    = DH.VERSION(+)
                    AND     A.SEQ        = DH.SEQ(+)
                    AND        A.ITEM_ID     = DH.ITEM_ID(+)
                    AND     A.LINE_ID    = DH.LINE_ID(+)
                    AND     A.PROC_ID    = DH.PROC_ID(+)
                    AND     A.PROD_DATES = DH.PROD_DATES(+)
                    AND     A.SHIFT_TYPE = DH.SHIFT_TYPE(+)
                    AND		A.PLANT_ID		= BA.PLANT_ID(+)
					AND		A.PROC_ID		= BA.PROC_ID(+)
					AND		A.ITEM_ID		= BA.ITEM_ID(+)
                #if( "$!{line_grp}" != "" )
                    AND     A.PLANT_ID   = CM.PLANT_ID
                    AND     A.PROC_ID    = CM.PROC_ID 
                #end                            
                    GROUP   BY A.PLANT_ID,  A.PLANT_NAME,   A.TEAM_ID,      A.TEAM_NAME,    A.PROC_ID,  
                               A.PROC_NAME, A.ITEM_ID,      A.ITEM_NAME,    A.SPEC,         A.VERSION,  
                               A.SEQ,       A.CAT_ID, 		BA.BAT_TO_EA                                      
                    ) TL,
                    (
                    /* 작업장별  연장 정보 */
                    -- O : 연장 , N : 일반
                    SELECT  PLANT_ID, PROC_ID,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+0,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG01A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+0,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG01B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+0,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG01C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+1,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG02A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+1,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG02B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+1,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG02C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+2,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG03A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+2,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG03B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+2,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG03C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+3,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG04A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+3,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG04B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+3,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG04C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+4,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG05A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+4,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG05B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+4,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG05C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+5,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG06A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+5,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG06B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+5,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG06C,
                            -------------------------------------------------------------------------------------------------
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+6,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '1'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG07A,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+6,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '3'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG07B,
                            MAX(CASE
                            WHEN WD.DUTY_DATE = TO_CHAR(WK.MON+6,'YYYYMMDD')
                                    AND DECODE(SUBSTR(WD.SHIFT_ID,1,3),'JOG','1','OTD','1','DAY','3','NIG','5','OTJ','1','OTN','5') = '5'
                            THEN 
                                 SUBSTR(WORKTY_ID,2,1) 
                            ELSE NULL
                            END) BG07C
                            -------------------------------------------------------------------------------------------------
                    FROM    WORK_DIARY WD,
                            (
                            -- DEFAULT : 차주, 차주 월요일
                        #if("$!{checked_weekly}" == "w0")
                            SELECT  NEXT_DAY(SYSDATE-7,2) MON --금주
                        #elseif("$!{checked_weekly}" == "w2")
                            SELECT  NEXT_DAY(SYSDATE+7,2) MON --차차주
                        #else
                            SELECT NEXT_DAY(SYSDATE,2) MON --차주
                        #end 
                            FROM   DUAL
                            ) WK
                    WHERE   WD.DUTY_DATE &gt;= TO_CHAR(WK.MON,'YYYYMMDD')
                    AND     WD.DUTY_DATE &lt;= TO_CHAR(WK.MON+6,'YYYYMMDD')
                    GROUP   BY WD.PLANT_ID, WD.PROC_ID
                    ) WD   
            WHERE   TL.PLANT_ID = WD.PLANT_ID
            AND     TL.PROC_ID  = WD.PROC_ID               
            ----------------------------------------------------------------------------------------------------------------------------------
            ORDER   BY 1, 3, 5, 7         
        #end	
        		
	</query>
		
<!--
=====================================================================================================
 끝 
=====================================================================================================
--> 

</queries>
