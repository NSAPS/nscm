<?xml version="1.0" encoding="EUC-KR"?>
<queries>

<!--
=====================================================================================================
	발주계획  >> 운영정보
=====================================================================================================
-->
	
	<!--
	======================================================================
		LTP 중장기 자재발주수
	======================================================================
	-->
	
	<!-- DW1 계획수립 대상 리스트 -->
	<query id="Aps_Pr_version_list">
		SELECT  DISTINCT PR.VERSION
		        --,   IF_FLAG
		        , DECODE(MAX(IF.IF_FLAG), NULL, NULL, 'Y') IF_FLAG
		FROM    APS_PR_PLAN PR, APS_PR_PLAN_IF IF,
		        ITEM_MST IM
		WHERE   PR.ITEM_ID = IM.ITEM_ID
		AND     PR.VERSION = IF.VERSION(+)
		AND     IM.ITYPE IN ( 'ROH1','ROH2')
		GROUP   BY PR.VERSION
		ORDER   BY PR.VERSION DESC
	</query>
	
	<query id="Aps_Pr_version_list_hawa">
        SELECT  DISTINCT VERSION
                , DECODE(IF_FLAG, NULL,'N', 'Y') IF_FLAG
        FROM    APS_PR_PLAN PR, ITEM_MST IM
        WHERE   PR.ITEM_ID = IM.ITEM_ID
		AND ITYPE = 'HAWA'
        ORDER BY  VERSION DESC	
	</query>
	
	<query id="cdc_id_and_name_list_hawa">
	SELECT * FROM
	(SELECT 	DM.DC_ID, DM.DC_SHORT_NAME,
    		DENSE_RANK() OVER(ORDER BY DM.DC_ID) AS SEQ
			FROM 	DC_MST DM, 
            		( SELECT 'TMP' TMP FROM DUAL ) TP <!-- 비정상멈춤 현상 방지 TMP 테이블 조인 -->
			WHERE 	DM.MADE_TYPE != 'DE' -- 삭제 필드가 아닌 데이터만 조회
			AND     DM.DC_ID  IN 
			(SELECT DC_ID FROM DC_MST WHERE   CDC_FLAG = 'Y'))
    WHERE SEQ IN (1,2,3)
	</query>
	

	
	<!-- DW1 계획수립 대상 리스트 -->
	<query id="sel_dmd_list">
        SELECT  CD, substr(CD_NAME,3,30)
        FROM    CODE_MST
        WHERE   CD_GRP = 'SEL_DMD'
        AND     CD NOT IN ('DMD01','DMD02','DMD06','DMD07')
        ORDER BY SUBSTR(CD_NAME,3,30)
		#if ( "$!{item_type}" != 'HAWA' )
        -- AND     CD != 'DMD09'
		#else
		#end
        
	</query>	
	
	<!-- DW1 계획수립 대상 리스트 -->
	<query id="op_02010_Long_Term_Planning_list_dw1">
		-- DW1 계획수립 대상 리스트
		SELECT  ITEM_ID,
		        ITEM_NAME,
		        TERMVAL,        							--  유통기한
                TRIM(TO_CHAR(
                LEAD_TIME,999999999990.9)) LEAD_TIME, 		--  리드타임
                BASE_UOM,									--  기본단위			
		        ROUND(STOCK),            					--  현재고
		        ROUND(ETA),            						--  진행중재고
		        ROUND(TOT_STOCK),         					--  총재고
		        SEL_DMD,        							--  선택구분
		        ROUND(STD_STOCK),        					--  기준재고
		        ROUND(SAFETY_STOCK),    					--  안전재고
		        SAFETY_FACTOR,        						--  안전계수    
		        DMD05,            							--  평균
                DECODE(DMD05,0,0,
                TRIM(TO_CHAR(ROUND((STD_DEV/DMD05)*100,1)
                ,999999999990.9))) STD_DEV,  				--  표준편차
		        DMD03,            							--  3개월평균
		        DMD04,           							--  전년동월
		        ROUND(USE_CUM_MONTH),    					--  당월누계
		        MIN_LOT_SIZE,    							--  최소발주량
                --  발주시기 = (총재고-안전재고)/기준재고 가 1보다 작을때
                --  (총재고-안전재고)/기준재고 - 1 - 리드타임
                TRIM(TO_CHAR(               
                DECODE(STD_STOCK, 0, NULL,    				-- STD_STOCK (기준재고)가 0일 경우 빈칸 표시 
                DECODE(PR_DATE_NO, 0, 
                ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1)
                , PR_DATE_NO))    
                ,999999999990.9)) PR_DATE_NO,
                DECODE(PR_QTY, 0,
                CASE
                    WHEN MIN_LOT_SIZE = 0 THEN STD_STOCK
                    WHEN STD_STOCK > MIN_LOT_SIZE THEN
                        CEIL(STD_STOCK/MIN_LOT_SIZE) * MIN_LOT_SIZE
                    ELSE MIN_LOT_SIZE
                END    
                , PR_QTY)	PR_QTY,
               -- DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
               -- DECODE(PR_QTY, 0,
               -- CASE
               --     WHEN MIN_LOT_SIZE = 0 THEN STD_STOCK
               --     WHEN STD_STOCK > MIN_LOT_SIZE THEN
               --         CEIL(STD_STOCK/MIN_LOT_SIZE) * MIN_LOT_SIZE
               --     ELSE MIN_LOT_SIZE
               -- END    
               -- , PR_QTY)) PR_QTY,             
                    CASE
                    WHEN ENTR_DATE = 0 
                    THEN TO_CHAR(TRUNC(SYSDATE) + TOT_LEAD_TIME   ,'YYYY-MM-DD')
                    ELSE TO_CHAR(TO_DATE(ENTR_DATE),'YYYY-MM-DD')
                    END  ENTR_DATE      
				,EDIT_FLAG
				,CASE
					WHEN IF_FLAG = 'I'	THEN '전송전'
					WHEN IF_FLAG = 'P'	THEN '전송중'
					WHEN IF_FLAG = 'S'	THEN '완료'
					WHEN IF_FLAG = 'E'	THEN '오류'
					ELSE IF_FLAG
				END		IF_FLAG
                ,PR_NO
                ,IF_MSGS
                ,TOT_LEAD_TIME
                ,ITYPE
                ,F_GET_ITEM_MSG('OP_02010',ITEM_ID)MSG
                ,SEQ
		FROM    (
		        SELECT  ITEM_ID,
		        		ITYPE,
		                ITEM_NAME,
		                TERMVAL,         	--   유통기한
		                TOT_LEAD_TIME,		--TOT_LEAD_TIME (리드타임 일자 변환)
		                LEAD_TIME,         	--   리드타임
		                STOCK,             	--   현재고
		                ETA,             	--   진행중재고
		                TOT_STOCK,          --   총재고
		                SEL_DMD,         	--   선택구분
		                STD_STOCK,         	--   기준재고
		                 --   안전재고 = 리드타임 * 기준재고 * 안전계수(default 1)
		                LEAD_TIME * STD_STOCK * DECODE(SAFETY_FACTOR,0, 1, SAFETY_FACTOR)    SAFETY_STOCK,     --   안전재고
		                DECODE(SAFETY_FACTOR,0, 1, SAFETY_FACTOR)        SAFETY_FACTOR,         --   안전계수
		                NVL(DMD05,0)			DMD05,             --   평균
		                STD_DEV,           	--   표준편차
		                DMD03,             	--   3개월평균
		                DMD04,             	--   전년동월
		                USE_CUM_MONTH,     	--   당월누계
		                MIN_LOT_SIZE,     	--   최소발주량
		                PR_DATE_NO,			--   발주시기
		                PR_QTY,				--   발주수량
		                ENTR_DATE,			--   입고일
		                BASE_UOM,			--   기본단위
		                EDIT_FLAG,
		                IF_FLAG,
		                PR_NO,
		                IF_MSGS,
		                SEQ
		        FROM    (
		                SELECT  S1.ITEM_ID,
		                		S1.ITYPE,
		                        S1.ITEM_NAME,
		                        S1.TERMVAL,
                                --TOT_LEAD_TIME (리드타임 일자 변환)
                                (NVL(PR_TO_PO,0)+NVL(PO_TO_LC ,0)+NVL(LC_TO_PORT ,0)+NVL(PORT_TO_CUST ,0)) TOT_LEAD_TIME,
		                        ROUND((NVL(PR_TO_PO,0)+NVL(PO_TO_LC ,0)+NVL(LC_TO_PORT ,0)+NVL(PORT_TO_CUST ,0))/30,1) LEAD_TIME, --   리드타임은 월단위로 정정 
		                        NVL(S2.STOCK,0)    STOCK,                   --   현재고
		                        NVL(S2.ETA,0)    ETA,                       --   진행중 재고
		                        NVL(S2.STOCK,0)    + NVL(S2.ETA,0)    TOT_STOCK,      --   총재고
		                        SEL_DMD,                                    --   선택구분
		                        STD_STOCK,                                  --   기준재고
		                        NVL(S2.DMD03,0)    DMD03,                   --   기준재고(3개월)
		                        NVL(S2.DMD04,0)    DMD04,                   --   기준재고(전년동월)
		                        NVL(S2.DMD05,0)    DMD05,                   --   평균(과거12개월)
		                        NVL(S2.STD_DEV,0)    STD_DEV,               --   표준편차
		                        NVL(S2.USE_CUM_MONTH ,0)    USE_CUM_MONTH,  --   당월누계
		                        NVL(S2.SAFETY_FACTOR ,0)	SAFETY_FACTOR,	--   안전계수 
				                NVL(S2.PR_DATE_NO ,0)		PR_DATE_NO,		--   발주시기
				                NVL(S2.PR_QTY ,0)			PR_QTY,			--   발주수량
				                NVL(S2.ENTR_DATE ,0)		ENTR_DATE,		--   입고일
		                        --( -- ERP 관리포인트인 최소발주량을 APS에서 관리하도록 수정 
		                        --SELECT    MAX(MIN_LOT_SIZE)
		                        --FROM    ITEM_DTL    S3
		                        --WHERE    S1.ITEM_ID    = S3.ITEM_ID
		                        --)    MIN_LOT_SIZE
		                        MINMPSQTY    MIN_LOT_SIZE, 					-- 최소발주량
				                BASE_UOM,									-- 기본단위
                                CASE
                                    WHEN S3.IF_FLAG IS NULL
                                    THEN S2.IF_FLAG
                                    ELSE S3.IF_FLAG
                                END IF_FLAG
                                ,EDIT_FLAG
                                ,S3.PR_NO
                                ,S3.IF_MSGS
                                ,S2.SEQ				                
		                FROM    ITEM_MST    S1,
		                        APS_PR_PLAN    S2,
                                (
                                SELECT  VERSION, ITEM_ID, SEQ,
                                        MIN(IF_FLAG) IF_FLAG,
                                        MIN(IF_MSGS) IF_MSGS,
                                        MIN(PR_NO) PR_NO
                                FROM    APS_PR_PLAN_IF
                                WHERE	VERSION    = '$!{version}'
                                GROUP   
                                BY      VERSION, ITEM_ID, SEQ                                   
                                ) S3		                        
		                WHERE   S1.USE_PR_PLAN    = 'Y'
		                AND     S1.ITEM_ID    = S2.ITEM_ID(+)
                        AND     S2.ITEM_ID    = S3.ITEM_ID(+)
                        AND     S2.VERSION    = S3.VERSION(+)
		                AND     S2.VERSION    = '$!{version}'
		                AND     S2.SEQ		  = S3.SEQ(+)
		                AND     NVL(S1.DOMAIN,'X')	LIKE '%'||'$!{domain}'||'%'
						#if ( "$!{edit_flag}" == 'Y' )
		                AND		S2.EDIT_FLAG  = 'Y'
						#else
						#end
						#if ( "$!{item_type}" == 'HAWA' )
						AND     S1.ITYPE	= 'HAWA' --자재 유형별로 변수 바인딩
						#elseif ( "$!{item_type}" == 'ROH1' )
						AND     S1.ITYPE	= 'ROH1' --자재 유형별로 변수 바인딩
						#elseif ( "$!{item_type}" == 'ROH2' )
						AND     S1.ITYPE	= 'ROH2' --자재 유형별로 변수 바인딩
						#else
						AND     S1.ITYPE	  IN ('ROH1','ROH2') --자재 유형별로 변수 바인딩
						#end
		                )
		        )
		ORDER BY IF_FLAG, EDIT_FLAG, PR_DATE_NO, ITEM_ID	        
	</query>
	

	<!-- DW 1 총재고 pop_up 완제품 반제품 재고조회 -->
	<query id="op_02010_Long_Term_Planning_list_fert_halb_stock_list">
		-- DW 1 총재고 POP_UP 완제품 반제품 재고조회
        SELECT  ST.CONS_ITEM_ID,
                ST.CONS_ITEM_NAME,
                ST.PROD_ITEM_TYPE,
                ST.ITEM_ID,
                ST.ITEM_NAME,
                ST.QTY_UOM,
                ST.QTY STCOK_QTY,
                ST.SALES_MEAN_3WEEK                  "3주평균판매",
                ROUND(DECODE(ST.SALES_MEAN_3WEEK, 0, 0,ST.QTY/ST.SALES_MEAN_3WEEK),1)           "재고일수",
                PO.PROD_QTY                          "3개월평균생산",
                F_GET_PROD_QTY_MONTH(ST.ITEM_ID, 12) "전년동월생산", -- F_GET_PROD_QTY_MONTH 해당 과거월의 월 생산량 가저옴
                DECODE(ST.PROD_ITEM_TYPE, 'FERT', PP.WEEK_PROD*IM.QTY,
                PP.WEEK_PROD) "당주생산계획량" --, (완제품은 EA 버전)
        FROM    (--13
                /*완제품의 주초재고 DC_DATAWAREHOUSE 테이블 이용*/
                SELECT  IM.CONS_ITEM_ID,
                        F_GET_ITEM_NAME(IM.CONS_ITEM_ID) CONS_ITEM_NAME,
                        IM.PROD_ITEM_TYPE,
                        DW.ITEM_ID,
                        F_GET_ITEM_NAME(DW.ITEM_ID) ITEM_NAME,
                        SUM(DW.BASE_STOCK ) QTY, -- 주초기초재고
                        'BOX' QTY_UOM,
                        SUM(SALES_MEAN_3WEEK_ETC) SALES_MEAN_3WEEK
                FROM    DC_DATAWAREHOUSE DW,
                        (
                        /*해당 원자재의 생산품(완제품/반제품)*/
                        SELECT  PROD_ITEM_ID,
                                F_GET_ITEM_NAME(PROD_ITEM_ID) ITEM_NAME,
                                PROD_ITEM_TYPE,
                                CONS_ITEM_ID
                        FROM    BOM_MAP
                        WHERE   CONS_ITEM_ID	= '$!{item_id}'
                        AND     PROD_ITEM_TYPE	= 'FERT'
                        ) IM,
                        (
                        /*해당주 월요일 찾기*/
                        SELECT  TO_CHAR(TRUNC(SYSDATE,'D')+1,'yyyymmdd') CAL_DATE
                        FROM    DUAL                
                        ) CAL
                WHERE   DW.ITEM_ID      = IM.PROD_ITEM_ID
                AND     DW.CNFM_DATE    = CAL.CAL_DATE
                GROUP 
                BY      IM.CONS_ITEM_ID, PROD_ITEM_TYPE, DW.ITEM_ID
                UNION ALL
                /*반제품 주초재고 ERP_STOCK, REAL_STOCK 테이블 이용*/
                SELECT  IM.CONS_ITEM_ID,
                        F_GET_ITEM_NAME(IM.CONS_ITEM_ID) CONS_ITEM_NAME,
                        ES.ITYPE,
                        ES.ITEM_ID,
                        F_GET_ITEM_NAME(ES.ITEM_ID) ITEM_NAME,
                        DECODE(SUM(RS.QTY), NULL, SUM(ES.QTY), SUM(ES.QTY)) ES_QTY,
                        ES.QTY_UOM,
                        0 SALES_MEAN_3WEEK_ETC
                        --SUM(ES.QTY) RS_QTY
                FROM    ERP_STOCK ES, REAL_STOCK RS,
                        (
                        /*해당 원자재의 생산품(완제품/반제품)*/
                        SELECT  PROD_ITEM_ID,
                                F_GET_ITEM_NAME(PROD_ITEM_ID) ITEM_NAME,
                                PROD_ITEM_TYPE,
                                CONS_ITEM_ID
                        FROM    BOM_MAP
                        WHERE   CONS_ITEM_ID = '$!{item_id}'
                        AND     PROD_ITEM_TYPE = 'HALB'
                        ) IM,
                        (
                        /*해당주 월요일 찾기*/
                        SELECT  TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYY-MM-DD') CAL_DATE
                        FROM    DUAL
                        ) CAL        
                WHERE   ES.IF_DTTM  = RS.USABLE_DATE
                AND     ES.ITEM_ID  = RS.ITEM_ID
                AND     ES.LOC_ID   = RS.LOC_ID
                AND     ES.IF_DTTM  = CAL.CAL_DATE
                AND     ES.USABLE_DATE  = CAL.CAL_DATE
                AND     ES.ITEM_ID = IM.PROD_ITEM_ID
                GROUP
                BY      IM.CONS_ITEM_ID, ES.ITYPE, ES.ITEM_ID, ES.QTY_UOM   
                ) ST,
                (--12
                SELECT  ITEM_ID,
                        F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
                        ROUND(SUM(COMPL_QTY)/3) PROD_QTY, -- 월평균 생산량 (생산가능일 30일)
                        QTY_UOM
                FROM    V_ERP_PO_MES PO,
                        (
                        SELECT  CAL_DATE
                        FROM    CAL_MST
                        WHERE   CAL_DATE BETWEEN TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-4))+1
                                         AND     TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-1))
                        ) CAL,
                        (
                        /*해당 원자재의 생산품(완제품/반제품)*/
                        SELECT  PROD_ITEM_ID,
                                F_GET_ITEM_NAME(PROD_ITEM_ID) ITEM_NAME,
                                PROD_ITEM_TYPE
                        FROM    BOM_MAP
                        WHERE   CONS_ITEM_ID = '$!{item_id}'
                        )IM
                WHERE   PO.START_DTTM   = CAL.CAL_DATE
                AND     PO.ITEM_ID      = IM. PROD_ITEM_ID
                GROUP
                BY      ITEM_ID, QTY_UOM
                )PO, ITEM_MST IM,
                (
                 /*당주생산계획*/
                SELECT  T1.ITEM_ID,     T3.ITEM_NAME,
                        --
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+0, 2),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+1, 3),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+2, 4),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+3, 5),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+4, 6),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+5, 7),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+6, 1),'YYYYMMDD') ,T1.SHIFT_QTY)),0) WEEK_PROD

                        V_LAST_PROC_PRODVER     T2,
                        (
                        /*해당 원자재의 생산품(완제품/반제품)*/
                        SELECT  PROD_ITEM_ID,
                                F_GET_ITEM_NAME(PROD_ITEM_ID) ITEM_NAME,
                                PROD_ITEM_TYPE
                        FROM    BOM_MAP
                        WHERE   CONS_ITEM_ID = '$!{item_id}'
                        AND     PROD_ITEM_TYPE = 'FERT'
                        ) T3,
                        HRCHY                   T5,
                        (
                        SELECT  SC.PLANT_ID,
                                MAX(SC.VERSION)    VERSION
                        FROM    DAILY_SCH_PLAN_SHIFT SC, PLAN_VERSION_LOG PL
                        WHERE   SC.VERSION = PL.VERSION
                        AND     SC.VERSION    LIKE TO_CHAR(TO_DATE((TRUNC(SYSDATE,'D')-5)),'YYYYMMDD')||'%'
                        AND     SC.CAT_ID    = 'PS'
                        GROUP
                        BY      SC.PLANT_ID
                        )                        T4
                WHERE   T1.PLANT_ID = T2.PLANT_ID
                AND     T1.ITEM_ID  = T2.ITEM_ID
                AND     T1.PROC_ID  = T2.PROC_ID
                AND     T1.ITEM_ID  = T3.PROD_ITEM_ID
                AND     T1.CAT_ID    = 'PS'
                AND     T1.PLANT_ID = T4.PLANT_ID
                AND     T1.VERSION  = T4.VERSION
                AND     T1.PLANT_ID = T5.HID
                AND     T5.LVL_TYPE = '공장'
                AND     T5.LVL      = '10'
                GROUP
                BY      T1.ITEM_ID,
                        T3.ITEM_NAME
                UNION ALL
                SELECT  T1.ITEM_ID,     T3.ITEM_NAME,
                        --
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+0, 2),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+1, 3),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+2, 4),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+3, 5),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+4, 6),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+5, 7),'YYYYMMDD') ,T1.SHIFT_QTY)),0)+
                        NVL(SUM(DECODE(T1.PROD_DATES, TO_CHAR(NEXT_DAY(TO_DATE((TRUNC(SYSDATE,'D')-5))+6, 1),'YYYYMMDD') ,T1.SHIFT_QTY)),0) WEEK_PROD

                        V_LAST_PROC_PRODVER     T2,
                        (
                        /*해당 원자재의 생산품(완제품/반제품)*/
                        SELECT  PROD_ITEM_ID,
                                F_GET_ITEM_NAME(PROD_ITEM_ID) ITEM_NAME,
                                PROD_ITEM_TYPE
                        FROM    BOM_MAP
                        WHERE   CONS_ITEM_ID = '$!{item_id}'
                        AND     PROD_ITEM_TYPE = 'HALB'
                        ) T3,
                        HRCHY                   T5,
                        (
                        SELECT  SC.PLANT_ID,
                                MAX(SC.VERSION)    VERSION
                        FROM    DAILY_SCH_PLAN_SHIFT SC, PLAN_VERSION_LOG PL
                        WHERE   SC.VERSION = PL.VERSION
                        AND     SC.VERSION    LIKE TO_CHAR(TO_DATE((TRUNC(SYSDATE,'D')-5)),'YYYYMMDD')||'%'
                        AND     SC.CAT_ID    = 'SS'
                        GROUP
                        BY      SC.PLANT_ID        
                        )                        T4
                WHERE   T1.PLANT_ID = T2.PLANT_ID
                AND     T1.ITEM_ID  = T2.ITEM_ID
                AND     T1.PROC_ID  = T2.PROC_ID
                AND     T1.ITEM_ID  = T3.PROD_ITEM_ID
                AND     T1.CAT_ID    = 'SS'
                AND     T1.PLANT_ID = T4.PLANT_ID
                AND     T1.VERSION  = T4.VERSION
                AND     T1.PLANT_ID = T5.HID
                AND     T5.LVL_TYPE    = '공장'
                AND     T5.LVL         = '10'
                GROUP
                BY      T1.ITEM_ID,
                        T3.ITEM_NAME                
                )PP
        WHERE   ST.ITEM_ID = PO.ITEM_ID(+)
        AND     ST.ITEM_ID = PP.ITEM_ID(+)
        AND     ST.ITEM_ID = IM.ITEM_ID
        AND     ST.QTY != 0 -- 재고가 있는 대상남 표시
        ORDER
        BY      PROD_ITEM_TYPE, ST.ITEM_NAME		
	</query>		

	<!-- DW 2 pop_up PR_PO간격  pop_up -->
	<query id="op_02010_Long_Term_Planning_list_PR_PO_term_pop_up">
		/* 최근 2년간  PR 주기 분석  pop_up */
		SELECT  ITEM_ID,
		        ITEM_NAME,
		        TO_CHAR(TO_DATE(PR일자),'YYYY-MM-DD') PR일자,
		        ABS(TO_DATE(NVL(PR일자,TO_CHAR(TO_DATE(PO일자),'yyyymmdd')))-TRUNC(SYSDATE)) "PR간격",
		        SUM(DECODE(PR수량, 0 , PO수량, PR수량)) "PR수량",
		        TO_CHAR(TO_DATE(PO일자),'YYYY-MM-DD') PO일자,
		        ABS(TO_DATE(PO일자)-TRUNC(SYSDATE)) "PO간격",
		        SUM(PO수량) PO수량,
		        --미선적량,
		        --입항일,
		        TO_CHAR(TO_DATE(LFDAT,'YYYY-MM-DD'),'YYYY-MM-DD')	LFDAT,	--입고요청일,	SCM팀 박경열 부장님 요청 2013-07-05 추가
		        --TO_CHAR(TO_DATE(통관일),'YYYY-MM-DD')  입고일,
		        TO_CHAR(TO_DATE(입고일),'YYYY-MM-DD')  입고일,		--SCM팀 박경열 부장님 요청 2013-07-05 추가
		        ABS(TO_DATE(통관일)-TRUNC(SYSDATE)) "입고간격",
		        SUM(선적량) "입고량",
		        STATUS,
		        ABS(NVL(TO_DATE(PR일자),TO_DATE(PO일자)) - TO_DATE(PO일자)) "PR-PO",
		        ABS(TO_DATE(PO일자) - TO_DATE(통관일)) "PO-입고",
		        ABS(NVL(TO_DATE(PR일자),TO_DATE(PO일자))- TO_DATE(통관일)) "총소요"
		FROM    (
		        -- DW 2  수입진행 내역 조회
		        -- PR없이 구매오더로 진행된 것.        
		        SELECT  K1.MATNR        ITEM_ID,
		                F_GET_ITEM_NAME('$!{item_id}')    ITEM_NAME,
		                K1.FRGDT    "PR일자",
		                K1.MENGE    "PR수량",
		                K1.BEDAT    "PO일자",
		                K1.BSMNG    "PO수량",
		                K2.MENGE - NVL(K3.CUM_BLMENGE,0)    "미선적량",
		                NVL(K3.BLMENGE,0)                   "선적량",
		                CASE
		                    WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
		                        TO_CHAR(
		                            CASE
		                                WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
		                                    TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0)
		                                ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
		                            END + NVL(LC_TO_PORT,0),'YYYYMMDD'
		                            )
		                    ELSE NVL(K3.ZFETA,K3.ZFRETA)
		                END    "입항일",
		                CASE
		                    WHEN K3.ZFIDSDT IS NULL THEN
		                        TO_CHAR(
		                            CASE
		                                WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
		                                    CASE
		                                        WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
		                                            TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0)
		                                        ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
		                                    END + NVL(LC_TO_PORT,0)
		                                ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
		                            END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
		                            )
		                    ELSE K3.ZFIDSDT
		                END    "통관일",
				------------------입고일 추가------------------
                		CASE
							WHEN K3.BUDAT IS NULL THEN
								TO_CHAR(
									CASE
										WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
												CASE
													WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
															CASE
																WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
																ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
															END	+ NVL(PO_TO_LC,0)
													ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
												END + NVL(LC_TO_PORT,0)
										ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
									END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
									)
							ELSE K3.BUDAT
						END	"입고일", --	입고일             
                ------------------입고일 추가------------------		                
		                K1.LFDAT,    --    입고요청일
 				----------------------------------------
		                CASE
		                    WHEN
		                        K1.LFDAT  >= TRUNC(SYSDATE)                        
		                    THEN '1'
		                    ELSE '0'
		                END DATE_FLAG,
		        ----------------------------------------		                
		                CASE
		                    WHEN K3.BUDAT IS NULL THEN
		                        CASE
		                            WHEN K3.ZFIDSDT IS NULL THEN
		                                    CASE
		                                        WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
		                                            CASE
		                                                WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 'BL발행전'
		                                                ELSE '입항전'
		                                            END
		                                        ELSE '통관전'
		                                    END
		                            ELSE '통관완료'
		                        END
		                    ELSE '입고완료'
		                END    STATUS    --    진행상태,
		        FROM    (
		                /* PO정보 */
		                SELECT  T1.WERKS,
		                        T1.MATNR,
		                        NULL    LFDAT,    --    품목납품일
		                        0        MENGE, --    구매요청수??                        NULL     MEINS,    --    구매요청단위
		                        T2.BSTME,    
		                        NULL    FRGDT,    --    구매 요청 릴리스일
		                        T1.BANFN,    --    구매 요청 번호
		                        T1.BNFPO,    --    구매 요청 품목 번호
		                        T1.EBELN,    --    구매오더번호
		                        T1.EBELP,    --    구매 오더 품목 번호,
		                        T1.AEDAT    BEDAT,    --    구매 오더일
		                        CASE 
		                            WHEN T2.BSTME    = ' ' OR T2.BSTME IS NULL THEN -- MARA에 발주단위가 존재하지 않으면
		                                T1.MENGE
		                            ELSE
		                                F_GETCONV_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.MENGE)    
		                        END    BSMNG,    --    이 구매 요청에 대비한 오더 수량
		                        T1.AFNAM    --    요청자이름
		                FROM    SAPEKPO        T1,
		                        SAPMARA        T2
		                #if ( "$!{gubn}" == 'wel' )
		                WHERE     T1.MATNR    = T2.MATNR
		                AND     T1.MATNR    = '$!{item_id}'
		                AND     T1.AEDAT BETWEEN ADD_MONTHS(TRUNC(SYSDATE), -24) AND TRUNC(SYSDATE)
		                AND     T1.BANFN    = ' '    -- 구매요청 없다
		                #else
		                WHERE   T1.ELIKZ    = ' ' -- 납품완료지시자
		                AND     T1.LOEKZ    = ' ' -- 삭제 지시자
		                AND     T1.MATNR    = T2.MATNR
		                AND     T1.MATNR    = '$!{item_id}'
		                AND     T1.AEDAT BETWEEN ADD_MONTHS(TRUNC(SYSDATE), -24) AND TRUNC(SYSDATE)
		                AND     T1.BANFN    = ' '    -- 구매요청 없다
		                #end
		                )    K1,
		                (
		                /* LC정보 */
		                SELECT  I.EBELN,    --    구매 문서 번호
		                        I.EBELP,    --    구매 문서 품목 번호
		                        H.ZFOPNNO,    --    신용장-승인번호
		                        I.MENGE,    --    수입의뢰 수량
		                        I.MEINS,    --    기본 단위
		                        (
		                        /* 개설일자 */
		                        SELECT    DISTINCT
		                                ZFOPNDT--    개설일
		                        FROM    SAPZIMTREQST
		                        WHERE    ZFREQNO = H.ZFREQNO --    수입의뢰 관리번호
		                        AND        ZFAMDNO    =     ( --AMEND SEQ. 
		                                            SELECT    MAX( ZFAMDNO )
		                                            FROM    SAPZIMTREQST
		                                            WHERE    ZFREQNO = H.ZFREQNO
		                                            )
		                        )    ZFOPNDT
		                FROM    SAPZIMTREQHD    H,
		                        SAPZIMTREQIT    I
		                WHERE   H.ZFREQNO     = I.ZFREQNO    --    수입의뢰 관리번호     
		                AND     I.MATNR        = '$!{item_id}'
		                )    K2,
		                (
		                /* B/L 데이타 읽기. */
		                SELECT  K1.EBELN    EBELN,
		                        K1.EBELP    EBELP,
		                        RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))    ORD,
		                        K1.ZFHBLNO ZFHBLNO,
		                        MAX(K1.BLMENGE)    BLMENGE,
		                        MAX(K1.ZFBLDT)    ZFBLDT,
		                        MAX(K1.ZFETA)    ZFETA,
		                        MAX(K1.ZFRETA)    ZFRETA,
		                        MAX(K1.ZFIDSDT)    ZFIDSDT,
		                        MAX(K1.CCMENGE) CCMENGE,
		                        MAX(K1.BUDAT)    BUDAT,
		                        SUM(K2.BLMENGE)    CUM_BLMENGE
		                FROM    (
		                        SELECT    T1.ZFBLNO, T1.ZFSHNO,
		                                T2.EBELN,    --    구매 문서 번호
		                                T2.EBELP,    --    구매 문서 품목 번호
		                                T1.ZFHBLNO,    --     HOUSE BL_NO
		                                T2.BLMENGE,    --     BL수량
		                                T1.ZFBLDT,        --    BL발행일
		                                T1.ZFETA,        --    입항일
		                                T1.ZFRETA,        --    실입항일
		                                (
		                                SELECT    MAX(ZFIDSDT)    --수입신고 수리일(통관일)
		                                FROM    SAPZIMTIDS    T3
		                                WHERE    T3.ZFBLNO    = T1.ZFBLNO    
		                                )    ZFIDSDT,
		                                (
		                                /* 통관수량 */
		                                SELECT    SUM(CCMENGE)
		                                FROM    SAPZIMTIVIT    T4
		                                WHERE    T4.ZFBLNO    = T1.ZFBLNO
		                                AND        T4.ZFBLIT    = T2.ZFBLIT
		                                )    CCMENGE,
		                                (
		                                /* 최근 입고일 */
		                                SELECT    MAX(BUDAT)
		                                FROM    SAPZIMVIVHSTIT    T5
		                                WHERE    T5.ZFBLNO    = T1.ZFBLNO
		                                AND        T5.ZFBLIT    = T2.ZFBLIT
		                                )    BUDAT
		                        FROM    SAPZIMTBL    T1,
		                                SAPZIMTBLIT    T2
		                        WHERE    T1.ZFBLNO    = T2.ZFBLNO
		                        AND        T2.MATNR    = '$!{item_id}'
		                        )    K1,
		                        (
		                        SELECT    T1.ZFBLNO, T1.ZFSHNO,
		                                T2.EBELN,    --    구매 문서 번호
		                                T2.EBELP,    --    구매 문서 품목 번호
		                                T2.BLMENGE    --    BL수량
		                        FROM    SAPZIMTBL    T1,
		                                SAPZIMTBLIT    T2
		                        WHERE    T1.ZFBLNO    = T2.ZFBLNO
		                        AND        T2.MATNR    = '$!{item_id}'
		                        )    K2
		                WHERE   K1.EBELN    = K2.EBELN
		                AND     K1.EBELP    = K2.EBELP
		                AND     K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
		                GROUP
		                BY      K1.EBELN,
		                        K1.EBELP,
		                        K1.ZFHBLNO    
		                )    K3,
		                ITEM_MST    K4
		        WHERE   NVL(TRIM(K1.EBELN),'XX') = K2.EBELN(+)
		        AND     K1.EBELP = K2.EBELP(+)
		        AND     NVL(TRIM(K1.EBELN),'XX') = K3.EBELN(+)
		        AND     K1.EBELP = K3.EBELP(+)
		        AND     K4.ITEM_ID    = '$!{item_id}'
		        AND     K1.EBELN    NOT LIKE '7%'    -- 내부 이고오더
		        UNION ALL
		        -- DW 2  수입진행 내역 조회
		        SELECT  K1.MATNR        ITEM_ID,
		                F_GET_ITEM_NAME('$!{item_id}')    ITEM_NAME,
		                --K1.BANFN,    --    구매요청번호
		                K1.FRGDT    "PR일자",
		                K1.MENGE    "PR수량",
		                --K1.EBELN    "PO번호",
		                --K1.EBELP,    --    PO품목번호
		                CASE
		                    WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_CHAR(TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0),'YYYYMMDD')
		                    ELSE K1.BEDAT
		                END    "PO일자",
		                K1.BSMNG    "PO수량",
		        --        CASE
		        --            WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
		        --                TO_CHAR(
		        --                    CASE
		        --                        WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
		        --                        ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
		        --                    END    + NVL(PO_TO_LC,0),'YYYYMMDD'
		        --                    )
		        --            ELSE K3.ZFBLDT
		        --        END    ZFBLDT,    --    B/L 개설일자
		                K2.MENGE - NVL(K3.CUM_BLMENGE,0)    "미선적량",
		                NVL(K3.BLMENGE,0)                   "선적량",
		                CASE
		                    WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
		                        TO_CHAR(
		                            CASE
		                                WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
		                                        CASE
		                                            WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
		                                            ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
		                                        END    + NVL(PO_TO_LC,0)
		                                ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
		                            END + NVL(LC_TO_PORT,0),'YYYYMMDD'
		                            )
		                    ELSE NVL(K3.ZFETA,K3.ZFRETA)
		                END    "입항일",
		                CASE
		                    WHEN K3.ZFIDSDT IS NULL THEN
		                        TO_CHAR(
		                            CASE
		                                WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
		                                        CASE
		                                            WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
		                                                    CASE
		                                                        WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
		                                                        ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
		                                                    END    + NVL(PO_TO_LC,0)
		                                            ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
		                                        END + NVL(LC_TO_PORT,0)
		                                ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
		                            END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
		                            )
		                    ELSE K3.ZFIDSDT
		                END    "통관일",
		                 ------------------입고일 추가------------------
                		CASE
							WHEN K3.BUDAT IS NULL THEN
								TO_CHAR(
									CASE
										WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
												CASE
													WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
															CASE
																WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
																ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
															END	+ NVL(PO_TO_LC,0)
													ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
												END + NVL(LC_TO_PORT,0)
										ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
									END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
									)
							ELSE K3.BUDAT
						END	"입고일", --	입고일             
                	------------------입고일 추가------------------
		                K1.LFDAT,    --    입고요청일
                      ----------------------------------------
		                CASE
		                    WHEN
		                        K1.LFDAT  >= TRUNC(SYSDATE)                        
		                    THEN '1'
		                    ELSE '0'
		                END DATE_FLAG,
			          ----------------------------------------
		                CASE
		                    WHEN K3.BUDAT IS NULL THEN
		                        CASE
		                            WHEN K3.ZFIDSDT IS NULL THEN
		                                CASE
		                                    WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
		                                            CASE
		                                                WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
		                                                        CASE
		                                                            WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN 'PO발행전'
		                                                            ELSE 'BL발행전'
		                                                        END
		                                                ELSE '입항전'
		                                            END
		                                    ELSE '통관전'
		                                END
		                            ELSE '통관완료'
		                        END
		                    ELSE '입고완료'
		                END    STATUS    --    진행상태
		        FROM    (
		                /* 구매요청, PO정보 */
		                SELECT    T1.WERKS,
		                        T1.MATNR,
		                        T1.LFDAT,    --    품목납품일
		                        CASE 
		                            WHEN T2.BSTME    = ' ' OR T2.BSTME IS NULL THEN --    MARA에 발주단위가 존재하지 않으면 
		                                T1.MENGE
		                            ELSE
		                                F_GETCONV_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.MENGE)    
		                        END    MENGE, --    구매요청수량
		                        T1.MEINS,    --    구매요청단위
		                        T2.BSTME,    --    발주단위
		                        --T1.FRGDT,    --    구매 요청 릴리스일  --구매요청 일과의 GAP 이 발생하여 요청일로 변경 2010-12-02 "박경렬 차장 요청"
		                        T1.BADAT    FRGDT,    --    요청일
		                        T1.BANFN,    --    구매 요청 번호
		                        T1.BNFPO,    --    구매 요청 품목 번호
		                        T1.EBELN,    --    구매오더번호
		                        T1.EBELP,    --    구매 오더 품목 번호,
		                        T1.BEDAT,    --    구매 오더일
		                        CASE 
		                            WHEN T2.BSTME    = ' ' OR T2.BSTME IS NULL THEN --    MARA에 발주단위가 존재하지 않으면
		                                T1.BSMNG
		                            ELSE
		                                F_GETCONV_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.BSMNG)    
		                        END    BSMNG,    --    이 구매 요청에 대비한 오더 수량
		                        T1.AFNAM    --    요청자이름
		                FROM    SAPEBAN        T1,
		                        SAPMARA        T2,
		                        SAPMDBS        T3
		                WHERE   T1.LOEKZ    = ' '
		                AND     T1.MATNR    = T2.MATNR
		                AND     T1.MATNR    = '$!{item_id}'
		                AND     T1.MATNR    = T3.MATNR
		                AND     T1.EBELN    = T3.EBELN
		                AND     T1.EBELP    = T3.EBELP
		                AND     T1.FRGKZ    = '3' --구매요청 릴리즈
		                --AND       T3.ELIKZ    = ' ' -- 납품완료지시자
		                AND     T3.LOEKZ    = ' ' -- 삭제 지시자
		                AND     T1.STATU    = 'B' -- PO진행됨
		                ----------------------------------------
		                AND     T1.BEDAT BETWEEN ADD_MONTHS(TRUNC(SYSDATE), -24) AND TRUNC(SYSDATE)
		                ----------------------------------------
		                UNION    ALL
		                /* 구매요청, PO정보 */
		                SELECT  T1.WERKS,
		                        T1.MATNR,
		                        T1.LFDAT,    --    품목납품일
		                        CASE 
		                            WHEN T2.BSTME    = ' ' OR T2.BSTME IS NULL THEN --    MARA에 발주단위가 존재하지 않으면 
		                                T1.MENGE
		                            ELSE
		                                F_GETCONV_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.MENGE)    
		                        END    MENGE, --    구매요청수량
		                        T1.MEINS,    --    구매요청단위
		                        T2.BSTME,    --    발주단위
		                        --T1.FRGDT,    --    구매 요청 릴리스일  --구매요청 일과의 GAP 이 발생하여 요청일로 변경 2010-12-02 "박경렬 차장 요청"
		                        T1.BADAT    FRGDT,    --    요청일
		                        T1.BANFN,    --    구매 요청 번호
		                        T1.BNFPO,    --    구매 요청 품목 번호
		                        T1.EBELN,    --    구매오더번호
		                        T1.EBELP,    --    구매 오더 품목 번호,
		                        T1.BEDAT,    --    구매 오더일
		                        CASE 
		                            WHEN T2.BSTME    = ' ' OR T2.BSTME IS NULL THEN --    MARA에 발주단위가 존재하지 않으면
		                                T1.BSMNG
		                            ELSE
		                                F_GETCONV_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.BSMNG)    
		                        END    BSMNG,    --    이 구매 요청에 대비한 오더 수량
		                        T1.AFNAM    --    요청자이름
		                FROM    SAPEBAN        T1,
		                        SAPMARA        T2
		                WHERE   T1.LOEKZ    = ' '
		                AND     T1.MATNR    = T2.MATNR
		                AND     T1.MATNR    = '$!{item_id}'
		                AND     T1.FRGKZ    = '3' -- 구매요청 릴리즈
		                AND     T1.STATU    = 'N' -- PO진행안됨
		                )    K1,
		                (
		                /* LC정보 */
		                SELECT  I.EBELN,    --    구매 문서 번호
		                        I.EBELP,    --    구매 문서 품목 번호
		                        H.ZFOPNNO,    --    신용장-승인번호
		                        I.MENGE,    --    수입의뢰 수량
		                        I.MEINS,    --    기본 단위
		                        (
		                        /* 개설일자 */
		                        SELECT    DISTINCT
		                                ZFOPNDT--    개설일
		                        FROM    SAPZIMTREQST
		                        WHERE    ZFREQNO = H.ZFREQNO --    수입의뢰 관리번호
		                        AND        ZFAMDNO    =     ( --AMEND SEQ. 
		                                            SELECT    MAX( ZFAMDNO )
		                                            FROM    SAPZIMTREQST
		                                            WHERE    ZFREQNO = H.ZFREQNO
		                                            )
		                        )    ZFOPNDT
		                FROM    SAPZIMTREQHD    H,
		                        SAPZIMTREQIT    I
		                WHERE   H.ZFREQNO     = I.ZFREQNO    --    수입의뢰 관리번호     
		                AND     I.MATNR        = '$!{item_id}'
		                )    K2,
		                (
		                /* B/L 데이타 읽기. */
		                SELECT  K1.EBELN    EBELN,
		                        K1.EBELP    EBELP,
		                        RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))    ORD,
		                        K1.ZFHBLNO ZFHBLNO,
		                        MAX(K1.BLMENGE)    BLMENGE,
		                        MAX(K1.ZFBLDT)    ZFBLDT,
		                        MAX(K1.ZFETA)    ZFETA,
		                        MAX(K1.ZFRETA)    ZFRETA,
		                        MAX(K1.ZFIDSDT)    ZFIDSDT,
		                        MAX(K1.CCMENGE) CCMENGE,
		                        MAX(K1.BUDAT)    BUDAT,
		                        SUM(K2.BLMENGE)    CUM_BLMENGE
		                FROM    (
		                        SELECT  T1.ZFBLNO, T1.ZFSHNO,
		                                T2.EBELN,    --    구매 문서 번호
		                                T2.EBELP,    --    구매 문서 품목 번호
		                                T1.ZFHBLNO,    --    HOUSE BL_NO
		                                T2.BLMENGE,    --    BL수량
		                                T1.ZFBLDT,    --    BL발행일
		                                T1.ZFETA,        --    입항일
		                                T1.ZFRETA,        --    실입항일
		                                (
		                                SELECT    MAX(ZFIDSDT)    --수입신고 수리일(통관일)
		                                FROM    SAPZIMTIDS    T3
		                                WHERE    T3.ZFBLNO    = T1.ZFBLNO    
		                                )    ZFIDSDT,
		                                (
		                                /* 통관수량 */
		                                SELECT    SUM(CCMENGE)
		                                FROM    SAPZIMTIVIT    T4
		                                WHERE    T4.ZFBLNO    = T1.ZFBLNO
		                                AND        T4.ZFBLIT    = T2.ZFBLIT
		                                )    CCMENGE,
		                                (
		                                /* 최근 입고일 */
		                                SELECT    MAX(BUDAT)
		                                FROM    SAPZIMVIVHSTIT    T5
		                                WHERE    T5.ZFBLNO    = T1.ZFBLNO
		                                AND        T5.ZFBLIT    = T2.ZFBLIT
		                                )    BUDAT
		                        FROM    SAPZIMTBL    T1,
		                                SAPZIMTBLIT    T2
		                        WHERE    T1.ZFBLNO    = T2.ZFBLNO
		                        AND        T2.MATNR    = '$!{item_id}'
		                        )    K1,
		                        (
		                        SELECT    T1.ZFBLNO, T1.ZFSHNO,
		                                T2.EBELN,    --    구매 문서 번호
		                                T2.EBELP,    --    구매 문서 품목 번호
		                                T2.BLMENGE    --    BL수량
		                        FROM    SAPZIMTBL    T1,
		                                SAPZIMTBLIT    T2
		                        WHERE    T1.ZFBLNO    = T2.ZFBLNO
		                        AND        T2.MATNR    = '$!{item_id}'
		                        )    K2
		                WHERE   K1.EBELN    = K2.EBELN
		                AND     K1.EBELP    = K2.EBELP
		                AND     K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
		                GROUP
		                BY      K1.EBELN,
		                        K1.EBELP,
		                        K1.ZFHBLNO    
		                )            K3,
		                ITEM_MST    K4
		        WHERE   NVL(TRIM(K1.EBELN),'XX') = K2.EBELN(+)
		        AND     K1.EBELP = K2.EBELP(+)
		        AND     NVL(TRIM(K1.EBELN),'XX') = K3.EBELN(+)
		        AND     K1.EBELP = K3.EBELP(+)
		        AND     K4.ITEM_ID    = '$!{item_id}'
		        AND     K1.EBELN    NOT LIKE '7%'    -- 내부 이고오더
		        )
        GROUP	BY	ITEM_ID,
	                ITEM_NAME,
	                PR일자,
	                PO일자,
	                통관일,
	                STATUS,
	                LFDAT,	
	                입고일		        
       -- UNION ALL
       -- SELECT  '' "ITEM_ID",
       --         '' "ITEM_NAME",
       --         NULL "PR일자",
       --         NULL "PR간격",
       --         NULL "PR수량",
       --         NULL "PO일자",
       --         NULL "PO간격",
       --         NULL "PO수량",
       --         NULL "입고요청일",
       --         NULL "입고일",
       --         NULL "입고간격",
       --         NULL "입고량",
       --         NULL "STATUS",
       --         NULL "PR-PO",
       --         NULL "PO-입고",
       --         NULL "총소요"
       -- FROM DUAL
        ORDER BY PO일자, PR일자
	</query>		
	

	<!-- 상세 진행 데이터-->
	<query id="op_02010_Long_Term_Planning_list_dw2">
		-- DW 2  수입진행 내역 조회
		SELECT	*
		FROM	(
				SELECT	K1.MATNR		ITEM_ID,
						F_GET_ITEM_NAME('$!{item_id}')	ITEM_NAME,
						K1.BANFN,	--	구매 요청 번호
						K1.FRGDT,	--	구매 요청 릴리스일
						K1.MENGE,	--	구매요청수량
						K1.EBELN,	--	구매오더번호
						K1.EBELP,	--	구매 오더 품목 번호
						CASE
							WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_CHAR(TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0),'YYYYMMDD')
							ELSE K1.BEDAT
						END	BEDAT,	--	구매 오더일
						K1.BSMNG,	--	구매오더수량
						K3.ZFBLDT,	--	B/L 개설일자
						K3.ZFBLNO,
						K2.MENGE - NVL(K3.CUM_BLMENGE,0)	REMN_SHIP,	-- 미선적량
						NVL(K3.BLMENGE,0)					BLMENGE,	--	선적량
						K3.ZFHBLNO,	--	HOUSE BL_NO
						NVL(K3.ZFETA,K3.ZFRETA),		-- 입항일/실입항일
						K3.ZFIDSDT,	--	통관일
				--		CASE
				--			WHEN K3.BUDAT IS NULL THEN
				--				TO_CHAR(
				--					CASE
				--						WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
				--								CASE
				--									WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
				--											CASE
				--												WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
				--												ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
				--											END	+ NVL(PO_TO_LC,0)
				--									ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
				--								END + NVL(LC_TO_PORT,0)
				--						ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
				--					END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
				--					)
				--			ELSE K3.ZFIDSDT
				--		END	BUDAT, --	입고일
						K1.LFDAT,	--	입고요청일						
						K3.BUDAT BUDAT_REL,	--  실입고일						
				                ----------------------------------------
				                CASE
				                    WHEN
				                        K1.LFDAT  >= TRUNC(SYSDATE)                        
				                    THEN '1'
				                    ELSE '0'
				                END DATE_FLAG,
				                ----------------------------------------			
						CASE
							WHEN K3.BUDAT IS NULL THEN
								CASE
									WHEN K3.ZFIDSDT IS NULL THEN
										CASE
											WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
													CASE
														WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
																CASE
																	WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN 'PO 발행예정'
																	ELSE '선적예정'
																END
														ELSE '입항예정'
													END
											ELSE '통관예정'
										END
									ELSE '통관진행'
								END
							ELSE '통관완료'
						END	STATUS	--	진행상태
				FROM	(
						/* 구매요청, PO정보 */
						SELECT	T1.WERKS,
								T1.MATNR,
								T1.LFDAT,	--	품목납품일
								CASE 
									WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
										T1.MENGE
									ELSE
										f_getconv_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.MENGE)	
								END	MENGE, --	구매요청수량
								T1.MEINS,	--	구매요청단위
								T2.BSTME,	--	발주단위
								--T1.FRGDT,	--	구매 요청 릴리스일  --구매요청 일과의 gap 이 발생하여 요청일로 변경 2010-12-02 "박경렬 차장 요청"
								T1.BADAT	FRGDT,    --    요청일
								T1.BANFN,	--	구매 요청 번호
								T1.BNFPO,	--	구매 요청 품목 번호
								T1.EBELN,	--	구매오더번호
								T1.EBELP,	--	구매 오더 품목 번호,
								T1.BEDAT,	--	구매 오더일
								CASE 
									WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
										T1.BSMNG
									ELSE
										f_getconv_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.BSMNG)	
								END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
								T1.AFNAM	--	요청자이름
						FROM	SAPEBAN		T1,
								SAPMARA		T2,
								SAPMDBS		T3
						WHERE	T1.LOEKZ	= ' '
						AND		T1.MATNR	= T2.MATNR
						AND		T1.MATNR	= '$!{item_id}'
						AND		T1.MATNR	= T3.MATNR
						AND		T1.EBELN	= T3.EBELN
						AND		T1.EBELP	= T3.EBELP
						AND		T1.FRGKZ	= '3' --구매요청 릴리즈
						AND		T3.ELIKZ	= ' ' -- 납품완료지시자
						AND		T3.LOEKZ	= ' ' -- 삭제 지시자
						AND		T1.STATU	= 'B' -- PO진행됨
						UNION	ALL
						/* 구매요청, PO정보 */
						SELECT	T1.WERKS,
								T1.MATNR,
								T1.LFDAT,	--	품목납품일
								CASE 
									WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
										T1.MENGE
									ELSE
										f_getconv_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.MENGE)	
								END	MENGE, --	구매요청수량
								T1.MEINS,	--	구매요청단위
								T2.BSTME,	--	발주단위
								--T1.FRGDT,	--	구매 요청 릴리스일  --구매요청 일과의 gap 이 발생하여 요청일로 변경 2010-12-02 "박경렬 차장 요청"
								T1.BADAT	FRGDT,    --    요청일
								T1.BANFN,	--	구매 요청 번호
								T1.BNFPO,	--	구매 요청 품목 번호
								T1.EBELN,	--	구매오더번호
								T1.EBELP,	--	구매 오더 품목 번호,
								T1.BEDAT,	--	구매 오더일
								CASE 
									WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
										T1.BSMNG
									ELSE
										f_getconv_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.BSMNG)	
								END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
								T1.AFNAM	--	요청자이름
						FROM	SAPEBAN		T1,
								SAPMARA		T2
						WHERE	T1.LOEKZ	= ' '
						AND		T1.MATNR	= T2.MATNR
						AND		T1.MATNR	= '$!{item_id}'
						AND		T1.FRGKZ	= '3' -- 구매요청 릴리즈
						AND		T1.STATU	= 'N' -- PO진행안됨
						)	K1,
						(
						/* LC정보 */
						SELECT	I.EBELN,	--	구매 문서 번호
								I.EBELP,	--	구매 문서 품목 번호
								H.ZFOPNNO,	--	신용장-승인번호
								I.MENGE,	--	수입의뢰 수량
								I.MEINS,	--	기본 단위
								(
								/* 개설일자 */
								SELECT	DISTINCT
										ZFOPNDT--	개설일
								FROM	SAPZIMTREQST
								WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
								AND		ZFAMDNO	= 	( --Amend Seq. 
													SELECT	MAX( ZFAMDNO )
													FROM	SAPZIMTREQST
													WHERE	ZFREQNO = H.ZFREQNO
													)
								)	ZFOPNDT
						FROM	SAPZIMTREQHD	H,
								SAPZIMTREQIT	I
						WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
						AND		I.MATNR		= '$!{item_id}'
						)	K2,
						(
						/* B/L 데이타 읽기. */
						SELECT	K1.EBELN	EBELN,
								K1.EBELP	EBELP,
								RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
								K1.ZFHBLNO ZFHBLNO,
								K1.ZFBLNO,
								MAX(K1.BLMENGE)	BLMENGE,
								MAX(K1.ZFBLDT)	ZFBLDT,
								MAX(K1.ZFETA)	ZFETA,
								MAX(K1.ZFRETA)	ZFRETA,
								MAX(K1.ZFIDSDT)	ZFIDSDT,
								MAX(K1.CCMENGE) CCMENGE,
								MAX(K1.BUDAT)	BUDAT,
								SUM(K2.BLMENGE)	CUM_BLMENGE
						FROM	(
								SELECT	T1.ZFBLNO, T1.ZFSHNO,
										T2.EBELN,	--	구매 문서 번호
										T2.EBELP,	--	구매 문서 품목 번호
										T1.ZFHBLNO,	--	HOUSE BL_NO
										T2.BLMENGE,	--	BL수량
										T1.ZFBLDT,	--	BL발행일
										T1.ZFETA,		--	입항일
										T1.ZFRETA,		--	실입항일
										(
										SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
										FROM	SAPZIMTIDS	T3
										WHERE	T3.ZFBLNO	= T1.ZFBLNO	
										)	ZFIDSDT,
										(
										/* 통관수량 */
										SELECT	SUM(CCMENGE)
										FROM	SAPZIMTIVIT	T4
										WHERE	T4.ZFBLNO	= T1.ZFBLNO
										AND		T4.ZFBLIT	= T2.ZFBLIT
										)	CCMENGE,
										(
										/* 최근 입고일 */
										SELECT	MAX(BUDAT)
										FROM	SAPZIMVIVHSTIT	T5
										WHERE	T5.ZFBLNO	= T1.ZFBLNO
										AND		T5.ZFBLIT	= T2.ZFBLIT
										)	BUDAT
								FROM	SAPZIMTBL	T1,
										SAPZIMTBLIT	T2
								WHERE	T1.ZFBLNO	= T2.ZFBLNO
								AND		T2.MATNR	= '$!{item_id}'		
								)	K1,
								(
								SELECT	T1.ZFBLNO, T1.ZFSHNO,
										T2.EBELN,	--	구매 문서 번호
										T2.EBELP,	--	구매 문서 품목 번호
										T2.BLMENGE	--	BL수량
								FROM	SAPZIMTBL	T1,
										SAPZIMTBLIT	T2
								WHERE	T1.ZFBLNO	= T2.ZFBLNO
								AND		T2.MATNR	= '$!{item_id}'	
								)	K2
						WHERE	K1.EBELN	= K2.EBELN
						AND		K1.EBELP	= K2.EBELP
						AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
						GROUP
						BY		K1.EBELN,
								K1.EBELP,
								K1.ZFHBLNO,
								K1.ZFBLNO	
						)			K3,
						ITEM_MST	K4
				WHERE	NVL(TRIM(K1.EBELN),'XX') = K2.EBELN(+)
				AND		K1.EBELP = K2.EBELP(+)
				AND		NVL(TRIM(K1.EBELN),'XX') = K3.EBELN(+)
				AND		K1.EBELP = K3.EBELP(+)
				AND		K4.ITEM_ID	= '$!{item_id}'	
				AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
				--AND		K1.LFDAT > TO_CHAR(SYSDATE,'YYYYMMDD')					--금일 이후의 진행재고만 나오게 수정 2014-12-05
				UNION	ALL
				-- PR없이 구매오더로 진행된 것.		
				SELECT	K1.MATNR		ITEM_ID,
						f_get_item_name('$!{item_id}')	ITEM_NAME,
						K1.BANFN,	--	구매 요청 번호
						K1.FRGDT,	--	구매 요청 릴리스일
						K1.MENGE,	--	구매요청수량
						K1.EBELN,	--	구매오더번호
						K1.EBELP,	--	구매 오더 품목 번호
						K1.BEDAT,	--	구매 오더일
						K1.BSMNG,	--	구매오더수량
						K3.ZFBLDT,	--	B/L 개설일자
						K3.ZFBLNO,
						K2.MENGE - NVL(K3.CUM_BLMENGE,0)	REMN_SHIP,	-- 미선적량
						NVL(K3.BLMENGE,0)					BLMENGE,	--	선적량
						K3.ZFHBLNO,	-- HOUSE BL_NO
						NVL(K3.ZFETA,K3.ZFRETA),		-- 입항일/실입항일
						K3.ZFIDSDT,	--	통관일						
						K1.LFDAT,	--	입고요청일									
						K3.BUDAT BUDAT_REL,	--  실입고일				
				                ----------------------------------------
				                CASE
				                    WHEN
				                        K1.LFDAT  >= TRUNC(SYSDATE)                        
				                    THEN '1'
				                    ELSE '0'
				                END DATE_FLAG,
				                ----------------------------------------			
						CASE
							WHEN K3.BUDAT IS NULL THEN
								CASE
									WHEN K3.ZFIDSDT IS NULL THEN
											CASE
												WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
													CASE
														WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN '선적예정'
														ELSE '입항예정'
													END
												ELSE '통관예정'
											END
									ELSE '통관진행'
								END
							ELSE '통관완료'
						END	STATUS	--	진행상태,
				FROM	(
						/* PO정보 */
						SELECT	T1.WERKS,
								T1.MATNR,
								NULL	LFDAT,	--	품목납품일
								0		MENGE, --	구매요청수량
								NULL 	MEINS,	--	구매요청단위
								T2.BSTME,	
								NULL	FRGDT,	--	구매 요청 릴리스일
								T1.BANFN,	--	구매 요청 번호
								T1.BNFPO,	--	구매 요청 품목 번호
								T1.EBELN,	--	구매오더번호
								T1.EBELP,	--	구매 오더 품목 번호,
								T1.AEDAT	BEDAT,	--	구매 오더일
								CASE 
									WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN -- MARA에 발주단위가 존재하지 않으면
										T1.MENGE
									ELSE
										f_getconv_UOM(T1.MATNR, T1.MEINS,T2.BSTME,T1.MENGE)	
								END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
								T1.AFNAM	--	요청자이름
						FROM	SAPEKPO		T1,
								SAPMARA		T2
						WHERE	T1.ELIKZ	= ' ' -- 납품완료지시자
						AND		T1.LOEKZ	= ' ' -- 삭제 지시자
						AND		T1.MATNR	= T2.MATNR
						AND		T1.MATNR	= '$!{item_id}'
						AND		T1.BANFN	= ' '	-- 구매요청 없다
						)	K1,
						(
						/* LC정보 */
						SELECT	I.EBELN,	--	구매 문서 번호
								I.EBELP,	--	구매 문서 품목 번호
								H.ZFOPNNO,	--	신용장-승인번호
								I.MENGE,	--	수입의뢰 수량
								I.MEINS,	--	기본 단위
								(
								/* 개설일자 */
								SELECT	DISTINCT
										ZFOPNDT--	개설일
								FROM	SAPZIMTREQST
								WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
								AND		ZFAMDNO	= 	( --Amend Seq. 
													SELECT	MAX( ZFAMDNO )
													FROM	SAPZIMTREQST
													WHERE	ZFREQNO = H.ZFREQNO
													)
								)	ZFOPNDT
						FROM	SAPZIMTREQHD	H,
								SAPZIMTREQIT	I
						WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
						AND		I.MATNR		= '$!{item_id}'
						)	K2,
						(
						/* B/L 데이타 읽기. */
						SELECT	K1.EBELN	EBELN,
								K1.EBELP	EBELP,
								RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
								K1.ZFHBLNO ZFHBLNO,
								K1.ZFBLNO,
								MAX(K1.BLMENGE)	BLMENGE,
								MAX(K1.ZFBLDT)	ZFBLDT,
								MAX(K1.ZFETA)	ZFETA,
								MAX(K1.ZFRETA)	ZFRETA,
								MAX(K1.ZFIDSDT)	ZFIDSDT,
								MAX(K1.CCMENGE) CCMENGE,
								MAX(K1.BUDAT)	BUDAT,
								SUM(K2.BLMENGE)	CUM_BLMENGE
						FROM	(
								SELECT	T1.ZFBLNO, T1.ZFSHNO,
										T2.EBELN,	--	구매 문서 번호
										T2.EBELP,	--	구매 문서 품목 번호
										T1.ZFHBLNO,	-- 	HOUSE BL_NO
										T2.BLMENGE,	-- 	BL수량
										T1.ZFBLDT,		--	BL발행일
										T1.ZFETA,		--	입항일
										T1.ZFRETA,		--	실입항일
										(
										SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
										FROM	SAPZIMTIDS	T3
										WHERE	T3.ZFBLNO	= T1.ZFBLNO	
										)	ZFIDSDT,
										(
										/* 통관수량 */
										SELECT	SUM(CCMENGE)
										FROM	SAPZIMTIVIT	T4
										WHERE	T4.ZFBLNO	= T1.ZFBLNO
										AND		T4.ZFBLIT	= T2.ZFBLIT
										)	CCMENGE,
										(
										/* 최근 입고일 */
										SELECT	MAX(BUDAT)
										FROM	SAPZIMVIVHSTIT	T5
										WHERE	T5.ZFBLNO	= T1.ZFBLNO
										AND		T5.ZFBLIT	= T2.ZFBLIT
										)	BUDAT
								FROM	SAPZIMTBL	T1,
										SAPZIMTBLIT	T2
								WHERE	T1.ZFBLNO	= T2.ZFBLNO
								AND		T2.MATNR	= '$!{item_id}'		
								)	K1,
								(
								SELECT	T1.ZFBLNO, T1.ZFSHNO,
										T2.EBELN,	--	구매 문서 번호
										T2.EBELP,	--	구매 문서 품목 번호
										T2.BLMENGE	--	BL수량
								FROM	SAPZIMTBL	T1,
										SAPZIMTBLIT	T2
								WHERE	T1.ZFBLNO	= T2.ZFBLNO
								AND		T2.MATNR	= '$!{item_id}'	
								)	K2
						WHERE	K1.EBELN	= K2.EBELN
						AND		K1.EBELP	= K2.EBELP
						AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
						GROUP
						BY		K1.EBELN,
								K1.EBELP,
								K1.ZFHBLNO,
								K1.ZFBLNO	
						)	K3,
						ITEM_MST	K4
				WHERE	NVL(TRIM(K1.EBELN),'XX') = K2.EBELN(+)
				AND		K1.EBELP = K2.EBELP(+)
				AND		NVL(TRIM(K1.EBELN),'XX') = K3.EBELN(+)
				AND		K1.EBELP = K3.EBELP(+)
				AND		K4.ITEM_ID	= '$!{item_id}'	
				AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
				)
		--WHERE (LFDAT > TO_CHAR(TRUNC(SYSDATE,'YY'),'YYYYMMDD') OR LFDAT IS NULL)
		/* 입고요청일이 2014년 이후인 것만 2014-12-11 노효국 부장 요청 */				
		ORDER
		BY      11, 10, 15 ,16 ,17 ,3 ,6 ,7 
	</query>	

	
	<!-- DW 3 구분별 시뮬레이션 헤더-->
	<query id="op_02010_Long_Term_Planning_list_dw3_header">	
		-- DW 3 구분별 시뮬레이션 헤더
	
        SELECT  YYYYMM, -- 해더 내용 
                CASE    
                        WHEN CAL.YYYYMM_2 &lt; TO_CHAR(SYSDATE, 'YYYYMM') 
                        THEN 'MON_P'|| LPAD(TO_NUMBER(NVL(MAX(TO_NUMBER(16-IDX)),00)),2,'0')   --13
                ELSE 'MON_M' || LPAD(TO_NUMBER(NVL(MAX(TO_NUMBER(IDX-16)),00)),2,'0') 
                END GUBN,  -- 해더 이름
                CASE    
                        WHEN (CAL.YYYYMM_2 + 2) &lt; TO_CHAR(SYSDATE, 'YYYYMM') --2 
                        THEN 50  --1
                ELSE 50 
                END WIDTH, -- 해더 길이
                CASE    
                        WHEN (IDX) > MAX(CAL.TP_PLAG)+15  --- 15 : 타임펜스 적용 때?/ 초기값 12 
                        THEN 'true'
                ELSE 'false'
                END EDIT, -- EDIT_FLAG : 수정 가능 영역 표시 : 노란색
                CASE    
                        WHEN (IDX) > 15  --- 15 : 타임펜스 적용 때?/ 초기값 12 
                        THEN 'true'
                ELSE 'false'
                END EDIT -- EDIT_FLAG2 타임팬스 이후만 수정 가능해야 하나 실제 입고나 소요량은 당월 이후 수정 가능해야함
        FROM    (
                SELECT  DISTINCT CAL.YYYY||'-'||CAL.MM "YYYYMM", CAL.YYYYMM "YYYYMM_2",        
                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX,
                        (
                        -- 타입팬스 정보 
                        SELECT    CASE
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 0),'YYYYMM') = IPGO_YYMM THEN 0
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 1),'YYYYMM') = IPGO_YYMM THEN 1
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 2),'YYYYMM') = IPGO_YYMM THEN 2
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 3),'YYYYMM') = IPGO_YYMM THEN 3
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 4),'YYYYMM') = IPGO_YYMM THEN 4
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 5),'YYYYMM') = IPGO_YYMM THEN 5
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 6),'YYYYMM') = IPGO_YYMM THEN 6
                                    ELSE 0
                                END    TP_FLAG
                        FROM    (        
                                SELECT    TO_CHAR(SYSDATE +    LEAD_TIME,'YYYYMM') IPGO_YYMM
                                FROM    (
                                        SELECT    CASE
                                                    WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
                                                        (
                                                        SELECT    MAX(LEAD_TIME)
                                                        FROM    ITEM_DTL
                                                        WHERE    ITEM_ID    = '$!{item_id}'    
                                                        )
                                                    ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
                                                END    LEAD_TIME
                                        FROM    ITEM_MST
                                        WHERE    ITEM_ID     = '$!{item_id}'    
                                        )        
                                )
                        )     TP_PLAG                           
                FROM    CAL_MST CAL
                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-15),'MONTH'),'YYYYMM')  --12 
                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 6)),'YYYYMM')
                GROUP BY   CAL.YYYY||'-'||CAL.MM, CAL.YYYYMM
                ORDER BY 1
                ) CAL
        GROUP BY CAL.YYYYMM, CAL.YYYYMM_2, CAL.IDX
        ORDER BY 1 
	</query>
	
	<!-- DW 3 일자별  header -->
	<query id="op_02010_Long_Term_Planning_list_dw3_daily_header">
	        SELECT  TO_DATE(YYYYMMDD,'YYYY-MM-DD'),
	        		-- YYYYMMDD, -- 해더 내용 
                CASE    
                        WHEN CAL.YYYYMMDD_2 &lt; TO_CHAR(SYSDATE, 'YYYYMMDD') 
                        THEN 'DAY_P'|| LPAD(TO_NUMBER(NVL(MAX(TO_NUMBER(16-IDX)),00)),2,'0')   --13
                ELSE 'DAY_D' || LPAD(TO_NUMBER(NVL(MAX(TO_NUMBER(IDX-16)),00)),2,'0') 
                END GUBN,  -- 해더 이름
                CASE    
                        WHEN (CAL.YYYYMMDD_2 + 2) &lt; TO_CHAR(SYSDATE, 'YYYYMMDD') --2 
                        THEN 89  --1
                ELSE 1 
                END WIDTH, -- 해더 길이
                CASE    
                        WHEN (IDX) > MAX(CAL.TP_PLAG)+15  --- 15 : 타임펜스 적용 때?/ 초기값 12 
                        THEN 'true'
                ELSE 'false'
                END EDIT, -- EDIT_FLAG : 수정 가능 영역 표시 : 노란색
                CASE    
                        WHEN (IDX) > 15  --- 15 : 타임펜스 적용 때?/ 초기값 12 
                        THEN 'true'
                ELSE 'false'
                END EDIT -- EDIT_FLAG2 타임팬스 이후만 수정 가능해야 하나 실제 입고나 소요량은 당월 이후 수정 가능해야함
        FROM    (
                SELECT  YYYYMMDD,
                		CAL.YYYYMMDD "YYYYMMDD_2",
                        RANK() OVER (ORDER BY  CAL.YYYYMMDD) IDX,
                        (
                        -- 타입팬스 정보 
                        SELECT    CASE
                            WHEN TO_CHAR(SYSDATE,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 0
                            WHEN TO_CHAR(SYSDATE+1,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 1
                            WHEN TO_CHAR(SYSDATE+2,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 2
                            WHEN TO_CHAR(SYSDATE+3,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 3
                            WHEN TO_CHAR(SYSDATE+4,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 4
                            WHEN TO_CHAR(SYSDATE+5,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 5
                            WHEN TO_CHAR(SYSDATE+6,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 6
                                    ELSE 0
                                END    TP_FLAG
                        FROM    (        
                                SELECT    TO_CHAR(SYSDATE +    LEAD_TIME,'YYYYMMDD') IPGO_YYYYMMDD
                                FROM    (
                                        SELECT    CASE
                                                    WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
                                                        (
                                                        SELECT    MAX(LEAD_TIME)
                                                        FROM    ITEM_DTL
                                                        WHERE    ITEM_ID    = '$!{item_id}'    
                                                        )
                                                    ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
                                                END    LEAD_TIME
                                        FROM    ITEM_MST
                                        WHERE    ITEM_ID     = '$!{item_id}'    
                                        )        
                                )
                        )     TP_PLAG                           
                FROM    CAL_MST CAL
                WHERE   CAL.YYYYMMDD BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
                GROUP BY   CAL.YYYYMMDD
                ORDER BY 1
                ) CAL
        GROUP BY YYYYMMDD, 
        		CAL.YYYYMMDD_2, 
                CAL.IDX
        ORDER BY 1	
	</query>
	
	<!-- DW 3 구분별 시뮬레이션 -->
	<query id="op_02010_Long_Term_Planning_daily_list_dw3">

		-- 재고량 
		SELECT  RT.ITEM_ID, 
        		F_GET_ITEM_NAME(RT.ITEM_ID) ITEM_NAME, 
				'0' SEL_GUBN, 
                '재고량' SEL_NAME,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-15),  NVL(RT.QTY,0),0))	P_15,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-14),  NVL(RT.QTY,0),0))	P_14,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-13),  NVL(RT.QTY,0),0))	P_13,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-12),  NVL(RT.QTY,0),0))	P_12,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-11),  NVL(RT.QTY,0),0))	P_11,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-10),  NVL(RT.QTY,0),0))	P_10,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-9),   NVL(RT.QTY,0),0))	P_9,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-8),   NVL(RT.QTY,0),0))	P_8,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-7),   NVL(RT.QTY,0),0))	P_7,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-6),   NVL(RT.QTY,0),0))	P_6,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-5),   NVL(RT.QTY,0),0))	P_5,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-4),   NVL(RT.QTY,0),0))	P_4,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-3),   NVL(RT.QTY,0),0))	P_3,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-2),   NVL(RT.QTY,0),0))	P_2,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE-1),   NVL(RT.QTY,0),0))	P_1,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE),     NVL(RT.QTY,0),0))	D,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE+1),   NVL(RT.QTY,0),0))	D_1,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE+2),   NVL(RT.QTY,0),0))	D_2,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE+3),   NVL(RT.QTY,0),0))	D_3,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE+4),   NVL(RT.QTY,0),0))	D_4,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE+5),   NVL(RT.QTY,0),0))	D_5,
                SUM(DECODE(RT.USABLE_DATE,TRUNC(SYSDATE+6),   NVL(RT.QTY,0),0))	D_6,
		        (
		        -- 타입팬스 정보 
		        SELECT	CASE
                            WHEN TO_CHAR(SYSDATE,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 0
                            WHEN TO_CHAR(SYSDATE+1,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 1
                            WHEN TO_CHAR(SYSDATE+2,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 2
                            WHEN TO_CHAR(SYSDATE+3,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 3
                            WHEN TO_CHAR(SYSDATE+4,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 4
                            WHEN TO_CHAR(SYSDATE+5,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 5
                            WHEN TO_CHAR(SYSDATE+6,	'YYYY-MM-DD')  = IPGO_YYYYMMDD THEN 6
		                    ELSE 0
		                END	TP_FLAG
		        FROM    (        
		                SELECT	TO_CHAR(SYSDATE +    LEAD_TIME,'YYYY-MM-DD') IPGO_YYYYMMDD
		                FROM    (
		                        SELECT	CASE
		                                    WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
		                                        (
		                                        SELECT	MAX(LEAD_TIME)
		                                        FROM	ITEM_DTL
		                                        WHERE	ITEM_ID    = '$!{item_id}'   
		                                        )
		                                    ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
		                                END    LEAD_TIME
		                        FROM	ITEM_MST
		                        WHERE	ITEM_ID     = '$!{item_id}'    
		                        )        
		                )
		        )    TP_FLAG
		FROM    REAL_STOCK_TEST	RT,
        		ITEM_MST		IM    
		WHERE	RT.ITEM_ID(+)	=	IM.ITEM_ID
        AND		RT.USABLE_DATE(+) BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
        AND   	IM.ITEM_ID	= '$!{item_id}'
        -- WHERE   ITEM_ID   = '$!{item_id}'  
        -- AND		USABLE_DATE BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
        GROUP	BY	RT.ITEM_ID
		UNION	ALL
        -- 소요량/사용량(1)
		SELECT  IO.ITEM_ID, 
        		F_GET_ITEM_NAME(IO.ITEM_ID) ITEM_NAME, 
				'1'SEL_GUBN, 
                '소요/사용량' SEL_NAME,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-15, 'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_15,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-14, 'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_14,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-13, 'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_13,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-12, 'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_12,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-11, 'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_11,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-10, 'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_10,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-9,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_9,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-8,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_8,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-7,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_7,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-6,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_6,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-5,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_5,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-4,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_4,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-3,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_3,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-2,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_2,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE-1,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	P_1,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE,    'YYYYMMDD'),  NVL(IO.QTY,0),0))	D,  
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE+1,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	D_1,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE+2,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	D_2,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE+3,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	D_3,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE+4,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	D_4,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE+5,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	D_5,
                SUM(DECODE(IO.START_DATE,TO_CHAR(SYSDATE+6,  'YYYYMMDD'),  NVL(IO.QTY,0),0))	D_6,
				0				TP_FLAG 
		FROM    IF_SET_PROD_ORDER	IO,
            	ITEM_MST			IM
		WHERE	IO.ITEM_ID(+)	=	IM.ITEM_ID
        AND   	IO.START_DATE(+) BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
        AND     IO.IDU_FLAG(+)	= 'I'
        AND     IO.SEQ(+) 		= '10'
		AND		IM.ITEM_ID   	= '$!{item_id}' 
		--WHERE   START_DATE BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
        --AND     IDU_FLAG	= 'I'
        --AND     SEQ 		= '10'
		--AND		ITEM_ID   = '$!{item_id}'
		GROUP	BY	IO.ITEM_ID
       	UNION    ALL
		-- 입고량(2) 
        SELECT  EP.ITEM_ID, 
        		F_GET_ITEM_NAME(EP.ITEM_ID) ITEM_NAME,
                '2' SEL_GUBN, 
                '입고량' SEL_NAME,   
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-15, 'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_15,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-14, 'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_14,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-13, 'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_13,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-12, 'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_12,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-11, 'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_11,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-10, 'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_10,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-9,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_9,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-8,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_8,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-7,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_7,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-6,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_6,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-5,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_5,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-4,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_4,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-3,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_3,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-2,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_2,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE-1,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	P_1,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE,    'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE+1,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D_1,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE+2,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D_2,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE+3,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D_3,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE+4,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D_4,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE+5,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D_5,
                SUM(DECODE(EP.LFDAT,TO_CHAR(SYSDATE+6,  'YYYYMMDD'),   NVL(EP.MENGE,0),0))	D_6,
				0				TP_FLAG 
        FROM    ERP_SET_PR	EP,
        		ITEM_MST	IM
        WHERE	EP.ITEM_ID(+)	=	IM.ITEM_ID           
        AND		EP.LFDAT(+)	BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
		AND		IM.ITEM_ID    = '$!{item_id}'
        GROUP	BY	EP.ITEM_ID

	
	</query>
	
	<!-- DW 3 구분별 시뮬레이션 -->
	 <query id="op_02010_Long_Term_Planning_list_dw3">	
		-- DW 3 구분별 시뮬레이션
		-- 재고량 
		 SELECT  ITEM_ID, 
				F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME, 
				'0' SEL_GUBN, 
				'재고량' SEL_NAME,
                0 MON_P15, 
                0 MON_P14, 
                0 MON_P13,
		        0 MON_P12, 
		        0 MON_P11, 
		        0 MON_P10, 
		        0 MON_P09, 
		        0 MON_P08, 
		        0 MON_P07, 
		        0 MON_P06, 
		        0 MON_P05, 
		        0 MON_P04, 
		        0 MON_P03, 
		        0 MON_P02, 
		        0 MON_P01,
		        ROUND(STOCK) MON_M00, 
		        0 MON_M01, 
		        0 MON_M02, 
		        0 MON_M03, 
		        0 MON_M04, 
		        0 MON_M05, 
		        0 MON_M06
		        ,(
		        -- 타입팬스 정보 
		        SELECT    CASE
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 0),'YYYYMM') = IPGO_YYMM THEN 0
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 1),'YYYYMM') = IPGO_YYMM THEN 1
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 2),'YYYYMM') = IPGO_YYMM THEN 2
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 3),'YYYYMM') = IPGO_YYMM THEN 3
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 4),'YYYYMM') = IPGO_YYMM THEN 4
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 5),'YYYYMM') = IPGO_YYMM THEN 5
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 6),'YYYYMM') = IPGO_YYMM THEN 6
		                    ELSE 0
		                END    TP_FLAG
		        FROM    (        
		                SELECT    TO_CHAR(SYSDATE +    LEAD_TIME,'YYYYMM') IPGO_YYMM
		                FROM    (
		                        SELECT    CASE
		                                    WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
		                                        (
		                                        SELECT    MAX(LEAD_TIME)
		                                        FROM    ITEM_DTL
		                                        WHERE    ITEM_ID    = '$!{item_id}'    
		                                        )
		                                    ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
		                                END    LEAD_TIME
		                        FROM    ITEM_MST
		                        WHERE    ITEM_ID     = '$!{item_id}'    
		                        )        
		                )
		        )    TP_FLAG
		FROM	APS_PR_PLAN    
		WHERE	VERSION   = '$!{version}'    	
		AND		ITEM_ID   = '$!{item_id}'    
		UNION    ALL
		-- 소요량/사용량(1), 입고량(2) 
		SELECT  ITEM_ID, 
				F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,  
				SEL_GUBN, 
				DECODE(SEL_GUBN, 1, '소요/사용량', '입고량') SEL_NAME,
				-- 과거
				NVL(MON_P15,0)    MON_P15, 
				NVL(MON_P14,0)    MON_P14, 
				NVL(MON_P13,0)    MON_P13, 
				NVL(MON_P12,0)    MON_P12, 
				NVL(MON_P11,0)    MON_P11, 
				NVL(MON_P10,0)    MON_P10, 
		        NVL(MON_P09,0)    MON_P09, 
		        NVL(MON_P08,0)    MON_P08, 
		        NVL(MON_P07,0)    MON_P07, 
		        NVL(MON_P06,0)    MON_P06, 
		        NVL(MON_P05,0)    MON_P05, 
		        NVL(MON_P04,0)    MON_P04, 
		        NVL(MON_P03,0)    MON_P03, 
		        NVL(MON_P02,0)    MON_P02, 
		        NVL(MON_P01,0)    MON_P01,
				#if ( "$!{sel_dmd}" == 'DMD09' )  -- DMD09 : 사용자
		        -- 당월
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M00,0))    MON_M00, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M01,0))    MON_M01, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M02,0))    MON_M02, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M03,0))    MON_M03, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M04,0))    MON_M04, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M05,0))    MON_M05, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M06,0))    MON_M06
				#else
		        -- 당월  sel_dmd = 'DMD09'
		        NVL(MON_M00,0)    MON_M00, 
		        NVL(MON_M01,0)    MON_M01, 
		        NVL(MON_M02,0)    MON_M02, 
		        NVL(MON_M03,0)    MON_M03, 
		        NVL(MON_M04,0)    MON_M04, 
		        NVL(MON_M05,0)    MON_M05, 
		        NVL(MON_M06,0)    MON_M06
				#end 
		        ,0 TP_FLAG 
		FROM    APS_PR_DW    
		WHERE	VERSION     = '$!{version}'    
		AND		SEL_DMD   = '$!{sel_dmd}'    
		AND		ITEM_ID   = '$!{item_id}'    
		ORDER	BY	3 
		
	</query> 

	<!--  DW 4 월간사용분석 해더-->
	<query id="op_02010_Long_Term_Planning_list_dw4_header">
		-- DW 4 월간사용분석 해더
		SELECT  MAX(DECODE(IDX, 10, YYMM))      "M-3",
		        MAX(DECODE(IDX, 11, YYMM))      "M-2",
		        MAX(DECODE(IDX, 12, YYMM))      "M-1",
		        MAX(DECODE(IDX, 13, YYMM))      "M",
		        MAX(DECODE(IDX, 1,  YYMM))      "LY+0",
		        MAX(DECODE(IDX, 2,  YYMM))      "LY+1",
		        MAX(DECODE(IDX, 3,  YYMM))      "LY+2",
		        MAX(DECODE(IDX, 4,  YYMM))      "LY+3",
		        MAX(DECODE(IDX, 5,  YYMM))      "LY+4",
		        MAX(DECODE(IDX, 6,  YYMM))      "LY+5"
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
		                TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
		                RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
		        FROM    MAT_MOVE MV, 
		                (
		                SELECT DISTINCT YYYYMM
		                FROM    CAL_MST CAL
		                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm') 
		                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
		                ) CAL
		        WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
		        AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
				AND     ITEM_ID(+) = '$!{item_id}'
		        GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
		        )
		GROUP BY ITEM_ID               
	</query>



	<!--  DW 4 월간사용분석 -->
	<query id="op_02010_Long_Term_Planning_list_dw4_except">
		SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
			        ROUND(SUM(DECODE(IDX, 10, USE_QTY)))   "M-3",
			        ROUND(SUM(DECODE(IDX, 11, USE_QTY)))   "M-2",
			        ROUND(SUM(DECODE(IDX, 12, USE_QTY)))   "M-1",
			        ROUND(SUM(DECODE(IDX, 13, USE_QTY)))   "M",
			        ROUND(SUM(DECODE(IDX, 1,  USE_QTY)))   "LY+0",
			        ROUND(SUM(DECODE(IDX, 2,  USE_QTY)))   "LY+1",
			        ROUND(SUM(DECODE(IDX, 3,  USE_QTY)))   "LY+2",
			        ROUND(SUM(DECODE(IDX, 4,  USE_QTY)))   "LY+3",
			        ROUND(SUM(DECODE(IDX, 5,  USE_QTY)))   "LY+4",
			        ROUND(SUM(DECODE(IDX, 6,  USE_QTY)))   "LY+5"    
			FROM	(		
 					SELECT  YYYYMM,ITEM_ID,
                    		MAX(USE_QTY) USE_QTY,
                            RANK() OVER (ORDER BY  YYYYMM) IDX
                    FROM	( 
                     		SELECT DISTINCT YYYYMM,
                     		'$!{item_id}' 	ITEM_ID, 
                            0 				USE_QTY                            
			                FROM    CAL_MST CAL
			                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm') 
			                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
                            UNION ALL
                           	SELECT	MOVE_YYYYMM,
                           			NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
                                    NVL(SUM(MOVE_QTY),0)  USE_QTY
                            FROM 	MAT_MOVE
  							WHERE  	ITYPE	= 'ROH1' --자재 유형별로 변수 바인딩  test
							AND     ITEM_ID = '$!{item_id}'												
							--AND		MOVE_TYPE ='261'
    						AND MOVE_YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm')  AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
    						GROUP BY ITEM_ID,MOVE_YYYYMM	
                    		)
                    GROUP BY YYYYMM, ITEM_ID
      				)
      		GROUP BY ITEM_ID 
	</query>
	
	<query id="op_02010_Long_Term_Planning_list_dw4">
		-- DW 4 월간사용분석
		#if ( "$!{item_id}" != '11000625' )
			SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
			        ROUND(SUM(DECODE(IDX, 10, USE_QTY)))   "M-3",
			        ROUND(SUM(DECODE(IDX, 11, USE_QTY)))   "M-2",
			        ROUND(SUM(DECODE(IDX, 12, USE_QTY)))   "M-1",
			        ROUND(SUM(DECODE(IDX, 13, USE_QTY)))   "M",
			        ROUND(SUM(DECODE(IDX, 1,  USE_QTY)))   "LY+0",
			        ROUND(SUM(DECODE(IDX, 2,  USE_QTY)))   "LY+1",
			        ROUND(SUM(DECODE(IDX, 3,  USE_QTY)))   "LY+2",
			        ROUND(SUM(DECODE(IDX, 4,  USE_QTY)))   "LY+3",
			        ROUND(SUM(DECODE(IDX, 5,  USE_QTY)))   "LY+4",
			        ROUND(SUM(DECODE(IDX, 6,  USE_QTY)))   "LY+5"    
			FROM	(		
 					SELECT  YYYYMM,ITEM_ID,
                    		MAX(USE_QTY) USE_QTY,
                            RANK() OVER (ORDER BY  YYYYMM) IDX
                    FROM	( 
                     		SELECT DISTINCT YYYYMM,
                     		'$!{item_id}' 	ITEM_ID, 
                            0 				USE_QTY                            
			                FROM    CAL_MST CAL
			                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm') 
			                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
                            UNION ALL
                           	SELECT	MOVE_YYYYMM,
                           			NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
                                    NVL(SUM(MOVE_QTY),0)  USE_QTY
                            FROM 	MAT_MOVE
  							WHERE  	ITYPE	= 'ROH1' --자재 유형별로 변수 바인딩  test
							AND     ITEM_ID = '$!{item_id}'												
							AND		MOVE_TYPE ='261'	-- 현장창고 이동유형만 2015-04-15 수정								
    						AND MOVE_YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm')  AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
    						GROUP BY ITEM_ID,MOVE_YYYYMM	
                    		)
                    GROUP BY YYYYMM, ITEM_ID
      				)
      		GROUP BY ITEM_ID      	
		#else
		-- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
			SELECT  '$!{item_id}' ITEM_ID, F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			        ROUND(SUM(M3Q)),
			        ROUND(SUM(M2Q)),
			        ROUND(SUM(M1Q)),
			        ROUND(SUM(M0Q)),
			        ROUND(SUM(LY0Q)),
			        ROUND(SUM(LY1Q)),
			        ROUND(SUM(LY2Q)),
			        ROUND(SUM(LY3Q)),
			        ROUND(SUM(LY4Q)),
			        ROUND(SUM(LY5Q))             
			FROM    (
			        SELECT  '$!{item_id}' ITEM_ID, F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			                SUM(DECODE(IDX, 10, USE_QTY))   "M3Q",
			                MAX(DECODE(IDX, 10, YYMM))      "M3",
			                SUM(DECODE(IDX, 11, USE_QTY))   "M2Q",
			                MAX(DECODE(IDX, 11, YYMM))      "M2",
			                SUM(DECODE(IDX, 12, USE_QTY))   "M1Q",
			                MAX(DECODE(IDX, 12, YYMM))      "M1",
			                SUM(DECODE(IDX, 13, USE_QTY))   "M0Q",
			                MAX(DECODE(IDX, 13, YYMM))      "M0",
			                SUM(DECODE(IDX, 1,  USE_QTY))   "LY0Q",
			                MAX(DECODE(IDX, 1,  YYMM))      "LY0",
			                SUM(DECODE(IDX, 2,  USE_QTY))   "LY1Q",
			                MAX(DECODE(IDX, 2,  YYMM))      "LY1",
			                SUM(DECODE(IDX, 3,  USE_QTY))   "LY2Q",
			                MAX(DECODE(IDX, 3,  YYMM))      "LY2",
			                SUM(DECODE(IDX, 4,  USE_QTY))   "LY3Q",
			                MAX(DECODE(IDX, 4,  YYMM))      "LY3",
			                SUM(DECODE(IDX, 5,  USE_QTY))   "LY4Q",
			                MAX(DECODE(IDX, 5,  YYMM))      "LY4",
			                SUM(DECODE(IDX, 6,  USE_QTY))   "LY5Q",               
			                MAX(DECODE(IDX, 6,  YYMM))      "LY5"      
			        FROM    (
			                SELECT  NVL(ITEM_ID, '11000625') ITEM_ID, 
			                        TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
			                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
			                FROM    MAT_MOVE MV, 
			                        (
			                        SELECT DISTINCT YYYYMM
			                        FROM    CAL_MST CAL
			                        WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm') 
			                                               AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),0)),'yyyymm')
			                        ) CAL
			                WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
			                AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
			                AND     ITEM_ID(+) = '11000625'
			                GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
			                )
			        GROUP BY ITEM_ID
			        UNION ALL
			        SELECT  '$!{item_id}' ITEM_ID, F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			                SUM(DECODE(IDX, 10, USE_QTY))   "M-3",
			                MAX(DECODE(IDX, 10, YYMM))      "M-3",
			                SUM(DECODE(IDX, 11, USE_QTY))   "M-2",
			                MAX(DECODE(IDX, 11, YYMM))      "M-2",
			                SUM(DECODE(IDX, 12, USE_QTY))   "M-1",
			                MAX(DECODE(IDX, 12, YYMM))      "M-1",
			                SUM(DECODE(IDX, 13, USE_QTY))   "M-0",
			                MAX(DECODE(IDX, 13, YYMM))      "M-0",
			                SUM(DECODE(IDX, 1,  USE_QTY))   "LY+0",
			                MAX(DECODE(IDX, 1,  YYMM))      "LY+0",
			                SUM(DECODE(IDX, 2,  USE_QTY))   "LY+1",
			                MAX(DECODE(IDX, 2,  YYMM))      "LY+1",
			                SUM(DECODE(IDX, 3,  USE_QTY))   "LY+2",
			                MAX(DECODE(IDX, 3,  YYMM))      "LY+2",
			                SUM(DECODE(IDX, 4,  USE_QTY))   "LY+3",
			                MAX(DECODE(IDX, 4,  YYMM))      "LY+3",
			                SUM(DECODE(IDX, 5,  USE_QTY))   "LY+4",
			                MAX(DECODE(IDX, 5,  YYMM))      "LY+4",
			                SUM(DECODE(IDX, 6,  USE_QTY))   "LY+5",               
			                MAX(DECODE(IDX, 6,  YYMM))      "LY+5"      
			        FROM    (
			                SELECT  NVL(ITEM_ID, '11001487') ITEM_ID, 
			                        TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
			                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
			                FROM    MAT_MOVE MV, 
			                        (
			                        SELECT DISTINCT YYYYMM
			                        FROM    CAL_MST CAL
			                        WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm') 
			                                               AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-0)),'yyyymm')
			                        ) CAL
			                WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
			                AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
			                AND     ITEM_ID(+) = '11001487'
			                GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
			                )
			        GROUP BY ITEM_ID
			        )
			GROUP BY ITEM_ID        
		#end 
	</query>
	
	<!-- DW4 주간사용분석 해더-->
	<query id="op_02010_Long_Term_Planning_list_dw4_weekly_header">
		-- DW 4 주간사용분석 해더
		SELECT  MAX(DECODE(IDX, 10, CAL_DATE))      "W-9",
		        MAX(DECODE(IDX, 9,  CAL_DATE))      "W-8",
		        MAX(DECODE(IDX, 8,  CAL_DATE))      "W-7",
		        MAX(DECODE(IDX, 7,  CAL_DATE))      "W-6",
		        MAX(DECODE(IDX, 6,  CAL_DATE))      "W-5",
		        MAX(DECODE(IDX, 5,  CAL_DATE))      "W-4",
		        MAX(DECODE(IDX, 4,  CAL_DATE))      "W-3",
		        MAX(DECODE(IDX, 3,  CAL_DATE))      "W-2",
		        MAX(DECODE(IDX, 2,  CAL_DATE))      "W-1",
		        MAX(DECODE(IDX, 1,  CAL_DATE))      "W"
		FROM    (
		        SELECT  NVL(ITEM_ID, '') ITEM_ID, 
		                TO_CHAR(TO_DATE(CAL_DATE),'YY-MM-DD') CAL_DATE,
		                NVL(SUM(MOVE_QTY),0) USE_QTY,
		                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
		        FROM    (
		                SELECT  MV.ITEM_ID,
		                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
		                        SUM(MOVE_QTY) MOVE_QTY
		                FROM    MAT_MOVE MV
		                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
		                AND     MV.ITEM_ID = '$!{item_id}'
		                GROUP
		                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
		                )  MV, 
		                (
		                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
		                FROM    CAL_MST CAL
		                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE) 
		                ) CAL
		        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
		        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
		        ORDER BY 1
		        )
		GROUP BY ITEM_ID
	</query>
	
	<!-- DW4 일자별 사용분석 해더-->
	<query id="op_02010_Long_Term_Planning_list_dw4_daily_header">	
		SELECT  MAX(DECODE(IDX, 13,  YYYYMMDD))		P_3,
		        MAX(DECODE(IDX, 14,  YYYYMMDD))		P_2,
		        MAX(DECODE(IDX, 15,  YYYYMMDD))		P_1,
		        MAX(DECODE(IDX, 16,  YYYYMMDD))		D,
		        MAX(DECODE(IDX,	17,  YYYYMMDD))		D_1,
		        MAX(DECODE(IDX, 18,  YYYYMMDD))		D_2,
		        MAX(DECODE(IDX, 19,  YYYYMMDD))		D_3,
		        MAX(DECODE(IDX, 20,  YYYYMMDD))		D_4,
		        MAX(DECODE(IDX, 21,  YYYYMMDD))		D_5,
		        MAX(DECODE(IDX, 22,  YYYYMMDD))		D_6
				<!-- MAX(DECODE(IDX, 1,  YYYYMMDD))		P_15,
		        MAX(DECODE(IDX, 2,  YYYYMMDD))		P_14,
		        MAX(DECODE(IDX, 3,  YYYYMMDD))		P_13,
		        MAX(DECODE(IDX, 4,  YYYYMMDD))		P_12,
		        MAX(DECODE(IDX, 5,  YYYYMMDD))		P_11,
				MAX(DECODE(IDX, 6,  YYYYMMDD))		P_10,
		        MAX(DECODE(IDX, 7,  YYYYMMDD))		P_9,
		        MAX(DECODE(IDX, 8,  YYYYMMDD))		P_8,
		        MAX(DECODE(IDX, 9,  YYYYMMDD))		P_7,
		        MAX(DECODE(IDX, 10,  YYYYMMDD))		P_6,
		        MAX(DECODE(IDX, 11,  YYYYMMDD))		P_5,
		        MAX(DECODE(IDX, 12,  YYYYMMDD))		P_4, -->
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
						YYYYMMDD ,
		                NVL(SUM(MOVE_QTY),0) USE_QTY,
		                RANK() OVER (ORDER BY  CAL.YYYYMMDD ) IDX
		        FROM    (
		                SELECT  MV.ITEM_ID,
		                        MV.MOVE_DATE MOVE_DATE,
		                        SUM(MOVE_QTY) MOVE_QTY
		                FROM    MAT_MOVE MV
		                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6)
		                AND     MV.ITEM_ID = '$!{item_id}'
		                GROUP
		                BY      MV.ITEM_ID, MV.MOVE_DATE        
		              )  MV, 
		                (
		                SELECT TO_DATE(CAL.YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
		                FROM    CAL_MST CAL
		                WHERE   CAL.YYYYMMDD BETWEEN TRUNC(SYSDATE-15) AND TRUNC(SYSDATE+6) 
		                ) CAL
		        WHERE   CAL.YYYYMMDD = MV.MOVE_DATE(+)
		        GROUP BY ITEM_ID, MOVE_DATE, CAL.YYYYMMDD
		        ORDER BY 1, 2
		        )
		GROUP BY ITEM_ID		
	</query>
	
	

	
	
	<!-- DW4 주간사용분석-->
	<query id="op_02010_Long_Term_Planning_list_dw4_weekly">
		-- DW 4 주간사용분석
		#if ( "$!{item_id}" != '11000625' )
		SELECT  '$!{item_id}', 
				F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
		        ROUND(SUM(DECODE(IDX, 10, USE_QTY)))   "W-9",
		        ROUND(SUM(DECODE(IDX, 9,  USE_QTY)))   "W-8",
		        ROUND(SUM(DECODE(IDX, 8,  USE_QTY)))   "W-7",
		        ROUND(SUM(DECODE(IDX, 7,  USE_QTY)))   "W-6",
		        ROUND(SUM(DECODE(IDX, 6,  USE_QTY)))   "W-5",
		        ROUND(SUM(DECODE(IDX, 5,  USE_QTY)))   "W-4",
		        ROUND(SUM(DECODE(IDX, 4,  USE_QTY)))   "W-3",
		        ROUND(SUM(DECODE(IDX, 3,  USE_QTY)))   "W-2",
		        ROUND(SUM(DECODE(IDX, 2,  USE_QTY)))   "W-1",
		        ROUND(SUM(DECODE(IDX, 1,  USE_QTY)))   "W"               
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
		                MOVE_DATE,
		                NVL(SUM(MOVE_QTY),0) USE_QTY,
		                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
		        FROM    (
		                SELECT  MV.ITEM_ID,
		                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
		                        SUM(MOVE_QTY) MOVE_QTY
		                FROM    MAT_MOVE MV
		                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
		                AND     MV.ITEM_ID = '$!{item_id}'
		                GROUP
		                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
		                )  MV, 
		                (
		                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
		                FROM    CAL_MST CAL
		                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE) 
		                ) CAL
		        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
		        --AND     MV.ITEM_ID = '$!{item_id}'
		        --AND     MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
		        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
		        --ORDER BY 1
		        )
		GROUP BY ITEM_ID
		#else
		-- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
			SELECT  '$!{item_id}' ITEM_ID, F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			        SUM(W9),
			        SUM(W8),
			        SUM(W7),
			        SUM(W6),
			        SUM(W5),
			        SUM(W4),
			        SUM(W3),
			        SUM(W2),
			        SUM(W1),
			        SUM(W)
			FROM    (
					SELECT  '$!{item_id}' ITEM_ID, 
							F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
					        ROUND(SUM(DECODE(IDX, 10, USE_QTY)))   "W9",
					        ROUND(SUM(DECODE(IDX, 9,  USE_QTY)))   "W8",
					        ROUND(SUM(DECODE(IDX, 8,  USE_QTY)))   "W7",
					        ROUND(SUM(DECODE(IDX, 7,  USE_QTY)))   "W6",
					        ROUND(SUM(DECODE(IDX, 6,  USE_QTY)))   "W5",
					        ROUND(SUM(DECODE(IDX, 5,  USE_QTY)))   "W4",
					        ROUND(SUM(DECODE(IDX, 4,  USE_QTY)))   "W3",
					        ROUND(SUM(DECODE(IDX, 3,  USE_QTY)))   "W2",
					        ROUND(SUM(DECODE(IDX, 2,  USE_QTY)))   "W1",
					        ROUND(SUM(DECODE(IDX, 1,  USE_QTY)))   "W"               
					FROM    (
					        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
					                MOVE_DATE,
					                NVL(SUM(MOVE_QTY),0) USE_QTY,
					                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
					        FROM    (
					                SELECT  MV.ITEM_ID,
					                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
					                        SUM(MOVE_QTY) MOVE_QTY
					                FROM    MAT_MOVE MV
					                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
					                AND     MV.ITEM_ID = '$!{item_id}'
					                GROUP
					                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
					                )  MV, 
					                (
					                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
					                FROM    CAL_MST CAL
					                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE) 
					                ) CAL
					        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
					        --AND     MV.ITEM_ID = '$!{item_id}'
					        --AND     MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
					        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
					        --ORDER BY 1
					        )
					GROUP BY ITEM_ID
			        UNION ALL
					SELECT  '$!{item_id}' ITEM_ID, 
							F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
					        ROUND(SUM(DECODE(IDX, 10, USE_QTY)))   "W9",
					        ROUND(SUM(DECODE(IDX, 9,  USE_QTY)))   "W8",
					        ROUND(SUM(DECODE(IDX, 8,  USE_QTY)))   "W7",
					        ROUND(SUM(DECODE(IDX, 7,  USE_QTY)))   "W6",
					        ROUND(SUM(DECODE(IDX, 6,  USE_QTY)))   "W5",
					        ROUND(SUM(DECODE(IDX, 5,  USE_QTY)))   "W4",
					        ROUND(SUM(DECODE(IDX, 4,  USE_QTY)))   "W3",
					        ROUND(SUM(DECODE(IDX, 3,  USE_QTY)))   "W2",
					        ROUND(SUM(DECODE(IDX, 2,  USE_QTY)))   "W1",
					        ROUND(SUM(DECODE(IDX, 1,  USE_QTY)))   "W"               
					FROM    (
					        SELECT  NVL(ITEM_ID, '11001487') ITEM_ID, 
					                MOVE_DATE,
					                NVL(SUM(MOVE_QTY),0) USE_QTY,
					                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
					        FROM    (
					                SELECT  MV.ITEM_ID,
					                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
					                        SUM(MOVE_QTY) MOVE_QTY
					                FROM    MAT_MOVE MV
					                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
					                AND     MV.ITEM_ID = '11001487'
					                GROUP
					                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
					                )  MV, 
					                (
					                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
					                FROM    CAL_MST CAL
					                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE) 
					                ) CAL
					        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
					        --AND     MV.ITEM_ID = '11001487'
					        --AND     MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
					        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
					        --ORDER BY 1
					        )
					GROUP BY ITEM_ID
					)
			GROUP BY ITEM_ID, ITEM_NAME
		#end 		
	</query>	
	

	<!-- DW 5 MIN/MAX/AVG -->
	<query id="op_02010_Long_Term_Planning_list_dw5">
		-- DW 5 MIN MAX AVG 
		SELECT  ITEM_ID, ITEM_NAME,
		        DECODE(A, 1, 'MAX',     2, 'AVG',   3, 'MIN')	"구분",
		        DECODE(A, 1, MAX_QTY,   2, AVG_QTY, 3, MIN_QTY) QTY,
		        DECODE(A, 1, MAX_MM,    2, NULL,    3, MIN_MM)  YYYY_MM
		FROM    (
		        SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
		                ROUND(AVG(USE_QTY),3)       AVG_QTY, 
		                TO_CHAR(TO_DATE(SUM(DECODE(IDX, 1, YYMM))||'01'),'YYYY-MM')   MAX_MM, 
		                SUM(DECODE(IDX, 1, USE_QTY))MAX_QTY,
		                TO_CHAR(TO_DATE(SUM(DECODE(IDX, MAX_IDX, YYMM))||'01'),'YYYY-MM')  MIN_MM, 
		                SUM(DECODE(IDX, MAX_IDX, USE_QTY))MIN_QTY
		        FROM    (
		                SELECT  '$!{item_id}' ITEM_ID, MOVE_YYYYMM YYMM, SUM(MOVE_QTY) USE_QTY, QTY_UOM,
		                        RANK() OVER (ORDER BY  SUM(MOVE_QTY) DESC, MOVE_YYYYMM) IDX
		                FROM    MAT_MOVE
                        WHERE   ITYPE	IN ('ROH1','ROH2')
						#if ( "$!{item_id}" == '11000625' )
						AND     ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
						#else
						AND     ITEM_ID = '$!{item_id}'
						#end 
		                AND     MOVE_YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'yyyymm') 
		                        AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-1)),'yyyymm')
		                GROUP BY MOVE_YYYYMM, QTY_UOM
		                ) RANK,
		                (
		                SELECT  MIN(IDX) MIN_IDX,
		                        MAX(IDX) MAX_IDX
		                FROM    (
		                        SELECT  '$!{item_id}' ITEM_ID, MOVE_YYYYMM YYMM, SUM(MOVE_QTY) USE_QTY, QTY_UOM,
		                                RANK() OVER (ORDER BY  SUM(MOVE_QTY) DESC, MOVE_YYYYMM) IDX
		                        FROM    MAT_MOVE
		                        WHERE   ITYPE	IN ('ROH1','ROH2')
								#if ( "$!{item_id}" == '11000625' )
								AND     ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
								#else
								AND     ITEM_ID = '$!{item_id}'
								#end 
		                        AND     MOVE_YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-12),'MONTH'),'YYYYMM') 
		                                AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-1)),'YYYYMM')
		                        GROUP BY MOVE_YYYYMM, QTY_UOM
		                        )        
		                )IDX
		        GROUP BY ITEM_ID
		        ),
		        (
		        SELECT 1 A
		        FROM DUAL
		        UNION ALL
		        SELECT 2 A
		        FROM DUAL
		        UNION ALL
		        SELECT 3 A
		        FROM DUAL        
		        )        
	</query>


	<!-- DW 6 재조일자별 재고 정보 -->
	<query id="op_02010_Long_Term_Planning_list_dw6">
		-- DW 6 재조일자별 재고 정보
		-- 불가용 수량 (유통기한 경과, 부적합창고) 
		SELECT  MB.MATNR ITEM_ID, F_GET_ITEM_NAME(MB.MATNR) ITEM_NAME, 
		        F_GET_CODE_NAME('PLANT_NAME',MB.WERKS) PLANT_NAME,
		        TO_CHAR(TO_DATE(MH.HSDAT),'YYYY-MM-DD') "제조일자",
                DECODE(MH.VFDAT , '00000000', '99991231', 
                TO_CHAR(TO_DATE(MH.VFDAT),'YYYY-MM-DD')) "유통기한",
                DECODE(MH.VFDAT , '00000000', '99991231', 
                TRUNC(TO_DATE(MH.VFDAT)- SYSDATE)) "잔여유통기한",
		        SUM(MB.CLABS) "사용가능재고"
		        --TRIM(TO_CHAR( SUM(MB.CLABS) ,999999999990.9)) "사용가능재고"
		        , IM.BASE_UOM
		        ,'0' FLAG
		FROM    SAPMCHB MB, SAPMCH1 MH, ITEM_MST IM
		WHERE   MB.MATNR = MH.MATNR
		AND     MB.CHARG = MH.CHARG
		AND     MB.LGORT = '1510' --부적합 창고 재고 제외
		AND     MB.MATNR = IM.ITEM_ID
		AND     MH.VFDAT &lt;= TO_CHAR(SYSDATE,'YYYYMMDD') -- 유통기한 경과 재고 제외
		--AND     TO_DATE(MH.VFDAT) &lt;= TRUNC(SYSDATE) -- 유통기한 경과 재고 제외
		#if ( "$!{item_id}" == '11000625' )
		AND     IM.ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
		#else
		AND     IM.ITEM_ID = '$!{item_id}'
		#end		
		AND     MB.CLABS > 0
		GROUP
		BY      MB.MATNR, MB.WERKS,
		        MH.HSDAT, MH.VFDAT,
		        IM.BASE_UOM
        UNION ALL
        -- 사용가능 수량
        SELECT  MB.MATNR ITEM_ID, F_GET_ITEM_NAME(MB.MATNR) ITEM_NAME, 
                F_GET_CODE_NAME('PLANT_NAME',MB.WERKS) PLANT_NAME,
                TO_CHAR(TO_DATE(MH.HSDAT),'YYYY-MM-DD') "제조일자",
                DECODE(MH.VFDAT , '00000000', '99991231', 
                TO_CHAR(TO_DATE(MH.VFDAT),'YYYY-MM-DD')) "유통기한",
                DECODE(MH.VFDAT , '00000000', '99991231', 
                TRUNC(TO_DATE(MH.VFDAT)- SYSDATE)) "잔여유통기한",
                SUM(MB.CLABS) "사용가능재고"
                --TRIM(TO_CHAR( SUM(MB.CLABS) ,999999999990.9)) "사용가능재고"
                , IM.BASE_UOM
                ,'1' FLAG
		FROM    SAPMCHB MB, SAPMCH1 MH, ITEM_MST IM
		WHERE   MB.MATNR = MH.MATNR
		AND     MB.CHARG = MH.CHARG
		AND     MB.LGORT != '1510' --부적합 창고 재고 제외
		AND     MB.MATNR = IM.ITEM_ID
        AND     (MH.VFDAT >= TO_CHAR(SYSDATE,'YYYYMMDD') -- 유통기한 경과 재고 제외
                OR MH.VFDAT = 00000000) -- 부자재는 유통기한 무한대
		--AND     TO_DATE(MH.VFDAT) >= TRUNC(SYSDATE) -- 유통기한 경과 재고 제외
		#if ( "$!{item_id}" == '11000625' )
		AND     IM.ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
		#else
		AND     IM.ITEM_ID = '$!{item_id}'
		#end		
		AND     MB.CLABS > 0
		GROUP
		BY      MB.MATNR, MB.WERKS,
		        MH.HSDAT, MH.VFDAT,
		        IM.BASE_UOM
		UNION ALL
        SELECT  NULL ITEM_ID, 
                NULL ITEM_NAME, 
                '합계' PLANT_NAME,
                NULL "제조일자",
                NULL "유통기한",
                NULL "잔여유통기한",
		        SUM(MB.CLABS) "사용가능재고"
		        --TRIM(TO_CHAR( SUM(MB.CLABS) ,999999999990.9)) "사용가능재고"
                ,NULL BASE_UOM
                ,'2' FLAG
		FROM    SAPMCHB MB, SAPMCH1 MH, ITEM_MST IM
		WHERE   MB.MATNR = MH.MATNR
		AND     MB.CHARG = MH.CHARG
		AND     MB.LGORT != '1510' --부적합 창고 재고 제외
		AND     MB.MATNR = IM.ITEM_ID
        AND     (MH.VFDAT >= TO_CHAR(SYSDATE,'YYYYMMDD') -- 유통기한 경과 재고 제외
                OR MH.VFDAT = 00000000) -- 부자재는 유통기한 무한대
		--AND     TO_DATE(MH.VFDAT) >= TRUNC(SYSDATE) -- 유통기한 경과 재고 제외
		#if ( "$!{item_id}" == '11000625' )
		AND     IM.ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
		#else
		AND     IM.ITEM_ID = '$!{item_id}'
		#end		
		AND     MB.CLABS > 0		        
		--ORDER BY TO_DATE(MH.HSDAT)	
--        -- DW 6 재조일자별 재고 정보
--        SELECT  MB.MATNR ITEM_ID, F_GET_ITEM_NAME(MB.MATNR) ITEM_NAME, 
--                --MB.WERKS, 
--                F_GET_CODE_NAME('PLANT_NAME',MB.WERKS) PLANT_NAME,
--		        TO_CHAR(TO_DATE(MH.HSDAT),'YYYY-MM-DD') "제조일자", 
--		        TO_CHAR(ADD_MONTHS(MH.HSDAT,IM.TERMVAL),'YYYY-MM-DD') "유통기한",
--		        TRUNC(ADD_MONTHS(MH.HSDAT,IM.TERMVAL) - SYSDATE) "잔여유통기한",
--		        SUM(MB.CLABS) "사용가능재고", IM.BASE_UOM
--		FROM    SAPMCHB MB, SAPMCH1 MH, ITEM_MST IM
--		WHERE   MB.MATNR = MH.MATNR
--		AND     MB.CHARG = MH.CHARG
--		AND     MB.LGORT != '1510' --부적합 창고 재고 제외
--		AND     MB.MATNR = IM.ITEM_ID
--		-- AND		ADD_MONTHS(MH.HSDAT,IM.TERMVAL) >= TRUNC(SYSDATE) -- 유통기한 경과 재고 제외
--		#if ( "$!{item_id}" == '11000625' )
--		AND     IM.ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
--		#else
--		AND     IM.ITEM_ID = '$!{item_id}'
--		#end 
--		AND     MB.CLABS > 0
--		GROUP 
--		BY      MB.MATNR, MB.WERKS,
--		        TO_DATE(MH.HSDAT), ADD_MONTHS(MH.HSDAT,IM.TERMVAL),
--		        IM.BASE_UOM
--		ORDER BY TO_DATE(MH.HSDAT)      
	</query>
	
	<!-- DW 7 자재 사용 완제품 사용량 조회 화면 -->
	<query id="op_02010_Long_Term_Planning_list_dw7">
		-- DW 7 자재 사용 완제품 사용량 조회 화면
		SELECT  BM.CONS_ITEM_ID,  F_GET_ITEM_NAME( BM.CONS_ITEM_ID)CONS_ITEM_NAME,
		        PO.ITEM_ID, F_GET_ITEM_NAME(PO.ITEM_ID) ITEM_NAME, 
		        SUM(COMPL_QTY) PROD_BOX, 
		        --SUM(COMPL_QTY)*IM.QTY PROD_EA,
		        --ROUND( (SUM(COMPL_QTY)*DECODE(IM.QTY,0,1,IM.QTY)) /BASE_QTY*REQ_QTY ,2) USE_QTY,
		        ROUND( ( SUM(COMPL_QTY) * DECODE(IM.QTY,0,1,IM.QTY)) * (REQ_QTY/BASE_QTY) ,2) USE_QTY,
                CASE
                    WHEN IM.MATERIAL_GROUP BETWEEN '5K000' AND '5S999'
                    THEN 'EX'
                    ELSE 'DO'
                END DOMAIN
        FROM    V_ERP_PO_MES PO, BOM_MAP BM, ITEM_MST IM
		WHERE   PO.ITEM_ID = BM.PROD_ITEM_ID
		AND     PO.ITEM_ID = IM.ITEM_ID
		AND		CONS_ITEM_ID = '$!{item_id}'
		-- "$!{serch_flag}"
		#if ( "$!{serch_flag}" == 'Y' )
		AND		PO.ITEM_ID IN
		                    (
		                    SELECT PROD_ITEM_ID
		                    FROM BOM_MAP
		                    WHERE PROD_ITEM_TYPE != 'FERT'
		                    #if ( "$!{item_id}" == '11000625' )
							AND     CONS_ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
							#else
							AND     CONS_ITEM_ID = '$!{item_id}'
							#end
		                    )
		#else
		AND     IM.ITYPE = 'FERT'
			#if ( "$!{item_id}" == '11000625' )
			AND     BM.CONS_ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
			#else
			AND     BM.CONS_ITEM_ID = '$!{item_id}'
			#end 
		#end		                    
		AND     PO.START_DTTM	BETWEEN	TO_DATE('$!{from_mm}'||'01') 
								AND		LAST_DAY(TO_DATE('$!{to_mm}'||'01'))
        GROUP BY    BM.CONS_ITEM_ID, PO.ITEM_ID, BASE_QTY,REQ_QTY, IM.QTY, IM.MATERIAL_GROUP
        --ORDER BY    IM.MATERIAL_GROUP, PO.ITEM_ID
		UNION  ALL
		------------------------------------------------------------------------------------------------------------
		--------------------------------------------- 주석 부분  ----------------------------------------------------
		SELECT  NULL , NULL  , '품목수 : ' ITEM_ID, MAX(DO)||','|| MAX(EX)||','||'계:'||NVL(SUM(ITEM_ID),0) ITEM_NAME
		        , NULL , NULL , NULL 
		FROM    (
		        SELECT  COUNT(ITEM_ID) ITEM_ID, 
		                CASE 
		                WHEN DOMAIN = 'DO'
		                THEN '내수:'||NVL(COUNT(DOMAIN),0)
		                ELSE NULL
		                END "DO",
		                CASE 
		                WHEN DOMAIN = 'EX'
		                THEN '수출:'||NVL(COUNT(DOMAIN),0)
		                ELSE NULL
		                END "EX"
		        FROM    (
						-- DW 7 자재 사용 완제품 사용량 조회 화면
						SELECT  BM.CONS_ITEM_ID,  F_GET_ITEM_NAME( BM.CONS_ITEM_ID)CONS_ITEM_NAME,
						        PO.ITEM_ID, F_GET_ITEM_NAME(PO.ITEM_ID) ITEM_NAME, 
						        SUM(COMPL_QTY) PROD_BOX, 
						        --SUM(COMPL_QTY)*IM.QTY PROD_EA,
						        ROUND( (SUM(COMPL_QTY)*DECODE(IM.QTY,0,1,IM.QTY)) /BASE_QTY*REQ_QTY ,3) USE_QTY,
				                CASE
				                    WHEN IM.MATERIAL_GROUP BETWEEN '5K000' AND '5S999'
				                    THEN 'EX'
				                    ELSE 'DO'
				                END DOMAIN
				        FROM    V_ERP_PO_MES PO, BOM_MAP BM, ITEM_MST IM
						WHERE   PO.ITEM_ID = BM.PROD_ITEM_ID
						AND     PO.ITEM_ID = IM.ITEM_ID
						AND		CONS_ITEM_ID = '$!{item_id}'
						#if ( "$!{serch_flag}" == 'Y' )
						AND		PO.ITEM_ID IN
						                    (
						                    SELECT PROD_ITEM_ID
						                    FROM BOM_MAP
						                    WHERE PROD_ITEM_TYPE != 'FERT'
						                    #if ( "$!{item_id}" == '11000625' )
											AND     CONS_ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
											#else
											AND     CONS_ITEM_ID = '$!{item_id}'
											#end						                    
						                    )
						#else
						AND     IM.ITYPE = 'FERT'
							#if ( "$!{item_id}" == '11000625' )
							AND     BM.CONS_ITEM_ID in ('11000625', '11001487') -- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
							#else
							AND     BM.CONS_ITEM_ID = '$!{item_id}'
							#end 
						#end	
						AND     PO.START_DTTM	BETWEEN	TO_DATE('$!{from_mm}'||'01') 
												AND		LAST_DAY(TO_DATE('$!{to_mm}'||'01'))
				        GROUP BY    BM.CONS_ITEM_ID, PO.ITEM_ID, BASE_QTY,REQ_QTY, IM.QTY, IM.MATERIAL_GROUP
		                )
		        GROUP BY DOMAIN    
		        )
		ORDER BY    7, 6 DESC        
	</query>	
	
	<!--
	======================================================================
		LTP 상품수급 계획
	======================================================================
	-->	
	
	
	<!-- DW1 계획수립 대상 리스트 -->
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw1">
		SELECT  ITEM_ID,
		        ITEM_NAME,
		        TERMVAL,        				--  유통기한
                TRIM(TO_CHAR(
                LEAD_TIME
                ,999999999990.9)) LEAD_TIME, 	--  리드타임
                BASE_UOM,						--  기본단위
		        ROUND(STOCK),            		--  현재고
		        ROUND(ETA),           			--  진행중재고
		        ROUND(TOT_STOCK),        		--  총재고
		        SEL_DMD,        				--  선택구분
		        ROUND(STD_STOCK),        		--  기준재고
		        ROUND(SAFETY_STOCK),   			--  안전재고
		        SAFETY_FACTOR,       			--  안전계수    
		        DMD05,            				--  평균
		        STD_DEV, 						--  표준편차
		        DMD03,           				--  3개월평균
		        DMD04,           				--  전년동월
		        ROUND(USE_CUM_MONTH),   		--  당월누계
		        MIN_LOT_SIZE,    				--  최소발주량
                --  발주시기 = (총재고-안전재고)/기준재고 가 1보다 작을때
                --  (총재고-안전재고)/기준재고 - 1 - 리드타임
                TRIM(TO_CHAR(
                DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시 
                DECODE(PR_DATE_NO, 0, 
                ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1)
                , PR_DATE_NO))    
                ,999999999990.9)) PR_DATE_NO,
                DECODE(STD_STOCK, 0, NULL,   	 -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
                DECODE(PR_QTY, 0,
                CASE
                    WHEN MIN_LOT_SIZE = 0 THEN STD_STOCK
                    WHEN STD_STOCK > MIN_LOT_SIZE THEN
                        CEIL(STD_STOCK/MIN_LOT_SIZE) * MIN_LOT_SIZE
                    ELSE MIN_LOT_SIZE
                END    
                , PR_QTY)) PR_QTY,
                -- 입고시기는 현재+발주시기+리드타임
                DECODE (ENTR_DATE, '0', DECODE(STD_STOCK, 0, NULL,    	-- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
				TO_CHAR(TRUNC(SYSDATE) + (ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1) + LEAD_TIME)  ,'YYYY-MM-DD')),
				TO_CHAR(TO_DATE(ENTR_DATE),'YYYY-MM-DD')) ENTR_DATE
				,CONTAINER_BOX
		        ,EDIT_FLAG
		        ,CASE
		            WHEN IF_FLAG = 'I'    THEN '전송전'
		            WHEN IF_FLAG = 'P'    THEN '전송중'
		            WHEN IF_FLAG = 'S'    THEN '완료'
		            WHEN IF_FLAG = 'E'    THEN '오류'
		            ELSE IF_FLAG
		        END        IF_FLAG
		        ,PR_NO
		        ,IF_MSGS
		FROM    (
		        SELECT  T1.ITEM_ID,
		                T1.ITEM_NAME,
		                T1.TERMVAL,         			--   유통기한
		                T1.LEAD_TIME,         			--   리드타임
		                T1.BASE_UOM,					--   기본단위
		                T1.STOCK,            			--   현재고
		                T1.ETA,             			--   진행중재고
		                T1.TOT_STOCK,         		 	--   총재고
		                T1.SEL_DMD,        				--   선택구분
		                T1.STD_STOCK,         			--   기준재고
		                T1.MINSS    SAFETY_STOCK,     	--   안전재고
		                DECODE(T1.SAFETY_FACTOR,0, 1, T1.SAFETY_FACTOR)        SAFETY_FACTOR,         --   안전계수
		                T1.DMD05,             			--   평균
		                T1.STD_DEV,         			--   표준편차
		                T1.DMD03,            			--   3개월평균
		                T1.DMD04,            			--   전년동월
		                T1.USE_CUM_MONTH,		        --   당월누계
		                T1.MIN_LOT_SIZE,     			--   최소발주량
		                T1.CONTAINER_BOX,				--	 CONTAINER_BOX
		                T1.PR_DATE_NO,		--   발주시기
		                T1.PR_QTY,			--   PR수량
		                T1.ENTR_DATE,		--   PR입고일
		                T1.EDIT_FLAG,
		                T1.IF_FLAG,
		                T1.PR_NO,
		                T1.IF_MSGS
		        FROM    (
		                SELECT  S1.ITEM_ID,
		                        S1.ITEM_NAME,
		                        S1.TERMVAL,
		                        NVL(PR_TO_PO,0)+NVL(PO_TO_LC ,0)+NVL(LC_TO_PORT ,0)+NVL(PORT_TO_CUST ,0) LEAD_TIME, --   리드타임은 월단위로 정정
		                        NVL(S2.STOCK,0)    STOCK,                   --   현재고
		                        NVL(S2.ETA,0)    ETA,                       --   진행중 재고
		                        NVL(S2.STOCK,0)    + NVL(S2.ETA,0)    TOT_STOCK,      --   총재고
		                        S2.SEL_DMD,                                 --   선택구분
		                        S2.STD_STOCK,                               --   기준재고
		                        NVL(S2.DMD03,0)    DMD03,                   --   기준재고(3개월)
		                        NVL(S2.DMD04,0)    DMD04,                   --   기준재고(전년동월)
		                        NVL(S2.DMD05,0)    DMD05,                   --   평균(과거12개월)
		                        NVL(S2.STD_DEV,0)    STD_DEV,               --   표준편차
		                        NVL(S2.USE_CUM_MONTH ,0)    USE_CUM_MONTH,  --   당월누계
		                        NVL(S2.SAFETY_FACTOR ,0)	SAFETY_FACTOR,	--   안전계수 
				                NVL(S2.PR_DATE_NO ,0)		PR_DATE_NO,		--   발주시기
				                NVL(S2.PR_QTY ,0)			PR_QTY,			--   발주수량
				                NVL(S2.ENTR_DATE ,0)		ENTR_DATE,		--   입고일			
		                        (
		                        SELECT    MAX(MIN_LOT_SIZE)
		                        FROM    ITEM_DTL    S3
		                        WHERE    S1.ITEM_ID    = S3.ITEM_ID
		                        )    MIN_LOT_SIZE
		                        ,CONTAINER_BOX
		                        ,BASE_UOM
		                        ,MINSS -- 안전제고
		                        ,CASE
		                            WHEN S3.IF_FLAG IS NULL
		                            THEN S2.IF_FLAG
		                            ELSE S3.IF_FLAG
		                        END IF_FLAG
		                        ,EDIT_FLAG
		                        ,S3.PR_NO
		                        ,S3.IF_MSGS                                
		                FROM    ITEM_MST    S1,
		                        APS_PR_PLAN    S2,
		                        (
		                        SELECT  VERSION, ITEM_ID, 
		                                MIN(IF_FLAG) IF_FLAG,
		                                MIN(IF_MSGS) IF_MSGS,
		                                MIN(PR_NO) PR_NO
		                        FROM    APS_PR_PLAN_IF
		                        WHERE   VERSION    = '$!{version}'
		                        GROUP   
		                        BY      VERSION, ITEM_ID                                    
		                        ) S3		              		                        
		                WHERE   S1.USE_PR_PLAN    = 'Y'
		           		#if 	( "$!{sell_stop_gubn}" == '1' )
		                #elseif ( "$!{sell_stop_gubn}" == '2' )
		                AND		(S1.SELL_STOP_DATE &gt;= TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '99991231' OR SELL_STOP_DATE ='00000000' )
		                #else 
		                AND		S1.SELL_STOP_DATE &lt; TO_CHAR(SYSDATE,'YYYYMMDD')             
		                #end
		                AND     S1.ITEM_ID    = S2.ITEM_ID(+)
		                AND     S2.ITEM_ID    = S3.ITEM_ID(+)
		                AND     S2.VERSION    = S3.VERSION(+)		                
		                AND     S2.VERSION    = '$!{version}'
		                AND     S1.SALES_CAT02	LIKE '%'||'$!{sales_cat02}'||'%' 
						#if ( "$!{item_type}" == 'HAWA' )
				        AND     S1.ITYPE	= 'HAWA' --자재 유형별로 변수 바인딩
						#else
				        AND     S1.ITYPE	  IN ('ROH1','ROH2') --자재 유형별로 변수 바인딩
						#end
		                )T1
		      
		        )
		ORDER BY 1		        
	</query>
	
	<!-- DW2 계획수립 대상 리스트 -->
	<query id="op_02010_Long_Term_Planning_list_dw2">
		-- DW 2  수입진행 내역 조회
		SELECT	'$!{item_id}',
				f_get_item_name('$!{item_id}'),
				K1.BANFN,	--	구매 요청 번호
				K1.FRGDT,	--	구매 요청 릴리스일
				K1.MENGE,	--	구매요청수량
				K1.EBELN,	--	구매오더번호
				K1.EBELP,	--	구매 오더 품목 번호
				CASE
					WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_CHAR(TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0),'YYYYMMDD')
					ELSE K1.BEDAT
				END	BEDAT,	--	구매 오더일
				K1.BSMNG,	--	구매오더수량
				CASE
					WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
						TO_CHAR(
							CASE
								WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
								ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
							END	+ NVL(PO_TO_LC,0),'YYYYMMDD'
							)
					ELSE K3.ZFBLDT
				END	ZFBLDT,	--	B/L 개설일자
				K3.ZFBLNO,
				K2.MENGE - NVL(K3.CUM_BLMENGE,0),	-- 미선적량
				NVL(K3.BLMENGE,0),	--	선적량
				K3.ZFHBLNO,	--	HOUSE BL_NO
				CASE
					WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
						TO_CHAR(
							CASE
								WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
										CASE
											WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
											ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
										END	+ NVL(PO_TO_LC,0)
								ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
							END + NVL(LC_TO_PORT,0),'YYYYMMDD'
							)
					ELSE NVL(K3.ZFETA,K3.ZFRETA)
				END	ZFRETA,		-- 입항일/실입항일
				CASE
					WHEN K3.ZFIDSDT IS NULL THEN
						TO_CHAR(
							CASE
								WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN
										CASE
											WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
													CASE
														WHEN K1.BEDAT = ' ' OR K1.BEDAT = '00000000' THEN TO_DATE(K1.FRGDT,'YYYY-MM-DD') + NVL(PR_TO_PO,0)
														ELSE TO_DATE(K1.BEDAT,'YYYY-MM-DD')
													END	+ NVL(PO_TO_LC,0)
											ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
										END + NVL(LC_TO_PORT,0)
								ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
							END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
							)
					ELSE K3.ZFIDSDT
				END	ZFIDSDT,	--	통관일
					--		CASE
				--			WHEN K3.BUDAT IS NULL THEN
				--				TO_CHAR(
				--					CASE
				--						WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
				--							CASE
				--								WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
				--									TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0)
				--								ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
				--							END + NVL(LC_TO_PORT,0)
				--						ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
				--					END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
				--					)
				--			ELSE K3.ZFIDSDT
				--		END	BUDAT,	--	입고일
						K1.LFDAT,	--	입고요청일
                        K3.BUDAT,	--  입고일
				                ----------------------------------------
				                CASE
				                    WHEN
				                        K1.LFDAT  >= TRUNC(SYSDATE)                        
				                    THEN '1'
				                    ELSE '0'
				                END DATE_FLAG,
				                ----------------------------------------			
						CASE
							WHEN K3.BUDAT IS NULL THEN
								CASE
									WHEN K3.ZFIDSDT IS NULL THEN
											CASE
												WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
													CASE
														WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 'BL발행전'
														ELSE '입항전'
													END
												ELSE '통관전'
											END
									ELSE '통관완료'
								END
							ELSE '입고완료'
						END	STATUS	--	진행상태
                ----------------------------------------		
			FROM	(
				/* 구매요청, PO정보 */
				SELECT	T1.WERKS,
						T1.MATNR,
						T1.LFDAT,	--	품목납품일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
								T1.MENGE
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
						END	MENGE, --	구매요청수량
						T1.MEINS,	--	구매요청단위
						T2.BSTME,	--	발주단위
						T1.FRGDT,	--	구매 요청 릴리스일
						T1.BANFN,	--	구매 요청 번호
						T1.BNFPO,	--	구매 요청 품목 번호
						T1.EBELN,	--	구매오더번호
						T1.EBELP,	--	구매 오더 품목 번호,
						T1.BEDAT,	--	구매 오더일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
								T1.BSMNG
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
						END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
						T1.AFNAM	--	요청자이름
				FROM	SAPEBAN		T1,
						SAPMARA		T2,
						SAPMDBS		T3
				WHERE	T1.LOEKZ	= ' '
				AND		T1.MATNR	= T2.MATNR
				AND		T1.MATNR	= '$!{item_id}'
				AND		T1.MATNR	= T3.MATNR
				AND		T1.EBELN	= T3.EBELN
				AND		T1.EBELP	= T3.EBELP
				AND		T1.FRGKZ	= '3' --구매요청 릴리즈
				AND		T3.ELIKZ	= ' ' -- 납품완료지시자
				AND		T3.LOEKZ	= ' ' -- 삭제 지시자
				AND		T1.STATU	= 'B' -- PO진행됨
				UNION	ALL
				/* 구매요청, PO정보 */
				SELECT	T1.WERKS,
						T1.MATNR,
						T1.LFDAT,	--	품목납품일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면 
								T1.MENGE
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
						END	MENGE, --	구매요청수량
						T1.MEINS,	--	구매요청단위
						T2.BSTME,	--	발주단위
						T1.FRGDT,	--	구매 요청 릴리스일
						T1.BANFN,	--	구매 요청 번호
						T1.BNFPO,	--	구매 요청 품목 번호
						T1.EBELN,	--	구매오더번호
						T1.EBELP,	--	구매 오더 품목 번호,
						T1.BEDAT,	--	구매 오더일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN --	MARA에 발주단위가 존재하지 않으면
								T1.BSMNG
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.BSMNG)	
						END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
						T1.AFNAM	--	요청자이름
				FROM	SAPEBAN		T1,
						SAPMARA		T2
				WHERE	T1.LOEKZ	= ' '
				AND		T1.MATNR	= T2.MATNR
				AND		T1.MATNR	= '$!{item_id}'
				AND		T1.FRGKZ	= '3' -- 구매요청 릴리즈
				AND		T1.STATU	= 'N' -- PO진행안됨
				)	K1,
				(
				/* LC정보 */
				SELECT	I.EBELN,	--	구매 문서 번호
						I.EBELP,	--	구매 문서 품목 번호
						H.ZFOPNNO,	--	신용장-승인번호
						I.MENGE,	--	수입의뢰 수량
						I.MEINS,	--	기본 단위
						(
						/* 개설일자 */
						SELECT	DISTINCT
								ZFOPNDT--	개설일
						FROM	SAPZIMTREQST
						WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
						AND		ZFAMDNO	= 	( --Amend Seq. 
											SELECT	MAX( ZFAMDNO )
											FROM	SAPZIMTREQST
											WHERE	ZFREQNO = H.ZFREQNO
											)
						)	ZFOPNDT
				FROM	SAPZIMTREQHD	H,
						SAPZIMTREQIT	I
				WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
				AND		I.MATNR		= '$!{item_id}'
				)	K2,
				(
				/* B/L 데이타 읽기. */
				SELECT	K1.EBELN	EBELN,
						K1.EBELP	EBELP,
						RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
						K1.ZFHBLNO ZFHBLNO,
						K1.ZFBLNO,
						MAX(K1.BLMENGE)	BLMENGE,
						MAX(K1.ZFBLDT)	ZFBLDT,
						MAX(K1.ZFETA)	ZFETA,
						MAX(K1.ZFRETA)	ZFRETA,
						MAX(K1.ZFIDSDT)	ZFIDSDT,
						MAX(K1.CCMENGE) CCMENGE,
						MAX(K1.BUDAT)	BUDAT,
						SUM(K2.BLMENGE)	CUM_BLMENGE
				FROM	(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	--	구매 문서 번호
								T2.EBELP,	--	구매 문서 품목 번호
								T1.ZFHBLNO,	--	HOUSE BL_NO
								T2.BLMENGE,	--	BL수량
								T1.ZFBLDT,	--	BL발행일
								T1.ZFETA,		--	입항일
								T1.ZFRETA,		--	실입항일
								(
								SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
								FROM	SAPZIMTIDS	T3
								WHERE	T3.ZFBLNO	= T1.ZFBLNO	
								)	ZFIDSDT,
								(
								/* 통관수량 */
								SELECT	SUM(CCMENGE)
								FROM	SAPZIMTIVIT	T4
								WHERE	T4.ZFBLNO	= T1.ZFBLNO
								AND		T4.ZFBLIT	= T2.ZFBLIT
								)	CCMENGE,
								(
								/* 최근 입고일 */
								SELECT	MAX(BUDAT)
								FROM	SAPZIMVIVHSTIT	T5
								WHERE	T5.ZFBLNO	= T1.ZFBLNO
								AND		T5.ZFBLIT	= T2.ZFBLIT
								)	BUDAT
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'		
						)	K1,
						(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	--	구매 문서 번호
								T2.EBELP,	--	구매 문서 품목 번호
								T2.BLMENGE	--	BL수량
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'	
						)	K2
				WHERE	K1.EBELN	= K2.EBELN
				AND		K1.EBELP	= K2.EBELP
				AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
				GROUP
				BY		K1.EBELN,
						K1.EBELP,
						K1.ZFHBLNO,
						K1.ZFBLNO	
				)			K3,
				ITEM_MST	K4
			WHERE	K1.EBELN = K2.EBELN(+)
			AND		K1.EBELP = K2.EBELP(+)
			AND		K1.EBELN = K3.EBELN(+)
			AND		K1.EBELP = K3.EBELP(+)
			AND		K4.ITEM_ID	= '$!{item_id}'	
			AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
			UNION	ALL
			-- PR없이 구매오더로 진행된 것.		
			SELECT	'$!{item_id}',
				f_get_item_name('$!{item_id}'),
				K1.BANFN,	--	구매 요청 번호
				K1.FRGDT,	--	구매 요청 릴리스일
				K1.MENGE,	--	구매요청수량
				K1.EBELN,	--	구매오더번호
				K1.EBELP,	--	구매 오더 품목 번호
				K1.BEDAT,	--	구매 오더일
				K1.BSMNG,	--	구매오더수량
				CASE
					WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
						TO_CHAR(TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0),'YYYYMMDD')
					ELSE K3.ZFBLDT
				END	ZFBLDT,	--	B/L 개설일자
				K3.ZFBLNO,
				K2.MENGE - NVL(K3.CUM_BLMENGE,0),	--	미선적량
				NVL(K3.BLMENGE,0),	--선적량
				K3.ZFHBLNO,	-- HOUSE BL_NO
				CASE
					WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
						TO_CHAR(
							CASE
								WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
									TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0)
								ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
							END + NVL(LC_TO_PORT,0),'YYYYMMDD'
							)
					ELSE NVL(K3.ZFETA,K3.ZFRETA)
				END	ZFRETA,		-- 입항일/실입항일
				CASE
					WHEN K3.ZFIDSDT IS NULL THEN
						TO_CHAR(
							CASE
								WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
									CASE
										WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
											TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0)
										ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
									END + NVL(LC_TO_PORT,0)
								ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
							END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
							)
					ELSE K3.ZFIDSDT
				END	ZFIDSDT,	--	통관일
					--		CASE
				--			WHEN K3.BUDAT IS NULL THEN
				--				TO_CHAR(
				--					CASE
				--						WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
				--							CASE
				--								WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 
				--									TO_DATE(K1.BEDAT,'YYYY-MM-DD') + NVL(PO_TO_LC,0)
				--								ELSE TO_DATE(K3.ZFBLDT,'YYYY-MM-DD')
				--							END + NVL(LC_TO_PORT,0)
				--						ELSE TO_DATE(NVL(K3.ZFETA,K3.ZFRETA),'YYYY-MM-DD')
				--					END + NVL(PORT_TO_CUST,0),'YYYYMMDD'
				--					)
				--			ELSE K3.ZFIDSDT
				--		END	BUDAT,	--	입고일
						K1.LFDAT,	--	입고요청일
                        K3.BUDAT,	--  입고일
				                ----------------------------------------
				                CASE
				                    WHEN
				                        K1.LFDAT  >= TRUNC(SYSDATE)                        
				                    THEN '1'
				                    ELSE '0'
				                END DATE_FLAG,
				                ----------------------------------------			
						CASE
							WHEN K3.BUDAT IS NULL THEN
								CASE
									WHEN K3.ZFIDSDT IS NULL THEN
											CASE
												WHEN NVL(K3.ZFETA,K3.ZFRETA) IS NULL THEN 
													CASE
														WHEN K3.ZFBLDT IS NULL OR K3.ZFBLDT = '00000000' THEN 'BL발행전'
														ELSE '입항전'
													END
												ELSE '통관전'
											END
									ELSE '통관완료'
								END
							ELSE '입고완료'
						END	STATUS	--	진행상태
                ----------------------------------------		
			FROM	(
				/* PO정보 */
				SELECT	T1.WERKS,
						T1.MATNR,
						NULL	LFDAT,	--	품목납품일
						0		MENGE, --	구매요청수량
						NULL 	MEINS,	--	구매요청단위
						T2.BSTME,	
						NULL	FRGDT,	--	구매 요청 릴리스일
						T1.BANFN,	--	구매 요청 번호
						T1.BNFPO,	--	구매 요청 품목 번호
						T1.EBELN,	--	구매오더번호
						T1.EBELP,	--	구매 오더 품목 번호,
						T1.AEDAT	BEDAT,	--	구매 오더일
						CASE 
							WHEN T2.BSTME	= ' ' OR T2.BSTME IS NULL THEN -- MARA에 발주단위가 존재하지 않으면
								T1.MENGE
							ELSE
								f_getconv_UOM(T1.MATNR, T1.MEINS,'BOX',T1.MENGE)	
						END	BSMNG,	--	이 구매 요청에 대비한 오더 수량
						T1.AFNAM	--	요청자이름
				FROM	SAPEKPO		T1,
						SAPMARA		T2
				WHERE	T1.ELIKZ	= ' ' -- 납품완료지시자
				AND		T1.LOEKZ	= ' ' -- 삭제 지시자
				AND		T1.MATNR	= T2.MATNR
				AND		T1.MATNR	= '$!{item_id}'
				AND		T1.BANFN	= ' '	-- 구매요청 없다
				)	K1,
				(
				/* LC정보 */
				SELECT	I.EBELN,	--	구매 문서 번호
						I.EBELP,	--	구매 문서 품목 번호
						H.ZFOPNNO,	--	신용장-승인번호
						I.MENGE,	--	수입의뢰 수량
						I.MEINS,	--	기본 단위
						(
						/* 개설일자 */
						SELECT	DISTINCT
								ZFOPNDT--	개설일
						FROM	SAPZIMTREQST
						WHERE	ZFREQNO = H.ZFREQNO --	수입의뢰 관리번호
						AND		ZFAMDNO	= 	( --Amend Seq. 
											SELECT	MAX( ZFAMDNO )
											FROM	SAPZIMTREQST
											WHERE	ZFREQNO = H.ZFREQNO
											)
						)	ZFOPNDT
				FROM	SAPZIMTREQHD	H,
						SAPZIMTREQIT	I
				WHERE	H.ZFREQNO 	= I.ZFREQNO	--	수입의뢰 관리번호	 
				AND		I.MATNR		= '$!{item_id}'
				)	K2,
				(
				/* B/L 데이타 읽기. */
				SELECT	K1.EBELN	EBELN,
						K1.EBELP	EBELP,
						RANK() OVER (PARTITION BY K1.EBELN, K1.EBELP ORDER BY K1.EBELN, K1.EBELP, MAX(K1.ZFBLNO||K1.ZFSHNO))	ORD,
						K1.ZFHBLNO ZFHBLNO,
						K1.ZFBLNO,
						MAX(K1.BLMENGE)	BLMENGE,
						MAX(K1.ZFBLDT)	ZFBLDT,
						MAX(K1.ZFETA)	ZFETA,
						MAX(K1.ZFRETA)	ZFRETA,
						MAX(K1.ZFIDSDT)	ZFIDSDT,
						MAX(K1.CCMENGE) CCMENGE,
						MAX(K1.BUDAT)	BUDAT,
						SUM(K2.BLMENGE)	CUM_BLMENGE
				FROM	(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	--	구매 문서 번호
								T2.EBELP,	--	구매 문서 품목 번호
								T1.ZFHBLNO,	-- 	HOUSE BL_NO
								T2.BLMENGE,	-- 	BL수량
								T1.ZFBLDT,		--	BL발행일
								T1.ZFETA,		--	입항일
								T1.ZFRETA,		--	실입항일
								(
								SELECT	MAX(ZFIDSDT)	--수입신고 수리일(통관일)
								FROM	SAPZIMTIDS	T3
								WHERE	T3.ZFBLNO	= T1.ZFBLNO	
								)	ZFIDSDT,
								(
								/* 통관수량 */
								SELECT	SUM(CCMENGE)
								FROM	SAPZIMTIVIT	T4
								WHERE	T4.ZFBLNO	= T1.ZFBLNO
								AND		T4.ZFBLIT	= T2.ZFBLIT
								)	CCMENGE,
								(
								/* 최근 입고일 */
								SELECT	MAX(BUDAT)
								FROM	SAPZIMVIVHSTIT	T5
								WHERE	T5.ZFBLNO	= T1.ZFBLNO
								AND		T5.ZFBLIT	= T2.ZFBLIT
								)	BUDAT
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'		
						)	K1,
						(
						SELECT	T1.ZFBLNO, T1.ZFSHNO,
								T2.EBELN,	--	구매 문서 번호
								T2.EBELP,	--	구매 문서 품목 번호
								T2.BLMENGE	--	BL수량
						FROM	SAPZIMTBL	T1,
								SAPZIMTBLIT	T2
						WHERE	T1.ZFBLNO	= T2.ZFBLNO
						AND		T2.MATNR	= '$!{item_id}'	
						)	K2
				WHERE	K1.EBELN	= K2.EBELN
				AND		K1.EBELP	= K2.EBELP
				AND		K1.ZFBLNO||K1.ZFSHNO >= K2.ZFBLNO||K2.ZFSHNO
				GROUP
				BY		K1.EBELN,
						K1.EBELP,
						K1.ZFHBLNO,
						K1.ZFBLNO	
				)	K3,
				ITEM_MST	K4
		WHERE	K1.EBELN = K2.EBELN(+)
		AND		K1.EBELP = K2.EBELP(+)
		AND		K1.EBELN = K3.EBELN(+)
		AND		K1.EBELP = K3.EBELP(+)
		AND		K4.ITEM_ID	= '$!{item_id}'	
		AND		K1.EBELN	NOT LIKE '7%'	-- 내부 이고오더
		ORDER
		BY		4,3,8,6,16
		
	</query>		
	

	<!-- DW 3 구분별 시뮬레이션 헤더-->
	<query id="op_02010_Long_Term_Planning_list_dw3_Hawa_header">	
		-- DW 3 구분별 시뮬레이션 헤더
        SELECT  YYYYMM, -- 해더 내용 
                CASE    
                        WHEN CAL.YYYYMM_2 &lt; TO_CHAR(SYSDATE, 'YYYYMM') 
                        THEN 'MON_P'|| LPAD(TO_NUMBER(NVL(MAX(TO_NUMBER(16-IDX)),00)),2,'0')   --13
                ELSE 'MON_M' || LPAD(TO_NUMBER(NVL(MAX(TO_NUMBER(IDX-16)),00)),2,'0') 
                END GUBN,  -- 해더 이름
                CASE    
                        WHEN (CAL.YYYYMM_2 + 2) &lt; TO_CHAR(SYSDATE, 'YYYYMM') --2 
                        THEN 55			-- GRID3 길이 조정 2014-11-24
                		ELSE 55  
                END WIDTH, -- 해더 길이
                CASE    
                        WHEN (IDX) > MAX(CAL.TP_PLAG)+15  --- 12 
                        THEN 'true'
                		ELSE 'false'
                END EDIT -- 해더 수정여부
        FROM    (
                SELECT  DISTINCT CAL.YYYY||'-'||CAL.MM "YYYYMM", CAL.YYYYMM "YYYYMM_2",        
                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX,
                        (
                        -- 타입팬스 정보 
                        SELECT    CASE
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 0),'YYYYMM') = IPGO_YYMM THEN 0
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 1),'YYYYMM') = IPGO_YYMM THEN 1
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 2),'YYYYMM') = IPGO_YYMM THEN 2
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 3),'YYYYMM') = IPGO_YYMM THEN 3
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 4),'YYYYMM') = IPGO_YYMM THEN 4
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 5),'YYYYMM') = IPGO_YYMM THEN 5
                                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 6),'YYYYMM') = IPGO_YYMM THEN 6
                                    ELSE 0
                                END    TP_FLAG
                        FROM    (        
                                SELECT    TO_CHAR(SYSDATE +    LEAD_TIME,'YYYYMM') IPGO_YYMM
                                FROM    (
                                        SELECT    CASE
                                                    WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
                                                        (
                                                        SELECT    MAX(LEAD_TIME)
                                                        FROM    ITEM_DTL
                                                        WHERE    ITEM_ID    = '$!{item_id}'    
                                                        )
                                                    ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
                                                END    LEAD_TIME
                                        FROM    ITEM_MST
                                        WHERE    ITEM_ID     = '$!{item_id}'    
                                        )        
                                )
                        )     TP_PLAG                           
                FROM    CAL_MST CAL
                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-15),'MONTH'),'YYYYMM')  --12 
                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 6)),'YYYYMM')
                GROUP BY   CAL.YYYY||'-'||CAL.MM, CAL.YYYYMM
                ORDER BY 1
                ) CAL
        GROUP BY CAL.YYYYMM, CAL.YYYYMM_2, CAL.IDX
        ORDER BY 1
	</query>

	<!-- DW 3 재고 전개-->
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw3">
		SELECT  ITEM_ID,F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
    		'0' SEL_GUBN,
            '재고량'    NAME,     
            MAX(M_P15),
            MAX(M_P14),
            MAX(M_P13),
            MAX(M_P12),
            MAX(M_P11),
            MAX(M_P10),
            MAX(M_P09),
            MAX(M_P08),
            MAX(M_P07),
            MAX(M_P06),
            MAX(M_P05),
            MAX(M_P04),
            MAX(M_P03),
            MAX(M_P02),
            MAX(M_P01),
            MAX(M_P00),
            0 M_M01,
            0 M_M02,
            0 M_M03,
            0 M_M04,
            0 M_M05,
            0 M_M06            
            FROM
  			(	SELECT 		ITEM_ID,   
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD'),STOCK) M_P15,
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'),STOCK) M_P14,      		             
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),STOCK) M_P13,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),STOCK) M_P12,      
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),STOCK) M_P11,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),STOCK) M_P10,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),STOCK) M_P09,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),STOCK) M_P08,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),STOCK) M_P07,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),STOCK) M_P06,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),STOCK) M_P05,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),STOCK) M_P04,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),STOCK) M_P03,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),STOCK) M_P02,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),STOCK) M_P01,
                DECODE(VERSION,TO_CHAR(SYSDATE,'YYYYMMDD'),STOCK) M_P00             
           FROM(
           		 SELECT  VERSION, ITEM_ID,
                 ROUND(STOCK,0) STOCK                
                 FROM APS_PR_PLAN
    		     WHERE VERSION IN(  
        							TO_CHAR(SYSDATE,'YYYYMMDD')  ,
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),
        						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),
         							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),
          					  		TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),
           						 	TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'), 
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD'), 
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD') 
                					)
           		 AND ITEM_ID	=	'$!{item_id}'	)
             )
            GROUP BY ITEM_ID
            UNION ALL
            SELECT  ITEM_ID,
            F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
    		'1' SEL_GUBN,
            '3개월 평균'    NAME,           
            MAX(M_P15),
            MAX(M_P14),    
            MAX(M_P13),
            MAX(M_P12),
            MAX(M_P11),
            MAX(M_P10),
            MAX(M_P09),
            MAX(M_P08),
            MAX(M_P07),
            MAX(M_P06),
            MAX(M_P05),
            MAX(M_P04),
            MAX(M_P03),
            MAX(M_P02),
            MAX(M_P01),
            MAX(M_P00),
            0 M_M01,
            0 M_M02,
            0 M_M03,
            0 M_M04,
            0 M_M05,
            0 M_M06  
            FROM
  			(	SELECT 		ITEM_ID,   
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD'),DMD03) M_P15,
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'),DMD03) M_P14,      		             
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),DMD03) M_P13,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),DMD03) M_P12,      
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),DMD03) M_P11,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),DMD03) M_P10,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),DMD03) M_P09,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),DMD03) M_P08,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),DMD03) M_P07,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),DMD03) M_P06,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),DMD03) M_P05,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),DMD03) M_P04,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),DMD03) M_P03,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),DMD03) M_P02,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),DMD03) M_P01,
                DECODE(VERSION,TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD'),DMD03) M_P00             
           FROM(
           		 SELECT  VERSION, ITEM_ID,
                 ROUND(DMD03,0) DMD03                
                 FROM APS_PR_PLAN
    		     WHERE VERSION IN(  
        							TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD')  ,
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),
        						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),
         							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),
          					  		TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),
           						 	TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'), 
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD')  
                					)
           		 AND ITEM_ID	=	'$!{item_id}'	)
             )
            GROUP BY ITEM_ID
            UNION ALL
            SELECT  ITEM_ID,
            F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
    		'1' SEL_GUBN,
            '사용자'    NAME, 
            0 M_P15,
            0 M_P14,
            0 M_P13,
            0 M_P12,
            0 M_P11,
            0 M_P10,
            0 M_P09,
            0 M_P08,
            0 M_P07,
            0 M_P06,
            0 M_P05,
            0 M_P04,
            0 M_P03,
            0 M_P02,
            0 M_P01,
          	0 M_P00,
          	0 M_M01,
            0 M_M02,
            0 M_M03,
            0 M_M04,
            0 M_M05,
            0 M_M06 
            FROM
  			(	SELECT 		ITEM_ID,   
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD'),DMD03) M_P15,
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'),DMD03) M_P14,      		             
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),DMD03) M_P13,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),DMD03) M_P12,      
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),DMD03) M_P11,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),DMD03) M_P10,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),DMD03) M_P09,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),DMD03) M_P08,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),DMD03) M_P07,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),DMD03) M_P06,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),DMD03) M_P05,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),DMD03) M_P04,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),DMD03) M_P03,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),DMD03) M_P02,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),DMD03) M_P01,
                DECODE(VERSION,TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD'),DMD03) M_P00             
           FROM(
           		 SELECT  VERSION, ITEM_ID,
                 ROUND(DMD03,0) DMD03                
                 FROM APS_PR_PLAN
    		     WHERE VERSION IN(  
        							TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD')  ,
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),
        						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),
         							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),
          					  		TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),
           						 	TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'), 
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD')  
                					)
           		 AND ITEM_ID	=	'$!{item_id}'	)
             )
            GROUP BY ITEM_ID
            UNION ALL
            SELECT  ITEM_ID,
            F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
    		'1' SEL_GUBN,
            '전년동월'    NAME,           
            MAX(M_P15),
            MAX(M_P14),    
            MAX(M_P13),
            MAX(M_P12),
            MAX(M_P11),
            MAX(M_P10),
            MAX(M_P09),
            MAX(M_P08),
            MAX(M_P07),
            MAX(M_P06),
            MAX(M_P05),
            MAX(M_P04),
            MAX(M_P03),
            MAX(M_P02),
            MAX(M_P01),
            MAX(M_P00),
            0 M_M01,
            0 M_M02,
            0 M_M03,
            0 M_M04,
            0 M_M05,
            0 M_M06  
            FROM
  			(	SELECT 		ITEM_ID,   
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD'),DMD04) M_P15,
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'),DMD04) M_P14,      		             
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),DMD04) M_P13,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),DMD04) M_P12,      
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),DMD04) M_P11,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),DMD04) M_P10,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),DMD04) M_P09,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),DMD04) M_P08,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),DMD04) M_P07,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),DMD04) M_P06,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),DMD04) M_P05,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),DMD04) M_P04,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),DMD04) M_P03,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),DMD04) M_P02,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),DMD04) M_P01,
                DECODE(VERSION,TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD'),DMD04) M_P00             
           FROM(
           		 SELECT  VERSION, ITEM_ID,
                 ROUND(DMD04,0) DMD04                
                 FROM APS_PR_PLAN
    		     WHERE VERSION IN(  
        							TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD')  ,
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),
        						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),
         							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),
          					  		TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),
           						 	TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'), 
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD')  
                					)
           		 AND ITEM_ID	=	'$!{item_id}'	)
             )
            GROUP BY ITEM_ID   
			UNION ALL
            SELECT  ITEM_ID,
            F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
    		'1' SEL_GUBN,
            '평균(12개월)'    NAME,           
            MAX(M_P15),
            MAX(M_P14),    
            MAX(M_P13),
            MAX(M_P12),
            MAX(M_P11),
            MAX(M_P10),
            MAX(M_P09),
            MAX(M_P08),
            MAX(M_P07),
            MAX(M_P06),
            MAX(M_P05),
            MAX(M_P04),
            MAX(M_P03),
            MAX(M_P02),
            MAX(M_P01),
            MAX(M_P00),
            0 M_M01,
            0 M_M02,
            0 M_M03,
            0 M_M04,
            0 M_M05,
            0 M_M06  
            FROM
  			(	SELECT 		ITEM_ID,   
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD'),DMD05) M_P15,
            	DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'),DMD05) M_P14,      		             
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),DMD05) M_P13,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),DMD05) M_P12,      
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),DMD05) M_P11,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),DMD05) M_P10,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),DMD05) M_P09,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),DMD05) M_P08,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),DMD05) M_P07,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),DMD05) M_P06,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),DMD05) M_P05,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),DMD05) M_P04,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),DMD05) M_P03,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),DMD05) M_P02,
                DECODE(VERSION,TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),DMD05) M_P01,
                DECODE(VERSION,TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD'),DMD05) M_P00             
           FROM(
           		 SELECT  VERSION, ITEM_ID,
                 ROUND(DMD05,0) DMD05                
                 FROM APS_PR_PLAN
    		     WHERE VERSION IN(  
        							TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMMDD')  ,
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1),'MM'),'YYYYMMDD'),
        							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-2),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-3),'MM'),'YYYYMMDD'),
        						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-4),'MM'),'YYYYMMDD'),
         							TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-5),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-6),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-7),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-8),'MM'),'YYYYMMDD'),
          						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-9),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-10),'MM'),'YYYYMMDD'),
          					  		TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-11),'MM'),'YYYYMMDD'),
         						    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-12),'MM'),'YYYYMMDD'),
           						 	TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-13),'MM'),'YYYYMMDD'),
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-14),'MM'),'YYYYMMDD'), 
                                    TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-15),'MM'),'YYYYMMDD')                             
                					)
           		 AND ITEM_ID	=	'$!{item_id}'	)
             )
            GROUP BY ITEM_ID 
            UNION ALL
            SELECT  
            ITEM_ID,
            F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME, 
    		'2' SEL_GUBN,
            '입고량'    NAME,
            MON_P15 M_P15,   
            MON_P14 M_P14,
            MON_P13 M_P13,
            MON_P12 M_P12,
            MON_P11 M_P11,
            MON_P10 M_P10,
            MON_P09 M_P09,
            MON_P08 M_P08,
            MON_P07 M_P07,
            MON_P06 M_P06,
            MON_P05 M_P05,
            MON_P04 M_P04,
            MON_P03 M_P03,
            MON_P02 M_P02,
            MON_P01 M_P01,
            MON_M00 M_P00, 
            MON_M01 M_M01,
            MON_M02 M_M02,
            MON_M03 M_M03,
            MON_M04 M_M04,
            MON_M05 M_M05,
            MON_M06 M_M06  
        	FROM  DC_RECEIVE_PR
        	WHERE VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
        	AND	  ITEM_ID = '$!{item_id}'
        	AND	  GUBN = '1'
    	  UNION ALL 
    	  SELECT MAX(ITEM_ID),
          F_GET_ITEM_NAME(MAX(ITEM_ID)) ITEM_NAME, 
    	  '2' SEL_GUBN,
          '발주량'    NAME, 
          0 M_P15, 
          0 M_P14, 
          0 M_P13, 
          0 M_P12, 
          0 M_P11, 
          0 M_P10,          
      	  0 M_P09,
          0 M_P08,
          0 M_P07,
          0 M_P06,
          0 M_P05,
          0 M_P04,
          0 M_P03,
          0 M_P02,
          0 M_P01,
          0 M_P00,
          NVL(ROUND(MAX(M1_QTY)),0) M_M01,
          NVL(ROUND(MAX(M2_QTY)),0) M_M02,
          NVL(ROUND(MAX(M3_QTY)),0) M_M03,
          NVL(ROUND(MAX(M4_QTY)),0) M_M04,
          NVL(ROUND(MAX(M5_QTY)),0) M_M05,
          NVL(ROUND(MAX(M6_QTY)),0) M_M06
          FROM  				                 
          (
              SELECT  ITEM_ID,
                      CNFM_DATE,
                      NVL(M1_QTY,0) M1_QTY,
                      NVL(M2_QTY,0) M2_QTY,
                      NVL(M3_QTY,0) M3_QTY,
                      NVL(M4_QTY,0) M4_QTY,
                      NVL(M5_QTY,0) M5_QTY,
                      NVL(M6_QTY,0) M6_QTY 
              FROM	  HAWA_STOCK_SUUPORT_PLAN
              WHERE   ITEM_ID	= '$!{item_id}'
			  AND	  CNFM_DATE	= '$!{version}'		
          )
             
         
	</query>
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw3_20141201">  <!-- 상품발주계획 Grid3 쿼리 변경 이강욱 -->
         -- DW 3 재고 전개
        /* 재고량 */
        SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
        		'0' SEL_GUBN,
                '재고량'    NAME,
                0 MON_P15, 0 MON_P14, 0 MON_P13,
                0 MON_P12, 0 MON_P11, 0 MON_P10, 0 MON_P09, 0 MON_P08, 0 MON_P07, 0 MON_P06, 0 MON_P05, 0 MON_P04, 0 MON_P03, 0 MON_P02, 0 MON_P01,
                ROUND(STOCK) MON_M00, 0 MON_M01, 0 MON_M02, 0 MON_M03, 0 MON_M04, 0 MON_M05, 0 MON_M06,
                (
                /* 타입팬스 정보 */
                SELECT    CASE
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 0),'YYYYMM') = IPGO_YYMM THEN 0
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 1),'YYYYMM') = IPGO_YYMM THEN 1
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 2),'YYYYMM') = IPGO_YYMM THEN 2
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 3),'YYYYMM') = IPGO_YYMM THEN 3
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 4),'YYYYMM') = IPGO_YYMM THEN 4
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 5),'YYYYMM') = IPGO_YYMM THEN 5
                            WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 6),'YYYYMM') = IPGO_YYMM THEN 6
                            ELSE 0
                        END    TP_FLAG
                FROM    (        
                        SELECT    TO_CHAR(SYSDATE +    LEAD_TIME,'YYYYMM') IPGO_YYMM
                        FROM    (
                                SELECT    CASE
                                            WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
                                                (
                                                SELECT    MAX(LEAD_TIME)
                                                FROM    ITEM_DTL
                                                WHERE    ITEM_ID    = '$!{item_id}'
                                                )
                                            ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
                                        END    LEAD_TIME
                                FROM    ITEM_MST
                                WHERE    ITEM_ID    = '$!{item_id}'
                                )        
                        )
                )    TP_FLAG
        FROM    APS_PR_PLAN    
        WHERE    VERSION    = '$!{version}'
        AND        ITEM_ID    = '$!{item_id}'
        UNION    ALL
        /* manugistics소요량/사용량(1), 입고량(2) */
        SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
        		SEL_GUBN,
                SUBSTR(F_GET_CODE_NAME('SEL_DMD',SEL_DMD),3,30)    NAME,
				NVL(MON_P15,0)    MON_P15, NVL(MON_P14,0)    MON_P14, NVL(MON_P13,0)    MON_P13,
                NVL(MON_P12,0)    MON_P12, NVL(MON_P11,0)    MON_P11, NVL(MON_P10,0)    MON_P10, NVL(MON_P09,0)    MON_P09, NVL(MON_P08,0)    MON_P08, NVL(MON_P07,0)    MON_P07, 
                NVL(MON_P06,0)    MON_P06, NVL(MON_P05,0)    MON_P05, NVL(MON_P04,0)    MON_P04, NVL(MON_P03,0)    MON_P03, NVL(MON_P02,0)    MON_P02, NVL(MON_P01,0)    MON_P01,
                NVL(MON_M00,0)    MON_M00, NVL(MON_M01,0)    MON_M01, NVL(MON_M02,0)    MON_M02, NVL(MON_M03,0)    MON_M03, NVL(MON_M04,0)    MON_M04, NVL(MON_M05,0)    MON_M05, NVL(MON_M06,0)    MON_M06,
                NULL TP_FLAG 
        FROM    APS_PR_DW    
        WHERE    VERSION    = '$!{version}'
        AND        SEL_DMD    NOT IN ('DMD01','DMD02','DMD06','DMD07')  --MANU,판매계획,전주사용량,3주평균 제거 안영진 부장 요청
        AND        ITEM_ID    = '$!{item_id}'
        AND        SEL_GUBN    = '1'
        UNION    ALL
        /* 입고량(2) */
        SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
        		SEL_GUBN,
                '입고량'    NAME,
				NVL(MON_P15,0)    MON_P15, NVL(MON_P14,0)    MON_P14, NVL(MON_P13,0)    MON_P13,
                NVL(MON_P12,0)    MON_P12, NVL(MON_P11,0)    MON_P11, NVL(MON_P10,0)    MON_P10, NVL(MON_P09,0)    MON_P09, NVL(MON_P08,0)    MON_P08, NVL(MON_P07,0)    MON_P07, 
                NVL(MON_P06,0)    MON_P06, NVL(MON_P05,0)    MON_P05, NVL(MON_P04,0)    MON_P04, NVL(MON_P03,0)    MON_P03, NVL(MON_P02,0)    MON_P02, NVL(MON_P01,0)    MON_P01,
                NVL(MON_M00,0)    MON_M00, NVL(MON_M01,0)    MON_M01, NVL(MON_M02,0)    MON_M02, NVL(MON_M03,0)    MON_M03, NVL(MON_M04,0)    MON_M04, NVL(MON_M05,0)    MON_M05, NVL(MON_M06,0)    MON_M06,
                NULL TP_FLAG 
        FROM    APS_PR_DW    
        WHERE    VERSION    = '$!{version}'
        AND        SEL_DMD    = 'DMD01'
        AND        ITEM_ID    = '$!{item_id}'
        AND        SEL_GUBN = '2'
        UNION    ALL
        /* 셋트제품  */
        SELECT  T2.ITEM_ID, F_GET_ITEM_NAME(T2.ITEM_ID) ITEM_NAME,
        		'11'    SEL_GUBN,
                '셋트제품'    NAME,
                ROUND(SUM(NVL(MON_P15,0)/T2.CONV_RATE),0)    MON_P15, ROUND(SUM(NVL(MON_P14,0)/T2.CONV_RATE),0)    MON_P14, ROUND(SUM(NVL(MON_P13,0)/T2.CONV_RATE),0)    MON_P13,
                ROUND(SUM(NVL(MON_P12,0)/T2.CONV_RATE),0)    MON_P12, ROUND(SUM(NVL(MON_P11,0)/T2.CONV_RATE),0)    MON_P11, ROUND(SUM(NVL(MON_P10,0)/T2.CONV_RATE),0)    MON_P10, ROUND(SUM(NVL(MON_P09,0)/T2.CONV_RATE),0)    MON_P09, ROUND(SUM(NVL(MON_P08,0)/T2.CONV_RATE),0)    MON_P08, ROUND(SUM(NVL(MON_P07,0)/T2.CONV_RATE),0)    MON_P07, 
                ROUND(SUM(NVL(MON_P06,0)/T2.CONV_RATE),0)    MON_P06, ROUND(SUM(NVL(MON_P05,0)/T2.CONV_RATE),0)    MON_P05, ROUND(SUM(NVL(MON_P04,0)/T2.CONV_RATE),0)    MON_P04, ROUND(SUM(NVL(MON_P03,0)/T2.CONV_RATE),0)    MON_P03, ROUND(SUM(NVL(MON_P02,0)/T2.CONV_RATE),0)    MON_P02, ROUND(SUM(NVL(MON_P01,0)/T2.CONV_RATE),0)    MON_P01,
                ROUND(SUM(NVL(MON_M00,0)/T2.CONV_RATE),0)    MON_M00, ROUND(SUM(NVL(MON_M01,0)/T2.CONV_RATE),0)    MON_M01, ROUND(SUM(NVL(MON_M02,0)/T2.CONV_RATE),0)    MON_M02, ROUND(SUM(NVL(MON_M03,0)/T2.CONV_RATE),0)    MON_M03, ROUND(SUM(NVL(MON_M04,0)/T2.CONV_RATE),0)    MON_M04, ROUND(SUM(NVL(MON_M05,0)/T2.CONV_RATE),0)    MON_M05, ROUND(SUM(NVL(MON_M06,0)/T2.CONV_RATE),0)    MON_M06,
                NULL TP_FLAG 
        FROM    APS_PR_DW    T1,
                (                
                /* 유통가공 구성품 환산 */
                 --  MBOM의 CONS_QTY수량은 결국 유통가공품 1BOX를 만드는데 소요되는 EQ수량이다
                 --  유통가공품이 보통 단위가 SET이지만 BOX로 환산하면 결국 1BOX이다.
                 --  그러므로 유통가공품 1BOX에 들어간 구성품 BOX수량은 CONS_QTY/낱개입수량이다. 
                SELECT    T1.CONS_ITEM_ID    ITEM_ID,
                        T1.PROD_ITEM_ID    PROD_ITEM_ID,
                        MAX(T1.CONS_QTY)/MAX(T2.BASE_QTY) CONV_RATE
                FROM    MBOM        T1,
                        CONV_UOM    T2
                WHERE    T1.CONS_ITEM_TYPE    = 'HAWA'
                AND        T1.CONS_ITEM_ID    = T2.ITEM_ID
                AND        T1.CONS_QTY_UOM = T2.BASE_UOM
                AND        T2.CONV_UOM        = 'BOX'
                AND        T1.CONS_ITEM_ID    = '$!{item_id}'
                AND		T1.PROD_VER			=
												(	SELECT	MAX(PROD_VER)	PROD_VER
													FROM	MBOM
													WHERE	T1.CONS_ITEM_ID	=	CONS_ITEM_ID
													AND		T1.PROD_ITEM_ID	=	PROD_ITEM_ID
													AND		CONS_ITEM_TYPE	=	'HAWA'
												)	                     
                GROUP
                BY        T1.CONS_ITEM_ID,
                        T1.PROD_ITEM_ID            
                )            T2
        WHERE    T1.VERSION    = '$!{version}'
        AND        T1.SEL_DMD    = 'DMD02'   --   판매계획
        AND        T1.ITEM_ID    = T2.PROD_ITEM_ID
        AND        T1.SEL_GUBN    = '1'
        GROUP BY	T2.ITEM_ID
        ORDER
        BY        3,	4
	</query>	
			
	

	<!--  품종 중분류  -->  
	<query id="op_02010_Long_Term_Planning_list_Hawa_combo" > 
		SELECT	CD, CD_NAME
		FROM	CODE_MST
		WHERE	CD_GRP ='SALES_CAT2'
		AND		MADE_TYPE != 'DE'
		AND		CD NOT LIKE '%10%'
	</query> 

            
	<!-- DW 5 거래처 유형별 정보 -->
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw5">
         -- DW 5 거래처 유형별 정보
        SELECT    T2.CUST_TYPE_CODE,
                T2.CODE_NAME1,
                SUM(NOW_SELL_BOX)        NOW_SELL_BOX,
                SUM(NOW_GOAL_BOX)        NOW_GOAL_BOX,
                SUM(PRE_SELL_BOX)        PRE_SELL_BOX,
                SUM(PRE_GOAL_BOX)        PRE_GOAL_BOX
        FROM    (
                SELECT    CUST_TYPE,
                        SUM(QTY)            NOW_SELL_BOX,
                        0                    NOW_GOAL_BOX,
                        0                    PRE_SELL_BOX,
                        0                    PRE_GOAL_BOX
                FROM    SALES_ACT
                WHERE    SALE_DATE    BETWEEN    TRUNC(TO_DATE('$!{work_date}','YYYY-MM-DD'),'MM')
                                    AND        TO_DATE('$!{work_date}','YYYY-MM-DD')-1
                AND        ITEM_ID    = '$!{item_id}'
                GROUP
                BY        CUST_TYPE
                UNION    ALL
                SELECT    CUST_TYPE,
                        0                    NOW_SELL_BOX,
                        0                    NOW_GOAL_BOX,
                        SUM(QTY)            PRE_SELL_BOX,
                        0                    PRE_GOAL_BOX
                FROM    SALES_ACT
                WHERE    SALE_DATE    BETWEEN    TRUNC(ADD_MONTHS(TO_DATE('$!{work_date}','YYYY-MM-DD'),-1),'MM')    
                                    AND    LAST_DAY(ADD_MONTHS(TO_DATE('$!{work_date}','YYYY-MM-DD'),-1))
                AND        ITEM_ID    = '$!{item_id}'
                GROUP
                BY        CUST_TYPE
                UNION    ALL
                SELECT    /*+USE_HASH(T1,T2)*/TA2.CUST_TYPE_CODE,
                        0                   NOW_SELL_BOX,
                        SUM(DECODE(TA1.CNFM_YYMM,TO_CHAR(TO_DATE('$!{work_date}','YYYY-MM-DD'),'YYYYMM'),TA1.GOAL_BOX))    NOW_GOAL_BOX,
                        0                    PRE_SELL_BOX,
                        SUM(DECODE(TA1.CNFM_YYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{work_date}','YYYY-MM-DD'),-1),'YYYYMM'),TA1.GOAL_BOX))    PRE_GOAL_BOX
                FROM    (
                        SELECT    CNFM_YYMM,
                                PROD_CODE,
                                CUST_CODE,
                                SUM(GOAL_BOX)    GOAL_BOX
                        FROM    SDPLT103    TX
                        WHERE    CNFM_YYMM    BETWEEN    TO_CHAR(ADD_MONTHS(TO_DATE('$!{work_date}','YYYY-MM-DD'),-1),'YYYYMM')    
                                            AND        TO_CHAR(TO_DATE('$!{work_date}','YYYY-MM-DD'),'YYYYMM')
                        AND        PROD_CODE    = '$!{item_id}'
                        GROUP
                        BY        CNFM_YYMM,
                                PROD_CODE,
                                CUST_CODE
                        )        TA1,
                        (
                        SELECT    CUST_CODE, NVL(GRUP_CODE1,'99')    CUST_TYPE_CODE
                        FROM    SDSTT103
                        WHERE    SALE_ORG    = '1000'
                        )        TA2
                WHERE    TA1.CUST_CODE        =    TA2.CUST_CODE
                GROUP
                BY        TA2.CUST_TYPE_CODE
                )        T1,
                (
                SELECT    CD        CUST_TYPE_CODE,
                        CD_NAME    CODE_NAME1    
                FROM    CODE_MST
                WHERE    CD_GRP = 'FCST_GRPCD'
                )        T2
        WHERE    T1.CUST_TYPE = T2.CUST_TYPE_CODE
        GROUP
        BY        T2.CUST_TYPE_CODE,
                T2.CODE_NAME1
        ORDER
        BY        T2.CUST_TYPE_CODE
	</query>	

        
	<!-- DW 6 품목별GYR -->
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw6">
		/* 품목별GYR */
		SELECT	T1.ITEM_CD,
				T1.ITEM_NM,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - G_FR),-1,0,STOCKBOX)),0)	G_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - Y_FR),-1,0,
					DECODE(SIGN(AVAIL_DATE - Y_TO),1,0,STOCKBOX))),0)		Y_ZONE,
				ROUND(SUM(DECODE(SIGN(AVAIL_DATE - R_TO),1,0,STOCKBOX)),0)	R_ZONE
				--ROUND(SUM(STOCKBOX),0)										TOT
		FROM	(
				SELECT	SUBSTR(T1.CENTER_CD,5,4)			DC_ID,
						T1.ITEM_CD,
						T2.ITEM_NM,
						T1.PERIOD_DATE						AVAIL_DATE,
						NVL(T1.KEEP_PALLET,0)*T2.BOX_IN_PLT + NVL(KEEP_BOX,0) +
						NVL(T1.PICKING_PALLET,0)*T2.BOX_IN_PLT + NVL(PICKING_BOX,0)	STOCKBOX
				FROM	GYRINFO		T1,
						CMITEM		T2
				WHERE	T1.ITEM_CD	= T2.ITEM_CD
				AND		T1.ITEM_CD	= '$!{item_id}'
				AND		T1.OUTBOUND_DATE =	(-- 최근 GYR조사일자
											SELECT	MAX(OUTBOUND_DATE)
											FROM	(
													SELECT	OUTBOUND_DATE
													FROM	GYRINFO
													WHERE	OUTBOUND_DATE BETWEEN ADD_MONTHS(SYSDATE,-12) AND TRUNC(SYSDATE)
													HAVING	COUNT(DISTINCT CENTER_CD) > 20
													GROUP
													BY		OUTBOUND_DATE
													)
											)
				)	T1,
				(
				/* 품목별 GYR 기준 */
				SELECT	ITEM_CD														ITEM_CD,
						TRUNC(SYSDATE) + R_DAY 				R_TO,
						TRUNC(SYSDATE) + R_DAY	+ 1			Y_FR,
						TRUNC(SYSDATE) + R_DAY + Y_DAY 		Y_TO,
						TRUNC(SYSDATE) + R_DAY + Y_DAY	+ 1	G_FR
				FROM	(
						SELECT	ITEM_CD,
								ROUND(DAY_CNT*G_RATE/100)	G_DAY,
								ROUND(DAY_CNT*Y_RATE/100)	Y_DAY,
								ROUND(DAY_CNT*R_RATE/100)	R_DAY
						FROM	(
								SELECT	T1.ITEM_CD,
										ADD_MONTHS(TRUNC(SYSDATE),
											TO_NUMBER(TERM_VAL)) - TRUNC(SYSDATE)	DAY_CNT,
										G_RATE,
										Y_RATE,
										R_RATE
								FROM	CMITEMGYR	T1,
										(
										/* WMS master */
										SELECT	ITEM_CD,
												TERM_VAL
										FROM	CMITEM
										WHERE	TERM_VAL > 0
										)			T2
								WHERE	T1.ITEM_CD = T2.ITEM_CD
								)
						)
				)		T2
		WHERE	T1.ITEM_CD		= T2.ITEM_CD
		GROUP
		BY		T1.ITEM_CD,
				T1.ITEM_NM
		ORDER
		BY		T1.ITEM_CD
	</query>	
                    

	<!-- DW 7 연간월별목표VS실적 -->
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw7">
		 -- DW 7 연간월별목표 VS 실적
		SELECT	TA1.MM||'월',
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-0), TA1.GOAL_BOX, 0))    GOAL_YM0,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-0), TA1.SELL_BOX, 0))    SELL_YM0,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-1), TA1.GOAL_BOX, 0))    GOAL_YM1,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-1), TA1.SELL_BOX, 0))    SELL_YM1,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-2), TA1.GOAL_BOX, 0))    GOAL_YM2,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-2), TA1.SELL_BOX, 0))    SELL_YM2,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3), TA1.GOAL_BOX, 0))    GOAL_YM3,
                SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3), TA1.SELL_BOX, 0))    SELL_YM3
        FROM    (
                SELECT    YYYY,
                        MM,
                        SUM(GOAL_BOX)            GOAL_BOX,
                        SUM(SELL_BOX)            SELL_BOX
                FROM    (
                        SELECT    SUBSTR(A.CNFM_YYMM,1,4)    YYYY,
                                SUBSTR(A.CNFM_YYMM,5,2)    MM,
                                A.GOAL_BOX                    GOAL_BOX,
                                0                            SELL_BOX
                        FROM    SDPLT102    A
                        WHERE    A.CNFM_YYMM    BETWEEN        TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'01'
                                            AND            TO_CHAR(TO_DATE('$!{work_date}','YYYY-MM-DD'),'YYYYMM')
                        AND        A.PROD_CODE                = '$!{item_id}'
                        AND        LENGTH(A.DEPT_CODE)        =    3
--                        UNION    ALL
--                        SELECT    TO_CHAR(A.SALE_DATE,'YYYY')    YYYY,
--                                TO_CHAR(A.SALE_DATE,'MM')    MM,
--                                0                        GOAL_BOX,
--                                SUM(A.QTY)            SELL_BOX
--                        FROM    SALES_ACT    A
--                        WHERE    A.SALE_DATE    BETWEEN    TO_DATE(TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'0101','YYYY-MM-DD')
--                                            AND        TO_DATE('$!{work_date}', 'YYYY-MM-DD')
--                        AND        ITEM_ID    = '$!{item_id}'
--                        GROUP
--                        BY        TO_CHAR(A.SALE_DATE,'YYYY'),
--                                TO_CHAR(A.SALE_DATE,'MM')
						-----------------------------------------------
                        UNION    ALL
                        SELECT  SUBSTR(A.CNFM_YYMM,1,4)        YYYY,  
                                SUBSTR(A.CNFM_YYMM,5,2)        MM,
                                0                                GOAL_BOX,
                                A.SELL_BOX                       SELL_BOX
                        FROM    SDRDT104   A  --
                        WHERE    A.CNFM_YYMM    BETWEEN    TO_CHAR(TO_DATE(TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'0101','YYYY-MM-DD'),'YYYYMM')
                                            	AND        TO_CHAR(TO_DATE('$!{work_date}', 'YYYY-MM-DD'),'YYYYMM')
                        AND        A.PROD_CODE   = '$!{item_id}'

                        )
                GROUP
                BY        YYYY,
                        MM
                )        TA1
        GROUP
        BY        TA1.MM
        ORDER
        BY        TA1.MM
	</query>	
    
    
	<!-- DW 7 연간월별목표VS실적 -->
	<query id="op_02010_Long_Term_Planning_list_Hawa_dw7_org">
		 -- DW 7 연간월별목표, 실적
	    SELECT    TA1.MM||'월',
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-0), TA1.GOAL_BOX, 0))    GOAL_YM0,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-0), TA1.SELL_BOX, 0))    SELL_YM0,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-1), TA1.GOAL_BOX, 0))    GOAL_YM1,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-1), TA1.SELL_BOX, 0))    SELL_YM1,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-2), TA1.GOAL_BOX, 0))    GOAL_YM2,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-2), TA1.SELL_BOX, 0))    SELL_YM2,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3), TA1.GOAL_BOX, 0))    GOAL_YM3,
	            SUM(DECODE(TA1.YYYY, TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3), TA1.SELL_BOX, 0))    SELL_YM3
	    FROM    (
	            SELECT    YYYY,
	                    MM,
	                    SUM(GOAL_BOX)            GOAL_BOX,
	                    SUM(SELL_BOX)            SELL_BOX
	            FROM    (
	                    SELECT  SUBSTR(T1.CNFM_YYMM,1,4)    YYYY,
	                            SUBSTR(T1.CNFM_YYMM,5,2)    MM,
	                            SUM(T2.GOAL_BOX)            GOAL_BOX,
	                            0                            SELL_BOX
	                    FROM    (
	                            SELECT    /*+    USE_HASH(A, B)    */
	                                    A.CNFM_YYMM            CNFM_YYMM,
	                                    MAX(A.PROD_CODE)    PROD_CODE
	                            FROM    SDPLT102    A
	                            WHERE    A.CNFM_YYMM    BETWEEN    TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'01'
	                                                AND        SUBSTR('$!{work_date}', 1, 6)
	                            AND        A.PROD_CODE    = '$!{item_id}'
	                            GROUP
	                            BY        CNFM_YYMM
	                            )            T1,
	                            SDPLT102    T2
	                    WHERE    T2.CNFM_YYMM = T1.CNFM_YYMM
	                    AND        T2.PROD_CODE = T1.PROD_CODE
	                    AND        LENGTH(T2.DEPT_CODE)    = 3
	                    GROUP
	                    BY        T1.CNFM_YYMM
                        UNION    ALL
                        SELECT    TO_CHAR(A.SALE_DATE,'YYYY')    YYYY,
                                TO_CHAR(A.SALE_DATE,'MM')    MM,
                                0                        GOAL_BOX,
                                SUM(A.QTY)            SELL_BOX
                        FROM    SALES_ACT    A
                        WHERE    A.SALE_DATE    BETWEEN    TO_DATE(TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'0101','YYYY-MM-DD')
                                            AND        TO_DATE('$!{work_date}', 'YYYY-MM-DD')
                        AND        ITEM_ID    = '$!{item_id}'
                        GROUP
                        BY        TO_CHAR(A.SALE_DATE,'YYYY'),
                                TO_CHAR(A.SALE_DATE,'MM')
                        -----------------------------------------------
--                        UNION    ALL
--                        SELECT  SUBSTR(A.CNFM_YYMM,1,4)        YYYY,  
--                                SUBSTR(A.CNFM_YYMM,5,6)        MM,
--                                0                                GOAL_BOX,
--                                A.SELL_BOX                       SELL_BOX
--                        FROM    SDRDT104   A  --
--                        WHERE    A.CNFM_YYMM    BETWEEN    TO_CHAR(TO_DATE(TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'0101','YYYY-MM-DD'),'YYYYMM')
--                                                AND        TO_CHAR(TO_DATE('$!{work_date}', 'YYYY-MM-DD'),'YYYYMM')
--                        AND        A.PROD_CODE   = '$!{item_id}'
	                    )
	            GROUP
	            BY        YYYY,
	                    MM
	            )        TA1,
	            (
	            SELECT    SUBSTR(CNFM_YYMM, 1, 4)    YYYY,
	                    SUBSTR(CNFM_YYMM, 5, 2)    MM
	            FROM    (
	                    SELECT    DISTINCT SUBSTR(YYYYMMDD, 1,6)    CNFM_YYMM
	                    FROM    CAL_MST
	                    WHERE    YYYYMMDD    BETWEEN    TO_CHAR(TO_NUMBER(SUBSTR('$!{work_date}', 1, 4))-3)||'0101'
	                                        AND        '$!{work_date}'
	                    )
	            )        TA2
	    WHERE    TA1.YYYY        =    TA2.YYYY
	    AND        TA1.MM            =    TA2.MM
	    GROUP
	    BY        TA1.MM
	    ORDER
	    BY        TA1.MM
	</query>	


	<!-- 자재현황 조회 대상 리스트 op_02020_Long_Term_Planning_list_roh -->
	<query id="op_02020_Long_Term_Planning_list_roh">
		<!-- 자재현황 조회  대상 리스트-->
		SELECT  ITEM_ID,
		        ITEM_NAME,
		        TERMVAL,        --  유통기한
                TRIM(TO_CHAR(
                LEAD_TIME
                ,999999999990.9)) LEAD_TIME, --  리드타임
                BASE_UOM,									--   기본단위			
		        ROUND(STOCK),            --  현재고
		        ROUND(ETA),            --  진행중재고
		        ROUND(TOT_STOCK),         --  총재고
		        SEL_DMD,        --  선택구분
		        ROUND(STD_STOCK),        --  기준재고
		        ROUND(SAFETY_STOCK),    --  안전재고
		        SAFETY_FACTOR,        --  안전계수    
		        DMD05,            --  평균
                DECODE(DMD05,0,0,
                TRIM(TO_CHAR(
		        ROUND((STD_DEV/DMD05)*100,1) 
                ,999999999990.9))) STD_DEV, --  표준편차
		        DMD03,            --  3개월평균
		        DMD04,            --  전년동월
		        ROUND(USE_CUM_MONTH),    --  당월누계
		        MIN_LOT_SIZE,    --  최소발주량
                --  발주시기 = (총재고-안전재고)/기준재고 가 1보다 작을때
                --  (총재고-안전재고)/기준재고 - 1 - 리드타임
                TRIM(TO_CHAR(
                DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시 
                 DECODE(PR_DATE_NO, 0, 
                 ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1)
                 , PR_DATE_NO))    
                 ,999999999990.9)) PR_DATE_NO,
                DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
                DECODE(PR_QTY, 0,
                CASE
                    WHEN MIN_LOT_SIZE = 0 THEN STD_STOCK
                    WHEN STD_STOCK > MIN_LOT_SIZE THEN
                        CEIL(STD_STOCK/MIN_LOT_SIZE) * MIN_LOT_SIZE
                    ELSE MIN_LOT_SIZE
                END    
                , PR_QTY)) PR_QTY,
                DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
                -- 입고시기는 현재+리드타임 //2010-08-25  황현철 요청 으로 변경
                    CASE
                    WHEN ENTR_DATE = 0 
                    THEN TO_CHAR(TRUNC(SYSDATE) + TOT_LEAD_TIME   ,'YYYY-MM-DD')
                    ELSE TO_CHAR(TO_DATE(ENTR_DATE),'YYYY-MM-DD')
                    END ) ENTR_DATE
--                DECODE(STD_STOCK, 0, NULL,    -- STD_STOCK (기준재고)가 0일 경우 빈칸 표시
--                -- 입고시기는 현재+발주시기+리드타임
--                    CASE
--                    WHEN ENTR_DATE = 0 
--                    THEN TO_CHAR(TRUNC(SYSDATE) + (ROUND((TOT_STOCK - SAFETY_STOCK)/STD_STOCK,1) + LEAD_TIME) *30   ,'YYYY-MM-DD')
--                    ELSE TO_CHAR(TO_DATE(ENTR_DATE),'YYYY-MM-DD')
--                    END ) ENTR_DATE
				,EDIT_FLAG
				,CASE
					WHEN IF_FLAG = 'I'	THEN '전송전'
					WHEN IF_FLAG = 'P'	THEN '전송중'
					WHEN IF_FLAG = 'S'	THEN '완료'
					WHEN IF_FLAG = 'E'	THEN '오류'
					ELSE IF_FLAG
				END		IF_FLAG
                ,PR_NO
                ,IF_MSGS
                ,TOT_LEAD_TIME
                ,ITYPE
		FROM    (
		        SELECT  ITEM_ID,
		        		ITYPE,
		                ITEM_NAME,
		                TERMVAL,         	--   유통기한
		                TOT_LEAD_TIME,		--TOT_LEAD_TIME (리드타임 일자 변환)
		                LEAD_TIME,         	--   리드타임
		                STOCK,             	--   현재고
		                ETA,             	--   진행중재고
		                TOT_STOCK,          --   총재고
		                SEL_DMD,         	--   선택구분
		                STD_STOCK,         	--   기준재고
		                 --   안전재고 = 리드타임 * 기준재고 * 안전계수(default 1)
		                LEAD_TIME * STD_STOCK * DECODE(SAFETY_FACTOR,0, 1, SAFETY_FACTOR)    SAFETY_STOCK,     --   안전재고
		                DECODE(SAFETY_FACTOR,0, 1, SAFETY_FACTOR)        SAFETY_FACTOR,         --   안전계수
		                NVL(DMD05,0)			DMD05,             --   평균
		                STD_DEV,         --   표준편차
		                DMD03,             --   3개월평균
		                DMD04,             --   전년동월
		                USE_CUM_MONTH,     --   당월누계
		                MIN_LOT_SIZE,     --   최소발주량
		                 PR_DATE_NO,		--   발주시기
		                 PR_QTY,			--   발주수량
		                ENTR_DATE		--   입고일
		                ,BASE_UOM									--   기본단위
		                ,EDIT_FLAG
		                 ,IF_FLAG
		                ,PR_NO
		                ,IF_MSGS
		        FROM    (
		                SELECT  S1.ITEM_ID,
		                		S1.ITYPE,
		                        S1.ITEM_NAME,
		                        S1.TERMVAL,
                                --TOT_LEAD_TIME (리드타임 일자 변환)
                                (NVL(PR_TO_PO,0)+NVL(PO_TO_LC ,0)+NVL(LC_TO_PORT ,0)+NVL(PORT_TO_CUST ,0)) TOT_LEAD_TIME,
		                        ROUND((NVL(PR_TO_PO,0)+NVL(PO_TO_LC ,0)+NVL(LC_TO_PORT ,0)+NVL(PORT_TO_CUST ,0))/30,1) LEAD_TIME, --   리드타임은 월단위로 정정 
		                        NVL(S2.STOCK,0)    STOCK,                   --   현재고
		                        NVL(S2.ETA,0)    ETA,                       --   진행중 재고
		                        NVL(S2.STOCK,0)    + NVL(S2.ETA,0)    TOT_STOCK,      --   총재고
		                        SEL_DMD,                                    --   선택구분
		                        STD_STOCK,                                  --   기준재고
		                        NVL(S2.DMD03,0)    DMD03,                   --   기준재고(3개월)
		                        NVL(S2.DMD04,0)    DMD04,                   --   기준재고(전년동월)
		                        NVL(S2.DMD05,0)    DMD05,                   --   평균(과거12개월)
		                        NVL(S2.STD_DEV,0)    STD_DEV,               --   표준편차
		                        NVL(S2.USE_CUM_MONTH ,0)    USE_CUM_MONTH,  --   당월누계
		                        NVL(S2.SAFETY_FACTOR ,0)	SAFETY_FACTOR,	--   안전계수 
				                 NVL(S2.PR_DATE_NO ,0)		PR_DATE_NO,		--   발주시기
				                 NVL(S2.PR_QTY ,0)			PR_QTY,			--   발주수량
				                NVL(S2.ENTR_DATE ,0)		ENTR_DATE,		--   입고일
		                        --( -- ERP 관리포인트인 최소발주량을 APS에서 관리하도록 수정 
		                        --SELECT    MAX(MIN_LOT_SIZE)
		                        --FROM    ITEM_DTL    S3
		                        --WHERE    S1.ITEM_ID    = S3.ITEM_ID
		                        --)    MIN_LOT_SIZE
		                        MINMPSQTY    MIN_LOT_SIZE, 					-- 최소발주량
				                BASE_UOM,									-- 기본단위
                                 CASE
                                     WHEN S3.IF_FLAG IS NULL
                                     THEN S2.IF_FLAG
                                     ELSE S3.IF_FLAG
                                 END IF_FLAG
                                ,EDIT_FLAG
                                ,S3.PR_NO
                                ,S3.IF_MSGS				                
		                FROM    ITEM_MST			S1,
		                        APS_PR_PLAN_ROH		S2,
                                (
                                SELECT  VERSION, ITEM_ID, 
                                        MIN(IF_FLAG) IF_FLAG,
                                        MIN(IF_MSGS) IF_MSGS,
                                        MIN(PR_NO) PR_NO
                                FROM    APS_PR_PLAN_IF
                                WHERE	VERSION    = TO_CHAR(SYSDATE,'YYYYMMDD')
                                GROUP   
                                BY      VERSION, ITEM_ID                                    
                                ) S3		                        
		                WHERE	S1.ITEM_ID    = S2.ITEM_ID(+)
                        AND     S2.ITEM_ID    = S3.ITEM_ID(+)
		                AND     S2.VERSION    =TO_CHAR(SYSDATE,'YYYYMMDD')
		                #if ( "$!{item_type}" != 'ROH1' )	--2013-05-13 원자재 모두 조회되게 추가
		                AND     NVL(S1.DOMAIN,'X')	LIKE '%'||'$!{domain1}'||'%'
						#end								--2013-05-13 원자재 모두 조회되게 추가
						#if ( "$!{edit_flag}" == 'Y' )
		                AND		S2.EDIT_FLAG  = 'Y'
						#else
						#end
						#if ( "$!{item_type}" == 'ROH1' )
						AND     S1.ITYPE	=	'ROH1' --자재 유형별로 변수 바인딩
						#elseif ( "$!{item_type}" == 'ROH2' )
						AND     S1.ITYPE	=	'ROH2' --자재 유형별로 변수 바인딩
						#elseif ( "$!{item_type}" == 'HALB' )
						AND     S1.ITYPE	=	'HALB' --자재 유형별로 변수 바인딩
						#else
						AND     S1.ITYPE	  IN ('ROH1','ROH2','HALB') --자재 유형별로 변수 바인딩
						#end
		                )
		        )
		-- ORDER BY IF_FLAG, EDIT_FLAG, PR_DATE_NO, ITEM_ID			
		ORDER BY ITEM_ID
	</query>
<!-- -->		

<!-- -->
	<!-- DW 3 재고 전개-->
	<query id="op_02020_Long_Term_Planning_list_roh_dw3">

		SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME, 
				'0' SEL_GUBN, '재고량' SEL_NAME,
                0 MON_P15, 0 MON_P14, 0 MON_P13,
		        0 MON_P12, 0 MON_P11, 0 MON_P10, 0 MON_P09, 0 MON_P08, 0 MON_P07, 0 MON_P06, 0 MON_P05, 0 MON_P04, 0 MON_P03, 0 MON_P02, 0 MON_P01,
		        ROUND(STOCK) MON_M00, 0 MON_M01, 0 MON_M02, 0 MON_M03, 0 MON_M04, 0 MON_M05, 0 MON_M06
		        ,(
		        -- 타입팬스 정보 
		        SELECT    CASE
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 0),'YYYYMM') = IPGO_YYMM THEN 0
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 1),'YYYYMM') = IPGO_YYMM THEN 1
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 2),'YYYYMM') = IPGO_YYMM THEN 2
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 3),'YYYYMM') = IPGO_YYMM THEN 3
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 4),'YYYYMM') = IPGO_YYMM THEN 4
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 5),'YYYYMM') = IPGO_YYMM THEN 5
		                    WHEN TO_CHAR(ADD_MONTHS(SYSDATE, 6),'YYYYMM') = IPGO_YYMM THEN 6
		                    ELSE 0
		                END    TP_FLAG
		        FROM    (        
		                SELECT    TO_CHAR(SYSDATE +    LEAD_TIME,'YYYYMM') IPGO_YYMM
		                FROM    (
		                        SELECT    CASE
		                                    WHEN NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) = 0 THEN 
		                                        (
		                                        SELECT	MAX(LEAD_TIME)
		                                        FROM    ITEM_DTL
		                                        WHERE	ITEM_ID    = '$!{item_id}'    
		                                        )
		                                    ELSE NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0)
		                                END    LEAD_TIME
		                        FROM    ITEM_MST
		                        WHERE	ITEM_ID     = '$!{item_id}'
		                        )        
		                )
		        )    TP_FLAG
		FROM    APS_PR_PLAN_ROH    
		WHERE	VERSION   = TO_CHAR(SYSDATE,'YYYYMMDD')    
		AND		ITEM_ID   = '$!{item_id}'    
		UNION    ALL
		-- 소요량/사용량(1), 입고량(2) 
		SELECT  ITEM_ID, F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,  
				SEL_GUBN, DECODE(SEL_GUBN, 1, '소요/사용량', '입고량') SEL_NAME,				
				-- 과거
				NVL(MON_P15,0)    MON_P15, NVL(MON_P14,0)    MON_P14, NVL(MON_P13,0)    MON_P13, 
				NVL(MON_P12,0)    MON_P12, NVL(MON_P11,0)    MON_P11, NVL(MON_P10,0)    MON_P10, 
		        NVL(MON_P09,0)    MON_P09, NVL(MON_P08,0)    MON_P08, NVL(MON_P07,0)    MON_P07, 
		        NVL(MON_P06,0)    MON_P06, NVL(MON_P05,0)    MON_P05, NVL(MON_P04,0)    MON_P04, 
		        NVL(MON_P03,0)    MON_P03, NVL(MON_P02,0)    MON_P02, NVL(MON_P01,0)    MON_P01,
				#if ( "$!{sel_dmd}" == 'DMD09' )  -- DMD09 : 사용자
		        -- 당월
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M00,0))    MON_M00, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M01,0))    MON_M01, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M02,0))    MON_M02, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M03,0))    MON_M03, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M04,0))    MON_M04, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M05,0))    MON_M05, 
		        DECODE(SEL_GUBN, 1, $!{std_stock}, NVL(MON_M06,0))    MON_M06
				#else
		        -- 당월  sel_dmd = 'DMD09'
		        NVL(MON_M00,0)    MON_M00, NVL(MON_M01,0)    MON_M01, NVL(MON_M02,0)    MON_M02, 
		        NVL(MON_M03,0)    MON_M03, NVL(MON_M04,0)    MON_M04, NVL(MON_M05,0)    MON_M05, NVL(MON_M06,0)    MON_M06
				#end 
		        ,0 TP_FLAG 
		FROM    APS_PR_DW_ROH    
		WHERE	VERSION     = TO_CHAR(SYSDATE,'YYYYMMDD')    
		AND		SEL_DMD   = '$!{sel_dmd}'    
		AND		ITEM_ID   = '$!{item_id}'  
		-- ORDER	BY        3
		ORDER	BY        1
	</query>	
	
<!-- SSRULE 콤보  -->
	<query id="sel_dmd_list_2">
	-- 자재현황 조회 사용
		SELECT  CD, CD_NAME
        FROM    CODE_MST 
        WHERE   CD_GRP = 'DOMAIN'
		#if ( "$!{item_type}" == 'ROH1')
        AND	CAT03='ROH1'
		#elseif( "$!{item_type}" == 'ROH2')
        AND	CAT03='ROH2'
		#elseif( "$!{item_type}" == 'HALB')
        AND	CAT03='HALB'            
		#end   
		ORDER	BY		TO_NUMBER(CAT01)
	</query>	
	

<!-- 제품별 자재현황 조회  -->
	<query id="op_02030_Material_Refreshing_List">	
#if("$!{cons_item_id}"!="")	
	SELECT	DECODE(F_GET_PROD_ITEM_COUNT(CONS_ITEM_ID),'1','단독','') GUBN,
			T1.CONS_ITEM_ID,
	        T1.CONS_ITEM_NAME,
	        T1.UNIT,
	        SUM(T1.REQ_QTY)													REQ_QTY,		--천소요량--
			ROUND(SUM(T2.TOT),1)											TOT, 			--재고수량--
	        TRUNC(SUM(T2.TOT)/SUM(T1.REQ_QTY)*1000)							CONV_QTY,		--박스환산--
			F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID)					PEINH,			--가격단위--
			F_GET_PROD_CONS_ITEM_PRIC(CONS_ITEM_ID)							NETPR,      	--단가--
			F_GET_PROD_CONS_ITEM_CONV_KEY(CONS_ITEM_ID)						WAERS,			--통화키--
			CASE	WHEN	F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID)=0 THEN 0 
					ELSE	TRUNC(SUM(T2.TOT) *  F_GET_PROD_CONS_ITEM_PRIC(CONS_ITEM_ID) / F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID))
			END	PAY,	--금액--            
            -- TRUNC((SUM(T2.TOT) *  F_GET_PROD_CONS_ITEM_PRIC(CONS_ITEM_ID)) / F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID))	PAY,	--금액--
	        SUM(T2.AY_QTY)													QTY1,			--안양공장--
	        SUM(T2.AS1_QTY)													QTY2,			--안성공장--
	        SUM(T2.AD_QTY)													QTY3,			--안성음료--
	        SUM(T2.AS2_QTY)													QTY4,			--아산공장--
            SUM(T2.GM_QTY)													QTY5,			--구미공장--	        
	        SUM(T2.PS_QTY)													QTY6,			--부산공장--
            SUM(T2.NS_QTY)													QTY7,			--녹산공장--
	        NVL(SUM(T3.COM_STOCK),0)										COM_STOCK,
	        F_GET_PROD_CUST_NAME(CONS_ITEM_ID)								PROD_CUST_NAME
 						        
	FROM	(
			 SELECT	DISTINCT 	BM.CONS_ITEM_ID							CONS_ITEM_ID,                                
                                F_GET_ITEM_NAME(BM.CONS_ITEM_ID)		CONS_ITEM_NAME, 
                                SUM(BM.REQ_QTY)							REQ_QTY,				--천박스 소요량
                                --ROUND(SUM(BM.REQ_QTY)/SUM(BM.BASE_QTY)*1000*24,3)	REQ_QTY,	--천박스 소요량
                                BM.REQ_QTY_UOM							UNIT
                                -- ROUND(SUM(MB.CONS_QTY)/SUM(MB.PROD_QTY)*1000*24,3) REQ_QTY,	--천박스 소요량
								-- MB.CONS_QTY_UOM							UNIT                                
            FROM	BOM_MAP		BM	
            		-- MBOM		MB
            WHERE	BM.CONS_ITEM_TYPE	IN('ROH1','ROH2','HALB')
            AND		BM.PROD_ITEM_ID	=	'$!{item_id}'
            AND		BM.CONS_ITEM_ID	IN	($!{cons_item_id})
            GROUP	BY	BM.CONS_ITEM_ID,
            			BM.REQ_QTY_UOM             			  
            )   T1,         
            (
            SELECT	S1.MATNR,                   
                    ROUND(SUM(DECODE(S1.WERKS,'1110',S1.LABST,0)),1) AY_QTY,		--안양
		            ROUND(SUM(DECODE(S1.WERKS,'1120',S1.LABST,0)),1) AS1_QTY,	--안성
		            ROUND(SUM(DECODE(S1.WERKS,'1130',S1.LABST,0)),1) AD_QTY,		--안성(음료)
		            ROUND(SUM(DECODE(S1.WERKS,'1140',S1.LABST,0)),1) AS2_QTY,	--아산
		            ROUND(SUM(DECODE(S1.WERKS,'1160',S1.LABST,0)),1) GM_QTY,		--구미
		            ROUND(SUM(DECODE(S1.WERKS,'1170',S1.LABST,0)),1) PS_QTY,		--부산
		            ROUND(SUM(DECODE(S1.WERKS,'1180',S1.LABST,0)),1) NS_QTY,		--녹산
		            
		            ROUND(SUM(DECODE(S1.WERKS,'1110',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1120',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1130',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1140',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1160',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1170',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1180',S1.LABST,0)),1) TOT
            FROM	SAPMARD		S1        
            GROUP	BY	S1.MATNR
            )T2,
	        (
             SELECT	MI.NS_MATR_CODE,
            		SUM(MI.BASE_STOCK)	COM_STOCK
             FROM	MFS_STOCK_INFO	MI   
             WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1	         
             GROUP	BY	MI.NS_MATR_CODE
             ORDER	BY	1
            )	T3 
	WHERE	T1.CONS_ITEM_ID	=	T2.MATNR(+)
	AND		T1.CONS_ITEM_ID	=	T3.NS_MATR_CODE(+)
	GROUP	BY	    T1.CONS_ITEM_ID,
	        		T1.CONS_ITEM_NAME,
	                T1.UNIT                     
	ORDER	BY	2    
#else
	SELECT	DECODE(F_GET_PROD_ITEM_COUNT(CONS_ITEM_ID),'1','단독','') GUBN,
			T1.CONS_ITEM_ID,
	        T1.CONS_ITEM_NAME,
	        T1.UNIT,
	        SUM(T1.REQ_QTY)													REQ_QTY,		--천소요량--
	        ROUND(SUM(T2.TOT),1)											TOT, 			--재고수량--
	        TRUNC(SUM(T2.TOT)/SUM(T1.REQ_QTY)*1000)							CONV_QTY,		--박스환산--
			F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID)					PEINH,			--가격단위--				         
	        F_GET_PROD_CONS_ITEM_PRIC(CONS_ITEM_ID)							NETPR,      	--단가--      
            F_GET_PROD_CONS_ITEM_CONV_KEY(CONS_ITEM_ID)						WAERS,			--통화키--
			CASE	WHEN	F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID)=0 THEN 0 
					ELSE	TRUNC(SUM(T2.TOT) *  F_GET_PROD_CONS_ITEM_PRIC(CONS_ITEM_ID) / F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID))
			END	PAY,	--금액--            
            -- TRUNC((SUM(T2.TOT) *  F_GET_PROD_CONS_ITEM_PRIC(CONS_ITEM_ID)) / F_GET_PROD_CONS_ITEM_PRIC_UNIT(CONS_ITEM_ID))	PAY,	--금액--
			SUM(T2.AY_QTY)													QTY1,			--안양공장--
	        SUM(T2.AS1_QTY)													QTY2,			--안성공장--
	        SUM(T2.AD_QTY)													QTY3,			--안성음료--
	        SUM(T2.AS2_QTY)													QTY4,			--아산공장--
            SUM(T2.GM_QTY)													QTY5,			--구미공장--	        
	        SUM(T2.PS_QTY)													QTY6,			--부산공장--
            SUM(T2.NS_QTY)													QTY7,			--녹산공장--            
 			NVL(SUM(T3.COM_STOCK),0)										COM_STOCK,
	        F_GET_PROD_CUST_NAME(CONS_ITEM_ID)								PROD_CUST_NAME
    FROM	(
            SELECT	DISTINCT 	BM.CONS_ITEM_ID							CONS_ITEM_ID,                                
                                F_GET_ITEM_NAME(BM.CONS_ITEM_ID)		CONS_ITEM_NAME, 
                                SUM(BM.REQ_QTY)							REQ_QTY,				--천박스 소요량
                                --ROUND(SUM(BM.REQ_QTY)/SUM(BM.BASE_QTY)*1000*24,3)	REQ_QTY,	--천박스 소요량
                                BM.REQ_QTY_UOM							UNIT
                                -- ROUND(SUM(MB.CONS_QTY)/SUM(MB.PROD_QTY)*1000*24,3) REQ_QTY,	--천박스 소요량
								-- MB.CONS_QTY_UOM							UNIT                                
            FROM	BOM_MAP		BM
            		-- MBOM		MB
            WHERE	BM.CONS_ITEM_TYPE	IN('ROH1','ROH2','HALB')
            AND		BM.PROD_ITEM_ID	=	'$!{item_id}'			                                   
            GROUP	BY	BM.CONS_ITEM_ID,
            			BM.REQ_QTY_UOM
            )   T1,         
            (
            SELECT	S1.MATNR,                   
                    ROUND(SUM(DECODE(S1.WERKS,'1110',S1.LABST,0)),1) AY_QTY,	--안양
		            ROUND(SUM(DECODE(S1.WERKS,'1120',S1.LABST,0)),1) AS1_QTY,	--안성
		            ROUND(SUM(DECODE(S1.WERKS,'1130',S1.LABST,0)),1) AD_QTY,	--안성(음료)
		            ROUND(SUM(DECODE(S1.WERKS,'1140',S1.LABST,0)),1) AS2_QTY,	--아산
		            ROUND(SUM(DECODE(S1.WERKS,'1160',S1.LABST,0)),1) GM_QTY,	--구미
		            ROUND(SUM(DECODE(S1.WERKS,'1170',S1.LABST,0)),1) PS_QTY,	--부산
		            ROUND(SUM(DECODE(S1.WERKS,'1180',S1.LABST,0)),1) NS_QTY,	--녹산
		            
		            ROUND(SUM(DECODE(S1.WERKS,'1110',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1120',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1130',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1140',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1160',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1170',S1.LABST,0)) 
		            +SUM(DECODE(S1.WERKS,'1180',S1.LABST,0)),1) TOT
            FROM	SAPMARD		S1  
            GROUP	BY	S1.MATNR
            )T2,
        	(
             SELECT	MI.NS_MATR_CODE,
					SUM(MI.BASE_STOCK)	COM_STOCK
             FROM	MFS_STOCK_INFO	MI   
             WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1	         
             GROUP	BY	MI.NS_MATR_CODE
             ORDER	BY	1
            )	T3 
	WHERE	T1.CONS_ITEM_ID	=	T2.MATNR(+)
	AND		T1.CONS_ITEM_ID	=	T3.NS_MATR_CODE(+)
	GROUP	BY	    T1.CONS_ITEM_ID,
	        		T1.CONS_ITEM_NAME,
	                T1.UNIT                     
	ORDER	BY	2    
#end
	</query>	
	
	

	<!-- DW1 계획수립 대상 리스트 -->
	<query id="sel_dmd_list_3">
        SELECT	CD, substr(CD_NAME,3,30)
        FROM	CODE_MST
        WHERE	CD_GRP = 'SEL_DMD'
        AND		CD	NOT	IN('DMD01','DMD02')
		#if ( "$!{item_type}" != 'HAWA' )
        -- AND     CD != 'DMD09'
		#else
		#end
	</query>	
	
	
<query id="op_02050_roh_expt_master_new">
	
	SELECT	M1.ITEM_ID,
	        F_GET_ITEM_NAME(M1.ITEM_ID)ITEM_NAME,
	        M1.BASE_UOM,
	        M1.MFS_FLAG,
	        M1.LEAD_TIME, 							--리드타임은 월단위로 정정
	        M1.TERMVAL, 
	        M1.ANYANG_STOCK,	
	        M1.KUMI_STOCK,	
	        M1.PUSAN_STOCK,								
	        M1.HJIN_STOCK,		
	        M1.SJP_STOCK,		
	        M1.SINHYO_STOCK,							
	        M3.CNFM_STOCK W_STOCK,					--당주 확정재고(농심 기준재고)
	        M1.ANYANG_STOCK +  M1.KUMI_STOCK +  M1.HJIN_STOCK + M3.CNFM_STOCK	SUB_TOT,
	        NVL(M2.ODER_QTY,0)			ODER_QTY,	
			M1.ANYANG_STOCK +  M1.KUMI_STOCK +  M1.HJIN_STOCK + M3.CNFM_STOCK - NVL(M2.ODER_QTY,0)  W1_STOCK,		--차주초 예상재고
			M1.SEL_DMD,
			-- 0	DMD_QTY,								--그룹별 수량
			CASE	WHEN	M1.SEL_DMD		=	'DMD03'	THEN	DMD03	
	        		WHEN	M1.SEL_DMD		=	'DMD04'	THEN	DMD04
	                WHEN	M1.SEL_DMD		=	'DMD05'	THEN	DMD05
	                WHEN	M1.SEL_DMD		=	'DMD06'	THEN	DMD06
	                WHEN	M1.SEL_DMD		=	'DMD07'	THEN	DMD07
	        		WHEN	M1.SEL_DMD		=	'DMD08'	THEN	DMD08
	        END		DMD_QTY,
			M1.DMD03,									--3개월 평균
			M1.DMD04,									--전년동월	
			M1.DMD05,									--과거 12개월
			M1.DMD06,									--전주 사용량
			M1.DMD07,									--3주 평균
			M1.DMD08,									--사용자
			0	USE_DAY,								--가용일
	        0	USE_QTY,								--(전주 발주예고 = 당주 발주 필요량
	        M1.MINMPSQTY	MIN_LOT_SIZE,				--발주단뒤
	        M3.FC_QTY		FC_QTY,						--당주 발주예고량
	        M3.SINHYO_QTY,
	        M3.SJP_QTY,
	        M3.HJIN_QTY,
	        F_GET_ITEM_MSG('OP_02050',M1.ITEM_ID)MSG	       
	FROM		(
	            SELECT	DISTINCT	S1.ITEM_ID,
	                    F_GET_ITEM_NAME(S1.ITEM_ID)ITEM_NAME,
	                   	S1.BASE_UOM,
	                    S1.MFS_FLAG,
	                    ROUND((NVL(S1.PR_TO_PO,0)+NVL(S1.PO_TO_LC ,0)+NVL(S1.LC_TO_PORT ,0)+NVL(S1.PORT_TO_CUST ,0))/30,1) LEAD_TIME, --   리드타임은 월단위로 정정
	                    S1.TERMVAL,
	                    MAX(DECODE(S5.LOC_ID,'1110',S5.QTY,0))	ANYANG_STOCK,
                        MAX(DECODE(S5.LOC_ID,'1160',S5.QTY,0))	KUMI_STOCK,
                        MAX(DECODE(S5.LOC_ID,'1170',S5.QTY,0))	PUSAN_STOCK,
                        MAX(NVL(S3.HJIN_STOCK,0))		HJIN_STOCK,
                        MAX(NVL(S3.SJP_STOCK,0))		SJP_STOCK,
                        MAX( NVL(S3.SINHYO_STOCK,0))	SINHYO_STOCK,
	                    S2.SEL_DMD						SEL_DMD,
						ROUND(NVL(S2.DMD03,0)/4,0) 		DMD03,    		--3개월 평균
						ROUND(NVL(S2.DMD04,0)/4,0)		DMD04,    		--전년동월
						ROUND(NVL(S2.DMD05,0)/4,0)		DMD05,    		--과거 12개월	
						ROUND(NVL(S2.DMD06,0),0)		DMD06,    		--전주 사용량
						ROUND(NVL(S2.DMD07,0),0)		DMD07,    		--3주 평균
						ROUND(NVL(S2.DMD08,0),0)		DMD08,    		--사용자									                	
	                    S1.MINMPSQTY					MINMPSQTY		--최소 생산/발주의뢰량
	            FROM	(
	            		SELECT	*
	            		FROM	ITEM_MST
						WHERE	MFS_FLAG	=	'$!{mfs_flag}'
	            		)					S1,
	            		APS_PR_PLAN_ROH		S2,
	                   (
	                    SELECT	NS_MATR_CODE,
                        		DECODE(COM_MATR_CODE,'HJ'||NS_MATR_CODE,BASE_STOCK,0)	HJIN_STOCK,
                                DECODE(COM_MATR_CODE,'SJP'||NS_MATR_CODE,BASE_STOCK,0)	SJP_STOCK,
                                DECODE(COM_MATR_CODE,'SH'||NS_MATR_CODE,BASE_STOCK,0)	SINHYO_STOCK
	                    FROM	MFS_STOCK_INFO
	                    WHERE	CNFM_DATE	=	TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')	-- 2013-09-02 달력 추가
	                    AND		COM_CODE	=	'$!{com_code}'	                    
	                    )	S3,
	                    (
	                    SELECT	DISTINCT	MATNR
						FROM	SAPZMMT0023
						WHERE	name1 LIKE '%에스제이피%' OR name1 LIKE '%현진제업%' OR name1 LIKE '%신효포장%'
	                    )	S4,
	                    ERP_STOCK S5                   
	            WHERE	S1.ITEM_ID	=	S2.ITEM_ID(+)
	            AND		S1.ITEM_ID	=	S3.NS_MATR_CODE
	            AND		S1.ITEM_ID	=	S4.MATNR
	            AND		S1.ITEM_ID	=	S5.ITEM_ID (+)
	            AND		S5.IF_DTTM	=	TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
	            AND		S5.LOC_TYPE	=	'PLANT'	            
	            AND		S1.ITYPE	IN('ROH1','ROH2') --수정		
	            AND     S2.VERSION(+)    =	TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')	-- 2013-09-02 달력 추가            
	            AND		S1. ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	 
	            GROUP
	            BY		S1.ITEM_ID,
	            		S1.BASE_UOM,
	            		S1.MFS_FLAG,
	            		S1.PR_TO_PO,
	            		S1.PO_TO_LC,
	            		S1.LC_TO_PORT,
	            		S1.PORT_TO_CUST,
	            		S1.TERMVAL,
	            		S2.SEL_DMD,
	            		S1.MINMPSQTY,
	            		S2.DMD03,
	            		S2.DMD04,
	            		S2.DMD05,
	            		S2.DMD06,
	            		S2.DMD07,
	            		S2.DMD08	            		                             
				)	M1,
				--금주 소요량--
	            (
	            SELECT	B.CONS_ITEM_ID				MATR_CODE,
				/* 생산계획 * CONS_QTY / PROD_QYT */ 
	                    ROUND(SUM(F_GETCONV_UOM(A.ITEM_ID,A.QTY_UOM,B.PROD_QTY_UOM,A.PLAN_QTY)*B.CONS_QTY/B.PROD_QTY),0)	ODER_QTY
	            FROM	(        
	                    SELECT	K1.PLANT_ID,
	                            K1.ITEM_ID							ITEM_ID,
	                            K1.PROD_VER							PROD_VER,
	                            K1.QTY_UOM							QTY_UOM,
	                            SUM(K1.SHIFT_QTY)					PLAN_QTY
	                    FROM	(        
	                            SELECT  t1.*
	                            FROM    daily_sch_plan_shift t1,
	                                    (
	                                    /* 3주전부터 생산계획 확정 VERSION정보(완제품)*/
	                                    SELECT  k1.cat_id, k2.plant_id, k1.VERSION,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+7,'D')+1,'YYYYMMDD')    s_date,		--2015-10-07 수정
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
	                                    FROM    plan_version_log    k1,
	                                            (
	                                            SELECT  cat_id, sub_cat, plant_id
	                                            FROM    engn_bat_mst
	                                            WHERE   period_type = 'DAILY' AND cat_id = 'PS'
	                                            )                   k2
	                                    WHERE   k1.period_type = 'DAILY'
	                                    AND     k1.cat_id = 'PS'
	                                    --AND     k1.run_date BETWEEN TRUNC(SYSDATE-21)  AND  TRUNC (SYSDATE)
	                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
	                                    AND     TRIM (VERSION) IS NOT NULL
	                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
	                                    AND     k1.cat_id = k2.cat_id
	                                    AND     k1.sub_cat = k2.sub_cat
	                                    )                   t2,
	                                    /* 마지막 공정(투입공정) 추출 */
	                                    V_LAST_PROC_PRODVER     t3         
	                            WHERE   t1.cat_id = t2.cat_id
	                            AND     t1.plant_id = t2.plant_id
	                            AND     t1.VERSION = t2.VERSION
	                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
	                            AND     t1.plant_id = t3.plant_id
	                            AND     t1.proc_id = t3.proc_id
	                            AND     t1.item_id = t3.item_id
	                            UNION ALL
	                            /* 반제품  */
	                            SELECT  t1.*
	                            FROM    daily_sch_plan_shift    t1,
	                                    (
	                                    /* 3주전부터 생산계획 확정 VERSION정보(반제품)*/
	                                    SELECT  k1.cat_id, k1.VERSION,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+ 7,'D')+1,'YYYYMMDD')    s_date,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
	                                    FROM    plan_version_log    k1,
	                                            (
	                                            SELECT cat_id, sub_cat, plant_id
	                                            FROM engn_bat_mst
	                                            WHERE period_type = 'DAILY' AND cat_id = 'SS'
	                                            )                   k2
	                                    WHERE   k1.period_type = 'DAILY'
	                                    AND     k1.cat_id = 'SS'
	                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
	                                    AND     TRIM (VERSION) IS NOT NULL
	                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
	                                    AND     k1.cat_id = k2.cat_id
	                                    AND     k1.sub_cat = k2.sub_cat
	                                    )                       t2,
	                                    /* 마지막 공정(투입공정) 추출 */
	                                    V_LAST_PROC_PRODVER     t3
	                            WHERE   t1.cat_id = t2.cat_id
	                            AND     t1.VERSION = t2.VERSION
	                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
	                            AND     t1.plant_id = t3.plant_id
	                            AND     t1.proc_id = t3.proc_id
	                            AND     t1.item_id = t3.item_id
	                            )	K1
	                    WHERE	K1.prod_dates BETWEEN 	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
	                                          AND		TO_CHAR(TRUNC(SYSDATE,'D')+7,'YYYYMMDD')		
	                    GROUP
	                    BY		K1.PLANT_ID,
	                            K1.ITEM_ID,
	                            K1.PROD_VER,
	                            K1.QTY_UOM                                        
	                    )    	A,
	                    MBOM	B
	            WHERE   A.ITEM_ID   = B.PROD_ITEM_ID
	            AND		A.PLANT_ID	= B.PLANT_ID
	            AND		A.PROD_VER	= B.PROD_VER
	            GROUP BY	B.CONS_ITEM_ID
	            )	M2,				
				(
				SELECT	T1.ITEM_ID,
						F_GET_ITEM_NAME(T1.ITEM_ID)ITEM_NAME,
						NVL(T2.PRE_STOCK,0)		PRE_STOCK,		--전주 기준재고
				        NVL(T4.FC_QTY,0)		FC_QTY,			--당주 발주예고 0				    
				        NVL(T3.CNFM_STOCK,0)	CNFM_STOCK,		--당주 확정재고      
				        NVL(T5.SINHYO_QTY,0)	SINHYO_QTY, 
				        NVL(T5.SJP_QTY,0)		SJP_QTY,
				        NVL(T5.HJIN_QTY,0)		HJIN_QTY
				FROM	ITEM_MST	T1,
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(CNFM_STOCK)		PRE_STOCK	--전주 기준재고
				        FROM	MFS_STD_STOCK	
				        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T2,
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
				        FROM	MFS_STD_STOCK	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T3,
						--전주 발주예고
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(FC_QTY)	FC_QTY		--당주 발주예고
				        FROM	MFS_ORDER_FORECAST	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T4,
				         (
				        SELECT 	CONS_ITEM_ID,				                
				                SINHYO_QTY,
				                SJP_QTY,
				                HJIN_QTY
				        FROM	MFS_ORDER_FORECAST_PURCHASE	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가				        
				        )			T5
				WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T5.CONS_ITEM_ID(+)
				AND     T1.ITYPE IN ( 'ROH1','ROH2')
				)	M3            
	WHERE	M1.ITEM_ID		=	M2.MATR_CODE(+) 
	AND		M1.ITEM_ID		=	M3.ITEM_ID(+)
	ORDER	BY	1        
</query>


<query id="op_02050_roh_expt_master">
		<!-- 발주예시 대상 리스트-->
#if ( "$!{com_code}" == "0001000010" )			
	SELECT	M1.ITEM_ID,
	        F_GET_ITEM_NAME(M1.ITEM_ID)ITEM_NAME,
	        M1.BASE_UOM,
	        M1.MFS_FLAG,
	        M1.LEAD_TIME, 							--리드타임은 월단위로 정정
	        M1.TERMVAL, 
	        M1.STOCK,								--농심 현재고
	        M1.COM_STOCK,							--(업체)계열사 재고
	        M3.CNFM_STOCK W_STOCK,					--당주 확정재고(농심 기준재고)
	        M1.STOCK + M3.CNFM_STOCK	SUB_TOT,
	        NVL(M2.ODER_QTY,0)			ODER_QTY,	
			M1.STOCK + M3.CNFM_STOCK - NVL(M2.ODER_QTY,0)  W1_STOCK,		--차주초 예상재고
			M1.SEL_DMD,
			-- 0	DMD_QTY,								--그룹별 수량
			CASE	WHEN	M1.SEL_DMD		=	'DMD03'	THEN	DMD03	
	        		WHEN	M1.SEL_DMD		=	'DMD04'	THEN	DMD04
	                WHEN	M1.SEL_DMD		=	'DMD05'	THEN	DMD05
	                WHEN	M1.SEL_DMD		=	'DMD06'	THEN	DMD06
	                WHEN	M1.SEL_DMD		=	'DMD07'	THEN	DMD07
	        		WHEN	M1.SEL_DMD		=	'DMD08'	THEN	DMD08
	        END		DMD_QTY,
			M1.DMD03,									--3개월 평균
			M1.DMD04,									--전년동월	
			M1.DMD05,									--과거 12개월
			M1.DMD06,									--전주 사용량
			M1.DMD07,									--3주 평균
			M1.DMD08,									--사용자
			0	USE_DAY,								--가용일
	        0	USE_QTY,								--(전주 발주예고 = 당주 발주 필요량
	        M1.MINMPSQTY	MIN_LOT_SIZE,				--발주단뒤
	        M3.FC_QTY		FC_QTY,						--당주 발주예고량
	        F_GET_ITEM_MSG('OP_02050',M1.ITEM_ID)MSG	       
	FROM		(
	            SELECT	DISTINCT	S1.ITEM_ID,
	                    F_GET_ITEM_NAME(S1.ITEM_ID)ITEM_NAME,
	                   	S1.BASE_UOM,
	                    S1.MFS_FLAG,
	                    ROUND((NVL(S1.PR_TO_PO,0)+NVL(S1.PO_TO_LC ,0)+NVL(S1.LC_TO_PORT ,0)+NVL(S1.PORT_TO_CUST ,0))/30,1) LEAD_TIME, --   리드타임은 월단위로 정정
	                    S1.TERMVAL,
	                   	SUM(ROUND(NVL(S5.QTY,0),0))    		STOCK,			--농심 현재고--
	                    SUM(ROUND(NVL(S3.COM_STOCK,0),0))    COM_STOCK,		--계열사 현재고--
	                    S2.SEL_DMD						SEL_DMD,
						ROUND(NVL(S2.DMD03,0)/4,0) 		DMD03,    		--3개월 평균
						ROUND(NVL(S2.DMD04,0)/4,0)		DMD04,    		--전년동월
						ROUND(NVL(S2.DMD05,0)/4,0)		DMD05,    		--과거 12개월	
						ROUND(NVL(S2.DMD06,0),0)		DMD06,    		--전주 사용량
						ROUND(NVL(S2.DMD07,0),0)		DMD07,    		--3주 평균
						ROUND(NVL(S2.DMD08,0),0)		DMD08,    		--사용자									                	
	                    S1.MINMPSQTY					MINMPSQTY		--최소 생산/발주의뢰량
	            FROM	(
	            		SELECT	*
	            		FROM	ITEM_MST
						WHERE	MFS_FLAG	=	'$!{mfs_flag}'
	            		)					S1,
	            		APS_PR_PLAN_ROH		S2,
	                   (
	                    SELECT	DISTINCT		NS_MATR_CODE,
	                    		SUM(BASE_STOCK)	COM_STOCK
	                    FROM	MFS_STOCK_INFO
	                    WHERE	CNFM_DATE	=	TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')	-- 2013-09-02 달력 추가
	                    AND		COM_CODE	=	'$!{com_code}'
	                    GROUP	
	                    BY		NS_MATR_CODE
	                    )	S3,
	                    (
	                    SELECT	DISTINCT	MATNR
						FROM	SAPZMMT0023
						WHERE	name1 LIKE '%에스제이피%' OR name1 LIKE '%현진제업%' OR name1 LIKE '%신효포장%'
	                    )	S4,
	                    ERP_STOCK S5                   
	            WHERE	S1.ITEM_ID	=	S2.ITEM_ID(+)
	            AND		S1.ITEM_ID	=	S3.NS_MATR_CODE
	            AND		S1.ITEM_ID	=	S4.MATNR
	            AND		S1.ITEM_ID	=	S5.ITEM_ID (+)
	            AND		S5.IF_DTTM	=	TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
	            AND		S5.LOC_TYPE	=	'PLANT'	            
	            AND		S1.ITYPE	IN('ROH1','ROH2') --수정		
	            AND     S2.VERSION(+)    =	TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')	-- 2013-09-02 달력 추가            
	            AND		S1. ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	 
	            GROUP
	            BY		S1.ITEM_ID,
	            		S1.BASE_UOM,
	            		S1.MFS_FLAG,
	            		S1.PR_TO_PO,
	            		S1.PO_TO_LC,
	            		S1.LC_TO_PORT,
	            		S1.PORT_TO_CUST,
	            		S1.TERMVAL,
	            		S2.SEL_DMD,
	            		S1.MINMPSQTY,
	            		S2.DMD03,
	            		S2.DMD04,
	            		S2.DMD05,
	            		S2.DMD06,
	            		S2.DMD07,
	            		S2.DMD08	            		                             
				)	M1,
				--금주 소요량--
	            (
	            SELECT	B.CONS_ITEM_ID				MATR_CODE,
				/* 생산계획 * CONS_QTY / PROD_QYT */ 
	                    ROUND(SUM(F_GETCONV_UOM(A.ITEM_ID,A.QTY_UOM,B.PROD_QTY_UOM,A.PLAN_QTY)*B.CONS_QTY/B.PROD_QTY),0)	ODER_QTY
	            FROM	(        
	                    SELECT	K1.PLANT_ID,
	                            K1.ITEM_ID							ITEM_ID,
	                            K1.PROD_VER							PROD_VER,
	                            K1.QTY_UOM							QTY_UOM,
	                            SUM(K1.SHIFT_QTY)					PLAN_QTY
	                    FROM	(        
	                            SELECT  t1.*
	                            FROM    daily_sch_plan_shift t1,
	                                    (
	                                    /* 3주전부터 생산계획 확정 VERSION정보(완제품)*/
	                                    SELECT  k1.cat_id, k2.plant_id, k1.VERSION,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+7,'D')+1,'YYYYMMDD')    s_date,		--2015-10-07 수정
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
	                                    FROM    plan_version_log    k1,
	                                            (
	                                            SELECT  cat_id, sub_cat, plant_id
	                                            FROM    engn_bat_mst
	                                            WHERE   period_type = 'DAILY' AND cat_id = 'PS'
	                                            )                   k2
	                                    WHERE   k1.period_type = 'DAILY'
	                                    AND     k1.cat_id = 'PS'
	                                    --AND     k1.run_date BETWEEN TRUNC(SYSDATE-21)  AND  TRUNC (SYSDATE)
	                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
	                                    AND     TRIM (VERSION) IS NOT NULL
	                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
	                                    AND     k1.cat_id = k2.cat_id
	                                    AND     k1.sub_cat = k2.sub_cat
	                                    )                   t2,
	                                    /* 마지막 공정(투입공정) 추출 */
	                                    V_LAST_PROC_PRODVER     t3         
	                            WHERE   t1.cat_id = t2.cat_id
	                            AND     t1.plant_id = t2.plant_id
	                            AND     t1.VERSION = t2.VERSION
	                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
	                            AND     t1.plant_id = t3.plant_id
	                            AND     t1.proc_id = t3.proc_id
	                            AND     t1.item_id = t3.item_id
	                            UNION ALL
	                            /* 반제품  */
	                            SELECT  t1.*
	                            FROM    daily_sch_plan_shift    t1,
	                                    (
	                                    /* 3주전부터 생산계획 확정 VERSION정보(반제품)*/
	                                    SELECT  k1.cat_id, k1.VERSION,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+ 7,'D')+1,'YYYYMMDD')    s_date,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
	                                    FROM    plan_version_log    k1,
	                                            (
	                                            SELECT cat_id, sub_cat, plant_id
	                                            FROM engn_bat_mst
	                                            WHERE period_type = 'DAILY' AND cat_id = 'SS'
	                                            )                   k2
	                                    WHERE   k1.period_type = 'DAILY'
	                                    AND     k1.cat_id = 'SS'
	                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
	                                    AND     TRIM (VERSION) IS NOT NULL
	                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
	                                    AND     k1.cat_id = k2.cat_id
	                                    AND     k1.sub_cat = k2.sub_cat
	                                    )                       t2,
	                                    /* 마지막 공정(투입공정) 추출 */
	                                    V_LAST_PROC_PRODVER     t3
	                            WHERE   t1.cat_id = t2.cat_id
	                            AND     t1.VERSION = t2.VERSION
	                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
	                            AND     t1.plant_id = t3.plant_id
	                            AND     t1.proc_id = t3.proc_id
	                            AND     t1.item_id = t3.item_id
	                            )	K1
	                    WHERE	K1.prod_dates BETWEEN 	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
	                                          AND		TO_CHAR(TRUNC(SYSDATE,'D')+7,'YYYYMMDD')		
	                    GROUP
	                    BY		K1.PLANT_ID,
	                            K1.ITEM_ID,
	                            K1.PROD_VER,
	                            K1.QTY_UOM                                        
	                    )    	A,
	                    MBOM	B
	            WHERE   A.ITEM_ID   = B.PROD_ITEM_ID
	            AND		A.PLANT_ID	= B.PLANT_ID
	            AND		A.PROD_VER	= B.PROD_VER
	            GROUP BY	B.CONS_ITEM_ID
	            )	M2,
				<!--기준재고 및 확정재고 설정-->
				(
				SELECT	T1.ITEM_ID,
						F_GET_ITEM_NAME(T1.ITEM_ID)ITEM_NAME,
						NVL(T2.PRE_STOCK,0)		PRE_STOCK,		--전주 기준재고
				        NVL(T4.FC_QTY,0)		FC_QTY,			--당주 발주예고 0
				        --0						PRE_IPGO,			
				        --0						NOW_EXPT,
				        --0						SIL_STOCK,
						--0						DIFF_QTY,
				        NVL(T3.CNFM_STOCK,0)	CNFM_STOCK		--당주 확정재고       
				FROM	ITEM_MST	T1,
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(CNFM_STOCK)		PRE_STOCK	--전주 기준재고
				        FROM	MFS_STD_STOCK	
				        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T2,
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
				        FROM	MFS_STD_STOCK	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T3,
						--전주 발주예고
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(FC_QTY)	FC_QTY		--당주 발주예고
				        FROM	MFS_ORDER_FORECAST	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T4
				WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
				AND     T1.ITYPE IN ( 'ROH1','ROH2')
				)	M3            
	WHERE	M1.ITEM_ID		=	M2.MATR_CODE(+) 
	AND		M1.ITEM_ID		=	M3.ITEM_ID(+)
	ORDER	BY	1             
#else			
	SELECT	M1.ITEM_ID,
	        F_GET_ITEM_NAME(M1.ITEM_ID)ITEM_NAME,
	        M1.BASE_UOM,
	        M1.MFS_FLAG,
	        M1.LEAD_TIME, 							--리드타임은 월단위로 정정
	        M1.TERMVAL,      
	        M1.STOCK,								--농심 현재고
	        M1.COM_STOCK,							--(업체)계열사 재고
	        M3.CNFM_STOCK W_STOCK,					--당주 확정재고(농심 기준재고)
	        M1.STOCK + M3.CNFM_STOCK	SUB_TOT,
	        NVL(M2.ODER_QTY,0)			ODER_QTY,	
			M1.STOCK + M3.CNFM_STOCK - NVL(M2.ODER_QTY,0)  W1_STOCK,		--차주초 예상재고
			M1.SEL_DMD,
			-- 0	DMD_QTY,								--그룹별 수량
			CASE	WHEN	M1.SEL_DMD		=	'DMD03'	THEN	DMD03	
	        		WHEN	M1.SEL_DMD		=	'DMD04'	THEN	DMD04
	                WHEN	M1.SEL_DMD		=	'DMD05'	THEN	DMD05
	                WHEN	M1.SEL_DMD		=	'DMD06'	THEN	DMD06
	                WHEN	M1.SEL_DMD		=	'DMD07'	THEN	DMD07
	        		WHEN	M1.SEL_DMD		=	'DMD08'	THEN	DMD08
	        END		DMD_QTY,
			M1.DMD03,									--3개월 평균
			M1.DMD04,									--전년동월	
			M1.DMD05,									--과거 12개월
			M1.DMD06,									--전주 사용량
			M1.DMD07,									--3주 평균
			M1.DMD08,									--사용자
			0	USE_DAY,								--가용일
	        0	USE_QTY,								--(전주 발주예고 = 당주 발주 필요량
	        M1.MINMPSQTY	MIN_LOT_SIZE,				--발주단뒤
	        M3.FC_QTY		FC_QTY,						--당주 발주예고량
	        F_GET_ITEM_MSG('OP_02050',M1.ITEM_ID)MSG,
	        ''	LOC_NAME
	FROM		(
	            SELECT	DISTINCT	S1.ITEM_ID,
	                    F_GET_ITEM_NAME(S1.ITEM_ID)ITEM_NAME,
	                    --S1.ITYPE,
	                    S1.BASE_UOM,
	                    S1.MFS_FLAG,
	                    --F_GET_PROD_CUST_NAME(S1.ITEM_ID)CUST_NAME,
	                    --TOT_LEAD_TIME (리드타임 일자 변환)
	                    ROUND((NVL(S1.PR_TO_PO,0)+NVL(S1.PO_TO_LC ,0)+NVL(S1.LC_TO_PORT ,0)+NVL(S1.PORT_TO_CUST ,0))/30,1) LEAD_TIME, --   리드타임은 월단위로 정정
	                    S1.TERMVAL,
	                    --(NVL(S1.PR_TO_PO,0)+NVL(S1.PO_TO_LC ,0)+NVL(S1.LC_TO_PORT ,0)+NVL(S1.PORT_TO_CUST ,0)) TOT_LEAD_TIME,
	                    ROUND(NVL(S2.STOCK,0),0)    					STOCK,			--농심 현재고--
	                    ROUND(NVL(S3.COM_STOCK,0),0)    				COM_STOCK,		--계열사 현재고--
	                    -- ROUND(NVL(S2.STOCK,0) +	NVL(S2.STD_STOCK,0),0)	SUB_TOT,			--소계--
	                    S2.SEL_DMD	SEL_DMD,
						ROUND(NVL(S2.DMD03,0)/4,0) 	DMD03,    						--3개월 평균
						ROUND(NVL(S2.DMD04,0)/4,0)	DMD04,    						--전년동월
						ROUND(NVL(S2.DMD05,0)/4,0)	DMD05,    						--과거 12개월	
						ROUND(NVL(S2.DMD06,0),0)	DMD06,    						--전주 사용량
						ROUND(NVL(S2.DMD07,0),0)	DMD07,    						--3주 평균
						ROUND(NVL(S2.DMD08,0),0)	DMD08,    						--사용자									                	
	                    S1.MINMPSQTY	MINMPSQTY									--최소 생산/발주의뢰량
	            FROM	(
	            		SELECT	*
	            		FROM	ITEM_MST
						WHERE	MFS_FLAG	=	'$!{mfs_flag}'
	            		)					S1,
	            		APS_PR_PLAN_ROH		S2,
	                   (
	                    SELECT	DISTINCT		NS_MATR_CODE,
	                    		SUM(BASE_STOCK)	COM_STOCK
	                    FROM	MFS_STOCK_INFO
	                    WHERE	CNFM_DATE	=	TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')	-- 2013-09-02 달력 추가
	                    AND		COM_CODE	=	'$!{com_code}'
	                    -- AND		NS_MATR_CODE	=	'35000003'
	                    GROUP	BY	NS_MATR_CODE
	                    )	S3,
	                    (
	                    SELECT	DISTINCT	MATNR
						FROM	SAPZMMT0023
						#if ( "$!{com_code}" == "0001000050" )	--  태경농산
						WHERE	name1 LIKE '%태경%'
						#elseif ( "$!{com_code}" == "0001000021" )	--  율촌
						WHERE	name1 LIKE '%율촌%'					
						#end
	                    )	S4                   
	            WHERE	S1.ITEM_ID	=	S2.ITEM_ID(+)
	            AND		S1.ITEM_ID	=	S3.NS_MATR_CODE
	            AND		S1.ITEM_ID	=	S4.MATNR
	            --  AND		S1.MFS_FLAG	=	'$!{mfs_flag}'
	            AND		S1.ITYPE	IN('ROH1','ROH2') --수정		
	            AND     S2.VERSION(+)    =	TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')	-- 2013-09-02 달력 추가            
	            AND		S1. ITEM_ID	NOT LIKE	'30%' -- BOX류 제외
				)	M1,
				--금주 소요량--
	            (
	            SELECT	B.CONS_ITEM_ID				MATR_CODE,
				/* 생산계획 * CONS_QTY / PROD_QYT */ 
	                    ROUND(SUM(F_GETCONV_UOM(A.ITEM_ID,A.QTY_UOM,B.PROD_QTY_UOM,A.PLAN_QTY)*B.CONS_QTY/B.PROD_QTY),0)	ODER_QTY
	            FROM	(        
	                    SELECT	K1.PLANT_ID,
	                            K1.ITEM_ID							ITEM_ID,
	                            K1.PROD_VER							PROD_VER,
	                            K1.QTY_UOM							QTY_UOM,
	                            SUM(K1.SHIFT_QTY)					PLAN_QTY
	                    FROM	(        
	                            SELECT  t1.*
	                            FROM    daily_sch_plan_shift t1,
	                                    (
	                                    /* 3주전부터 생산계획 확정 VERSION정보(완제품)*/
	                                    SELECT  k1.cat_id, k2.plant_id, k1.VERSION,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+7,'D')+1,'YYYYMMDD')    s_date,		--2015-10-07 수정
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
	                                    FROM    plan_version_log    k1,
	                                            (
	                                            SELECT  cat_id, sub_cat, plant_id
	                                            FROM    engn_bat_mst
	                                            WHERE   period_type = 'DAILY' AND cat_id = 'PS'
	                                            )                   k2
	                                    WHERE   k1.period_type = 'DAILY'
	                                    AND     k1.cat_id = 'PS'
	                                    --AND     k1.run_date BETWEEN TRUNC(SYSDATE-21)  AND  TRUNC (SYSDATE)
	                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
	                                    AND     TRIM (VERSION) IS NOT NULL
	                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
	                                    AND     k1.cat_id = k2.cat_id
	                                    AND     k1.sub_cat = k2.sub_cat
	                                    )                   t2,
	                                    /* 마지막 공정(투입공정) 추출 */
	                                    V_LAST_PROC_PRODVER     t3         
	                            WHERE   t1.cat_id = t2.cat_id
	                            AND     t1.plant_id = t2.plant_id
	                            AND     t1.VERSION = t2.VERSION
	                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
	                            AND     t1.plant_id = t3.plant_id
	                            AND     t1.proc_id = t3.proc_id
	                            AND     t1.item_id = t3.item_id
	                            UNION ALL
	                            /* 반제품  */
	                            SELECT  t1.*
	                            FROM    daily_sch_plan_shift    t1,
	                                    (
	                                    /* 3주전부터 생산계획 확정 VERSION정보(반제품)*/
	                                    SELECT  k1.cat_id, k1.VERSION,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+ 7,'D')+1,'YYYYMMDD')    s_date,
	                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
	                                    FROM    plan_version_log    k1,
	                                            (
	                                            SELECT cat_id, sub_cat, plant_id
	                                            FROM engn_bat_mst
	                                            WHERE period_type = 'DAILY' AND cat_id = 'SS'
	                                            )                   k2
	                                    WHERE   k1.period_type = 'DAILY'
	                                    AND     k1.cat_id = 'SS'
	                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
	                                    AND     TRIM (VERSION) IS NOT NULL
	                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
	                                    AND     k1.cat_id = k2.cat_id
	                                    AND     k1.sub_cat = k2.sub_cat
	                                    )                       t2,
	                                    /* 마지막 공정(투입공정) 추출 */
	                                    V_LAST_PROC_PRODVER     t3
	                            WHERE   t1.cat_id = t2.cat_id
	                            AND     t1.VERSION = t2.VERSION
	                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
	                            AND     t1.plant_id = t3.plant_id
	                            AND     t1.proc_id = t3.proc_id
	                            AND     t1.item_id = t3.item_id
	                            )	K1
	                    WHERE	K1.prod_dates BETWEEN 	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
	                                          AND		TO_CHAR(TRUNC(SYSDATE,'D')+7,'YYYYMMDD')		
	                    GROUP
	                    BY		K1.PLANT_ID,
	                            K1.ITEM_ID,
	                            K1.PROD_VER,
	                            K1.QTY_UOM                                        
	                    )    	A,
	                    MBOM	B
	            WHERE   A.ITEM_ID   = B.PROD_ITEM_ID
	            AND		A.PLANT_ID	= B.PLANT_ID
	            AND		A.PROD_VER	= B.PROD_VER
	            GROUP BY	B.CONS_ITEM_ID
	            )	M2,
				<!--기준재고 및 확정재고 설정-->
				(
				SELECT	T1.ITEM_ID,
						F_GET_ITEM_NAME(T1.ITEM_ID)ITEM_NAME,
						NVL(T2.PRE_STOCK,0)		PRE_STOCK,		--전주 기준재고
				        NVL(T4.FC_QTY,0)		FC_QTY,			--당주 발주예고 0
				        --0						PRE_IPGO,			
				        --0						NOW_EXPT,
				        --0						SIL_STOCK,
						--0						DIFF_QTY,
				        NVL(T3.CNFM_STOCK,0)	CNFM_STOCK		--당주 확정재고       
				FROM	ITEM_MST	T1,
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(CNFM_STOCK)		PRE_STOCK	--전주 기준재고
				        FROM	MFS_STD_STOCK	
				        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T2,
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
				        FROM	MFS_STD_STOCK	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T3,
						--전주 발주예고
				        (
				        SELECT 	CONS_ITEM_ID,
				                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
				                SUM(FC_QTY)	FC_QTY		--당주 발주예고
				        FROM	MFS_ORDER_FORECAST	
				        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
				        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
				        GROUP	BY	CONS_ITEM_ID
				        )			T4
				WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
				AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
				AND     T1.ITYPE IN ( 'ROH1','ROH2')
				)	M3            
	WHERE	M1.ITEM_ID	=	M2.MATR_CODE(+) 
	AND		M1.ITEM_ID		=	M3.ITEM_ID(+)
	ORDER	BY	1             
#end
    
<!-- 발주 예시 Main Query-->		
</query>


<query id="op_02050_even_item_list_dw7">
		<!-- 행사계획 품목 리스트--> 
--	SELECT	SUBSTR(T1.EVEN_S_DATE,4,8)||'~'||SUBSTR(T1.EVEN_E_DATE,4,8) EVEN_DATE,
--	        T1.ITEM_ID,
--	        F_GET_ITEM_NAME(T1.ITEM_ID)	ITEM_NAME,
--	        NVL(SUM(DECODE(T1.CUST_NAME,'이마트',		T1.PLAN_QTY,	0)),	0)	E_QTY,
--	        NVL(SUM(DECODE(T1.CUST_NAME,'홈플러스',	T1.PLAN_QTY,	0)),	0)	H_QTY,
--	        NVL(SUM(DECODE(T1.CUST_NAME,'롯데마트',	T1.PLAN_QTY,	0)),	0)	L_QTY 
--	FROM 	EVENT_PLAN_INFO	T1,
--			ITEM_MST		T2
--	WHERE	T1.ITEM_ID(+)	=	T2.ITEM_ID        
--	 AND	T1.CUST_NAME	IN('1020073','1006621','1005674')	--이마트, 홈플러스, 롯데마트
--	AND	T1.EVEN_S_DATE BETWEEN	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')	AND	TO_CHAR(TRUNC(SYSDATE+50),'YYYYMMDD')  
--	AND		T1.ITEM_ID	IN	(
--	                    SELECT PROD_ITEM_ID
--	                    FROM BOM_MAP
--	                    WHERE	CONS_ITEM_ID	=	'$!{cons_item_id}'		
--	                    )
--	AND		T2.DIVISION	IN('10','20')                    
--	GROUP	BY	T1.ITEM_ID,
--	            SUBSTR(T1.EVEN_S_DATE,4,8),
--	            SUBSTR(T1.EVEN_E_DATE,4,8)
--	ORDER	BY	1,3     
  
	SELECT	SUBSTR(T1.EVEN_S_DATE,4,8)||'~'||SUBSTR(T1.EVEN_E_DATE,4,8) EVEN_DATE,
	        T1.ITEM_ID,
	        F_GET_ITEM_NAME(T1.ITEM_ID)	ITEM_NAME,
	        NVL(SUM(DECODE(T1.CUST_NAME,'이마트',		T1.PLAN_QTY,	0)),	0)	E_QTY,
	        NVL(SUM(DECODE(T1.CUST_NAME,'홈플러스',	T1.PLAN_QTY,	0)),	0)	H_QTY,
	        NVL(SUM(DECODE(T1.CUST_NAME,'롯데마트',	T1.PLAN_QTY,	0)),	0)	L_QTY 
	FROM 	EVENT_PLAN_INFO	T1,
	        ITEM_MST		T2
	WHERE	T1.ITEM_ID(+)	=	T2.ITEM_ID        
	-- AND		T1.EVEN_E_DATE BETWEEN	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')	AND	TO_CHAR(TRUNC(SYSDATE+50),'YYYYMMDD') 
	AND		T1.EVEN_E_DATE BETWEEN	TO_DATE('$!{cnfm_date}')	AND	TO_DATE('$!{cnfm_date}')+50
	AND		T1.ITEM_ID	IN	(
	                        SELECT PROD_ITEM_ID
	                        FROM BOM_MAP
	                        WHERE	CONS_ITEM_ID	=	'$!{cons_item_id}'		
	                        )
	AND		T2.DIVISION	IN('10','20')                    
	GROUP	BY	T1.ITEM_ID,
	            SUBSTR(T1.EVEN_S_DATE,4,8),
	            SUBSTR(T1.EVEN_E_DATE,4,8)
	UNION ALL            
	SELECT	NULL,
			'총합',
			TO_CHAR(NVL(SUM(DECODE(T1.CUST_NAME,'이마트',	T1.PLAN_QTY,	 0)),    0)+
	        NVL(SUM(DECODE(T1.CUST_NAME,'홈플러스',			T1.PLAN_QTY,	0)),	0)+
	        NVL(SUM(DECODE(T1.CUST_NAME,'롯데마트',			T1.PLAN_QTY,	0)),	0),'999,999,999')	TOT_QTY,
	        NVL(SUM(DECODE(T1.CUST_NAME,'이마트',			 T1.PLAN_QTY,	 0)),	 0)	 E_QTY,
	        NVL(SUM(DECODE(T1.CUST_NAME,'홈플러스',			T1.PLAN_QTY,	0)),	0)	H_QTY,
	        NVL(SUM(DECODE(T1.CUST_NAME,'롯데마트',			T1.PLAN_QTY,	0)),	0)	L_QTY 
	FROM 	EVENT_PLAN_INFO	T1,
	        ITEM_MST		T2
	WHERE	T1.ITEM_ID(+)	=	T2.ITEM_ID        
	-- AND		T1.EVEN_E_DATE BETWEEN	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')	AND	TO_CHAR(TRUNC(SYSDATE+50),'YYYYMMDD') 
	AND		T1.EVEN_E_DATE BETWEEN	TO_DATE('$!{cnfm_date}')	AND	TO_DATE('$!{cnfm_date}')+50
	AND		T1.ITEM_ID	IN	(
	                        SELECT PROD_ITEM_ID
	                        FROM BOM_MAP
	                        WHERE	CONS_ITEM_ID	=	'$!{cons_item_id}'	
	                        )
	AND		T2.DIVISION	IN('10','20') 
	ORDER	BY	1,3
	
	</query>


	<!-- DW4 주간사용분석 해더-->
	<query id="op_02050_Long_Term_Planning_list_dw4_weekly_header">
		-- DW 4 주간사용분석 해더
		SELECT	MAX(DECODE(IDX, 12,  CAL_DATE))     "W-8",
		        MAX(DECODE(IDX, 11,  CAL_DATE))     "W-7",
		        MAX(DECODE(IDX, 10,  CAL_DATE))     "W-6",
                MAX(DECODE(IDX, 9,  CAL_DATE))      "W-5",
		        MAX(DECODE(IDX, 8,  CAL_DATE))      "W-4",
		        MAX(DECODE(IDX, 7,  CAL_DATE))      "W-3",
		        MAX(DECODE(IDX, 6,  CAL_DATE))      "W-2",
		        MAX(DECODE(IDX, 5,  CAL_DATE))      "W-1",
		        MAX(DECODE(IDX, 4,  CAL_DATE))      "W"  
		
				--MAX(DECODE(IDX, 9,  CAL_DATE))      "W-5", --백업
		        --MAX(DECODE(IDX, 8,  CAL_DATE))      "W-4",
		        --MAX(DECODE(IDX, 7,  CAL_DATE))      "W-3",
		        --MAX(DECODE(IDX, 6,  CAL_DATE))      "W-2",
		        --MAX(DECODE(IDX, 5,  CAL_DATE))      "W-1",
		        --MAX(DECODE(IDX, 4,  CAL_DATE))      "W",
		        --MAX(DECODE(IDX, 3,  CAL_DATE))      "W+1",
		        --MAX(DECODE(IDX, 2,  CAL_DATE))      "W+2"
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
		                TO_CHAR(TO_DATE(CAL_DATE),'YY-MM-DD') CAL_DATE,
		                NVL(SUM(MOVE_QTY),0) USE_QTY,
		                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
		        FROM    (
		                SELECT  MV.ITEM_ID,
		                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
		                        SUM(MOVE_QTY) MOVE_QTY
		                FROM    MAT_MOVE MV
		                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                --WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20)
		                AND     MV.ITEM_ID = '$!{item_id}'
		                GROUP
		                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
		                )  MV, 
		                (
		                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
		                FROM    CAL_MST CAL
		                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                --WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20) 
		                ) CAL
		        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
		        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
		        ORDER BY 1
		        )
		GROUP BY ITEM_ID
	</query>

	
			

<!-- DW4 주간사용분석-->
	<query id="op_02050_Long_Term_Planning_list_dw4_weekly">
		-- DW 4 주간사용분석
		#if ( "$!{item_id}" != '11000625' )
		SELECT  '사용실적' AS A,		--추가--
				'$!{item_id}', 
				F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
				ROUND(SUM(DECODE(IDX, 12,	USE_QTY)))   "W-8",
		        ROUND(SUM(DECODE(IDX, 11,	USE_QTY)))   "W-7",
		        ROUND(SUM(DECODE(IDX, 10,	USE_QTY)))   "W-6",
				ROUND(SUM(DECODE(IDX, 9,	USE_QTY)))   "W-5",
		        ROUND(SUM(DECODE(IDX, 8,	USE_QTY)))   "W-4",
		        ROUND(SUM(DECODE(IDX, 7,	USE_QTY)))   "W-3",
		        ROUND(SUM(DECODE(IDX, 6,	USE_QTY)))   "W-2",
		        ROUND(SUM(DECODE(IDX, 5,	USE_QTY)))   "W-1",
		        ROUND(SUM(DECODE(IDX, 4,	USE_QTY)))   "W"
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
		                MOVE_DATE,
		                NVL(SUM(MOVE_QTY),0) USE_QTY,
		                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
		        FROM    (
		                SELECT  MV.ITEM_ID,
		                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
		                        SUM(MOVE_QTY) MOVE_QTY
		                FROM    MAT_MOVE MV
						WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                --WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20)
		                AND     MV.ITEM_ID = '$!{item_id}'
		                GROUP
		                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
		                )  MV, 
		                (
		                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
		                FROM    CAL_MST CAL
		                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                --WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20) 
		                ) CAL
		        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
		        --AND     MV.ITEM_ID = '$!{item_id}'
		        --AND     MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
		        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
		        --ORDER BY 1
		        )
		--GROUP BY ITEM_ID
		UNION ALL   
        		SELECT  '입고실적' AS A,
        		'$!{item_id}', 
				F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
				ROUND(SUM(DECODE(IDX, 12,	IPGO_QTY)))   "W-8",
		        ROUND(SUM(DECODE(IDX, 11,	IPGO_QTY)))   "W-7",
		        ROUND(SUM(DECODE(IDX, 10,	IPGO_QTY)))   "W-6",
				ROUND(SUM(DECODE(IDX, 9,	IPGO_QTY)))   "W-5",
		        ROUND(SUM(DECODE(IDX, 8,	IPGO_QTY)))   "W-4",
		        ROUND(SUM(DECODE(IDX, 7,	IPGO_QTY)))   "W-3",
		        ROUND(SUM(DECODE(IDX, 6,	IPGO_QTY)))   "W-2",
		        ROUND(SUM(DECODE(IDX, 5,	IPGO_QTY)))   "W-1",
		        ROUND(SUM(DECODE(IDX, 4,	IPGO_QTY)))   "W"
		FROM    (
		        SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_ID, 
		                BUY_DAY,
		                NVL(SUM(IPGO_QTY),0) IPGO_QTY,
		                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
		        FROM    (
                        SELECT	ITEM_CD, 
                                TRUNC(TO_DATE(FB.BUY_DAY),'IW') BUY_DAY,
                                SUM(BUY_QTY) IPGO_QTY
                        FROM	FT_BUY	FB
						WHERE   FB.BUY_DAY BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
						AND		ITEM_CD(+) = '$!{item_id}'
		                GROUP	BY	FB.ITEM_CD, 
                        			TRUNC(TO_DATE(FB.BUY_DAY),'IW')        
		                ) FB, 
                        (
		                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
		                FROM    CAL_MST CAL
		                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                ) CAL
		        WHERE   CAL.CAL_DATE = FB.BUY_DAY(+)
		        GROUP BY	ITEM_CD, 
                            BUY_DAY, 
                            CAL.CAL_DATE
		        )
		#else
		-- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
			SELECT  '사용실적' AS A,		--추가--
					'$!{item_id}' ITEM_ID, 
					F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
					SUM(W8),
			        SUM(W7),
			        SUM(W6),
					SUM(W5),
			        SUM(W4),
			        SUM(W3),
			        SUM(W2),
			        SUM(W1),
			        SUM(W)			        
			FROM    (
					SELECT  '사용실적' AS A,		--추가--
							'$!{item_id}' ITEM_ID, 
							F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
					        ROUND(SUM(DECODE(IDX, 12,	USE_QTY)))	"W8",
					        ROUND(SUM(DECODE(IDX, 11,	USE_QTY)))   "W7",
					        ROUND(SUM(DECODE(IDX, 10,	USE_QTY)))   "W6",
					        ROUND(SUM(DECODE(IDX, 9,  	USE_QTY)))	"W5",
					        ROUND(SUM(DECODE(IDX, 8,	USE_QTY)))	"W4",
					        ROUND(SUM(DECODE(IDX, 7,	USE_QTY)))	"W3",
					        ROUND(SUM(DECODE(IDX, 6,	USE_QTY)))	"W2",
					        ROUND(SUM(DECODE(IDX, 5,	USE_QTY)))	"W1",
					        ROUND(SUM(DECODE(IDX, 4,	USE_QTY)))	"W"
					FROM    (
					        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
					                MOVE_DATE,
					                NVL(SUM(MOVE_QTY),0) USE_QTY,
					                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
					        FROM    (
					                SELECT  MV.ITEM_ID,
					                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
					                        SUM(MOVE_QTY) MOVE_QTY
					                FROM    MAT_MOVE MV
					                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
					                --WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20)
					                AND     MV.ITEM_ID = '$!{item_id}'
					                GROUP
					                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
					                )  MV, 
					                (
					                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
					                FROM    CAL_MST CAL
					                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
					                --WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20) 
					                ) CAL
					        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
					        --AND     MV.ITEM_ID = '$!{item_id}'
					        --AND     MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
					        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
					        --ORDER BY 1
					        )
					GROUP BY ITEM_ID
			        UNION ALL
					SELECT  '사용실적' AS A,		--추가--
							'$!{item_id}' ITEM_ID, 
							F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
					        ROUND(SUM(DECODE(IDX, 12,	USE_QTY)))   "W8",
					        ROUND(SUM(DECODE(IDX, 11,	USE_QTY)))   "W7",
					        ROUND(SUM(DECODE(IDX, 10,	USE_QTY)))   "W6",
					        ROUND(SUM(DECODE(IDX, 9,	USE_QTY)))	"W5",
					        ROUND(SUM(DECODE(IDX, 8,	USE_QTY)))	"W4",
					        ROUND(SUM(DECODE(IDX, 7,	USE_QTY)))	"W3",
					        ROUND(SUM(DECODE(IDX, 6,	USE_QTY)))	"W2",
					        ROUND(SUM(DECODE(IDX, 5,	USE_QTY)))	"W1",
					        ROUND(SUM(DECODE(IDX, 4,	USE_QTY)))	"W"
					        
					        --ROUND(SUM(DECODE(IDX, 9,  USE_QTY)))   "W5",
					        --ROUND(SUM(DECODE(IDX, 8,  USE_QTY)))   "W4",
					        --ROUND(SUM(DECODE(IDX, 7,  USE_QTY)))   "W3",
					        --ROUND(SUM(DECODE(IDX, 6,  USE_QTY)))   "W2",
					        --ROUND(SUM(DECODE(IDX, 5,  USE_QTY)))   "W1",
					        --ROUND(SUM(DECODE(IDX, 4,  USE_QTY)))   "W",
					        --ROUND(SUM(DECODE(IDX, 3,  USE_QTY)))   "W1",
					        --ROUND(SUM(DECODE(IDX, 2,  USE_QTY)))   "W2"               
					FROM    (
					        SELECT  NVL(ITEM_ID, '11001487') ITEM_ID, 
					                MOVE_DATE,
					                NVL(SUM(MOVE_QTY),0) USE_QTY,
					                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
					        FROM    (
					                SELECT  MV.ITEM_ID,
					                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
					                        SUM(MOVE_QTY) MOVE_QTY
					                FROM    MAT_MOVE MV
					                --WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20)
					                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
					                --AND     MV.ITEM_ID = '11001487'
					                
					                
					                GROUP
					                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
					                )  MV, 
					                (
					                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
					                FROM    CAL_MST CAL
					                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
					                --WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20) 
					                ) CAL
					        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
					        --AND     MV.ITEM_ID = '11001487'
					        --AND     MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-80) AND TRUNC(SYSDATE)
					        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
					        --ORDER BY 1
					        )
					GROUP BY ITEM_ID
					)
			GROUP BY ITEM_ID, ITEM_NAME
			UNION ALL   
             
        		SELECT  '입고실적' AS A,
        		'$!{item_id}', 
				F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
				ROUND(SUM(DECODE(IDX, 12,	IPGO_QTY)))   "W-8",
		        ROUND(SUM(DECODE(IDX, 11,	IPGO_QTY)))   "W-7",
		        ROUND(SUM(DECODE(IDX, 10,	IPGO_QTY)))   "W-6",
				ROUND(SUM(DECODE(IDX, 9,	IPGO_QTY)))   "W-5",
		        ROUND(SUM(DECODE(IDX, 8,	IPGO_QTY)))   "W-4",
		        ROUND(SUM(DECODE(IDX, 7,	IPGO_QTY)))   "W-3",
		        ROUND(SUM(DECODE(IDX, 6,	IPGO_QTY)))   "W-2",
		        ROUND(SUM(DECODE(IDX, 5,	IPGO_QTY)))   "W-1",
		        ROUND(SUM(DECODE(IDX, 4,	IPGO_QTY)))   "W"
		FROM    (
		        SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_ID, 
		                BUY_DAY,
		                NVL(SUM(IPGO_QTY),0) IPGO_QTY,
		                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
		        FROM    (
                        SELECT	ITEM_CD, 
                                TRUNC(TO_DATE(FB.BUY_DAY),'IW') BUY_DAY,
                                --BUY_DAY, 
                                SUM(BUY_QTY) IPGO_QTY
                        FROM	FT_BUY	FB
						WHERE   FB.BUY_DAY BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                AND     FB.ITEM_CD = '$!{item_id}'
		                GROUP	BY	FB.ITEM_CD, 
                        			TRUNC(TO_DATE(FB.BUY_DAY),'IW')        
		                ) FB, 
                        (
		                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
		                FROM    CAL_MST CAL
		                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
		                ) CAL
		        WHERE   CAL.CAL_DATE = FB.BUY_DAY(+)
		        GROUP BY	ITEM_CD, 
                            BUY_DAY, 
                            CAL.CAL_DATE
		        )
		#end 		
	</query>	

<!--  DW 4 월간사용분석 해더-->
	<query id="op_02050_Long_Term_Planning_list_dw4_header">
		-- DW 4 월간사용분석 해더
		SELECT  MAX(DECODE(IDX, 1, YYMM))      "M-8",	--9
        		MAX(DECODE(IDX, 2, YYMM))      "M-7",	--10
		        MAX(DECODE(IDX, 3, YYMM))      "M-6",	--11
        		MAX(DECODE(IDX, 4, YYMM))      "M-5",	--12
		        MAX(DECODE(IDX, 5, YYMM))      "M-4",	--1
				MAX(DECODE(IDX, 6, YYMM))      "M-3",	--2
		        MAX(DECODE(IDX, 7, YYMM))      "M-2",	--3
		        MAX(DECODE(IDX, 8, YYMM))      "M-1",	--4
		        MAX(DECODE(IDX, 9, YYMM))      "M"		--5
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
		                TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
		                RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
		        FROM    MAT_MOVE MV, 
		                (
		                SELECT DISTINCT YYYYMM
		                FROM    CAL_MST CAL
		                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
		                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
		                ) CAL
		        WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
		        --AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
				AND     ITEM_ID(+) = '$!{item_id}'
		        GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
		        )
		GROUP BY ITEM_ID               
	</query>

	<!--  DW 4 월간사용분석 -->
	<query id="op_02050_Long_Term_Planning_list_dw4">
		-- DW 4 월간사용분석
		#if ( "$!{item_id}" != '11000625' )
			SELECT  '사용실적' AS A,		--추가--
					ITEM_ID, 
					F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME,
					ROUND(SUM(DECODE(IDX, 1, USE_QTY)))   "M-8",
			        ROUND(SUM(DECODE(IDX, 2, USE_QTY)))   "M-7",
			        ROUND(SUM(DECODE(IDX, 3, USE_QTY)))   "M-6",					
					ROUND(SUM(DECODE(IDX, 4, USE_QTY)))   "M-5",
			        ROUND(SUM(DECODE(IDX, 5, USE_QTY)))   "M-4",
			        ROUND(SUM(DECODE(IDX, 6, USE_QTY)))   "M-3",
			        ROUND(SUM(DECODE(IDX, 7, USE_QTY)))   "M-2",
			        ROUND(SUM(DECODE(IDX, 8, USE_QTY)))   "M-1",
			        ROUND(SUM(DECODE(IDX, 9, USE_QTY)))   "M"
			FROM    (
			        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
			                TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
			                RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
			        FROM    MAT_MOVE MV, 
			                (
			                SELECT DISTINCT YYYYMM
			                FROM    CAL_MST CAL
			                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
			                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
			                ) CAL
			        WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
			        --AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩  test
					AND     ITEM_ID(+) = '$!{item_id}'
			        GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
			        )
			GROUP BY ITEM_ID      
			UNION	ALL			--추가--
            SELECT	'입고실적' AS A,   
                    ITEM_CD, 
					F_GET_ITEM_NAME(ITEM_CD) ITEM_NAME,
					ROUND(SUM(DECODE(IDX, 1, IPGO_QTY)))   "M-8",
			        ROUND(SUM(DECODE(IDX, 2, IPGO_QTY)))   "M-7",
			        ROUND(SUM(DECODE(IDX, 3, IPGO_QTY)))   "M-6",					
					ROUND(SUM(DECODE(IDX, 4, IPGO_QTY)))   "M-5",
			        ROUND(SUM(DECODE(IDX, 5, IPGO_QTY)))   "M-4",
			        ROUND(SUM(DECODE(IDX, 6, IPGO_QTY)))   "M-3",
			        ROUND(SUM(DECODE(IDX, 7, IPGO_QTY)))   "M-2",
			        ROUND(SUM(DECODE(IDX, 8, IPGO_QTY)))   "M-1",
			        ROUND(SUM(DECODE(IDX, 9, IPGO_QTY)))   "M"
			FROM    (
              		SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_CD, 
			                TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, 
                            NVL(SUM(BUY_QTY),0)  IPGO_QTY,
			                RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
			        FROM    (
                            SELECT	ITEM_CD, 
		                            BUY_DAY, 
		                            BUY_QTY, 
		                            TO_CHAR(BUY_DAY,'YYYYMM') YYYYMM
                            FROM	FT_BUY
                            WHERE   ITEM_CD(+) = '$!{item_id}'
                    		)	FB, 
			                (
			                SELECT DISTINCT YYYYMM
			                FROM    CAL_MST CAL
			                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
			                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
			                ) CAL
			        WHERE   CAL.YYYYMM = FB.YYYYMM(+)
			        --AND     ITYPE(+)	= '' --자재 유형별로 변수 바인딩  TEST
					AND     ITEM_CD(+) = '$!{item_id}'
			        GROUP BY ITEM_CD, CAL.YYYYMM --, QTY_UOM
			        )
			GROUP BY ITEM_CD
			 		
		#else
		-- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
			SELECT  '사용실적' AS A,		--추가--
					'$!{item_id}' ITEM_ID, 
					F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			        ROUND(SUM(M8Q)),
			        ROUND(SUM(M7Q)),
			        ROUND(SUM(M6Q)),
			        ROUND(SUM(M5Q)),
			        ROUND(SUM(M4Q)),
			        ROUND(SUM(M3Q)),
			        ROUND(SUM(M2Q)),
			        ROUND(SUM(M1Q)),
			        ROUND(SUM(M0Q))
			FROM    (
			        SELECT  '사용실적' AS A,	--추가
		        			'$!{item_id}' ITEM_ID, 
			        		F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			                SUM(DECODE(IDX, 1, USE_QTY))   "M8Q",
			                MAX(DECODE(IDX, 1, YYMM))      "M8",
			                
			                SUM(DECODE(IDX, 2, USE_QTY))   "M7Q",
			                MAX(DECODE(IDX, 2, YYMM))      "M7",

			                SUM(DECODE(IDX, 3, USE_QTY))   "M6Q",
			                MAX(DECODE(IDX, 3, YYMM))      "M6",

			                SUM(DECODE(IDX, 4, USE_QTY))   "M5Q",
			                MAX(DECODE(IDX, 4, YYMM))      "M5",
			                
			                SUM(DECODE(IDX, 5, USE_QTY))   "M4Q",
			                MAX(DECODE(IDX, 5, YYMM))      "M4",

			                SUM(DECODE(IDX, 6, USE_QTY))   "M3Q",
			                MAX(DECODE(IDX, 6, YYMM))      "M3",
			                
			                SUM(DECODE(IDX, 7, USE_QTY))   "M2Q",
			                MAX(DECODE(IDX, 7, YYMM))      "M2",
			                
			                SUM(DECODE(IDX, 8, USE_QTY))   "M1Q",
			                MAX(DECODE(IDX, 8, YYMM))      "M1",
			                
			                SUM(DECODE(IDX, 9, USE_QTY))   "M0Q",
			                MAX(DECODE(IDX, 9, YYMM))      "M0"
			        FROM    (
			                SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
			                        TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
			                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
			                FROM    MAT_MOVE MV, 
			                        (
			                        SELECT DISTINCT YYYYMM
			                        FROM    CAL_MST CAL
			                        WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
			                                               AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),0)),'yyyymm')
			                        ) CAL
			                WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
			                --AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
			                AND     ITEM_ID(+) = '$!{item_id}'
			                GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
			                )
			        GROUP BY ITEM_ID
			        UNION ALL
			        SELECT  '사용실적' AS A,		--추가--
			        		 '$!{item_id}' ITEM_ID, 
			        		F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			                SUM(DECODE(IDX, 1, USE_QTY))   "M-8",
			                MAX(DECODE(IDX, 1, YYMM))      "M-8",
			                
			                SUM(DECODE(IDX, 2, USE_QTY))   "M-7",
			                MAX(DECODE(IDX, 2, YYMM))      "M-7",
			                
			                SUM(DECODE(IDX, 3, USE_QTY))   "M-6",
			                MAX(DECODE(IDX, 3, YYMM))      "M-6",
			                
			                SUM(DECODE(IDX, 4, USE_QTY))   "M-5",
			                MAX(DECODE(IDX, 4, YYMM))      "M-5",
			                
			                SUM(DECODE(IDX, 5, USE_QTY))   "M-4",
			                MAX(DECODE(IDX, 5, YYMM))      "M-4",
			                
			                SUM(DECODE(IDX, 6, USE_QTY))   "M-3",
			                MAX(DECODE(IDX, 6, YYMM))      "M-3",
			                
			                SUM(DECODE(IDX, 7, USE_QTY))   "M-2",
			                MAX(DECODE(IDX, 7, YYMM))      "M-2",
			                
			                SUM(DECODE(IDX, 8, USE_QTY))   "M-1",
			                MAX(DECODE(IDX, 8, YYMM))      "M-1",
			                
			                SUM(DECODE(IDX, 9, USE_QTY))   "M-0",
			                MAX(DECODE(IDX, 9, YYMM))      "M-0"
			        FROM    (
			                SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
			                        TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
			                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
			                FROM    MAT_MOVE MV, 
			                        (
			                        SELECT DISTINCT YYYYMM
			                        FROM    CAL_MST CAL
			                        WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
			                                               AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),0)),'yyyymm')
			                        ) CAL
			                WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
			                --AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
			                AND     ITEM_ID(+) = '$!{item_id}'
			                GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
			                )
			        GROUP BY ITEM_ID
			        )
			GROUP BY ITEM_ID 
			UNION	ALL	--입고 실적 추가
            SELECT  '입고실적' AS A,		--추가--
					'$!{item_id}' ITEM_CD, 
					F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			        ROUND(SUM(M8Q)),
			        ROUND(SUM(M7Q)),
			        ROUND(SUM(M6Q)),
			        ROUND(SUM(M5Q)),
			        ROUND(SUM(M4Q)),
			        ROUND(SUM(M3Q)),
			        ROUND(SUM(M2Q)),
			        ROUND(SUM(M1Q)),
			        ROUND(SUM(M0Q))
			FROM    (
			        SELECT  '입고실적' AS A,
                    		'$!{item_id}' ITEM_CD, 
			        		F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			                SUM(DECODE(IDX, 1, IPGO_QTY))   "M8Q",
			                MAX(DECODE(IDX, 1, YYMM))      "M8",
			                
			                SUM(DECODE(IDX, 2, IPGO_QTY))   "M7Q",
			                MAX(DECODE(IDX, 2, YYMM))      "M7",

			                SUM(DECODE(IDX, 3, IPGO_QTY))   "M6Q",
			                MAX(DECODE(IDX, 3, YYMM))      "M6",

			                SUM(DECODE(IDX, 4, IPGO_QTY))   "M5Q",
			                MAX(DECODE(IDX, 4, YYMM))      "M5",
			                
			                SUM(DECODE(IDX, 5, IPGO_QTY))   "M4Q",
			                MAX(DECODE(IDX, 5, YYMM))      "M4",

			                SUM(DECODE(IDX, 6, IPGO_QTY))   "M3Q",
			                MAX(DECODE(IDX, 6, YYMM))      "M3",
			                
			                SUM(DECODE(IDX, 7, IPGO_QTY))   "M2Q",
			                MAX(DECODE(IDX, 7, YYMM))      "M2",
			                
			                SUM(DECODE(IDX, 8, IPGO_QTY))   "M1Q",
			                MAX(DECODE(IDX, 8, YYMM))      "M1",
			                
			                SUM(DECODE(IDX, 9, IPGO_QTY))   "M0Q",
			                MAX(DECODE(IDX, 9, YYMM))      "M0"
			        FROM    (
                            SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_CD, 
                                    TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, 
                                    NVL(SUM(BUY_QTY),0)  IPGO_QTY,
                                    RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
                            FROM    (
                                    SELECT ITEM_CD, 
                                            BUY_DAY, 
                                            BUY_QTY, 
                                            TO_CHAR(BUY_DAY,'YYYYMM') YYYYMM
                                            FROM FT_BUY
                                    )	FB, 
                                    (
                                    SELECT DISTINCT YYYYMM
                                    FROM    CAL_MST CAL
                                    WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
                                                           AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
                                    ) CAL
                            WHERE   CAL.YYYYMM = FB.YYYYMM(+)
                            AND     ITEM_CD(+) = '$!{item_id}'
			                GROUP BY ITEM_CD, CAL.YYYYMM --, QTY_UOM
			                )
			        GROUP BY ITEM_CD
			        UNION ALL
			        SELECT  '입고실적' AS A,		--추가--
			        		'$!{item_id}' ITEM_CD, 
			        		F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
			                SUM(DECODE(IDX, 1,IPGO_QTY))   "M-8",
			                MAX(DECODE(IDX, 1, YYMM))      "M-8",
			                
			                SUM(DECODE(IDX, 2, IPGO_QTY))   "M-7",
			                MAX(DECODE(IDX, 2, YYMM))      "M-7",
			                
			                SUM(DECODE(IDX, 3, IPGO_QTY))   "M-6",
			                MAX(DECODE(IDX, 3, YYMM))      "M-6",
			                
			                SUM(DECODE(IDX, 4, IPGO_QTY))   "M-5",
			                MAX(DECODE(IDX, 4, YYMM))      "M-5",
			                
			                SUM(DECODE(IDX, 5, IPGO_QTY))   "M-4",
			                MAX(DECODE(IDX, 5, YYMM))      "M-4",
			                
			                SUM(DECODE(IDX, 6, IPGO_QTY))   "M-3",
			                MAX(DECODE(IDX, 6, YYMM))      "M-3",
			                
			                SUM(DECODE(IDX, 7, IPGO_QTY))   "M-2",
			                MAX(DECODE(IDX, 7, YYMM))      "M-2",
			                
			                SUM(DECODE(IDX, 8, IPGO_QTY))   "M-1",
			                MAX(DECODE(IDX, 8, YYMM))      "M-1",
			                
			                SUM(DECODE(IDX, 9, IPGO_QTY))   "M-0",
			                MAX(DECODE(IDX, 9, YYMM))      "M-0"
			        FROM    (
							SELECT  NVL(ITEM_CD,  '$!{item_id}') ITEM_CD, 
                                    TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, 
                                    NVL(SUM(BUY_QTY),0)  IPGO_QTY,
                                    RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
                            FROM    (
                                    SELECT ITEM_CD, 
                                            BUY_DAY, 
                                            BUY_QTY, 
                                            TO_CHAR(BUY_DAY,'YYYYMM') YYYYMM
                                            FROM FT_BUY
                                    )	FB, 
                                    (
                                    SELECT DISTINCT YYYYMM
                                    FROM    CAL_MST CAL
                                    WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
                                                           AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
                                    ) CAL
                            WHERE   CAL.YYYYMM = FB.YYYYMM(+)
							AND     ITEM_CD(+) = '$!{item_id}'
			                GROUP BY ITEM_CD, CAL.YYYYMM
			                )
			        GROUP BY ITEM_CD
			        )
			GROUP BY ITEM_CD
		#end 
	</query>


	<!--계열사 재고정보 조회 -->
	<query id="op_02040_Mfs_Stock_Info">
		SELECT	MI.CNFM_DATE, 
		        MI.COM_CODE, 
		        MI.COM_NAME, 
		        MI.COM_MATR_CODE, 
		        MI.COM_MATR_NAME, 
		        IM.ITEM_ID,
		        IM.BASE_UOM,
		        MI.BASE_STOCK
		FROM    ITEM_MST		IM,
				MFS_STOCK_INFO	MI	
		WHERE	IM.ITEM_ID	=	MI.NS_MATR_CODE
		AND   	MI.CNFM_DATE	= TO_CHAR(NEXT_DAY(TRUNC(TO_DATE('$!{cnfm_date}'),'D')-5,2),'YYYYMMDD')
		AND     MI.COM_CODE	= '$!{com_code}'
	</query>
	
	<!--계열사 재고정보 조회 구매-->
	<query id="op_02040_Mfs_Stock_Info_new">
		SELECT	MI.CNFM_DATE, 
		        MI.COM_CODE, 
		        MI.COM_NAME, 
		        MI.COM_MATR_CODE, 
		        MI.COM_MATR_NAME, 
		        IM.ITEM_ID,
		        IM.BASE_UOM,
		        MI.BASE_STOCK
		FROM    ITEM_MST		IM,
				MFS_STOCK_INFO	MI				
		WHERE	IM.ITEM_ID		=	MI.NS_MATR_CODE
		AND   	MI.CNFM_DATE	=   TO_CHAR(NEXT_DAY(TRUNC(TO_DATE('$!{cnfm_date}'),'D')-5,2),'YYYYMMDD')
		AND		MI.COM_CODE		=	'0001000010'		-- 업체는 0001000010 으로 통일
		#if ("$!{com_code}" == '0001000011')			--  현진제업
		AND	COM_MATR_CODE LIKE 'HJ%'
		#elseif ("$!{com_code}" == '0001000012')		--  SJP
		AND	COM_MATR_CODE LIKE 'SJP%'
		#elseif ("$!{com_code}" == '0001000013')		--  신효포장
		AND	COM_MATR_CODE LIKE 'SH%'
		#end
	</query>
	



<query id="op_02050_MFS_STD_STOCK_dw3">
	<!-- 기준정보 설정 품목 리스트 -->

	SELECT	T1.ITEM_ID,
			F_GET_ITEM_NAME(T1.ITEM_ID)ITEM_NAME,
			T1.BASE_UOM,
			NVL(T2.PRE_STD_STOCK,0)																	PRE_STD_TOCK,		--전주 기준재고
	        NVL(T4.PRE_FC_QTY,0)																	PRE_FC_QTY,			--전주 발주예고 
	        NVL(T5.PRE_IPGO,0)																		PRE_IPGO,		--전주 입고실적	
	        CASE	
	        		WHEN	NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0) &lt; 0	THEN	0
	        ELSE			NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0)
			END		NOW_EXPT,		--금주 예상재고
	        NVL(T6.COM_STOCK,0)																	COM_STOCK,		--계열사 실재고
            -- CASE	WHEN	T6.COM_STOCK/(NVL(T2.PRE_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0))*100 &gt;=80
            			-- AND	T6.COM_STOCK/(NVL(T2.PRE_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0))*100 &lt;=120	THEN	NVL(T6.COM_STOCK,0) 
            		-- ELSE	NVL(T2.PRE_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0) 
            -- END	DIFF_QTY,																						--예실차
	        CASE	
            		WHEN	NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0)) &lt; 0 THEN	0	
            ELSE			NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0))
            END		DIFF_QTY, 	--예실차
	        -- NVL(T6.COM_STOCK,0) - NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0)	DIFF_QTY, 	--예실차
	        --	0							NOW_EXPT,			
	        --	0							SIL_STOCK,
			--	0							DIFF_QTY,
	        NVL(T3.CNFM_STOCK,0)			CNFM_STOCK			--당주 확정재고       
	FROM	(	
			SELECT	*
			FROM	ITEM_MST			
			)	T1,
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                UNIT,
	                SUM(CNFM_STOCK)		PRE_STD_STOCK	--전주 기준재고
	        FROM	MFS_STD_STOCK	
	        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
	        GROUP	BY	CONS_ITEM_ID,
	        	                UNIT
	        )	T2,
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
	        FROM	MFS_STD_STOCK	
	        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
	        GROUP	BY	CONS_ITEM_ID,
	        			UNIT
	        )	T3,
			--전주 발주예고
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                SUM(FC_QTY)	PRE_FC_QTY				--전주 발주예고
	        FROM	MFS_ORDER_FORECAST	
	        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
	        GROUP	BY	CONS_ITEM_ID
	        )	T4,
	        (
			SELECT 	ITEM_CD,
			        F_GET_ITEM_NAME(ITEM_CD)ITEM_NAME,
			        SUM(BUY_QTY)	PRE_IPGO				--전주 입고실적
			FROM	FT_BUY
			WHERE	BUY_DAY	BETWEEN	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	AND	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-','')),'D')
			-- WHERE	BUY_DAY	BETWEEN	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	AND	TO_DATE(REPLACE('$!{cnfm_date}','-',''))
			-- WHERE	BUY_DAY	BETWEEN	TRUNC(SYSDATE-7,'D')+1	AND	TRUNC(SYSDATE,'D')
			GROUP	BY	ITEM_CD
			)	T5,
			(
			SELECT 	NS_MATR_CODE,
			        F_GET_ITEM_NAME(NS_MATR_CODE)ITEM_NAME,
			        SUM(BASE_STOCK)	COM_STOCK				--계열사 실재고
			FROM	MFS_STOCK_INFO
			WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
			-- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
			GROUP	BY	NS_MATR_CODE
			)	T6		
	WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T5.ITEM_CD(+)
	AND		T1.ITEM_ID	=	T6.NS_MATR_CODE(+)
	AND     T1.ITYPE IN ( 'ROH1','ROH2')
	AND    (T1.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR T1.SELL_STOP_DATE = '00000000')
	AND		NOT (T1.MATERIAL_GROUP &gt;= '5K000' AND     T1.MATERIAL_GROUP &lt;= '5S999') --수출품
	AND		T1.ITEM_ID	=	'$!{item_id}'
	-- GROUP	BY	T1.ITEM_ID,
				-- T1.BASE_UOM
	ORDER	BY	1    
								
	</query>



	<query id="op_02050_plan_date_mst">
	SELECT	T1.CNFM_DATE
	FROM 	MFS_STOCK_INFO	T1,
			CAL_MST			T2
	WHERE	T1.CNFM_DATE	=	T2.YYYYMMDD
	AND		T2.WEEK_DAY	=	'월'
	GROUP	BY	T1.CNFM_DATE     
	ORDER	BY	1	DESC	

	</query>


	
<!-- -->

	<!-- 확정여부  -->
	<query id="op_02050_FC_QTY_CNFM_FLAG">
		SELECT	CNFM_FLAG,
				'$!{user_id}' MADE_BY,
				'$!{com_code}' COM_CODE,
				CASE
					WHEN CNFM_FLAG	= 'Y' THEN '확정'
					ELSE '미확정'
				END
		FROM	FC_QTY_CNFM, DUAL
		-- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
		WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
		AND		COM_CODE	= '$!{com_code}'
	</query>
	
	<!-- 구매팀 확정여부  -->
	<query id="op_02050_FC_QTY_CNFM_FLAG_new">
		SELECT	PUR_FLAG,
				'$!{user_id}' MADE_BY,
				'$!{com_code}' COM_CODE,
				CASE
					WHEN PUR_FLAG	= 'Y' THEN '확정'
					ELSE '미확정'
				END
		FROM	FC_QTY_CNFM, DUAL
		-- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
		WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
		AND		COM_CODE	= '$!{com_code}'
	</query>


<!-- 발주예고량 확정 여부 확정_Y로 변경  -->
	<query id="op_02050_MERGE INTO_FC_QTY_CNFM_FLAG">
   		MERGE INTO	FC_QTY_CNFM FC
		USING	(
		        SELECT	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	CNFM_DATE,-- 2013-09-02 달력 추가
		        		-- TRUNC(SYSDATE,'D')+1	CNFM_DATE,
		        		'Y'	CNFM_FLAG,
						'$!{com_code}' COM_CODE,
		                '$!{user_id}' MADE_BY
		        FROM	DUAL
				) FC1
		ON	(FC.CNFM_DATE	=	FC1.CNFM_DATE
		AND	FC.COM_CODE	=	FC1.COM_CODE)
		WHEN MATCHED THEN UPDATE set
		FC.CNFM_FLAG	=	FC1.CNFM_FLAG
		WHEN NOT MATCHED THEN INSERT(FC.CNFM_DATE,	FC.CNFM_FLAG,	FC.COM_CODE, FC.MADE_TYPE,	FC.MADE_DTTM,	FC.MADE_BY)
		VALUES			 			(FC1.CNFM_DATE,	FC1.CNFM_FLAG,	FC1.COM_CODE,	'UP',		SYSDATE, 		FC1.MADE_BY) 
	</query>
	
	<query id="op_02050_MERGE INTO_FC_QTY_CNFM_FLAG_NEW">
   		MERGE INTO	FC_QTY_CNFM FC
		USING	(
		        SELECT	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	CNFM_DATE,-- 2013-09-02 달력 추가
		        		-- TRUNC(SYSDATE,'D')+1	CNFM_DATE,
		        		'Y'	PUR_FLAG,
						'$!{com_code}' COM_CODE,
		                '$!{user_id}' MADE_BY
		        FROM	DUAL
				) FC1
		ON	(FC.CNFM_DATE	=	FC1.CNFM_DATE
		AND	FC.COM_CODE	=	FC1.COM_CODE)
		WHEN MATCHED THEN UPDATE set
		FC.PUR_FLAG	=	FC1.PUR_FLAG
		WHEN NOT MATCHED THEN INSERT(FC.CNFM_DATE,	FC.PUR_FLAG,	FC.COM_CODE, FC.MADE_TYPE,	FC.MADE_DTTM,	FC.MADE_BY)
		VALUES			 			(FC1.CNFM_DATE,	FC1.PUR_FLAG,	FC1.COM_CODE,	'UP',		SYSDATE, 		FC1.MADE_BY) 
	</query>
	

<query id="op_02050_MFS_STD_STOCK_dw3">
	<!-- 기준정보 설정 품목 리스트 -->
	SELECT	T1.ITEM_ID,
			F_GET_ITEM_NAME(T1.ITEM_ID)ITEM_NAME,
			T1.BASE_UOM,
			NVL(T2.PRE_STD_STOCK,0)																	PRE_STD_STOCK,	--전주 기준재고
	        NVL(T4.PRE_FC_QTY,0)																	PRE_FC_QTY,		--전주 발주예고 
	        NVL(T5.PRE_IPGO,0)																		PRE_IPGO,		--전주 입고실적	
	        CASE	
	        		WHEN	NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0) &lt; 0	THEN	0
	        ELSE	NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0)
			END		NOW_EXPT,		--금주 예상재고
	        -- NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0) 						NOW_EXPT,			--금주 예상재고
	        NVL(T6.COM_STOCK,0)																	COM_STOCK,			--계열사 실재고
            -- CASE	WHEN	T6.COM_STOCK/(NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0))*100 &gt;=80
            			-- AND	T6.COM_STOCK/(NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0))*100 &lt;=120	THEN	NVL(T6.COM_STOCK,0) 
            		-- ELSE	NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0) 
            -- END	DIFF_QTY,																						--예실차
	        CASE	
            		WHEN	NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0)) &lt; 0 THEN	0	
            ELSE			NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STD_STOCK,0) + NVL(T4.PRE_FC_QTY,0) - NVL(T5.PRE_IPGO,0))
            END		DIFF_QTY, 	--예실차
	        --NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0))	DIFF_QTY, 	--예실차
	        --	0							NOW_EXPT,			
	        --	0							SIL_STOCK,
			--	0							DIFF_QTY,
	        NVL(T3.CNFM_STOCK,0)		CNFM_STOCK			--당주 확정재고       
	FROM	(	
			SELECT	*
			FROM	ITEM_MST			
			)	T1,
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                UNIT,
	                SUM(CNFM_STOCK)		PRE_STD_STOCK	--전주 기준재고
	        FROM	MFS_STD_STOCK	
	        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
	        --	WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
	        GROUP	BY	CONS_ITEM_ID,
	        	                UNIT
	        )	T2,
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
	        FROM	MFS_STD_STOCK	
	        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
	        GROUP	BY	CONS_ITEM_ID,
	        			UNIT
	        )	T3,
			--전주 발주예고
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                SUM(FC_QTY)	PRE_FC_QTY				--전주 발주예고
	        FROM	MFS_ORDER_FORECAST	
	        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
	        GROUP	BY	CONS_ITEM_ID
	        )	T4,
	        (
			SELECT 	ITEM_CD,
			        F_GET_ITEM_NAME(ITEM_CD)ITEM_NAME,
			        SUM(BUY_QTY)	PRE_IPGO				--전주 입고실적
			FROM	FT_BUY
			WHERE	BUY_DAY	BETWEEN	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	AND	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-','')),'D')
			-- WHERE	BUY_DAY	BETWEEN	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	AND	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-- 2013-09-02 달력 추가
			-- WHERE	BUY_DAY	BETWEEN	TRUNC(SYSDATE-7,'D')+1	AND	TRUNC(SYSDATE,'D')
			GROUP	BY	ITEM_CD
			)	T5,
			(
			SELECT 	NS_MATR_CODE,
			        F_GET_ITEM_NAME(NS_MATR_CODE)ITEM_NAME,
			        SUM(BASE_STOCK)	COM_STOCK				--계열사 실재고
			FROM	MFS_STOCK_INFO
			WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
			-- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
			GROUP	BY	NS_MATR_CODE
			)	T6		
	WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T5.ITEM_CD(+)
	AND		T1.ITEM_ID	=	T6.NS_MATR_CODE(+)
	AND     T1.ITYPE IN ( 'ROH1','ROH2')
	AND    (T1.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR T1.SELL_STOP_DATE = '00000000')
	AND		NOT (T1.MATERIAL_GROUP &gt;= '5K000' AND     T1.MATERIAL_GROUP &lt;= '5S999') --수출품
	AND		T1.ITEM_ID	=	'$!{item_id}'
	-- GROUP	BY	T1.ITEM_ID,
				-- T1.BASE_UOM
	ORDER	BY	1    
	</query>


<query id="op_02060_com_roh_cnfm_list">
		<!-- 계열사 발주예고량 조회 리스트-->
SELECT	M1.ITEM_ID,
		M1.COM_MATR_CODE,
        F_GET_ITEM_NAME(M1.ITEM_ID)ITEM_NAME,
        M1.BASE_UOM,
        --M1.MFS_FLAG,
        M1.STOCK,								--농심 현재고
        M1.COM_STOCK,							--(업체)계열사 재고
        M3.CNFM_STOCK CNFM_STOCK,				--당주 확정재고(농심 기준재고)
        M1.STOCK + M3.CNFM_STOCK	SUB_TOT,
        NVL(M2.ODER_QTY,0)			ODER_QTY,	
		M1.STOCK + M3.CNFM_STOCK - NVL(M2.ODER_QTY,0)  W1_STOCK,		--차주초 예상재고
        M3.FC_QTY		FC_QTY,						--당주 발주예고량
        F_GET_ITEM_MSG('OP_02050',M1.ITEM_ID)MSG	--2013-09-09 SCM팀 정승용 사원 요청
FROM		(
            SELECT	DISTINCT	
            		REPLACE('$!{cnfm_date}','-','')	CNFM_DATE,
            		S4.COM_CODE,
            		S1.ITEM_ID,
            		S3.COM_MATR_CODE,
                    F_GET_ITEM_NAME(S1.ITEM_ID)ITEM_NAME,
                    S1.BASE_UOM,
                    S1.MFS_FLAG,
                    ROUND(NVL(S2.STOCK,0),0)    					STOCK,			--농심 현재고--
                    ROUND(NVL(S3.COM_STOCK,0),0)    				COM_STOCK		--계열사 현재고--
            FROM	(
            		SELECT	*
            		FROM	ITEM_MST
					WHERE	MFS_FLAG	=	'$!{mfs_flag}'
            		)					S1,
                    APS_PR_PLAN_ROH		S2,
                    (
                    SELECT	DISTINCT		NS_MATR_CODE,
                    						COM_MATR_CODE,
                    		SUM(BASE_STOCK)	COM_STOCK
                    FROM	MFS_STOCK_INFO
                    WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
                    --AND		MADE_BY	=	'$!{user_id}'
                    GROUP	BY	NS_MATR_CODE,	COM_MATR_CODE
                    )	S3,
                    (
                    SELECT	COM_CODE, MATNR
                    FROM	(
		                    SELECT 	DISTINCT '0001000050' COM_CODE, MATNR
							FROM 	SAPZMMT0023
							WHERE	NAME1 LIKE '%태경%' 
							UNION	ALL
							SELECT 	DISTINCT '0001000021' COM_CODE, MATNR
							FROM 	SAPZMMT0023
							WHERE	NAME1 LIKE '%율촌%'
							UNION ALL
                            SELECT 	DISTINCT '0001000010' COM_CODE, MATNR
							FROM 	SAPZMMT0023	
                            WHERE	name1 LIKE '%에스제이피%' OR name1 LIKE '%현진제업%' OR name1 LIKE '%신효포장%'
							)
					#if ("$!{user_id}" == '1931013')	--  태경농산
					WHERE	COM_CODE = '0001000050'
					#elseif ("$!{user_id}" == '210012')	--  율촌
					WHERE	COM_CODE = '0001000021'
					#elseif ("$!{user_id}" == 'admin')	--  율촌
					WHERE	COM_CODE IN ('0001000021','0001000010')
					#end
                    )	S4
            WHERE	S1.ITEM_ID	=	S2.ITEM_ID(+)
            AND		S1.ITEM_ID	=	S3.NS_MATR_CODE(+)
            AND		S1.ITEM_ID	=	S4.MATNR
            --  AND		S1.MFS_FLAG	=	'$!{mfs_flag}'
            AND		S1.ITYPE	IN('ROH1','ROH2') --수정		
            AND     S2.VERSION(+)    =	TO_DATE('$!{cnfm_date}')	-- 2013-09-02 달력 추가
            -- AND     S2.VERSION(+)    =	TO_CHAR(SYSDATE,'YYYYMMDD')
            AND		S1. ITEM_ID	NOT LIKE	'30%' -- BOX류 제외
			)	M1,
			--금주 소요량--
            (
                        SELECT	B.CONS_ITEM_ID				MATR_CODE,
        			/* 생산계획 * CONS_QTY / PROD_QYT */ 
                    ROUND(SUM(F_GETCONV_UOM(A.ITEM_ID,A.QTY_UOM,B.PROD_QTY_UOM,A.PLAN_QTY)*B.CONS_QTY/B.PROD_QTY),0)	ODER_QTY
            FROM	(        
                    SELECT	K1.PLANT_ID,
                            K1.ITEM_ID							ITEM_ID,
                            K1.PROD_VER							PROD_VER,
                            K1.QTY_UOM							QTY_UOM,
                            SUM(K1.SHIFT_QTY)					PLAN_QTY
                    FROM	(        
                            SELECT  t1.*
                            FROM    daily_sch_plan_shift t1,
                                    (
                                    /* 3주전부터 생산계획 확정 VERSION정보(완제품)*/
                                    SELECT  k1.cat_id, k2.plant_id, k1.VERSION,
                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+ 7,'D')+1,'YYYYMMDD')    s_date,
                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
                                    FROM    plan_version_log    k1,
                                            (
                                            SELECT  cat_id, sub_cat, plant_id
                                            FROM    engn_bat_mst
                                            WHERE   period_type = 'DAILY' AND cat_id = 'PS'
                                            )                   k2
                                    WHERE   k1.period_type = 'DAILY'
                                    AND     k1.cat_id = 'PS'
                                    --AND     k1.run_date BETWEEN TRUNC(SYSDATE-21)  AND  TRUNC (SYSDATE)
                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
                                    AND     TRIM (VERSION) IS NOT NULL
                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
                                    AND     k1.cat_id = k2.cat_id
                                    AND     k1.sub_cat = k2.sub_cat
                                    )                   t2,
                                    /* 마지막 공정(투입공정) 추출 */
                                    V_LAST_PROC_PRODVER     t3         
                            WHERE   t1.cat_id = t2.cat_id
                            AND     t1.plant_id = t2.plant_id
                            AND     t1.VERSION = t2.VERSION
                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
                            AND     t1.plant_id = t3.plant_id
                            AND     t1.proc_id = t3.proc_id
                            AND     t1.item_id = t3.item_id
                            UNION ALL
                            /* 반제품  */
                            SELECT  t1.*
                            FROM    daily_sch_plan_shift    t1,
                                    (
                                    /* 3주전부터 생산계획 확정 VERSION정보(반제품)*/
                                    SELECT  k1.cat_id, k1.VERSION,
                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+ 7,'D')+1,'YYYYMMDD')    s_date,
                                            TO_CHAR(TRUNC(TO_DATE(SUBSTR(k1.VERSION,1,8),'YYYY-MM-DD')+14,'D'),'YYYYMMDD')      e_date
                                    FROM    plan_version_log    k1,
                                            (
                                            SELECT cat_id, sub_cat, plant_id
                                            FROM engn_bat_mst
                                            WHERE period_type = 'DAILY' AND cat_id = 'SS'
                                            )                   k2
                                    WHERE   k1.period_type = 'DAILY'
                                    AND     k1.cat_id = 'SS'
                                    AND     k1.run_date >= TRUNC(SYSDATE-21)
                                    AND     TRIM (VERSION) IS NOT NULL
                                    AND     k1.status >= '23' -- 상태가 계획확정 이상인 것 중에서 찾는다
                                    AND     k1.cat_id = k2.cat_id
                                    AND     k1.sub_cat = k2.sub_cat
                                    )                       t2,
                                    /* 마지막 공정(투입공정) 추출 */
                                    V_LAST_PROC_PRODVER     t3
                            WHERE   t1.cat_id = t2.cat_id
                            AND     t1.VERSION = t2.VERSION
                            AND     t1.prod_dates BETWEEN t2.s_date AND t2.e_date
                            AND     t1.plant_id = t3.plant_id
                            AND     t1.proc_id = t3.proc_id
                            AND     t1.item_id = t3.item_id
                            )	K1
                    WHERE	K1.prod_dates BETWEEN 	TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
                                          AND		TO_CHAR(TRUNC(SYSDATE,'D')+7,'YYYYMMDD')
                    GROUP
                    BY		K1.PLANT_ID,
                            K1.ITEM_ID,
                            K1.PROD_VER,
                            K1.QTY_UOM                                        
                    )    	A,
                    MBOM	B
            WHERE   A.ITEM_ID   = B.PROD_ITEM_ID
            AND		A.PLANT_ID	= B.PLANT_ID
            AND		A.PROD_VER	= B.PROD_VER
            GROUP BY	B.CONS_ITEM_ID
            )	M2,
			<!--기준재고 및 확정재고 설정-->
		(
		SELECT	T1.ITEM_ID,
				F_GET_ITEM_NAME(T1.ITEM_ID)ITEM_NAME,
				NVL(T2.PRE_STOCK,0)		PRE_STOCK,		--전주 기준재고
		        NVL(T4.FC_QTY,0)		FC_QTY,			--당주 발주예고 0
		        --0						PRE_IPGO,			
		        --0						NOW_EXPT,
		        --0						SIL_STOCK,
				--0						DIFF_QTY,
		        NVL(T3.CNFM_STOCK,0)	CNFM_STOCK		--당주 확정재고       
		FROM	ITEM_MST	T1,
		        (
		        SELECT 	CONS_ITEM_ID,
		                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
		                SUM(CNFM_STOCK)		PRE_STOCK	--전주 기준재고
		        FROM	MFS_STD_STOCK	
		        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
		        -- WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
		        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
		        GROUP	BY	CONS_ITEM_ID
		        )			T2,
		        (
		        SELECT 	CONS_ITEM_ID,
		                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
		                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
		        FROM	MFS_STD_STOCK	
		        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
		        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
		        GROUP	BY	CONS_ITEM_ID
		        )			T3,
				--당주 발주예고
		        (
		        SELECT 	CONS_ITEM_ID,
		                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
		                SUM(FC_QTY)	FC_QTY		--당주 발주예고
		        FROM	MFS_ORDER_FORECAST	
		        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
		        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
		        GROUP	BY	CONS_ITEM_ID
		        )			T4
		WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
		AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
		AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
		AND     T1.ITYPE IN ( 'ROH1','ROH2')
		)	M3,
		 (
         SELECT DISTINCT CNFM_DATE, COM_CODE
         FROM 	FC_QTY_CNFM
         WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
         #if ("$!{com_code}" == '0001000010')
         AND	PUR_FLAG	= 'Y'
         #else
         AND	CNFM_FLAG	= 'Y'
         #end
         AND	COM_CODE	LIKE '%'||'$!{com_code}'||'%'
        #if ("$!{user_id}" == '1931013')	--  태경농산
--		AND	COM_CODE LIKE '%0001000050%'
		#elseif ("$!{user_id}" == '210012')	--  율촌
--		AND	COM_CODE LIKE '%0001000021%'
		#elseif ("$!{user_id}" == 'admin')	--  율촌
--		AND	COM_CODE LIKE '%0001000021%' OR COM_CODE LIKE '%0001000010%'
		#end		 
         ) M4            
WHERE	M1.ITEM_ID	=	M2.MATR_CODE(+) 
AND		M1.ITEM_ID	=	M3.ITEM_ID(+)
AND		M1.CNFM_DATE	= M4.CNFM_DATE
AND		M1.COM_CODE		= M4.COM_CODE
#if ("$!{com_code}" == '0001000010')
         AND		M3.FC_QTY &gt;= 0
         #else
         AND		M3.FC_QTY &gt; 0
         #end
ORDER	BY	1  
	
	</query>

	<query id="op_02060_com_roh_cnfm_list_dw4_monthly_header">
		-- DW 4 월간사용분석 해더
		SELECT  MAX(DECODE(IDX, 1, YYMM))      "M-8",	--9
        		MAX(DECODE(IDX, 2, YYMM))      "M-7",	--10
		        MAX(DECODE(IDX, 3, YYMM))      "M-6",	--11
        		MAX(DECODE(IDX, 4, YYMM))      "M-5",	--12
		        MAX(DECODE(IDX, 5, YYMM))      "M-4",	--1
				MAX(DECODE(IDX, 6, YYMM))      "M-3",	--2
		        MAX(DECODE(IDX, 7, YYMM))      "M-2",	--3
		        MAX(DECODE(IDX, 8, YYMM))      "M-1",	--4
		        MAX(DECODE(IDX, 9, YYMM))      "M"		--5
		FROM    (
		        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
		                TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, NVL(SUM(MOVE_QTY),0)  USE_QTY,
		                RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
		        FROM    MAT_MOVE MV, 
		                (
		                SELECT DISTINCT YYYYMM
		                FROM    CAL_MST CAL
		                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
		                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
		                ) CAL
		        WHERE   CAL.YYYYMM = MV.MOVE_YYYYMM(+)
		        --AND     ITYPE(+)	= '$!{itype}' --자재 유형별로 변수 바인딩
				AND     ITEM_ID(+) = '$!{item_id}'
		        GROUP BY ITEM_ID, CAL.YYYYMM --, QTY_UOM
		        )
		GROUP BY ITEM_ID               
	</query>


	<query id="op_02060_com_roh_cnfm_list_dw4_monthly">
	-- DW 4 월간사용분석
#if ( "$!{item_id}" != '11000625' )
SELECT	'출고실적' AS A,   
        ITEM_CD, 
        F_GET_ITEM_NAME(ITEM_CD) ITEM_NAME,
        ROUND(SUM(DECODE(IDX, 1, IPGO_QTY)))   "M-8",
        ROUND(SUM(DECODE(IDX, 2, IPGO_QTY)))   "M-7",
        ROUND(SUM(DECODE(IDX, 3, IPGO_QTY)))   "M-6",					
        ROUND(SUM(DECODE(IDX, 4, IPGO_QTY)))   "M-5",
        ROUND(SUM(DECODE(IDX, 5, IPGO_QTY)))   "M-4",
        ROUND(SUM(DECODE(IDX, 6, IPGO_QTY)))   "M-3",
        ROUND(SUM(DECODE(IDX, 7, IPGO_QTY)))   "M-2",
        ROUND(SUM(DECODE(IDX, 8, IPGO_QTY)))   "M-1",
        ROUND(SUM(DECODE(IDX, 9, IPGO_QTY)))   "M"
FROM    (
        SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_CD, 
                TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, 
                NVL(SUM(BUY_QTY),0)  IPGO_QTY,
                RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
        FROM    (
                SELECT	ITEM_CD, 
                        BUY_DAY, 
                        BUY_QTY, 
                        TO_CHAR(BUY_DAY,'YYYYMM') YYYYMM
                FROM	FT_BUY
                WHERE   ITEM_CD(+) = '$!{item_id}'
                )	FB, 
                (
                SELECT DISTINCT YYYYMM
                FROM    CAL_MST CAL
                WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
                                       AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
                ) CAL
        WHERE   CAL.YYYYMM = FB.YYYYMM(+)
        --AND     ITYPE(+)	= '' --자재 유형별로 변수 바인딩  TEST
        AND     ITEM_CD(+) = '$!{item_id}'
        GROUP BY ITEM_CD, CAL.YYYYMM --, QTY_UOM
        )
GROUP BY ITEM_CD
#else
-- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
SELECT  '출고실적' AS A,		--추가--
        '$!{item_id}' ITEM_CD, 
        F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
        ROUND(SUM(M8Q)),
        ROUND(SUM(M7Q)),
        ROUND(SUM(M6Q)),
        ROUND(SUM(M5Q)),
        ROUND(SUM(M4Q)),
        ROUND(SUM(M3Q)),
        ROUND(SUM(M2Q)),
        ROUND(SUM(M1Q)),
        ROUND(SUM(M0Q))
FROM    (
        SELECT  '출고실적' AS A,
                '$!{item_id}' ITEM_CD, 
                F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
                SUM(DECODE(IDX, 1, IPGO_QTY))   "M8Q",
                MAX(DECODE(IDX, 1, YYMM))      "M8",
			                
                SUM(DECODE(IDX, 2, IPGO_QTY))   "M7Q",
                MAX(DECODE(IDX, 2, YYMM))      "M7",

                SUM(DECODE(IDX, 3, IPGO_QTY))   "M6Q",
                MAX(DECODE(IDX, 3, YYMM))      "M6",

                SUM(DECODE(IDX, 4, IPGO_QTY))   "M5Q",
                MAX(DECODE(IDX, 4, YYMM))      "M5",
			                
                SUM(DECODE(IDX, 5, IPGO_QTY))   "M4Q",
                MAX(DECODE(IDX, 5, YYMM))      "M4",

                SUM(DECODE(IDX, 6, IPGO_QTY))   "M3Q",
                MAX(DECODE(IDX, 6, YYMM))      "M3",
			                
                SUM(DECODE(IDX, 7, IPGO_QTY))   "M2Q",
                MAX(DECODE(IDX, 7, YYMM))      "M2",
			                
                SUM(DECODE(IDX, 8, IPGO_QTY))   "M1Q",
                MAX(DECODE(IDX, 8, YYMM))      "M1",
			                
                SUM(DECODE(IDX, 9, IPGO_QTY))   "M0Q",
                MAX(DECODE(IDX, 9, YYMM))      "M0"
        FROM    (
                SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_CD, 
                        TO_CHAR(TO_DATE(CAL.YYYYMM||'01'),'YYYY-MM') YYMM, 
                        NVL(SUM(BUY_QTY),0)  IPGO_QTY,
                        RANK() OVER (ORDER BY  CAL.YYYYMM) IDX
                FROM    (
                        SELECT ITEM_CD, 
                                BUY_DAY, 
                                BUY_QTY, 
                                TO_CHAR(BUY_DAY,'YYYYMM') YYYYMM
                                FROM FT_BUY
                        )	FB, 
                        (
                        SELECT DISTINCT YYYYMM
                        FROM    CAL_MST CAL
                        WHERE   CAL.YYYYMM BETWEEN TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE),-8),'MONTH'),'yyyymm') 
                                               AND TO_CHAR(TRUNC(ADD_MONTHS(LAST_DAY(SYSDATE), 0)),'yyyymm')
                        ) CAL
                WHERE   CAL.YYYYMM = FB.YYYYMM(+)
                AND     ITEM_CD(+) = '$!{item_id}'
                GROUP BY ITEM_CD, CAL.YYYYMM --, QTY_UOM
                )
        GROUP BY ITEM_CD
        )
GROUP BY ITEM_CD
#end 
	</query>


	<!-- DW4 주간사용분석 해더-->
	<query id="op_02060_com_roh_cnfm_list_dw4_weekly_header">
-- DW 4 주간사용분석 해더
SELECT	MAX(DECODE(IDX, 12,  CAL_DATE))     "W-8",
        MAX(DECODE(IDX, 11,  CAL_DATE))     "W-7",
        MAX(DECODE(IDX, 10,  CAL_DATE))     "W-6",
        MAX(DECODE(IDX, 9,  CAL_DATE))      "W-5",
        MAX(DECODE(IDX, 8,  CAL_DATE))      "W-4",
        MAX(DECODE(IDX, 7,  CAL_DATE))      "W-3",
        MAX(DECODE(IDX, 6,  CAL_DATE))      "W-2",
        MAX(DECODE(IDX, 5,  CAL_DATE))      "W-1",
        MAX(DECODE(IDX, 4,  CAL_DATE))      "W"  
FROM    (
        SELECT  NVL(ITEM_ID, '$!{item_id}') ITEM_ID, 
                TO_CHAR(TO_DATE(CAL_DATE),'YY-MM-DD') CAL_DATE,
                NVL(SUM(MOVE_QTY),0) USE_QTY,
                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
        FROM    (
                SELECT  MV.ITEM_ID,
                        TRUNC(TO_DATE(MV.MOVE_DATE),'IW') MOVE_DATE,
                        SUM(MOVE_QTY) MOVE_QTY
                FROM    MAT_MOVE MV
                WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
                --WHERE   MV.MOVE_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20)
                AND     MV.ITEM_ID = '$!{item_id}'
                GROUP
                BY      MV.ITEM_ID, TRUNC(TO_DATE(MV.MOVE_DATE),'IW')        
                )  MV, 
                (
                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
                FROM    CAL_MST CAL
                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
                --WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60) AND TRUNC(SYSDATE+20) 
                ) CAL
        WHERE   CAL.CAL_DATE = MV.MOVE_DATE(+)
        GROUP BY ITEM_ID, MOVE_DATE, CAL.CAL_DATE
        ORDER BY 1
        )
GROUP BY ITEM_ID
	</query>			

<!-- DW4 주간사용분석-->
	<query id="op_02060_com_roh_cnfm_list_dw4_weekly">
		-- DW 4 주간사용분석
#if ( "$!{item_id}" != '11000625' )
SELECT  '출고실적' AS A,
        '$!{item_id}', 
        F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
        ROUND(SUM(DECODE(IDX, 12,	IPGO_QTY)))   "W-8",
        ROUND(SUM(DECODE(IDX, 11,	IPGO_QTY)))   "W-7",
        ROUND(SUM(DECODE(IDX, 10,	IPGO_QTY)))   "W-6",
        ROUND(SUM(DECODE(IDX, 9,	IPGO_QTY)))   "W-5",
        ROUND(SUM(DECODE(IDX, 8,	IPGO_QTY)))   "W-4",
        ROUND(SUM(DECODE(IDX, 7,	IPGO_QTY)))   "W-3",
        ROUND(SUM(DECODE(IDX, 6,	IPGO_QTY)))   "W-2",
        ROUND(SUM(DECODE(IDX, 5,	IPGO_QTY)))   "W-1",
        ROUND(SUM(DECODE(IDX, 4,	IPGO_QTY)))   "W"
FROM    (
        SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_ID, 
                BUY_DAY,
                NVL(SUM(IPGO_QTY),0) IPGO_QTY,
                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
        FROM    (
                SELECT	ITEM_CD, 
                        TRUNC(TO_DATE(FB.BUY_DAY),'IW') BUY_DAY,
                        SUM(BUY_QTY) IPGO_QTY
                FROM	FT_BUY	FB
                WHERE   FB.BUY_DAY BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
                AND		ITEM_CD(+) = '$!{item_id}'
                GROUP	BY	FB.ITEM_CD, 
                            TRUNC(TO_DATE(FB.BUY_DAY),'IW')        
                ) FB, 
                (
                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
                FROM    CAL_MST CAL
                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
                ) CAL
        WHERE   CAL.CAL_DATE = FB.BUY_DAY(+)
        GROUP BY	ITEM_CD, 
                    BUY_DAY, 
                    CAL.CAL_DATE
        )
#else
-- 11000625(후추풍미료) 의 경우 11001487(후추풍미료(B)) 와 같이 계산
SELECT  '출고실적' AS A,
        '$!{item_id}', 
        F_GET_ITEM_NAME('$!{item_id}') ITEM_NAME,
        ROUND(SUM(DECODE(IDX, 12,	IPGO_QTY)))   "W-8",
        ROUND(SUM(DECODE(IDX, 11,	IPGO_QTY)))   "W-7",
        ROUND(SUM(DECODE(IDX, 10,	IPGO_QTY)))   "W-6",
        ROUND(SUM(DECODE(IDX, 9,	IPGO_QTY)))   "W-5",
        ROUND(SUM(DECODE(IDX, 8,	IPGO_QTY)))   "W-4",
        ROUND(SUM(DECODE(IDX, 7,	IPGO_QTY)))   "W-3",
        ROUND(SUM(DECODE(IDX, 6,	IPGO_QTY)))   "W-2",
        ROUND(SUM(DECODE(IDX, 5,	IPGO_QTY)))   "W-1",
        ROUND(SUM(DECODE(IDX, 4,	IPGO_QTY)))   "W"
FROM    (
        SELECT  NVL(ITEM_CD, '$!{item_id}') ITEM_ID, 
                BUY_DAY,
                NVL(SUM(IPGO_QTY),0) IPGO_QTY,
                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
        FROM    (
                SELECT	ITEM_CD, 
                        TRUNC(TO_DATE(FB.BUY_DAY),'IW') BUY_DAY,
                        --BUY_DAY, 
                        SUM(BUY_QTY) IPGO_QTY
                FROM	FT_BUY	FB
                WHERE   FB.BUY_DAY BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
                AND     FB.ITEM_CD = '$!{item_id}'
                GROUP	BY	FB.ITEM_CD, 
                            TRUNC(TO_DATE(FB.BUY_DAY),'IW')        
                ) FB, 
                (
                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
                FROM    CAL_MST CAL
                WHERE   CAL.CAL_DATE BETWEEN TRUNC(SYSDATE-60,'D')+1 AND TRUNC(SYSDATE+20,'D')+1
                ) CAL
        WHERE   CAL.CAL_DATE = FB.BUY_DAY(+)
        GROUP BY	ITEM_CD, 
                    BUY_DAY, 
                    CAL.CAL_DATE
        )
#end 		
	</query>



<query id="op_02060_MFS_STD_STOCK_dw3">
	<!-- 기준정보 설정 품목 리스트 -->
	SELECT	--T1.ITEM_ID,
			T6.COM_MATR_CODE,
			T6.COM_MATR_NAME,
			T1.BASE_UOM,
			NVL(T2.PRE_STOCK,0)																	PRE_STOCK,		--전주 기준재고
	        NVL(T4.FC_QTY,0)																	FC_QTY,			--전주 발주예고 
	        NVL(T5.PRE_IPGO,0)																	PRE_IPGO,		--전주 입고실적	
	        CASE	
	        		WHEN	NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0) &lt; 0	THEN	0
	        ELSE			NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0)
			END		NOW_EXPT,		--금주 예상재고
	        -- NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0) 						NOW_EXPT,		--금주 예상재고
	        NVL(T6.COM_STOCK,0)																	COM_STOCK,		--계열사 실재고
            -- CASE	WHEN	T6.COM_STOCK/(NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0))*100 &gt;=80
            			-- AND	T6.COM_STOCK/(NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0))*100 &lt;=120	THEN	NVL(T6.COM_STOCK,0) 
            		-- ELSE	NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0) 
            -- END	DIFF_QTY,																						--예실차
			CASE	
            		WHEN	NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0)) &lt; 0 THEN	0	
            ELSE			NVL(T6.COM_STOCK,0) - (NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0))
            END		DIFF_QTY, 	--예실차
	        -- CASE	
            -- WHEN	NVL(T6.COM_STOCK,0) - NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0) &lt; 0 THEN	0	
            -- ELSE	NVL(T6.COM_STOCK,0) - NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0)
            -- END		DIFF_QTY, 	--예실차
	        -- NVL(T6.COM_STOCK,0) - NVL(T2.PRE_STOCK,0) + NVL(T4.FC_QTY,0) - NVL(T5.PRE_IPGO,0)	DIFF_QTY, 	--예실차
	        --	0							NOW_EXPT,			
	        --	0							SIL_STOCK,
			--	0							DIFF_QTY,
	        NVL(T3.CNFM_STOCK,0)		CNFM_STOCK			--당주 확정재고       
	FROM	(	
			SELECT	*
			FROM	ITEM_MST			
			)	T1,
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                UNIT,
	                SUM(CNFM_STOCK)		PRE_STOCK	--전주 기준재고
	        FROM	MFS_STD_STOCK	
	        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE-7,'D')+1
	        GROUP	BY	CONS_ITEM_ID,
	        	                UNIT
	        )	T2,
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                SUM(CNFM_STOCK)	CNFM_STOCK		--당주 확정재고
	        FROM	MFS_STD_STOCK	
	        WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
	        GROUP	BY	CONS_ITEM_ID,
	        			UNIT
	        )	T3,
			--전주 발주예고
	        (
	        SELECT 	CONS_ITEM_ID,
	                F_GET_ITEM_NAME(CONS_ITEM_ID)ITEM_NAME,
	                SUM(FC_QTY)	FC_QTY				--전주 발주예고
	        FROM	MFS_ORDER_FORECAST	
	        WHERE	CNFM_DATE	=	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7	-- 2013-09-02 달력 추가
	        -- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
	        GROUP	BY	CONS_ITEM_ID
	        )	T4,
	        (
			SELECT 	ITEM_CD,
			        F_GET_ITEM_NAME(ITEM_CD)ITEM_NAME,
			        SUM(BUY_QTY)	PRE_IPGO				--전주 입고실적
			FROM	FT_BUY
			WHERE	BUY_DAY	BETWEEN	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-',''))-7,'D')+1	AND	TRUNC(TO_DATE(REPLACE('$!{cnfm_date}','-','')),'D')
			-- WHERE	BUY_DAY	BETWEEN	TRUNC(SYSDATE-7,'D')+1	AND	TRUNC(SYSDATE,'D')
			GROUP	BY	ITEM_CD
			)	T5,
			(
			SELECT 	NS_MATR_CODE,
					COM_MATR_CODE,
			        COM_MATR_NAME,
			        SUM(BASE_STOCK)	COM_STOCK				--계열사 실재고
			FROM	MFS_STOCK_INFO
			WHERE	CNFM_DATE	=	TO_DATE(REPLACE('$!{cnfm_date}','-',''))	-- 2013-09-02 달력 추가
			-- WHERE	CNFM_DATE	=	TRUNC(SYSDATE,'D')+1
			GROUP	BY	NS_MATR_CODE,
						COM_MATR_CODE,
						COM_MATR_NAME
			)	T6		
	WHERE	T1.ITEM_ID	=	T2.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T3.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T4.CONS_ITEM_ID(+)
	AND		T1.ITEM_ID	=	T5.ITEM_CD(+)
	AND		T1.ITEM_ID	=	T6.NS_MATR_CODE(+)
	AND     T1.ITYPE IN ( 'ROH1','ROH2','HALB')
	AND    (T1.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR T1.SELL_STOP_DATE = '00000000')
	AND		NOT (T1.MATERIAL_GROUP &gt;= '5K000' AND     T1.MATERIAL_GROUP &lt;= '5S999') --수출품
	-- AND		T1.ITEM_ID	=	'$!{item_id}'
	AND		T6.COM_MATR_CODE	=	'$!{com_matr_code}'
	-- GROUP	BY	T1.ITEM_ID,
				-- T1.BASE_UOM
	ORDER	BY	1    
	</query>

<query id="op_02070_event_plan_info">
		<!-- 유통본부 판촉계획 정보  등록-->

	SELECT	CUST_NAME,
			GUBN,
			ITEM_ID,
			ITEM_NAME,
	        EVEN_METHOD,
			TO_CHAR(FRT_CHGO_DATE,'MM')	||'월'||TO_CHAR(FRT_CHGO_DATE,'DD')||'일'	FRT_CHGO_DATE,
			TO_CHAR(EVEN_S_DATE,'MM')	||'월'||TO_CHAR(EVEN_S_DATE,'DD')||'일'		EVEN_S_DATE,
			TO_CHAR(EVEN_E_DATE,'MM')	||'월'||TO_CHAR(EVEN_E_DATE,'DD')||'일'		EVEN_E_DATE,
			--SUBSTR(TO_CHAR(TRUNC(TO_DATE(FRT_CHGO_DATE)),'YYYYMMDD'),5,6)'월'||SUBSTR(TO_CHAR(TRUNC(TO_DATE(FRT_CHGO_DATE)),'YYYYMMDD'),7,8)'일'		FRT_CHGO_DATE,
			--SUBSTR(TO_CHAR(TRUNC(TO_DATE(EVEN_S_DATE)),'YYYYMMDD'),5,6)'월'||SUBSTR(TO_CHAR(TRUNC(TO_DATE(EVEN_S_DATE)),'YYYYMMDD'),7,8)'일'		EVEN_S_DATE,
			--SUSSTR(TO_CHAR(TRUNC(TO_DATE(EVEN_E_DATE)),'YYYYMMDD')5,6)'월'||	SUSSTR(TO_CHAR(TRUNC(TO_DATE(EVEN_E_DATE)),'YYYYMMDD')7,8)'일'	EVEN_E_DATE,
	        CHDO_QTY,
			PLAN_QTY,
	        SUPT_METHOD,
	        CHGO_STD,
	        ETC,
            TO_CHAR(FRT_CHGO_DATE,	'YYYYMMDD')	REAL_CHGO_DATE,
            TO_CHAR(EVEN_S_DATE,	'YYYYMMDD')	REAL_S_DATE,
            TO_CHAR(EVEN_E_DATE,	'YYYYMMDD')	REAL_E_DATE		
	FROM	EVENT_PLAN_INFO
	WHERE	(TO_CHAR(EVEN_S_DATE,'YYYYMMDD') &gt;= '$!{in_fr_date}'	AND	TO_CHAR(EVEN_E_DATE,'YYYYMMDD') &lt;= '$!{in_to_date}')
	OR		(TO_CHAR(EVEN_S_DATE,'YYYYMMDD') &lt;= '$!{in_fr_date}'	AND TO_CHAR(EVEN_E_DATE,'YYYYMMDD') &gt;= '$!{in_fr_date}')
	OR		(TO_CHAR(EVEN_S_DATE,'YYYYMMDD') &lt;= '$!{in_to_date}'  AND TO_CHAR(EVEN_E_DATE,'YYYYMMDD') &gt;= '$!{in_to_date}') 

</query>




<query id="op_02080_fc_planVsActual_list">
		<!-- 발주계획 대비 실적조회-->

#if ("$!{sel_gubn}" != "PROD")
	SELECT	B.NAME1								COM_NAME,
			--B.PROD_ITEM_ID					ITEM_ID,
	        --F_GET_ITEM_NAME(B.PROD_ITEM_ID)	ITEM_NAME,
			A.NS_MATR_CODE						MATR_CODE,
	        F_GET_ITEM_NAME(A.NS_MATR_CODE)		MATR_NAME,
			B.BASE_UOM							BASE_UOM,
	        ------------
	        NVL(SUM(A.W8_FC_QTY),0)				W8_FC_QTY,
	        NVL(SUM(A.W8_PROD_QTY),0)			W8_PROD_QTY,
	        NVL(SUM(A.W8_DIV_QTY),0)			W8_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W8_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W8_PROD_QTY),0)) / NVL(SUM(A.W8_FC_QTY),0))*100,0)W8_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W7_FC_QTY),0)				W7_FC_QTY,
	        NVL(SUM(A.W7_PROD_QTY),0)			W7_PROD_QTY,
	        NVL(SUM(A.W7_DIV_QTY),0)			W7_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W7_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W7_PROD_QTY),0)) / NVL(SUM(A.W7_FC_QTY),0))*100,0)W7_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W6_FC_QTY),0)				W6_FC_QTY,
	        NVL(SUM(A.W6_PROD_QTY),0)			W6_PROD_QTY,
	        NVL(SUM(A.W6_DIV_QTY),0)			W6_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W6_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W6_PROD_QTY),0)) / NVL(SUM(A.W6_FC_QTY),0))*100,0)W6_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W5_FC_QTY),0)				W5_FC_QTY,
	        NVL(SUM(A.W5_PROD_QTY),0)			W5_PROD_QTY,
	        NVL(SUM(A.W5_DIV_QTY),0)			W5_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W5_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W5_PROD_QTY),0)) / NVL(SUM(A.W5_FC_QTY),0))*100,0)W5_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W4_FC_QTY),0)				W4_FC_QTY,
	        NVL(SUM(A.W4_PROD_QTY),0)			W4_PROD_QTY,
	        NVL(SUM(A.W4_DIV_QTY),0)			W4_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W4_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W4_PROD_QTY),0)) / NVL(SUM(A.W4_FC_QTY),0))*100,0)W4_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W3_FC_QTY),0)				W3_FC_QTY,
	        NVL(SUM(A.W3_PROD_QTY),0)			W3_PROD_QTY,
	        NVL(SUM(A.W3_DIV_QTY),0)			W3_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W3_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W3_PROD_QTY),0)) / NVL(SUM(A.W3_FC_QTY),0))*100,0)W3_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W2_FC_QTY),0)				W2_FC_QTY,
	        NVL(SUM(A.W2_PROD_QTY),0)			W2_PROD_QTY,
	        NVL(SUM(A.W2_DIV_QTY),0)			W2_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W2_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W2_PROD_QTY),0)) / NVL(SUM(A.W2_FC_QTY),0))*100,0)W2_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W1_FC_QTY),0)				W1_FC_QTY,
	        NVL(SUM(A.W1_PROD_QTY),0)			W1_PROD_QTY,
	        NVL(SUM(A.W1_DIV_QTY),0)			W1_DIV_QTY,

            ROUND(DECODE(NVL(SUM(A.W1_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W1_PROD_QTY),0)) / NVL(SUM(A.W1_FC_QTY),0))*100,0)W1_PROD_AMT,	--실적률
	        ------------
            NVL(SUM(A.W8_FC_QTY),0)		+	NVL(SUM(A.W7_FC_QTY),0)		+ NVL(SUM(A.W6_FC_QTY),0)	+ NVL(SUM(A.W5_FC_QTY),0) + 
            NVL(SUM(A.W4_FC_QTY),0)		+	NVL(SUM(A.W3_FC_QTY),0)		+ NVL(SUM(A.W2_FC_QTY),0)	+ NVL(SUM(A.W1_FC_QTY),0) 		FC_QTY_TOT, 
            NVL(SUM(A.W8_PROD_QTY),0) 	+	NVL(SUM(A.W7_PROD_QTY),0)	+ NVL(SUM(A.W6_PROD_QTY),0) + NVL(SUM(A.W5_PROD_QTY),0) + 
            NVL(SUM(A.W4_PROD_QTY),0) 	+	NVL(SUM(A.W3_PROD_QTY),0)	+ NVL(SUM(A.W2_PROD_QTY),0) + NVL(SUM(A.W1_PROD_QTY),0) 	PROD_QTY_TOT,
            NVL(SUM(A.W8_DIV_QTY),0) 	+	NVL(SUM(A.W7_DIV_QTY),0)	+ NVL(SUM(A.W6_DIV_QTY),0)	+ NVL(SUM(A.W5_DIV_QTY),0) + 
            NVL(SUM(A.W4_DIV_QTY),0) 	+	NVL(SUM(A.W3_DIV_QTY),0)	+ NVL(SUM(A.W2_DIV_QTY),0)	+ NVL(SUM(A.W1_DIV_QTY),0) 		DIV_QTY_TOT,
            ROUND(DECODE((NVL(SUM(A.W8_FC_QTY),0)	+	NVL(SUM(A.W7_FC_QTY),0)		+ NVL(SUM(A.W6_FC_QTY),0)	+ NVL(SUM(A.W5_FC_QTY),0) + 
            				NVL(SUM(A.W4_FC_QTY),0) +	NVL(SUM(A.W3_FC_QTY),0)		+ NVL(SUM(A.W2_FC_QTY),0)	+ NVL(SUM(A.W1_FC_QTY),0))	,0	,0,	
                      (NVL(SUM(A.W8_PROD_QTY),0)	+	NVL(SUM(A.W7_PROD_QTY),0)	+ NVL(SUM(A.W6_PROD_QTY),0) + NVL(SUM(A.W5_PROD_QTY),0) + 
            			NVL(SUM(A.W4_PROD_QTY),0)	+	NVL(SUM(A.W3_PROD_QTY),0)	+ NVL(SUM(A.W2_PROD_QTY),0) + NVL(SUM(A.W1_PROD_QTY),0)) / 
                        (NVL(SUM(A.W8_FC_QTY),0)	+	NVL(SUM(A.W7_FC_QTY),0)		+ NVL(SUM(A.W6_FC_QTY),0)	+ NVL(SUM(A.W5_FC_QTY),0) + 
            			NVL(SUM(A.W4_FC_QTY),0)		+	NVL(SUM(A.W3_FC_QTY),0)		+ NVL(SUM(A.W2_FC_QTY),0)	+ NVL(SUM(A.W1_FC_QTY),0)))*100,0)PROD_AMT_TOT	--실적률	
	FROM	(
	        SELECT	NS_MATR_CODE,
	                F_GET_ITEM_NAME(NS_MATR_CODE)	MATR_NAME,
	                ---------------------------W - 8주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')+1,NVL(FC_QTY,0))),0)		W8_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')+1,NVL(PROD_QTY,0))),0)	W8_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')+1,NVL(DIV_QTY,0))),0)		W8_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 7주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-48,'D')+1,NVL(FC_QTY,0))),0)		W7_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-48,'D')+1,NVL(PROD_QTY,0))),0)	W7_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-48,'D')+1,NVL(DIV_QTY,0))),0)		W7_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 6주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-41,'D')+1,NVL(FC_QTY,0))),0)		W6_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-41,'D')+1,NVL(PROD_QTY,0))),0)	W6_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-41,'D')+1,NVL(DIV_QTY,0))),0)		W6_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------        
	                ---------------------------W - 5주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-34,'D')+1,NVL(FC_QTY,0))),0)		W5_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-34,'D')+1,NVL(PROD_QTY,0))),0)	W5_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-34,'D')+1,NVL(DIV_QTY,0))),0)		W5_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 4주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-27,'D')+1,NVL(FC_QTY,0))),0)		W4_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-27,'D')+1,NVL(PROD_QTY,0))),0)	W4_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-27,'D')+1,NVL(DIV_QTY,0))),0)		W4_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 3주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-20,'D')+1,NVL(FC_QTY,0))),0)		W3_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-20,'D')+1,NVL(PROD_QTY,0))),0)	W3_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-20,'D')+1,NVL(DIV_QTY,0))),0)		W3_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 2주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-13,'D')+1,NVL(FC_QTY,0))),0)		W2_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-13,'D')+1,NVL(PROD_QTY,0))),0)	W2_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-13,'D')+1,NVL(DIV_QTY,0))),0)		W2_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 1주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-06,'D')+1,NVL(FC_QTY,0))),0)		W1_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-06,'D')+1,NVL(PROD_QTY,0))),0)	W1_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-06,'D')+1,NVL(DIV_QTY,0))),0)		W1_DIV_QTY
	        FROM	(
	                SELECT 	CNFM_DATE				CNFM_DATE,																									--날짜--
	                        NS_MATR_CODE			NS_MATR_CODE,																								--계열사 자재코드--
	                        NVL(SUM(FC_QTY),0)		FC_QTY,																								--발주량
	                        NVL(SUM(COM_STOCK),0) - NVL(SUM(PRE_COM_STOCK),0) + NVL(SUM(PRE_IPGO),0) PROD_QTY,											--실적량
	                        NVL(SUM(COM_STOCK),0) - NVL(SUM(PRE_COM_STOCK),0) + NVL(SUM(PRE_IPGO),0) - NVL(SUM(FC_QTY),0)  DIV_QTY						--차이량       
	                FROM	(	
	                        /* 차주 발주예고량 */                        
	                         SELECT	TRUNC(T1.CNFM_DATE,'D')+8 			CNFM_DATE, --1 -> 8로 변경 2013-11-18
	                                T2.COM_CODE,
	                                T1.CONS_ITEM_ID						NS_MATR_CODE,
	                                NVL(SUM(T1.FC_QTY),0)				FC_QTY,		-- 차주 발주예고량
	                                0	COM_STOCK,
	                                0	PRE_COM_STOCK,
	                                0	PRE_IPGO
	                        FROM	MFS_ORDER_FORECAST	T1,
	                                MFS_STOCK_INFO		T2,
	                                (
	                                SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	=	'$!{mfs_flag}'	
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                                )					T3
	                        WHERE	T1.CONS_ITEM_ID	=	T2.NS_MATR_CODE
	                        AND		T1.CONS_ITEM_ID	=	T3.ITEM_ID
	                        AND		T1.CNFM_DATE	=	TO_DATE(T2.CNFM_DATE,'YYYY-MM-DD')
	                        AND		T1.CNFM_DATE	BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')
	                                                AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D')
							#if ( "$!{com_code}" == "0001000050" ||"$!{com_code}" == "0001000021")	--  전체					
							AND		T2.COM_CODE	=	'$!{com_code}'
							#end                                                
	                        GROUP	BY	TRUNC(T1.CNFM_DATE,'D')+8,
	                                    T2.COM_CODE,
	                                    T1.CONS_ITEM_ID
	                        UNION	ALL                        
	                        /* 당주 계열사 재고 */
	                        SELECT	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+1	CNFM_DATE,
	                                T1.COM_CODE,
	                                T1.NS_MATR_CODE									NS_MATR_CODE,
	                                0												FC_QTY,
	                                NVL(SUM(T1.BASE_STOCK),0)						COM_STOCK,		-- 당주 계열사 재고
	                                0 PRE_COM_STOCK,	
	                                0 PRE_IPGO	
	                        FROM	MFS_STOCK_INFO	T1,
	                        		(
	                        		SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	=	'$!{mfs_flag}'	
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외		
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                        		)				T2
	                        WHERE	T1.NS_MATR_CODE	=	T2.ITEM_ID
	                        AND	T1.CNFM_DATE	BETWEEN	TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D')-55,'YYYYMMDD')
	                                            AND		TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D'),'YYYYMMDD')
							#if ( "$!{com_code}" == "0001000050" ||"$!{com_code}" == "0001000021")	--  전체					
							AND		T1.COM_CODE	=	'$!{com_code}'
							#end                                                
	                        GROUP	BY	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+1,
	                                    T1.COM_CODE,
	                                    T1.NS_MATR_CODE
	                        UNION	ALL                                
	                        /* 전주 계열사 재고 */
	                        SELECT	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+8	CNFM_DATE,
	                                T1.COM_CODE,
	                                T1.NS_MATR_CODE								NS_MATR_CODE,
	                                0	FC_QTY,
	                                0 COM_STOCK	,
	                                NVL(SUM(T1.BASE_STOCK),0)	PRE_COM_STOCK,		-- 당주 계열사 재고
	                                0 PRE_IPGO
	                        FROM	MFS_STOCK_INFO	T1,
	                        		(
	                        		SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	=	'$!{mfs_flag}'	
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                        		)				T2
	                        WHERE	T1.NS_MATR_CODE	=	T2.ITEM_ID
	                        AND	T1.CNFM_DATE	BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')-55
	                                            AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')
							#if ( "$!{com_code}" == "0001000050" ||"$!{com_code}" =="0001000021")	--  전체					
							AND		T1.COM_CODE	=	'$!{com_code}'
							#end                                                
	                        GROUP	BY	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+8,
	                                    T1.COM_CODE,
	                                    T1.NS_MATR_CODE
	                        UNION	ALL        
	                        /* 전주 입고실적 */
	                        SELECT 	--TRUNC(TO_DATE(T1.BUY_DAY,'YYYYMMDD'),'D')+8	CNFM_DATE,
	                                TRUNC(T1.BUY_DAY,'D')+8			CNFM_DATE,
	                                T1.CO_CODE,	
	                                T1.ITEM_CD,
	                                0	FC_QTY,
	                                0 COM_STOCK,
	                                0 PRE_COM_STOCK,
	                                NVL(SUM(T1.BUY_QTY),0)	PRE_IPGO				--전주 입고실적 날자 : DATE
	                        FROM	FT_BUY	T1,
	                                (
	                                SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	=	'$!{mfs_flag}'
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                                )		T2
	                        WHERE	T1.ITEM_CD	=	T2.ITEM_ID
	                        AND		T1.BUY_DAY		BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')-55
	                                                AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')
	                        GROUP	BY	--TRUNC(TO_DATE(T1.BUY_DAY,'YYYYMMDD'),'D')+8,
	                                    TRUNC(T1.BUY_DAY,'D')+8,
	                                    T1.ITEM_CD,
	                                    T1.CO_CODE
	                        )
	                GROUP	BY	CNFM_DATE,
	                            NS_MATR_CODE
	                )
	        GROUP	BY	NS_MATR_CODE
			)	A,						  			
	        (
	        SELECT 	DISTINCT	T1.CONS_ITEM_ID,
	                --T1.PROD_ITEM_ID,
	                T2.BASE_UOM,
	                CASE 
                    	WHEN T3.NAME1 LIKE '%태경%' THEN '태경농산(주)'
                        ELSE T3.NAME1
                    END	NAME1
	        FROM	BOM_MAP			T1,
	                ITEM_MST		T2,
	                (
                    SELECT	DISTINCT	MATNR,
                    					NAME1		
					FROM	SAPZMMT0023
					#if ( "$!{com_code}" == "0001000050" )	--  태경농산
					WHERE	name1 LIKE '%태경%'
					#elseif ( "$!{com_code}" == "0001000021" )	--  율촌
					WHERE	name1 LIKE '%율촌%'
					#end
					)	T3
	        WHERE	T1.CONS_ITEM_ID	=	T2.ITEM_ID
	        AND		T1.CONS_ITEM_ID	=	T3.MATNR
	        )	B
	WHERE	A.NS_MATR_CODE	=	B.CONS_ITEM_ID	 
	AND		(B.NAME1	LIKE	'%태경%'	 OR B.NAME1	LIKE	'%율촌%')
	GROUP	BY	B.NAME1,
			--B.PROD_ITEM_ID,
			A.NS_MATR_CODE,
			B.BASE_UOM	
	ORDER	BY	2, 4				       	
#else
	SELECT	B.NAME1								COM_NAME,
			--B.PROD_ITEM_ID					ITEM_ID,
	        --F_GET_ITEM_NAME(B.PROD_ITEM_ID)	ITEM_NAME,
			A.NS_MATR_CODE						MATR_CODE,
	        F_GET_ITEM_NAME(A.NS_MATR_CODE)		MATR_NAME,
			B.BASE_UOM							BASE_UOM,
	        ------------
	        NVL(SUM(A.W8_FC_QTY),0)				W8_FC_QTY,
	        NVL(SUM(A.W8_PROD_QTY),0)			W8_PROD_QTY,
	        NVL(SUM(A.W8_DIV_QTY),0)			W8_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W8_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W8_PROD_QTY),0)) / NVL(SUM(A.W8_FC_QTY),0))*100,0)W8_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W7_FC_QTY),0)				W7_FC_QTY,
	        NVL(SUM(A.W7_PROD_QTY),0)			W7_PROD_QTY,
	        NVL(SUM(A.W7_DIV_QTY),0)			W7_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W7_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W7_PROD_QTY),0)) / NVL(SUM(A.W7_FC_QTY),0))*100,0)W7_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W6_FC_QTY),0)				W6_FC_QTY,
	        NVL(SUM(A.W6_PROD_QTY),0)			W6_PROD_QTY,
	        NVL(SUM(A.W6_DIV_QTY),0)			W6_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W6_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W6_PROD_QTY),0)) / NVL(SUM(A.W6_FC_QTY),0))*100,0)W6_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W5_FC_QTY),0)				W5_FC_QTY,
	        NVL(SUM(A.W5_PROD_QTY),0)			W5_PROD_QTY,
	        NVL(SUM(A.W5_DIV_QTY),0)			W5_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W5_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W5_PROD_QTY),0)) / NVL(SUM(A.W5_FC_QTY),0))*100,0)W5_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W4_FC_QTY),0)				W4_FC_QTY,
	        NVL(SUM(A.W4_PROD_QTY),0)			W4_PROD_QTY,
	        NVL(SUM(A.W4_DIV_QTY),0)			W4_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W4_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W4_PROD_QTY),0)) / NVL(SUM(A.W4_FC_QTY),0))*100,0)W4_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W3_FC_QTY),0)				W3_FC_QTY,
	        NVL(SUM(A.W3_PROD_QTY),0)			W3_PROD_QTY,
	        NVL(SUM(A.W3_DIV_QTY),0)			W3_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W3_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W3_PROD_QTY),0)) / NVL(SUM(A.W3_FC_QTY),0))*100,0)W3_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W2_FC_QTY),0)				W2_FC_QTY,
	        NVL(SUM(A.W2_PROD_QTY),0)			W2_PROD_QTY,
	        NVL(SUM(A.W2_DIV_QTY),0)			W2_DIV_QTY,
            ROUND(DECODE(NVL(SUM(A.W2_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W2_PROD_QTY),0)) / NVL(SUM(A.W2_FC_QTY),0))*100,0)W2_PROD_AMT,	--실적률
	        ------------
	        NVL(SUM(A.W1_FC_QTY),0)				W1_FC_QTY,
	        NVL(SUM(A.W1_PROD_QTY),0)			W1_PROD_QTY,
	        NVL(SUM(A.W1_DIV_QTY),0)			W1_DIV_QTY,

            ROUND(DECODE(NVL(SUM(A.W1_FC_QTY),0)	,0	,0,	
                      (NVL(SUM(A.W1_PROD_QTY),0)) / NVL(SUM(A.W1_FC_QTY),0))*100,0)W1_PROD_AMT,	--실적률
	        ------------
            NVL(SUM(A.W8_FC_QTY),0)		+	NVL(SUM(A.W7_FC_QTY),0)		+ NVL(SUM(A.W6_FC_QTY),0)	+ NVL(SUM(A.W5_FC_QTY),0) + 
            NVL(SUM(A.W4_FC_QTY),0)		+	NVL(SUM(A.W3_FC_QTY),0)		+ NVL(SUM(A.W2_FC_QTY),0)	+ NVL(SUM(A.W1_FC_QTY),0) 		FC_QTY_TOT, 
            NVL(SUM(A.W8_PROD_QTY),0) 	+	NVL(SUM(A.W7_PROD_QTY),0)	+ NVL(SUM(A.W6_PROD_QTY),0) + NVL(SUM(A.W5_PROD_QTY),0) + 
            NVL(SUM(A.W4_PROD_QTY),0) 	+	NVL(SUM(A.W3_PROD_QTY),0)	+ NVL(SUM(A.W2_PROD_QTY),0) + NVL(SUM(A.W1_PROD_QTY),0) 	PROD_QTY_TOT,
            NVL(SUM(A.W8_DIV_QTY),0) 	+	NVL(SUM(A.W7_DIV_QTY),0)	+ NVL(SUM(A.W6_DIV_QTY),0)	+ NVL(SUM(A.W5_DIV_QTY),0) + 
            NVL(SUM(A.W4_DIV_QTY),0) 	+	NVL(SUM(A.W3_DIV_QTY),0)	+ NVL(SUM(A.W2_DIV_QTY),0)	+ NVL(SUM(A.W1_DIV_QTY),0) 		DIV_QTY_TOT,
            ROUND(DECODE((NVL(SUM(A.W8_FC_QTY),0)	+	NVL(SUM(A.W7_FC_QTY),0)		+ NVL(SUM(A.W6_FC_QTY),0)	+ NVL(SUM(A.W5_FC_QTY),0) + 
            				NVL(SUM(A.W4_FC_QTY),0) +	NVL(SUM(A.W3_FC_QTY),0)		+ NVL(SUM(A.W2_FC_QTY),0)	+ NVL(SUM(A.W1_FC_QTY),0))	,0	,0,	
                      (NVL(SUM(A.W8_PROD_QTY),0)	+	NVL(SUM(A.W7_PROD_QTY),0)	+ NVL(SUM(A.W6_PROD_QTY),0) + NVL(SUM(A.W5_PROD_QTY),0) + 
            			NVL(SUM(A.W4_PROD_QTY),0)	+	NVL(SUM(A.W3_PROD_QTY),0)	+ NVL(SUM(A.W2_PROD_QTY),0) + NVL(SUM(A.W1_PROD_QTY),0)) / 
                        (NVL(SUM(A.W8_FC_QTY),0)	+	NVL(SUM(A.W7_FC_QTY),0)		+ NVL(SUM(A.W6_FC_QTY),0)	+ NVL(SUM(A.W5_FC_QTY),0) + 
            			NVL(SUM(A.W4_FC_QTY),0)		+	NVL(SUM(A.W3_FC_QTY),0)		+ NVL(SUM(A.W2_FC_QTY),0)	+ NVL(SUM(A.W1_FC_QTY),0)))*100,0)PROD_AMT_TOT	--실적률	
	FROM	(
	        SELECT	NS_MATR_CODE,
	                F_GET_ITEM_NAME(NS_MATR_CODE)	MATR_NAME,
	                ---------------------------W - 8주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')+1,NVL(FC_QTY,0))),0)		W8_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')+1,NVL(PROD_QTY,0))),0)	W8_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')+1,NVL(DIV_QTY,0))),0)		W8_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 7주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-48,'D')+1,NVL(FC_QTY,0))),0)		W7_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-48,'D')+1,NVL(PROD_QTY,0))),0)	W7_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-48,'D')+1,NVL(DIV_QTY,0))),0)		W7_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 6주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-41,'D')+1,NVL(FC_QTY,0))),0)		W6_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-41,'D')+1,NVL(PROD_QTY,0))),0)	W6_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-41,'D')+1,NVL(DIV_QTY,0))),0)		W6_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------        
	                ---------------------------W - 5주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-34,'D')+1,NVL(FC_QTY,0))),0)		W5_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-34,'D')+1,NVL(PROD_QTY,0))),0)	W5_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-34,'D')+1,NVL(DIV_QTY,0))),0)		W5_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 4주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-27,'D')+1,NVL(FC_QTY,0))),0)		W4_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-27,'D')+1,NVL(PROD_QTY,0))),0)	W4_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-27,'D')+1,NVL(DIV_QTY,0))),0)		W4_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 3주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-20,'D')+1,NVL(FC_QTY,0))),0)		W3_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-20,'D')+1,NVL(PROD_QTY,0))),0)	W3_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-20,'D')+1,NVL(DIV_QTY,0))),0)		W3_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 2주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-13,'D')+1,NVL(FC_QTY,0))),0)		W2_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-13,'D')+1,NVL(PROD_QTY,0))),0)	W2_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-13,'D')+1,NVL(DIV_QTY,0))),0)		W2_DIV_QTY,
	                ----------------------------------------------------------------------------------------------------
	                ---------------------------W - 1주----------------------------------------------------------------
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-06,'D')+1,NVL(FC_QTY,0))),0)		W1_FC_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-06,'D')+1,NVL(PROD_QTY,0))),0)	W1_PROD_QTY,
	                NVL(SUM(DECODE(CNFM_DATE, TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-06,'D')+1,NVL(DIV_QTY,0))),0)		W1_DIV_QTY,
	                ---------------------------------------------------------------------------------------------------------
	        FROM	(
	                SELECT 	CNFM_DATE		CNFM_DATE,																		--날짜--
	                        NS_MATR_CODE	NS_MATR_CODE,																	--계열사 자재코드--
	                        NVL(SUM(FC_QTY),0)		FC_QTY,																								--발주량
	                        NVL(SUM(COM_STOCK),0) - NVL(SUM(PRE_COM_STOCK),0) + NVL(SUM(PRE_IPGO),0) PROD_QTY,											--실적량
	                        NVL(SUM(COM_STOCK),0) - NVL(SUM(PRE_COM_STOCK),0) + NVL(SUM(PRE_IPGO),0) - NVL(SUM(FC_QTY),0)  DIV_QTY						--차이량       
	                FROM	(	
	                        /* 차주 발주예고량 */                        
	                         SELECT	TRUNC(T1.CNFM_DATE,'D')+8 			CNFM_DATE, --1 -> 8로 변경 2013-11-18
	                                T2.COM_CODE,
	                                T1.CONS_ITEM_ID						NS_MATR_CODE,
	                                NVL(SUM(T1.FC_QTY),0)				FC_QTY,		-- 차주 발주예고량
	                                0	COM_STOCK,
	                                0	PRE_COM_STOCK,
	                                0	PRE_IPGO
	                        FROM	MFS_ORDER_FORECAST	T1,
	                                MFS_STOCK_INFO		T2,
	                                (
	                                SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	IN('A','B','C')	
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                                )					T3
	                        WHERE	T1.CONS_ITEM_ID	=	T2.NS_MATR_CODE
	                        AND		T1.CONS_ITEM_ID	=	T3.ITEM_ID
	                        AND		T1.CNFM_DATE	=	TO_DATE(T2.CNFM_DATE,'YYYY-MM-DD')
	                        AND		T1.CNFM_DATE	BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-55,'D')
	                                                AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D')
							#if ( "$!{com_code}" == "0001000050" ||"$!{com_code}" == "0001000021")	--  전체					
							AND		T2.COM_CODE	=	'$!{com_code}'
							#end  
	                        GROUP	BY	TRUNC(T1.CNFM_DATE,'D')+8,
	                                    T2.COM_CODE,
	                                    T1.CONS_ITEM_ID
	                        UNION	ALL                        
	                        /* 당주 계열사 재고 */
	                        SELECT	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+1	CNFM_DATE,
	                                T1.COM_CODE,
	                                T1.NS_MATR_CODE									NS_MATR_CODE,
	                                0												FC_QTY,
	                                NVL(SUM(T1.BASE_STOCK),0)						COM_STOCK,		-- 당주 계열사 재고
	                                0 PRE_COM_STOCK,	
	                                0 PRE_IPGO	
	                        FROM	MFS_STOCK_INFO	T1,
	                        		(
	                                SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	IN('A','B','C')	
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                                )				T2
	                        WHERE	T1.NS_MATR_CODE	=	T2.ITEM_ID
	                        AND		T1.CNFM_DATE	BETWEEN	TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D')-55,'YYYYMMDD')
	                                   		         AND	TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D'),'YYYYMMDD')
	                        #if ( "$!{com_code}" == "0001000050" ||"$!{com_code}" == "0001000021")	--  전체					
							AND		T1.COM_CODE	=	'$!{com_code}'
							#end  
	                        GROUP	BY	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+1,
	                                    T1.COM_CODE,
	                                    T1.NS_MATR_CODE
	                        UNION	ALL                                
	                        /* 전주 계열사 재고 */
	                        SELECT	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+8	CNFM_DATE,
	                                T1.COM_CODE,
	                                T1.NS_MATR_CODE								NS_MATR_CODE,
	                                0	FC_QTY,
	                                0 COM_STOCK	,
	                                NVL(SUM(T1.BASE_STOCK),0)	PRE_COM_STOCK,		-- 당주 계열사 재고
	                                0 PRE_IPGO
	                        FROM	MFS_STOCK_INFO	T1,
	                        		(
	                                SELECT	ITEM_ID
	                                FROM	ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	IN('A','B','C')	
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외		
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                                )				T2
	                        WHERE	T1.NS_MATR_CODE	=	T2.ITEM_ID
	                        AND		T1.CNFM_DATE	BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')-55
	                                            	AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')
							#if ( "$!{com_code}" == "0001000050" ||"$!{com_code}" == "0001000021")	--  전체					
							AND		T1.COM_CODE	=	'$!{com_code}'
							#end  
	                        GROUP	BY	TRUNC(TO_DATE(T1.CNFM_DATE,'YYYYMMDD'),'D')+8,
	                                    T1.COM_CODE,
	                                    T1.NS_MATR_CODE
	                        UNION	ALL        
	                        /* 전주 입고실적 */
	                        SELECT 	--TRUNC(TO_DATE(T1.BUY_DAY,'YYYYMMDD'),'D')+8	CNFM_DATE,
	                                TRUNC(T1.BUY_DAY,'D')+8			CNFM_DATE,
	                                T1.CO_CODE,	
	                                T1.ITEM_CD,
	                                0	FC_QTY,
	                                0 COM_STOCK,
	                                0 PRE_COM_STOCK,
	                                NVL(SUM(T1.BUY_QTY),0)	PRE_IPGO				--전주 입고실적 날자 : DATE
	                        FROM	FT_BUY	T1,
	                                (
	                                SELECT ITEM_ID
	                                FROM ITEM_MST
	                                WHERE	ITYPE	IN('ROH1','ROH2')
	                                AND		MFS_FLAG	IN('A','B','C')
	                                AND		ITEM_ID	NOT LIKE	'30%' -- BOX류 제외	
	                                AND    (SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000')
									AND		NOT (MATERIAL_GROUP &gt;= '5K000' AND     MATERIAL_GROUP &lt;= '5S999') --수출품
	                                )		T2
	                        WHERE	T1.ITEM_CD	=	T2.ITEM_ID
	                        AND		T1.BUY_DAY		BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')-55
	                                                AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD')-7,'D')
	                        GROUP	BY	--TRUNC(TO_DATE(T1.BUY_DAY,'YYYYMMDD'),'D')+8,
	                                    TRUNC(T1.BUY_DAY,'D')+8,
	                                    T1.ITEM_CD,
	                                    T1.CO_CODE
	                        )
	                GROUP	BY	CNFM_DATE,
	                            NS_MATR_CODE
	                )
	        GROUP	BY	NS_MATR_CODE
			)	A,						  			
	        (
	        SELECT 	DISTINCT	T1.CONS_ITEM_ID,
	                --T1.PROD_ITEM_ID,
	                T2.BASE_UOM,
	                CASE 
                    	WHEN T3.NAME1 LIKE '%태경%' THEN '태경농산(주)'
                        ELSE T3.NAME1
                    END	NAME1
	        FROM	BOM_MAP			T1,
	                ITEM_MST		T2,
	                (
                    SELECT	DISTINCT	MATNR,
                    					NAME1
					FROM	SAPZMMT0023
					#if ( "$!{com_code}" == "0001000050" )	--  태경농산
					WHERE	name1 LIKE '%태경%'
					#elseif ( "$!{com_code}" == "0001000021" )	--  율촌
					WHERE	name1 LIKE '%율촌%'
					#end
					)	T3
	        WHERE	T1.CONS_ITEM_ID	=	T2.ITEM_ID
	        AND		T1.CONS_ITEM_ID	=	T3.MATNR
	        )	B	    
	WHERE	A.NS_MATR_CODE	=	B.CONS_ITEM_ID
	AND		(B.NAME1	LIKE	'%태경%'	 OR B.NAME1	LIKE	'%율촌%')
	AND		B.PROD_ITEM_ID	=	'$!{in_item_id}'
	GROUP	BY	B.NAME1,
				--B.PROD_ITEM_ID,
				A.NS_MATR_CODE,
				B.BASE_UOM		
	ORDER	BY	2, 4				
#end

</query>


<query id="op_02080_fc_planVsActual_list_header">
		<!-- 발주계획 대비 실적조회-->
	SELECT	MAX(DECODE(IDX, 8,  CAL_DATE))	"W-8",
	        MAX(DECODE(IDX, 7,  CAL_DATE))	"W-7",
	    	MAX(DECODE(IDX, 6,  CAL_DATE))	"W-6",
	        MAX(DECODE(IDX, 5,  CAL_DATE))	"W-5",
	        MAX(DECODE(IDX, 4,  CAL_DATE))	"W-4",
	        MAX(DECODE(IDX, 3,  CAL_DATE))	"W-3",
	        MAX(DECODE(IDX, 2,  CAL_DATE))	"W-2",
	        MAX(DECODE(IDX, 1,  CAL_DATE))	"W-1"  
	FROM    (
	        SELECT  TO_CHAR(TO_DATE(CAL_DATE),'YY-MM-DD') CAL_DATE,
	                RANK() OVER (ORDER BY  CAL.CAL_DATE DESC) IDX
	        FROM    (
	                SELECT DISTINCT TRUNC(TO_DATE(CAL.CAL_DATE),'IW') CAL_DATE
	                FROM    CAL_MST CAL
	                WHERE   CAL.CAL_DATE	BETWEEN	TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D')-55
	                               		    AND		TRUNC(TO_DATE('$!{cnfm_date}','YYYY-MM-DD'),'D')
	                ) CAL
	        GROUP BY CAL.CAL_DATE
	        ORDER BY 1
	        )
</query>


<!-- 중장기 베이스 공급계획 헤더  -->  
<query id="op_02090_Long_Term_Planning_list_semi_dw1_header" paging="false">
	
		SELECT	SUBSTR(CAL_DATE,1,4)||'/'||SUBSTR(CAL_DATE,5,6)	MONTH,
           		'PROD_'||(ROWNUM-1)		HD_NAME
        FROM	(
                SELECT	DISTINCT SUBSTR(TO_CHAR(CAL_DATE,'YYYYMMDD'),1,6) CAL_DATE
                FROM	CAL_MST
                WHERE	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}'),'MM') AND TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),5),'MM')
                ORDER
                BY		1
         		)      	
</query> 

<query id="op_02090_Long_Term_Planning_list_semi_dw3_header" paging="false">
	
	SELECT	SUBSTR(CAL_DATE,1,4)||'/'||SUBSTR(CAL_DATE,5,6)	MONTH,
           		'MONTH_'||(ROWNUM-1)		HD_NAME
        FROM	(
                SELECT	DISTINCT SUBSTR(TO_CHAR(CAL_DATE,'YYYYMMDD'),1,6) CAL_DATE
                FROM	CAL_MST
                WHERE	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'MM') AND TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'MM')
                ORDER
                BY		1
         		)
        UNION ALL     
        SELECT	SUBSTR(CAL_DATE,1,4)||'/'||SUBSTR(CAL_DATE,5,6)	MONTH,
           		'MONTH_'||(ROWNUM+2)		HD_NAME
        FROM	(
                SELECT	DISTINCT SUBSTR(TO_CHAR(CAL_DATE,'YYYYMMDD'),1,6) CAL_DATE
                FROM	CAL_MST
                WHERE	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-12),'MM') AND TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'MM')
                ORDER
                BY		1
         		) 	
</query> 

<query id="op_02090_Long_Term_Planning_list_semi_dw1">
	
	SELECT	IM.ITEM_ID,
			IM.ITEM_NAME,
	        IM.SPEC,
	        BS.DM	PROD_0,
	        BS.DM_1	PROD_1,
	        BS.DM_2	PROD_2,
	        BS.DM_3	PROD_3,
	        BS.DM_4	PROD_4,
	        BS.DM_5 PROD_5
	FROM	ITEM_MST IM, BASE_PROD_PLAN BS
	#if ( "$!{item_type}" == '1' )	
			, (
            SELECT	1	IDX,
            		'901000859'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	2	IDX,
            		'901000782'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	3	IDX,
            		'901000779'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	4	IDX,
            		'901001147'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	5	IDX,
            		'901001121'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	6	IDX,
            		'901000784'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	7	IDX,
            		'901000781'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	8	IDX,
            		'901000783'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	9	IDX,
            		'901000780'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	10	IDX,
            		'901001549'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	11	IDX,
            		'901001548'	ITEM_ID
            FROM	DUAL
            )ORD
    WHERE	IM.ITEM_ID = BS.ITEM_ID
    AND		IM.ITEM_ID = ORD.ITEM_ID
	AND		BS.VERSION = '$!{version}'
	AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
	ORDER
	BY		ORD.IDX
	#else	
	WHERE	IM.ITEM_ID = BS.ITEM_ID
	AND		BS.VERSION = '$!{version}'
	AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
	ORDER
	BY		1
	#end
	
	
	
</query>

<query id="op_02090_Long_Term_Planning_semi_list_dw2">
	
	SELECT	S1.ITEM_ID,
			S1.ITEM_NAME,
	        S1.IDX,
	        S1.GUBN,
	        ROUND(S1.M,0)	M,
	        ROUND(S1.M_1,0)	M_1,
	        ROUND(S1.M_2,0)	M_2,
	        ROUND(S1.M_3,0)	M_3,
	        ROUND(S1.M_4,0)	M_4,
	        ROUND(S1.M_5,0)	M_5,
	        S3.MINMPSQTY,
	        --S2.NTGEW,
	        S3.NTGEW,
	        S2.MEINS,
            MAX(S1.IPGO_QTY),
            MAX(S1.IPGO_DATE),
            MAX(S1.READTIME),
            MAX(S1.TEXT)	                
	FROM	(
			SELECT	IM.ITEM_ID,
	        		IM.ITEM_NAME,
	                1		IDX,
	                '재고량' GUBN,	               
	                NVL(MM.LBKUM,0)	M,
	                0			M_1,
	                0			M_2,
	                0			M_3,
	                0			M_4,
	                0			M_5,                   
                    BS.IPGO_QTY,
                    BS.IPGO_DATE,
                    NVL(BS.READTIME,0)	READTIME,
                    BS.TEXT
	        FROM	BASE_STOCK_PLAN BS, ITEM_MST IM, SAPMBEW MM
	        WHERE	BS.ITEM_ID		= IM.ITEM_ID
	        AND		IM.ITEM_ID		= MM.MATNR
	        AND		MM.BWKEY 		= '1300'
	        AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
	        AND		IM.BS_FLAG IN ('3','4')
	        AND		IM.DIVISION IN ('60','99')
	        AND		BS.VERSION  = '$!{version}'	    
	        UNION ALL
	        SELECT	IM.ITEM_ID,
	        		IM.ITEM_NAME,
	                2		IDX,
	                '소요량' GUBN,
	                SUM(ROUND(BP.DM   * QY.QTY * (SP.MENGE/SP.BMENG),3))	M,
	                SUM(ROUND(BP.DM_1 * QY.QTY * (SP.MENGE/SP.BMENG),3))	M_1,
	                SUM(ROUND(BP.DM_2 * QY.QTY * (SP.MENGE/SP.BMENG),3))	M_2,
	                SUM(ROUND(BP.DM_3 * QY.QTY * (SP.MENGE/SP.BMENG),3))	M_3, 
	                SUM(ROUND(BP.DM_4 * QY.QTY * (SP.MENGE/SP.BMENG),3))	M_4,
	                SUM(ROUND(BP.DM_5 * QY.QTY * (SP.MENGE/SP.BMENG),3))	M_5,                   
                    ''	IPGO_QTY,
                    ''	IPGO_DATE,
                    NVL(BS.READTIME,0)	READTIME,
                    ''	TEXT
	        FROM	ITEM_MST IM, BASE_PROD_PLAN BP, SAPZPPV0030 SP, BASE_STOCK_PLAN BS,
	        		(
                    SELECT	DISTINCT ITEM_ID,QTY
                    FROM	ITEM_MST
                    )QY
	        WHERE	IM.ITEM_ID 	= SP.IDNRK 
	        AND		IM.ITEM_ID	= BS.ITEM_ID
	        AND		BS.VERSION	= '$!{version}'
	        AND		BS.PLANT_ID = '1300'
	        AND		BP.ITEM_ID 	= SP.MATNR 
	        AND		SP.MATNR	= QY.ITEM_ID
	        AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
	        AND		IM.BS_FLAG IN ('3','4')
	        AND		IM.DIVISION IN ('60','99')
	        AND		SP.WERKS	= '1300'
	        AND		SP.MANDT	= '100' 
	        AND		BP.VERSION 	= '$!{version}'
	        AND		BP.PLANT_ID = '1300' 
	        GROUP
	        BY		IM.ITEM_ID,
	        		IM.ITEM_NAME,
                    IM.MINMPSQTY,
                    BS.READTIME
            #if ( "$!{item_type}" == '3' )   
            #else         
            UNION ALL
            SELECT	'903000324' 			ITEM_ID,
            		'천연포도향WF709782'		ITEM_NAME,
		            2						IDX,
		            '소요량'					GUBN,
		            0	M,
		            0	M_1,
		            0	M_2,
		            0	M_3,
		            0	M_4,
		            0	M_5,
		            ''	IPGO_QTY,
                    ''	IPGO_DATE,
                    0	READTIME,
                    ''	TEXT
		    FROM DUAL
		    #end
	        UNION ALL
	        SELECT  A.ITEM_ID,
            		A.ITEM_NAME,
                    3	IDX,
                    '입고량',                    
                    B.M,
                    B.M_1,
                    B.M_2,
                    B.M_3,
                    B.M_4,
                    B.M_5,
                    ''	IPGO_QTY,
                    ''	IPGO_DATE,
                    NVL(B.READTIME,0)	READTIME,
                    ''	TEXT
            FROM	(
		            SELECT	ITEM_ID,
		            		ITEM_NAME
		            FROM	ITEM_MST
		            WHERE	BS_FLAG IN ('3','4')
		            AND		BS_FLAG LIKE '%'||'$!{item_type}'||'%'
		            )A,
		            (
		            SELECT	ITEM_ID,
		            		READTIME,
                    		M,
                    		M_1,
                            M_2,
                            M_3,
                            M_4,
                            M_5
                    FROM	BASE_STOCK_PLAN
                    WHERE	VERSION = '$!{version}'  
		            )B
		    WHERE	A.ITEM_ID = B.ITEM_ID		      
	        )S1,
            SAPMARA     S2,
            BASE_STOCK_PLAN	S3            
    WHERE	S1.ITEM_ID = S2.MATNR    
    AND		S1.ITEM_ID = S3.ITEM_ID
    AND		S3.VERSION = '$!{version}' 
    GROUP 
    BY		S1.ITEM_ID,
			S1.ITEM_NAME,
	        S1.IDX,
	        S1.GUBN,
	        S1.M,
	        S1.M_1,
	        S1.M_2,
	        S1.M_3,
	        S1.M_4,
	        S1.M_5,
	        S3.MINMPSQTY,
	        S2.MEINS,
	        S3.NTGEW     
	ORDER
	BY		S1.ITEM_ID,S1.IDX
	
</query>


<query id="op_02090_Long_Term_Planning_list_semi_dw3">
	
	SELECT	IM.ITEM_ID,
    		IM.ITEM_NAME,
            NVL(SA.MONTH_0,0),
            NVL(SA.MONTH_1,0),
            NVL(SA.MONTH_2,0),
            NVL(SA.MONTH_3,0),
            NVL(SA.MONTH_4,0),
            NVL(SA.MONTH_5,0)
    FROM	ITEM_MST IM, BASE_PROD_PLAN BS,
    		(			    		
			SELECT	ITEM_ID,
					ITEM_NAME,
			        MAX(MONTH_0)	MONTH_0,
			        MAX(MONTH_1)	MONTH_1,
			        MAX(MONTH_2)	MONTH_2,
			        MAX(MONTH_3)	MONTH_3,
			        MAX(MONTH_4)	MONTH_4,
			        MAX(MONTH_5)	MONTH_5
			FROM	(	
					SELECT	ITEM_ID,
							ITEM_NAME,
					        DECODE(SALE_MONTH, TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-3),'MM'),'YYYYMM'),QTY,0)	MONTH_0,
					        DECODE(SALE_MONTH, TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-2),'MM'),'YYYYMM'),QTY,0)	MONTH_1,
					        DECODE(SALE_MONTH, TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-1),'MM'),'YYYYMM'),QTY,0)  	MONTH_2,
					        DECODE(SALE_MONTH, TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-12),'MM'),'YYYYMM'),QTY,0)	MONTH_3,
					        DECODE(SALE_MONTH, TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-11),'MM'),'YYYYMM'),QTY,0)	MONTH_4,
					        DECODE(SALE_MONTH, TO_CHAR(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-10),'MM'),'YYYYMM'),QTY,0)	MONTH_5
					FROM	(
					        SELECT	IM.ITEM_ID,
					                IM.ITEM_NAME,
					                TO_CHAR(SA.SALE_DATE,'YYYYMM')	SALE_MONTH,
					                SUM(SA.QTY) QTY
					        FROM	SALES_ACT SA,
					                ITEM_MST IM,
					                BASE_PROD_PLAN BS,
					                (
                                    SELECT	CAL_DATE
                                    FROM	CAL_MST
                                    WHERE	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-3),'MM') AND LAST_DAY(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-1),'MM'))
                                    )CAL
					        WHERE	SA.SALE_DATE = CAL.CAL_DATE
					        AND		SA.ITEM_ID 	= IM.ITEM_ID
					        AND		IM.ITEM_ID 	= BS.ITEM_ID
					        AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
					        AND		BS.VERSION	='$!{version}'
					        GROUP
					        BY		IM.ITEM_ID,
					                IM.ITEM_NAME,
					                TO_CHAR(SA.SALE_DATE,'YYYYMM')    
					        UNION ALL
					        SELECT	IM.ITEM_ID,
					                IM.ITEM_NAME,
					                TO_CHAR(SA.SALE_DATE,'YYYYMM') SALE_MONTH,
					                SUM(SA.QTY) QTY
					        FROM	SALES_ACT SA,
					                ITEM_MST IM,
					                BASE_PROD_PLAN BS,
					                (
                                    SELECT	CAL_DATE
                                    FROM	CAL_MST
                                    WHERE	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-12),'MM') AND LAST_DAY(TRUNC(ADD_MONTHS(TO_DATE('$!{version}'),-10),'MM'))
                                    )CAL
					        WHERE	SA.SALE_DATE = CAL.CAL_DATE
					        AND		SA.ITEM_ID 	= IM.ITEM_ID
					        AND		IM.ITEM_ID 	= BS.ITEM_ID
					        AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
					        AND		BS.VERSION	= '$!{version}'
					        GROUP
					        BY		IM.ITEM_ID,
					                IM.ITEM_NAME,
					                TO_CHAR(SA.SALE_DATE,'YYYYMM')
					        )
					)
			GROUP
			BY		ITEM_ID,
					ITEM_NAME
    		)SA
    #if ( "$!{item_type}" == '1' )	
			, (
            SELECT	1	IDX,
            		'901000859'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	2	IDX,
            		'901000782'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	3	IDX,
            		'901000779'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	4	IDX,
            		'901001147'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	5	IDX,
            		'901001121'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	6	IDX,
            		'901000784'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	7	IDX,
            		'901000781'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	8	IDX,
            		'901000783'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	9	IDX,
            		'901000780'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	10	IDX,
            		'901001549'	ITEM_ID
            FROM	DUAL
            UNION ALL
            SELECT	11	IDX,
            		'901001548'	ITEM_ID
            FROM	DUAL
            )ORD
    WHERE	IM.ITEM_ID = BS.ITEM_ID
    AND		IM.ITEM_ID = ORD.ITEM_ID
    AND		IM.ITEM_ID = SA.ITEM_ID(+)
	AND		BS.VERSION = '$!{version}'
	AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
	ORDER
	BY		ORD.IDX
	#else	
	WHERE	IM.ITEM_ID = BS.ITEM_ID
	AND		BS.VERSION = '$!{version}'
	AND		IM.ITEM_ID = SA.ITEM_ID(+)
	AND		IM.BS_FLAG LIKE '%'||'$!{item_type}'||'%'
	ORDER
	BY		1
	#end
	
	
</query>

<query id="Aps_Pr_version_Semi_list">
		SELECT  DISTINCT VERSION
        FROM 	BASE_PROD_PLAN
        WHERE	VERSION BETWEEN TO_CHAR(TRUNC(SYSDATE-30),'YYYYMMDD') AND TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
        ORDER
        BY		1 DESC
</query>

<!--
=====================================================================================================
 끝 
=====================================================================================================
--> 

</queries>
