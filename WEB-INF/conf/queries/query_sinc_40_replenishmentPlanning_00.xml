<?xml version="1.0" encoding="EUC-KR"?>
<queries>

<!--
=====================================================================================================
	수송계획 >> 운영정보
=====================================================================================================
-->

	<!--
	======================================================================
		공통 쿼리
	======================================================================
	-->
	
	<!-- CAT_ID = 'RP' : 주간 보충/수송 -->
	<query id="weeklyTransportPlan_version_list">
			
			SELECT 	VL.VERSION, VL.SEQ
			  FROM 	(
					SELECT 	VL.VERSION, VL.SEQ
					  FROM 	PLAN_VERSION_LOG VL
					 WHERE 	VL.CAT_ID = 'RP' -- 주간 보충/수송
					   AND  VL.PERIOD_TYPE = 'WEEKLY'
					   AND 	VL.MADE_TYPE != 'DE' -- 삭제 필드가 아닌 데이터만 조회
					   AND 	VL.VERSION IS NOT NULL -- 버전-SEQ 가 NULL 이 아닌 것만 조회
					   AND 	VL.SEQ IS NOT NULL
					 ORDER 	BY VL.VERSION DESC, VL.SEQ DESC
			 ) VL
			 WHERE 	21 > ROWNUM
			 ORDER 	BY VL.VERSION DESC, VL.SEQ DESC
			
	</query>
	
	<!-- CAT_ID = 'RP' : 월간 보충/수송 -->
	<query id="monthlyTransportPlan_version_list">
			
			SELECT 	VL.VERSION, VL.SEQ
			  FROM 	(
					SELECT 	VL.VERSION, VL.SEQ
					  FROM 	PLAN_VERSION_LOG VL
					 WHERE 	VL.CAT_ID = 'RP' -- 월간 보충/수송
					   AND  VL.PERIOD_TYPE = 'MONTHLY'
					   AND 	VL.MADE_TYPE != 'DE' -- 삭제 필드가 아닌 데이터만 조회
					   AND 	VL.VERSION IS NOT NULL -- 버전-SEQ 가 NULL 이 아닌 것만 조회
					   AND 	VL.SEQ IS NOT NULL
					 ORDER 	BY VL.VERSION DESC, VL.SEQ DESC
			 ) VL
			 WHERE 	21 > ROWNUM
			 ORDER 	BY VL.VERSION DESC, VL.SEQ DESC
			
	</query>
	
	<!-- 출고장 이름 리스트 -->
	<query id="dc_mst_dc_name_list">
			
			-- 출고가 가능한(CDC_FLAG 가 'Y'인 경우) 출고장을 SELECT
            SELECT  MAX(CASE WHEN DM.CNT=1  THEN DM.DC_NAME ELSE ' EMPTY' END) N01, 
			        MAX(CASE WHEN DM.CNT=2  THEN DM.DC_NAME ELSE ' EMPTY' END) N02, 
			        MAX(CASE WHEN DM.CNT=3  THEN DM.DC_NAME ELSE ' EMPTY' END) N03, 
			        MAX(CASE WHEN DM.CNT=4  THEN DM.DC_NAME ELSE ' EMPTY' END) N04, 
			        MAX(CASE WHEN DM.CNT=5  THEN DM.DC_NAME ELSE ' EMPTY' END) N05, 
			        MAX(CASE WHEN DM.CNT=6  THEN DM.DC_NAME ELSE ' EMPTY' END) N06, 
			        MAX(CASE WHEN DM.CNT=7  THEN DM.DC_NAME ELSE ' EMPTY' END) N07, 
			        MAX(CASE WHEN DM.CNT=8  THEN DM.DC_NAME ELSE ' EMPTY' END) N08, 
			        MAX(CASE WHEN DM.CNT=9  THEN DM.DC_NAME ELSE ' EMPTY' END) N09, 
			        MAX(CASE WHEN DM.CNT=10 THEN DM.DC_NAME ELSE ' EMPTY' END) N10, 
			        MAX(CASE WHEN DM.CNT=11 THEN DM.DC_NAME ELSE ' EMPTY' END) N11, 
			        MAX(CASE WHEN DM.CNT=12 THEN DM.DC_NAME ELSE ' EMPTY' END) N12, 
			        MAX(CASE WHEN DM.CNT=13 THEN DM.DC_NAME ELSE ' EMPTY' END) N13, 
			        MAX(CASE WHEN DM.CNT=14 THEN DM.DC_NAME ELSE ' EMPTY' END) N14, 
			        MAX(CASE WHEN DM.CNT=15 THEN DM.DC_NAME ELSE ' EMPTY' END) N15, 
			        MAX(CASE WHEN DM.CNT=16 THEN DM.DC_NAME ELSE ' EMPTY' END) N16, 
			        MAX(CASE WHEN DM.CNT=17 THEN DM.DC_NAME ELSE ' EMPTY' END) N17, 
			        MAX(CASE WHEN DM.CNT=18 THEN DM.DC_NAME ELSE ' EMPTY' END) N18, 
			        MAX(CASE WHEN DM.CNT=19 THEN DM.DC_NAME ELSE ' EMPTY' END) N19,
			        MAX(CASE WHEN DM.CNT=20 THEN DM.DC_NAME ELSE ' EMPTY' END) N20
			  FROM  (
			        SELECT  DM.DC_ID, DM.DC_SHORT_NAME DC_NAME, 
			                SUM(1) OVER (ORDER BY DM.DC_ID) CNT
			          FROM  DC_MST DM
			         WHERE  DM.DC_ID IN(8510, 8620) 
			            OR  DM.CDC_FLAG = 'Y'
			        ) DM
			
	</query>
	
	
	<!-- CD_GRP = 'PLAN_TYPE' : CODE_MST TABLE  -->
	<query id="code_mst_of_plan_type">
			
			SELECT CM.CD, CM.CD_NAME
			  FROM CODE_MST CM
			 WHERE CM.CD_GRP = 'PLAN_TYPE'
			 		
	</query>
	
	
	<!-- 입고장 리스트 (CDC_FLAG : N (X), RDC_FLAG : N (X))-->
	<!-- ID & NAME -->
	<query id="trans_dc_id_and_short_name_list">
			
			SELECT 	DM.DC_ID, DM.DC_SHORT_NAME
			  FROM 	DC_MST DM
					, ( SELECT 'TMP' TMP FROM DUAL ) TP <!-- 비정상멈춤 현상 방지 TMP 테이블 조인 -->
			 WHERE 	DM.MADE_TYPE != 'DE' -- 삭제 필드가 아닌 데이터만 조회
			   AND  (DM.CDC_FLAG = 'Y' OR DM.RDC_FLAG = 'Y')
			 ORDER 	BY DM.DC_ID
			
	</query>
	
	
	<!--
	======================================================================
		1. Route수송조회 및 조정
	======================================================================
	-->
	
	<!-- 1. Route수송조회 및 조정 : 조회 -->
	<query id="rp_01020_dailyMultiDropAdjust_list">
	
	        SELECT  TN.TGT_LOC, DM.DC_NAME, TN.TRUCK_SEQ, TN.ROUTE_ID, TN.ITEM_ID, TN.ITEM_NAME,
	                TN.BASE_STK_PLT, TN.BASE_STK_QTY, TN.ADD_STK_PLT, TN.ADD_STK_QTY,
	                TN.PROD_PLT, TN.PROD_QTY, NULL CUM_PLT, NULL CUM_BOX, TN.BOX_PER_PALET
	          FROM  (          
	                 -- 자사 생산제품 : ITYPE = 'FERT'
	                 -- 자사 생산제품인 경우 ITEM_DTL 에서 BOX_PER_PALET 을 참조
	                 -- 입고장코드 입고장명 차량순번 RTE순번 제품코드 제품명
	                 -- 기본재고상차PLT 기본재고상차BOX 추가재고상차PLT 추가재고상차BOX 생산상차PLT 생산상차BOX 누적상차집계PLT 누적상차집계BOX BOX_PER_PALET
	                 SELECT  TP.TGT_LOC, TP.TRUCK_SEQ, TP.ROUTE_ID, IM.ITEM_ID, IM.ITEM_NAME,
	                         ROUND(TP.BASE_STK_PLT, 2) BASE_STK_PLT, TP.BASE_STK_QTY,
	                         ROUND(TP.ADD_STK_PLT, 2)  ADD_STK_PLT,  TP.ADD_STK_QTY,
	                         ROUND(TP.PROD_PLT, 2)     PROD_PLT,     TP.PROD_QTY,
	                         NVL(ID.BOX_PER_PALET, 1)  BOX_PER_PALET
	                   FROM  TRANS_PLAN TP, ITEM_MST IM, ITEM_DTL ID, DC_MST DM,
	                         (
	                          SELECT  DR.RDC1, DR.RDC2, DR.RDC3
	                            FROM  DC_ROUTE_PATH DR
	                           WHERE  DR.CDC_ID = '$!{src_loc}' -- ROUTE ID
	                             AND  DR.ROUTE_SEQ = '$!{loc_seq}' 
	                         ) DR
	                  WHERE  TP.SRC_LOC = '$!{src_loc}' -- 해당 출고장 
	                    AND  TP.ITEM_ID = IM.ITEM_ID
	                    AND  IM.ITYPE = ID.ITYPE
	                    AND  IM.ITEM_ID = ID.ITEM_ID
	                    AND  TP.SRC_LOC = DM.DC_ID
	                    AND  ID.PLANT_ID = DM.PLANT_ID
	                    AND  TP.MADE_TYPE != 'DE'
	                    AND  IM.MADE_TYPE != 'DE'
	                    AND  ID.MADE_TYPE != 'DE'
	                    AND  DM.MADE_TYPE != 'DE'
	                    AND  TP.VERSION = '$!{version}' AND TP.SEQ = '$!{seq}'                   
	                    AND  (TP.TGT_LOC = DR.RDC1 OR TP.TGT_LOC = DR.RDC2 OR TP.TGT_LOC = DR.RDC3)
	                    AND  TP.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
	                    AND  IM.ITYPE = 'FERT' -- 자사 생산 제품
	                 --
	                 UNION ALL
	                 -- 자사 생산제품 : ITYPE = 'FERT'
	                 -- 자사 생산제품 중 ITEM_DTL 에서 BOX_PER_PALET 을 참조할 수 없는 경우 ITEM_MST 에서 BOX_PER_PALET 을 참조
	                 -- 입고장코드 입고장명 차량순번 RTE순번 제품코드 제품명
	                 -- 기본재고상차PLT 기본재고상차BOX 추가재고상차PLT 추가재고상차BOX 생산상차PLT 생산상차BOX 누적상차집계PLT 누적상차집계BOX BOX_PER_PALET
	                 SELECT  TP.TGT_LOC, TP.TRUCK_SEQ, TP.ROUTE_ID, IM.ITEM_ID, IM.ITEM_NAME,
	                         ROUND(TP.BASE_STK_PLT, 2)  BASE_STK_PLT,  TP.BASE_STK_QTY,
	                         ROUND(TP.ADD_STK_PLT, 2)   ADD_STK_PLT,   TP.ADD_STK_QTY,
	                         ROUND(TP.PROD_PLT, 2)      PROD_PLT,      TP.PROD_QTY,
	                         NVL(IM.BOX_PER_PALET, 1) BOX_PER_PALET
	                   FROM  TRANS_PLAN TP, ITEM_MST IM, DC_MST DM,
	                         (
	                          SELECT  DR.RDC1, DR.RDC2, DR.RDC3
	                            FROM  DC_ROUTE_PATH DR
	                           WHERE  DR.CDC_ID = '$!{src_loc}' -- ROUTE ID
	                             AND  DR.ROUTE_SEQ = '$!{loc_seq}' 
	                         ) DR
	                  WHERE  TP.SRC_LOC = '$!{src_loc}' -- 해당 출고장
	                    AND  TP.ITEM_ID = IM.ITEM_ID
	                    AND  TP.TGT_LOC = DM.DC_ID
	                    AND  TP.MADE_TYPE != 'DE'
	                    AND  IM.MADE_TYPE != 'DE'
	                    AND  DM.MADE_TYPE != 'DE'
	                    AND  TP.VERSION = '$!{version}' AND TP.SEQ = '$!{seq}'
	                    AND  (TP.TGT_LOC = DR.RDC1 OR TP.TGT_LOC = DR.RDC2 OR TP.TGT_LOC = DR.RDC3)
	                    AND  TP.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
	                    AND  IM.ITYPE = 'FERT' -- 자사 생산제품이 아닌 제품
	                    AND  IM.ITEM_ID NOT IN (
	                                            SELECT  ID.ITEM_ID
	                                              FROM  ITEM_DTL ID, DC_MST DM
	                                             WHERE  ID.PLANT_ID = DM.PLANT_ID
	                                               AND  DM.DC_ID  = TP.SRC_LOC
	                                               AND  ID.ITYPE = 'FERT' -- 자사 생산제품
	                                               AND  ID.MADE_TYPE != 'DE'
	                                               AND  DM.MADE_TYPE != 'DE'
	                                           )
	                 --
	                 UNION ALL
	                 -- 자사 생산제품이 아닌 제품 : ITYPE = 'HAWA
	                 -- 자사 생산제품이 아닌 경우 ITEM_MST 에서 BOX_PER_PALET 을 참조
	                 -- 입고장코드 입고장명 차량순번 RTE순번 제품코드 제품명
	                 -- 기본재고상차PLT 기본재고상차BOX 추가재고상차PLT 추가재고상차BOX 생산상차PLT 생산상차BOX 누적상차집계PLT 누적상차집계BOX BOX_PER_PALET
	                 SELECT  TP.TGT_LOC, TP.TRUCK_SEQ, TP.ROUTE_ID, IM.ITEM_ID, IM.ITEM_NAME,
	                         ROUND(TP.BASE_STK_PLT, 2) BASE_STK_PLT, TP.BASE_STK_QTY,
	                         ROUND(TP.ADD_STK_PLT, 2) ADD_STK_PLT, TP.ADD_STK_QTY,
	                         ROUND(TP.PROD_PLT, 2) PROD_PLT, TP.PROD_QTY,
	                         NVL(IM.BOX_PER_PALET, 1) BOX_PER_PALET
	                   FROM  TRANS_PLAN TP, ITEM_MST IM, DC_MST DM,
	                         (
	                          SELECT  DR.RDC1, DR.RDC2, DR.RDC3
	                            FROM  DC_ROUTE_PATH DR
	                           WHERE  DR.CDC_ID = '$!{src_loc}' -- ROUTE ID
	                             AND  DR.ROUTE_SEQ = '$!{loc_seq}' 
	                         ) DR
	                  WHERE  TP.SRC_LOC = '$!{src_loc}' -- 해당 출고장 
	                    AND  TP.ITEM_ID = IM.ITEM_ID
	                    AND  TP.TGT_LOC = DM.DC_ID
	                    AND  TP.MADE_TYPE != 'DE'
	                    AND  IM.MADE_TYPE != 'DE'
	                    AND  DM.MADE_TYPE != 'DE'
	                    AND  TP.VERSION = '$!{version}' AND TP.SEQ = '$!{seq}'
	                    AND  (TP.TGT_LOC = DR.RDC1 OR TP.TGT_LOC = DR.RDC2 OR TP.TGT_LOC = DR.RDC3)
	                    AND  TP.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
	                    AND  IM.ITYPE = 'HAWA' -- 자사 생산제품이 아닌 제품
	                ) TN, DC_MST DM
	         WHERE  TN.TGT_LOC = DM.DC_ID
	         ORDER  BY TN.TGT_LOC, TO_NUMBER(TN.TRUCK_SEQ), TN.ITEM_ID
	
	</query>
	
	<!-- 2. DC_ROUTE_PATH의 ROUTE_ID 리스트 쿼리 -->
	<query id="dc_route_path_route_id">
			SELECT  DM.DC_NAME||'-'||DR.ROUTE_SEQ ROUTE_ID, DR.CDC_ID, DR.ROUTE_SEQ
			  FROM  DC_ROUTE_PATH DR, DC_MST DM
			 WHERE  DR.CDC_ID = DM.DC_ID
			 ORDER  BY DM.DC_NAME, DR.ROUTE_SEQ
	</query>
	
	<!-- 3. DC_ROUTE_PATH의 ROUTE_ID에 의해 선택된 RDC1, RDC2, RDC3 값을 구하는 쿼리 -->
	<query id="dc_route_path_rdcs">
			SELECT  DM.DC_ID, DM.DC_NAME 
	          FROM  DC_MST DM,
	                (
	                SELECT  DP.RDC1, DP.RDC2, DP.RDC3
	                  FROM  DC_ROUTE_PATH DP
	                 WHERE  DP.CDC_ID = '$!{src_loc}'
	                   AND  DP.ROUTE_SEQ = '$!{loc_seq}'
	                ) DR
	         WHERE  DM.DC_ID = DR.RDC1 
	            OR  DM.DC_ID = DR.RDC2
	            OR  DM.DC_ID = DR.RDC3
	</query>
	
	<!-- 4. Route 수송 조회 및 조정 : 저장 -->
	<!-- ①. TRANS_PLAN UPDATE -->
	<query id="rp_01020_dailyMultiDropAdjust_list_save_01" fix="version seq src_loc trans_date _user_id"
		   iterator="tgt_loc truck_seq rte_seq item_id base_stk_plt base_stk_box add_stk_plt add_stk_box prod_plt prod_box">
			
			UPDATE 	TRANS_PLAN
			   SET 	BASE_STK_QTY = NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   		, BASE_STK_PLT = NVL(TO_NUMBER(REPLACE('$!{base_stk_plt}', ',', '')), 0)
			   		, ADD_STK_QTY = NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   		, ADD_STK_PLT = NVL(TO_NUMBER(REPLACE('$!{add_stk_plt}', ',', '')), 0)
			   		, PROD_QTY = NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0)
			   		, PROD_PLT = NVL(TO_NUMBER(REPLACE('$!{prod_plt}', ',', '')), 0)
			   		-- UPDATE : UP, NO MODIFY : NO, INSERT : AD, DELETE : NULL
			   		, MOD_FLAG = (
			   				CASE 
			   					WHEN 	NVL(BASE_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   						AND NVL(ADD_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   						AND NVL(PROD_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0)
			   					THEN 	'NO'
			   					ELSE 	'UP'
			   				END
			   			)
			   		, MOD_QTY = ( NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   						+ NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   						+ NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0)
			   						- NVL(BASE_STK_QTY, 0) - NVL(ADD_STK_QTY, 0) - NVL(PROD_QTY, 0) )
			   		, MADE_TYPE = (
			   				CASE 
			   					WHEN 	NVL(BASE_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   						AND NVL(ADD_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   						AND NVL(PROD_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0)
			   					THEN 	MADE_TYPE
			   					ELSE 	'UP'
			   				END
			   			)
			   		, MADE_DTTM = (
			   				CASE 
			   					WHEN 	NVL(BASE_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   						AND NVL(ADD_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   						AND NVL(PROD_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0)
			   					THEN 	MADE_DTTM
			   					ELSE 	SYSDATE
			   				END
			   			)
			   		, MADE_BY = (
			   				CASE 
			   					WHEN 	NVL(BASE_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   						AND NVL(ADD_STK_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   						AND NVL(PROD_QTY, 0) = NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0)
			   					THEN 	MADE_BY
			   					ELSE 	'$!{_user_id}'
			   				END
			   			)
			   		, ROUTE_ID = '$!{rte_seq}'
			 WHERE 	VERSION = '$!{version}'
			   AND 	SEQ = '$!{seq}'
			   AND 	PLAN_TYPE = (
			                     SELECT DECODE((SELECT  TO_CHAR(START_DATE,'YYYY-MM-DD') START_DATE --계획수립 시작일(긴급수송일)
                                                  FROM  PLAN_VERSION_LOG
                                                 WHERE  VERSION = '$!{version}' AND SEQ = '$!{seq}'
                                                   AND  CAT_ID = 'RP' AND SUB_CAT = 'RP'), 
                                               '$!{trans_date}', -- UI에서 선택된 수송일자
                                               (SELECT  CD       -- 같은경우, 긴급수송 : ZM6
                                                  FROM  CODE_MST
                                                 WHERE  CD_GRP='PLAN_TYPE'
                                                   AND  CD_NAME = '긴급수송'),
                                               (SELECT  CD       -- 다른경우, 일반수송 : ZM1
                                                  FROM  CODE_MST 
                                                 WHERE  CD_GRP='PLAN_TYPE'
                                                   AND  CD_NAME = '일반수송')) PLAN_TYPE
                                   FROM DUAL
			                    )
 			   AND 	TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
 			   AND 	TGT_LOC = '$!{tgt_loc}'
 			   AND 	SRC_LOC = '$!{src_loc}'
 			   AND 	TRUCK_SEQ = '$!{truck_seq}'
 			   AND 	ITEM_ID = '$!{item_id}'
			   AND 	EXISTS (
			 			SELECT 	VERSION
			 			  FROM 	TRANS_PLAN TI
			 			 WHERE 	TI.VERSION = '$!{version}' AND TI.SEQ = '$!{seq}'
			 			   AND 	PLAN_TYPE = (
			                                 SELECT DECODE((SELECT  TO_CHAR(START_DATE,'YYYY-MM-DD') START_DATE --계획수립 시작일(긴급수송일)
                                                              FROM  PLAN_VERSION_LOG
                                                             WHERE  VERSION = '$!{version}' AND SEQ = '$!{seq}'
                                                               AND  CAT_ID = 'RP' AND SUB_CAT = 'RP'), 
                                                           '$!{trans_date}', -- UI에서 선택된 수송일자
                                                           (SELECT  CD       -- 같은경우, 긴급수송 : ZM6
                                                              FROM  CODE_MST
                                                             WHERE  CD_GRP='PLAN_TYPE'
                                                               AND  CD_NAME = '긴급수송'),
                                                           (SELECT  CD       -- 다른경우, 일반수송 : ZM1
                                                              FROM  CODE_MST 
                                                             WHERE  CD_GRP='PLAN_TYPE'
                                                               AND  CD_NAME = '일반수송')) PLAN_TYPE
                                               FROM DUAL
			                                 )
			 			   AND 	TI.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			 			   AND 	TI.TGT_LOC = '$!{tgt_loc}'
			 			   AND 	TI.SRC_LOC = '$!{src_loc}'
			 			   AND 	TI.TRUCK_SEQ = '$!{truck_seq}'
			 			   AND 	TI.ITEM_ID = '$!{item_id}'
			 		)
			
	</query>
	
	<!-- ②. TRANS_PLAN INSERT -->
	<query id="rp_01020_dailyMultiDropAdjust_list_save_02" fix="version seq src_loc trans_date _user_id"
		   iterator="tgt_loc truck_seq rte_seq item_id item_name base_stk_plt base_stk_box add_stk_plt add_stk_box prod_plt prod_box">
			
			-- 긴급 수송 : 계획일자와 수송일자가 같은 날 plan_type = ZM6
			-- 일반 수송 : 그 외의 날 plan_type = ZM1
			INSERT 	INTO TRANS_PLAN
					( VERSION, SEQ, PLAN_TYPE, TRANS_DATE, TGT_LOC, SRC_LOC, TRUCK_SEQ, ITEM_ID
						, ROUTE_ID, DESCRIPTION, BASE_STK_QTY, BASE_STK_PLT, ADD_STK_QTY, ADD_STK_PLT, PROD_QTY, PROD_PLT
						, MOD_FLAG, MOD_QTY, MADE_TYPE, MADE_DTTM, MADE_BY )
			SELECT 	'$!{version}' AS VERSION
					, '$!{seq}' AS SEQ
					, (
                       SELECT DECODE((SELECT  TO_CHAR(START_DATE,'YYYY-MM-DD') START_DATE --계획수립 시작일(긴급수송일)
                                        FROM  PLAN_VERSION_LOG
                                       WHERE  VERSION = '$!{version}' AND SEQ = '$!{seq}'
                                         AND  CAT_ID = 'RP' AND SUB_CAT = 'RP'), 
                                     '$!{trans_date}', -- UI에서 선택된 수송일자
                                     (SELECT  CD       -- 같은경우, 긴급수송 : ZM6
                                        FROM  CODE_MST
                                       WHERE  CD_GRP='PLAN_TYPE'
                                         AND  CD_NAME = '긴급수송'),
                                     (SELECT  CD       -- 다른경우, 일반수송 : ZM1
                                        FROM  CODE_MST 
                                       WHERE  CD_GRP='PLAN_TYPE'
                                         AND  CD_NAME = '일반수송')) PLAN_TYPE
                         FROM DUAL
			          ) AS PLAN_TYPE
					, TO_DATE('$!{trans_date}','YYYY-MM-DD') AS TRANS_DATE
					, '$!{tgt_loc}' AS TGT_LOC
					, '$!{src_loc}' AS SRC_LOC
					, '$!{truck_seq}' AS TRUCK_SEQ
					, '$!{item_id}' AS ITEM_ID
					, '$!{rte_seq}' AS ROUTE_ID
					, '$!{item_name}' AS DESCRIPTION
					, NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0) AS BASE_STK_QTY
			   		, NVL(TO_NUMBER(REPLACE('$!{base_stk_plt}', ',', '')), 0) AS BASE_STK_PLT
			   		, NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0) AS ADD_STK_QTY
			   		, NVL(TO_NUMBER(REPLACE('$!{add_stk_plt}', ',', '')), 0) AS ADD_STK_PLT
			   		, NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0) AS PROD_QTY
			   		, NVL(TO_NUMBER(REPLACE('$!{prod_plt}', ',', '')), 0) AS PROD_PLT
			   		-- UPDATE : UP, NO MODIFY : NO, INSERT : AD, DELETE : NULL
			   		, 'AD' AS MOD_FLAG
			   		, ( NVL(TO_NUMBER(REPLACE('$!{base_stk_box}', ',', '')), 0)
			   			+ NVL(TO_NUMBER(REPLACE('$!{add_stk_box}', ',', '')), 0)
			   			+ NVL(TO_NUMBER(REPLACE('$!{prod_box}', ',', '')), 0) ) AS MOD_QTY
			   		, 'AD' AS MADE_TYPE
			   		, SYSDATE AS MADE_DTTM
			   		, '$!{_user_id}' AS MADE_BY
			  FROM 	DUAL
			 WHERE 	NOT EXISTS (
			 			SELECT 	VERSION
			 			  FROM 	TRANS_PLAN TI
			 			 WHERE 	TI.VERSION = '$!{version}' AND TI.SEQ = '$!{seq}'
			 			   AND 	TI.PLAN_TYPE = (
			                                    SELECT DECODE((SELECT  TO_CHAR(START_DATE,'YYYY-MM-DD') START_DATE --계획수립 시작일(긴급수송일)
                                                                 FROM  PLAN_VERSION_LOG
                                                                WHERE  VERSION = '$!{version}' AND SEQ = '$!{seq}'
                                                                  AND  CAT_ID = 'RP' AND SUB_CAT = 'RP'), 
                                                             '$!{trans_date}', -- UI에서 선택된 수송일자
                                                             (SELECT  CD       -- 같은경우, 긴급수송 : ZM6
                                                                FROM  CODE_MST
                                                               WHERE  CD_GRP='PLAN_TYPE'
                                                                 AND  CD_NAME = '긴급수송'),
                                                             (SELECT  CD       -- 다른경우, 일반수송 : ZM1
                                                                FROM  CODE_MST 
                                                               WHERE  CD_GRP='PLAN_TYPE'
                                                                 AND  CD_NAME = '일반수송')) PLAN_TYPE
                                                  FROM DUAL
			                                    )
			 			   AND 	TI.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			 			   AND 	TI.TGT_LOC = '$!{tgt_loc}'
			 			   AND 	TI.SRC_LOC = '$!{src_loc}'
			 			   AND 	TI.TRUCK_SEQ = '$!{truck_seq}'
			 			   AND 	TI.ITEM_ID = '$!{item_id}'
			 		)
			
	</query>
	
	<!-- ③. STOCK_PLAN UPDATE : 입고장기준 -->
	<query id="rp_01020_dailyMultiDropAdjust_list_save_03">
			
			-- 1. 입고장기준으로 TRANS_PLAN의 한 ROW마다 입고장과 출고장의 STOCK증감을 계산하는 쿼리.
			-- 2. STOCK_QTY + (UI에서 수정한 수량 - 기존 TRANS_PLAN 수량)
			-- 3. TRANS_PLAN에서 MOD_FLAG, MOD_QTY가 수정된 값만 STOCK_PLAN에 반영.
			UPDATE /*+ bypass_ujvc*/
			        (
			        SELECT SP.STOCK_QTY OLD_QTY, 
			               (CASE WHEN  TP.MOD_FLAG IS NULL
			                    THEN  SP.STOCK_QTY - TP.SUM_QTY
			                    ELSE  NVL(SP.STOCK_QTY, 0) + TP.MOD_QTY
			                END) NEW_QTY 
			          FROM (
			                SELECT SP.VERSION, SP.SEQ, SP.LOC_ID, SP.ITEM_ID, SP.STOCK_DATE, SP.STOCK_QTY
			                  FROM STOCK_PLAN SP
			                 WHERE SP.VERSION = '$!{version}' AND SP.SEQ = TO_NUMBER('$!{seq}')
			                   AND SP.LOC_ID  IN (SELECT DC_ID
			                                        FROM DC_MST,DC_ROUTE_PATH
			                                       WHERE CDC_ID = '$!{src_loc}'
			                                         AND ROUTE_SEQ = '$!{loc_seq}'
			                                         AND (DC_ID = RDC1 OR DC_ID = RDC2 OR DC_ID = RDC3)) 
			                   AND SP.STOCK_DATE >= TO_DATE('$!{trans_date}','YYYY-MM-DD')
			                   AND SP.MADE_TYPE != 'DE'
			               ) SP,
			               (
			                SELECT TP.VERSION, TP.SEQ, TP.TRANS_DATE, TP.TGT_LOC, TP.SRC_LOC, ITEM_ID, 
			                       SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY) SUM_QTY, -- 화면에 뿌려지는 데이타.
			                       MOD_FLAG, SUM(MOD_QTY) MOD_QTY
			                  FROM TRANS_PLAN TP
			                 WHERE TP.VERSION = '$!{version}' AND TP.SEQ = TO_NUMBER('$!{seq}')
			                   AND TP.SRC_LOC = '$!{src_loc}' AND TP.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			                   AND TP.TGT_LOC IN (SELECT DC_ID
			                                        FROM DC_MST,DC_ROUTE_PATH
			                                       WHERE CDC_ID = '$!{src_loc}'
			                                         AND ROUTE_SEQ = '$!{loc_seq}'
			                                         AND (DC_ID = RDC1 OR DC_ID = RDC2 OR DC_ID = RDC3))
			                   AND TP.MADE_TYPE != 'DE'
			                 GROUP BY TP.VERSION, TP.SEQ, TP.TRANS_DATE, TP.TGT_LOC, TP.SRC_LOC, ITEM_ID, MOD_FLAG
			               ) TP
			         WHERE SP.VERSION = TP.VERSION
			           AND SP.SEQ = TP.SEQ
			           AND SP.ITEM_ID = TP.ITEM_ID
			           AND SP.LOC_ID = TP.TGT_LOC
			           AND SP.STOCK_DATE >= TP.TRANS_DATE
			        )
			   SET  OLD_QTY = NEW_QTY
			   
	</query>
	
	<!-- ④. STOCK_PLAN UPDATE : 출고장기준 -->
	<query id="rp_01020_dailyMultiDropAdjust_list_save_04">
			
			-- 출고장기준으로 TRANS_PLAN의 한 ROW마다 입고장과 출고장의 STOCK증감을 계산하는 쿼리.
			-- STOCK_QTY - (UI에서 수정한 수량 - 기존 TRANS_PLAN 수량)
			UPDATE /*+ bypass_ujvc*/
			        (
			        SELECT SP.STOCK_QTY OLD_QTY, 
			               (CASE WHEN  TP.MOD_FLAG IS NULL
			                    THEN  SP.STOCK_QTY + TP.SUM_QTY
			                    ELSE  NVL(SP.STOCK_QTY, 0) - TP.MOD_QTY
			                END) NEW_QTY 
			          FROM (
			                SELECT SP.VERSION, SP.SEQ, SP.LOC_ID, SP.ITEM_ID, SP.STOCK_DATE, SP.STOCK_QTY
			                  FROM STOCK_PLAN SP
			                 WHERE SP.VERSION = '$!{version}' AND SP.SEQ = TO_NUMBER('$!{seq}')
			                   AND SP.LOC_ID = '$!{src_loc}' AND SP.STOCK_DATE >= TO_DATE('$!{trans_date}','YYYY-MM-DD')
			                   AND SP.MADE_TYPE != 'DE'
			               ) SP,
			               (
			                SELECT TP.VERSION, TP.SEQ, TP.TRANS_DATE, TP.TGT_LOC, TP.SRC_LOC, ITEM_ID, 
			                       SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY) SUM_QTY, -- 화면에 뿌려지는 데이타.
			                       MOD_FLAG, SUM(MOD_QTY) MOD_QTY
			                  FROM TRANS_PLAN TP
			                 WHERE TP.VERSION = '$!{version}' AND TP.SEQ = TO_NUMBER('$!{seq}')
			                   AND TP.SRC_LOC = '$!{src_loc}' AND TP.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			                   AND TP.TGT_LOC IN (SELECT DC_ID
			                                        FROM DC_MST,DC_ROUTE_PATH
			                                       WHERE CDC_ID = '$!{src_loc}'
			                                         AND ROUTE_SEQ = '$!{loc_seq}'
			                                         AND (DC_ID = RDC1 OR DC_ID = RDC2 OR DC_ID = RDC3))
			                   AND TP.MADE_TYPE != 'DE'
			                 GROUP BY TP.VERSION, TP.SEQ, TP.TRANS_DATE, TP.TGT_LOC, TP.SRC_LOC, ITEM_ID, MOD_FLAG
			               ) TP
			         WHERE SP.VERSION = TP.VERSION
			           AND SP.SEQ = TP.SEQ
			           AND SP.ITEM_ID = TP.ITEM_ID
			           AND SP.LOC_ID = TP.SRC_LOC
			           AND SP.STOCK_DATE >= TP.TRANS_DATE
			        )
			   SET  OLD_QTY = NEW_QTY
 
	</query>
	
	<!-- ⑤. TRANS_PLAN DELETE -->
	<!-- MOD_FLAG 가 비어있는 데이터 삭제 -->
	<query id="rp_01020_dailyMultiDropAdjust_list_save_05">
			
			DELETE 	TRANS_PLAN
			 WHERE 	VERSION = '$!{version}'
			   AND 	SEQ = '$!{seq}'
 			   AND  TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
 			   -- 선택된 출고장에 해당하는 최대 3개의 입고장을 구함.
 			   AND 	TGT_LOC IN (
 			   					SELECT  DM.DC_ID
								  FROM  DC_MST DM,
								        (
								        SELECT  DR.RDC1, DR.RDC2, DR.RDC3
								          FROM  DC_ROUTE_PATH DR
								         WHERE  DR.CDC_ID = '$!{src_loc}'
								           AND  DR.ROUTE_SEQ = '$!{loc_seq}'
								        ) DR
								 WHERE  DM.DC_ID = DR.RDC1
								    OR  DM.DC_ID = DR.RDC2
								    OR  DM.DC_ID = DR.RDC3
 			                   )
 			   AND 	SRC_LOC = '$!{src_loc}'
 			   AND 	MOD_FLAG IS NULL
			
	</query>
	
	<!-- ⑥. TRANS_PLAN FLAG INIT -->
	<!-- MOD_FLAG, MOD_QTY 초기화 -->
	<query id="rp_01020_dailyMultiDropAdjust_list_save_06">
			
			UPDATE 	TRANS_PLAN
			   SET 	MOD_FLAG = NULL
			   		, MOD_QTY = NULL
			 WHERE 	VERSION = '$!{version}'
			   AND 	SEQ = '$!{seq}'
 			   AND  TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
 			   -- 선택된 출고장에 해당하는 최대 3개의 입고장을 구함.
 			   AND 	TGT_LOC IN ( 
 			   					SELECT  DM.DC_ID 
								  FROM  DC_MST DM,
								        (
								        SELECT  DR.RDC1, DR.RDC2, DR.RDC3
								          FROM  DC_ROUTE_PATH DR
								         WHERE  DR.CDC_ID = '$!{src_loc}'
								           AND  DR.ROUTE_SEQ = '$!{loc_seq}'
								        ) DR
								 WHERE  DM.DC_ID = DR.RDC1
								    OR  DM.DC_ID = DR.RDC2
								    OR  DM.DC_ID = DR.RDC3
 			                   )
 			   AND 	SRC_LOC = '$!{src_loc}'

			
	</query>
	
	
	<!--
	======================================================================
		2. Push 수송 계획 조정
	======================================================================
	-->
	
	<!-- 1. Push 수송 계획 조정 : 조회 -->
	<query id="rp_01030_dailyPushTransportAdjust_list">
	
			SELECT  TR.TRANS_DATE, TR.TGT_LOC, TR.DC_NAME, TR.TRUCK_SEQ, 
			        ROUND(TR.SUM_PLT*100/TR.MAX_CAPA_PT,2) PER,
			        TR.BASE_PLT, TR.BASE_BOX, 
			        TR.PROD_PLT, TR.PROD_BOX,
			        TR.SUM_PLT, TR.SUM_BOX
			  FROM  (
					SELECT  TO_CHAR(TP.TRANS_DATE,'YYYY-MM-DD') TRANS_DATE, TP.TGT_LOC, 
					        DM.DC_NAME, TP.TRUCK_SEQ, TM.MAX_CAPA_PT,
					        ROUND(SUM(NVL(TP.BASE_STK_PLT,0) + NVL(TP.ADD_STK_PLT,0)),2) BASE_PLT,
					        SUM(NVL(TP.BASE_STK_QTY,0) + NVL(TP.ADD_STK_QTY,0)) BASE_BOX, 
					        ROUND(SUM(NVL(TP.PROD_PLT,0)),2) PROD_PLT,
					        SUM(NVL(TP.PROD_QTY,0)) PROD_BOX,
					        ROUND(SUM(NVL(TP.BASE_STK_PLT,0) + NVL(TP.ADD_STK_PLT,0) + NVL(TP.PROD_PLT,0)),2) SUM_PLT,
					        SUM(NVL(TP.BASE_STK_QTY,0) + NVL(TP.ADD_STK_QTY,0) + NVL(TP.PROD_QTY,0)) SUM_BOX        
					  FROM  TRANS_PLAN TP, DC_MST DM,
					        (
			                SELECT  TM.MAX_CAPA_PT
			                  FROM  TRANS_MODE TM
			                 WHERE  TM.MODE_ID = '18'
			                ) TM
					 WHERE  TP.VERSION = '$!{version}'
					   AND  TP.SEQ = '$!{seq}'
					   AND  TP.SRC_LOC = '$!{src_loc}'
					   AND  TP.TRANS_DATE = TO_DATE('$!{creation_date}','YYYY-MM-DD')
					   AND  TP.TGT_LOC = DM.DC_ID
					 GROUP  BY TP.TRANS_DATE, TP.TGT_LOC, DM.DC_NAME, TP.TRUCK_SEQ ,TM.MAX_CAPA_PT 
			        ) TR
			 ORDER  BY TR.DC_NAME, TO_NUMBER(TR.TRUCK_SEQ)
       
	</query>
	
	
	<!-- 2. Push 수송 계획 조정 : 출고장과 최대재고 조회조건 -->
	<query id="src_loc_and_max_capa">
	
			SELECT  DM.DC_ID, DM.DC_NAME, DM.KEEPING_CAPA1
			  FROM  DC_MST DM
			 WHERE  DM.DC_ID IN(8510, 8620) 
			    OR  DM.CDC_FLAG = 'Y'
       
	</query>
	
	<!-- 3. 마감예상재고 조회 -->
	<query id="stock_plan_and_expect_stock">
	
			SELECT  SP.LOC_ID, ROUND(NVL(SUM(SP.STOCK_QTY),0),0) QTY
			  FROM  STOCK_PLAN SP 
			 WHERE  SP.VERSION = '$!{version}'
			   AND  SP.SEQ = '$!{seq}'
			   AND  SP.LOC_ID = '$!{src_loc}'
			   AND  SP.STOCK_DATE = TO_DATE('$!{creation_date}','YYYY-MM-DD')
			 GROUP  BY VERSION, SEQ, LOC_ID, STOCK_DATE
       
	</query>
	
	<!-- 4. Push 수송 계획 조정 : 저장 -->
	<!--
	         『   저장 LOGIC 』
		   . STOCK_PLAN 수정 (입고장, 출고장) -> TRANS_PLAN 수정   
		  1. UI에서 선택된 ROW를 TRANS_PLAN에 수정하기 전에 STOCK_PLAN의 STOCK_QTY에 UPDATE된 수량을 반영(수송 계획에서 빠지므로)
		  2. UPDATE된 수송계획일자 값으로 다시 STOCK_PLAN의 STOCK_QTY에 UPDATE된 수량을 반영(수송 계획에 다시 반영되었으므로)
		  3. UI에서 선택된 ROW를 수정된 수송계획일자로 UPDATE
	-->
	<!-- ①. STOCK_PLAN UPDATE : 입고장기준(변경되기전 수송계획일자) -->
	<query id="rp_01030_dailyPushTransportAdjust_list_save_01" fix="version seq src_loc creation_date"
		   iterator="check_value tgt_loc truck_seq">
			-- 1. 입고장기준으로 TRANS_PLAN의 한 ROW마다 입고장의 STOCK증감을 계산하는 쿼리.
			-- 2. STOCK_QTY - 기존 TRANS_PLAN 수량(Check_Flag가 null 아닌 것만 해당됨)
			-- 3. 기존 수송일자에 해당한 수량을 변경되는 수송일자에 옮기기 전에, 기존 수송일자에 해당하는 수량을 Stock_plan에서 빼줌.
			UPDATE 	STOCK_PLAN SP
			   SET 	SP.STOCK_QTY = (
						SELECT 	SP.STOCK_QTY - SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY)
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID  = TP.TGT_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TP.TRANS_DATE
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
						   AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
						   AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
						   --AND  TP.PLAN_TYPE = '$!{plan_type}'
						   AND  TP.MADE_TYPE != 'DE'
					)
			 WHERE 	SP.ITEM_ID = (
						SELECT 	TP.ITEM_ID
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID = TP.TGT_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TP.TRANS_DATE
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
						   AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
						   AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
						   --AND  TP.PLAN_TYPE = '$!{plan_type}'
						   AND  TP.MADE_TYPE != 'DE'
					)
			   AND 	SP.STOCK_DATE >= TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
			   AND 	SP.VERSION = '$!{version}' AND SP.SEQ = TO_NUMBER('$!{seq}')
			   AND 	SP.LOC_ID = '$!{tgt_loc}'
			   AND 	SP.MADE_TYPE != 'DE'	
	</query>
	
	<!-- ②. STOCK_PLAN UPDATE : 출고장기준(변경되기전 수송계획일자) -->
	<query id="rp_01030_dailyPushTransportAdjust_list_save_02" fix="version seq src_loc creation_date"
		   iterator="check_value tgt_loc truck_seq">
			
			-- 1. 출고장기준으로 TRANS_PLAN의 한 ROW마다 출고장의 STOCK증감을 계산하는 쿼리.
		    -- 2. STOCK_QTY + 기존 TRANS_PLAN 수량(Check_Flag가 null 아닌 것만 해당됨)
		    -- 3. 기존 수송일자에 해당한 수량을 변경되는 수송일자에 옮기기 전에, 기존 수송일자에 해당하는 수량을 Stock_plan에서 더해줌.
			UPDATE 	STOCK_PLAN SP
			   SET 	SP.STOCK_QTY = (
						SELECT  SP.STOCK_QTY + SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY)
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID = TP.SRC_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TP.TRANS_DATE
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
					       AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
					       AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
					       --AND  TP.PLAN_TYPE = '$!{plan_type}'
					       AND  TP.MADE_TYPE != 'DE'
					)
			 WHERE 	SP.ITEM_ID = (
						SELECT 	TP.ITEM_ID
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID = TP.SRC_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TP.TRANS_DATE
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
					       AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
					       AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
					       --AND  TP.PLAN_TYPE = '$!{plan_type}'
					       AND  TP.MADE_TYPE != 'DE'
					)
			   AND 	SP.STOCK_DATE >= TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
			   AND 	SP.LOC_ID = '$!{src_loc}'
			   AND 	SP.VERSION = '$!{version}' AND SP.SEQ = TO_NUMBER('$!{seq}')
			   AND 	SP.MADE_TYPE != 'DE'
			
	</query>
	
	<!-- ③. STOCK_PLAN UPDATE : 입고장기준 (변경된 수송계획일자)-->
	<query id="rp_01030_dailyPushTransportAdjust_list_save_03" fix="version seq src_loc creation_date"
		   iterator="check_value trans_date tgt_loc truck_seq">
			-- 1. 입고장기준으로 TRANS_PLAN의 한 ROW마다 입고장의 STOCK증감을 계산하는 쿼리.
			-- 2. STOCK_QTY + 기존 TRANS_PLAN 수량(Check_Flag가 null 아닌 것만 해당됨)
			-- 3. 변경된 수송계획일자의 수량을,  Stock_plan에서 반영(변경된 수송계획일자에 반영)
			UPDATE 	STOCK_PLAN SP
			   SET 	SP.STOCK_QTY = (
						SELECT 	SP.STOCK_QTY + SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY)
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID  = TP.TGT_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TO_DATE('$!{trans_date}', 'YYYY-MM-DD')
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
						   AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
						   AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
						   --AND  TP.PLAN_TYPE = '$!{plan_type}'
						   AND  TP.MADE_TYPE != 'DE'
					)
			 WHERE 	SP.ITEM_ID = (
						SELECT 	TP.ITEM_ID
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID = TP.TGT_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TO_DATE('$!{trans_date}', 'YYYY-MM-DD')
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
						   AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
						   AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
						   --AND  TP.PLAN_TYPE = '$!{plan_type}'
						   AND  TP.MADE_TYPE != 'DE'
					)
			   AND 	SP.STOCK_DATE >= TO_DATE('$!{trans_date}', 'YYYY-MM-DD')
			   AND 	SP.VERSION = '$!{version}' AND SP.SEQ = TO_NUMBER('$!{seq}')
			   AND 	SP.LOC_ID = '$!{tgt_loc}'
			   AND 	SP.MADE_TYPE != 'DE'	
	</query>

	<!-- ④. STOCK_PLAN UPDATE : 출고장기준(변경된 수송계획일자) -->
	<query id="rp_01030_dailyPushTransportAdjust_list_save_04" fix="version seq src_loc creation_date"
		   iterator="check_value trans_date tgt_loc truck_seq">
			
			-- 1. 출고장기준으로 TRANS_PLAN의 한 ROW마다 출고장의 STOCK증감을 계산하는 쿼리.
		    -- 2. STOCK_QTY - 기존 TRANS_PLAN 수량(Check_Flag가 null 아닌 것만 해당됨)
		    -- 3. 변경된 수송계획일자의 수량을,  Stock_plan에서 반영(변경된 수송계획일자에 반영)
			UPDATE 	STOCK_PLAN SP
			   SET 	SP.STOCK_QTY = (
						SELECT  SP.STOCK_QTY - SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY)
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID = TP.SRC_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TO_DATE('$!{trans_date}', 'YYYY-MM-DD')
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
					       AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
					       AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
					       --AND  TP.PLAN_TYPE = '$!{plan_type}'
					       AND  TP.MADE_TYPE != 'DE'
					)
			 WHERE 	SP.ITEM_ID = (
						SELECT 	TP.ITEM_ID
						  FROM 	TRANS_PLAN TP
						 WHERE 	SP.VERSION = TP.VERSION AND SP.SEQ = TP.SEQ
						   AND 	SP.LOC_ID = TP.SRC_LOC AND SP.ITEM_ID = TP.ITEM_ID 
						   AND  SP.STOCK_DATE >= TO_DATE('$!{trans_date}', 'YYYY-MM-DD')
						   AND 	TP.VERSION = '$!{version}' AND TP.SEQ  = TO_NUMBER('$!{seq}')
					       AND 	TP.SRC_LOC = '$!{src_loc}' AND TP.TGT_LOC = '$!{tgt_loc}'
					       AND  TP.TRUCK_SEQ = '$!{truck_seq}' AND TP.TRANS_DATE = TO_DATE('$!{creation_date}', 'YYYY-MM-DD')
					       --AND  TP.PLAN_TYPE = '$!{plan_type}'
					       AND  TP.MADE_TYPE != 'DE'
					)
			   AND 	SP.STOCK_DATE >= TO_DATE('$!{trans_date}', 'YYYY-MM-DD')
			   AND 	SP.LOC_ID = '$!{src_loc}'
			   AND 	SP.VERSION = '$!{version}' AND SP.SEQ = TO_NUMBER('$!{seq}')
			   AND 	SP.MADE_TYPE != 'DE'
			
	</query>
	
	<!-- ⑤. TRANS_PLAN UPDATE : 변경된 수송계획일자로 UPDATE -->
	<query id="rp_01030_dailyPushTransportAdjust_list_save_05" fix="version seq src_loc creation_date _user_id"
		   iterator="check_value trans_date tgt_loc truck_seq">
			
			-- 1. 변경되는 수송계획일자가 이미 다른 PK 조건과 중복되는 경우가 발생
			-- 2. 이런 경우, 중복되지 않는 것은 기존의 수송일자를 변경되는 수송계획일자로 UPDATE 해줌
			-- 3. 중복되는 경우 MAX TRUCK_SEQ에 1을 더해서 UPDATE해줌.
			UPDATE 	TRANS_PLAN
			   SET 	TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD'),
			        TRUCK_SEQ = (
			   		      CASE 
			   				  WHEN 	TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			   				  THEN 	TRUCK_SEQ
			   				  ELSE 	(
			   				        -- 입고장, 출고장, 수송일자가 중복되면, MAX TRUCK_SEQ에 1을 더해서 UPDATE함.
				   				  	SELECT  TO_CHAR(NVL(MAX(TO_NUMBER(TP.TRUCK_SEQ)),0)+1) SEQ
									  FROM  TRANS_PLAN TP
									 WHERE  TP.VERSION = '$!{version}'
									   AND  TP.SEQ = '$!{seq}'
									   AND  TP.SRC_LOC = '$!{src_loc}'
									   AND  TP.TGT_LOC = '$!{tgt_loc}'
									   AND  TP.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD') 
			   				  		)
			   			  END
			   		),
			   		MADE_TYPE = (
			   		      CASE 
			   				  WHEN 	TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			   				  THEN 	MADE_TYPE
			   				  ELSE 	'UP'
			   			  END
			   		),
			   		MADE_DTTM = (
			   			  CASE 
			   				  WHEN 	TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			   				  THEN 	MADE_DTTM
			   				  ELSE 	SYSDATE
			   			  END
			   		),
			   		MADE_BY = (
			   			  CASE 
			   				  WHEN 	TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
			   				  THEN 	MADE_BY
			   				  ELSE 	'$!{_user_id}'
			   			  END
			   		)
			 WHERE 	VERSION = '$!{version}'
			   AND 	SEQ = '$!{seq}'
			   --AND 	PLAN_TYPE = '$!{plan_type}'
 			   AND 	TRANS_DATE = TO_DATE('$!{creation_date}','YYYY-MM-DD')
 			   AND 	TGT_LOC = '$!{tgt_loc}'
 			   AND 	SRC_LOC = '$!{src_loc}'
 			   AND 	TRUCK_SEQ = '$!{truck_seq}'
			
	</query>
	
	<!--
	======================================================================
		3. 보충계획 요약
	======================================================================
	-->
	
	<!-- 보충계획 요약 조회 -->
	<query id="rp_01040_replenishmentSummary_list" paging="false">
		
		<!-- 화면이 처음으로 로드되는 경우, MAX 버전과 SEQ, 현재 날짜가 자동으로 입력되어 조회됨. -->
		#if( "$!{version}" == "" )
			-- 구분 : 팔레트수
            SELECT  TD.DC_NAME, 
                    DECODE(SUM(CASE WHEN TD.CNT=1  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=1  THEN TD.PLT_QTY ELSE 0 END)) P01, 
                    DECODE(SUM(CASE WHEN TD.CNT=2  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=2  THEN TD.PLT_QTY ELSE 0 END)) P02, 
                    DECODE(SUM(CASE WHEN TD.CNT=3  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=3  THEN TD.PLT_QTY ELSE 0 END)) P03, 
                    DECODE(SUM(CASE WHEN TD.CNT=4  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=4  THEN TD.PLT_QTY ELSE 0 END)) P04, 
                    DECODE(SUM(CASE WHEN TD.CNT=5  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=5  THEN TD.PLT_QTY ELSE 0 END)) P05, 
                    DECODE(SUM(CASE WHEN TD.CNT=6  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=6  THEN TD.PLT_QTY ELSE 0 END)) P06, 
                    DECODE(SUM(CASE WHEN TD.CNT=7  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=7  THEN TD.PLT_QTY ELSE 0 END)) P07, 
                    DECODE(SUM(CASE WHEN TD.CNT=8  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=8  THEN TD.PLT_QTY ELSE 0 END)) P08, 
                    DECODE(SUM(CASE WHEN TD.CNT=9  THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=9  THEN TD.PLT_QTY ELSE 0 END)) P09, 
                    DECODE(SUM(CASE WHEN TD.CNT=10 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=10  THEN TD.PLT_QTY ELSE 0 END)) P10, 
                    DECODE(SUM(CASE WHEN TD.CNT=11 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=11  THEN TD.PLT_QTY ELSE 0 END)) P11, 
                    DECODE(SUM(CASE WHEN TD.CNT=12 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=12  THEN TD.PLT_QTY ELSE 0 END)) P12, 
                    DECODE(SUM(CASE WHEN TD.CNT=13 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=13  THEN TD.PLT_QTY ELSE 0 END)) P13, 
                    DECODE(SUM(CASE WHEN TD.CNT=14 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=14  THEN TD.PLT_QTY ELSE 0 END)) P14, 
                    DECODE(SUM(CASE WHEN TD.CNT=15 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=15  THEN TD.PLT_QTY ELSE 0 END)) P15, 
                    DECODE(SUM(CASE WHEN TD.CNT=16 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=16  THEN TD.PLT_QTY ELSE 0 END)) P16, 
                    DECODE(SUM(CASE WHEN TD.CNT=17 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=17  THEN TD.PLT_QTY ELSE 0 END)) P17, 
                    DECODE(SUM(CASE WHEN TD.CNT=18 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=18  THEN TD.PLT_QTY ELSE 0 END)) P18, 
                    DECODE(SUM(CASE WHEN TD.CNT=19 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=19  THEN TD.PLT_QTY ELSE 0 END)) P19,
                    DECODE(SUM(CASE WHEN TD.CNT=20 THEN TD.PLT_QTY ELSE 0 END),0 ,NULL,SUM(CASE WHEN TD.CNT=20  THEN TD.PLT_QTY ELSE 0 END)) P20
              FROM  (
              		SELECT  TP.DC_ID,TP.DC_NAME, TP.SRC_LOC, TP.PLT_QTY, DM.CNT
                      FROM  (
                            -- 구분 : 팔레트수 (BASE_STK_PLT + ADD_STK_PLT + PROD_PLT)
                            SELECT  T.TGT_LOC,D.DC_ID, D.DC_SHORT_NAME DC_NAME, T.SRC_LOC, SUM((T.BASE_STK_PLT+T.ADD_STK_PLT+T.PROD_PLT)) PLT_QTY
                              FROM  TRANS_PLAN T, DC_MST D,
                                    (
				                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
				                      FROM  PLAN_VERSION_LOG VL, 
				                            (SELECT  MAX(VL.VERSION) VERSION
				                               FROM  PLAN_VERSION_LOG VL
				                              WHERE  VL.PERIOD_TYPE = 'DAILY'
				                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
				                     WHERE  VL.VERSION = MV.VERSION
				                       AND  VL.PERIOD_TYPE = 'DAILY'
				                       AND  VL.CAT_ID = 'RP'
				                     GROUP  BY VL.VERSION     
				                    ) MV
                             WHERE  T.VERSION = MV.VERSION
                               AND  T.SEQ = MV.SEQ
                               AND  T.TRANS_DATE BETWEEN TO_CHAR(SYSDATE,'YYYY-MM-DD') AND TO_CHAR(SYSDATE,'YYYY-MM-DD')
                               AND  T.TGT_LOC = D.DC_ID
                             GROUP  BY T.TGT_LOC,D.DC_ID, D.DC_SHORT_NAME, T.SRC_LOC
                             ORDER  BY D.DC_ID,T.TGT_LOC, T.SRC_LOC
                            ) TP,
                            (
                            -- 출고가 가능한(CDC_FLAG 가 'Y'인 경우) 출고장을 SELECT
                            SELECT  DM.DC_ID, DM.DC_SHORT_NAME DC_NAME, 
                                    SUM(1) OVER (ORDER BY DM.DC_ID) CNT
                              FROM  DC_MST DM
                             WHERE  DM.DC_ID IN(8510, 8620) 
                                OR  DM.CDC_FLAG = 'Y'
                            ) DM
                     WHERE  TP.SRC_LOC = DM.DC_ID
                    ) TD
             GROUP  BY TD.DC_ID,TD.DC_NAME
             ORDER BY TD.DC_ID
        #elseif("$!{gubun_sel}" == "truck") <!-- 구분이 차량대수 인경우.. -->
        	-- 구분 : 차량대수
			SELECT  TD.DC_NAME, 
					DECODE(SUM(CASE WHEN TD.CNT=1  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=1  THEN TD.TRUCK_QTY ELSE NULL END)) P01, 
                    DECODE(SUM(CASE WHEN TD.CNT=2  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=2  THEN TD.TRUCK_QTY ELSE NULL END)) P02, 
                    DECODE(SUM(CASE WHEN TD.CNT=3  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=3  THEN TD.TRUCK_QTY ELSE NULL END)) P03, 
                    DECODE(SUM(CASE WHEN TD.CNT=4  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=4  THEN TD.TRUCK_QTY ELSE NULL END)) P04, 
                    DECODE(SUM(CASE WHEN TD.CNT=5  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=5  THEN TD.TRUCK_QTY ELSE NULL END)) P05, 
                    DECODE(SUM(CASE WHEN TD.CNT=6  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=6  THEN TD.TRUCK_QTY ELSE NULL END)) P06, 
                    DECODE(SUM(CASE WHEN TD.CNT=7  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=7  THEN TD.TRUCK_QTY ELSE NULL END)) P07, 
                    DECODE(SUM(CASE WHEN TD.CNT=8  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=8  THEN TD.TRUCK_QTY ELSE NULL END)) P08, 
                    DECODE(SUM(CASE WHEN TD.CNT=9  THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=9  THEN TD.TRUCK_QTY ELSE NULL END)) P09, 
                    DECODE(SUM(CASE WHEN TD.CNT=10 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=10 THEN TD.TRUCK_QTY ELSE NULL END)) P10, 
                    DECODE(SUM(CASE WHEN TD.CNT=11 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=11 THEN TD.TRUCK_QTY ELSE NULL END)) P11, 
                    DECODE(SUM(CASE WHEN TD.CNT=12 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=12 THEN TD.TRUCK_QTY ELSE NULL END)) P12, 
                    DECODE(SUM(CASE WHEN TD.CNT=13 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=13 THEN TD.TRUCK_QTY ELSE NULL END)) P13, 
                    DECODE(SUM(CASE WHEN TD.CNT=14 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=14 THEN TD.TRUCK_QTY ELSE NULL END)) P14, 
                    DECODE(SUM(CASE WHEN TD.CNT=15 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=15 THEN TD.TRUCK_QTY ELSE NULL END)) P15, 
                    DECODE(SUM(CASE WHEN TD.CNT=16 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=16 THEN TD.TRUCK_QTY ELSE NULL END)) P16, 
                    DECODE(SUM(CASE WHEN TD.CNT=17 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=17 THEN TD.TRUCK_QTY ELSE NULL END)) P17, 
                    DECODE(SUM(CASE WHEN TD.CNT=18 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=18 THEN TD.TRUCK_QTY ELSE NULL END)) P18, 
                    DECODE(SUM(CASE WHEN TD.CNT=19 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=19 THEN TD.TRUCK_QTY ELSE NULL END)) P19,
                    DECODE(SUM(CASE WHEN TD.CNT=20 THEN TD.TRUCK_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=20 THEN TD.TRUCK_QTY ELSE NULL END)) P20
              FROM  (
                    SELECT  TP.DC_NAME, TP.DC_ID,TP.SRC_LOC, TP.TRUCK_QTY, DM.CNT
                      FROM  (
                            -- 구분 : 차량대수 (차량대수는 입고장, 출고장이 같은 것중에 TRUCK_SEQ가 다른 것들을 COUNT함.) 
                            SELECT  TP.TGT_LOC, TP.DC_ID,TP.DC_NAME, TP.SRC_LOC, COUNT(TP.TRUCK_SEQ) TRUCK_QTY
                              FROM  (
                                    SELECT  DISTINCT  T.TGT_LOC, D.DC_ID,D.DC_SHORT_NAME DC_NAME, T.SRC_LOC, T.TRUCK_SEQ
                                      FROM  TRANS_PLAN T, DC_MST D
                                     WHERE  T.VERSION = '$!{version}'
                                       AND  T.SEQ = '$!{seq}'
                                       AND  T.TGT_LOC = D.DC_ID
                                       AND  T.TRANS_DATE BETWEEN TO_DATE('$!{start_day}','YYYY-MM-DD') AND TO_DATE('$!{end_day}','YYYY-MM-DD')
                                      [AND  T.ITEM_ID = '${item_id}']
                                    ) TP
                             GROUP  BY TP.TGT_LOC, TP.DC_ID,TP.DC_NAME, TP.SRC_LOC
                             ORDER  BY TP.DC_ID,TP.TGT_LOC, TP.SRC_LOC
                            ) TP,
                            (
                            -- 출고가 가능한(CDC_FLAG 가 'Y'인 경우) 출고장을 SELECT
                            SELECT  DM.DC_ID, DM.DC_SHORT_NAME DC_NAME, 
                                    SUM(1) OVER (ORDER BY DM.DC_ID) CNT
                              FROM  DC_MST DM
                             WHERE  DM.DC_ID IN(8510, 8620) 
                                OR  DM.CDC_FLAG = 'Y'
                            ) DM
                     WHERE  TP.SRC_LOC = DM.DC_ID
                    ) TD
             GROUP  BY TD.DC_ID,TD.DC_NAME
             ORDER BY TD.DC_ID        	
		#else <!-- 구분이 팔레트수이거나 박스수인 인경우.. -->
			-- 구분 : 팔레트수
            SELECT  TD.DC_NAME, 
                    DECODE(SUM(CASE WHEN TD.CNT=1  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=1  THEN TD.PLT_QTY ELSE NULL END)) P01, 
                    DECODE(SUM(CASE WHEN TD.CNT=2  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=2  THEN TD.PLT_QTY ELSE NULL END)) P02, 
                    DECODE(SUM(CASE WHEN TD.CNT=3  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=3  THEN TD.PLT_QTY ELSE NULL END)) P03, 
                    DECODE(SUM(CASE WHEN TD.CNT=4  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=4  THEN TD.PLT_QTY ELSE NULL END)) P04, 
                    DECODE(SUM(CASE WHEN TD.CNT=5  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=5  THEN TD.PLT_QTY ELSE NULL END)) P05, 
                    DECODE(SUM(CASE WHEN TD.CNT=6  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=6  THEN TD.PLT_QTY ELSE NULL END)) P06, 
                    DECODE(SUM(CASE WHEN TD.CNT=7  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=7  THEN TD.PLT_QTY ELSE NULL END)) P07, 
                    DECODE(SUM(CASE WHEN TD.CNT=8  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=8  THEN TD.PLT_QTY ELSE NULL END)) P08, 
                    DECODE(SUM(CASE WHEN TD.CNT=9  THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=9  THEN TD.PLT_QTY ELSE NULL END)) P09, 
                    DECODE(SUM(CASE WHEN TD.CNT=10 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=10 THEN TD.PLT_QTY ELSE NULL END)) P10, 
                    DECODE(SUM(CASE WHEN TD.CNT=11 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=11 THEN TD.PLT_QTY ELSE NULL END)) P11, 
                    DECODE(SUM(CASE WHEN TD.CNT=12 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=12 THEN TD.PLT_QTY ELSE NULL END)) P12, 
                    DECODE(SUM(CASE WHEN TD.CNT=13 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=13 THEN TD.PLT_QTY ELSE NULL END)) P13, 
                    DECODE(SUM(CASE WHEN TD.CNT=14 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=14 THEN TD.PLT_QTY ELSE NULL END)) P14, 
                    DECODE(SUM(CASE WHEN TD.CNT=15 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=15 THEN TD.PLT_QTY ELSE NULL END)) P15, 
                    DECODE(SUM(CASE WHEN TD.CNT=16 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=16 THEN TD.PLT_QTY ELSE NULL END)) P16, 
                    DECODE(SUM(CASE WHEN TD.CNT=17 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=17 THEN TD.PLT_QTY ELSE NULL END)) P17, 
                    DECODE(SUM(CASE WHEN TD.CNT=18 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=18 THEN TD.PLT_QTY ELSE NULL END)) P18, 
                    DECODE(SUM(CASE WHEN TD.CNT=19 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=19 THEN TD.PLT_QTY ELSE NULL END)) P19,
                    DECODE(SUM(CASE WHEN TD.CNT=20 THEN TD.PLT_QTY ELSE NULL END), 0, NULL, SUM(CASE WHEN TD.CNT=20 THEN TD.PLT_QTY ELSE NULL END)) P20
              FROM  (
                    SELECT  TP.DC_NAME,TP.DC_ID, TP.SRC_LOC, TP.PLT_QTY, DM.CNT
                      FROM  (
                            -- 구분 : 팔레트수 (BASE_STK_PLT + ADD_STK_PLT + PROD_PLT)
                     #if("$!{gubun_sel}" == "plt") <!-- 구분이 박스수 인경우.. -->
                            SELECT  T.TGT_LOC, D.DC_ID,D.DC_SHORT_NAME DC_NAME, T.SRC_LOC, 
                            		SUM((NVL(T.BASE_STK_PLT,0)+NVL(T.ADD_STK_PLT,0)+NVL(T.PROD_PLT,0))) PLT_QTY
                     #elseif("$!{gubun_sel}" == "box") <!-- 구분이 박스수 인경우.. -->
                     		SELECT  T.TGT_LOC, D.DC_ID, D.DC_SHORT_NAME DC_NAME, T.SRC_LOC, 
                     				SUM((NVL(T.BASE_STK_QTY,0)+NVL(T.ADD_STK_QTY,0)+NVL(T.PROD_QTY,0))) PLT_QTY
                     #end
                              FROM  TRANS_PLAN T, DC_MST D
                             WHERE  T.VERSION = '$!{version}'
                               AND  T.SEQ = '$!{seq}'
                               AND  T.TRANS_DATE BETWEEN TO_DATE('$!{start_day}','YYYY-MM-DD') AND TO_DATE('$!{end_day}','YYYY-MM-DD')
                               AND  T.TGT_LOC = D.DC_ID
                              [AND  T.ITEM_ID = '${item_id}']
                             GROUP  BY T.TGT_LOC,D.DC_ID,D.DC_SHORT_NAME, T.SRC_LOC
                             ORDER  BY D.DC_ID, T.TGT_LOC, T.SRC_LOC
                            ) TP,
                            (
                            -- 출고가 가능한(CDC_FLAG 가 'Y'인 경우) 출고장을 SELECT
                            SELECT  DM.DC_ID, DM.DC_SHORT_NAME DC_NAME, 
                                    SUM(1) OVER (ORDER BY DM.DC_ID) CNT
                              FROM  DC_MST DM
                             WHERE  DM.DC_ID IN(8510, 8620) 
                                OR  DM.CDC_FLAG = 'Y'
                            ) DM
                     WHERE  TP.SRC_LOC = DM.DC_ID
                    ) TD
             GROUP  BY TD.DC_ID, TD.DC_NAME
             ORDER BY TD.DC_ID
		#end
			
	</query>
	
	<!-- 보충계획 요약 HEADER WIDTH 구하는 QUERY-->
	<query id="replenishmentSummary_list_header_width" paging="false">
		
		-- Header WIDTH
		SELECT  NVL(SUM(CASE WHEN DM.CNT=1  THEN 70 ELSE 0 END),0) N01, 
		        NVL(SUM(CASE WHEN DM.CNT=2  THEN 70 ELSE 0 END),0) N02, 
		        NVL(SUM(CASE WHEN DM.CNT=3  THEN 70 ELSE 0 END),0) N03, 
		        NVL(SUM(CASE WHEN DM.CNT=4  THEN 70 ELSE 0 END),0) N04, 
		        NVL(SUM(CASE WHEN DM.CNT=5  THEN 70 ELSE 0 END),0) N05, 
		        NVL(SUM(CASE WHEN DM.CNT=6  THEN 70 ELSE 0 END),0) N06, 
		        NVL(SUM(CASE WHEN DM.CNT=7  THEN 70 ELSE 0 END),0) N07, 
		        NVL(SUM(CASE WHEN DM.CNT=8  THEN 70 ELSE 0 END),0) N08, 
		        NVL(SUM(CASE WHEN DM.CNT=9  THEN 70 ELSE 0 END),0) N09, 
		        NVL(SUM(CASE WHEN DM.CNT=10  THEN 70 ELSE 0 END),0) N10, 
		        NVL(SUM(CASE WHEN DM.CNT=11  THEN 70 ELSE 0 END),0) N11, 
		        NVL(SUM(CASE WHEN DM.CNT=12  THEN 70 ELSE 0 END),0) N12, 
		        NVL(SUM(CASE WHEN DM.CNT=13  THEN 70 ELSE 0 END),0) N13, 
		        NVL(SUM(CASE WHEN DM.CNT=14  THEN 70 ELSE 0 END),0) N14, 
		        NVL(SUM(CASE WHEN DM.CNT=15  THEN 70 ELSE 0 END),0) N15, 
		        NVL(SUM(CASE WHEN DM.CNT=16  THEN 70 ELSE 0 END),0) N16, 
		        NVL(SUM(CASE WHEN DM.CNT=17  THEN 70 ELSE 0 END),0) N17, 
		        NVL(SUM(CASE WHEN DM.CNT=18  THEN 70 ELSE 0 END),0) N18, 
		        NVL(SUM(CASE WHEN DM.CNT=19  THEN 70 ELSE 0 END),0) N19,
		        NVL(SUM(CASE WHEN DM.CNT=20  THEN 70 ELSE 0 END),0) N20
		  FROM  (
		        SELECT  DM.DC_ID, DM.DC_NAME, DM.CNT
				  FROM  (               
				        SELECT  DM.DC_ID, DM.DC_NAME, 
				                SUM(1) OVER (ORDER BY DM.DC_ID) CNT
				          FROM  DC_MST DM
				         WHERE  DM.DC_ID IN(8510, 8620)
				            OR  DM.CDC_FLAG = 'Y'
				        ) DM,
				        (
				        SELECT  DISTINCT T.SRC_LOC
				          FROM  TRANS_PLAN T
				        #if("$!{version}" == "" )
				                ,(
			                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
			                      FROM  PLAN_VERSION_LOG VL, 
			                            (SELECT  MAX(VL.VERSION) VERSION
			                               FROM  PLAN_VERSION_LOG VL
			                              WHERE  VL.PERIOD_TYPE = 'DAILY'
			                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
			                     WHERE  VL.VERSION = MV.VERSION
			                       AND  VL.PERIOD_TYPE = 'DAILY'
			                       AND  VL.CAT_ID = 'RP'
			                     GROUP  BY VL.VERSION     
			                    ) MV
                         WHERE  T.VERSION = MV.VERSION
                           AND  T.SEQ = MV.SEQ
                           AND  T.TRANS_DATE BETWEEN TO_CHAR(SYSDATE,'YYYY-MM-DD') AND TO_CHAR(SYSDATE,'YYYY-MM-DD')
                        #else   
				         WHERE  T.VERSION = '$!{version}'
				           AND  T.SEQ = '$!{seq}'
				           AND  T.TRANS_DATE BETWEEN TO_DATE('$!{start_day}','YYYY-MM-DD') AND TO_DATE('$!{end_day}','YYYY-MM-DD')
				           [AND  T.ITEM_ID = '${item_id}']
				        #end
				        ) TP
				 WHERE DM.DC_ID = TP.SRC_LOC
		        ) DM
        
    </query>
	
	<!--
	======================================================================
		4. 주간 수송계획
	======================================================================
	-->
	
	<!-- 주간 수송계획  -->
	<!-- 1. TRANS_PLAN TABLE에 데이터가 있는지 조회 -->
	<query id="rp_01050_weeklyReplenishmentExec_list">
        <!-- 화면이 처음으로 로드되는 경우, MAX 버전과 SEQ, 현재 날짜가 자동으로 입력되어 조회됨. -->
		#if( "$!{version}" == "" )
			SELECT  TR.TRANS_DATE, TR.SRC_NAME, TR.TGT_NAME, TR.ITEM_ID, TR.ITEM_NAME,
			        SUM(TR.PLT) PLT, SUM(TR.BOX) BOX, TR.SRC_LOC, TR.TGT_LOC
			  FROM  (
			        SELECT  TO_CHAR(TP.TRANS_DATE,'YYYYMMDD') TRANS_DATE, TP.SRC_LOC, 
			                DM1.DC_NAME SRC_NAME, TP.TGT_LOC, DM2.DC_NAME TGT_NAME, 
			                TP.ITEM_ID, IM.ITEM_NAME,
			                (NVL(TP.BASE_STK_PLT,0) + NVL(TP.ADD_STK_PLT,0) + NVL(TP.PROD_PLT,0)) PLT,
			                (NVL(TP.BASE_STK_QTY,0) + NVL(TP.ADD_STK_QTY,0) + NVL(TP.PROD_QTY,0)) BOX
			          FROM  TRANS_PLAN TP, DC_MST DM1, DC_MST DM2, ITEM_MST IM,
					        (
		                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
		                      FROM  PLAN_VERSION_LOG VL, 
		                            (SELECT  MAX(VL.VERSION) VERSION
		                               FROM  PLAN_VERSION_LOG VL
		                              WHERE  VL.PERIOD_TYPE = 'WEEKLY'
		                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
		                     WHERE  VL.VERSION = MV.VERSION
		                       AND  VL.PERIOD_TYPE = 'WEEKLY'
		                       AND  VL.CAT_ID = 'RP'
		                     GROUP  BY VL.VERSION     
		                    ) MV
			         WHERE  TP.VERSION = MV.VERSION
			           AND  TP.SEQ = MV.SEQ
			           AND  TP.TRANS_DATE BETWEEN TO_CHAR(SYSDATE,'YYYY-MM-DD') AND TO_CHAR(SYSDATE+6,'YYYY-MM-DD')
			           AND  TP.SRC_LOC = DM1.DC_ID
			           AND  TP.TGT_LOC = DM2.DC_ID
			           AND  TP.ITEM_ID = IM.ITEM_ID
			        ) TR
			 GROUP  BY TR.TRANS_DATE, TR.SRC_NAME, TR.TGT_NAME, TR.ITEM_ID, TR.ITEM_NAME, TR.SRC_LOC, TR.TGT_LOC
			 ORDER  BY TR.TRANS_DATE, TR.SRC_LOC, TR.TGT_LOC, TR.ITEM_ID
		#else
			SELECT  TR.TRANS_DATE, TR.SRC_NAME, TR.TGT_NAME, TR.ITEM_ID, TR.ITEM_NAME,
			        SUM(TR.PLT) PLT, SUM(TR.BOX) BOX, TR.SRC_LOC, TR.TGT_LOC
			  FROM  (
			        SELECT  TO_CHAR(TP.TRANS_DATE,'YYYYMMDD') TRANS_DATE, TP.SRC_LOC, 
			                DM1.DC_NAME SRC_NAME, TP.TGT_LOC, DM2.DC_NAME TGT_NAME, 
			                TP.ITEM_ID, IM.ITEM_NAME,
			                (NVL(TP.BASE_STK_PLT,0) + NVL(TP.ADD_STK_PLT,0) + NVL(TP.PROD_PLT,0)) PLT,
			                (NVL(TP.BASE_STK_QTY,0) + NVL(TP.ADD_STK_QTY,0) + NVL(TP.PROD_QTY,0)) BOX
			          FROM  TRANS_PLAN TP, DC_MST DM1, DC_MST DM2, ITEM_MST IM
			         WHERE  TP.VERSION = '$!{version}'
			           AND  TP.SEQ = '$!{seq}'
			           AND  TP.TRANS_DATE BETWEEN TO_DATE('$!{from_date}','YYYY-MM-DD') AND TO_DATE('$!{to_date}','YYYY-MM-DD')
			           AND  TP.SRC_LOC = DM1.DC_ID
			           AND  TP.TGT_LOC = DM2.DC_ID
			           AND  TP.ITEM_ID = IM.ITEM_ID
			        ) TR
			 GROUP  BY TR.TRANS_DATE, TR.SRC_NAME, TR.TGT_NAME, TR.ITEM_ID, TR.ITEM_NAME, TR.SRC_LOC, TR.TGT_LOC
			 ORDER  BY TR.TRANS_DATE, TR.SRC_LOC, TR.TGT_LOC, TR.ITEM_ID
		#end
			
	</query>
	
	<!-- 2. TRANS_PLAN_WEEKLY TABLE에 일치하는 VERSION이 있는 경우. DELETE (확정 버튼 클릭시 호출) -->
	<query id="rp_01050_weeklyReplenishmentExec_list_confirm_01" fix="version seq">
			
			DELETE 	TRANS_PLAN_WEEKLY TP
 			 WHERE  TP.VERSION = '$!{version}'
 			   AND  TP.SEQ = '$!{seq}'	
			
	</query>
	
	<!-- 3. TRANS_PLAN TABLE에 일치하는 VERSION, SEQ의 데이타를  TRANS_PLAN_WEEKLY TABLE에 INSERT (확정 버튼 클릭시 호출) -->
	<query id="rp_01050_weeklyReplenishmentExec_list_confirm_02" fix="version seq _user_id">
	
		INSERT  INTO  TRANS_PLAN_WEEKLY
		        (VERSION, SEQ, SRC_LOC, ITEM_ID, TGT_LOC, TRANS_DATE, QTY, QTY_UOM, MADE_TYPE, MADE_DTTM, MADE_BY)
		SELECT  TP.VERSION, 
		        TP.SEQ, 
		        TP.SRC_LOC, 
		        TP.ITEM_ID, 
		        TP.TGT_LOC, 
		        TP.TRANS_DATE,
		        SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY) QTY, 
		        'BOX' QTY_UOM, 
		        'AD', 
		        SYSDATE, 
		        '$!{_user_id}' 
		  FROM  TRANS_PLAN TP
		 WHERE  TP.VERSION = '$!{version}'
		   AND  TP.SEQ     = '$!{seq}'
		 GROUP  BY TP.VERSION, TP.SEQ, TP.SRC_LOC, TP.ITEM_ID, TP.TGT_LOC, TP.TRANS_DATE
		
	</query>
	
	<!-- 4. PROCEDURE 호출 (생성 버튼 클릭시 호출) -->
	<query id="rp_01050_weeklyReplenishmentExec_list_create">
	
		CALL SP_RP_81_TRANS_PLAN_WEEKLY('WEEKLY',SYSDATE,1,1,'NA',SYSDATE)
		
	</query>
	
	<!--
	======================================================================
		5.월간계획 조회
	======================================================================
	-->
	
	<!-- 월간계획 조회 : 조회  -->
	<query id="rp_01060_monthlyReplenishment_list">
        <!-- 화면이 처음으로 로드되는 경우, MAX 버전과 SEQ, 현재 날짜가 자동으로 입력되어 조회됨. -->
		#if( "$!{version}" == "" )
			SELECT  CD.CD_NAME, TA.ITEM_ID, IM.ITEM_NAME, DM.DC_NAME, 
			        TA.QTY_1, (TA.QTY_1*100)/DECODE(TB.TOT_1,0,1,TB.TOT_1) PER_1, 
			        TA.QTY_2, (TA.QTY_2*100)/DECODE(TB.TOT_2,0,1,TB.TOT_2) PER_2, 
			        TA.QTY_3, (TA.QTY_3*100)/DECODE(TB.TOT_3,0,1,TB.TOT_3) PER_3
			  FROM  (
			        SELECT  TP.ITEM_ID, TP.SRC_LOC, 
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                          TO_CHAR(SYSDATE,'YYYY-MM'), 
			                          (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            QTY_1,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                           TO_CHAR(ADD_MONTHS(SYSDATE,1),'YYYY-MM'), 
			                          (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            QTY_2,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                           TO_CHAR(ADD_MONTHS(SYSDATE,2),'YYYY-MM'), 
			                          (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            QTY_3
			          FROM  TRANS_PLAN TP,
			                (
		                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
		                      FROM  PLAN_VERSION_LOG VL, 
		                            (SELECT  MAX(VL.VERSION) VERSION
		                               FROM  PLAN_VERSION_LOG VL
		                              WHERE  VL.PERIOD_TYPE = 'MONTHLY'
		                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
		                     WHERE  VL.VERSION = MV.VERSION
		                       AND  VL.PERIOD_TYPE = 'MONTHLY'
		                       AND  VL.CAT_ID = 'RP'
		                     GROUP  BY VL.VERSION     
		                    ) MV
			         WHERE  TP.VERSION = MV.VERSION
			           AND  TP.SEQ = MV.SEQ
			           AND  TO_CHAR(TP.TRANS_DATE,'YYYY-MM') BETWEEN TO_CHAR(SYSDATE,'YYYY-MM') 
			                                                 AND TO_CHAR(ADD_MONTHS(SYSDATE,2),'YYYY-MM')
			         GROUP  BY TP.ITEM_ID, TP.SRC_LOC
			        ) TA,
			        (
			        -- 해당 입고장의 아이템 전체 수량
			        SELECT  TP.ITEM_ID, 
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                                   TO_CHAR(SYSDATE,'YYYY-MM'), 
			                                  (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            TOT_1,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                                   TO_CHAR(ADD_MONTHS(SYSDATE,1),'YYYY-MM'), 
			                                  (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            TOT_2,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                                   TO_CHAR(ADD_MONTHS(SYSDATE,2),'YYYY-MM'), 
			                                  (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            TOT_3
			          FROM  TRANS_PLAN TP,
			                (
		                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
		                      FROM  PLAN_VERSION_LOG VL, 
		                            (SELECT  MAX(VL.VERSION) VERSION
		                               FROM  PLAN_VERSION_LOG VL
		                              WHERE  VL.PERIOD_TYPE = 'MONTHLY'
		                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
		                     WHERE  VL.VERSION = MV.VERSION
		                       AND  VL.PERIOD_TYPE = 'MONTHLY'
		                       AND  VL.CAT_ID = 'RP'
		                     GROUP  BY VL.VERSION     
		                    ) MV
			         WHERE  TP.VERSION = MV.VERSION
			           AND  TP.SEQ = MV.SEQ
			           AND  TO_CHAR(TP.TRANS_DATE,'YYYY-MM') BETWEEN TO_CHAR(SYSDATE,'YYYY-MM') 
			                                                 AND TO_CHAR(ADD_MONTHS(SYSDATE,2),'YYYY-MM')
			         GROUP  BY TP.ITEM_ID
			        ) TB,
			        (
			        SELECT  CM.CD, CM.CD_NAME
			          FROM  CODE_MST CM
			         WHERE  CM.CD_GRP = 'DIVISION'
			        ) CD,
			        ITEM_MST IM, DC_MST DM
			 WHERE  TA.ITEM_ID = TB.ITEM_ID
			   AND  TA.ITEM_ID = IM.ITEM_ID
			   AND  TA.SRC_LOC = DM.DC_ID
			   AND  IM.DIVISION = CD.CD
			 ORDER  BY CD.CD, TA.ITEM_ID, TA.SRC_LOC
		#else
			-- 1. 해당 입고장의 출고장 별 아이템 수량과 비율( 출고장별 아이템수량/아이텝 별 전체 수량 )을 구하는 부분 
			SELECT  CD.CD_NAME, TA.ITEM_ID, IM.ITEM_NAME, DM.DC_NAME, 
			        TA.QTY_1, (TA.QTY_1*100)/DECODE(TB.TOT_1,0,1,TB.TOT_1) PER_1, 
			        TA.QTY_2, (TA.QTY_2*100)/DECODE(TB.TOT_2,0,1,TB.TOT_2) PER_2, 
			        TA.QTY_3, (TA.QTY_3*100)/DECODE(TB.TOT_3,0,1,TB.TOT_3) PER_3
			  FROM  (
			  		-- 2. 해당 입고장의 출고장 별 아이템 수량을 구하는 부분
			        SELECT  TP.ITEM_ID, TP.SRC_LOC, 
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                          '$!{trans_month}', 
			                          (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            QTY_1,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                           TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),1),'YYYY-MM'), 
			                          (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            QTY_2,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                           TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),2),'YYYY-MM'), 
			                          (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            QTY_3
			          FROM  TRANS_PLAN TP
			         WHERE  TP.VERSION = '$!{version}'
			           AND  TP.SEQ = '$!{seq}'
			           [AND  TP.TGT_LOC = '${tgt_loc_sel}']
			           AND  TO_CHAR(TP.TRANS_DATE,'YYYY-MM') BETWEEN '$!{trans_month}' 
			                                                 AND TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),2),'YYYY-MM')
			         GROUP  BY TP.ITEM_ID, TP.SRC_LOC
			        ) TA,
			        (
			        -- 3. 해당 입고장의 아이템 전체 수량
			        SELECT  TP.ITEM_ID, 
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                                  '$!{trans_month}', 
			                                  (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            TOT_1,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                                   TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),1),'YYYY-MM'), 
			                                  (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            TOT_2,
			                SUM(DECODE(TO_CHAR(TP.TRANS_DATE,'YYYY-MM'), 
			                                   TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),2),'YYYY-MM'), 
			                                  (TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY), 0))            TOT_3
			          FROM  TRANS_PLAN TP
			         WHERE  TP.VERSION = '$!{version}'
			           AND  TP.SEQ = '$!{seq}'
			           [AND  TP.TGT_LOC = '${tgt_loc_sel}']
			           AND  TO_CHAR(TP.TRANS_DATE,'YYYY-MM') BETWEEN '$!{trans_month}' 
			                                                 AND TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),2),'YYYY-MM')
			         GROUP  BY TP.ITEM_ID
			        ) TB,
			        (
			        SELECT  CM.CD, CM.CD_NAME
			          FROM  CODE_MST CM
			         WHERE  CM.CD_GRP = 'DIVISION'
			        ) CD,
			        ITEM_MST IM, DC_MST DM
			 WHERE  TA.ITEM_ID = TB.ITEM_ID
			   AND  TA.ITEM_ID = IM.ITEM_ID
			   AND  TA.SRC_LOC = DM.DC_ID
			   AND  IM.DIVISION = CD.CD
			 ORDER  BY CD.CD, TA.ITEM_ID, TA.SRC_LOC
		#end
			
	</query>
	
	<!-- 월간계획 조회 : HEADER 생성  -->
	<query id="monthlyReplenishment_list_header">
	    <!-- Version 정보가 없는 경우.. -->
		#if( "$!{version}" == "" )
			SELECT  TO_CHAR(SYSDATE,'MM') M01,
			        TO_CHAR(ADD_MONTHS(SYSDATE,1),'MM') M02,
			        TO_CHAR(ADD_MONTHS(SYSDATE,2),'MM') M03 
			  FROM  DUAL
	    #else
	    	SELECT  TO_CHAR(TO_DATE('$!{trans_month}','YYYY-MM'),'MM') M01,
			        TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),1),'MM') M02,
			        TO_CHAR(ADD_MONTHS(TO_DATE('$!{trans_month}','YYYY-MM'),2),'MM') M03 
			  FROM  DUAL	    
	    #end
	
	</query>
	
	<!--
	======================================================================
		6. 주문가능량 정보
	======================================================================
	-->
	
	<!-- 주문가능량 정보 -->
	<query id="rp_01080_orderingPossibleAmount_list" paging="true">
		
		#if( "$!{version}" == "" )
		    -- 주문가능량 정보 : VERSION 정보와 날짜 정보가 PARAMETER로 넘어온 경우.
		    SELECT  NVL(SP.LOC_ID,VN.LOC_ID) LOC_ID, NVL(SP.DC_NAME,VN.DC_NAME) DC_NAME, 
	                NVL(SP.ITEM_ID,VN.ITEM_ID) ITEM_ID, NVL(SP.ITEM_NAME,VN.ITEM_NAME) ITEM_NAME, 
	                NVL(SP.EXPECT_QTY,0) - NVL(VN.NOW_QTY,0) EXPECT_QTY,   -- 예상 재고량
	                NVL(VN.NOW_QTY,0) NOW_QTY,      -- 현 주문량
	                NVL(SP.EXPECT_QTY,0) POSSIBLE_QTY -- 주문 가능량
	          FROM  (
	                SELECT  SP.LOC_ID, DM.DC_NAME, SP.ITEM_ID, IM.ITEM_NAME, SUM(SP.STOCK_QTY) EXPECT_QTY
	                  FROM  STOCK_PLAN SP, DC_MST DM,
	                        (
	                         SELECT IT.ITEM_ID, IT.ITEM_NAME
	                           FROM ITEM_MST IT
	                          WHERE IT.CROSDOCK_FLAG != 'Y' -- CROSS DOCKING 제품을 제외한 모든 제품
	                         ) IM
                            , ( SELECT MAX(VERSION) VERSION FROM PLAN_VERSION_LOG WHERE PERIOD_TYPE = 'DAILY' AND CAT_ID = 'RP' ) MX
	                 WHERE  TO_CHAR(SP.STOCK_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE-1, 'YYYYMMDD') -- 기초재고는 주문일자 하루전날
	                   AND  SP.VERSION = MX.VERSION
	                   AND  SP.SEQ = 1          
	                   AND  SP.LOC_ID = DM.DC_ID
	                   AND  SP.ITEM_ID = IM.ITEM_ID
	                 GROUP  BY SP.LOC_ID, DM.DC_NAME, IM.ITEM_NAME, SP.ITEM_ID
	                ) SP
	                , (
	                SELECT  VN.ITEM_ID, IM.ITEM_NAME, DM.DC_NAME, VN.LOC_ID, SUM(VN.QTY) NOW_QTY
	                  FROM  VW_NFOS_ORDER VN, DC_MST DM,
	                        (
	                        SELECT IT.ITEM_ID, IT.ITEM_NAME
	                          FROM ITEM_MST IT
	                         WHERE IT.CROSDOCK_FLAG != 'Y' -- CROSS DOCKING 제품을 제외한 모든 제품
	                        ) IM
	                 WHERE  TO_CHAR(VN.ORD_DATE, 'YYYYMMDD') = TO_CHAR(SYSDATE, 'YYYYMMDD') -- 주문일자
	                   AND  VN.LOC_ID = DM.DC_ID
	                   AND  VN.ITEM_ID = IM.ITEM_ID                   
	                 GROUP  BY VN.ITEM_ID, IM.ITEM_NAME, DM.DC_NAME, VN.LOC_ID
	               ) VN
	         WHERE SP.LOC_ID  = VN.LOC_ID(+)
	               AND SP.ITEM_ID = VN.ITEM_ID(+)
	         ORDER BY NVL(SP.LOC_ID,VN.LOC_ID), NVL(SP.ITEM_ID,VN.ITEM_ID)
	    #else
		    -- 주문가능량 정보 : VERSION 정보와 날짜 정보가 PARAMETER로 넘어온 경우.
		    SELECT  NVL(SP.LOC_ID,VN.LOC_ID) LOC_ID, NVL(SP.DC_NAME,VN.DC_NAME) DC_NAME, 
	                NVL(SP.ITEM_ID,VN.ITEM_ID) ITEM_ID, NVL(SP.ITEM_NAME,VN.ITEM_NAME) ITEM_NAME, 
	                NVL(SP.EXPECT_QTY,0) - NVL(VN.NOW_QTY,0) EXPECT_QTY,   -- 예상 재고량
	                NVL(VN.NOW_QTY,0) NOW_QTY,      -- 현 주문량
	                NVL(SP.EXPECT_QTY,0) POSSIBLE_QTY -- 주문 가능량
	          FROM  (
	                SELECT  SP.LOC_ID, DM.DC_NAME, SP.ITEM_ID, IM.ITEM_NAME, SUM(SP.STOCK_QTY) EXPECT_QTY
	                  FROM  STOCK_PLAN SP, DC_MST DM,
	                        (
	                         SELECT IT.ITEM_ID, IT.ITEM_NAME
	                           FROM ITEM_MST IT
	                          WHERE IT.CROSDOCK_FLAG != 'Y' -- CROSS DOCKING 제품을 제외한 모든 제품
	                         ) IM
	                 WHERE  SP.STOCK_DATE = TO_DATE('$!{ord_date}','YYYY-MM-DD')-1 -- 기초재고는 주문일자 하루전날
	                   AND  SP.VERSION = '$!{version}'
	                   AND  SP.SEQ = '$!{seq}'
	                   [AND  SP.LOC_ID = '${tgt_loc}']   -- 입고장                
	                   AND  SP.LOC_ID = DM.DC_ID
	                   AND  SP.ITEM_ID = IM.ITEM_ID
	                 GROUP  BY SP.LOC_ID, DM.DC_NAME, IM.ITEM_NAME, SP.ITEM_ID
	                ) SP
	                , (
	                SELECT  VN.ITEM_ID, IM.ITEM_NAME, DM.DC_NAME, VN.LOC_ID, SUM(VN.QTY) NOW_QTY
	                  FROM  VW_NFOS_ORDER VN, DC_MST DM,
	                        (
	                        SELECT IT.ITEM_ID, IT.ITEM_NAME
	                          FROM ITEM_MST IT
	                         WHERE IT.CROSDOCK_FLAG != 'Y' -- CROSS DOCKING 제품을 제외한 모든 제품
	                        ) IM
	                 WHERE  VN.ORD_DATE = TO_DATE('$!{ord_date}','YYYY-MM-DD') -- 주문일자 
	                   [AND VN.LOC_ID = '${tgt_loc}']   -- 입고장
	                   AND  VN.LOC_ID = DM.DC_ID
	                   AND  VN.ITEM_ID = IM.ITEM_ID                   
	                 GROUP  BY VN.ITEM_ID, IM.ITEM_NAME, DM.DC_NAME, VN.LOC_ID
	               ) VN
	         WHERE SP.LOC_ID  = VN.LOC_ID(+)
	               AND SP.ITEM_ID = VN.ITEM_ID(+)
	         ORDER BY NVL(SP.LOC_ID,VN.LOC_ID), NVL(SP.ITEM_ID,VN.ITEM_ID)
        #end
			
	</query>
	
	<!--
	======================================================================
		7. 수송 진행 현황
	======================================================================
	-->
	
	<!-- 1. 수정 진행 현황  : 상단 그리드 조회 -->
	<query id="rp_01100_transProgress_list">
		-- 1. 수송계획의 출고사업장 중심으로 수송현황을 조회하는 쿼리
		SELECT   TP.SRC_LOC,    MAX(DM.DC_NAME)    DC_NAME,
		         ROUND(SUM(TP_PLT),2),   SUM(TP_QTY),    SUM(TP_ODR_CNT),
		         ROUND(SUM(ENTR_PLT),2), SUM(ENTR_QTY),  SUM(ENTR_ODR_CNT),
		         ROUND(SUM(EXP_PLT),2),  SUM(EXP_QTY),   SUM(EXP_ODR_CNT),
		         ROUND(SUM(DEL_PLT),2),  SUM(DEL_QTY),   SUM(DEL_ODR_CNT)
		FROM     (
		            /* 수송계획 수량 */
		            SELECT  TP.SRC_LOC,                             -- 출고장 
		                    SUM(TP.PLT) TP_PLT,                     -- 수송계획 PL 수량
		                    SUM(TP.TRAN_PLAN_QTY) TP_QTY,           -- 수송계획 BOX 수량
		                    COUNT(DISTINCT TP.BRAND_NO) TP_ODR_CNT, -- 수송계획 전표 수량       
		                    0 ENTR_PLT,
		                    0 ENTR_QTY,
		                    0 ENTR_ODR_CNT,
		                    0 EXP_PLT,
		                    0 EXP_QTY,
		                    0 EXP_ODR_CNT,
		                    0 DEL_PLT,
		                    0 DEL_QTY,
		                    0 DEL_ODR_CNT
		            FROM    (      
		                    SELECT  TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')    BRAND_DATE,
		                            IT.SRC_LOC, IT.TGT_LOC, IT.ITEM_ID, IT.BRAND_NO, IT.BRAND_LINE_NO,
		                            IT.QTY/(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100))) PLT,
		                            IT.QTY    TRAN_PLAN_QTY
		                    FROM    IF_TRANS_PLAN IT, ITEM_MST IM		                 
		                    WHERE   IT.ITEM_ID        =   IM.ITEM_ID
		                 #if("$!{trans_start}" == "")
		                    AND     IT.TRANS_DATE     BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                                              AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')
		                 #else
		                 	AND     IT.TRANS_DATE     BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                              AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                 #end
		                    [AND    IT.SRC_LOC       =          '${selected_src_loc}']
				            [AND    IT.PLAN_TYPE     =          '${selected_plan_type}']
		                    AND     IT.BRAND_NO       IS    NOT    NULL
		                    AND     IT.BRAND_LINE_NO  IS    NOT    NULL
		                    ) TP
		            GROUP   BY TP.SRC_LOC
		            UNION   ALL 
		            /* 수송실적 수량 (입고 실적) */
		            SELECT  TA.SRC_LOC,
		                    0 TP_PLT,  
		                    0 TP_QTY,     
		                    0 TP_ODR_CNT,        
		                    SUM(TA.ENTR_PLT) ENTR_PLT,                  -- 수송실적 PL 수량
		                    SUM(TA.ENTR_QTY) ENTR_QTY,                  -- 수송실적 BOX 수량
		                    COUNT(DISTINCT TA.BRAND_NO) ENTR_ODR_CNT,   -- 수송실적 전표 수량
		                    0 EXP_PLT,
		                    0 EXP_QTY,
		                    0 EXP_ODR_CNT,
		                    0 DEL_PLT,
		                    0 DEL_QTY,
		                    0 DEL_ODR_CNT
		            FROM    (
		                    SELECT  OT.BRAND_DATE,OT.SRC_LOC,OT.TGT_LOC,OT.ITEM_ID,
		                            OT.BRAND_NO,OT.BRAND_LINE_NO,0    TRAN_PLAN_QTY,0    DELV_QTY,ENTR_DATE,
		                            TRUNC(DECODE(OT.INPUT_UNIT_UOM,'BOX',OT.ENTR_QTY,OT.ENTR_QTY/CU.BASE_QTY),0) 
		                            /(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100))) ENTR_PLT,
		                            TRUNC(DECODE(OT.INPUT_UNIT_UOM,'BOX',OT.ENTR_QTY,OT.ENTR_QTY/CU.BASE_QTY),0)    ENTR_QTY
		                    FROM    (
		                            SELECT  EO.BRAND_DATE,
		                                    TO_CHAR(MAX(EO.SEND_DATE),'YYYYMMDD')    ENTR_DATE,
		                                    SUBSTR(MAX(EO.FACT_CD),5,4)    SRC_LOC,
		                                    SUBSTR(MAX(EO.CENTER_CD),5,4)    TGT_LOC,
		                                    MAX(EO.ITEM_CD)  ITEM_ID,   MAX(EO.INPUT_UNIT_UOM)    INPUT_UNIT_UOM,
		                                    MAX(EO.CONFIRM_QTY)    ENTR_QTY,
		                                    EO.BRAND_NO,    EO.BRAND_LINE_NO
		                            FROM    EDISINORDER EO
		                            WHERE   EO.ERROR_DIV    =    '3'
		                            AND     EO.INOUT_CD     LIKE    'E20'
		                         #if("$!{trans_start}" == "")
		                            AND     EO.BRAND_DATE   BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                                                    AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')
		                         #else
		                         	AND     EO.BRAND_DATE   BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                                    AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                         #end
		                            GROUP   BY    EO.BRAND_DATE, EO.BRAND_NO, EO.BRAND_LINE_NO
		                            HAVING    MAX(EO.CONFIRM_QTY)    &lt;&gt;    0
		                            )    OT,
		                            CONV_UOM    CU, ITEM_MST IM
		                    WHERE   OT.ITEM_ID        =    CU.ITEM_ID
		                    AND     CU.CONV_UOM       =    'BOX'
		                    AND     OT.ITEM_ID        =    IM.ITEM_ID
		                    ) TA
		            GROUP   BY TA.SRC_LOC
		            UNION   ALL
		            /*  수송예정 수량 */
		            SELECT  EP.SRC_LOC,
		                    0 TP_PLT,  
		                    0 TP_QTY,     
		                    0 TP_ODR_CNT,        
		                    0 ENTR_PLT,
		                    0 ENTR_QTY,
		                    0 ENTR_ODR_CNT,
		                    SUM(EP.EXP_PLT) EXP_PLT,                    -- 수송예정 PL 수량
		                    SUM(EP.EXP_QTY) EXP_QTY,                    -- 수송예정 BOX 수량
		                    COUNT(DISTINCT EP.BRAND_NO) EXP_ODR_CNT,    -- 수송예정 전표 수량
		                    0 DEL_PLT,
		                    0 DEL_QTY,
		                    0 DEL_ODR_CNT
		            FROM     -- IF 수송 계획 - 입고 완료 실적 = 수송 예정
		                    (-- 수송 계획
		                    SELECT  TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')    BRAND_DATE,
		                            IT.SRC_LOC, IT.TGT_LOC, IT.ITEM_ID, IT.BRAND_NO, IT.BRAND_LINE_NO,
		                            IT.QTY/(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100))) EXP_PLT,
		                            IT.QTY    EXP_QTY
		                    FROM    IF_TRANS_PLAN IT, ITEM_MST IM		                 
		                    WHERE   IT.ITEM_ID            =     IM.ITEM_ID
		                 #if("$!{trans_start}" == "")
		                    AND     IT.TRANS_DATE      BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')  
		                                               AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                 #else
		                 	AND     IT.TRANS_DATE      BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                               AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                 #end
		                    [AND    IT.SRC_LOC       =          '${selected_src_loc}']
				            [AND    IT.PLAN_TYPE     =          '${selected_plan_type}']
		                    AND     IT.BRAND_NO        IS     NOT    NULL
		                    AND     IT.BRAND_LINE_NO   IS     NOT    NULL
		                    AND     NOT EXISTS(-- 출고 완료 실적
		                                /*SELECT    DISTINCT EO.BRAND_DATE,
		                                        EO.BRAND_NO
		                                FROM    EDISOUTORDER    EO
		                                WHERE   EO.ERROR_DIV        =    '3'
		                                AND     EO.BRAND_DATE   =   TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')
		                                AND     EO.BRAND_NO     =   IT.BRAND_NO
		                                AND     EO.INOUT_CD        LIKE    'ZM%'
		                                AND     EO.BRAND_DATE    =    TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                GROUP   BY    EO.BRAND_DATE, EO.BRAND_NO, EO.BRAND_LINE_NO
		                                HAVING  MAX(EO.CONFIRM_QTY)    &lt;&gt;    0*/
		                                SELECT	DISTINCT EO.BRAND_DATE,                                        
		                                        EO.BRAND_NO
		                                FROM	EDISINORDER	EO
		                                WHERE	EO.ERROR_DIV	=	'3'
		                                AND		EO.INOUT_CD	LIKE	'E20'
		                                AND     EO.BRAND_DATE   =   TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')
		                                AND     EO.BRAND_NO     =   IT.BRAND_NO
		                             #if("$!{trans_start}" == "")
		                                AND		EO.BRAND_DATE		BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                                                            AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')
		                             #else
		                             	AND		EO.BRAND_DATE		BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                                            AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                             #end
		                            )
		                    ) EP
		            GROUP   BY EP.SRC_LOC
		            UNION   ALL                                     
		            /* 수송미출고 수량 (수송계획과 출고실적의 수량이 다른 경우) */
		            SELECT  DL.SRC_LOC,
		                    0 TP_PLT,  
		                    0 TP_QTY,     
		                    0 TP_ODR_CNT,        
		                    0 ENTR_PLT,
		                    0 ENTR_QTY,
		                    0 ENTR_ODR_CNT,
		                    0 EXP_PLT,
		                    0 EXP_QTY,
		                    0 EXP_ODR_CNT,
		                    SUM(DL.DEL_PLT) DEL_PLT,
		                    SUM(DL.DEL_QTY) DEL_QTY,
		                    COUNT(DISTINCT DL.BRAND_NO) DEL_ODR_CNT
		            FROM     -- IF 수송 계획 - 출고 완료 실적 = 수송 예정
		                    (-- 수송 계획
		                    SELECT  TP.BRAND_DATE, TP.SRC_LOC, TP.TGT_LOC, 
		                            TP.ITEM_ID, TP.BRAND_NO, TP.BRAND_LINE_NO,
		                            (TP.DEL_QTY - OT.DELV_QTY)/(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100))) DEL_PLT,
		                            (TP.DEL_QTY - OT.DELV_QTY) DEL_QTY
		                    FROM    (-- 수송 계획
		                            SELECT    TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')    BRAND_DATE,
		                                    IT.SRC_LOC, IT.TGT_LOC, IT.ITEM_ID, IT.BRAND_NO, IT.BRAND_LINE_NO,
		                                    IT.QTY    DEL_QTY
		                            FROM    IF_TRANS_PLAN IT
		                          #if("$!{trans_start}" == "")		                            
		                            WHERE   IT.TRANS_DATE      BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')  
		                                                       AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                          #else		                          	
		                          	WHERE     IT.TRANS_DATE      BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                                       AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                          #end
		                            [AND    IT.SRC_LOC       =          '${selected_src_loc}']
				                    [AND    IT.PLAN_TYPE     =          '${selected_plan_type}']
		                            AND     IT.BRAND_NO        IS    NOT    NULL
		                            AND     IT.BRAND_LINE_NO   IS    NOT    NULL
		                            ) TP,
		                            (-- 출고 완료 실적
		                            SELECT	OT.BRAND_DATE,OT.SRC_LOC,OT.TGT_LOC,OT.ITEM_ID,
		                                    OT.BRAND_NO,OT.BRAND_LINE_NO,
		                                    TRUNC(DECODE(OT.INPUT_UNIT_UOM,'BOX',OT.DELV_QTY,OT.DELV_QTY/CU.BASE_QTY),0)	DELV_QTY
		                            FROM	(
		                                    SELECT	EO.BRAND_DATE,
		                                            TO_CHAR(MAX(EO.SEND_DATE),'YYYYMMDD')	DELV_DATE,
		                                            SUBSTR(MAX(EO.CENTER_CD),5,4)	SRC_LOC,
		                                            SUBSTR(MAX(EO.DELIVERY_CD),5,4)	TGT_LOC,
		                                            MAX(EO.ITEM_CD)	ITEM_ID,MAX(EO.INPUT_UNIT_UOM)	INPUT_UNIT_UOM,
		                                            MAX(EO.CONFIRM_QTY)	DELV_QTY,
		                                            EO.BRAND_NO, EO.BRAND_LINE_NO
		                                    FROM	EDISOUTORDER	EO
		                                    WHERE	EO.ERROR_DIV		=	'3'
		                                    AND		EO.INOUT_CD		LIKE	'ZM%'
		                                 #if("$!{trans_start}" == "")
		                                    AND		EO.BRAND_DATE	BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                                                            AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')
		                                 #else
		                                 	AND		EO.BRAND_DATE	BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                                            AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                                 #end
		                                    GROUP	BY	EO.BRAND_DATE, EO.BRAND_NO, EO.BRAND_LINE_NO
		                                    HAVING	MAX(EO.CONFIRM_QTY)	&lt;&gt;	0
		                                    )	OT,
		                                    CONV_UOM	CU
		                            WHERE	OT.ITEM_ID		=	CU.ITEM_ID
		                            AND		CU.CONV_UOM		=	'BOX'
		                            ) OT,   ITEM_MST IM 
		                    WHERE   TP.BRAND_NO         =   OT.BRAND_NO
		                    AND     TP.BRAND_DATE       =   OT.BRAND_DATE
		                    AND     TP.ITEM_ID          =   OT.ITEM_ID
		                    AND     TP.SRC_LOC          =   OT.SRC_LOC
		                    AND     TP.TGT_LOC          =   OT.TGT_LOC
		                    AND     TP.BRAND_LINE_NO    =   OT.BRAND_LINE_NO
		                    AND     TP.DEL_QTY          !=  OT.DELV_QTY --수송계획수량과 출고 실적 수량이 다른 경우.
		                    AND     TP.ITEM_ID          =   IM.ITEM_ID
		                    ) DL
		            GROUP   BY DL.SRC_LOC  
		            UNION   ALL                                     
		            /* 수송미출고 수량 (출고실적에 해당하지 않는 경우.) */
		            SELECT  DL.SRC_LOC,
		                    0 TP_PLT,  
		                    0 TP_QTY,     
		                    0 TP_ODR_CNT,        
		                    0 ENTR_PLT,
		                    0 ENTR_QTY,
		                    0 ENTR_ODR_CNT,
		                    0 EXP_PLT,
		                    0 EXP_QTY,
		                    0 EXP_ODR_CNT,
		                    SUM(DL.DEL_PLT) DEL_PLT,
		                    SUM(DL.DEL_QTY) DEL_QTY,
		                    COUNT(DISTINCT DL.BRAND_NO) DEL_ODR_CNT
		            FROM     -- IF 수송 계획 - 출고 완료 실적 = 수송 예정
		                    (-- 수송 계획                    
		                    SELECT  TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')    BRAND_DATE,
		                            IT.SRC_LOC, IT.TGT_LOC, IT.ITEM_ID, IT.BRAND_NO, IT.BRAND_LINE_NO,
		                            IT.QTY/(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100))) DEL_PLT,
		                            IT.QTY    DEL_QTY
		                    FROM    IF_TRANS_PLAN IT, ITEM_MST IM
		                 #if("$!{trans_start}" == "")		                    
		                    WHERE   IT.ITEM_ID            =     IM.ITEM_ID
		                    AND     IT.TRANS_DATE         BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                                                  AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                 #else		                 	
		                    WHERE   IT.ITEM_ID            =     IM.ITEM_ID
		                    AND     IT.TRANS_DATE         BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                                  AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                 #end
		                    [AND    IT.SRC_LOC       =          '${selected_src_loc}']
				            [AND    IT.PLAN_TYPE     =          '${selected_plan_type}']
		                    AND     IT.BRAND_NO        IS    NOT    NULL
		                    AND     IT.BRAND_LINE_NO   IS    NOT    NULL
		                    AND     NOT EXISTS(-- 출고 완료 실적
		                                SELECT   DISTINCT EO.BRAND_DATE,
		                                         EO.BRAND_NO
		                                FROM     EDISOUTORDER    EO
		                                WHERE    EO.ERROR_DIV        =    '3'
		                                AND      EO.BRAND_DATE   =   TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')
		                                AND      EO.BRAND_NO     =   IT.BRAND_NO
		                                AND      EO.INOUT_CD     LIKE    'ZM%'
		                            #if("$!{trans_start}" == "")
		                                AND      EO.BRAND_DATE   BETWEEN  TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD')  
		                                                         AND      TO_DATE(TO_CHAR(SYSDATE,'YYYY-MM-DD'),'YYYY-MM-DD') 
		                            #else
		                            	AND      EO.BRAND_DATE   BETWEEN  TO_DATE('$!{trans_start}','YYYY-MM-DD') 
		                                                         AND      TO_DATE('$!{trans_end}'  ,'YYYY-MM-DD')
		                            #end
		                            )                  
		                    ) DL
		            GROUP   BY DL.SRC_LOC  
		        )    TP,
		        DC_MST    DM
		WHERE   TP.SRC_LOC    =    DM.DC_ID
		GROUP   BY  TP.SRC_LOC
		ORDER   BY  TP.SRC_LOC
		
	</query>
	
	<!-- 2. 수정 진행 현황  : 중단 그리드 조회 -->
	<query id="rp_01100_transProgressBrandDetail_list">
	
		-- 2. 해당 출고장에 대하여 전표별로 수송진행현황이 표시됨.
		SELECT  TO_CHAR(TO_DATE(AL.BRAND_DATE),'YYYY-MM-DD') BRAND_DATE
		        , AL.TGT_LOC
		        , DM.DC_NAME
		        , AL.BRAND_NO
		        , AL.PLT
		        , AL.BOX
		        , CASE WHEN AL.OUT_STATUS IS NULL -- 출고예정
		               THEN '출고예정'
		               WHEN AL.OUT_STATUS IS NOT NULL
		               THEN '출고마감'
		               ELSE ''
		          END  OUT_STATUS
		        , CASE WHEN AL.OUT_STATUS IS NOT NULL AND AL.IN_STATUS IS NULL
		               THEN '입고예정'
		               WHEN AL.OUT_STATUS IS NOT NULL AND AL.IN_STATUS IS NOT NULL
		               THEN '입고마감'
		               ELSE ''
		          END  IN_STATUS
		FROM    (
		        SELECT  IT.BRAND_DATE
		                , IT.TGT_LOC
		                , IT.BRAND_NO
		                , ROUND(IT.PLT, 2) PLT
		                , IT.BOX
		                , IT.TRANS_STATUS
		                , EO.OUT_STATUS
		                , EI.IN_STATUS
		        FROM    (
		                /* 수송계획(기준) */
		                -- 1. 수송계획에는 있는데 출고 실적에는 없는 것 : 출고예정
		                -- 2. 수송계획에 있고 출고 실적에 있는 경우 : 출고마감
		                -- 3. 수송계획에 있고 출고 실적에는 있으나 입고 실적에는 없는 것 : 입고 예정
		                -- 4. 수송계획에 있고 출고 실적에 있고 입고 실적에 있는 경우 :  입고 마감
		                SELECT  TO_CHAR(IT.TRANS_DATE,'YYYYMMDD')    BRAND_DATE
		                        , IT.TGT_LOC
		                        , IT.BRAND_NO
		                        , SUM(IT.QTY/(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100)))) PLT
		                        , SUM(IT.QTY)   BOX
		                        , '출고예정' TRANS_STATUS
		                FROM    IF_TRANS_PLAN IT, ITEM_MST IM		                
		                WHERE   TRANS_DATE       BETWEEN    TO_DATE('$!{trans_start}','YYYY-MM-DD')
		                                         AND        TO_DATE('$!{trans_end}','YYYY-MM-DD')
		                AND     IT.SRC_LOC       =     '$!{src_loc}'
		                AND     IT.ITEM_ID       =   IM.ITEM_ID
		                AND     BRAND_NO         IS    NOT    NULL
		                AND     BRAND_LINE_NO    IS    NOT    NULL
		                GROUP   BY IT.TRANS_DATE, IT.TGT_LOC, IT.BRAND_NO
		                ) IT,
		                (
		                /* WMS 수송출고실적 */
		                SELECT  DISTINCT EO.BRAND_DATE
		                        , EO.TGT_LOC
		                        , EO.BRAND_NO
		                        , '출고마감' OUT_STATUS
		                FROM    (
		                        SELECT  DISTINCT ED.BRAND_DATE
		                                , TO_CHAR(MAX(ED.SEND_DATE),'YYYYMMDD')   DELV_DATE
		                                , SUBSTR(MAX(ED.CENTER_CD),5,4)           SRC_LOC
		                                , SUBSTR(MAX(ED.DELIVERY_CD),5,4)         TGT_LOC
		                                , ED.BRAND_NO
		                                , ED.BRAND_LINE_NO
		                        FROM    EDISOUTORDER    ED
		                        WHERE   ED.ERROR_DIV        =    '3'
		                        AND     ED.INOUT_CD         LIKE    'ZM%'
		                        AND     ED.BRAND_DATE       BETWEEN    TO_CHAR(TO_DATE('$!{trans_start}','YYYY-MM-DD'), 'YYYYMMDD')
		                                         			AND        TO_CHAR(TO_DATE('$!{trans_end}','YYYY-MM-DD'), 'YYYYMMDD')
		                        GROUP   BY ED.BRAND_DATE, ED.BRAND_NO, ED.BRAND_LINE_NO
		                        HAVING  MAX(ED.CONFIRM_QTY)    &lt;&gt;    0
		                        ) EO
		                WHERE   EO.SRC_LOC = '$!{src_loc}'
		                ) EO,
		                (
		                /* WMS 수송입고실적 */
		                SELECT  DISTINCT OT.BRAND_DATE
		                        , OT.TGT_LOC
		                        , OT.BRAND_NO
		                        , '입고마감' IN_STATUS
		                FROM    (
		                        SELECT  DISTINCT EI.BRAND_DATE
		                                , TO_CHAR(MAX(EI.SEND_DATE),'YYYYMMDD')    ENTR_DATE
		                                , SUBSTR(MAX(EI.FACT_CD),5,4)              SRC_LOC
		                                , SUBSTR(MAX(EI.CENTER_CD),5,4)	        TGT_LOC
		                                , EI.BRAND_NO
		                                , EI.BRAND_LINE_NO
		                        FROM	EDISINORDER	EI
		                        WHERE	EI.ERROR_DIV	=	'3'
		                        AND		EI.INOUT_CD	    LIKE	'E20'
		                        AND		EI.BRAND_DATE		BETWEEN    TO_CHAR(TO_DATE('$!{trans_start}','YYYY-MM-DD'), 'YYYYMMDD')
		                                         			AND        TO_CHAR(TO_DATE('$!{trans_end}','YYYY-MM-DD'), 'YYYYMMDD')
		                        GROUP	BY	EI.BRAND_DATE, EI.BRAND_NO, EI.BRAND_LINE_NO
		                        HAVING	MAX(EI.CONFIRM_QTY)	&lt;&gt;	0
		                        )	OT
		                WHERE   OT.SRC_LOC = '$!{src_loc}'
		                ) EI
		        WHERE   IT.BRAND_DATE = EO.BRAND_DATE(+)
		        AND     IT.BRAND_NO   = EO.BRAND_NO(+)
		        AND     IT.BRAND_DATE = EI.BRAND_DATE(+)
		        AND     IT.BRAND_NO   = EI.BRAND_NO(+)
		        ) AL, DC_MST DM
		WHERE 	AL.TGT_LOC = DM.DC_ID
		ORDER	BY AL.BRAND_DATE, AL.TGT_LOC, AL.BRAND_NO

	</query>
	
	<!-- 3. 수정 진행 현황  : 하단 그리드 조회 -->
	<query id="rp_01100_transProgressItemDetail_list">
		-- 3.해당 전표의 수송진행현황을 품목별로 표시하는 쿼리
		SELECT	PR.ITEM_ID, 
		        IM.ITEM_NAME, 
		        IM.SPEC,
		        SUM(PR.DELV_PLAN_BOX)	DELV_PLAN_BOX,
		        SUM(PR.DELV_PLAN_EA)	DELV_PLAN_EA,
		        SUM(PR.DELV_PLAN_PLT)	DELV_PLAN_PLT,
		        TO_CHAR(MAX(PR.MAKE_DATE),'YYYY-MM-DD')	MAKE_DATE,
		        MAX(PR.DELV_CNFM_BOX)	DELV_CNFM_BOX,
		        MAX(PR.DELV_CNFM_EA)	DELV_CNFM_EA,
		        MAX(PR.DELV_CNFM_PLT)	DELV_CNFM_PLT,
		        CASE WHEN MAX(PR.SEQ) = '2' OR MAX(PR.SEQ) = '3'
		        	 THEN '출고예정'
		        	 WHEN MAX(PR.SEQ) = '4'
		        	 THEN '출고마감'
		        	 WHEN MAX(PR.SEQ) = '5' OR MAX(PR.SEQ) = '6'
		        	 THEN '입고예정'
		        	 WHEN MAX(PR.SEQ) = '7'
		        	 THEN '입고마감'
		        	 ELSE ''
		        END  DELV_GUBN,
		        TO_CHAR(MAX(PR.DELV_CNFM_DATE),'YYYY-MM-DD')	DELV_CNFM_DATE
                --MAX(PR.SEQ)
		FROM    (        
		        SELECT	TP.ITEM_ID,
		                DECODE(TP.PLAN_TYPE,'ZM3',0,TP.QTY)	DELV_PLAN_BOX,
		                DECODE(TP.PLAN_TYPE,'ZM3',TP.QTY,0)	DELV_PLAN_EA,
		                DECODE(TP.PLAN_TYPE,'ZM3',0,ROUND(TP.QTY/(DECODE(NVL(IM.BOX_PER_PALET,100),0,100,NVL(IM.BOX_PER_PALET,100))),2))	DELV_PLAN_PLT,
		                TP.MADE_DTTM									MAKE_DATE,
		                0												DELV_CNFM_BOX,
		                0												DELV_CNFM_EA,
		                0												DELV_CNFM_PLT,
		                --''												DELV_GUBN,
		                NULL											DELV_CNFM_DATE,
		                TP.BRAND_NO,
		                TP.BRAND_LINE_NO,
                        '1' SEQ
		        FROM    IF_TRANS_PLAN	TP, ITEM_MST IM
		        WHERE   TP.TRANS_DATE	=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND     TP.SRC_LOC		=   '$!{src_loc}'
		        AND	    TP.BRAND_NO		=	'$!{brand_no}'
		        [AND		TP.PLAN_TYPE	=	'${plan_type}'] --PLAN_TYPE
		        AND		TP.PLAN_TYPE	NOT LIKE 'ZM3'	--	반품 제외
                AND     TP.ITEM_ID      =    IM.ITEM_ID
		        AND		TRIM(TP.BRAND_LINE_NO)	IS	NOT	NULL
		        AND		TP.QTY	!=	0               
		        UNION	ALL
		        SELECT	OD.ITEM_CD					ITEM_ID,
		                0							DELV_PLAN_BOX,
		                0							DELV_PLAN_EA,
		                0							DELV_PLAN_PLT,
		                NULL						MAKE_DATE,
		                0							DELV_CNFM_BOX,
		                0							DELV_CNFM_EA,
		                0							DELV_CNFM_PLT,
		                --'출고예정'					DELV_GUBN,
		                NULL						DELV_CNFM_DATE,
		                OD.BRAND_NO,
		                OD.BRAND_LINE_NO,
                        '2' SEQ
		        FROM	LO010NM	OH,
		                LO010ND	OD
		        WHERE	SUBSTR(OH.CENTER_CD,5,4)	=	'$!{src_loc}'
		        AND		OH.BRAND_CD			=	'100001'
		        AND		OH.ORDER_DATE		=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND		OD.BRAND_NO			=	'$!{brand_no}'
		        AND		OH.ORDER_NO			=	OD.ORDER_NO
		        AND		OH.CENTER_CD		=	OD.CENTER_CD
		        AND		OH.BRAND_CD			=	OD.BRAND_CD
		        AND		OH.ORDER_DATE		=	OD.ORDER_DATE
		        AND		OH.OUTBOUND_STATE	=	'10'
                AND     OH.INOUT_CD         =   'D20'
		        AND		OD.ORDER_QTY		!=	0
		        AND		SUBSTR(OD.BRAND_NO,1,2)	=	'87'
		        UNION	ALL
		        SELECT	OD.ITEM_CD                  ITEM_ID,
                        0                           DELV_PLAN_BOX,
                        0                           DELV_PLAN_EA,
                        0                           DELV_PLAN_PLT,
                        NULL                        MAKE_DATE,
                        0                           DELV_CNFM_BOX,
                        0                           DELV_CNFM_EA,
                        0                           DELV_CNFM_PLT,
                        --'출고예정'                   DELV_GUBN,
                        NULL                        DELV_CNFM_DATE,
                        OD.BRAND_NO,
                        OD.BRAND_LINE_NO,
                        '3' SEQ
                FROM    LO020NM    OH,
                        LO020ND    OD
                WHERE    SUBSTR(OH.CENTER_CD,5,4)    =   '$!{src_loc}'
                AND        OH.BRAND_CD            	 =   '100001'
                AND        OH.ORDER_DATE        	 =   TO_DATE('$!{order_date}','YYYY-MM-DD')
                AND        OD.BRAND_NO            	 =   '$!{brand_no}'
                AND        OH.OUTBOUND_NO        	 =    OD.OUTBOUND_NO
                AND        OH.CENTER_CD        		 =    OD.CENTER_CD
                AND        OH.BRAND_CD            	 =    OD.BRAND_CD
                AND        OH.OUTBOUND_DATE    		 =    OD.OUTBOUND_DATE
                AND        OH.OUTBOUND_STATE    	 &lt;    '50'
                AND        OH.INOUT_CD         		 =   'D20'
                --AND      OD.CONFIRM_QTY        !=    0
                AND        SUBSTR(OD.BRAND_NO,1,2)    =    '87'
                UNION    ALL
                SELECT    OD.ITEM_CD                        ITEM_ID,
                        0                                   DELV_PLAN_BOX,
                        0                                   DELV_PLAN_EA,
                        0                                   DELV_PLAN_PLT,
                        NULL                                MAKE_DATE,
                        OD.CONFIRM_QTY/NVL(DECODE(IM.QTY,0,1,IM.QTY),1)        DELV_CNFM_BOX,
                        MOD(OD.CONFIRM_QTY,NVL(DECODE(IM.QTY,0,1,IM.QTY),1))    DELV_CNFM_EA,
                        OD.CONFIRM_QTY/NVL(DECODE(IM.QTY,0,1,IM.QTY),1)/NVL(DECODE(IM.BOX_PER_PALET,0,1,IM.BOX_PER_PALET),1)    DELV_CNFM_PLT,
                        --'출고마감'                            DELV_GUBN,
                        OH.REG_DATETIME                        DELV_CNFM_DATE,
                        OD.BRAND_NO,
                        OD.BRAND_LINE_NO,
                        '4' SEQ
                FROM    LO020NM        OH,
                        LO020ND        OD,
                        ITEM_MST    IM
                WHERE    SUBSTR(OH.CENTER_CD,5,4)     =    '$!{src_loc}'
                AND        OH.BRAND_CD                =    '100001'
                AND        OH.ORDER_DATE              =    TO_DATE('$!{order_date}','YYYY-MM-DD')
                AND        OD.BRAND_NO                =    '$!{brand_no}'
                AND        OH.OUTBOUND_NO             =    OD.OUTBOUND_NO
                AND        OH.CENTER_CD               =    OD.CENTER_CD
                AND        OH.BRAND_CD                =    OD.BRAND_CD
                AND        OH.OUTBOUND_DATE           =    OD.OUTBOUND_DATE
                AND        OH.OUTBOUND_STATE          &gt;=    '50'
                AND        OH.INOUT_CD         		  =   'D20'
                --AND        OD.CONFIRM_QTY            !=    0
                AND        SUBSTR(OD.BRAND_NO,1,2)    =    '87'
                AND        OD.ITEM_CD                =    IM.ITEM_ID
                UNION   ALL
                /*  입고	*/	   
		        SELECT	OD.ITEM_CD					ITEM_ID,
		                0							DELV_PLAN_BOX,
		                0							DELV_PLAN_EA,
		                0							DELV_PLAN_PLT,
		                NULL						MAKE_DATE,
		                0							DELV_CNFM_BOX,
		                0							DELV_CNFM_EA,
		                0							DELV_CNFM_PLT,
		                --'입고예정'					DELV_GUBN,
		                NULL						DELV_CNFM_DATE,
		                OH.BRAND_NO,
		                '' BRAND_LINE_NO,
                        '5' SEQ
		        FROM	LI010NM	OH,
		                LI010ND	OD
		        WHERE	SUBSTR(OH.CENTER_CD,5,4)	=	'$!{tgt_loc}'
		        AND		OH.BRAND_CD			=	'100001'
		        AND		OH.ORDER_DATE		=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND		OH.BRAND_NO			=	'$!{brand_no}'
		        AND		OH.ORDER_NO			=	OD.ORDER_NO
		        AND		OH.CENTER_CD		=	OD.CENTER_CD
		        AND		OH.BRAND_CD			=	OD.BRAND_CD
		        AND		OH.ORDER_DATE		=	OD.ORDER_DATE
		        AND		OH.INBOUND_STATE	=	'10'
                AND     OH.INOUT_CD         =   'E20'
		        AND		OD.ORDER_QTY		!=	0
		        AND		SUBSTR(OH.BRAND_NO,1,2)	=	'87'
		        UNION	ALL
		        SELECT	OD.ITEM_CD                  ITEM_ID,
                        0                           DELV_PLAN_BOX,
                        0                           DELV_PLAN_EA,
                        0                           DELV_PLAN_PLT,
                        NULL                        MAKE_DATE,
                        0                           DELV_CNFM_BOX,
                        0                           DELV_CNFM_EA,
                        0                           DELV_CNFM_PLT,
                        --'입고예정'                  DELV_GUBN,
                        NULL                        DELV_CNFM_DATE,
                        OH.BRAND_NO,
                        '' BRAND_LINE_NO,
                        '6' SEQ
                FROM    LI020NM    OH,
                        LI020ND    OD
                WHERE    SUBSTR(OH.CENTER_CD,5,4)    =    '$!{tgt_loc}'
                AND        OH.BRAND_CD            	 =    '100001'
                AND        OH.ORDER_DATE        	 =    TO_DATE('$!{order_date}','YYYY-MM-DD')
                AND        OH.BRAND_NO               =    '$!{brand_no}'
                AND        OH.INBOUND_NO        	 =    OD.INBOUND_NO
                AND        OH.CENTER_CD        		 =    OD.CENTER_CD
                AND        OH.BRAND_CD            	 =    OD.BRAND_CD
                AND        OH.INBOUND_DATE    		 =    OD.INBOUND_DATE
                AND        OH.INBOUND_STATE    		 &lt;    '50'
                AND        OH.INOUT_CD         		 =   'E20'
                --AND        OD.CONFIRM_QTY        !=    0
                AND        SUBSTR(OH.BRAND_NO,1,2)    =    '87'
                UNION    ALL
                SELECT    OD.ITEM_CD                        ITEM_ID,
                        0                                   DELV_PLAN_BOX,
                        0                                   DELV_PLAN_EA,
                        0                                   DELV_PLAN_PLT,
                        NULL                                MAKE_DATE,
                        OD.CONFIRM_QTY/NVL(DECODE(IM.QTY,0,1,IM.QTY),1)        DELV_CNFM_BOX,
                        MOD(OD.CONFIRM_QTY,NVL(DECODE(IM.QTY,0,1,IM.QTY),1))    DELV_CNFM_EA,
                        OD.CONFIRM_QTY/NVL(DECODE(IM.QTY,0,1,IM.QTY),1)/NVL(DECODE(IM.BOX_PER_PALET,0,1,IM.BOX_PER_PALET),1)    DELV_CNFM_PLT,
                        --'입고마감'                            DELV_GUBN,
                        OH.REG_DATETIME                        DELV_CNFM_DATE,
                        OH.BRAND_NO,
                        '' BRAND_LINE_NO,
                        '7' SEQ
                FROM    LI020NM        OH,
                        LI020ND        OD,
                        ITEM_MST    IM
                WHERE    SUBSTR(OH.CENTER_CD,5,4)     =    '$!{tgt_loc}'
                AND        OH.BRAND_CD                =    '100001'
                AND        OH.ORDER_DATE              =    TO_DATE('$!{order_date}','YYYY-MM-DD')
                AND        OH.BRAND_NO                =    '$!{brand_no}'
                AND        OH.INBOUND_NO              =    OD.INBOUND_NO
                AND        OH.CENTER_CD               =    OD.CENTER_CD
                AND        OH.BRAND_CD                =    OD.BRAND_CD
                AND        OH.INBOUND_DATE            =    OD.INBOUND_DATE
                AND        OH.INBOUND_STATE           &gt;=    '50'
                AND        OH.INOUT_CD                =   'E20'
                --AND        OD.CONFIRM_QTY            !=    0
                AND        SUBSTR(OH.BRAND_NO,1,2)    =    '87'
                AND        OD.ITEM_CD                 =    IM.ITEM_ID
                ) PR, ITEM_MST IM
        WHERE   PR.ITEM_ID = IM.ITEM_ID
        GROUP    BY    PR.ITEM_ID, IM.ITEM_NAME, IM.SPEC
		</query>
		
		<query id="rp_01100_transProgressItemDetail_list_org">
		SELECT	PR.ITEM_ID, 
		        IM.ITEM_NAME, 
		        IM.SPEC,
		        SUM(PR.DELV_PLAN_BOX)	DELV_PLAN_BOX,
		        SUM(PR.DELV_PLAN_EA)	DELV_PLAN_EA,
		        SUM(PR.DELV_PLAN_PLT)	DELV_PLAN_PLT,
		        TO_CHAR(MAX(PR.MAKE_DATE),'YYYY-MM-DD')	MAKE_DATE,
		        SUM(PR.DELV_CNFM_BOX)	DELV_CNFM_BOX,
		        SUM(PR.DELV_CNFM_EA)	DELV_CNFM_EA,
		        SUM(PR.DELV_CNFM_PLT)	DELV_CNFM_PLT,
		        MAX(PR.DELV_GUBN)		DELV_GUBN,
		        TO_CHAR(MAX(PR.DELV_CNFM_DATE),'YYYY-MM-DD')	DELV_CNFM_DATE
		FROM    (
		        SELECT	TP.ITEM_ID,
		                DECODE(TP.PLAN_TYPE,'ZM3',0,TP.BASE_STK_QTY)	DELV_PLAN_BOX,
		                DECODE(TP.PLAN_TYPE,'ZM3',TP.BASE_STK_QTY,0)	DELV_PLAN_EA,
		                DECODE(TP.PLAN_TYPE,'ZM3',0,TP.BASE_STK_PLT)	DELV_PLAN_PLT,
		                MADE_DTTM										MAKE_DATE,
		                0												DELV_CNFM_BOX,
		                0												DELV_CNFM_EA,
		                0												DELV_CNFM_PLT,
		                ''												DELV_GUBN,
		                NULL											DELV_CNFM_DATE,
		                TP.BRAND_NO,
		                TP.BRAND_LINE_NO
		        FROM    TRANS_PLAN	TP
		        WHERE   TP.TRANS_DATE	=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND     TP.SRC_LOC		=   '$!{src_loc}'
		        AND	    TP.BRAND_NO		=	'$!{brand_no}'
		        [AND		TP.PLAN_TYPE	=	'${plan_type}'] --PLAN_TYPE
		        AND		TP.PLAN_TYPE	!=		'ZM3'	--	반품 제외
		        AND		TRIM(TP.BRAND_LINE_NO)	IS	NOT	NULL
		        AND		TP.BASE_STK_QTY	!=	0
		        UNION	ALL
		        SELECT	OD.ITEM_CD					ITEM_ID,
		                0							DELV_PLAN_BOX,
		                0							DELV_PLAN_EA,
		                0							DELV_PLAN_PLT,
		                NULL						MAKE_DATE,
		                0							DELV_CNFM_BOX,
		                0							DELV_CNFM_EA,
		                0							DELV_CNFM_PLT,
		                '출고예정'					DELV_GUBN,
		                NULL						DELV_CNFM_DATE,
		                OD.BRAND_NO,
		                OD.BRAND_LINE_NO
		        FROM	LO010NM	OH,
		                LO010ND	OD
		        WHERE	SUBSTR(OH.CENTER_CD,5,4)	=	'$!{src_loc}'
		        AND		OH.BRAND_CD			=	'100001'
		        AND		OH.ORDER_DATE		=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND		OH.ORDER_NO			=	'$!{delv_order}'
		        AND		OD.BRAND_NO			=	'$!{brand_no}'
		        AND		OH.ORDER_NO			=	OD.ORDER_NO
		        AND		OH.CENTER_CD		=	OD.CENTER_CD
		        AND		OH.BRAND_CD			=	OD.BRAND_CD
		        AND		OH.ORDER_DATE		=	OD.ORDER_DATE
		        AND		OH.OUTBOUND_STATE	=	'10'
		        AND		OD.ORDER_QTY		!=	0
		        AND		SUBSTR(OD.BRAND_NO,1,2)	=	'87'
		        UNION	ALL
		        SELECT	OD.ITEM_CD					ITEM_ID,
		                0							DELV_PLAN_BOX,
		                0							DELV_PLAN_EA,
		                0							DELV_PLAN_PLT,
		                NULL						MAKE_DATE,
		                0							DELV_CNFM_BOX,
		                0							DELV_CNFM_EA,
		                0							DELV_CNFM_PLT,
		                '출고예정'					DELV_GUBN,
		                NULL						DELV_CNFM_DATE,
		                OD.BRAND_NO,
		                OD.BRAND_LINE_NO
		        FROM	LO020NM	OH,
		                LO020ND	OD
		        WHERE	SUBSTR(OH.CENTER_CD,5,4)	=	'$!{src_loc}'
		        AND		OH.BRAND_CD			=	'100001'
		        AND		OH.ORDER_DATE		=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND		OH.OUTBOUND_NO		=	'$!{delv_order}'
		        AND		OD.BRAND_NO			=	'$!{brand_no}'
		        AND		OH.OUTBOUND_NO		=	OD.OUTBOUND_NO
		        AND		OH.CENTER_CD		=	OD.CENTER_CD
		        AND		OH.BRAND_CD			=	OD.BRAND_CD
		        AND		OH.OUTBOUND_DATE	=	OD.OUTBOUND_DATE
		        AND		OH.OUTBOUND_STATE	&lt;	'50'
		        AND		OD.CONFIRM_QTY		!=	0
		        AND		SUBSTR(OD.BRAND_NO,1,2)	=	'87'
		        UNION	ALL
		        SELECT	OD.ITEM_CD							ITEM_ID,
		                0									DELV_PLAN_BOX,
		                0									DELV_PLAN_EA,
		                0									DELV_PLAN_PLT,
		                NULL								MAKE_DATE,
		                OD.CONFIRM_QTY/NVL(DECODE(IM.QTY,0,1,IM.QTY),1)		DELV_CNFM_BOX,
		                MOD(OD.CONFIRM_QTY,NVL(DECODE(IM.QTY,0,1,IM.QTY),1))	DELV_CNFM_EA,
		                OD.CONFIRM_QTY/NVL(DECODE(IM.QTY,0,1,IM.QTY),1)/NVL(DECODE(IM.BOX_PER_PALET,0,1,IM.BOX_PER_PALET),1)	DELV_CNFM_PLT,
		                '출고마감'							DELV_GUBN,
		                OH.REG_DATETIME						DELV_CNFM_DATE,
		                OD.BRAND_NO,
		                OD.BRAND_LINE_NO
		        FROM	LO020NM		OH,
		                LO020ND		OD,
		                ITEM_MST	IM
		        WHERE	SUBSTR(OH.CENTER_CD,5,4)	=	'$!{src_loc}'
		        AND		OH.BRAND_CD				=	'100001'
		        AND		OH.ORDER_DATE			=	TO_DATE('$!{order_date}','YYYY-MM-DD')
		        AND		OH.OUTBOUND_NO			=	'$!{delv_order}'
		        AND		OD.BRAND_NO				=	'$!{brand_no}'
		        AND		OH.OUTBOUND_NO			=	OD.OUTBOUND_NO
		        AND		OH.CENTER_CD			=	OD.CENTER_CD
		        AND		OH.BRAND_CD				=	OD.BRAND_CD
		        AND		OH.OUTBOUND_DATE		=	OD.OUTBOUND_DATE
		        AND		OH.OUTBOUND_STATE		&gt;=	'50'
		        AND		OD.CONFIRM_QTY			!=	0
		        AND		SUBSTR(OD.BRAND_NO,1,2)	=	'87'
		        AND		OD.ITEM_CD				=	IM.ITEM_ID
		        ) PR, ITEM_MST IM
		WHERE   PR.ITEM_ID = IM.ITEM_ID
		GROUP	BY	PR.ITEM_ID, IM.ITEM_NAME, IM.SPEC
	</query>
	
	<!--
	======================================================================
		8. 반품 수송 계획
	======================================================================
	-->
	
	<!-- 반품 수송계획 : 조회 -->
	<query id="rp_01110_returningProduct_list_01" paging="false">
	
		SELECT  /*+ INDEX(IT IF_TRANS_PLAN_PK)*/TP.BRAND_NO, TP.BRAND_LINE_NO, DM1.DC_NAME SRC_NAME, 
		        DM2.DC_NAME TGT_NAME, TP.TRUCK_SEQ, TP.ITEM_ID, 
		        IM.ITEM_NAME, TO_CHAR(TP.TRANS_DATE,'YYYY-MM-DD'), TP.BASE_STK_QTY, IT.QTY
		  FROM  (SELECT  /*+ INDEX(TP TRANS_PLAN_PK)*/TP.VERSION, TP.BRAND_NO, TP.BRAND_LINE_NO, TP.SRC_LOC, TP.TGT_LOC, TP.PLAN_TYPE,
		                 TP.TRUCK_SEQ, TP.ITEM_ID, TP.TRANS_DATE, TP.BASE_STK_QTY 
		           FROM  TRANS_PLAN TP
		          WHERE  TP.PLAN_TYPE = (SELECT  CM.CD
		                                   FROM  CODE_MST CM
		                                  WHERE  CM.CD_GRP = 'PLAN_TYPE'
                                            AND  CM.CD_NAME = '반품수송') 
		     #if("$!{trans_start}" == "") 
             	AND  TP.TRANS_DATE BETWEEN TO_CHAR(SYSDATE-7,'YYYY-MM-DD') AND TO_CHAR(SYSDATE+6,'YYYY-MM-DD')
		     #else
             	AND  TP.TRANS_DATE BETWEEN TO_DATE('$!{trans_start}','YYYY-MM-DD') AND TO_DATE('$!{trans_end}','YYYY-MM-DD')
             	[AND  TP.SRC_LOC =    '${src_loc_sel}']
		     #end 
                ORDER BY BRAND_NO DESC) TP, 
                ITEM_MST IM, DC_MST DM1, DC_MST DM2, IF_TRANS_PLAN IT
         WHERE  TP.SRC_LOC = DM1.DC_ID
           AND  TP.TGT_LOC = DM2.DC_ID
           AND  TP.ITEM_ID = IM.ITEM_ID
           AND  TP.VERSION = IT.VERSION
           AND  TP.TRANS_DATE = IT.TRANS_DATE
           AND  TP.TGT_LOC = IT.TGT_LOC
           AND  TP.SRC_LOC = IT.SRC_LOC
           AND  TP.TRUCK_SEQ = IT.TRUCK_SEQ
           AND  TP.PLAN_TYPE = IT.PLAN_TYPE
           AND  TP.ITEM_ID = IT.ITEM_ID
	
	</query>

	<!-- 반품 수송계획 : 생성 -->
	<query id="rp_01110_returningProduct_list_02" paging="false">
        /*    시점 재고    */
        SELECT  ST.RDC_CODE,
        		F_GETDCNAME(ST.RDC_CODE)	DC_NAME,
                ST.ITEM_ID,
                IM.ITEM_NM            ITEM_NAME,
                IM.MIN_UNIT_UOM        UNIT_UOM,
                IM.BOX_UNIT_QTY        UNIT_QTY,
                SUM(ST.STOCK_QTY)    STOCK_QTY,
                TRUNC(SUM(ST.STOCK_QTY)/(DECODE(IM.MIN_UNIT_UOM,'EA',IM.BOX_UNIT_QTY,1)))    BOX_STOCK,
                MOD(SUM(ST.STOCK_QTY),(DECODE(IM.MIN_UNIT_UOM,'EA',IM.BOX_UNIT_QTY,1)))        EA_STOCK
        FROM    (
                ----------통합---------
                /* 현재고 */
                SELECT	SUBSTR(STC.CENTER_CD,5,4)    RDC_CODE,
                        STC.ITEM_CD                    ITEM_ID,
                        SUM(STC.STOCK_QTY)            STOCK_QTY
                FROM    LS010NM    STC
                WHERE   STC.BRAND_CD                =    '100001'
                AND     STC.ITEM_STATE              =    'X'        --반품
                AND     STC.STOCK_QTY                &lt; &gt;    0
                #if("$!{src_loc_sel}" == "")
                    -- AND		SUBSTR(STC.CENTER_CD,5,4)    =     ''    --출발물류거점 (화면로딩시)
                #else
                    AND		SUBSTR(STC.CENTER_CD,5,4)    =    '$!{src_loc_sel}' --출발물류거점 (조회시)
                #end
                GROUP   BY    SUBSTR(STC.CENTER_CD,5,4),STC.ITEM_CD
                UNION   ALL
                /* 입출고 물량(가감 해줘야 함) */
                SELECT  SUBSTR(IO.CENTER_CD, 5, 4)    RDC_CODE,
                        IO.ITEM_CD    ITEM_ID,
                        DECODE(SUBSTR(IO.INOUT_CD,1,1),
                                'D',SUM(IO.INOUT_QTY),
                                'E',(-1) * SUM(IO.INOUT_QTY),0)
                FROM    LS020NM IO
                WHERE   SUBSTR(IO.INOUT_CD, 1, 1)    IN    ('D','E')
                AND     IO.BRAND_CD        =    '100001'
                AND     IO.ITEM_STATE    =    'X'
                AND     TO_CHAR(IO.INOUT_DATE,'YYYY-MM-DD')
                        BETWEEN    TO_CHAR(TO_DATE('$!{stock_date}')+1,'YYYY-MM-DD')
                        AND        TO_CHAR(SYSDATE,'YYYY-MM-DD')
                #if("$!{src_loc_sel}" == "")
                    -- AND		SUBSTR(IO.CENTER_CD,5,4)    =     ''    --출발물류거점 (화면로딩시)
                #else
                    AND		SUBSTR(IO.CENTER_CD,5,4)    =    '$!{src_loc_sel}' --출발물류거점 (조회시)
                #end                        
                AND     IO.INOUT_QTY    &lt; &gt;    0
                GROUP   BY    SUBSTR(IO.CENTER_CD, 5, 4),IO.ITEM_CD,IO.INOUT_CD
                UNION   ALL
                ----------구미----------
                /* 현재고 */
                SELECT	SUBSTR(STC.CENTER_CD,5,4)    RDC_CODE,
                        STC.ITEM_CD                    ITEM_ID,
                        SUM(STC.STOCK_QTY)            STOCK_QTY
                FROM    LS010NM_G    STC
                WHERE   STC.BRAND_CD                =    '100001'
                AND     STC.ITEM_STATE              =    'X'        --반품
                AND     STC.STOCK_QTY                &lt; &gt;    0
                #if("$!{src_loc_sel}" == "")
                   -- AND		SUBSTR(STC.CENTER_CD,5,4)    =     ''    --출발물류거점 (화면로딩시)
                #else
                    AND		SUBSTR(STC.CENTER_CD,5,4)    =    '$!{src_loc_sel}' --출발물류거점 (조회시)
                #end
                GROUP   BY    SUBSTR(STC.CENTER_CD,5,4),STC.ITEM_CD
                UNION   ALL
                /* 입출고 물량(가감 해줘야 함) */
                SELECT  SUBSTR(IO.CENTER_CD, 5, 4)    RDC_CODE,
                        IO.ITEM_CD    ITEM_ID,
                        DECODE(SUBSTR(IO.INOUT_CD,1,1),
                                'D',SUM(IO.INOUT_QTY),
                                'E',(-1) * SUM(IO.INOUT_QTY),0)
                FROM    LS020NM_G IO
                WHERE   SUBSTR(IO.INOUT_CD, 1, 1)    IN    ('D','E')
                AND     IO.BRAND_CD        =    '100001'
                AND     IO.ITEM_STATE    =    'X'
                AND     TO_CHAR(IO.INOUT_DATE,'YYYY-MM-DD')
                        BETWEEN    TO_CHAR(TO_DATE('$!{stock_date}')+1,'YYYY-MM-DD')
                        AND        TO_CHAR(SYSDATE,'YYYY-MM-DD')
                #if("$!{src_loc_sel}" == "")
                    -- AND		SUBSTR(IO.CENTER_CD,5,4)    =     ''    --출발물류거점 (화면로딩시)
                #else
                    AND		SUBSTR(IO.CENTER_CD,5,4)    =    '$!{src_loc_sel}' --출발물류거점 (조회시)
                #end                        
                AND     IO.INOUT_QTY    &lt; &gt;    0
                GROUP   BY    SUBSTR(IO.CENTER_CD, 5, 4),IO.ITEM_CD,IO.INOUT_CD
                UNION   ALL                
                ----------포승----------
                /* 현재고 */
                SELECT	SUBSTR(STC.CENTER_CD,5,4)    RDC_CODE,
                        STC.ITEM_CD                    ITEM_ID,
                        SUM(STC.STOCK_QTY)            STOCK_QTY
                FROM    LS010NM_P    STC
                WHERE   STC.BRAND_CD                =    '100001'
                AND     STC.ITEM_STATE              =    'X'        --반품
                AND     STC.STOCK_QTY                &lt; &gt;    0
                #if("$!{src_loc_sel}" == "")
                    -- AND		SUBSTR(STC.CENTER_CD,5,4)    =     ''    --출발물류거점 (화면로딩시)
                #else
                    AND		SUBSTR(STC.CENTER_CD,5,4)    =    '$!{src_loc_sel}' --출발물류거점 (조회시)
                #end
                GROUP   BY    SUBSTR(STC.CENTER_CD,5,4),STC.ITEM_CD
                UNION   ALL
                /* 입출고 물량(가감 해줘야 함) */
                SELECT  SUBSTR(IO.CENTER_CD, 5, 4)    RDC_CODE,
                        IO.ITEM_CD    ITEM_ID,
                        DECODE(SUBSTR(IO.INOUT_CD,1,1),
                                'D',SUM(IO.INOUT_QTY),
                                'E',(-1) * SUM(IO.INOUT_QTY),0)
                FROM    LS020NM_P IO
                WHERE   SUBSTR(IO.INOUT_CD, 1, 1)    IN    ('D','E')
                AND     IO.BRAND_CD        =    '100001'
                AND     IO.ITEM_STATE    =    'X'
                AND     TO_CHAR(IO.INOUT_DATE,'YYYY-MM-DD')
                        BETWEEN    TO_CHAR(TO_DATE('$!{stock_date}')+1,'YYYY-MM-DD')
                        AND        TO_CHAR(SYSDATE,'YYYY-MM-DD')
                #if("$!{src_loc_sel}" == "")
                    -- AND		SUBSTR(IO.CENTER_CD,5,4)    =     ''    --출발물류거점 (화면로딩시)
                #else
                    AND		SUBSTR(IO.CENTER_CD,5,4)    =    '$!{src_loc_sel}' --출발물류거점 (조회시)
                #end                        
                AND     IO.INOUT_QTY    &lt; &gt;    0
                GROUP   BY    SUBSTR(IO.CENTER_CD, 5, 4),IO.ITEM_CD,IO.INOUT_CD
                UNION   ALL
                ----------------------                
                /* 반품 수송 출고 예정 */
                SELECT  TP.SRC_LOC    RDC_CODE,
                        TP.ITEM_ID,
                        (-1) * SUM(QTY)
                FROM    IF_TRANS_PLAN    TP
                WHERE   TP.PLAN_TYPE    IN  (
                                            SELECT	CD        -- 반품수송 : ZM3
                                            FROM    CODE_MST 
                                            WHERE   CD_GRP    =    'PLAN_TYPE'
                                            AND     CD_NAME    =    '반품수송'
                                            )
                AND     TP.TRANS_STATE    IN    ('01','02')        -- 수송 출고 예정
                AND     TO_CHAR(TP.TRANS_DATE,'YYYY-MM-DD')
                           between TO_CHAR(SYSDATE - 3,'YYYY-MM-DD') and TO_CHAR(SYSDATE+5,'YYYY-MM-DD')
                #if("$!{src_loc_sel}" == "")
                    -- AND		TP.SRC_LOC        = ''
                #else
                    AND		TP.SRC_LOC        = '$!{src_loc_sel}'
                #end
                GROUP    BY    TP.SRC_LOC,TP.ITEM_ID
                )    ST,
                CMITEM    IM
        WHERE   ST.ITEM_ID           =    IM.ITEM_CD
        AND     IM.RTN_HANDLER_CD    =    '$!{gubun}'
        AND     IM.ITEM_DIV          IN    ('FERT','HAWA')
        HAVING	SUM(ST.STOCK_QTY)	!=	0
        GROUP   BY    ST.RDC_CODE,ST.ITEM_ID,IM.ITEM_NM,IM.MIN_UNIT_UOM,IM.BOX_UNIT_QTY
        ORDER  BY    1,2
	</query>

	
	<!-- 반품 수송계획 : 생성 -->
	<query id="rp_01110_returningProduct_list_02_org" paging="false">

		SELECT  ST.ITEM_ID, 
		        ST.ITEM_NAME, 
		        ST.UNIT_UOM, 
		        ST.UNIT_QTY, 
		        ST.STOCK_QTY,
		        TRUNC((ST.STOCK_QTY - NVL(IT.IT_EA_QTY,0))/ DECODE(ST.UNIT_QTY,0,1,ST.UNIT_QTY))   BOX_QTY,
		        MOD((ST.STOCK_QTY - NVL(IT.IT_EA_QTY,0)), DECODE(ST.UNIT_QTY,0,1,ST.UNIT_QTY))     EA_QTY,
		        NVL(IT.IT_EA_QTY,0)  IT_STOCK_QTY  
		        --ST.BOX_QTY, 
		        --ST.EA_QTY,    
		FROM    (
		        SELECT  STC.ITEM_CD        ITEM_ID,
		                ITM.ITEM_NM        ITEM_NAME,
		                ITM.MIN_UNIT_UOM   UNIT_UOM,
		                ITM.BOX_UNIT_QTY   UNIT_QTY,
		                SUM(STC.STOCK_QTY) STOCK_QTY,
		                TRUNC(SUM(STC.STOCK_QTY)/(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))    BOX_QTY,
		                MOD(SUM(STC.STOCK_QTY),  (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))    EA_QTY    
		          FROM  LS010NM STC, CMITEM ITM
		         WHERE  STC.BRAND_CD                =    '100001'
		           AND  STC.ITEM_STATE              =    'X'                --반품
		           AND  STC.STOCK_QTY               !=    0
		           AND  STC.ITEM_CD                 =    ITM.ITEM_CD
				#if("$!{src_loc_sel}" == "")
		            AND  SUBSTR(STC.CENTER_CD,5,4) =    ''    --출발물류거점 (화면로딩시)
		            AND  ITM.RTN_HANDLER_CD = '$!{gubun}'
		            --AND  ITM.ITEM_DIV              =    'FERT'        --    'FERT' or'HAWA'
				#else
		            AND  SUBSTR(STC.CENTER_CD,5,4) =    '$!{src_loc_sel}'    --출발물류거점 (조회시)
		            --AND  ITM.ITEM_DIV              =    '$!{checked_multi}'        --    'FERT' or'HAWA'
		            AND  ITM.RTN_HANDLER_CD = '$!{gubun}'
				#end		    	 	
		         GROUP  BY SUBSTR(STC.CENTER_CD,5,4),ITM.ITEM_NM, STC.ITEM_CD,ITM.MIN_UNIT_UOM,ITM.BOX_UNIT_QTY
		         ORDER  BY STC.ITEM_CD
		        ) ST,
		       (
		       SELECT  IT.TRANS_DATE, IT.ITEM_ID, IT.SRC_LOC, SUM(QTY) IT_EA_QTY
		       FROM    IF_TRANS_PLAN IT
		       WHERE   IT.PLAN_TYPE = (SELECT  CD       -- 반품수송 : ZM3
		                               FROM    CODE_MST 
		                               WHERE   CD_GRP  =   'PLAN_TYPE'
		                               AND     CD_NAME =   '반품수송')
		       AND     TO_CHAR(IT.TRANS_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
		       AND     IT.SRC_LOC      = '$!{src_loc_sel}'
		       GROUP   BY IT.TRANS_DATE, IT.ITEM_ID, IT.SRC_LOC
		       )  IT
		WHERE  ST.ITEM_ID   =   IT.ITEM_ID(+)
		UNION	ALL
		SELECT  ST.ITEM_ID, 
		        ST.ITEM_NAME, 
		        ST.UNIT_UOM, 
		        ST.UNIT_QTY, 
		        ST.STOCK_QTY,
		        TRUNC((ST.STOCK_QTY - NVL(IT.IT_EA_QTY,0))/ DECODE(ST.UNIT_QTY,0,1,ST.UNIT_QTY))   BOX_QTY,
		        MOD((ST.STOCK_QTY - NVL(IT.IT_EA_QTY,0)), DECODE(ST.UNIT_QTY,0,1,ST.UNIT_QTY))     EA_QTY,
		        NVL(IT.IT_EA_QTY,0)  IT_STOCK_QTY  
		        --ST.BOX_QTY, 
		        --ST.EA_QTY,    
		FROM    (
		        SELECT  STC.ITEM_CD        ITEM_ID,
		                ITM.ITEM_NM        ITEM_NAME,
		                ITM.MIN_UNIT_UOM   UNIT_UOM,
		                ITM.BOX_UNIT_QTY   UNIT_QTY,
		                SUM(STC.STOCK_QTY) STOCK_QTY,
		                TRUNC(SUM(STC.STOCK_QTY)/(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))    BOX_QTY,
		                MOD(SUM(STC.STOCK_QTY),  (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))    EA_QTY    
		          FROM  LS010NM_G STC, CMITEM ITM
		         WHERE  STC.BRAND_CD                =    '100001'
		           AND  STC.ITEM_STATE              =    'X'                --반품
		           AND  STC.STOCK_QTY               !=    0
		           AND  STC.ITEM_CD                 =    ITM.ITEM_CD
				#if("$!{src_loc_sel}" == "")
		            AND  SUBSTR(STC.CENTER_CD,5,4) =    ''    --출발물류거점 (화면로딩시)
		            AND  ITM.RTN_HANDLER_CD = '$!{gubun}'
		            --AND  ITM.ITEM_DIV              =    'FERT'        --    'FERT' or'HAWA'
				#else
		            AND  SUBSTR(STC.CENTER_CD,5,4) =    '$!{src_loc_sel}'    --출발물류거점 (조회시)
		            --AND  ITM.ITEM_DIV              =    '$!{checked_multi}'        --    'FERT' or'HAWA'
		            AND  ITM.RTN_HANDLER_CD = '$!{gubun}'
				#end		    	 	
		         GROUP  BY SUBSTR(STC.CENTER_CD,5,4),ITM.ITEM_NM, STC.ITEM_CD,ITM.MIN_UNIT_UOM,ITM.BOX_UNIT_QTY
		         ORDER  BY STC.ITEM_CD
		        ) ST,
		       (
		       SELECT  IT.TRANS_DATE, IT.ITEM_ID, IT.SRC_LOC, SUM(QTY) IT_EA_QTY
		       FROM    IF_TRANS_PLAN IT
		       WHERE   IT.PLAN_TYPE = (SELECT  CD       -- 반품수송 : ZM3
		                               FROM    CODE_MST 
		                               WHERE   CD_GRP  =   'PLAN_TYPE'
		                               AND     CD_NAME =   '반품수송')
		       AND     TO_CHAR(IT.TRANS_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
		       AND     IT.SRC_LOC      = '$!{src_loc_sel}'
		       GROUP   BY IT.TRANS_DATE, IT.ITEM_ID, IT.SRC_LOC
		       )  IT
		WHERE  ST.ITEM_ID   =   IT.ITEM_ID(+)
		UNION	ALL
		SELECT  ST.ITEM_ID, 
		        ST.ITEM_NAME, 
		        ST.UNIT_UOM, 
		        ST.UNIT_QTY, 
		        ST.STOCK_QTY,
		        TRUNC((ST.STOCK_QTY - NVL(IT.IT_EA_QTY,0))/ DECODE(ST.UNIT_QTY,0,1,ST.UNIT_QTY))   BOX_QTY,
		        MOD((ST.STOCK_QTY - NVL(IT.IT_EA_QTY,0)), DECODE(ST.UNIT_QTY,0,1,ST.UNIT_QTY))     EA_QTY,
		        NVL(IT.IT_EA_QTY,0)  IT_STOCK_QTY  
		        --ST.BOX_QTY, 
		        --ST.EA_QTY,    
		FROM    (
		        SELECT  STC.ITEM_CD        ITEM_ID,
		                ITM.ITEM_NM        ITEM_NAME,
		                ITM.MIN_UNIT_UOM   UNIT_UOM,
		                ITM.BOX_UNIT_QTY   UNIT_QTY,
		                SUM(STC.STOCK_QTY) STOCK_QTY,
		                TRUNC(SUM(STC.STOCK_QTY)/(DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))    BOX_QTY,
		                MOD(SUM(STC.STOCK_QTY),  (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))    EA_QTY    
		          FROM  LS010NM_P STC, CMITEM ITM
		         WHERE  STC.BRAND_CD                =    '100001'
		           AND  STC.ITEM_STATE              =    'X'                --반품
		           AND  STC.STOCK_QTY               !=    0
		           AND  STC.ITEM_CD                 =    ITM.ITEM_CD
				#if("$!{src_loc_sel}" == "")
		            AND  SUBSTR(STC.CENTER_CD,5,4) =    ''    --출발물류거점 (화면로딩시)
		            AND  ITM.RTN_HANDLER_CD = '$!{gubun}'
		            --AND  ITM.ITEM_DIV              =    'FERT'        --    'FERT' or'HAWA'
				#else
		            AND  SUBSTR(STC.CENTER_CD,5,4) =    '$!{src_loc_sel}'    --출발물류거점 (조회시)
		            --AND  ITM.ITEM_DIV              =    '$!{checked_multi}'        --    'FERT' or'HAWA'
		            AND  ITM.RTN_HANDLER_CD = '$!{gubun}'
				#end		    	 	
		         GROUP  BY SUBSTR(STC.CENTER_CD,5,4),ITM.ITEM_NM, STC.ITEM_CD,ITM.MIN_UNIT_UOM,ITM.BOX_UNIT_QTY
		         ORDER  BY STC.ITEM_CD
		        ) ST,
		       (
		       SELECT  IT.TRANS_DATE, IT.ITEM_ID, IT.SRC_LOC, SUM(QTY) IT_EA_QTY
		       FROM    IF_TRANS_PLAN IT
		       WHERE   IT.PLAN_TYPE = (SELECT  CD       -- 반품수송 : ZM3
		                               FROM    CODE_MST 
		                               WHERE   CD_GRP  =   'PLAN_TYPE'
		                               AND     CD_NAME =   '반품수송')
		       AND     TO_CHAR(IT.TRANS_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
		       AND     IT.SRC_LOC      = '$!{src_loc_sel}'
		       GROUP   BY IT.TRANS_DATE, IT.ITEM_ID, IT.SRC_LOC
		       )  IT
		WHERE  ST.ITEM_ID   =   IT.ITEM_ID(+)
		ORDER  BY	1
	
	
	</query>
	
	<!-- 반품 수송계획 : VERSION 생성 -->
	<query id="rp_01110_returningProduct_list_create_01" fix="_user_id">
	
		INSERT INTO PLAN_VERSION_LOG
			(PERIOD_TYPE, RUN_DATE, RUN_SEQ, PLAN_STEP, CAT_ID, SUB_CAT, VERSION, SEQ, 
		 	 VERSION_DATE, START_DATE, SCH_START_DATE, END_DATE, STATUS, MADE_TYPE, MADE_DTTM, MADE_BY)
		SELECT  'DAILY_R'                       PERIOD_TYPE,
		        SYSDATE                         RUN_DATE,
		        1                               RUN_SEQ,
		        1                               PLAN_STEP,
		        'RP'                            CAT_ID,
		        'RP'                            SUB_CAT,
		        TO_CHAR(SYSDATE,'YYYYMMDD.HH24.MI')   VERSION,
		        1                               SEQ,
		        SYSDATE                         VERSION_DATE,
		        SYSDATE                         START_DATE,
		        SYSDATE                         SCH_START_DATE,
		        SYSDATE                         END_DATE,
		        27                              STATUS,
		        'AD'                            MADE_TYPE,
		        SYSDATE                         MADE_DTTM,
		        '$!{_user_id}'                  MADE_BY
	      FROM  DUAL
	
	</query>
	
	<!-- 반품 수송계획 : TRANS_PLAN 계획 생성 -->
	<query id="rp_01110_returningProduct_list_create_02" fix="_user_id tgt_loc trans_date truck_num"
		iterator="check_value rdc_id item_id box_qty ea_qty item_name cal_qty">
	
		INSERT INTO TRANS_PLAN
			(VERSION, SEQ, PLAN_TYPE, TRANS_DATE, TGT_LOC, SRC_LOC, TRUCK_SEQ, ITEM_ID, BRAND_NO, BRAND_LINE_NO, DESCRIPTION,
		 	 BASE_STK_QTY,BASE_STK_PLT, ADD_STK_QTY, ADD_STK_PLT, PROD_QTY, PROD_PLT, MOD_QTY, MADE_TYPE, MADE_DTTM, MADE_BY)
		SELECT  (SELECT  MAX(VERSION) 
		           FROM  PLAN_VERSION_LOG 
		          WHERE  PERIOD_TYPE = 'DAILY_R')  VERSION, -- MAX_VERSION
		        1                                  SEQ,
		        (SELECT  CM.CD
		           FROM  CODE_MST CM
		          WHERE  CM.CD_GRP = 'PLAN_TYPE'
		            AND  CM.CD_NAME = '반품수송')    PLAN_TYPE,
		        TO_DATE('$!{trans_date}','YYYY-MM-DD')      TRANS_DATE,
		        '$!{tgt_loc}'                      TGT_LOC,
		        '$!{rdc_id}'                  	   SRC_LOC,
		        '$!{truck_num}'                    TRUCK_SEQ,
		        '$!{item_id}'                      ITEM_ID,
		        ''								   BRAND_NO,
		        ''	                               BRAND_LINE_NO,
		        '$!{item_name}'                    DESCRIPTION,
		        $!{box_qty}                        BASE_STK_QTY,
		        f_getBoxPerPallet('$!{rdc_id}',$!{box_qty})	BASE_STK_PLT,
		        0                                  ADD_STK_QTY, 
		        0                                  ADD_STK_PLT, 
		        0                                  PROD_QTY, 
		        0                                  PROD_PLT,
		        '$!{cal_qty}'					   MOD_QTY,
		        'AD'                               MADE_TYPE, 
		        SYSDATE                            MADE_DTTM, 
		        '$!{_user_id}'                     MADE_BY  
		  FROM  DUAL
		 WHERE  '$!{check_value}' IS NOT NULL  
		 AND	'$!{tgt_loc}' != '$!{rdc_id}' -- 입고장과 출고장이 같은 경우 제외!
        
	
	</query>
	
	<!-- 반품 수송계획 : IF_TRANS_PLAN TABLE 생성 -->
	<query id="rp_01110_returningProduct_list_create_03">
		CALL SP_RP_98_CREATE_BRAND_NO_RE('CRE_DATA', SYSDATE, 1, 1, 'NA', SYSDATE)
	</query>
	
	<!-- 반품 수송계획 : 구분 조회조건-->
	<query id="code_mst_and_scrap_flag">
		SELECT  CD, CD_NAME 
		FROM    CODE_MST
		WHERE   CD_GRP = 'SCRAP_FLAG'
		AND     CAT01   =   '1' -- A3 폐기유상만 보여지도록
	</query>


<!--
=====================================================================================================
	수송계획 >> 분석정보
=====================================================================================================
--> 
	<!--
	======================================================================
		1. C/D 및 긴급 주문량 확인
	======================================================================
	-->
	
	<!-- C/D 및 긴급 주문량 확인 -->
	<query id="rp_02010_orderCrossDocking_list" paging="true">
		SELECT  DT.ITEM_ID, DT.ITEM_NAME,
                DECODE(SUM(DECODE(DT.CNT,1, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,1,  DT.QTY,0))) PO1,
                DECODE(SUM(DECODE(DT.CNT,2, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,2,  DT.QTY,0))) PO2,
                DECODE(SUM(DECODE(DT.CNT,3, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,3,  DT.QTY,0))) PO3,
                DECODE(SUM(DECODE(DT.CNT,4, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,4,  DT.QTY,0))) PO4,
                DECODE(SUM(DECODE(DT.CNT,5, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,5,  DT.QTY,0))) PO5,
                DECODE(SUM(DECODE(DT.CNT,6, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,6,  DT.QTY,0))) PO6,
                DECODE(SUM(DECODE(DT.CNT,7, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,7,  DT.QTY,0))) PO7,
                DECODE(SUM(DECODE(DT.CNT,8, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,8,  DT.QTY,0))) PO8,
                DECODE(SUM(DECODE(DT.CNT,9, DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,9,  DT.QTY,0))) PO9,
                DECODE(SUM(DECODE(DT.CNT,10,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,10, DT.QTY,0))) P10,
                DECODE(SUM(DECODE(DT.CNT,11,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,11, DT.QTY,0))) P11,
                DECODE(SUM(DECODE(DT.CNT,12,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,12, DT.QTY,0))) P12,
                DECODE(SUM(DECODE(DT.CNT,13,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,13, DT.QTY,0))) P13,
                DECODE(SUM(DECODE(DT.CNT,14,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,14, DT.QTY,0))) P14,
                DECODE(SUM(DECODE(DT.CNT,15,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,15, DT.QTY,0))) P15,
                DECODE(SUM(DECODE(DT.CNT,16,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,16, DT.QTY,0))) P16,
                DECODE(SUM(DECODE(DT.CNT,17,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,17, DT.QTY,0))) P17,
                DECODE(SUM(DECODE(DT.CNT,18,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,18, DT.QTY,0))) P18,
                DECODE(SUM(DECODE(DT.CNT,19,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,19, DT.QTY,0))) P19,
                DECODE(SUM(DECODE(DT.CNT,20,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,20, DT.QTY,0))) P20,
                DECODE(SUM(DECODE(DT.CNT,21,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,21, DT.QTY,0))) P21,
                DECODE(SUM(DECODE(DT.CNT,22,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,22, DT.QTY,0))) P22,
                DECODE(SUM(DECODE(DT.CNT,23,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,23, DT.QTY,0))) P23,
                DECODE(SUM(DECODE(DT.CNT,24,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,24, DT.QTY,0))) P24,
                DECODE(SUM(DECODE(DT.CNT,25,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,25, DT.QTY,0))) P25,
                DECODE(SUM(DECODE(DT.CNT,26,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,26, DT.QTY,0))) P26,
                DECODE(SUM(DECODE(DT.CNT,27,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,27, DT.QTY,0))) P27,
                DECODE(SUM(DECODE(DT.CNT,28,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,28, DT.QTY,0))) P28,
                DECODE(SUM(DECODE(DT.CNT,29,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,29, DT.QTY,0))) P29,
                DECODE(SUM(DECODE(DT.CNT,30,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,30, DT.QTY,0))) P30,
                DECODE(SUM(DECODE(DT.CNT,31,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,31, DT.QTY,0))) P31,
                DECODE(SUM(DECODE(DT.CNT,32,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,32, DT.QTY,0))) P32,
                DECODE(SUM(DECODE(DT.CNT,33,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,33, DT.QTY,0))) P33,
                DECODE(SUM(DECODE(DT.CNT,34,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,34, DT.QTY,0))) P34,
                DECODE(SUM(DECODE(DT.CNT,35,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,35, DT.QTY,0))) P35,
                DECODE(SUM(DECODE(DT.CNT,36,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,36, DT.QTY,0))) P36,
                DECODE(SUM(DECODE(DT.CNT,37,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,37, DT.QTY,0))) P37,
                DECODE(SUM(DECODE(DT.CNT,38,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,38, DT.QTY,0))) P38,
                DECODE(SUM(DECODE(DT.CNT,39,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,39, DT.QTY,0))) P39,
                DECODE(SUM(DECODE(DT.CNT,40,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,40, DT.QTY,0))) P40,
                DECODE(SUM(DECODE(DT.CNT,41,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,41, DT.QTY,0))) P41,
                DECODE(SUM(DECODE(DT.CNT,42,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,42, DT.QTY,0))) P42,
                DECODE(SUM(DECODE(DT.CNT,43,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,43, DT.QTY,0))) P43,
                DECODE(SUM(DECODE(DT.CNT,44,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,44, DT.QTY,0))) P44,
                DECODE(SUM(DECODE(DT.CNT,45,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,45, DT.QTY,0))) P45,
                DECODE(SUM(DECODE(DT.CNT,46,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,46, DT.QTY,0))) P46,
                DECODE(SUM(DECODE(DT.CNT,47,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,47, DT.QTY,0))) P47,
                DECODE(SUM(DECODE(DT.CNT,48,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,48, DT.QTY,0))) P48,
                DECODE(SUM(DECODE(DT.CNT,49,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,49, DT.QTY,0))) P49,
                DECODE(SUM(DECODE(DT.CNT,50,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,50, DT.QTY,0))) P50,
                DECODE(SUM(DECODE(DT.CNT,51,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,51, DT.QTY,0))) P51,
                DECODE(SUM(DECODE(DT.CNT,52,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,52, DT.QTY,0))) P52,
                DECODE(SUM(DECODE(DT.CNT,53,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,53, DT.QTY,0))) P53,
                DECODE(SUM(DECODE(DT.CNT,54,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,54, DT.QTY,0))) P54,
                DECODE(SUM(DECODE(DT.CNT,55,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,55, DT.QTY,0))) P55,
                DECODE(SUM(DECODE(DT.CNT,56,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,56, DT.QTY,0))) P56,
                DECODE(SUM(DECODE(DT.CNT,57,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,57, DT.QTY,0))) P57,
                DECODE(SUM(DECODE(DT.CNT,58,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,58, DT.QTY,0))) P58,
                DECODE(SUM(DECODE(DT.CNT,59,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,59, DT.QTY,0))) P59,
                DECODE(SUM(DECODE(DT.CNT,60,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,60, DT.QTY,0))) P60,
                DECODE(SUM(DECODE(DT.CNT,61,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,61, DT.QTY,0))) P61,
                DECODE(SUM(DECODE(DT.CNT,62,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,62, DT.QTY,0))) P62,
                DECODE(SUM(DECODE(DT.CNT,63,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,63, DT.QTY,0))) P63,
                DECODE(SUM(DECODE(DT.CNT,64,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,64, DT.QTY,0))) P64,
                DECODE(SUM(DECODE(DT.CNT,65,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,65, DT.QTY,0))) P65,
                DECODE(SUM(DECODE(DT.CNT,66,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,66, DT.QTY,0))) P66,
                DECODE(SUM(DECODE(DT.CNT,67,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,67, DT.QTY,0))) P67,
                DECODE(SUM(DECODE(DT.CNT,68,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,68, DT.QTY,0))) P68,
                DECODE(SUM(DECODE(DT.CNT,69,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,69, DT.QTY,0))) P69,
                DECODE(SUM(DECODE(DT.CNT,70,DT.QTY,0)), 0, NULL, SUM(DECODE(DT.CNT,70, DT.QTY,0))) P70     
          FROM (
                SELECT  TP.ITEM_ID, TP.ITEM_NAME, TP.QTY, DM.DC_ID, DM.DC_NAME, DM.CNT
                  FROM  (
                        SELECT  DM.DC_ID, DM.DC_NAME,
                                SUM(1) OVER (ORDER BY DM.DC_ID) CNT
                          FROM  DC_MST DM
                        ) DM,
                  #if( "$!{version}" == "" )<!-- 화면이 처음으로 로드되는 경우, 제품구분이 C/D 품목으로, MAX 버전과 SEQ, 현재 날짜가 자동으로 입력되어 조회됨. -->
                        (
                        SELECT  TP.VERSION, TP.SEQ, TP.TRANS_DATE, TP.TGT_LOC, TP.ITEM_ID, IM.ITEM_NAME, TP.QTY
                          FROM  (
                                SELECT  T.VERSION, T.SEQ, T.TRANS_DATE, T.TGT_LOC, T.ITEM_ID,
                                        SUM(T.BASE_STK_QTY + T.ADD_STK_QTY + T.PROD_QTY) QTY 
                                  FROM  TRANS_PLAN T,
		                                (
					                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
					                      FROM  PLAN_VERSION_LOG VL, 
					                            (SELECT  MAX(VL.VERSION) VERSION
					                               FROM  PLAN_VERSION_LOG VL
					                              WHERE  VL.PERIOD_TYPE = 'DAILY'
					                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
					                     WHERE  VL.VERSION = MV.VERSION
					                       AND  VL.PERIOD_TYPE = 'DAILY'
					                       AND  VL.CAT_ID = 'RP'
					                     GROUP  BY VL.VERSION     
					                    ) MV
		                         WHERE  T.VERSION = MV.VERSION
		                           AND  T.SEQ     = MV.SEQ
		                           AND  T.TRANS_DATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
                                 GROUP  BY T.VERSION, T.SEQ, T.TRANS_DATE, T.TGT_LOC, T.ITEM_ID
                                ) TP,
                                (
                                SELECT  IM.ITEM_ID, IM.ITEM_NAME 
                                  FROM  ITEM_MST IM
                                 WHERE  CROSDOCK_FLAG = 'Y'
                                ) IM
                         WHERE  TP.ITEM_ID = IM.ITEM_ID
                        ) TP
                  #elseif("$!{check_value}" == "cd") <!-- 제품 구분이 C/D품목인 경우.. -->
                        (
                        SELECT  TP.VERSION, TP.SEQ, TP.TRANS_DATE, TP.TGT_LOC, TP.ITEM_ID, IM.ITEM_NAME, TP.QTY
                          FROM  (
                                SELECT  T.VERSION, T.SEQ, T.TRANS_DATE, T.TGT_LOC, T.ITEM_ID,
                                        SUM(T.BASE_STK_QTY + T.ADD_STK_QTY + T.PROD_QTY) QTY 
                                  FROM  TRANS_PLAN T
                                 WHERE  T.VERSION = '$!{version}'
                                   AND  T.SEQ     = '$!{seq}'
                                   AND  T.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
                                 GROUP  BY T.VERSION, T.SEQ, T.TRANS_DATE, T.TGT_LOC, T.ITEM_ID
                                ) TP,
                                (
                                SELECT  IM.ITEM_ID, IM.ITEM_NAME 
                                  FROM  ITEM_MST IM
                                 WHERE  CROSDOCK_FLAG = 'Y'
                                ) IM
                         WHERE  TP.ITEM_ID = IM.ITEM_ID
                        ) TP
                  #else <!-- 제품 구분이 긴급 품목인 경우. -->
                  		(
                        -- 긴급 품목 선택시 
                        SELECT  T.VERSION, T.SEQ, T.TRANS_DATE, T.TGT_LOC, T.ITEM_ID, IM.ITEM_NAME,
                                SUM(T.BASE_STK_QTY + T.ADD_STK_QTY + T.PROD_QTY) QTY 
                          FROM  TRANS_PLAN T, ITEM_MST IM
                         WHERE  T.VERSION = '$!{version}'
                           AND  T.SEQ     = '$!{seq}'
                           AND  T.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
                           AND  T.ITEM_ID = IM.ITEM_ID
                         GROUP  BY T.VERSION, T.SEQ, T.TRANS_DATE, T.TGT_LOC, T.ITEM_ID,IM.ITEM_NAME
                        ) TP
                  #end
                 WHERE  DM.DC_ID = TP.TGT_LOC
                )DT
          GROUP BY DT.ITEM_ID, DT.ITEM_NAME
          ORDER BY DT.ITEM_ID
			 
	</query>
	
	<!-- C/D 및 긴급 주문량 확인 UI HEADER QUERY-->
	<query id="orderCrossDocking_list_header">
	
			-- C/D 주문량 조회 UI HEADER
			SELECT  MAX(DECODE(DM.CNT,1, DM.DC_NAME,' EMPTY')) NO1, MAX(DECODE(DM.CNT,2, DM.DC_NAME,' EMPTY')) NO2,
			        MAX(DECODE(DM.CNT,3, DM.DC_NAME,' EMPTY')) NO3, MAX(DECODE(DM.CNT,4, DM.DC_NAME,' EMPTY')) NO4,
			        MAX(DECODE(DM.CNT,5, DM.DC_NAME,' EMPTY')) NO5, MAX(DECODE(DM.CNT,6, DM.DC_NAME,' EMPTY')) NO6,
			        MAX(DECODE(DM.CNT,7, DM.DC_NAME,' EMPTY')) NO7, MAX(DECODE(DM.CNT,8, DM.DC_NAME,' EMPTY')) NO8,
			        MAX(DECODE(DM.CNT,9, DM.DC_NAME,' EMPTY')) NO9, MAX(DECODE(DM.CNT,10,DM.DC_NAME,' EMPTY')) N10,
			        MAX(DECODE(DM.CNT,11,DM.DC_NAME,' EMPTY')) N11, MAX(DECODE(DM.CNT,12,DM.DC_NAME,' EMPTY')) N12,
			        MAX(DECODE(DM.CNT,13,DM.DC_NAME,' EMPTY')) N13, MAX(DECODE(DM.CNT,14,DM.DC_NAME,' EMPTY')) N14,
			        MAX(DECODE(DM.CNT,15,DM.DC_NAME,' EMPTY')) N15, MAX(DECODE(DM.CNT,16,DM.DC_NAME,' EMPTY')) N16,
			        MAX(DECODE(DM.CNT,17,DM.DC_NAME,' EMPTY')) N17, MAX(DECODE(DM.CNT,18,DM.DC_NAME,' EMPTY')) N18,
			        MAX(DECODE(DM.CNT,19,DM.DC_NAME,' EMPTY')) N19, MAX(DECODE(DM.CNT,20,DM.DC_NAME,' EMPTY')) N20,
			        MAX(DECODE(DM.CNT,21,DM.DC_NAME,' EMPTY')) N21, MAX(DECODE(DM.CNT,22,DM.DC_NAME,' EMPTY')) N22,
			        MAX(DECODE(DM.CNT,23,DM.DC_NAME,' EMPTY')) N23, MAX(DECODE(DM.CNT,24,DM.DC_NAME,' EMPTY')) N24,
			        MAX(DECODE(DM.CNT,25,DM.DC_NAME,' EMPTY')) N25, MAX(DECODE(DM.CNT,26,DM.DC_NAME,' EMPTY')) N26,
			        MAX(DECODE(DM.CNT,27,DM.DC_NAME,' EMPTY')) N27, MAX(DECODE(DM.CNT,28,DM.DC_NAME,' EMPTY')) N28,
			        MAX(DECODE(DM.CNT,29,DM.DC_NAME,' EMPTY')) N29, MAX(DECODE(DM.CNT,30,DM.DC_NAME,' EMPTY')) N30,
			        MAX(DECODE(DM.CNT,31,DM.DC_NAME,' EMPTY')) N31, MAX(DECODE(DM.CNT,32,DM.DC_NAME,' EMPTY')) N32,
			        MAX(DECODE(DM.CNT,33,DM.DC_NAME,' EMPTY')) N33, MAX(DECODE(DM.CNT,34,DM.DC_NAME,' EMPTY')) N34,
			        MAX(DECODE(DM.CNT,35,DM.DC_NAME,' EMPTY')) N35, MAX(DECODE(DM.CNT,36,DM.DC_NAME,' EMPTY')) N36,
			        MAX(DECODE(DM.CNT,37,DM.DC_NAME,' EMPTY')) N37, MAX(DECODE(DM.CNT,38,DM.DC_NAME,' EMPTY')) N38,
			        MAX(DECODE(DM.CNT,39,DM.DC_NAME,' EMPTY')) N39, MAX(DECODE(DM.CNT,40,DM.DC_NAME,' EMPTY')) N40,
			        MAX(DECODE(DM.CNT,41,DM.DC_NAME,' EMPTY')) N41, MAX(DECODE(DM.CNT,42,DM.DC_NAME,' EMPTY')) N42,
			        MAX(DECODE(DM.CNT,43,DM.DC_NAME,' EMPTY')) N43, MAX(DECODE(DM.CNT,44,DM.DC_NAME,' EMPTY')) N44,
			        MAX(DECODE(DM.CNT,45,DM.DC_NAME,' EMPTY')) N45, MAX(DECODE(DM.CNT,46,DM.DC_NAME,' EMPTY')) N46,
			        MAX(DECODE(DM.CNT,47,DM.DC_NAME,' EMPTY')) N47, MAX(DECODE(DM.CNT,48,DM.DC_NAME,' EMPTY')) N48,
			        MAX(DECODE(DM.CNT,49,DM.DC_NAME,' EMPTY')) N49, MAX(DECODE(DM.CNT,50,DM.DC_NAME,' EMPTY')) N50,
			        MAX(DECODE(DM.CNT,51,DM.DC_NAME,' EMPTY')) N51, MAX(DECODE(DM.CNT,52,DM.DC_NAME,' EMPTY')) N52,
			        MAX(DECODE(DM.CNT,53,DM.DC_NAME,' EMPTY')) N53, MAX(DECODE(DM.CNT,54,DM.DC_NAME,' EMPTY')) N54,
			        MAX(DECODE(DM.CNT,55,DM.DC_NAME,' EMPTY')) N55, MAX(DECODE(DM.CNT,56,DM.DC_NAME,' EMPTY')) N56,
			        MAX(DECODE(DM.CNT,57,DM.DC_NAME,' EMPTY')) N57, MAX(DECODE(DM.CNT,58,DM.DC_NAME,' EMPTY')) N58,
			        MAX(DECODE(DM.CNT,59,DM.DC_NAME,' EMPTY')) N59, MAX(DECODE(DM.CNT,60,DM.DC_NAME,' EMPTY')) N60,
			        MAX(DECODE(DM.CNT,61,DM.DC_NAME,' EMPTY')) N61, MAX(DECODE(DM.CNT,62,DM.DC_NAME,' EMPTY')) N62,
			        MAX(DECODE(DM.CNT,63,DM.DC_NAME,' EMPTY')) N63, MAX(DECODE(DM.CNT,64,DM.DC_NAME,' EMPTY')) N64,
			        MAX(DECODE(DM.CNT,65,DM.DC_NAME,' EMPTY')) N65, MAX(DECODE(DM.CNT,66,DM.DC_NAME,' EMPTY')) N66,
			        MAX(DECODE(DM.CNT,67,DM.DC_NAME,' EMPTY')) N67, MAX(DECODE(DM.CNT,66,DM.DC_NAME,' EMPTY')) N68,
			        MAX(DECODE(DM.CNT,69,DM.DC_NAME,' EMPTY')) N69, MAX(DECODE(DM.CNT,66,DM.DC_NAME,' EMPTY')) N70
			  FROM  (
			        SELECT  DM.DC_ID, DM.DC_SHORT_NAME DC_NAME,
			                SUM(1) OVER (ORDER BY DM.DC_ID) CNT
			          FROM  DC_MST DM
			         ORDER  BY DM.DC_ID
			        ) DM
	
	</query>
	
	<!-- C/D 및 긴급 주문량 확인 UI HEADER WIDTH 구하는 QUERY-->
	<query id="orderCrossDocking_list_header_width">
	
		-- Header WIDTH
		SELECT  NVL(SUM(DECODE(DT.CNT,1, 70,0)),0) NO1,NVL(SUM(DECODE(DT.CNT,2, 70,0)),0) NO2,
		        NVL(SUM(DECODE(DT.CNT,3, 70,0)),0) NO3,NVL(SUM(DECODE(DT.CNT,4, 70,0)),0) NO4,
		        NVL(SUM(DECODE(DT.CNT,5, 70,0)),0) NO5,NVL(SUM(DECODE(DT.CNT,6, 70,0)),0) NO6,
		        NVL(SUM(DECODE(DT.CNT,7, 70,0)),0) NO7,NVL(SUM(DECODE(DT.CNT,8, 70,0)),0) NO8,
		        NVL(SUM(DECODE(DT.CNT,9, 70,0)),0) NO9,NVL(SUM(DECODE(DT.CNT,10,70,0)),0) N10,
		        NVL(SUM(DECODE(DT.CNT,11,70,0)),0) N11,NVL(SUM(DECODE(DT.CNT,12,70,0)),0) N12,
		        NVL(SUM(DECODE(DT.CNT,13,70,0)),0) N13,NVL(SUM(DECODE(DT.CNT,14,70,0)),0) N14,
		        NVL(SUM(DECODE(DT.CNT,15,70,0)),0) N15,NVL(SUM(DECODE(DT.CNT,16,70,0)),0) N16,
		        NVL(SUM(DECODE(DT.CNT,17,70,0)),0) N17,NVL(SUM(DECODE(DT.CNT,18,70,0)),0) N18,
		        NVL(SUM(DECODE(DT.CNT,19,70,0)),0) N19,NVL(SUM(DECODE(DT.CNT,20,70,0)),0) N20,
		        NVL(SUM(DECODE(DT.CNT,21,70,0)),0) N21,NVL(SUM(DECODE(DT.CNT,22,70,0)),0) N22,
		        NVL(SUM(DECODE(DT.CNT,23,70,0)),0) N23,NVL(SUM(DECODE(DT.CNT,24,70,0)),0) N24,
		        NVL(SUM(DECODE(DT.CNT,25,70,0)),0) N25,NVL(SUM(DECODE(DT.CNT,26,70,0)),0) N26,
		        NVL(SUM(DECODE(DT.CNT,27,70,0)),0) N27,NVL(SUM(DECODE(DT.CNT,28,70,0)),0) N28,
		        NVL(SUM(DECODE(DT.CNT,29,70,0)),0) N29,NVL(SUM(DECODE(DT.CNT,30,70,0)),0) N30,
		        NVL(SUM(DECODE(DT.CNT,31,70,0)),0) N31,NVL(SUM(DECODE(DT.CNT,32,70,0)),0) N32,
		        NVL(SUM(DECODE(DT.CNT,33,70,0)),0) N33,NVL(SUM(DECODE(DT.CNT,34,70,0)),0) N34,
		        NVL(SUM(DECODE(DT.CNT,35,70,0)),0) N35,NVL(SUM(DECODE(DT.CNT,36,70,0)),0) N36,
		        NVL(SUM(DECODE(DT.CNT,37,70,0)),0) N37,NVL(SUM(DECODE(DT.CNT,38,70,0)),0) N38,
		        NVL(SUM(DECODE(DT.CNT,39,70,0)),0) N39,NVL(SUM(DECODE(DT.CNT,40,70,0)),0) N40,
		        NVL(SUM(DECODE(DT.CNT,41,70,0)),0) N41,NVL(SUM(DECODE(DT.CNT,42,70,0)),0) N42,
		        NVL(SUM(DECODE(DT.CNT,43,70,0)),0) N43,NVL(SUM(DECODE(DT.CNT,44,70,0)),0) N44,
		        NVL(SUM(DECODE(DT.CNT,45,70,0)),0) N45,NVL(SUM(DECODE(DT.CNT,46,70,0)),0) N46,
		        NVL(SUM(DECODE(DT.CNT,47,70,0)),0) N47,NVL(SUM(DECODE(DT.CNT,48,70,0)),0) N48,
		        NVL(SUM(DECODE(DT.CNT,49,70,0)),0) N49,NVL(SUM(DECODE(DT.CNT,50,70,0)),0) N50,
		        NVL(SUM(DECODE(DT.CNT,51,70,0)),0) N51,NVL(SUM(DECODE(DT.CNT,52,70,0)),0) N52,
		        NVL(SUM(DECODE(DT.CNT,53,70,0)),0) N53,NVL(SUM(DECODE(DT.CNT,54,70,0)),0) N54,
		        NVL(SUM(DECODE(DT.CNT,55,70,0)),0) N55,NVL(SUM(DECODE(DT.CNT,56,70,0)),0) N56,
		        NVL(SUM(DECODE(DT.CNT,57,70,0)),0) N57,NVL(SUM(DECODE(DT.CNT,58,70,0)),0) N58,
		        NVL(SUM(DECODE(DT.CNT,59,70,0)),0) N59,NVL(SUM(DECODE(DT.CNT,60,70,0)),0) N60,
		        NVL(SUM(DECODE(DT.CNT,61,70,0)),0) N61,NVL(SUM(DECODE(DT.CNT,62,70,0)),0) N62,
		        NVL(SUM(DECODE(DT.CNT,63,70,0)),0) N63,NVL(SUM(DECODE(DT.CNT,64,70,0)),0) N64,
		        NVL(SUM(DECODE(DT.CNT,65,70,0)),0) N65,NVL(SUM(DECODE(DT.CNT,66,70,0)),0) N66,
		        NVL(SUM(DECODE(DT.CNT,67,70,0)),0) N67,NVL(SUM(DECODE(DT.CNT,68,70,0)),0) N68,
		        NVL(SUM(DECODE(DT.CNT,69,70,0)),0) N69,NVL(SUM(DECODE(DT.CNT,70,70,0)),0) N70     
		  FROM (			  
		#if( "$!{version}" == "" )<!-- 화면이 처음으로 로드되는 경우, 제품구분이 C/D 품목으로, MAX 버전과 SEQ, 현재 날짜가 자동으로 입력되어 조회됨. -->
		        SELECT  DM.DC_ID, DM.DC_NAME, DM.CNT
		          FROM  (
		                SELECT  DM.DC_ID, DM.DC_NAME,
		                        SUM(1) OVER (ORDER BY DM.DC_ID) CNT
		                  FROM  DC_MST DM
		                ) DM,
		                (
		                SELECT  DISTINCT TP.TGT_LOC
		                  FROM  (
		                        SELECT  T.TGT_LOC, T.ITEM_ID
		                          FROM  TRANS_PLAN T,
		                                (
					                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
					                      FROM  PLAN_VERSION_LOG VL, 
					                            (SELECT  MAX(VL.VERSION) VERSION
					                               FROM  PLAN_VERSION_LOG VL
					                              WHERE  VL.PERIOD_TYPE = 'DAILY'
					                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
					                     WHERE  VL.VERSION = MV.VERSION
					                       AND  VL.PERIOD_TYPE = 'DAILY'
					                       AND  VL.CAT_ID = 'RP'
					                     GROUP  BY VL.VERSION     
					                    ) MV
		                         WHERE  T.VERSION = MV.VERSION
		                           AND  T.SEQ     = MV.SEQ
		                           AND  T.TRANS_DATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
		                        ) TP,
		                        (
		                        SELECT  IM.ITEM_ID, IM.ITEM_NAME 
		                          FROM  ITEM_MST IM
		                         WHERE  CROSDOCK_FLAG = 'Y'
		                        ) IM
		                 WHERE  TP.ITEM_ID = IM.ITEM_ID
		                ) TP
		         WHERE  DM.DC_ID = TP.TGT_LOC
		#elseif("$!{check_value}" == "cd") <!-- 제품 구분이 C/D품목인 경우.. -->
				SELECT  DM.DC_ID, DM.DC_NAME, DM.CNT
		          FROM  (
		                SELECT  DM.DC_ID, DM.DC_NAME,
		                        SUM(1) OVER (ORDER BY DM.DC_ID) CNT
		                  FROM  DC_MST DM
		                ) DM,
		                (
		                -- C/D 품목 선택시
		                SELECT  DISTINCT TP.TGT_LOC
		                  FROM  (
		                        SELECT  T.TGT_LOC, T.ITEM_ID
		                          FROM  TRANS_PLAN T
		                         WHERE  T.VERSION = '$!{version}'
		                           AND  T.SEQ     = '$!{seq}'
		                           AND  T.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
		                        ) TP,
		                        (
		                        SELECT  IM.ITEM_ID, IM.ITEM_NAME 
		                          FROM  ITEM_MST IM
		                         WHERE  CROSDOCK_FLAG = 'Y'
		                        ) IM
		                 WHERE  TP.ITEM_ID = IM.ITEM_ID
		                ) TP
		         WHERE  DM.DC_ID = TP.TGT_LOC
		#else <!-- 제품 구분이 긴급 품목인 경우. -->
				SELECT  DM.DC_ID, DM.DC_NAME, DM.CNT
		          FROM  (
		                SELECT  DM.DC_ID, DM.DC_NAME,
		                        SUM(1) OVER (ORDER BY DM.DC_ID) CNT
		                  FROM  DC_MST DM
		                ) DM,
		                (
		                -- 긴급 품목 선택시 
		                SELECT  DISTINCT T.TGT_LOC
		                  FROM  TRANS_PLAN T
		                 WHERE  T.VERSION = '$!{version}'
		                   AND  T.SEQ     = '$!{seq}'
		                   AND  T.TRANS_DATE = TO_DATE('$!{trans_date}','YYYY-MM-DD')
		                ) TP
		         WHERE  DM.DC_ID = TP.TGT_LOC
		#end	      
		        )DT
        	
    </query>
    
    
    <!--
	======================================================================
		2. 보충계획 현황
	======================================================================
	-->
	
	<!-- 보충계획 현황 조회 -->
	<query id="rp_02020_replenishmentPlan_list" paging="true">
		
		<!-- 화면이 처음으로 로드되는 경우, MAX 버전과 SEQ, 현재 날짜가 자동으로 입력되어 조회됨. -->
		
        -- 1. 보충수량과 재고수량, 목표재고를 구하기 위해서 2, 5를 OUTER JOIN
        SELECT  SUP.TGT_NAME, SUP.SRC_NAME, SUP.ITEM_ID, SUP.ITEM_NAME, SUP.SUPPLY_QTY, SUP.SUPPLY_PLT,
                NVL(SUP.STOCK_QTY,0) STOCK_QTY, NVL(SUP.STOCK_PALET,0) STOCK_PLT, 
                NVL(SP.SAFETY_STOCK,0) SAFETY_STOCK, NVL(SP.SAFETY_STOCK_PALET,0) SAFETY_PLT
          FROM  (
                -- 2. 보충수량과 재고수량의 값을 구하기 위해서 3,4를 OUTER JOIN
                SELECT  SU.TGT_LOC, SU.TGT_NAME, SU.SRC_NAME, SU.ITEM_ID, SU.ITEM_NAME, SU.SUPPLY_QTY, SU.SUPPLY_PLT,
                        ST.STOCK_QTY, ST.STOCK_PALET
                  FROM  (
                        -- 3. 보충수량(박스, 팔레트 계산 안하고, TRANS_PLAN에서 직접 가져옮)
                        SELECT  TP.TGT_LOC, DM1.DC_NAME TGT_NAME, TP.SRC_LOC, DM2.DC_NAME SRC_NAME, 
                                TP.ITEM_ID, IM.ITEM_NAME, 
                                SUM(TP.BASE_STK_QTY + TP.ADD_STK_QTY + TP.PROD_QTY) SUPPLY_QTY,                                    
                                SUM(TP.BASE_STK_PLT + TP.ADD_STK_PLT + TP.PROD_PLT) SUPPLY_PLT
                          FROM  TRANS_PLAN TP, DC_MST DM1, DC_MST DM2, ITEM_MST IM
                         WHERE  TP.TGT_LOC = DM1.DC_ID
                           AND  TP.SRC_LOC = DM2.DC_ID
                           AND  TP.ITEM_ID = IM.ITEM_ID
                           AND  TP.VERSION = '$!{version}'
                           AND  TP.SEQ = '$!{seq}'
                           AND  TP.TRANS_DATE = TO_DATE('$!{supply_day}','YYYY-MM-DD')
                           [AND  TP.TGT_LOC = '${tgt_loc_sel}']
		                   [AND  TP.SRC_LOC = '${src_loc_sel}'] 
		                 GROUP  BY TP.TGT_LOC, DM1.DC_NAME, TP.SRC_LOC, DM2.DC_NAME, TP.ITEM_ID, IM.ITEM_NAME                               
                        ) SU,
                        (
                        -- 4. 재고수량( 박스 수량은 STOCK_PLAN의 STOCK_QTY로하고, 팔레트는 BOX_PER_PALET를 구하여 처리함.)
                        SELECT  STP.LOC_ID, STP.ITEM_ID, STP.STOCK_QTY, STP.STOCK_PALET
                          FROM  (
                                -- 자사 생산제품 : ITYPE = 'FERT'
		                        -- 자사 생산제품인 경우 ITEM_DTL 에서 BOX_PER_PALET 을 참조
                                SELECT  S.LOC_ID, S.ITEM_ID, S.STOCK_QTY, 
                                        (S.STOCK_QTY/NVL(DECODE(ID.BOX_PER_PALET,0,1,ID.BOX_PER_PALET),1)) STOCK_PALET 
                                  FROM  STOCK_PLAN S, ITEM_MST IM, ITEM_DTL ID, DC_MST DM
                                 WHERE  S.ITEM_ID = IM.ITEM_ID
                                   AND 	IM.ITYPE = ID.ITYPE
                                   AND 	IM.ITEM_ID = ID.ITEM_ID
                                   AND 	S.LOC_ID = DM.DC_ID
                                   AND 	ID.PLANT_ID = DM.PLANT_ID
                                   AND 	S.MADE_TYPE != 'DE'
                                   AND 	IM.MADE_TYPE != 'DE'
                                   AND 	ID.MADE_TYPE != 'DE'
                                   AND 	DM.MADE_TYPE != 'DE'
                                   AND  S.VERSION = '$!{version}'
                                   AND  S.SEQ = '$!{seq}'
                                   AND  S.STOCK_DATE = TO_DATE('$!{supply_day}','YYYY-MM-DD')
                                   AND 	IM.ITYPE = 'FERT' -- 자사 생산 제품           
                                UNION ALL
                                -- 자사 생산제품 : ITYPE = 'FERT'
		                        -- 자사 생산제품 중 ITEM_DTL 에서 BOX_PER_PALET 을 참조할 수 없는 경우 ITEM_MST 에서 BOX_PER_PALET 을 참조
                                SELECT  S.LOC_ID, S.ITEM_ID, S.STOCK_QTY, 
                                        (S.STOCK_QTY/NVL(DECODE(IM.BOX_PER_PALET,0,1,IM.BOX_PER_PALET),1)) STOCK_PALET 
		                          FROM  STOCK_PLAN S, ITEM_MST IM, DC_MST DM
		                         WHERE  S.ITEM_ID = IM.ITEM_ID
                                   AND 	S.LOC_ID = DM.DC_ID
                                   AND 	S.MADE_TYPE != 'DE'
                                   AND 	IM.MADE_TYPE != 'DE'
                                   AND 	DM.MADE_TYPE != 'DE'
                                   AND  S.VERSION = '$!{version}'
		                           AND  S.SEQ = '$!{seq}'
		                           AND  S.STOCK_DATE = TO_DATE('$!{supply_day}','YYYY-MM-DD')
                                   AND 	IM.ITYPE = 'FERT' -- 자사 생산제품이 아닌 제품
                                   AND 	IM.ITEM_ID NOT IN (
                                            SELECT 	ID.ITEM_ID
                                              FROM 	ITEM_DTL ID, DC_MST DM
                                             WHERE 	ID.PLANT_ID = DM.PLANT_ID
                                               AND  DM.DC_ID = S.LOC_ID
                                               AND 	ID.ITYPE = 'FERT' -- 자사 생산제품
                                               AND 	ID.MADE_TYPE != 'DE'
                                               AND 	DM.MADE_TYPE != 'DE'
                                        )
                                UNION ALL 
                                -- 자사 생산제품이 아닌 제품 : ITYPE = 'HAWA
                                -- 자사 생산제품이 아닌 경우 ITEM_MST 에서 BOX_PER_PALET 을 참조
                                SELECT  S.LOC_ID, S.ITEM_ID, S.STOCK_QTY, 
                                        (S.STOCK_QTY/NVL(DECODE(IM.BOX_PER_PALET,0,1,IM.BOX_PER_PALET),1)) STOCK_PALET  
		                          FROM  STOCK_PLAN S, ITEM_MST IM, DC_MST DM
		                         WHERE  S.ITEM_ID = IM.ITEM_ID
                                   AND 	S.LOC_ID = DM.DC_ID
                                   AND 	S.MADE_TYPE != 'DE'
                                   AND 	IM.MADE_TYPE != 'DE'
                                   AND 	DM.MADE_TYPE != 'DE'
                                   AND  S.VERSION = '$!{version}'
		                           AND  S.SEQ = '$!{seq}'
		                           AND  S.STOCK_DATE = TO_DATE('$!{supply_day}','YYYY-MM-DD') 
                                   AND 	IM.ITYPE = 'HAWA' -- 자사 생산제품이 아닌 제품                                      
                                ) STP
                        ) ST
                 WHERE  SU.TGT_LOC = ST.LOC_ID(+)
                   AND  SU.ITEM_ID = ST.ITEM_ID(+)
                ) SUP,
                (
                -- 5. 목표재고 ( 박스 수량은 STOCK_POLICY_QTY의 MIN_STOCK로하고, 팔레트는 BOX_PER_PALET를 구하여 처리함.)
                SELECT  SPP.LOC_ID, SPP.ITEM_ID, SPP.SAFETY_STOCK, SPP.SAFETY_STOCK_PALET
                  FROM  (
                        -- 자사 생산제품 : ITYPE = 'FERT'
		                -- 자사 생산제품인 경우 ITEM_DTL 에서 BOX_PER_PALET 을 참조
                        SELECT  S.LOC_ID, S.ITEM_ID, 
                                CASE WHEN TO_DATE('$!{supply_day}','YYYY-MM-DD') &gt;= FROM_DATE AND
                                          TO_DATE('$!{supply_day}', 'YYYY-MM-DD') &lt;= TO_DATE
                                     THEN S.SAFETY_STOCK + S.CAMP_STOC + SAVE_STOC
                                     ELSE S.SAFETY_STOCK + S.CAMP_STOC
                                END SAFETY_STOCK, 
                                ((CASE WHEN TO_DATE('$!{supply_day}','YYYY-MM-DD') &gt;= FROM_DATE AND
                                          TO_DATE('$!{supply_day}', 'YYYY-MM-DD') &lt;= TO_DATE
                                     THEN S.SAFETY_STOCK + S.CAMP_STOC + SAVE_STOC
                                     ELSE S.SAFETY_STOCK + S.CAMP_STOC
                                END)/NVL(DECODE(ID.BOX_PER_PALET,0,100,ID.BOX_PER_PALET),100)) SAFETY_STOCK_PALET 
                          FROM  STOCK_POLICY_QTY S, ITEM_MST IM, ITEM_DTL ID, DC_MST DM
                         WHERE 	S.ITEM_ID = IM.ITEM_ID
                           AND 	IM.ITYPE = ID.ITYPE
                           AND 	IM.ITEM_ID = ID.ITEM_ID
                           AND 	S.LOC_ID = DM.DC_ID
                           AND 	ID.PLANT_ID = DM.PLANT_ID
                           AND 	IM.MADE_TYPE != 'DE'
                           AND 	ID.MADE_TYPE != 'DE'
                           AND 	DM.MADE_TYPE != 'DE'
                           AND  S.WORK_DATE = (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
                           AND 	IM.ITYPE = 'FERT' -- 자사 생산 제품
                        UNION  ALL
                        -- 자사 생산제품 : ITYPE = 'FERT'
		                -- 자사 생산제품 중 ITEM_DTL 에서 BOX_PER_PALET 을 참조할 수 없는 경우 ITEM_MST 에서 BOX_PER_PALET 을 참조
                        SELECT  S.LOC_ID, S.ITEM_ID,  
                                CASE WHEN TO_DATE('$!{supply_day}','YYYY-MM-DD') &gt;= FROM_DATE AND
                                          TO_DATE('$!{supply_day}', 'YYYY-MM-DD') &lt;= TO_DATE
                                     THEN S.SAFETY_STOCK + S.CAMP_STOC + SAVE_STOC
                                     ELSE S.SAFETY_STOCK + S.CAMP_STOC
                                END SAFETY_STOCK, 
                                ((CASE WHEN TO_DATE('$!{supply_day}','YYYY-MM-DD') &gt;= FROM_DATE AND
                                          TO_DATE('$!{supply_day}', 'YYYY-MM-DD') &lt;= TO_DATE
                                     THEN S.SAFETY_STOCK + S.CAMP_STOC + SAVE_STOC
                                     ELSE S.SAFETY_STOCK + S.CAMP_STOC
                                END)/NVL(DECODE(IM.BOX_PER_PALET,0,100,IM.BOX_PER_PALET),100)) SAFETY_STOCK_PALET 
		                  FROM  STOCK_POLICY_QTY S, ITEM_MST IM, DC_MST DM
                         WHERE 	S.ITEM_ID = IM.ITEM_ID
                           AND 	S.LOC_ID = DM.DC_ID
                           AND 	IM.MADE_TYPE != 'DE'
                           AND 	DM.MADE_TYPE != 'DE'
                           AND  S.WORK_DATE = (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
                           AND 	IM.ITYPE = 'FERT' -- 자사 생산제품이 아닌 제품
                           AND 	IM.ITEM_ID NOT IN (
                                    SELECT 	ID.ITEM_ID
                                      FROM 	ITEM_DTL ID, DC_MST DM
                                     WHERE 	ID.PLANT_ID = DM.PLANT_ID
                                       AND  DM.DC_ID = S.LOC_ID
                                       AND 	ID.ITYPE = 'FERT' -- 자사 생산제품
                                       AND 	ID.MADE_TYPE != 'DE'
                                       AND 	DM.MADE_TYPE != 'DE'
                                )
                        UNION  ALL
                        -- 자사 생산제품이 아닌 제품 : ITYPE = 'HAWA
                        -- 자사 생산제품이 아닌 경우 ITEM_MST 에서 BOX_PER_PALET 을 참조
                        SELECT  S.LOC_ID, S.ITEM_ID, 
                                CASE WHEN TO_DATE('$!{supply_day}','YYYY-MM-DD') &gt;= FROM_DATE AND
                                          TO_DATE('$!{supply_day}', 'YYYY-MM-DD') &lt;= TO_DATE
                                     THEN S.SAFETY_STOCK + S.CAMP_STOC + SAVE_STOC
                                     ELSE S.SAFETY_STOCK + S.CAMP_STOC
                                END SAFETY_STOCK, 
                                ((CASE WHEN TO_DATE('$!{supply_day}','YYYY-MM-DD') &gt;= FROM_DATE AND
                                          TO_DATE('$!{supply_day}', 'YYYY-MM-DD') &lt;= TO_DATE
                                     THEN S.SAFETY_STOCK + S.CAMP_STOC + SAVE_STOC
                                     ELSE S.SAFETY_STOCK + S.CAMP_STOC
                                END)/NVL(DECODE(IM.BOX_PER_PALET,0,100,IM.BOX_PER_PALET),100)) SAFETY_STOCK_PALET 
		                  FROM  STOCK_POLICY_QTY S, ITEM_MST IM, DC_MST DM
                         WHERE 	S.ITEM_ID = IM.ITEM_ID
                           AND 	S.LOC_ID = DM.DC_ID
                           AND 	IM.MADE_TYPE != 'DE'
                           AND 	DM.MADE_TYPE != 'DE'
                           AND  S.WORK_DATE = (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
                           AND 	IM.ITYPE = 'HAWA' -- 자사 생산제품이 아닌 제품
                        ) SPP
                ) SP
         WHERE  SUP.TGT_LOC = SP.LOC_ID(+)
           AND  SUP.ITEM_ID = SP.ITEM_ID(+)
         ORDER  BY  SUP.TGT_NAME, SUP.SRC_NAME, SUP.ITEM_ID
			
	</query>
	
	<!--
	======================================================================
		3. 예상재고 현황
	======================================================================
	-->
	
	<!-- 예상재고 현황 조회 -->
	<query id="rp_02030_inventoryProjection_list" paging="true">
			
		-- (1). 총재고 2일치, CDC 재고 2일치, RDC 재고 2일치를 각각 구한후 UNION ALL 해줌
        -- (2). UI 형태대로 데이타를 만들기 위해서 GROUP BY해서 각각의 수량을 SUM함.
        -- (3). 일수를 구할 때 필요한 3주일 평균 판매실적(SALES_ACT_RECENT TABLE)을 구함.
        -- (4). ITEM_MST에 DIVISION 컬럼의 데이타로 조회 조건을 걸어둠.
        -- (5). (2)와 (3)을 ITEM_ID로 JOIN하여 일수를 구함. 
	    SELECT  ST.ITEM_ID, IM.ITEM_NAME,
		        SUM(DECODE(STOCK_DATE, TO_DATE('$!{stock_date}','YYYY-MM-DD'),   ST.TOTAL,0))             TOTAL_STOCK_1,
		        SUM(DECODE(STOCK_DATE, TO_DATE('$!{stock_date}','YYYY-MM-DD'),   ST.TOTAL,0))
		        /DECODE(NVL(SA.AVG_SLR,1), 0, 1, NVL(SA.AVG_SLR,1))  TOTAL_NUM_1,
		        SUM(DECODE(STOCK_DATE, TO_DATE('$!{stock_date}','YYYY-MM-DD'),   ST.CDC,  0))             CDC_STOCK_1,
		        SUM(DECODE(STOCK_DATE, TO_DATE('$!{stock_date}','YYYY-MM-DD'),   ST.CDC,  0))
		        /DECODE(NVL(SA.AVG_SLR,1), 0, 1, NVL(SA.AVG_SLR,1))  CDC_NUM_1,
		        SUM(DECODE(STOCK_DATE, TO_DATE('$!{stock_date}','YYYY-MM-DD'),   ST.RDC,  0))             RDC_STOCK_1,
		        SUM(DECODE(STOCK_DATE, TO_DATE('$!{stock_date}','YYYY-MM-DD'),   ST.RDC,  0))
		        /DECODE(NVL(SA.AVG_SLR,1), 0, 1, NVL(SA.AVG_SLR,1))  RDC_NUM_1,
		        SUM(DECODE(STOCK_DATE,(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1),ST.TOTAL,0))             TOTAL_STOCK_2,
		        SUM(DECODE(STOCK_DATE,(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1),ST.TOTAL,0))
		        /DECODE(NVL(SA.AVG_SLR,1), 0, 1, NVL(SA.AVG_SLR,1))  TOTAL_NUM_2,
		        SUM(DECODE(STOCK_DATE,(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1),ST.CDC,  0))             CDC_STOCK_2,
		        SUM(DECODE(STOCK_DATE,(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1),ST.CDC,  0))
		        /DECODE(NVL(SA.AVG_SLR,1), 0, 1, NVL(SA.AVG_SLR,1))  CDC_NUM_2,
		        SUM(DECODE(STOCK_DATE,(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1),ST.RDC,  0))             RDC_STOCK_2,
		        SUM(DECODE(STOCK_DATE,(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1),ST.RDC,  0))
		        /DECODE(NVL(SA.AVG_SLR,1), 0, 1, NVL(SA.AVG_SLR,1))  RDC_NUM_2
		  FROM  (
		        SELECT  SP.ITEM_ID, SP.STOCK_DATE, SUM(SP.TOTAL_STOCK) TOTAL, SUM(SP.CDC_STOCK) CDC, SUM(SP.RDC_STOCK) RDC
		          FROM  ( 
		                -- 총재고 2일치 
		                SELECT  SP.ITEM_ID, SP.STOCK_DATE, SUM(SP.STOCK_QTY) TOTAL_STOCK, 0 CDC_STOCK, 0 RDC_STOCK
		                  FROM  STOCK_PLAN SP
		                 WHERE  SP.VERSION = '$!{version}'
		                   AND  SP.SEQ = '$!{seq}'
		                   AND  SP.STOCK_DATE BETWEEN TO_DATE('$!{stock_date}','YYYY-MM-DD') AND (TO_DATE('$!{stock_date}','YYYY-MM-DD')+1)
		                 GROUP  BY SP.ITEM_ID, SP.STOCK_DATE
		                UNION ALL
		                -- CDC 재고 2일치 
		                SELECT  SP.ITEM_ID, SP.STOCK_DATE, 0 TOTAL_STOCK, SUM(SP.STOCK_QTY) CDC_STOCK, 0 RDC_STOCK
		                  FROM  STOCK_PLAN SP, DC_MST DM
		                 WHERE  SP.VERSION = '$!{version}'
		                   AND  SP.SEQ = '$!{seq}'
		                   AND  SP.STOCK_DATE BETWEEN TO_DATE('$!{stock_date}','YYYY-MM-DD') AND (TO_DATE('$!{stock_date}','YYYY-MM-DD')+1)
		                   AND  SP.LOC_ID = DM.DC_ID
		                   AND  DM.CDC_FLAG = 'Y'
		                 GROUP  BY SP.ITEM_ID, SP.STOCK_DATE
		                UNION ALL
		                -- RDC재고 2일치 
		                SELECT  SP.ITEM_ID, SP.STOCK_DATE, 0 TOTAL_STOCK, 0 CDC_STOCK, SUM(SP.STOCK_QTY) RDC_STOCK
		                  FROM  STOCK_PLAN SP, DC_MST DM
		                 WHERE  SP.VERSION = '$!{version}'
		                   AND  SP.SEQ = '$!{seq}'
		                   AND  SP.STOCK_DATE BETWEEN TO_DATE('$!{stock_date}','YYYY-MM-DD') AND (TO_DATE('$!{stock_date}','YYYY-MM-DD')+1)
		                   AND  SP.LOC_ID = DM.DC_ID
		                   AND  DM.RDC_FLAG = 'Y'
		                 GROUP  BY SP.ITEM_ID, SP.STOCK_DATE
		                ) SP
		         GROUP  BY SP.ITEM_ID, SP.STOCK_DATE
		        ) ST,
		        (SELECT IM.ITEM_ID, IM.ITEM_NAME, IM.DIVISION, IM.MADE_TYPE
                   FROM ITEM_MST IM
                  WHERE IM.MADE_TYPE != 'DE'
                   [AND  IM.DIVISION = '${division_sel}'] --DIVISION
                ) IM, 
		        (
		        -- 3주일 평균 판매실적
		        SELECT  /*+INDEX(SA SALES_ACT_PK)*/SA.ITEM_ID,
		                SUM(CASE WHEN  SA.SALE_DATE BETWEEN
		                               TO_DATE('$!{stock_date}','YYYY-MM-DD')-21 AND 
		                               TO_DATE('$!{stock_date}','YYYY-MM-DD')-1
		                         THEN  SA.QTY 
		                         ELSE  0 
		                    END)/18 AVG_SLR -- 3주평균 : 일요일을 제외하여 18 로 나눔 
		          FROM  SALES_ACT_RECENT SA
		         WHERE  SA.MADE_TYPE != 'DE'
		           AND  SA.SALE_DATE BETWEEN 
		                TO_DATE('$!{stock_date}','YYYY-MM-DD')-21 AND 
		                TO_DATE('$!{stock_date}','YYYY-MM-DD')-1 -- 3주
		         GROUP  BY SA.ITEM_ID  
		        ) SA
		 WHERE  ST.ITEM_ID = IM.ITEM_ID
		   AND  ST.ITEM_ID = SA.ITEM_ID(+) -- 해당 하는 아이템의 판매 실적이 없는 경우에도 수량이 표시되어야 하므로
		 GROUP  BY ST.ITEM_ID, IM.ITEM_NAME, SA.AVG_SLR
		 ORDER  BY ST.ITEM_ID
			
	</query>
	
	<!-- 예상재고 현황 Header 정보 쿼리 -->
	<query id="inventoryProjection_list_header">
		<!-- VERSION 정보가 없는 경우 -->
		#if("$!{version}" == "")
			SELECT  TO_CHAR(SYSDATE,   'YYYY-MM-DD') DAY_1, 
			        TO_CHAR(SYSDATE+1, 'YYYY-MM-DD') DAY_2
			  FROM  DUAL
		#else
			SELECT  '$!{stock_date}' DAY_1,
			        TO_CHAR(TO_DATE('$!{stock_date}','YYYY-MM-DD')+1, 'YYYY-MM-DD') DAY_2
			  FROM  DUAL
		#end
	
	</query>
	
	<!-- 품종구분 리스트 -->
	<query id="code_mst_division_list">
	
		SELECT  CM.CD, CM.CD_NAME
          FROM  CODE_MST CM
         WHERE  CM.CD_GRP = 'DIVISION'

	</query>
	
	
	<!--
	======================================================================
		RDC별 예상재고 현황
	======================================================================
	-->
	
	<!-- 1. RDC별 예상재고 현황 조회 -->
	<query id="rp_02040_inventoryProjectionByLocation_list" paging="true">
			
        -- 1.페이지가 로딩될때 VERSION 정보가 없으므로, MAX VERSION 과 현재 날짜를 바탕으로 데이타를 읽어 드림.
        SELECT  SP.ITEM_ID, SP.ITEM_NAME,
		        (SP.QTY_1  + SP.QTY_2  + SP.QTY_3  + SP.QTY_4  + SP.QTY_5  + SP.QTY_6  + SP.QTY_7  + SP.QTY_8  + SP.QTY_9  + SP.QTY_10 +
		         SP.QTY_11 + SP.QTY_12 + SP.QTY_13 + SP.QTY_14 + SP.QTY_15 + SP.QTY_16 + SP.QTY_17 + SP.QTY_18 + SP.QTY_19 + SP.QTY_20 +
		         SP.QTY_21 + SP.QTY_22 + SP.QTY_23 + SP.QTY_24 + SP.QTY_25 + SP.QTY_26 + SP.QTY_27 + SP.QTY_28 + SP.QTY_29 + SP.QTY_30 +
		         SP.QTY_31 + SP.QTY_32 + SP.QTY_33 + SP.QTY_34 + SP.QTY_35 + SP.QTY_36 + SP.QTY_37 + SP.QTY_38 + SP.QTY_39 + SP.QTY_40 + 
		         SP.QTY_41 + SP.QTY_42 + SP.QTY_43 + SP.QTY_44 + SP.QTY_45 + SP.QTY_46 + SP.QTY_47 + SP.QTY_48 + SP.QTY_49 + SP.QTY_50 +
		         SP.QTY_51 + SP.QTY_52 + SP.QTY_53 + SP.QTY_54 + SP.QTY_55 + SP.QTY_56 + SP.QTY_57 + SP.QTY_58 + SP.QTY_59 + SP.QTY_60
		        ) TOTAL_SUM,
		        (SP.NUM_1  + SP.NUM_2  + SP.NUM_3  + SP.NUM_4  + SP.NUM_5  + SP.NUM_6  + SP.NUM_7  + SP.NUM_8  + SP.NUM_9  + SP.NUM_10 +
		         SP.NUM_11 + SP.NUM_12 + SP.NUM_13 + SP.NUM_14 + SP.NUM_15 + SP.NUM_16 + SP.NUM_17 + SP.NUM_18 + SP.NUM_19 + SP.NUM_20 +
		         SP.NUM_21 + SP.NUM_22 + SP.NUM_23 + SP.NUM_24 + SP.NUM_25 + SP.NUM_26 + SP.NUM_27 + SP.NUM_28 + SP.NUM_29 + SP.NUM_30 +
		         SP.NUM_31 + SP.NUM_32 + SP.NUM_33 + SP.NUM_34 + SP.NUM_35 + SP.NUM_36 + SP.NUM_37 + SP.NUM_38 + SP.NUM_39 + SP.NUM_40 + 
		         SP.NUM_41 + SP.NUM_42 + SP.NUM_43 + SP.NUM_44 + SP.NUM_45 + SP.NUM_46 + SP.NUM_47 + SP.NUM_48 + SP.NUM_49 + SP.NUM_50 +
		         SP.NUM_51 + SP.NUM_52 + SP.NUM_53 + SP.NUM_54 + SP.NUM_55 + SP.NUM_56 + SP.NUM_57 + SP.NUM_58 + SP.NUM_59 + SP.NUM_60
		        ) TOTAL_NUM,
		        SP.QTY_1,  SP.NUM_1,  SP.QTY_2,  SP.NUM_2,  SP.QTY_3,  SP.NUM_3,  SP.QTY_4,  SP.NUM_4,  SP.QTY_5,  SP.NUM_5,  
		        SP.QTY_6,  SP.NUM_6,  SP.QTY_7,  SP.NUM_7,  SP.QTY_8,  SP.NUM_8,  SP.QTY_9,  SP.NUM_9,  SP.QTY_10, SP.NUM_10,
		        SP.QTY_11, SP.NUM_11, SP.QTY_12, SP.NUM_12, SP.QTY_13, SP.NUM_13, SP.QTY_14, SP.NUM_14, SP.QTY_15, SP.NUM_15,
		        SP.QTY_16, SP.NUM_16, SP.QTY_17, SP.NUM_17, SP.QTY_18, SP.NUM_18, SP.QTY_19, SP.NUM_19, SP.QTY_20, SP.NUM_20,
		        SP.QTY_21, SP.NUM_21, SP.QTY_22, SP.NUM_22, SP.QTY_23, SP.NUM_23, SP.QTY_24, SP.NUM_24, SP.QTY_25, SP.NUM_25,
		        SP.QTY_26, SP.NUM_26, SP.QTY_27, SP.NUM_27, SP.QTY_28, SP.NUM_28, SP.QTY_29, SP.NUM_29, SP.QTY_30, SP.NUM_30,
		        SP.QTY_31, SP.NUM_31, SP.QTY_32, SP.NUM_32, SP.QTY_33, SP.NUM_33, SP.QTY_34, SP.NUM_34, SP.QTY_35, SP.NUM_35, 
		        SP.QTY_36, SP.NUM_36, SP.QTY_37, SP.NUM_37, SP.QTY_38, SP.NUM_38, SP.QTY_39, SP.NUM_39, SP.QTY_40, SP.NUM_40,
		        SP.QTY_41, SP.NUM_41, SP.QTY_42, SP.NUM_42, SP.QTY_43, SP.NUM_43, SP.QTY_44, SP.NUM_44, SP.QTY_45, SP.NUM_45,
		        SP.QTY_46, SP.NUM_46, SP.QTY_47, SP.NUM_47, SP.QTY_48, SP.NUM_48, SP.QTY_49, SP.NUM_49, SP.QTY_50, SP.NUM_50,
		        SP.QTY_51, SP.NUM_51, SP.QTY_52, SP.NUM_52, SP.QTY_53, SP.NUM_53, SP.QTY_54, SP.NUM_54, SP.QTY_55, SP.NUM_55,
		        SP.QTY_56, SP.NUM_56, SP.QTY_57, SP.NUM_57, SP.QTY_58, SP.NUM_58, SP.QTY_59, SP.NUM_59, SP.QTY_60, SP.NUM_60 
		FROM    (
		        SELECT  SP.ITEM_ID, SP.ITEM_NAME, 
				        SUM(DECODE(SP.CNT, 1 , SP.STOCK_QTY,0)) QTY_1 , SUM(DECODE(SP.CNT, 1 , SP.AVG_QTY,0)) NUM_1 ,
				        SUM(DECODE(SP.CNT, 2 , SP.STOCK_QTY,0)) QTY_2 , SUM(DECODE(SP.CNT, 2 , SP.AVG_QTY,0)) NUM_2 ,
				        SUM(DECODE(SP.CNT, 3 , SP.STOCK_QTY,0)) QTY_3 , SUM(DECODE(SP.CNT, 3 , SP.AVG_QTY,0)) NUM_3 ,
				        SUM(DECODE(SP.CNT, 4 , SP.STOCK_QTY,0)) QTY_4 , SUM(DECODE(SP.CNT, 4 , SP.AVG_QTY,0)) NUM_4 ,
				        SUM(DECODE(SP.CNT, 5 , SP.STOCK_QTY,0)) QTY_5 , SUM(DECODE(SP.CNT, 5 , SP.AVG_QTY,0)) NUM_5 ,
				        SUM(DECODE(SP.CNT, 6 , SP.STOCK_QTY,0)) QTY_6 , SUM(DECODE(SP.CNT, 6 , SP.AVG_QTY,0)) NUM_6 ,
				        SUM(DECODE(SP.CNT, 7 , SP.STOCK_QTY,0)) QTY_7 , SUM(DECODE(SP.CNT, 7 , SP.AVG_QTY,0)) NUM_7 ,
				        SUM(DECODE(SP.CNT, 8 , SP.STOCK_QTY,0)) QTY_8 , SUM(DECODE(SP.CNT, 8 , SP.AVG_QTY,0)) NUM_8 ,
				        SUM(DECODE(SP.CNT, 9 , SP.STOCK_QTY,0)) QTY_9 , SUM(DECODE(SP.CNT, 9 , SP.AVG_QTY,0)) NUM_9 ,
				        SUM(DECODE(SP.CNT, 10, SP.STOCK_QTY,0)) QTY_10, SUM(DECODE(SP.CNT, 10, SP.AVG_QTY,0)) NUM_10,
				        SUM(DECODE(SP.CNT, 11, SP.STOCK_QTY,0)) QTY_11, SUM(DECODE(SP.CNT, 11, SP.AVG_QTY,0)) NUM_11,
				        SUM(DECODE(SP.CNT, 12, SP.STOCK_QTY,0)) QTY_12, SUM(DECODE(SP.CNT, 12, SP.AVG_QTY,0)) NUM_12,
				        SUM(DECODE(SP.CNT, 13, SP.STOCK_QTY,0)) QTY_13, SUM(DECODE(SP.CNT, 13, SP.AVG_QTY,0)) NUM_13,
				        SUM(DECODE(SP.CNT, 14, SP.STOCK_QTY,0)) QTY_14, SUM(DECODE(SP.CNT, 14, SP.AVG_QTY,0)) NUM_14,
				        SUM(DECODE(SP.CNT, 15, SP.STOCK_QTY,0)) QTY_15, SUM(DECODE(SP.CNT, 15, SP.AVG_QTY,0)) NUM_15,
				        SUM(DECODE(SP.CNT, 16, SP.STOCK_QTY,0)) QTY_16, SUM(DECODE(SP.CNT, 16, SP.AVG_QTY,0)) NUM_16,
				        SUM(DECODE(SP.CNT, 17, SP.STOCK_QTY,0)) QTY_17, SUM(DECODE(SP.CNT, 17, SP.AVG_QTY,0)) NUM_17,
				        SUM(DECODE(SP.CNT, 18, SP.STOCK_QTY,0)) QTY_18, SUM(DECODE(SP.CNT, 18, SP.AVG_QTY,0)) NUM_18,
				        SUM(DECODE(SP.CNT, 19, SP.STOCK_QTY,0)) QTY_19, SUM(DECODE(SP.CNT, 19, SP.AVG_QTY,0)) NUM_19,
				        SUM(DECODE(SP.CNT, 20, SP.STOCK_QTY,0)) QTY_20, SUM(DECODE(SP.CNT, 20, SP.AVG_QTY,0)) NUM_20,
				        SUM(DECODE(SP.CNT, 21, SP.STOCK_QTY,0)) QTY_21, SUM(DECODE(SP.CNT, 21, SP.AVG_QTY,0)) NUM_21,
				        SUM(DECODE(SP.CNT, 22, SP.STOCK_QTY,0)) QTY_22, SUM(DECODE(SP.CNT, 22, SP.AVG_QTY,0)) NUM_22,
				        SUM(DECODE(SP.CNT, 23, SP.STOCK_QTY,0)) QTY_23, SUM(DECODE(SP.CNT, 23, SP.AVG_QTY,0)) NUM_23,
				        SUM(DECODE(SP.CNT, 24, SP.STOCK_QTY,0)) QTY_24, SUM(DECODE(SP.CNT, 24, SP.AVG_QTY,0)) NUM_24,
				        SUM(DECODE(SP.CNT, 25, SP.STOCK_QTY,0)) QTY_25, SUM(DECODE(SP.CNT, 25, SP.AVG_QTY,0)) NUM_25,
				        SUM(DECODE(SP.CNT, 26, SP.STOCK_QTY,0)) QTY_26, SUM(DECODE(SP.CNT, 26, SP.AVG_QTY,0)) NUM_26,
				        SUM(DECODE(SP.CNT, 27, SP.STOCK_QTY,0)) QTY_27, SUM(DECODE(SP.CNT, 27, SP.AVG_QTY,0)) NUM_27,
				        SUM(DECODE(SP.CNT, 28, SP.STOCK_QTY,0)) QTY_28, SUM(DECODE(SP.CNT, 28, SP.AVG_QTY,0)) NUM_28,
				        SUM(DECODE(SP.CNT, 29, SP.STOCK_QTY,0)) QTY_29, SUM(DECODE(SP.CNT, 29, SP.AVG_QTY,0)) NUM_29,
				        SUM(DECODE(SP.CNT, 30, SP.STOCK_QTY,0)) QTY_30, SUM(DECODE(SP.CNT, 30, SP.AVG_QTY,0)) NUM_30,
				        SUM(DECODE(SP.CNT, 31, SP.STOCK_QTY,0)) QTY_31, SUM(DECODE(SP.CNT, 31, SP.AVG_QTY,0)) NUM_31,
				        SUM(DECODE(SP.CNT, 32, SP.STOCK_QTY,0)) QTY_32, SUM(DECODE(SP.CNT, 32, SP.AVG_QTY,0)) NUM_32,
				        SUM(DECODE(SP.CNT, 33, SP.STOCK_QTY,0)) QTY_33, SUM(DECODE(SP.CNT, 33, SP.AVG_QTY,0)) NUM_33,
				        SUM(DECODE(SP.CNT, 34, SP.STOCK_QTY,0)) QTY_34, SUM(DECODE(SP.CNT, 34, SP.AVG_QTY,0)) NUM_34,
				        SUM(DECODE(SP.CNT, 35, SP.STOCK_QTY,0)) QTY_35, SUM(DECODE(SP.CNT, 35, SP.AVG_QTY,0)) NUM_35,
				        SUM(DECODE(SP.CNT, 36, SP.STOCK_QTY,0)) QTY_36, SUM(DECODE(SP.CNT, 36, SP.AVG_QTY,0)) NUM_36,
				        SUM(DECODE(SP.CNT, 37, SP.STOCK_QTY,0)) QTY_37, SUM(DECODE(SP.CNT, 37, SP.AVG_QTY,0)) NUM_37,
				        SUM(DECODE(SP.CNT, 38, SP.STOCK_QTY,0)) QTY_38, SUM(DECODE(SP.CNT, 38, SP.AVG_QTY,0)) NUM_38,
				        SUM(DECODE(SP.CNT, 39, SP.STOCK_QTY,0)) QTY_39, SUM(DECODE(SP.CNT, 39, SP.AVG_QTY,0)) NUM_39,
				        SUM(DECODE(SP.CNT, 40, SP.STOCK_QTY,0)) QTY_40, SUM(DECODE(SP.CNT, 40, SP.AVG_QTY,0)) NUM_40,
				        SUM(DECODE(SP.CNT, 41, SP.STOCK_QTY,0)) QTY_41, SUM(DECODE(SP.CNT, 41, SP.AVG_QTY,0)) NUM_41,
				        SUM(DECODE(SP.CNT, 42, SP.STOCK_QTY,0)) QTY_42, SUM(DECODE(SP.CNT, 42, SP.AVG_QTY,0)) NUM_42,
				        SUM(DECODE(SP.CNT, 43, SP.STOCK_QTY,0)) QTY_43, SUM(DECODE(SP.CNT, 43, SP.AVG_QTY,0)) NUM_43,
				        SUM(DECODE(SP.CNT, 44, SP.STOCK_QTY,0)) QTY_44, SUM(DECODE(SP.CNT, 44, SP.AVG_QTY,0)) NUM_44,
				        SUM(DECODE(SP.CNT, 45, SP.STOCK_QTY,0)) QTY_45, SUM(DECODE(SP.CNT, 45, SP.AVG_QTY,0)) NUM_45,
				        SUM(DECODE(SP.CNT, 46, SP.STOCK_QTY,0)) QTY_46, SUM(DECODE(SP.CNT, 46, SP.AVG_QTY,0)) NUM_46,
				        SUM(DECODE(SP.CNT, 47, SP.STOCK_QTY,0)) QTY_47, SUM(DECODE(SP.CNT, 47, SP.AVG_QTY,0)) NUM_47,
				        SUM(DECODE(SP.CNT, 48, SP.STOCK_QTY,0)) QTY_48, SUM(DECODE(SP.CNT, 48, SP.AVG_QTY,0)) NUM_48,
				        SUM(DECODE(SP.CNT, 49, SP.STOCK_QTY,0)) QTY_49, SUM(DECODE(SP.CNT, 49, SP.AVG_QTY,0)) NUM_49,
				        SUM(DECODE(SP.CNT, 50, SP.STOCK_QTY,0)) QTY_50, SUM(DECODE(SP.CNT, 50, SP.AVG_QTY,0)) NUM_50,
				        SUM(DECODE(SP.CNT, 51, SP.STOCK_QTY,0)) QTY_51, SUM(DECODE(SP.CNT, 51, SP.AVG_QTY,0)) NUM_51,
				        SUM(DECODE(SP.CNT, 52, SP.STOCK_QTY,0)) QTY_52, SUM(DECODE(SP.CNT, 52, SP.AVG_QTY,0)) NUM_52,
				        SUM(DECODE(SP.CNT, 53, SP.STOCK_QTY,0)) QTY_53, SUM(DECODE(SP.CNT, 53, SP.AVG_QTY,0)) NUM_53,
				        SUM(DECODE(SP.CNT, 54, SP.STOCK_QTY,0)) QTY_54, SUM(DECODE(SP.CNT, 54, SP.AVG_QTY,0)) NUM_54,
				        SUM(DECODE(SP.CNT, 55, SP.STOCK_QTY,0)) QTY_55, SUM(DECODE(SP.CNT, 55, SP.AVG_QTY,0)) NUM_55,
				        SUM(DECODE(SP.CNT, 56, SP.STOCK_QTY,0)) QTY_56, SUM(DECODE(SP.CNT, 56, SP.AVG_QTY,0)) NUM_56,
				        SUM(DECODE(SP.CNT, 57, SP.STOCK_QTY,0)) QTY_57, SUM(DECODE(SP.CNT, 57, SP.AVG_QTY,0)) NUM_57,
				        SUM(DECODE(SP.CNT, 58, SP.STOCK_QTY,0)) QTY_58, SUM(DECODE(SP.CNT, 58, SP.AVG_QTY,0)) NUM_58,
				        SUM(DECODE(SP.CNT, 59, SP.STOCK_QTY,0)) QTY_59, SUM(DECODE(SP.CNT, 59, SP.AVG_QTY,0)) NUM_59,
				        SUM(DECODE(SP.CNT, 60, SP.STOCK_QTY,0)) QTY_60, SUM(DECODE(SP.CNT, 60, SP.AVG_QTY,0)) NUM_60
				  FROM  (
		                SELECT  IM.ITEM_NAME, ST.ITEM_ID, ST.LOC_ID, ST.STOCK_QTY, 
		                		(ST.STOCK_QTY/DECODE(NVL(SA.AVG_SLR,1),0,1,NVL(SA.AVG_SLR,1))) AVG_QTY, DM.CNT
				          FROM  (
				                SELECT  SP.ITEM_ID, SP.LOC_ID, SP.STOCK_QTY, DM.DC_NAME 
				                  FROM  STOCK_PLAN SP, DC_MST DM
				                 WHERE  SP.VERSION = '$!{version}'
				                   AND  SP.SEQ = '$!{seq}'
				                   AND  SP.STOCK_DATE = TO_DATE('$!{stock_date}','YYYY-MM-DD')
				                   AND  SP.LOC_ID = DM.DC_ID
				                   AND  DM.RDC_FLAG = 'Y'
				                ) ST,
								(SELECT IM.ITEM_ID, IM.ITEM_NAME, IM.DIVISION, IM.MADE_TYPE
			                       FROM ITEM_MST IM
			                      WHERE IM.MADE_TYPE != 'DE'
			                       [AND  IM.DIVISION = '${division_sel}'] --DIVISION
			                    ) IM,
				                (
				                SELECT  DM.DC_ID, DM.DC_NAME,
				                        SUM(1) OVER(ORDER BY DM.DC_ID)  CNT
				                  FROM  DC_MST DM
				                 WHERE  DM.RDC_FLAG = 'Y'
				                ) DM,
				                (
				                -- 3주일 평균 판매실적
				                SELECT  /*+INDEX(SA SALES_ACT_PK)*/SA.ITEM_ID,
				                        SUM(CASE WHEN  SA.SALE_DATE BETWEEN
				                                       TO_DATE('$!{stock_date}','YYYY-MM-DD')-21 AND 
				                                       TO_DATE('$!{stock_date}','YYYY-MM-DD')-1
				                                 THEN  SA.QTY 
				                                 ELSE  0 
				                            END)/18 AVG_SLR -- 3주평균 : 일요일을 감안하여 18 로 나눔
				                  FROM  SALES_ACT_RECENT SA
				                 WHERE  SA.MADE_TYPE != 'DE'
				                   AND  SA.SALE_DATE BETWEEN 
				                        TO_DATE('$!{stock_date}','YYYY-MM-DD')-21 AND 
				                        TO_DATE('$!{stock_date}','YYYY-MM-DD')-1 -- 3주
				                 GROUP  BY SA.ITEM_ID  
				                ) SA
				         WHERE  ST.ITEM_ID = IM.ITEM_ID
				           AND  ST.LOC_ID = DM.DC_ID
				           AND  ST.ITEM_ID = SA.ITEM_ID(+) -- 해당 하는 아이템의 판매 실적이 없는 경우에도 수량이 표시되어야 하므로		        
				        ) SP
				 GROUP  BY SP.ITEM_ID, SP.ITEM_NAME
		        ) SP
		 ORDER  BY SP.ITEM_ID
			
	</query>
	
	<!-- 2. RDC별 예상재고 : RDC HEADER NAME LIST -->
	<query id="inventoryProjectionByLocation_list_header">
			
		-- RDC_FLAG가 'Y'인 경우. HEADER를 만드는 쿼리
        SELECT  MAX(CASE WHEN DM.CNT=1  THEN DM.DC_NAME ELSE ' EMPTY' END) N1 , 
                MAX(CASE WHEN DM.CNT=2  THEN DM.DC_NAME ELSE ' EMPTY' END) N2 , 
                MAX(CASE WHEN DM.CNT=3  THEN DM.DC_NAME ELSE ' EMPTY' END) N3 , 
                MAX(CASE WHEN DM.CNT=4  THEN DM.DC_NAME ELSE ' EMPTY' END) N4 , 
                MAX(CASE WHEN DM.CNT=5  THEN DM.DC_NAME ELSE ' EMPTY' END) N5 , 
                MAX(CASE WHEN DM.CNT=6  THEN DM.DC_NAME ELSE ' EMPTY' END) N6 , 
                MAX(CASE WHEN DM.CNT=7  THEN DM.DC_NAME ELSE ' EMPTY' END) N7 , 
                MAX(CASE WHEN DM.CNT=8  THEN DM.DC_NAME ELSE ' EMPTY' END) N8 , 
                MAX(CASE WHEN DM.CNT=9  THEN DM.DC_NAME ELSE ' EMPTY' END) N9 , 
                MAX(CASE WHEN DM.CNT=10 THEN DM.DC_NAME ELSE ' EMPTY' END) N10, 
                MAX(CASE WHEN DM.CNT=11 THEN DM.DC_NAME ELSE ' EMPTY' END) N11, 
                MAX(CASE WHEN DM.CNT=12 THEN DM.DC_NAME ELSE ' EMPTY' END) N12, 
                MAX(CASE WHEN DM.CNT=13 THEN DM.DC_NAME ELSE ' EMPTY' END) N13, 
                MAX(CASE WHEN DM.CNT=14 THEN DM.DC_NAME ELSE ' EMPTY' END) N14, 
                MAX(CASE WHEN DM.CNT=15 THEN DM.DC_NAME ELSE ' EMPTY' END) N15, 
                MAX(CASE WHEN DM.CNT=16 THEN DM.DC_NAME ELSE ' EMPTY' END) N16, 
                MAX(CASE WHEN DM.CNT=17 THEN DM.DC_NAME ELSE ' EMPTY' END) N17, 
                MAX(CASE WHEN DM.CNT=18 THEN DM.DC_NAME ELSE ' EMPTY' END) N18, 
                MAX(CASE WHEN DM.CNT=19 THEN DM.DC_NAME ELSE ' EMPTY' END) N19,
                MAX(CASE WHEN DM.CNT=20 THEN DM.DC_NAME ELSE ' EMPTY' END) N20,
                MAX(CASE WHEN DM.CNT=21 THEN DM.DC_NAME ELSE ' EMPTY' END) N21, 
                MAX(CASE WHEN DM.CNT=22 THEN DM.DC_NAME ELSE ' EMPTY' END) N22, 
                MAX(CASE WHEN DM.CNT=23 THEN DM.DC_NAME ELSE ' EMPTY' END) N23, 
                MAX(CASE WHEN DM.CNT=24 THEN DM.DC_NAME ELSE ' EMPTY' END) N24, 
                MAX(CASE WHEN DM.CNT=25 THEN DM.DC_NAME ELSE ' EMPTY' END) N25, 
                MAX(CASE WHEN DM.CNT=26 THEN DM.DC_NAME ELSE ' EMPTY' END) N26, 
                MAX(CASE WHEN DM.CNT=27 THEN DM.DC_NAME ELSE ' EMPTY' END) N27, 
                MAX(CASE WHEN DM.CNT=28 THEN DM.DC_NAME ELSE ' EMPTY' END) N28, 
                MAX(CASE WHEN DM.CNT=29 THEN DM.DC_NAME ELSE ' EMPTY' END) N29,
                MAX(CASE WHEN DM.CNT=30 THEN DM.DC_NAME ELSE ' EMPTY' END) N30,
                MAX(CASE WHEN DM.CNT=31 THEN DM.DC_NAME ELSE ' EMPTY' END) N31, 
                MAX(CASE WHEN DM.CNT=32 THEN DM.DC_NAME ELSE ' EMPTY' END) N32, 
                MAX(CASE WHEN DM.CNT=33 THEN DM.DC_NAME ELSE ' EMPTY' END) N33, 
                MAX(CASE WHEN DM.CNT=34 THEN DM.DC_NAME ELSE ' EMPTY' END) N34, 
                MAX(CASE WHEN DM.CNT=35 THEN DM.DC_NAME ELSE ' EMPTY' END) N35, 
                MAX(CASE WHEN DM.CNT=36 THEN DM.DC_NAME ELSE ' EMPTY' END) N36, 
                MAX(CASE WHEN DM.CNT=37 THEN DM.DC_NAME ELSE ' EMPTY' END) N37, 
                MAX(CASE WHEN DM.CNT=38 THEN DM.DC_NAME ELSE ' EMPTY' END) N38, 
                MAX(CASE WHEN DM.CNT=39 THEN DM.DC_NAME ELSE ' EMPTY' END) N39,
                MAX(CASE WHEN DM.CNT=40 THEN DM.DC_NAME ELSE ' EMPTY' END) N40,
                MAX(CASE WHEN DM.CNT=41 THEN DM.DC_NAME ELSE ' EMPTY' END) N41, 
                MAX(CASE WHEN DM.CNT=42 THEN DM.DC_NAME ELSE ' EMPTY' END) N42, 
                MAX(CASE WHEN DM.CNT=43 THEN DM.DC_NAME ELSE ' EMPTY' END) N43, 
                MAX(CASE WHEN DM.CNT=44 THEN DM.DC_NAME ELSE ' EMPTY' END) N44, 
                MAX(CASE WHEN DM.CNT=45 THEN DM.DC_NAME ELSE ' EMPTY' END) N45, 
                MAX(CASE WHEN DM.CNT=46 THEN DM.DC_NAME ELSE ' EMPTY' END) N46, 
                MAX(CASE WHEN DM.CNT=47 THEN DM.DC_NAME ELSE ' EMPTY' END) N47, 
                MAX(CASE WHEN DM.CNT=48 THEN DM.DC_NAME ELSE ' EMPTY' END) N48, 
                MAX(CASE WHEN DM.CNT=49 THEN DM.DC_NAME ELSE ' EMPTY' END) N49,
                MAX(CASE WHEN DM.CNT=50 THEN DM.DC_NAME ELSE ' EMPTY' END) N50,
                MAX(CASE WHEN DM.CNT=51 THEN DM.DC_NAME ELSE ' EMPTY' END) N51, 
                MAX(CASE WHEN DM.CNT=52 THEN DM.DC_NAME ELSE ' EMPTY' END) N52, 
                MAX(CASE WHEN DM.CNT=53 THEN DM.DC_NAME ELSE ' EMPTY' END) N53, 
                MAX(CASE WHEN DM.CNT=54 THEN DM.DC_NAME ELSE ' EMPTY' END) N54, 
                MAX(CASE WHEN DM.CNT=55 THEN DM.DC_NAME ELSE ' EMPTY' END) N55, 
                MAX(CASE WHEN DM.CNT=56 THEN DM.DC_NAME ELSE ' EMPTY' END) N56, 
                MAX(CASE WHEN DM.CNT=57 THEN DM.DC_NAME ELSE ' EMPTY' END) N57, 
                MAX(CASE WHEN DM.CNT=58 THEN DM.DC_NAME ELSE ' EMPTY' END) N58, 
                MAX(CASE WHEN DM.CNT=59 THEN DM.DC_NAME ELSE ' EMPTY' END) N59,
                MAX(CASE WHEN DM.CNT=60 THEN DM.DC_NAME ELSE ' EMPTY' END) N60
          FROM  (
                SELECT  DM.DC_ID, DM.DC_SHORT_NAME DC_NAME, 
                        SUM(1) OVER (ORDER BY DM.DC_ID) CNT
                  FROM  DC_MST DM
                 WHERE  DM.RDC_FLAG = 'Y'
                ) DM
			
	</query>
	
	<!-- 3. RDC별 예상재고 : RDC HEADER WIDTH -->
	<query id="inventoryProjectionByLocation_list_header_width">
			
		SELECT  NVL(SUM(CASE WHEN DM.CNT=1   THEN 50 ELSE 0 END),0) N1 , 
                NVL(SUM(CASE WHEN DM.CNT=2   THEN 50 ELSE 0 END),0) N2 , 
                NVL(SUM(CASE WHEN DM.CNT=3   THEN 50 ELSE 0 END),0) N3 , 
                NVL(SUM(CASE WHEN DM.CNT=4   THEN 50 ELSE 0 END),0) N4 , 
                NVL(SUM(CASE WHEN DM.CNT=5   THEN 50 ELSE 0 END),0) N5 , 
                NVL(SUM(CASE WHEN DM.CNT=6   THEN 50 ELSE 0 END),0) N6 , 
                NVL(SUM(CASE WHEN DM.CNT=7   THEN 50 ELSE 0 END),0) N7 , 
                NVL(SUM(CASE WHEN DM.CNT=8   THEN 50 ELSE 0 END),0) N8 , 
                NVL(SUM(CASE WHEN DM.CNT=9   THEN 50 ELSE 0 END),0) N9 , 
                NVL(SUM(CASE WHEN DM.CNT=10  THEN 50 ELSE 0 END),0) N10, 
                NVL(SUM(CASE WHEN DM.CNT=11  THEN 50 ELSE 0 END),0) N11, 
                NVL(SUM(CASE WHEN DM.CNT=12  THEN 50 ELSE 0 END),0) N12, 
                NVL(SUM(CASE WHEN DM.CNT=13  THEN 50 ELSE 0 END),0) N13, 
                NVL(SUM(CASE WHEN DM.CNT=14  THEN 50 ELSE 0 END),0) N14, 
                NVL(SUM(CASE WHEN DM.CNT=15  THEN 50 ELSE 0 END),0) N15, 
                NVL(SUM(CASE WHEN DM.CNT=16  THEN 50 ELSE 0 END),0) N16, 
                NVL(SUM(CASE WHEN DM.CNT=17  THEN 50 ELSE 0 END),0) N17, 
                NVL(SUM(CASE WHEN DM.CNT=18  THEN 50 ELSE 0 END),0) N18, 
                NVL(SUM(CASE WHEN DM.CNT=19  THEN 50 ELSE 0 END),0) N19,
                NVL(SUM(CASE WHEN DM.CNT=20  THEN 50 ELSE 0 END),0) N20,
                NVL(SUM(CASE WHEN DM.CNT=21  THEN 50 ELSE 0 END),0) N21, 
                NVL(SUM(CASE WHEN DM.CNT=22  THEN 50 ELSE 0 END),0) N22, 
                NVL(SUM(CASE WHEN DM.CNT=23  THEN 50 ELSE 0 END),0) N23, 
                NVL(SUM(CASE WHEN DM.CNT=24  THEN 50 ELSE 0 END),0) N24, 
                NVL(SUM(CASE WHEN DM.CNT=25  THEN 50 ELSE 0 END),0) N25, 
                NVL(SUM(CASE WHEN DM.CNT=26  THEN 50 ELSE 0 END),0) N26, 
                NVL(SUM(CASE WHEN DM.CNT=27  THEN 50 ELSE 0 END),0) N27, 
                NVL(SUM(CASE WHEN DM.CNT=28  THEN 50 ELSE 0 END),0) N28, 
                NVL(SUM(CASE WHEN DM.CNT=29  THEN 50 ELSE 0 END),0) N29, 
                NVL(SUM(CASE WHEN DM.CNT=30  THEN 50 ELSE 0 END),0) N30, 
                NVL(SUM(CASE WHEN DM.CNT=31  THEN 50 ELSE 0 END),0) N31, 
                NVL(SUM(CASE WHEN DM.CNT=32  THEN 50 ELSE 0 END),0) N32, 
                NVL(SUM(CASE WHEN DM.CNT=33  THEN 50 ELSE 0 END),0) N33, 
                NVL(SUM(CASE WHEN DM.CNT=34  THEN 50 ELSE 0 END),0) N34, 
                NVL(SUM(CASE WHEN DM.CNT=35  THEN 50 ELSE 0 END),0) N35, 
                NVL(SUM(CASE WHEN DM.CNT=36  THEN 50 ELSE 0 END),0) N36, 
                NVL(SUM(CASE WHEN DM.CNT=37  THEN 50 ELSE 0 END),0) N37, 
                NVL(SUM(CASE WHEN DM.CNT=38  THEN 50 ELSE 0 END),0) N38, 
                NVL(SUM(CASE WHEN DM.CNT=39  THEN 50 ELSE 0 END),0) N39,
                NVL(SUM(CASE WHEN DM.CNT=40  THEN 50 ELSE 0 END),0) N40,
                NVL(SUM(CASE WHEN DM.CNT=41  THEN 50 ELSE 0 END),0) N41, 
                NVL(SUM(CASE WHEN DM.CNT=42  THEN 50 ELSE 0 END),0) N42, 
                NVL(SUM(CASE WHEN DM.CNT=43  THEN 50 ELSE 0 END),0) N43, 
                NVL(SUM(CASE WHEN DM.CNT=44  THEN 50 ELSE 0 END),0) N44, 
                NVL(SUM(CASE WHEN DM.CNT=45  THEN 50 ELSE 0 END),0) N45, 
                NVL(SUM(CASE WHEN DM.CNT=46  THEN 50 ELSE 0 END),0) N46, 
                NVL(SUM(CASE WHEN DM.CNT=47  THEN 50 ELSE 0 END),0) N47, 
                NVL(SUM(CASE WHEN DM.CNT=48  THEN 50 ELSE 0 END),0) N48, 
                NVL(SUM(CASE WHEN DM.CNT=49  THEN 50 ELSE 0 END),0) N49, 
                NVL(SUM(CASE WHEN DM.CNT=50  THEN 50 ELSE 0 END),0) N50, 
                NVL(SUM(CASE WHEN DM.CNT=51  THEN 50 ELSE 0 END),0) N51, 
                NVL(SUM(CASE WHEN DM.CNT=52  THEN 50 ELSE 0 END),0) N52, 
                NVL(SUM(CASE WHEN DM.CNT=53  THEN 50 ELSE 0 END),0) N53, 
                NVL(SUM(CASE WHEN DM.CNT=54  THEN 50 ELSE 0 END),0) N54, 
                NVL(SUM(CASE WHEN DM.CNT=55  THEN 50 ELSE 0 END),0) N55, 
                NVL(SUM(CASE WHEN DM.CNT=56  THEN 50 ELSE 0 END),0) N56, 
                NVL(SUM(CASE WHEN DM.CNT=57  THEN 50 ELSE 0 END),0) N57, 
                NVL(SUM(CASE WHEN DM.CNT=58  THEN 50 ELSE 0 END),0) N58, 
                NVL(SUM(CASE WHEN DM.CNT=59  THEN 50 ELSE 0 END),0) N59,
                NVL(SUM(CASE WHEN DM.CNT=60  THEN 50 ELSE 0 END),0) N60
          FROM  (
                SELECT  DM.DC_ID, DM.DC_NAME, DM.CNT
                  FROM  (               
                        SELECT  DM.DC_ID, DM.DC_NAME, 
                                SUM(1) OVER (ORDER BY DM.DC_ID) CNT
                          FROM  DC_MST DM
                         WHERE  DM.RDC_FLAG = 'Y'
                        ) DM,
                 #if("$!{version}" == "") <!-- VERSION 정보가 없는 경우 -->
                        (
                        SELECT  DISTINCT SP.LOC_ID
                          FROM  STOCK_PLAN SP,
                                (
			                    SELECT  VL.VERSION, MAX(VL.SEQ) SEQ
			                      FROM  PLAN_VERSION_LOG VL, 
			                            (SELECT  MAX(VL.VERSION) VERSION
			                               FROM  PLAN_VERSION_LOG VL
			                              WHERE  VL.PERIOD_TYPE = 'DAILY'
			                                AND  VL.CAT_ID = 'RP' ) MV -- MAX VERSION
			                     WHERE  VL.VERSION = MV.VERSION
			                       AND  VL.PERIOD_TYPE = 'DAILY'
			                       AND  VL.CAT_ID = 'RP'
			                     GROUP  BY VL.VERSION     
			                    ) MV
                         WHERE  SP.VERSION = MV.VERSION
                           AND  SP.SEQ = MV.SEQ
                           AND  SP.STOCK_DATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
                        ) SP
                  #else
                        (
                        SELECT  DISTINCT SP.LOC_ID
                          FROM  (
                                SELECT  CM.CD, CM.CD_NAME
                                  FROM  CODE_MST CM
                                 WHERE  CM.CD_GRP = 'DIVISION'
                                ) CD, ITEM_MST IM,
                                (
                                SELECT  SP.LOC_ID, SP.ITEM_ID
                                  FROM  STOCK_PLAN SP
                                 WHERE  SP.VERSION = '$!{version}'
                                   AND  SP.SEQ = '$!{seq}'
                                   AND  SP.STOCK_DATE = TO_DATE('$!{stock_date}','YYYY-MM-DD')
                                ) SP
                         WHERE  SP.ITEM_ID = IM.ITEM_ID
                           AND  IM.DIVISION = CD.CD
                           [AND  IM.DIVISION = '${division_sel}'] --DIVISION
                        ) SP
                  #end
                 WHERE  DM.DC_ID = SP.LOC_ID
                ) DM
			
	</query>
	
	
	<!--
	======================================================================
		수송계획검증
	======================================================================
	-->
	
	<!-- 1. 수송계획검증 조회 -->
	<query id="rp_02060_transPlanAnaly_list" paging="true">
		
		SELECT "도착지", "도착지명", "품목", "품목명", "재고", "생산계획", "수송입고계획", "판매계획", "수송출고계획", "주문", "구매예정정보", "물류타계정", "안전재고", "예상재고" 
               , "내일판매계획", "내일주문", "보충요구량", "수송계획량", "근거리", "최소수송단위"
		  FROM (
		SELECT 	DI.DC_ID 					"도착지", 
		       	DI.DC_SHORT_NAME			"도착지명", 
		       	DI.ITEM_ID 					"품목", 
		       	DI.ITEM_NAME 				"품목명", 
		       	SUM(DECODE(ST.QTY, 0, NULL, ST.QTY)) 						"재고",  
		       	SUM(DECODE(SC.PROD_QTY, 0, NULL, SC.PROD_QTY)) 				"생산계획",
		       	SUM(DECODE(TI.TR_IN_QTY, 0, NULL, TI.TR_IN_QTY)) 				"수송입고계획", 
		       	SUM(DECODE(SP.SALES_QTY, 0, NULL, SP.SALES_QTY)) 				"판매계획", 
		       	SUM(DECODE(OU.TR_OUT_QTY, 0, NULL, OU.TR_OUT_QTY)) 				"수송출고계획", 
		       	SUM(DECODE(OD.ORD_QTY, 0, NULL, OD.ORD_QTY)) 					"주문", 		
		       	SUM(DECODE(MS.QTY, 0, NULL, MS.QTY))						"구매예정정보",
		       	SUM(DECODE(NM.QTY, 0, NULL, NM.QTY))						"물류타계정",  
		       	SUM(DECODE(SA.SAFETY_STOCK, 0, NULL, SA.SAFETY_STOCK)) 			"안전재고", 
		       	SUM(NVL(ST.QTY, 0) + NVL(SC.PROD_QTY,0) + NVL(TI.TR_IN_QTY,0) - NVL(OU.TR_OUT_QTY,0) -  NVL(OD.ORD_QTY,0) + NVL(MS.QTY, 0))	 "예상재고", 
		       	SUM(DECODE(SP.TOMORROW_SALES_QTY, 0, NULL, SP.TOMORROW_SALES_QTY)) 		"내일판매계획", 
		       	SUM(DECODE(OD.TOMORROW_ORD_QTY, 0, NULL, OD.TOMORROW_ORD_QTY)) 		"내일주문",
		       	SUM(DECODE(AD.REP_QTY, 0, NULL, AD.REP_QTY)) 					"보충요구량", 
		       	SUM(DECODE(TP.TRANS_PLAN_QTY, 0, NULL, TP.TRANS_PLAN_QTY)) 			"수송계획량",
		       	TP.SRC_LOC_NAME  			"근거리",
		       	DECODE(DI.MIN_PICK_QTY, 0, NULL, DI.MIN_PICK_QTY)				"최소수송단위"
		FROM 	(
					-- 물류경로별 ITEM_ID 목록 추출
			        SELECT 	DISTINCT DI.TGT_LOC DC_ID, DC.DC_SHORT_NAME, DC.DC_NAME, 
			               	DI.PROD_ID ITEM_ID, IM.ITEM_NAME, TU.MIN_PICK_QTY
			          FROM  MAP_PROD_DCPATH DI,
			               	(	SELECT 	DM.DC_ID, DM.DC_NAME, DM.DC_SHORT_NAME
			                 	  FROM 	DC_MST DM
			               	) DC,
			               	(
			               		SELECT 	ITEM_ID, ITEM_NAME, ITEM_STATUS
			               		  FROM 	ITEM_MST
			                	 WHERE 	ITEM_ID = '$!{item_id}'
			               	) IM, TRANS_UNIT TU
			         WHERE 	DI.TGT_LOC 		= 	DC.DC_ID
			           AND 	DI.PROD_ID 		= 	IM.ITEM_ID
			           AND 	DI.TGT_LOC 		=	TU.RDC_ID(+)
			           AND 	DI.PROD_ID 		= 	TU.ITEM_ID(+)
			           AND 	IM.ITEM_STATUS  = 	'ST'
		       ) DI,
		       (
			       -- 전일마감 재고정보 추출
			       SELECT 	ST.IF_DTTM, ST.LOC_ID DC_ID, ST.ITEM_ID
			        	   	, SUM(ST.QTY) QTY
			         FROM 	WMS_STOCK ST,
			               	(
			               		SELECT 	DC_ID, DC_NAME
			               		  FROM 	DC_MST
			                	 WHERE 	CDC_FLAG = 'Y'
			                	UNION 
			                 	SELECT 	DC_ID, DC_NAME
			               		  FROM 	DC_MST
			                	 WHERE 	RDC_FLAG = 'Y'       
			                ) DC
			        WHERE 	ST.LOC_TYPE = 'DC'        
			          AND 	ST.LOC_ID = DC.DC_ID
			          AND 	ST.ITEM_ID = '$!{item_id}'
			          AND   TO_CHAR(ST.USABLE_DATE, 'YYYY-MM-DD') = '$!{select_date}'
			        GROUP 	BY ST.IF_DTTM, ST.LOC_ID, ST.ITEM_ID
		       ) ST,
		       (
			       -- 당일 조/주/야 생산계획 추출
			       SELECT 	SC.PLANT_ID, SC.VERSION, DC.DC_ID, DC.DC_NAME, SC.ITEM_ID, 
			               	SUM(DECODE(SC.SHIFT_TYPE, 1, SC.SHIFT_QTY, 0)) SHIFT1_QTY, 
			               	SUM(DECODE(SC.SHIFT_TYPE, 3, SC.SHIFT_QTY, 0)) SHIFT3_QTY,
			               	SUM(DECODE(SC.SHIFT_TYPE, 5, SC.SHIFT_QTY, 0)) SHIFT5_QTY,
			               	SUM(SC.SHIFT_QTY) PROD_QTY2, SC.QTY_UOM,
			               	SUM(DECODE(SC.SHIFT_TYPE, 1, SC.SHIFT_QTY, 0)) 
			               	+ SUM(DECODE(SC.SHIFT_TYPE, 3, SC.SHIFT_QTY, 0)) PROD_QTY
			         FROM 	DAILY_SCH_PLAN_SHIFT SC,
			                (
			                	SELECT 	DC_ID, DC_NAME, PLANT_ID
			               		  FROM 	DC_MST
			                	 WHERE 	PLANT_ID IS NOT NULL
			                ) DC
			                , V_LAST_PROC_PRODVER LP,
			                (
				               SELECT    SC.PLANT_ID, MAX(VL.VERSION) VERSION
							   FROM    PLAN_VERSION_LOG VL,
							            (
							            SELECT BM.SUB_CAT, BM.PLANT_ID, BM.PERIOD_TYPE
							            FROM   ENGN_BAT_MST BM
							            WHERE  BM.PERIOD_TYPE = 'DAILY'
							            AND    BM.CAT_ID = 'PS'
							            ) SC
							   WHERE    VL.PERIOD_TYPE = SC.PERIOD_TYPE
							   AND      VL.CAT_ID      = 'PS'
							   AND      VL.SUB_CAT     = SC.SUB_CAT
							   AND      TO_NUMBER(VL.STATUS) &gt;= 23
							   /* 버젼일자는 조회기준일과 같거나 작다 */ 
							   AND        VL.RUN_DATE        &lt; TRUNC(TO_DATE('$!{select_date}') ,'D')
							   GROUP BY SC.PLANT_ID
							) MV
			        WHERE 	CAT_ID        = 'PS'
			          AND 	SC.PLANT_ID   = DC.PLANT_ID(+)
			          AND 	SC.QTY_UOM    = 'BOX'
			          AND 	SC.VERSION    = MV.VERSION
			          AND 	SC.PLANT_ID   = MV.PLANT_ID
			          AND 	SC.PROD_DATES = TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                  AND 	SC.PLANT_ID   = LP.PLANT_ID
	                  AND 	SC.ITEM_ID    = LP.ITEM_ID
	                  AND 	SC.PROC_ID    = LP.PROC_ID
	                  AND 	SC.PROD_VER   = LP.PROD_VER
			          AND 	SC.ITEM_ID		= '$!{item_id}'
                    GROUP     BY SC.PLANT_ID, SC.VERSION, DC.DC_ID, DC.DC_NAME, SC.ITEM_ID, SC.QTY_UOM
		       ) SC,
		       (
			       -- 수송입고계획
			       SELECT TP.TGT_LOC DC_ID, TP.TRANS_DATE, TP.ITEM_ID, SUM(TP.QTY) TR_IN_QTY
			         FROM IF_TRANS_PLAN TP
			        WHERE TP.TRANS_DATE = TO_DATE('$!{select_date}','YYYY-MM-DD')
			          AND TP.VERSION &lt;&gt; '$!{trans_version}'
			          -- ZM3 반품수송 재회
                        AND         TP.PLAN_TYPE NOT IN ('ZM3')
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.SRC_LOC
			              )
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.TGT_LOC
			              )
			          AND TP.ITEM_ID = '$!{item_id}'
			        GROUP BY TP.TGT_LOC, TP.TRANS_DATE, TP.ITEM_ID
		       ) TI,
		       (
			       -- 판매계획 : 수송계획 수립일, 차일
			       SELECT SP.YYYY, SP.VERSION, SP.DELIV_LOC DC_ID, SP.ITEM_ID
	                      , SUM(
	                      		DECODE(SP.YYYYMMDD
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                      				, SP.NORMAL_QTY + SP.PROM_QTY + SP.SUPT_QTY + SP.SAMP_QTY
	                      				, 0)
	                      ) SALES_QTY
	                      , SUM(
	                      		DECODE(SP.YYYYMMDD
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
	                      				, SP.NORMAL_QTY + SP.PROM_QTY + SP.SUPT_QTY + SP.SAMP_QTY
	                      				, 0)
	                      ) TOMORROW_SALES_QTY
			         FROM NFOS_SALES_PLAN_WEEKLY SP
			        WHERE SP.YYYY    = '$!{sales_yyyy}'
			          AND SP.VERSION = '$!{sales_version}'
			          AND SP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD') 
	                      			      AND TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
			          AND SP.ITEM_ID = '$!{item_id}'
			        GROUP BY SP.YYYY, SP.VERSION, SP.DELIV_LOC, SP.ITEM_ID
		       ) SP,
		       (
		       	   --수송출고계획
			       SELECT TP.SRC_LOC DC_ID, TP.TRANS_DATE, TP.ITEM_ID, SUM(TP.QTY) TR_OUT_QTY
			         FROM IF_TRANS_PLAN TP
			        WHERE TP.TRANS_DATE = TO_DATE('$!{select_date}','YYYY-MM-DD')
			          AND TP.VERSION &lt;&gt; '$!{trans_version}'
			          -- ZM3 반품수송 재회
                        AND         TP.PLAN_TYPE NOT IN ('ZM3')
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.SRC_LOC
			              )
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.TGT_LOC
			              )
			          AND TP.ITEM_ID = '$!{item_id}'
			        GROUP BY TP.SRC_LOC, TP.TRANS_DATE, TP.ITEM_ID       
		       ) OU,
		       (
		       	   --NFOS 주문정보
			       SELECT OD.IF_DTTM, OD.LOC_ID DC_ID, OD.ITEM_ID
	                      , SUM(
	                      		DECODE(TO_CHAR(OD.DUE_DATE, 'YYYYMMDD')
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                      				, OD.QTY
	                      				, 0)
	                      ) ORD_QTY
	                      , SUM(
	                      		DECODE(TO_CHAR(OD.DUE_DATE, 'YYYYMMDD')
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
	                      				, OD.QTY
	                      				, 0)
	                      ) TOMORROW_ORD_QTY
			         FROM NFOS_ORDER OD
			        WHERE OD.IF_DTTM = TO_DATE('$!{select_date}', 'YYYY-MM-DD')
			          AND TO_CHAR(OD.DUE_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                      									   AND TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
			          AND OD.ITEM_ID = '$!{item_id}'
			        GROUP BY OD.IF_DTTM, OD.LOC_ID, OD.ITEM_ID
		       ) OD,
		       (
			       -- 보충요구량 : 자기 CDC 에서 보충받는 물량에 대한 부분을 제외하기 위해
			       --            REPLENISHMENTPLAN 에서 ORIGIN 과 DESTINATION 이 같은 물량을 빼줌
			       SELECT PP.VERSIONID, PP.DC_ID, PP.ITEM_ID
			              , SUM(PP.REP_QTY)-SUM(PP.REP_QTY2) REP_QTY
                     FROM (
		                   SELECT PP.VERSIONID, SUBSTR(PP.ITEMID, 4, 4) DC_ID, SUBSTR(PP.ITEMID, 9, 18) ITEM_ID
					              --, SUM(PP.QTY) REP_QTY, 0 REP_QTY2
	                              -- 제주 배송 지점의 경우 배송일이 2일 이므로 2일 후의 보충요구량을 표시
	                              , CASE WHEN AN.ADDNUM = 2 AND SUBSTR(PP.ITEMID, 4, 4) = '8760' THEN SUM(PP.QTY)
	                                     WHEN AN.ADDNUM = 2 THEN SUM(PP.QTY) - SUM(DECODE(PP.DUEDATE, TO_DATE('$!{select_date}','YYYY-MM-DD')+3, PP.QTY, 0))
	                                     WHEN SUBSTR(PP.ITEMID, 4, 4) = '8760' THEN SUM(DECODE(PP.DUEDATE, TO_DATE('$!{select_date}','YYYY-MM-DD')+2, PP.QTY, 0))
	                                     ELSE SUM(DECODE(PP.DUEDATE, TO_DATE('$!{select_date}','YYYY-MM-DD')+1, PP.QTY, 0))
	                              END REP_QTY, 0 REP_QTY2
					         FROM SCM_RP.PRODUCTIONORDERPLAN PP
					              , ( SELECT DECODE(TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'D'), '7', 2, 1) ADDNUM FROM DUAL ) AN
					        WHERE PP.VERSIONID = '$!{trans_version}'
				          	  AND PP.DUEDATE BETWEEN TO_DATE('$!{select_date}', 'YYYY-MM-DD')+1
				                	 		     AND TO_DATE('$!{select_date}', 'YYYY-MM-DD')+3
					          AND SUBSTR(PP.ITEMID, 9, 18) = '$!{item_id}'
					        GROUP BY PP.VERSIONID, SUBSTR(PP.ITEMID, 4, 4), SUBSTR(PP.ITEMID, 9, 18)
					       UNION ALL
		                   SELECT RP.VERSIONID, SUBSTR(RP.PRODUCTDESC, 4, 4) DC_ID, SUBSTR(RP.PRODUCTDESC, 9, 18) ITEM_ID 
					              , 0 REP_QTY, SUM(RP.REPLENISHQTY) REP_QTY2
					         FROM SCM_RP.REPLENISHMENTPLAN RP
					              , ( SELECT DECODE(TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'D'), '7', 2, 1) ADDNUM FROM DUAL ) AN
					        WHERE RP.VERSIONID = '$!{trans_version}'
					          AND (    RP.REPLENISHDATE = TO_DATE('$!{select_date}','YYYY-MM-DD')+1
					                OR RP.REPLENISHDATE = TO_DATE('$!{select_date}','YYYY-MM-DD')+AN.ADDNUM )
					          AND SUBSTR(RP.PRODUCTDESC, 9, 18) = '$!{item_id}'
					          AND SUBSTR(RP.ORIGIN, 2) = SUBSTR(RP.DESTINATION, 2)
					          AND SUBSTR(RP.PRODUCTDESC, 4, 4) = SUBSTR(RP.DESTINATION, 2)
					        GROUP BY RP.VERSIONID, SUBSTR(RP.PRODUCTDESC, 4, 4), SUBSTR(RP.PRODUCTDESC, 9, 18)
                          ) PP
			        GROUP BY PP.VERSIONID, PP.DC_ID, PP.ITEM_ID
		       ) AD,
		       (
		       		-- 수송계획,  근거리 : 수송계획의 출발지
			        SELECT 	TP.VERSION, TP.TGT_LOC DC_ID, 
			        		TP.ITEM_ID, TP.TRANS_DATE, 
			        		TP.SRC_LOC, DC.DC_SHORT_NAME SRC_LOC_NAME,
			               	SUM(NVL(TP.BASE_STK_QTY,0)+NVL(TP.ADD_STK_QTY,0)+NVL(TP.PROD_QTY,0)) TRANS_PLAN_QTY
			          FROM 	TRANS_PLAN TP,
			               	DC_MST DC
			         WHERE 	TP.VERSION 		= 	'$!{trans_version}'
			           AND 	TP.SEQ     		= 	'$!{trans_seq}'
			           AND 	TP.TRANS_DATE 	= 	TO_DATE('$!{select_date}','YYYY-MM-DD')
			           AND 	TP.SRC_LOC 		= 	DC.DC_ID(+)
			           AND 	TP.ITEM_ID = '$!{item_id}'
			           -- ZM3 반품수송 재회
                        AND         TP.PLAN_TYPE NOT IN ('ZM3')
			         GROUP 	BY TP.VERSION, TP.TGT_LOC, TP.ITEM_ID, TP.TRANS_DATE, TP.SRC_LOC, DC.DC_SHORT_NAME
		       ) TP,
		       (
		       		-- 안전재고
			        SELECT PY.WORK_DATE, PY.LOC_ID DC_ID, PY.ITEM_ID
			        	   , SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC) SAFETY_STOCK2
			        	   , CASE WHEN REPLACE('$!{select_date}', '-', '') 
			        	   			   BETWEEN NVL(PY.START_DATE, '00000000') AND NVL(PY.END_DATE, '00000000')
			        	          THEN SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC)
			        	          ELSE SUM(PY.SAFETY_STOCK+PY.CAMP_STOC)
			        	   END SAFETY_STOCK
			          FROM STOCK_POLICY_QTY PY,
			               (
				               	SELECT MAX(WORK_DATE) WORK_DATE
				                  FROM STOCK_POLICY_QTY
				                 WHERE LOC_TYPE = 'DC'
			               ) MV
			         WHERE PY.WORK_DATE = MV.WORK_DATE
			           AND PY.ITEM_ID = '$!{item_id}'
			         GROUP BY PY.WORK_DATE, PY.LOC_ID, PY.ITEM_ID, NVL(PY.START_DATE, '00000000'), NVL(PY.END_DATE, '00000000')
		       ) SA,
		       ( 
		       		-- 구매예정정보
                    SELECT SP.LOC_ID DC_ID, SP.ITEM_ID, SUM(SP.QTY) QTY
                      FROM (
                      			-- 태경농산(8910) 재고를 안양제품관리지점(7100) 재고로 변환
                                SELECT DECODE(SP.LOC_ID, '8910', '7100', SP.LOC_ID) LOC_ID
                                       , SP.ITEM_ID, SP.AVAIL_DATE--, SP.QTY                        
                                       , F_EATOBOX(SP.QTY_UOM,SP.ITEM_ID,SUM(SP.QTY) ) QTY
                                  FROM MAT_STORE_PLAN SP
                                 WHERE SP.IF_DTTM = (SELECT MAX(IF_DTTM)
                                 					 FROM	MAT_STORE_PLAN	
                                 					)
       							   AND SP.ITEM_ID = '$!{item_id}'
                                 GROUP BY DECODE(SP.LOC_ID, '8910', '7100', SP.LOC_ID)
                                          , SP.ITEM_ID, SP.AVAIL_DATE, SP.QTY_UOM
		                        --
								--	입고 완료분은 MAT_STORE_PLAN에서 제외되기 때문에 입고 완료 물량 추가
								/*UNION	ALL
								SELECT	DECODE(SUBSTR(CENTER_CD,5,4),'8910','7100',SUBSTR(CENTER_CD,5,4))	LOC_ID,
										ITEM_CD	ITEM_ID,INOUT_DATE	AVAIL_DATE,
										F_GETCONVBOX(ITEM_CD,'EA',SUM(INOUT_QTY))	QTY
								FROM	(
										SELECT	*
										FROM	LS020NM
										WHERE	INOUT_DATE	>=	TRUNC(SYSDATE)
										AND		INOUT_CD	IN	(
																SELECT	CODE_CD
																FROM	CMCODE
																WHERE	CODE_GRP	=	'LDIV03'
																AND		SUB_CD		=	'E1'	--입고
																AND		CODE_CD		!=	'E11'	--생산입고
																)
       									AND     ITEM_CD = '$!{item_id}'
										UNION	ALL
										SELECT	*
										FROM	LS020NM_G
										WHERE	INOUT_DATE	>=	TRUNC(SYSDATE)
										AND		INOUT_CD	IN	(
																SELECT	CODE_CD
																FROM	CMCODE
																WHERE	CODE_GRP	=	'LDIV03'
																AND		SUB_CD		=	'E1'	--입고
																AND		CODE_CD		!=	'E11'	--생산입고
																)
       									AND     ITEM_CD = '$!{item_id}'
										UNION	ALL
										SELECT	*
										FROM	LS020NM_P
										WHERE	INOUT_DATE	>=	TRUNC(SYSDATE)
										AND		INOUT_CD	IN	(
																SELECT	CODE_CD
																FROM	CMCODE
																WHERE	CODE_GRP	=	'LDIV03'
																AND		SUB_CD		=	'E1'	--입고
																AND		CODE_CD		!=	'E11'	--생산입고
																)
       									AND     ITEM_CD = '$!{item_id}'
										)
								GROUP	BY	SUBSTR(CENTER_CD,5,4),ITEM_CD,INOUT_DATE*/
                           ) SP
                     WHERE TO_CHAR(SP.AVAIL_DATE, 'YYYYMMDD') = REPLACE('$!{select_date}', '-', '')
			           AND SP.ITEM_ID = '$!{item_id}'
                     GROUP BY SP.LOC_ID, SP.ITEM_ID
		       ) MS
		       , (
                    --	물류 타계정
                    SELECT SUBSTR(DEH.CENTER_CD,5,4)									DC_ID,
                           DED.ITEM_CD													ITEM_ID,
                           SUM(DED.ORDER_QTY /	
                                (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		QTY
                      FROM LO010NM		DEH,
                           LO010ND		DED,
                           CMITEM		ITM
                     WHERE DEH.CENTER_CD		=	DED.CENTER_CD
                       AND DEH.BRAND_CD			=	DED.BRAND_CD
                       AND DEH.ORDER_DATE		=	DED.ORDER_DATE
                       AND DEH.ORDER_NO			=	DED.ORDER_NO
                       AND DEH.BRAND_CD			=	'100001'
                       AND DEH.OUTBOUND_STATE	=	'10'
                       AND DED.ITEM_STATE		=	'A'
                       AND DED.ORDER_QTY		>	0
                       AND DEH.INOUT_CD			=	'D1E'
                       AND DED.ITEM_CD			=	ITM.ITEM_CD
                       AND ITM.ITEM_DIV			IN	('FERT','HAWA')
                       AND TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD') 
                       		= REPLACE(TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1,'YYYY-MM-DD'), '-', '')
			           AND DED.ITEM_CD = '$!{item_id}'
                     GROUP BY SUBSTR(DEH.CENTER_CD,5,4), DED.ITEM_CD
		       ) NM
		 WHERE DI.DC_ID   = ST.DC_ID(+)
		   AND DI.ITEM_ID = ST.ITEM_ID(+)    
		   AND DI.DC_ID   = SC.DC_ID(+)
		   AND DI.ITEM_ID = SC.ITEM_ID(+)
		   AND DI.DC_ID   = TI.DC_ID(+)
		   AND DI.ITEM_ID = TI.ITEM_ID(+)
		   AND DI.DC_ID   = SP.DC_ID(+)
		   AND DI.ITEM_ID = SP.ITEM_ID(+)
		   AND DI.DC_ID   = OU.DC_ID(+)
		   AND DI.ITEM_ID = OU.ITEM_ID(+)   
		   AND DI.DC_ID   = OD.DC_ID(+)
		   AND DI.ITEM_ID = OD.ITEM_ID(+)
		   AND DI.DC_ID   = AD.DC_ID(+)
		   AND DI.ITEM_ID = AD.ITEM_ID(+)          
		   AND DI.DC_ID   = TP.DC_ID(+)
		   AND DI.ITEM_ID = TP.ITEM_ID(+)
		   AND DI.DC_ID   = SA.DC_ID(+)
		   AND DI.ITEM_ID = SA.ITEM_ID(+)
		   AND DI.DC_ID   = MS.DC_ID(+)
		   AND DI.ITEM_ID = MS.ITEM_ID(+) 
		   AND DI.DC_ID   = NM.DC_ID(+)
		   AND DI.ITEM_ID = NM.ITEM_ID(+)
         GROUP BY DI.DC_ID, DI.DC_SHORT_NAME, DI.ITEM_ID, DI.ITEM_NAME, TP.SRC_LOC_NAME, DI.MIN_PICK_QTY
		 ORDER BY DECODE(SUBSTR(DI.DC_ID,0,1),7 ,1 ,9), DI.DC_ID
		)
		--
		UNION ALL
		--
		SELECT 	' ' 					"도착지", 
		       	'전체합계'				"도착지명", 
		       	' ' 					"품목", 
		       	' ' 					"품목명", 
		       	NVL(SUM(DECODE(ST.QTY, 0, NULL, ST.QTY)),0) 						"재고",  
		       	NVL(SUM(DECODE(SC.PROD_QTY, 0, NULL, SC.PROD_QTY)),0) 				"생산계획",
		       	NVL(SUM(DECODE(TI.TR_IN_QTY, 0, NULL, TI.TR_IN_QTY)),0)				"수송입고계획", 
		       	NVL(SUM(DECODE(SP.SALES_QTY, 0, NULL, SP.SALES_QTY)),0) 			"판매계획", 
		       	NVL(SUM(DECODE(OU.TR_OUT_QTY, 0, NULL, OU.TR_OUT_QTY)),0)			"수송출고계획", 
		       	NVL(SUM(DECODE(OD.ORD_QTY, 0, NULL, OD.ORD_QTY)),0)					"주문", 		
		       	NVL(SUM(DECODE(MS.QTY, 0, NULL, MS.QTY)),0)							"구매예정정보",
		       	NVL(SUM(DECODE(NM.QTY, 0, NULL, NM.QTY)),0)							"물류타계정",  
		       	NVL(SUM(DECODE(SA.SAFETY_STOCK, 0, NULL, SA.SAFETY_STOCK)),0)		"안전재고", 
		       	NVL(SUM(NVL(ST.QTY, 0) + NVL(SC.PROD_QTY,0) + NVL(TI.TR_IN_QTY,0) - NVL(OU.TR_OUT_QTY,0) -  NVL(OD.ORD_QTY,0) + NVL(MS.QTY, 0)),0)	 "예상재고"
                , NVL(SUM(DECODE(SP.TOMORROW_SALES_QTY, 0, NULL, SP.TOMORROW_SALES_QTY)),0) 		"내일판매계획", 
		       	NVL(SUM(DECODE(OD.TOMORROW_ORD_QTY, 0, NULL, OD.TOMORROW_ORD_QTY)),0) 		"내일주문",
		       	NVL(SUM(DECODE(AD.REP_QTY, 0, NULL, AD.REP_QTY)),0) 						"보충요구량", 
		       	NVL(SUM(DECODE(TP.TRANS_PLAN_QTY, 0, NULL, TP.TRANS_PLAN_QTY)),0) 			"수송계획량",
		       	' '  			"근거리",
		       	' '				"최소수송단위"
		FROM 	(
					-- 물류경로별 ITEM_ID 목록 추출
			        SELECT 	DISTINCT DI.TGT_LOC DC_ID, DC.DC_SHORT_NAME, DC.DC_NAME, 
			               	DI.PROD_ID ITEM_ID, IM.ITEM_NAME, TU.MIN_PICK_QTY
			          FROM  MAP_PROD_DCPATH DI,
			               	(	SELECT 	DM.DC_ID, DM.DC_NAME, DM.DC_SHORT_NAME
			                 	  FROM 	DC_MST DM
			               	) DC,
			               	(
			               		SELECT 	ITEM_ID, ITEM_NAME, ITEM_STATUS
			               		  FROM 	ITEM_MST
			                	 WHERE 	ITEM_ID = '$!{item_id}'
			               	) IM, TRANS_UNIT TU
			         WHERE 	DI.TGT_LOC 		= 	DC.DC_ID
			           AND 	DI.PROD_ID 		= 	IM.ITEM_ID
			           AND 	DI.TGT_LOC 		=	TU.RDC_ID(+)
			           AND 	DI.PROD_ID 		= 	TU.ITEM_ID(+)
			           AND 	IM.ITEM_STATUS  = 	'ST'
		       ) DI,
		       (
			       -- 전일마감 재고정보 추출
			       SELECT 	ST.IF_DTTM, ST.LOC_ID DC_ID, ST.ITEM_ID
			        	   	, SUM(ST.QTY) QTY
			         FROM 	WMS_STOCK ST,
			               	(
			               		SELECT 	DC_ID, DC_NAME
			               		  FROM 	DC_MST
			                	 WHERE 	CDC_FLAG = 'Y'
			                	UNION 
			                 	SELECT 	DC_ID, DC_NAME
			               		  FROM 	DC_MST
			                	 WHERE 	RDC_FLAG = 'Y'       
			                ) DC
			        WHERE 	ST.LOC_TYPE = 'DC'        
			          AND 	ST.LOC_ID = DC.DC_ID
			          AND 	ST.ITEM_ID = '$!{item_id}'
			          AND   TO_CHAR(ST.USABLE_DATE, 'YYYY-MM-DD') = '$!{select_date}'
			        GROUP 	BY ST.IF_DTTM, ST.LOC_ID, ST.ITEM_ID
		       ) ST,
		       (
			       -- 당일 조/주/야 생산계획 추출
			       SELECT 	SC.PLANT_ID, SC.VERSION, DC.DC_ID, DC.DC_NAME, SC.ITEM_ID, 
			               	SUM(DECODE(SC.SHIFT_TYPE, 1, SC.SHIFT_QTY, 0)) SHIFT1_QTY, 
			               	SUM(DECODE(SC.SHIFT_TYPE, 3, SC.SHIFT_QTY, 0)) SHIFT3_QTY,
			               	SUM(DECODE(SC.SHIFT_TYPE, 5, SC.SHIFT_QTY, 0)) SHIFT5_QTY,
			               	SUM(SC.SHIFT_QTY) PROD_QTY2, SC.QTY_UOM,
			               	SUM(DECODE(SC.SHIFT_TYPE, 1, SC.SHIFT_QTY, 0)) 
			               	+ SUM(DECODE(SC.SHIFT_TYPE, 3, SC.SHIFT_QTY, 0)) PROD_QTY
			         FROM 	DAILY_SCH_PLAN_SHIFT SC,
			                (
			                	SELECT 	DC_ID, DC_NAME, PLANT_ID
			               		  FROM 	DC_MST
			                	 WHERE 	PLANT_ID IS NOT NULL
			                ) DC
			                , V_LAST_PROC_PRODVER LP,
			                (
				                SELECT    SC.PLANT_ID, MAX(VL.VERSION) VERSION
							   FROM    PLAN_VERSION_LOG VL,
							            (
							            SELECT BM.SUB_CAT, BM.PLANT_ID, BM.PERIOD_TYPE
							            FROM   ENGN_BAT_MST BM
							            WHERE  BM.PERIOD_TYPE = 'DAILY'
							            AND    BM.CAT_ID = 'PS'
							            ) SC
							   WHERE    VL.PERIOD_TYPE = SC.PERIOD_TYPE
							   AND      VL.CAT_ID      = 'PS'
							   AND      VL.SUB_CAT     = SC.SUB_CAT
							   AND      TO_NUMBER(VL.STATUS) &gt;= 23
							   /* 버젼일자는 조회기준일과 같거나 작다 */ 
							   AND        VL.RUN_DATE        &lt; TRUNC(TO_DATE('$!{select_date}') ,'D')
                               GROUP BY SC.PLANT_ID
			                ) MV
			        WHERE 	CAT_ID        = 'PS'
			          AND 	SC.PLANT_ID   = DC.PLANT_ID(+)
			          AND 	SC.QTY_UOM    = 'BOX'
			          AND 	SC.VERSION    = MV.VERSION
			          AND 	SC.PLANT_ID   = MV.PLANT_ID
			          AND 	SC.PROD_DATES = TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                  AND 	SC.PLANT_ID   = LP.PLANT_ID
	                  AND 	SC.ITEM_ID    = LP.ITEM_ID
	                  AND 	SC.PROC_ID    = LP.PROC_ID
	                  AND 	SC.PROD_VER   = LP.PROD_VER
			          AND 	SC.ITEM_ID = '$!{item_id}'
                    GROUP     BY SC.PLANT_ID, SC.VERSION, DC.DC_ID, DC.DC_NAME, SC.ITEM_ID, SC.QTY_UOM
		       ) SC,
		       (
			       -- 수송입고계획
			       SELECT TP.TGT_LOC DC_ID, TP.TRANS_DATE, TP.ITEM_ID, SUM(TP.QTY) TR_IN_QTY
			         FROM IF_TRANS_PLAN TP
			        WHERE TP.TRANS_DATE = TO_DATE('$!{select_date}','YYYY-MM-DD')
			          AND TP.VERSION &lt;&gt; '$!{trans_version}'
			          -- ZM3 반품수송 재회
                        AND         TP.PLAN_TYPE NOT IN ('ZM3')
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.SRC_LOC
			              )
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.TGT_LOC
			              )
			          AND TP.ITEM_ID = '$!{item_id}'
			        GROUP BY TP.TGT_LOC, TP.TRANS_DATE, TP.ITEM_ID
		       ) TI,
		       (
			       -- 판매계획 : 수송계획 수립일, 차일
			       SELECT SP.YYYY, SP.VERSION, SP.DELIV_LOC DC_ID, SP.ITEM_ID
	                      , SUM(
	                      		DECODE(SP.YYYYMMDD
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                      				, SP.NORMAL_QTY + SP.PROM_QTY + SP.SUPT_QTY + SP.SAMP_QTY
	                      				, 0)
	                      ) SALES_QTY
	                      , SUM(
	                      		DECODE(SP.YYYYMMDD
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
	                      				, SP.NORMAL_QTY + SP.PROM_QTY + SP.SUPT_QTY + SP.SAMP_QTY
	                      				, 0)
	                      ) TOMORROW_SALES_QTY
			         FROM NFOS_SALES_PLAN_WEEKLY SP
			        WHERE SP.YYYY    = '$!{sales_yyyy}'
			          AND SP.VERSION = '$!{sales_version}'
			          AND SP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD') 
	                      			      AND TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
			          AND SP.ITEM_ID = '$!{item_id}'
			        GROUP BY SP.YYYY, SP.VERSION, SP.DELIV_LOC, SP.ITEM_ID
		       ) SP,
		       (
		       	   --수송출고계획
			       SELECT TP.SRC_LOC DC_ID, TP.TRANS_DATE, TP.ITEM_ID, SUM(TP.QTY) TR_OUT_QTY
			         FROM IF_TRANS_PLAN TP
			        WHERE TP.TRANS_DATE = TO_DATE('$!{select_date}','YYYY-MM-DD')
			          AND TP.VERSION &lt;&gt; '$!{trans_version}'
			          -- ZM3 반품수송 재회
                        AND         TP.PLAN_TYPE NOT IN ('ZM3')
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.SRC_LOC
			              )
			          AND NOT EXISTS (
	                              SELECT DM.DC_ID
	                                FROM DC_MST DM
	                               WHERE DM.CDC_FLAG != 'Y'
	                                 AND DM.RDC_FLAG != 'Y'
	                                 AND DM.DC_ID = TP.TGT_LOC
			              )
			          AND TP.ITEM_ID = '$!{item_id}'
			        GROUP BY TP.SRC_LOC, TP.TRANS_DATE, TP.ITEM_ID       
		       ) OU,
		       (
		       	   --NFOS 주문정보
			       SELECT OD.IF_DTTM, OD.LOC_ID DC_ID, OD.ITEM_ID
	                      , SUM(
	                      		DECODE(TO_CHAR(OD.DUE_DATE, 'YYYYMMDD')
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                      				, OD.QTY
	                      				, 0)
	                      ) ORD_QTY
	                      , SUM(
	                      		DECODE(TO_CHAR(OD.DUE_DATE, 'YYYYMMDD')
	                      				, TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
	                      				, OD.QTY
	                      				, 0)
	                      ) TOMORROW_ORD_QTY
			         FROM NFOS_ORDER OD
			        WHERE OD.IF_DTTM = TO_DATE('$!{select_date}', 'YYYY-MM-DD')
			          AND TO_CHAR(OD.DUE_DATE, 'YYYYMMDD') BETWEEN TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'YYYYMMDD')
	                      									   AND TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1, 'YYYYMMDD')
			          AND OD.ITEM_ID = '$!{item_id}'
			        GROUP BY OD.IF_DTTM, OD.LOC_ID, OD.ITEM_ID
		       ) OD,
		       (
			       -- 보충요구량 : 자기 CDC 에서 보충받는 물량에 대한 부분을 제외하기 위해
			       --            REPLENISHMENTPLAN 에서 ORIGIN 과 DESTINATION 이 같은 물량을 빼줌
			       SELECT PP.VERSIONID, PP.DC_ID, PP.ITEM_ID
			              , SUM(PP.REP_QTY)-SUM(PP.REP_QTY2) REP_QTY
                     FROM (
		                   SELECT PP.VERSIONID, SUBSTR(PP.ITEMID, 4, 4) DC_ID, SUBSTR(PP.ITEMID, 9, 18) ITEM_ID
					              --, SUM(PP.QTY) REP_QTY, 0 REP_QTY2
	                              -- 제주 배송 지점의 경우 배송일이 2일 이므로 2일 후의 보충요구량을 표시
	                              , CASE WHEN AN.ADDNUM = 2 AND SUBSTR(PP.ITEMID, 4, 4) = '8760' THEN SUM(PP.QTY)
	                                     WHEN AN.ADDNUM = 2 THEN SUM(PP.QTY) - SUM(DECODE(PP.DUEDATE, TO_DATE('$!{select_date}','YYYY-MM-DD')+3, PP.QTY, 0))
	                                     WHEN SUBSTR(PP.ITEMID, 4, 4) = '8760' THEN SUM(DECODE(PP.DUEDATE, TO_DATE('$!{select_date}','YYYY-MM-DD')+2, PP.QTY, 0))
	                                     ELSE SUM(DECODE(PP.DUEDATE, TO_DATE('$!{select_date}','YYYY-MM-DD')+1, PP.QTY, 0))
	                              END REP_QTY, 0 REP_QTY2
					         FROM SCM_RP.PRODUCTIONORDERPLAN PP
					              , ( SELECT DECODE(TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'D'), '7', 2, 1) ADDNUM FROM DUAL ) AN
					        WHERE PP.VERSIONID = '$!{trans_version}'
				          	  AND PP.DUEDATE BETWEEN TO_DATE('$!{select_date}', 'YYYY-MM-DD')+1
				                	 		     AND TO_DATE('$!{select_date}', 'YYYY-MM-DD')+3
					          AND SUBSTR(PP.ITEMID, 9, 18) = '$!{item_id}'
					        GROUP BY PP.VERSIONID, SUBSTR(PP.ITEMID, 4, 4), SUBSTR(PP.ITEMID, 9, 18)
					       UNION ALL
		                   SELECT RP.VERSIONID, SUBSTR(RP.PRODUCTDESC, 4, 4) DC_ID, SUBSTR(RP.PRODUCTDESC, 9, 18) ITEM_ID 
					              , 0 REP_QTY, SUM(RP.REPLENISHQTY) REP_QTY2
					         FROM SCM_RP.REPLENISHMENTPLAN RP
					              , ( SELECT DECODE(TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD'), 'D'), '7', 2, 1) ADDNUM FROM DUAL ) AN
					        WHERE RP.VERSIONID = '$!{trans_version}'
					          AND (    RP.REPLENISHDATE = TO_DATE('$!{select_date}','YYYY-MM-DD')+1
					                OR RP.REPLENISHDATE = TO_DATE('$!{select_date}','YYYY-MM-DD')+AN.ADDNUM )
					          AND SUBSTR(RP.PRODUCTDESC, 9, 18) = '$!{item_id}'
					          AND SUBSTR(RP.ORIGIN, 2) = SUBSTR(RP.DESTINATION, 2)
					          AND SUBSTR(RP.PRODUCTDESC, 4, 4) = SUBSTR(RP.DESTINATION, 2)
					        GROUP BY RP.VERSIONID, SUBSTR(RP.PRODUCTDESC, 4, 4), SUBSTR(RP.PRODUCTDESC, 9, 18)
                          ) PP
			        GROUP BY PP.VERSIONID, PP.DC_ID, PP.ITEM_ID
		       ) AD,
		       (
		       		-- 수송계획,  근거리 : 수송계획의 출발지
			        SELECT 	TP.VERSION, TP.TGT_LOC DC_ID, TP.ITEM_ID,
			               	SUM(TP.BASE_STK_QTY+TP.ADD_STK_QTY+TP.PROD_QTY) TRANS_PLAN_QTY
			          FROM 	TRANS_PLAN TP,
			               	DC_MST DC
			         WHERE 	TP.VERSION 		= 	'$!{trans_version}'
			           AND 	TP.SEQ     		= 	'$!{trans_seq}'
			           AND 	TP.TRANS_DATE 	= 	TO_DATE('$!{select_date}','YYYY-MM-DD')
			           AND 	TP.SRC_LOC 		= 	DC.DC_ID(+)
			           AND 	TP.ITEM_ID = '$!{item_id}'
			           -- ZM3 반품수송 재회
                        AND         TP.PLAN_TYPE NOT IN ('ZM3')
			         GROUP 	BY TP.VERSION, TP.TGT_LOC, TP.ITEM_ID
		       ) TP,
		       (
		       		-- 안전재고
			        SELECT PY.WORK_DATE, PY.LOC_ID DC_ID, PY.ITEM_ID
			        	   , SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC) SAFETY_STOCK2
			        	   , CASE WHEN REPLACE('$!{select_date}', '-', '') 
			        	   			   BETWEEN NVL(PY.START_DATE, '00000000') AND NVL(PY.END_DATE, '00000000')
			        	          THEN SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC)
			        	          ELSE SUM(PY.SAFETY_STOCK+PY.CAMP_STOC)
			        	   END SAFETY_STOCK
			          FROM STOCK_POLICY_QTY PY,
			               (
				               	SELECT MAX(WORK_DATE) WORK_DATE
				                  FROM STOCK_POLICY_QTY
				                 WHERE LOC_TYPE = 'DC'
			               ) MV
			         WHERE PY.WORK_DATE = MV.WORK_DATE
			           AND PY.ITEM_ID = '$!{item_id}'
			         GROUP BY PY.WORK_DATE, PY.LOC_ID, PY.ITEM_ID, NVL(PY.START_DATE, '00000000'), NVL(PY.END_DATE, '00000000')
		       ) SA,
		       ( 
		       		-- 구매예정정보
                    SELECT SP.LOC_ID DC_ID, SP.ITEM_ID, SUM(SP.QTY) QTY
                      FROM (
                      			-- 태경농산(8910) 재고를 안양제품관리지점(7100) 재고로 변환
                                SELECT DECODE(SP.LOC_ID, '8910', '7100', SP.LOC_ID) LOC_ID
                                       , SP.ITEM_ID, SP.AVAIL_DATE--, SP.QTY                        
                                       , F_EATOBOX(SP.QTY_UOM,SP.ITEM_ID,SUM(SP.QTY) ) QTY
                                  FROM MAT_STORE_PLAN SP
                                 WHERE SP.IF_DTTM = (SELECT MAX(IF_DTTM)
                                 					 FROM	MAT_STORE_PLAN	
                                 					)
       							   AND SP.ITEM_ID = '$!{item_id}'
                                 GROUP BY DECODE(SP.LOC_ID, '8910', '7100', SP.LOC_ID)
                                          , SP.ITEM_ID, SP.AVAIL_DATE, SP.QTY_UOM
		                        --
								--	입고 완료분은 MAT_STORE_PLAN에서 제외되기 때문에 입고 완료 물량 추가
								/*UNION	ALL
								SELECT	DECODE(SUBSTR(CENTER_CD,5,4),'8910','7100',SUBSTR(CENTER_CD,5,4))	LOC_ID,
										ITEM_CD	ITEM_ID,INOUT_DATE	AVAIL_DATE,
										F_GETCONVBOX(ITEM_CD,'EA',SUM(INOUT_QTY))	QTY
								FROM	(
										SELECT	*
										FROM	LS020NM
										WHERE	INOUT_DATE	>=	TRUNC(SYSDATE)
										AND		INOUT_CD	IN	(
																SELECT	CODE_CD
																FROM	CMCODE
																WHERE	CODE_GRP	=	'LDIV03'
																AND		SUB_CD		=	'E1'	--입고
																AND		CODE_CD		!=	'E11'	--생산입고
																)
       									AND     ITEM_CD = '$!{item_id}'
										UNION	ALL
										SELECT	*
										FROM	LS020NM_G
										WHERE	INOUT_DATE	>=	TRUNC(SYSDATE)
										AND		INOUT_CD	IN	(
																SELECT	CODE_CD
																FROM	CMCODE
																WHERE	CODE_GRP	=	'LDIV03'
																AND		SUB_CD		=	'E1'	--입고
																AND		CODE_CD		!=	'E11'	--생산입고
																)
       									AND     ITEM_CD = '$!{item_id}'
										UNION	ALL
										SELECT	*
										FROM	LS020NM_P
										WHERE	INOUT_DATE	>=	TRUNC(SYSDATE)
										AND		INOUT_CD	IN	(
																SELECT	CODE_CD
																FROM	CMCODE
																WHERE	CODE_GRP	=	'LDIV03'
																AND		SUB_CD		=	'E1'	--입고
																AND		CODE_CD		!=	'E11'	--생산입고
																)
       									AND     ITEM_CD = '$!{item_id}'
										)
								GROUP	BY	SUBSTR(CENTER_CD,5,4),ITEM_CD,INOUT_DATE */
                           ) SP
                     WHERE TO_CHAR(SP.AVAIL_DATE, 'YYYYMMDD') = REPLACE('$!{select_date}', '-', '')
			           AND SP.ITEM_ID = '$!{item_id}'
                     GROUP BY SP.LOC_ID, SP.ITEM_ID
		       ) MS
		       , (
                    --	물류 타계정
                    SELECT SUBSTR(DEH.CENTER_CD,5,4)									DC_ID,
                           DED.ITEM_CD													ITEM_ID,
                           SUM(DED.ORDER_QTY /	
                                (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))		QTY
                      FROM LO010NM		DEH,
                           LO010ND		DED,
                           CMITEM		ITM
                     WHERE DEH.CENTER_CD		=	DED.CENTER_CD
                       AND DEH.BRAND_CD			=	DED.BRAND_CD
                       AND DEH.ORDER_DATE		=	DED.ORDER_DATE
                       AND DEH.ORDER_NO			=	DED.ORDER_NO
                       AND DEH.BRAND_CD			=	'100001'
                       AND DEH.OUTBOUND_STATE	=	'10'
                       AND DED.ITEM_STATE		=	'A'
                       AND DED.ORDER_QTY		>	0
                       AND DEH.INOUT_CD			=	'D1E'
                       AND DED.ITEM_CD			=	ITM.ITEM_CD
                       AND ITM.ITEM_DIV			IN	('FERT','HAWA')
                       AND TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD') 
                       		= REPLACE(TO_CHAR(TO_DATE('$!{select_date}','YYYY-MM-DD')+1,'YYYY-MM-DD'), '-', '')
			           AND DED.ITEM_CD = '$!{item_id}'
                     GROUP BY SUBSTR(DEH.CENTER_CD,5,4), DED.ITEM_CD
		       ) NM
		 WHERE DI.DC_ID   = ST.DC_ID(+)
		   AND DI.ITEM_ID = ST.ITEM_ID(+)    
		   AND DI.DC_ID   = SC.DC_ID(+)
		   AND DI.ITEM_ID = SC.ITEM_ID(+)
		   AND DI.DC_ID   = TI.DC_ID(+)
		   AND DI.ITEM_ID = TI.ITEM_ID(+)
		   AND DI.DC_ID   = SP.DC_ID(+)
		   AND DI.ITEM_ID = SP.ITEM_ID(+)
		   AND DI.DC_ID   = OU.DC_ID(+)
		   AND DI.ITEM_ID = OU.ITEM_ID(+)   
		   AND DI.DC_ID   = OD.DC_ID(+)
		   AND DI.ITEM_ID = OD.ITEM_ID(+)
		   AND DI.DC_ID   = AD.DC_ID(+)
		   AND DI.ITEM_ID = AD.ITEM_ID(+)          
		   AND DI.DC_ID   = TP.DC_ID(+)
		   AND DI.ITEM_ID = TP.ITEM_ID(+)
		   AND DI.DC_ID   = SA.DC_ID(+)
		   AND DI.ITEM_ID = SA.ITEM_ID(+)
		   AND DI.DC_ID   = MS.DC_ID(+)
		   AND DI.ITEM_ID = MS.ITEM_ID(+) 
		   AND DI.DC_ID   = NM.DC_ID(+)
		   AND DI.ITEM_ID = NM.ITEM_ID(+)
		
	</query>
	
	<!-- 2. 각 버전 정보 List -->
	
	<!-- ② /* 판매계획  최종버젼 */  -->
	<query id="nfos_sales_plan_weekly_version_list">

		SELECT	NP.YYYY, NP.VERSION, NP.SEQ
		FROM	(
				SELECT   NP.YYYY, NP.VERSION, NP.SEQ
				FROM   NFOS_SALES_PLAN_WEEKLY NP
				ORDER   BY NP.YYYY DESC, NP.VERSION DESC, NP.SEQ DESC
				) NP
		WHERE   ROWNUM = 1		 

	</query>
	
	<!-- ③ /* NFOS 주문정보 최종 I/F 버젼 */   -->
	<query id="nfos_order_version_list">

		SELECT 	TO_CHAR(SYSDATE,'YYYY-MM-DD'), 1
		FROM	DUAL	

	</query>
	

<!--
=====================================================================================================
 끝 
=====================================================================================================
--> 


</queries>
