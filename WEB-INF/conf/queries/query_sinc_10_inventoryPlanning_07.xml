<?xml version="1.0" encoding="EUC-KR"?>
<queries>	

<!--
=====================================================================================================
	재고정책 >>분석정보>>재고 생산 판매 추이 분석
=====================================================================================================
--> 
	
	<!-- 
	=======================
	  재고정책 기초 정보생성
	=======================
	-->
	
	<!-- 월간 재고 생산 판매 추이 분석  버전 --> 
	<query id="ip_01100_monthly_Stock_Prod_Sales_analysis_list" paging="true"> 
		-- 월간 재고생산 판매 추이분석 조회 쿼리 --

	#if("$!{search_flag}" == "DAILY")  
 				-- 일간 조회
				SELECT   ITEM_ID,	
				         F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME, 
			             TO_CHAR(STOCK_DATE,'YYYY-MM-DD'),
			             SUM(STOCK_QTY) " 기초 재고 ",
			             SUM(QTY1)  	" 일    반 ",
				         SUM(QTY2)  	" 타계정 ",
				         SUM(PROD_QTY)  " 생산 실적 "
		     	FROM(    
			         SELECT ITEM_ID,
			                IF_DTTM STOCK_DATE,
			                SUM(QTY) STOCK_QTY,
				            0 QTY1,
				            0 QTY2,
				            0 PROD_QTY  
			         FROM WMS_STOCK W,
			              (
			               SELECT *
						   FROM CAL_MST	
                           WHERE CAL_DATE BETWEEN '$!{in_fr_date}' AND '$!{in_to_date}'
			              ) CAL
				WHERE ITEM_ID  IN ($!{search_item})
				AND W.ITYPE  = '$!{itype}'
                AND IF_DTTM  = CAL.CAL_DATE
			    GROUP BY ITEM_ID, IF_DTTM, ITYPE
		 		UNION ALL
			    SELECT SA.ITEM_ID,
			           SA.SALE_DATE,
			           0 STOCK_QTY,
				       SUM(DECODE(SA.ACT_TYPE,'01', SA.QTY, 0)) "QTY1",
				       SUM(DECODE(SA.ACT_TYPE,'02', SA.QTY, 0)) "QTY2",
				       0 PROD_QTY
			    FROM  SALES_ACT SA, ITEM_MST IM,
			         (
			          SELECT  *
			          FROM CAL_MST 
			          WHERE CAL_DATE BETWEEN '$!{in_fr_date}' AND '$!{in_to_date}'
			          ) CAL
				WHERE SA.ITEM_ID = IM.ITEM_ID 
				AND IM.ITEM_ID  IN ($!{search_item})
				AND IM.ITYPE     = '$!{itype}'
				AND SA.SALE_DATE = CAL.CAL_DATE
			    GROUP BY SA.ITEM_ID, SA.SALE_DATE		
	   	        UNION ALL
		        SELECT V.ITEM_ID,
				       START_DTTM PROD_DATE,
				       0 STOCK_QTY,
			           0 QTY1,
			           0 QTY2,               
			           SUM(COMPL_QTY) PROD_QTY
		        FROM  V_ERP_PO_MES  V,
		              ITEM_MST IM,
		              (
		               SELECT *
				       FROM CAL_MST	
                       WHERE CAL_DATE BETWEEN '$!{in_fr_date}' AND '$!{in_to_date}'
		               ) CAL
			    WHERE V.ITEM_ID = IM.ITEM_ID 
                AND IM.ITEM_ID  IN ($!{search_item})
                AND IM.ITYPE   = '$!{itype}'
			    AND START_DTTM = CAL.CAL_DATE
			    GROUP BY V.ITEM_ID, START_DTTM
					)
			GROUP BY ITEM_ID, TO_CHAR(STOCK_DATE,'YYYY-MM-DD')
			ORDER BY ITEM_ID, TO_CHAR(STOCK_DATE,'YYYY-MM-DD')
#elseif("$!{search_flag}" == "MONTH")		
 			-- 월간 조회 --
				SELECT   ITEM_ID,	
				         F_GET_ITEM_NAME(ITEM_ID) ITEM_NAME, 
			             TO_CHAR(STOCK_DATE,'YYYY-MM'),
			             --SUM(STOCK_QTY) " 기초 재고 ",
			             SUM(QTY1)  	" 일    반 ",
				         SUM(QTY2)  	" 타계정 ",
				         SUM(PROD_QTY)  " 생산 실적 "
     			FROM(    
			         SELECT ITEM_ID,
			                IF_DTTM STOCK_DATE,
			                SUM(QTY) STOCK_QTY,
				            0 QTY1,
				            0 QTY2,
				            0 PROD_QTY  
			         FROM WMS_STOCK W,
			              (
			               SELECT *
						   FROM CAL_MST	
                           WHERE CAL_DATE BETWEEN LAST_DAY(ADD_MONTHS('$!{in_fr_date}',-1))+1 AND LAST_DAY('$!{in_to_date}')
			              ) CAL
			    WHERE ITEM_ID  IN ($!{search_item})
			    AND W.ITYPE  = '$!{itype}'
			    AND IF_DTTM  = CAL.CAL_DATE
			    GROUP BY ITEM_ID, IF_DTTM, ITYPE
 				UNION ALL
    		    SELECT SA.ITEM_ID,
			           SA.SALE_DATE,
			           0 STOCK_QTY,
				       SUM(DECODE(SA.ACT_TYPE,'01', SA.QTY, 0)) "QTY1",
				       SUM(DECODE(SA.ACT_TYPE,'02', SA.QTY, 0)) "QTY2",
				       0 PROD_QTY
			    FROM  SALES_ACT SA, ITEM_MST IM,
			         (
			          SELECT  *
			          FROM CAL_MST 
			          WHERE CAL_DATE BETWEEN LAST_DAY(ADD_MONTHS('$!{in_fr_date}',-1))+1 AND LAST_DAY('$!{in_to_date}')
			          ) CAL
           		WHERE SA.ITEM_ID = IM.ITEM_ID 
				AND IM.ITEM_ID  IN ($!{search_item})
				AND IM.ITYPE     = '$!{itype}'
				AND SA.SALE_DATE = CAL.CAL_DATE
		   		GROUP BY SA.ITEM_ID, SA.SALE_DATE	
			    UNION ALL
		        SELECT V.ITEM_ID,
				       START_DTTM PROD_DATE,
				       0 STOCK_QTY,
			           0 QTY1,
			           0 QTY2,               
			           SUM(COMPL_QTY) PROD_QTY
		        FROM  V_ERP_PO_MES  V,
		              ITEM_MST IM,
		              (
		               SELECT *
				       FROM CAL_MST	
                       WHERE CAL_DATE BETWEEN LAST_DAY(ADD_MONTHS('$!{in_fr_date}',-1))+1 AND LAST_DAY('$!{in_to_date}')
		              ) CAL
			    WHERE V.ITEM_ID = IM.ITEM_ID 
                AND IM.ITEM_ID  IN ($!{search_item})
                AND IM.ITYPE    = '$!{itype}'
			    AND START_DTTM  = CAL.CAL_DATE
			    GROUP BY V.ITEM_ID, START_DTTM
			)
			GROUP BY ITEM_ID, TO_CHAR(STOCK_DATE,'YYYY-MM')
			ORDER BY ITEM_ID 
#end

				
	</query> 
		
   
	<!-- 유통본부 미납 추적분석(농심) --> 
	<query id="ip_02120_Edi_NS_Analysis" paging="false"> 
	/* 유통본부 미납 추적분석(농심) MAIN 그리드 */			
	SELECT  T1.CNFM_DATE                                "작업일",
	        DECODE(T2.SELL_STOP_DATE,'99991231','','Y')	"판매중지",
	        T1.ALLOC_GUBN                               "공급할당",
	        T1.JEJU_GUBN                                "제주배정",                
	        T1.PROD_CODE                                "품목코드",
	        T1.ITEM_NAME                                "품목명",
	        T1.CUST_CODE                                "거래처코드",
	        T1.CUST_NAME                                "거래처명",
	        T1.ODER_BOX                                 "주문량",
	        T1.SELL_BOX                                 "판매량",
	        T1.HS_BOX                                   "회송량",
	        T1.ODER_BOX - T1.SELL_BOX                   "미납량",
	        T1.DEFAULT_CODE_NS                          "사유",
	        T1.STOR_CODE                                "배송지점코드",
	        T1.DC_NAME                                  "배송지점",
	        T1.DEPT_CODE                                "영업지점코드",
	        T1.DEPT_NAME                                "영업지점명",    
	        T1.HAN_NAME                                 "담당자",
	        T1.BIGO                                     "비고" 
	FROM    (    
	        SELECT  CNFM_DATE,
	                ALLOC_GUBN,
	                JEJU_GUBN,                
	                PROD_CODE,
	                ITEM_NAME,
	                CUST_CODE,
	                CUST_NAME,
	                CASE WHEN ALLOC_GUBN ='Y'   --배정품목이면 EDI 발주량이 주문량이다
	                     THEN ODER_BOX
	                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
	                          THEN DECODE(DEPT_CODE,'144',ODER_BOX,ODER_BOX2)
	                          ELSE ODER_BOX2
	                          END
	                END 	ODER_BOX,
	                SELL_BOX,       
	                HS_BOX,
	                DEFAULT_CODE_NS,
	                STOR_CODE,
	                DC_NAME,
	                DEPT_CODE,
	                DEPT_NAME,    
	                HAN_NAME,
	                BIGO                                
	        FROM    (        
	                SELECT  S1.CNFM_DATE,
	                        S1.PROD_CODE,         
	                        S2.ALLOC_GUBN,
	                        S2.JEJU_GUBN,
	                        S1.ITEM_NAME,
	                        S1.CUST_CODE,
	                        S1.CUST_NAME,  
	                        S1.STOR_CODE, 
	                        S1.DC_NAME,
	                        S1.DEPT_CODE,
	                        S1.DEPT_NAME,
	                        S1.HAN_NAME,
	                        SUM(S1.ODER_BOX)   ODER_BOX,
	                        SUM(S1.ODER_BOX2)  ODER_BOX2,       
	                        SUM(S1.SELL_BOX) - SUM(S1.HS_BOX)  SELL_BOX,
	                        SUM(S1.HS_BOX)     HS_BOX,
	                        S3.DEFAULT_CODE_NS,
	                        S3.BIGO
	                FROM    (
	                        /* 주문량 */
	                        SELECT    T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE) DC_NAME,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                SUM(T1.ODER_BOX)    ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT120    T1,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T1.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')              
	                        AND     T1.ERR_GUBN    	   != '16'
	                        AND     T1.GRUP_CODE    	= '32'            
	                        AND     T1.CUST_CODE    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T1.CUST_CODE    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG     	= '1000'
	                        AND     T1.CUST_CODE    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T1.PROD_CODE     	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'
	                        AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
	                        GROUP
	                        BY      T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.DEPT_CODE,
	                                T7.HAN_NAME,
	                                T9.DEPT_NAME,
	                                T5.STOR_CODE
	                        /* 판매량 */
	                        UNION ALL 
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                SUM(T3.ODER_BOX)    ODER_BOX2,
	                                SUM(T3.SELL_BOX)    SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')               
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE  
	                        AND		T2.UPDT_GUBN	   != '00' 
	                        AND		T3.UPDT_GUBN	   != '00'                 
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        UNION ALL
	                        /* 회송량 */                
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                SUM(T3.SELL_BOX)    HS_BOX,                        
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')           
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND		T2.UPDT_GUBN	   != '00'
	                        AND		T3.UPDT_GUBN	   != '00'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YS%'
	                        AND     T2.REFR_DOC IS  NOT  NULL
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        )S1,
	                        (
	                        SELECT  PROD_CODE,
	                                MAX(DECODE(GUBN,'1','Y','')) ALLOC_GUBN,
	                                MAX(DECODE(GUBN,'2','Y','')) JEJU_GUBN
	                        FROM    (
	                                SELECT  PROD_CODE,                                
	                                        '1'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   = REPLACE('$!{cnfm_date}', '-','')
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE  = '01'
	                                GROUP
	                                BY      PROD_CODE
	                                UNION ALL
	                                SELECT  PROD_CODE,                                
	                                        '2'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   = REPLACE('$!{cnfm_date}', '-','')
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE	= '11'
	                                GROUP
	                                BY      PROD_CODE
	                                )
	                        GROUP
	                        BY      PROD_CODE
	                        )S2,
	                        (
	                        SELECT	DISTINCT CNFM_DATE,
	                                PROD_CODE,
	                                CUST_CODE,
	                                BIGO,
	                                DEFAULT_CODE_NS
	                        FROM	EDI_DEFAULT_NS
	                        WHERE	CNFM_DATE = REPLACE('$!{cnfm_date}', '-','')	                        
	                        )S3
	            WHERE   S1.PROD_CODE = S2.PROD_CODE(+)
	            AND     S1.PROD_CODE = S3.PROD_CODE(+)
	            AND     S1.CNFM_DATE = S3.CNFM_DATE(+)
	            AND     S1.CUST_CODE = S3.CUST_CODE(+)
	            GROUP 
	            BY      S1.CNFM_DATE,
	                    S1.PROD_CODE,            
	                    S1.ITEM_NAME,
	                    S1.CUST_CODE,
	                    S1.CUST_NAME,   
	                    S2.ALLOC_GUBN,
	                    S2.JEJU_GUBN,
	                    S1.STOR_CODE, 
	                    S1.DC_NAME,
	                    S1.DEPT_CODE,
	                    S1.DEPT_NAME,
	                    S1.HAN_NAME,
	                    S3.BIGO,
	                    S3.DEFAULT_CODE_NS    
	            )
	        )T1, ITEM_MST T2        
	WHERE   DECODE(SIGN(T1.ODER_BOX - T1.SELL_BOX),-1,0,T1.ODER_BOX - T1.SELL_BOX) > 0      
	AND     T1.PROD_CODE = T2.ITEM_ID   
	ORDER
	BY		1,5,7      
	</query> 
	
	<query id="ip_02120_Edi_NS_Analysis_dw5" paging="false"> 
	/* 유통본부 미납 추적분석(농심) DW2 그리드 */
	SELECT  T1.CNFM_DATE                                "작업일",
	        DECODE(T2.SELL_STOP_DATE,'99991231','','Y')	"판매중지",
	        T1.ALLOC_GUBN                               "공급할당",
	        T1.JEJU_GUBN                                "제주배정",                
	        T1.PROD_CODE                                "품목코드",
	        T1.ITEM_NAME                                "품목명",
	        T1.CUST_CODE                                "거래처코드",
	        T1.CUST_NAME                                "거래처명",
	        T1.ODER_BOX                                 "주문량",
	        T1.SELL_BOX                                 "판매량",
	        T1.HS_BOX                                   "회송량",
	        T1.ODER_BOX - T1.SELL_BOX                   "미납량",
	        T1.DEFAULT_CODE_NS                          "사유",
	        T1.STOR_CODE                                "배송지점코드",
	        T1.DC_NAME                                  "배송지점",
	        T1.DEPT_CODE                                "영업지점코드",
	        T1.DEPT_NAME                                "영업지점명",    
	        T1.HAN_NAME                                 "담당자",
	        T1.BIGO                                     "비고" 
	FROM    (    
	        SELECT  CNFM_DATE,
	                ALLOC_GUBN,
	                JEJU_GUBN,                
	                PROD_CODE,
	                ITEM_NAME,
	                CUST_CODE,
	                CUST_NAME,
	                CASE WHEN ALLOC_GUBN ='Y'   --배정품목이면 EDI 발주량이 주문량이다
	                     THEN ODER_BOX
	                     ELSE CASE WHEN JEJU_GUBN ='Y'  -- 제주배정인 경우 제주지점만 EDI 발주량으로, 그 외는 영업사원값이다
	                          THEN DECODE(DEPT_CODE,'144',ODER_BOX,ODER_BOX2)
	                          ELSE ODER_BOX2
	                          END
	                END 	ODER_BOX,
	                SELL_BOX,       
	                HS_BOX,
	                DEFAULT_CODE_NS,
	                STOR_CODE,
	                DC_NAME,
	                DEPT_CODE,
	                DEPT_NAME,    
	                HAN_NAME,
	                BIGO                                
	        FROM    (        
	                SELECT  S1.CNFM_DATE,
	                        S1.PROD_CODE,         
	                        S2.ALLOC_GUBN,
	                        S2.JEJU_GUBN,
	                        S1.ITEM_NAME,
	                        S1.CUST_CODE,
	                        S1.CUST_NAME,  
	                        S1.STOR_CODE, 
	                        S1.DC_NAME,
	                        S1.DEPT_CODE,
	                        S1.DEPT_NAME,
	                        S1.HAN_NAME,
	                        SUM(S1.ODER_BOX)   ODER_BOX,
	                        SUM(S1.ODER_BOX2)  ODER_BOX2,       
	                        SUM(S1.SELL_BOX) - SUM(S1.HS_BOX)  SELL_BOX,
	                        SUM(S1.HS_BOX)     HS_BOX,
	                        S3.DEFAULT_CODE_NS,
	                        S3.BIGO
	                FROM    (
	                        /* 주문량 */
	                        SELECT    T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE) DC_NAME,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                SUM(T1.ODER_BOX)    ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT120    T1,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T1.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')              
	                        AND     T1.ERR_GUBN    	   != '16'
	                        AND     T1.GRUP_CODE    	= '32'            
	                        AND     T1.CUST_CODE    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	!= '1020073'
	                        AND     T1.CUST_CODE    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG     	= '1000'
	                        AND     T1.CUST_CODE    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T1.PROD_CODE     	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'
	                        AND     T1.IPUT_DATE||T1.IPUT_TIME &lt; TO_CHAR(TO_DATE(T1.CNFM_DATE,'YYYYMMDD')-1,'YYYYMMDD')||'180000'
	                        GROUP
	                        BY      T1.CNFM_DATE,
	                                T1.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T1.CUST_CODE,
	                                T4.CUST_NAME,
	                                T5.DEPT_CODE,
	                                T7.HAN_NAME,
	                                T9.DEPT_NAME,
	                                T5.STOR_CODE
	                        /* 판매량 */
	                        UNION ALL 
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                SUM(T3.ODER_BOX)    ODER_BOX2,
	                                SUM(T3.SELL_BOX)    SELL_BOX,
	                                0   HS_BOX,
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')               
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	!= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE  
	                        AND		T2.UPDT_GUBN	   != '00'                  
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YO%'
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        UNION ALL
	                        /* 회송량 */                
	                        SELECT  T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                F_GET_DC_NAME(T5.STOR_CODE),                        
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,
	                                0                   ODER_BOX,
	                                0                   ODER_BOX2,
	                                0                   SELL_BOX,
	                                SUM(T3.SELL_BOX)    HS_BOX,                        
	                                T7.HAN_NAME
	                        FROM    SDORT101    T2,
	                                SDORT102    T3,
	                                SDSTT101    T4,
	                                SDSTT103    T5,
	                                SDSTT105    T6,
	                                NCOMT005    T7,
	                                ITEM_MST    T8,
	                                SDSTT401    T9                        
	                        WHERE   T2.CNFM_DATE    	= REPLACE('$!{cnfm_date}', '-','')           
	                        AND     T2.SLIP_NO      	= T3.SLIP_NO
	                        AND     T4.GRUP_CODE    	= '32'            
	                        AND     T2.SOLD_PART    	= T4.CUST_CODE
	                        AND     T4.HEAD_CUST_CODE 	!= '1020073'
	                        AND     T2.SOLD_PART    	= T5.CUST_CODE
	                        AND     T5.SALE_ORG    		= '1000'
	                        AND		T2.UPDT_GUBN	   != '00'
	                        AND     T2.SOLD_PART    	= T6.CUST_CODE                      
	                        AND     T6.PRTN_ROLE    	= 'VE'
	                        AND     T2.SLIP_GUBN_CODE LIKE 'YS%'
	                        AND     T2.REFR_DOC IS  NOT  NULL
	                        AND     T6.PRTN_CUST_CODE   = T7.EMP_NO
	                        AND     T3.PROD_CODE    	= T8.ITEM_ID
	                        AND     T5.DEPT_CODE     	= T9.DEPT_CODE
	                        AND     T9.APPL_END_YYMM 	= '999912'                    
	                        GROUP
	                        BY      T2.CNFM_DATE,
	                                T3.PROD_CODE,
	                                T8.ITEM_NAME,
	                                T2.SOLD_PART,
	                                T4.CUST_NAME,
	                                T5.STOR_CODE,
	                                T5.DEPT_CODE,
	                                T9.DEPT_NAME,                
	                                T7.HAN_NAME	                                
	                        )S1,
	                        (
	                        SELECT  PROD_CODE,
	                                MAX(DECODE(GUBN,'1','Y','')) ALLOC_GUBN,
	                                MAX(DECODE(GUBN,'2','Y','')) JEJU_GUBN
	                        FROM    (
	                                SELECT  PROD_CODE,                                
	                                        '1'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   = REPLACE('$!{cnfm_date}', '-','')
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE  = '01'
	                                GROUP
	                                BY      PROD_CODE
	                                UNION ALL
	                                SELECT  PROD_CODE,                                
	                                        '2'         GUBN
	                                FROM    SDORT203
	                                WHERE   CNFM_DATE   = REPLACE('$!{cnfm_date}', '-','')
	                                AND     ALLOC_GUBN  = '2'   -- 2 -> '관리' 
	                                AND     ALLOC_ZONE	= '11'
	                                GROUP
	                                BY      PROD_CODE
	                                )
	                        GROUP
	                        BY      PROD_CODE
	                        )S2,
	                        (
	                        SELECT	DISTINCT CNFM_DATE,
	                                PROD_CODE,
	                                CUST_CODE,
	                                BIGO,
	                                DEFAULT_CODE_NS
	                        FROM	EDI_DEFAULT_NS
	                        WHERE	CNFM_DATE = REPLACE('$!{cnfm_date}', '-','')	                        
	                        )S3
	            WHERE   S1.PROD_CODE = S2.PROD_CODE(+)
	            AND     S1.PROD_CODE = S3.PROD_CODE(+)
	            AND     S1.CNFM_DATE = S3.CNFM_DATE(+)
	            AND     S1.CUST_CODE = S3.CUST_CODE(+)
	            GROUP 
	            BY      S1.CNFM_DATE,
	                    S1.PROD_CODE,            
	                    S1.ITEM_NAME,
	                    S1.CUST_CODE,
	                    S1.CUST_NAME,   
	                    S2.ALLOC_GUBN,
	                    S2.JEJU_GUBN,
	                    S1.STOR_CODE, 
	                    S1.DC_NAME,
	                    S1.DEPT_CODE,
	                    S1.DEPT_NAME,
	                    S1.HAN_NAME,
	                    S3.BIGO,
	                    S3.DEFAULT_CODE_NS    
	            )
	        )T1, ITEM_MST T2        
	WHERE   DECODE(SIGN(T1.ODER_BOX - T1.SELL_BOX),-1,0,T1.ODER_BOX - T1.SELL_BOX) > 0      
	AND     T1.PROD_CODE = T2.ITEM_ID   
	ORDER
	BY		1,5,7         	

	</query> 			

	<!-- 유통본부 미납 추적 분석(농심) DW2 '주문정보' --> 
	<query id="ip_02120_Edi_NS_Analysis_DW2" paging="false"> 
		/* 유통본부 미납 추적 분석 DW2 '주문정보' */		
        SELECT  --TO_CHAR(TO_DATE(CNFM_DATE,'YYYY-MM-DD'),'YYYY-MM-DD') CNFM_DATE,
                --F_GETDCNAME(T1.DC_ID)    DC_NAME,
                SLIP_GUBN,
                --T2.DEPT_NAME,
                --HAN_NAME,
                T3.CUST_CODE,
                T3.CUST_NAME,
                SLIP_NO,
                SEQ_NO,
                REQT_BOX "요청수량",
                SELL_BOX "판매수량",
                SHORTAGE_GUBN "결품사유",
                NVL(F_GET_NFOS_IN_DTTM( CNFM_DATE, SLIP_NO, SEQ_NO , '$!{item_id}'),IPUT_DTTM)    "입력시간",
                CLOS_DTTM "마감시간",
                CASE
                    WHEN F_GET_NFOS_UPDT_GUBN( CNFM_DATE, SLIP_NO, SEQ_NO , '$!{item_id}') = '00' THEN 
                        'NFOS삭제'
                    ELSE
                        CHGO_GUBN
                END    "출고구분"
		FROM    (
		        SELECT  A.CNFM_DATE,
		                A.STOR_CODE                        DC_ID,
		                CASE
		                    WHEN    A.SLIP_GUBN_CODE = 'D15' OR A.SLIP_GUBN_CODE = 'D16' THEN   
		                            '수출'        
		                    ELSE     '일반'
		                END        DOMAIN,
		                CASE
		                    WHEN A.SLIP_GUBN_CODE = 'D1E'    THEN
		                        '부서타계정'
		                    WHEN A.SLIP_GUBN_CODE = 'PRE_D1E'    THEN
		                        '결재상신'
		                    WHEN SUBSTR(A.SLIP_GUBN_CODE,1,2) = 'E3' THEN -- 회송
		                        '회송'
		                    WHEN B.ITEM_CATG IS NOT NULL    THEN 
		                        '일반'
		                    ELSE
		                         '타계정'
		                END                                SLIP_GUBN,
		                A.DEPT_CODE,
		                IPUT_EMP_NAME                    HAN_NAME,
		                A.CUST_ID                        CUST_CODE,
		                A.BRAND_NO                        SLIP_NO,
		                A.BRAND_LINE_NO                    SEQ_NO,
		                ROUND(A.REQT_BOX,1)                REQT_BOX,
		                ROUND(NVL(A.SELL_BOX,0),1)        SELL_BOX,
		                TO_CHAR(A.REG_DATETIME,'YYYY-MM-DD HH24:MI:SS')                            IPUT_DTTM,
		                DECODE(A.OUTBOUND_STATE,'20','마감','마감전')                             CHGO_GUBN,
		                F_GET_WMSCODE_NAME('LDIV11',A.SHORTAGE_DIV)                                SHORTAGE_GUBN,
		                TO_CHAR(A.ENTRY_DATETIME,'YYYY-MM-DD HH24:MI:SS')                        CLOS_DTTM,
		                A.REG_DATETIME, A.ENTRY_DATETIME
		        FROM    (
		                SELECT  TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD')    CNFM_DATE,
		                        SUBSTR(DEH.CENTER_CD,5,4)            STOR_CODE,
		                        DEH.INOUT_CD                        SLIP_GUBN_CODE,
		                        DEH.DEPT_CD                            DEPT_CODE,
		                        DEH.DELIVERY_CD                CUST_ID,
		                        DEH.SALESMAN_NM                        IPUT_EMP_NAME,
		                        DED.BRAND_NO,
		                        DED.BRAND_LINE_NO,
		                        DED.ITEM_CD,
		                        SUM(DED.ORDER_QTY    /    
		                            (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))        REQT_BOX,
		                        MAX(NVL(T2.CONFIRM_QTY,0)    /    
		                            (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))        SELL_BOX,
		                        MIN(DEH.REG_DATETIME)    REG_DATETIME,
		                        MAX(DED.OUTBOUND_STATE)    OUTBOUND_STATE,
		                        MAX(DED.SHORTAGE_DIV)    SHORTAGE_DIV,
		                        MAX(DED.ENTRY_DATETIME)    ENTRY_DATETIME,
		                        DED.OTHER_ACCOUNT_CD
		                FROM    LO010NM        DEH,
		                        LO010ND        DED,
		                        CMITEM        ITM,
		                        (
		                        SELECT    CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD, SUM(CONFIRM_QTY)    CONFIRM_QTY 
		                        FROM    LO020ND
		                        WHERE    BRAND_CD    = '100001'
		                        -- 배송지점    
		                        AND CENTER_CD = '1300'||'$!{dc_id}'
								AND        OUTBOUND_DATE =  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		                        AND        ITEM_CD        = '$!{item_id}'
		                        GROUP
		                        BY        CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD
		                        )            T2    
		                WHERE   DEH.CENTER_CD            =    DED.CENTER_CD
		                AND     DEH.BRAND_CD            =    DED.BRAND_CD
		                AND     DEH.ORDER_DATE            =    DED.ORDER_DATE
		                AND     DEH.ORDER_NO            =    DED.ORDER_NO
		                AND     DEH.BRAND_CD            =    '100001'
		                -- 배송지점    
		                AND		DEH.CENTER_CD = '1300'||'$!{dc_id}'
		                AND     DEH.OUTBOUND_STATE        >=    '10'
		                AND     DED.ITEM_STATE            =    'A'
		                AND     DED.ITEM_CD                =    ITM.ITEM_CD
		                AND     ITM.ITEM_DIV            IN    ('FERT','HAWA')
						AND        DEH.ORDER_DATE          =  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		                AND     DED.ITEM_CD             = '$!{item_id}'
		                AND     DED.BRAND_NO            = T2.BRAND_NO(+)
		                AND     DED.BRAND_LINE_NO        = T2.BRAND_LINE_NO(+)
		                AND     DED.BRAND_DATE            = T2.BRAND_DATE(+)
		                AND     DED.ITEM_CD                = T2.ITEM_CD(+)
		                AND     DED.CENTER_CD            = T2.CENTER_CD(+)
		                GROUP
		                BY      TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD'),
		                        SUBSTR(DEH.CENTER_CD,5,4),
		                        DEH.INOUT_CD,
		                        DEH.DEPT_CD,
		                        DEH.DELIVERY_CD,
		                        DEH.SALESMAN_NM,
		                        DED.BRAND_NO,
		                        DED.BRAND_LINE_NO,
		                        DED.ITEM_CD,
		                        DED.OTHER_ACCOUNT_CD
		                UNION    ALL    
		                SELECT  TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD')    CNFM_DATE,
		                        SUBSTR(DEH.CENTER_CD,5,4)            STOR_CODE,
		                        DEH.INOUT_CD                        SLIP_GUBN_CODE,
		                        DEH.DEPT_CD                            DEPT_CODE,
		                        DEH.DELIVERY_CD                CUST_ID,
		                        DEH.SALESMAN_NM                        IPUT_EMP_NAME,
		                        DED.BRAND_NO,
		                        DED.BRAND_LINE_NO,
		                        DED.ITEM_CD,
		                        SUM(DED.ORDER_QTY    /    
		                            (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))        REQT_BOX,
		                        MAX(NVL(T2.CONFIRM_QTY,0)    /    
		                            (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))        SELL_BOX,
		                        MIN(DEH.REG_DATETIME)    REG_DATETIME,
		                        MAX(DED.OUTBOUND_STATE)    OUTBOUND_STATE,
		                        MAX(DED.SHORTAGE_DIV)    SHORTAGE_DIV,
		                        MAX(DED.ENTRY_DATETIME)    ENTRY_DATETIME,
		                        DED.OTHER_ACCOUNT_CD
		                FROM    LO010NM_G    DEH,
		                        LO010ND_G    DED,
		                        CMITEM        ITM,
		                        (
		                        SELECT    CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD, SUM(CONFIRM_QTY)    CONFIRM_QTY  
		                        FROM    LO020ND_G
		                        WHERE    BRAND_CD    = '100001'
		                        -- 배송지점    
		                        AND CENTER_CD = '1300'||'$!{dc_id}'
								AND        OUTBOUND_DATE =  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		                        AND        ITEM_CD       = '$!{item_id}'
		                        GROUP
		                        BY        CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD
		                        )            T2    
		                WHERE    DEH.CENTER_CD            =    DED.CENTER_CD
		                AND        DEH.BRAND_CD            =    DED.BRAND_CD
		                AND        DEH.ORDER_DATE            =    DED.ORDER_DATE
		                AND        DEH.ORDER_NO            =    DED.ORDER_NO
		                AND        DEH.BRAND_CD            =    '100001'
		                -- 배송지점    
		                AND DEH.CENTER_CD = '1300'||'$!{dc_id}'
		                AND        DEH.OUTBOUND_STATE        >=    '10'
		                AND        DED.ITEM_STATE            =    'A'
		                AND        DED.ITEM_CD                =    ITM.ITEM_CD
		                AND        ITM.ITEM_DIV            IN    ('FERT','HAWA')
						AND        DEH.ORDER_DATE          =  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		                AND        DED.ITEM_CD             = '$!{item_id}'
		                AND        DED.BRAND_NO            = T2.BRAND_NO(+)
		                AND        DED.BRAND_LINE_NO        = T2.BRAND_LINE_NO(+)
		                AND        DED.BRAND_DATE            = T2.BRAND_DATE(+)
		                AND        DED.ITEM_CD                = T2.ITEM_CD(+)
		                AND        DED.CENTER_CD            = T2.CENTER_CD(+)
		                GROUP
		                BY      TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD'),
		                        SUBSTR(DEH.CENTER_CD,5,4),
		                        DEH.INOUT_CD,
		                        DEH.DEPT_CD,
		                        DEH.DELIVERY_CD,
		                        DEH.SALESMAN_NM,
		                        DED.BRAND_NO,
		                        DED.BRAND_LINE_NO,
		                        DED.ITEM_CD,
		                        DED.OTHER_ACCOUNT_CD
		                UNION    ALL
		                SELECT    TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD')    CNFM_DATE,
		                        SUBSTR(DEH.CENTER_CD,5,4)            STOR_CODE,
		                        DEH.INOUT_CD                        SLIP_GUBN_CODE,
		                        DEH.DEPT_CD                            DEPT_CODE,
		                        DEH.DELIVERY_CD                CUST_ID,
		                        DEH.SALESMAN_NM                        IPUT_EMP_NAME,
		                        DED.BRAND_NO,
		                        DED.BRAND_LINE_NO,
		                        DED.ITEM_CD,
		                        SUM(DED.ORDER_QTY    /    
		                            (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))        REQT_BOX,
		                        MAX(NVL(T2.CONFIRM_QTY,0)    /    
		                            (DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1)))        SELL_BOX,
		                        MIN(DEH.REG_DATETIME)    REG_DATETIME,
		                        MAX(DED.OUTBOUND_STATE)    OUTBOUND_STATE,
		                        MAX(DED.SHORTAGE_DIV)    SHORTAGE_DIV,
		                        MAX(DED.ENTRY_DATETIME)    ENTRY_DATETIME,
		                        DED.OTHER_ACCOUNT_CD
		                FROM    LO010NM_P    DEH,
		                        LO010ND_P    DED,
		                        CMITEM        ITM,
		                        (
		                        SELECT    CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD, SUM(CONFIRM_QTY)    CONFIRM_QTY  
		                        FROM    LO020ND_P
		                        WHERE    BRAND_CD    = '100001'
		                        -- 배송지점    
		                        AND CENTER_CD = '1300'||'$!{dc_id}'
								AND        OUTBOUND_DATE =  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		                        AND        ITEM_CD        = '$!{item_id}'
		                        GROUP
		                        BY        CENTER_CD, BRAND_DATE, BRAND_NO, BRAND_LINE_NO, ITEM_CD
		                        )            T2
		                WHERE   DEH.CENTER_CD            =    DED.CENTER_CD
		                AND     DEH.BRAND_CD            =    DED.BRAND_CD
		                AND     DEH.ORDER_DATE            =    DED.ORDER_DATE
		                AND     DEH.ORDER_NO            =    DED.ORDER_NO
		                AND     DEH.BRAND_CD            =    '100001'
		                -- 배송지점    
		                AND		DEH.CENTER_CD = '1300'||'$!{dc_id}'
		                AND     DEH.OUTBOUND_STATE        >=    '10'
		                AND     DED.ITEM_STATE            =    'A'
		                AND     DED.ITEM_CD                =    ITM.ITEM_CD
		                AND     ITM.ITEM_DIV            IN    ('FERT','HAWA')
						AND     DEH.ORDER_DATE         =  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		                AND     DED.ITEM_CD             = '$!{item_id}'
		                AND     DED.BRAND_NO            = T2.BRAND_NO(+)
		                AND     DED.BRAND_LINE_NO        = T2.BRAND_LINE_NO(+)
		                AND     DED.BRAND_DATE            = T2.BRAND_DATE(+)
		                AND     DED.ITEM_CD                = T2.ITEM_CD(+)
		                AND     DED.CENTER_CD            = T2.CENTER_CD(+)
		                GROUP
		                BY      TO_CHAR(DEH.ORDER_DATE,'YYYYMMDD'),
		                        SUBSTR(DEH.CENTER_CD,5,4),
		                        DEH.INOUT_CD,
		                        DEH.DEPT_CD,
		                        DEH.DELIVERY_CD,
		                        DEH.SALESMAN_NM,
		                        DED.BRAND_NO,
		                        DED.BRAND_LINE_NO,
		                        DED.ITEM_CD,
		                        DED.OTHER_ACCOUNT_CD
		                )            A,
		                (
		                SELECT    CODE        ITEM_CATG
		                FROM    SDSTT500
		                WHERE    CODE_GUBN    = 'OR103'
		                AND        CODE_NAME2    = 'Y'
		                AND        CODE_NAME3    = '01'
		                )            B
		        WHERE   A.SLIP_GUBN_CODE	NOT LIKE 'D2%' -- 수송제외
				AND     A.CNFM_DATE			=  TO_DATE('$!{cnfm_date}','YYYY-MM-DD')
		        AND     A.OTHER_ACCOUNT_CD	= B.ITEM_CATG(+)
		        )        T1,
		        (
		        SELECT  DEPT_CODE, DEPT_NAME
		        FROM    SDSTT401
		        WHERE   APPL_END_YYMM = '999912'
		        AND     DEPT_GRAD_CODE    = '40'
		        UNION   ALL
		        SELECT  DEPT_CODE,    DEPT_NAME_ABBR    DEPT_NAME
		        FROM    NCOMT001        
		        )        T2,
		        SDSTT101    T3
		WHERE   T1.DEPT_CODE    = T2.DEPT_CODE(+)
		AND     T1.CUST_CODE    = T3.CUST_CODE(+)
		/* 거래처 코드 */
		AND     T3.CUST_CODE = '$!{cust_id}'
		ORDER BY 6, 1
	</query> 	

	<!-- 유통본부 미납 추적 분석(농심) DW3 '수송정보' --> 
	<query id="ip_02120_Edi_NS_Analysis_DW3" paging="false"> 
		/* 유통본부 미납 추적 분석 DW3 '수송정보' */
        SELECT  F_GETDCNAME(S1.DC_ID)    DC_NAME,
                NVL(S1.RECEIPT_PRE,0)  "전일입고",
                NVL(S1.BASE_STOCK,0)   "기초재고",
                NVL(S1.RECEIPT,0)      "입고",
                NVL(S1.ISSUE,0)        "출고",
                S2.ORDER_QTY            "주문수량",
                S2.CONFIRM_QTY          "마감수량",
                S2.TERM                 "결품수량",
                S2.ORDER_CNT            "오더건수",
                TO_CHAR(S2.MIN_CLOS_DTTM,'YYYY-MM-DD HH24:MI:SS') "배송마감(FROM)",
                TO_CHAR(S2.MAX_CLOS_DTTM,'YYYY-MM-DD HH24:MI:SS') "배송마감(TO)",
                --S3.SRC_LOC              "출고장",
                F_GETDCNAME(S3.SRC_LOC) "출고장명",
                S3.BRAND_NO             "전표번호",
                F_GET_CODE_NAME('TRANS_STATE',S3.TRANS_STATE) "전표상태",
                SHORTAGE_DIV            "결품사유",
                S3.QTY                  "계획수량",
                S3.CHGO_QTY             "출고수량",
                TO_CHAR(S3.CHGO_DTTM,'YYYY-MM-DD HH24:MI:SS')   "출고일시",
                S3.IPGO_QTY             "입고수량",
                TO_CHAR(S3.IPGO_DTTM,'YYYY-MM-DD HH24:MI:SS')   "입고일시"
		FROM    (
		        /* 재고,입출고정보 */
		        SELECT    DC_ID,
		                ITEM_ID,
		                RECEIPT_PRE,
		                BASE_STOCK,
		                RECEIPT+RECEIPT_EXPT    RECEIPT,
		                ISSUE+ISSUE_EXPT        ISSUE
		        FROM    DC_DATAWAREHOUSE
		        WHERE    CNFM_DATE    = REPLACE('$!{cnfm_date}','-','')
		        AND		ITEM_ID    = '$!{item_id}'
		        AND		DC_ID      = '$!{dc_id}'		
		        )    S1,		
				(
		        /* 결품정보 */
		        SELECT  K1.DC_ID,
		                K1.ITEM_ID,
		                SUM(ORDER_QTY)                    ORDER_QTY,
		                SUM(CONFIRM_QTY)                CONFIRM_QTY,
		                SUM(ORDER_QTY)-SUM(CONFIRM_QTY)    TERM,
		                MIN(MIN_CLOS_DTTM)                MIN_CLOS_DTTM,
		                MAX(MAX_CLOS_DTTM)                MAX_CLOS_DTTM,
		                SUM(ORDER_CNT)                    ORDER_CNT,
		                MAX(REG_DTTM)                    REG_DTTM
		        FROM    (
		                SELECT  SUBSTR(T1.CENTER_CD,5,8)    DC_ID,
		                        T2.ITEM_CD                    ITEM_ID,
		                        SUM(T2.ORDER_QTY/
		                            DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))            ORDER_QTY,
		                        SUM(T2.CONFIRM_QTY/
		                            DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))            CONFIRM_QTY,
		                        MIN(T2.ENTRY_DATETIME)                                            MIN_CLOS_DTTM,
		                        MAX(T2.ENTRY_DATETIME)                                            MAX_CLOS_DTTM,
		                        COUNT(T2.ITEM_CD)                                                ORDER_CNT,
		                        MAX(T1.REG_DATETIME)                                            REG_DTTM
		                FROM    LO020NM    T1,
		                        LO020ND    T2,
		                        CMITEM    ITM
		                WHERE   T1.CENTER_CD        = T2.CENTER_CD
		                AND     T1.BRAND_CD            = T2.BRAND_CD
		                AND     T1.OUTBOUND_DATE    = T2.OUTBOUND_DATE
		                AND     T1.OUTBOUND_NO        = T2.OUTBOUND_NO
		                AND     T1.BRAND_CD            = '100001'    
		                AND     T1.INOUT_CD            LIKE 'D1%'
		                AND     T1.OUTBOUND_DATE    = TO_DATE('$!{cnfm_date}')
		                AND     T2.ITEM_CD            = ITM.ITEM_CD
		                AND     TRIM(T2.BRAND_NO)    IS NOT NULL
		                AND     T2.SHORTAGE_DIV        = '11' /* 재고부족 */
		                GROUP
		                BY      SUBSTR(T1.CENTER_CD,5,8),
		                        T2.ITEM_CD
		                UNION   ALL
		                SELECT  SUBSTR(T1.CENTER_CD,5,8)    DC_ID,
		                        T2.ITEM_CD                    ITEM_ID,
		                        SUM(T2.ORDER_QTY/
		                            DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))            ORDER_QTY,
		                        SUM(T2.CONFIRM_QTY/
		                            DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))            CONFIRM_QTY,
		                        MIN(T2.ENTRY_DATETIME)                                            MIN_CLOS_DTTM,
		                        MAX(T2.ENTRY_DATETIME)                                            MAX_CLOS_DTTM,
		                        COUNT(T2.ITEM_CD)                                                ORDER_CNT,
		                        MAX(T1.REG_DATETIME)                                            REG_DTTM
		                FROM    LO020NM_G    T1,
		                        LO020ND_G    T2,
		                        CMITEM    ITM
		                WHERE   T1.CENTER_CD        = T2.CENTER_CD
		                AND     T1.BRAND_CD            = T2.BRAND_CD
		                AND     T1.OUTBOUND_DATE    = T2.OUTBOUND_DATE
		                AND     T1.OUTBOUND_NO        = T2.OUTBOUND_NO
		                AND     T1.BRAND_CD            = '100001'    
		                AND     T1.INOUT_CD            LIKE 'D1%'
		                AND     T1.OUTBOUND_DATE    = TO_DATE('$!{cnfm_date}')
		                AND     T2.ITEM_CD            = ITM.ITEM_CD
		                AND     TRIM(T2.BRAND_NO)    IS NOT NULL
		                AND     T2.SHORTAGE_DIV        = '11' /* 재고부족 */
		                GROUP
		                BY      SUBSTR(T1.CENTER_CD,5,8),
		                        T2.ITEM_CD
		                UNION   ALL
		                SELECT    SUBSTR(T1.CENTER_CD,5,8)    DC_ID,
		                        T2.ITEM_CD                    ITEM_ID,
		                        SUM(T2.ORDER_QTY/
		                            DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))            ORDER_QTY,
		                        SUM(T2.CONFIRM_QTY/
		                            DECODE(ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))            CONFIRM_QTY,
		                        MIN(T2.ENTRY_DATETIME)                                            MIN_CLOS_DTTM,
		                        MAX(T2.ENTRY_DATETIME)                                            MAX_CLOS_DTTM,
		                        COUNT(T2.ITEM_CD)                                                ORDER_CNT,
		                        MAX(T1.REG_DATETIME)                                            REG_DTTM    
		                FROM    LO020NM_P    T1,
		                        LO020ND_P    T2,
		                        CMITEM    ITM
		                WHERE   T1.CENTER_CD        = T2.CENTER_CD
		                AND     T1.BRAND_CD            = T2.BRAND_CD
		                AND     T1.OUTBOUND_DATE    = T2.OUTBOUND_DATE
		                AND     T1.OUTBOUND_NO        = T2.OUTBOUND_NO
		                AND     T1.BRAND_CD            = '100001'    
		                AND     T1.INOUT_CD            LIKE 'D1%'
		                AND     T1.OUTBOUND_DATE    = TO_DATE('$!{cnfm_date}')
		                AND     T2.ITEM_CD            = ITM.ITEM_CD
		                AND     TRIM(T2.BRAND_NO)    IS NOT NULL
		                AND     T2.SHORTAGE_DIV        = '11' /* 재고부족 */
		                GROUP
		                BY      SUBSTR(T1.CENTER_CD,5,8),
		                        T2.ITEM_CD
		                )            K1
		        GROUP
		        BY      K1.DC_ID,
		                K1.ITEM_ID
		        )    S2,
		        (
		        /* 수송계획 정보 */
		        SELECT    TGT_LOC    DC_ID,
		                SRC_LOC,
		                ITEM_ID,
		                BRAND_NO,
		                TRANS_STATE,
		                QTY,
		                CHGO_QTY,
		                CHGO_DTTM,
		                IPGO_QTY,
		                IPGO_DTTM,
		                F_GET_WMSCODE_NAME('LDIV11',SHORTAGE_DIV) SHORTAGE_DIV
		        FROM    IF_TRANS_PLAN
		        WHERE   TRANS_DATE =   (
		                                SELECT    MAX(CAL_DATE)
		                                FROM    CAL_MST
		                                WHERE    CAL_DATE        &lt; TO_DATE('$!{cnfm_date}')
		                                AND        HOLIDAY_FLAG    IS NULL
		                                )
				AND		ITEM_ID    = '$!{item_id}'
		        )    S3,
		        ITEM_MST    S4    
		WHERE   S1.DC_ID    = S2.DC_ID(+)
		AND     S1.DC_ID    = S3.DC_ID(+)
		AND     S1.ITEM_ID    = S2.ITEM_ID(+)
		AND     S1.ITEM_ID    = S3.ITEM_ID(+)    
		AND     S1.ITEM_ID    = S4.ITEM_ID
		AND     S1.ITEM_ID    = '$!{item_id}'
		AND     S1.DC_ID      = '$!{dc_id}'
		ORDER
		BY      S1.DC_ID,
		        S1.ITEM_ID,
		        S3.SRC_LOC,
		        S3.BRAND_NO
	</query> 	
	
	<!-- 유통본부 미납 추적 분석(농심)  DW4 'EDI정보' --> 
	<query id="ip_02120_Edi_NS_Analysis_DW4" paging="false"> 
		/* 유통본부 미납 추적 분석 DW4 'EDI정보' */
		SELECT  DECODE(ERR_GUBN, 09, '정상', '에러') "구분",
		        OD.CNFM_DATE    "납품일자",
		        CUST_CODE,
		        ODER_SLIP_NO    "주문전표번호(EDI)",
		        ODER_BOX							"(EDI)발주수량",
                F_GET_NFOS_QTY(PROD_CODE, SLIP_NO)	"주문전환수량",
                SUBSTR(ODER_DATE,1,4)||'-'||SUBSTR(ODER_DATE,5,2)||'-'||SUBSTR(ODER_DATE,7,2)   "주문일자",
                SUBSTR(IPUT_DATE,1,4)||'-'||SUBSTR(IPUT_DATE,5,2)||'-'||SUBSTR(IPUT_DATE,7,2)||'  '||
                SUBSTR(IPUT_TIME,1,2)||':'||SUBSTR(IPUT_TIME,3,2)||':'||SUBSTR(IPUT_TIME,5,2)   "입력시각",
                DECODE(F_GET_EMP_NAME(IPUT_EMP_NO), 'osal00', '시스템', F_GET_EMP_NAME(IPUT_EMP_NO))"입력자",
                --TO_CHAR(TO_DATE(CONV_DATE), 'YYYY-MM-DD')||'  '||
                SUBSTR(CONV_DATE,1,4)||'-'||SUBSTR(CONV_DATE,5,2)||'-'||SUBSTR(CONV_DATE,7,2)||'  '||
                SUBSTR(CONV_TIME,1,2)||':'||SUBSTR(CONV_TIME,3,2)||':'||SUBSTR(CONV_TIME,5,2)   "전환시각",
                DECODE(F_GET_EMP_NAME(CONV_EMP_NO), '9999999', '오더미전환', F_GET_EMP_NAME(CONV_EMP_NO)) "전환자",
                SLIP_NO "영업전표번호"
		FROM    SDORT120 OD
		WHERE   GRUP_CODE   = 	(
								CASE
									WHEN TO_DATE('$!{cnfm_date}') >=  TO_DATE(20110501)  --  2011 04 월 이전은 22 이후에는 32
									THEN '32' -- E마트
									ELSE '22' -- E마트
								END		       		
								)
		AND     CNFM_DATE   = TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
		AND     PROD_CODE   = '$!{item_id}'
		--AND     ERR_GUBN    = '09' -- 에러구분('09' 만 정상)
		AND     CUST_CODE   = '$!{cust_id}'
	</query> 	
	
	<!-- 유통본부 미납 추적 분석(농심) 사유구분  --> 
	<query id="ip_02120_Edi_Default_NS_combo" paging="false"> 
		/* MAIN 그리드 Default_code_combo */
        SELECT  CD, CD_NAME CD_NAME
        FROM    CODE_MST
        WHERE   CD_GRP = 'DEFAULT_CODE_NS'
        AND		CD NOT IN ('300')
	</query> 	
	
	<!--  품종 중분류(SALES_CAT3 수입상품전용)  -->  
	<query id="ip_01130_import_md_PlanAnalysis_list_combo" > 
		SELECT  CD,
				CD_NAME 
		FROM 	CODE_MST
		WHERE 	CD_GRP = 'SALES_CAT3'
		AND		CD IN (
						SELECT 	DISTINCT
		        				SALES_CAT03        
						FROM 	ITEM_MST
						WHERE 	ITYPE	= 'HAWA'
						AND 	USE_PR_PLAN ='Y'
						AND		SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
						AND 	SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD')					
						)
	</query>
	
	<!--  품종 중분류(SALES_CAT3 국내매입전용)  -->  
	<query id="ip_01150_import_md_PlanAnalysis_list_combo" > 
		SELECT  CD,
				CD_NAME 
		FROM 	CODE_MST
		WHERE 	CD_GRP = 'SALES_CAT3'
		AND		CD IN (
						SELECT 	DISTINCT
		        				SALES_CAT03        
						FROM 	ITEM_MST
						WHERE 	ITYPE	= 'HAWA'
						AND 	RC_FLAG ='Y'
						AND		SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
						AND 	SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD')					
						)
	</query>
	
	<!--  품종 중분류(SALES_CAT5 소분전용)  -->  
	<query id="ip_01170_import_md_PlanAnalysis_semi_list_combo" > 
		SELECT  CD,
				CD_NAME 
		FROM 	CODE_MST
		WHERE 	CD_GRP = 'SALES_CAT3'
		AND		CD IN (
						SELECT 	DISTINCT
		        				SALES_CAT03        
						FROM 	ITEM_MST
						WHERE 	ITYPE	= 'HAWA'
						AND		SEMI_FLAG='Y'
						--AND 	(RC_FLAG ='Y' OR USE_PR_PLAN='Y')
						AND		SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
						AND 	SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD')					
						)
	</query>
	
	
	<!-- 수입상품 재고관리 hearder  -->  
	<query id="ip_01130_import_md_PlanAnalysis_list_header" paging="false">
		
		SELECT	SUBSTR(DAY,6,8)||'월',
 				HD_NAME
        FROM	( 
	            SELECT	MONTH DAY,
	            		'MONTH_'||IDX	HD_NAME	
	            FROM 	(            
			            SELECT	MONTH,
			            		RANK() OVER (ORDER BY MONTH DESC ) IDX
	            		FROM	( 
					            SELECT 	DISTINCT TO_CHAR(TRUNC(CAL_DATE,'MM'),'YYYY/MM') MONTH         		            		
					            FROM 	CAL_MST
					            WHERE 	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-5),'MM') AND TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'MM') 
					            )
					    )  
	           	ORDER
	           	BY	 	DAY,HD_NAME
           		)       
        UNION ALL
		(
		SELECT	SUBSTR(DAY,6,8),
				'WEEK_'||IDX HD_NAME
		FROM	(
				SELECT	DAY,
						RANK() OVER (ORDER BY DAY)-1 IDX
				FROM	(
						SELECT 	DISTINCT TO_CHAR(TRUNC(CAL_DATE,'IW'),'YYYY/MM/DD') DAY
				        FROM 	CAL_MST
				        WHERE 	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') AND TRUNC(TO_DATE('$!{cnfm_date}')+182,'IW') 
				        )
       		 	)
       	)
	</query> 
	
	<!-- 수입상품 재고관리월 hearder  -->  
	<query id="ip_01180_import_md_PlanAnalysis_list_header" paging="false">
		
		SELECT	SUBSTR(DAY,6,8)||'월',
 				HD_NAME
        FROM	( 
	            SELECT	MONTH DAY,
	            		'MONTH_'||IDX	HD_NAME	
	            FROM 	(            
			            SELECT	MONTH,
			            		RANK() OVER (ORDER BY MONTH DESC ) IDX
	            		FROM	( 
					            SELECT 	DISTINCT TO_CHAR(TRUNC(CAL_DATE,'MM'),'YYYY/MM') MONTH         		            		
					            FROM 	CAL_MST
					            WHERE 	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-6),'MM') AND TRUNC(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),5),'MM') 
					            )
					    )  
	           	ORDER
	           	BY	 	DAY,HD_NAME
           		)       
  
	</query> 
	
	<!-- 수입상품 재고관리 팝업창  hearder  -->  
	<query id="ip_01130_import_md_PlanAnalysis_list_header_pop" paging="false">
		
			SELECT	TO_CHAR(CAL_DATE, 'MM/DD') DAY,
					'WEEK_'||(ROWNUM-1) HD_NAME					
			FROM	(
			        SELECT	CAL_DATE
			        FROM	CAL_MST
			        WHERE	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}')-210,'D') AND TRUNC(TO_DATE('$!{cnfm_date}')+217,'D')			        
			        AND		WEEK_DAY = '월'
			        ORDER
			        BY		CAL_DATE 
					)          	
	</query> 
	

	
	<!-- 수입상품 재고관리 팝업창  hearder  -->  
	<query id="ip_01130_import_md_PlanAnalysis_list_header_pop_dw2" paging="false">
		
			SELECT	TO_CHAR(CAL_DATE, 'MM/DD') DAY,
					'WEEK_'||(ROWNUM-1) HD_NAME
			FROM	(
			        SELECT	CAL_DATE
			        FROM	CAL_MST
			        WHERE	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}')-210,'D') AND TRUNC(TO_DATE('$!{cnfm_date}'),'D')			        
			        AND		WEEK_DAY = '월'
			        ORDER
			        BY		CAL_DATE 
					)          	
	</query> 
	
	<query id="ip_01130_import_md_PlanAnalysis_list_reason" paging="false">
		
			SELECT	REASON
			FROM	IMPORT_MD_EXPECT
			WHERE	VERSION = '$!{cnfm_date}'
			AND		ITEM_ID = '$!{item_id}' 
			AND		GUBN	='1'         	
	</query> 
	
	<query id="ip_01130_import_md_PlanAnalysis_list_pop_dw3" paging="false">	
 		-- 전년 동주
 		SELECT	'전년 60주',
 				ROUND(( W+W_1+W_2+W_3+W_4+W_5+W_6+W_7+W_8+W_9+W_10+W_11+W_12+W_13+W_14+W_15+W_16+W_17+W_18+W_19+W_20+W_21+W_22+W_23+W_24+W_25+W_26+W_27+W_28+W_29)/30,0)	CNT,
 				 W, W_1, W_2, W_3, W_4, W_5, W_6, W_7, W_8, W_9,
 				 W_10, W_11, W_12, W_13, W_14, W_15, W_16, W_17, W_18, W_19,
 				 W_20, W_21, W_22, W_23, W_24, W_25, W_26, W_27, W_28, W_29,
 				 W_30, W_31, W_32, W_33, W_34, W_35, W_36, W_37, W_38, W_39,
 				 W_40, W_41, W_42, W_43, W_44, W_45, W_46, W_47, W_48, W_49,
 				 W_50, W_51, W_52, W_53, W_54, W_55, W_56, W_57, W_58, W_59, W_60
 		FROM
 		(
 		SELECT	'전년 동주',
 				AG.CNT,
 				ROUND(AG.WEEK_P30 + NVL(BOM.BOM_P30,0),0)		W,
        		ROUND(AG.WEEK_P29 + NVL(BOM.BOM_P29,0),0)		W_1,
        		ROUND(AG.WEEK_P28 + NVL(BOM.BOM_P28,0),0)		W_2,
        		ROUND(AG.WEEK_P27 + NVL(BOM.BOM_P27,0),0)		W_3,
        		ROUND(AG.WEEK_P26 + NVL(BOM.BOM_P26,0),0)		W_4,
        		ROUND(AG.WEEK_P25 + NVL(BOM.BOM_P25,0),0)		W_5,
        		ROUND(AG.WEEK_P24 + NVL(BOM.BOM_P24,0),0)		W_6,
        		ROUND(AG.WEEK_P23 + NVL(BOM.BOM_P23,0),0)		W_7,
        		ROUND(AG.WEEK_P22 + NVL(BOM.BOM_P22,0),0)		W_8,
        		ROUND(AG.WEEK_P21 + NVL(BOM.BOM_P21,0),0)		W_9,
        		ROUND(AG.WEEK_P20 + NVL(BOM.BOM_P20,0),0)		W_10,
        		ROUND(AG.WEEK_P19 + NVL(BOM.BOM_P19,0),0)		W_11,
        		ROUND(AG.WEEK_P18 + NVL(BOM.BOM_P18,0),0)		W_12,
        		ROUND(AG.WEEK_P17 + NVL(BOM.BOM_P17,0),0)		W_13,
        		ROUND(AG.WEEK_P16 + NVL(BOM.BOM_P16,0),0)		W_14,
        		ROUND(AG.WEEK_P15 + NVL(BOM.BOM_P15,0),0)		W_15,
        		ROUND(AG.WEEK_P14 + NVL(BOM.BOM_P14,0),0)		W_16,
        		ROUND(AG.WEEK_P13 + NVL(BOM.BOM_P13,0),0)		W_17,
        		ROUND(AG.WEEK_P12 + NVL(BOM.BOM_P12,0),0)		W_18,
        		ROUND(AG.WEEK_P11 + NVL(BOM.BOM_P11,0),0)		W_19,
        		ROUND(AG.WEEK_P10 + NVL(BOM.BOM_P10,0),0)		W_20,
        		ROUND(AG.WEEK_P09 + NVL(BOM.BOM_P09,0),0)		W_21,
        		ROUND(AG.WEEK_P08 + NVL(BOM.BOM_P08,0),0)		W_22,
        		ROUND(AG.WEEK_P07 + NVL(BOM.BOM_P07,0),0)		W_23,
        		ROUND(AG.WEEK_P06 + NVL(BOM.BOM_P06,0),0)		W_24,
        		ROUND(AG.WEEK_P05 + NVL(BOM.BOM_P05,0),0)		W_25,
        		ROUND(AG.WEEK_P04 + NVL(BOM.BOM_P04,0),0)		W_26,
        		ROUND(AG.WEEK_P03 + NVL(BOM.BOM_P03,0),0)		W_27,
        		ROUND(AG.WEEK_P02 + NVL(BOM.BOM_P02,0),0)		W_28,
        		ROUND(AG.WEEK_P01 + NVL(BOM.BOM_P01,0),0)		W_29,
        		ROUND(AG.WEEK 	  + NVL(BOM.BOM,0),0)			W_30,
        		ROUND(AG.WEEK_M00 + NVL(BOM.BOM_M00,0),0)		W_31,
        		ROUND(AG.WEEK_M01 + NVL(BOM.BOM_M01,0),0)		W_32,
        		ROUND(AG.WEEK_M02 + NVL(BOM.BOM_M02,0),0)		W_33,
        		ROUND(AG.WEEK_M03 + NVL(BOM.BOM_M03,0),0)		W_34,
        		ROUND(AG.WEEK_M04 + NVL(BOM.BOM_M04,0),0)		W_35,
        		ROUND(AG.WEEK_M05 + NVL(BOM.BOM_M05,0),0)		W_36,
        		ROUND(AG.WEEK_M06 + NVL(BOM.BOM_M06,0),0)		W_37,
        		ROUND(AG.WEEK_M07 + NVL(BOM.BOM_M07,0),0)		W_38,
        		ROUND(AG.WEEK_M08 + NVL(BOM.BOM_M08,0),0)		W_39,
        		ROUND(AG.WEEK_M09 + NVL(BOM.BOM_M09,0),0)		W_40,
        		ROUND(AG.WEEK_M10 + NVL(BOM.BOM_M10,0),0)		W_41,
        		ROUND(AG.WEEK_M11 + NVL(BOM.BOM_M11,0),0)		W_42,
        		ROUND(AG.WEEK_M12 + NVL(BOM.BOM_M12,0),0)		W_43,
        		ROUND(AG.WEEK_M13 + NVL(BOM.BOM_M13,0),0)		W_44,
        		ROUND(AG.WEEK_M14 + NVL(BOM.BOM_M14,0),0)		W_45,
        		ROUND(AG.WEEK_M15 + NVL(BOM.BOM_M15,0),0)		W_46,
        		ROUND(AG.WEEK_M16 + NVL(BOM.BOM_M16,0),0)		W_47,
        		ROUND(AG.WEEK_M17 + NVL(BOM.BOM_M17,0),0)		W_48,
        		ROUND(AG.WEEK_M18 + NVL(BOM.BOM_M18,0),0)		W_49,
        		ROUND(AG.WEEK_M19 + NVL(BOM.BOM_M19,0),0)		W_50,        		
        		ROUND(AG.WEEK_M20 + NVL(BOM.BOM_M20,0),0)		W_51,
        		ROUND(AG.WEEK_M21 + NVL(BOM.BOM_M21,0),0)		W_52,
        		ROUND(AG.WEEK_M22 + NVL(BOM.BOM_M22,0),0)		W_53,
        		ROUND(AG.WEEK_M23 + NVL(BOM.BOM_M23,0),0)		W_54,
        		ROUND(AG.WEEK_M24 + NVL(BOM.BOM_M24,0),0)		W_55,
        		ROUND(AG.WEEK_M25 + NVL(BOM.BOM_M25,0),0)		W_56,
        		ROUND(AG.WEEK_M26 + NVL(BOM.BOM_M26,0),0)		W_57,
        		ROUND(AG.WEEK_M27 + NVL(BOM.BOM_M27,0),0)		W_58,
        		ROUND(AG.WEEK_M28 + NVL(BOM.BOM_M28,0),0)		W_59,
        		ROUND(AG.WEEK_M29 + NVL(BOM.BOM_M29,0),0)		W_60
        		--ROUND(AG.WEEK_M30 + NVL(BOM.BOM_M30,0),0)		W_61  
 		FROM	(
		        SELECT  ITEM_ID,
		        		CNT,  
		                WEEK_P30,
		                WEEK_P29,
		                WEEK_P28,
		                WEEK_P27,
		                WEEK_P26,
		                WEEK_P25,
		                WEEK_P24,
		                WEEK_P23,
		                WEEK_P22,
		                WEEK_P21,
		                WEEK_P20,
		                WEEK_P19,
		                WEEK_P18,
		                WEEK_P17,
		                WEEK_P16,
		                WEEK_P15,
		                WEEK_P14,
		                WEEK_P13,
		                WEEK_P12,
		                WEEK_P11,
		                WEEK_P10,
		                WEEK_P09,
		                WEEK_P08,
		                WEEK_P07,
		                WEEK_P06,
		                WEEK_P05,
		                WEEK_P04,
		                WEEK_P03,
		                WEEK_P02,
		                WEEK_P01,
		                WEEK,
		                WEEK_M00,
		                WEEK_M01,
		                WEEK_M02,
		                WEEK_M03,
		                WEEK_M04,
		                WEEK_M05,
		                WEEK_M06,
		                WEEK_M07,
		                WEEK_M08,
		                WEEK_M09,
		                WEEK_M10,
		                WEEK_M11,
		                WEEK_M12,
		                WEEK_M13,
		                WEEK_M14,
		                WEEK_M15,
		                WEEK_M16,
		                WEEK_M17,
		                WEEK_M18,
		                WEEK_M19,
		                WEEK_M20,
		                WEEK_M21,
		                WEEK_M22,
		                WEEK_M23,
		                WEEK_M24,
		                WEEK_M25,
		                WEEK_M26,
		                WEEK_M27,
		                WEEK_M28,
		                WEEK_M29,
		                WEEK_M30
		        FROM    SALES_WEEK_AGG
		        WHERE	GUBN = '2'
		        AND		VERSION = '$!{cnfm_date}'
		        AND		ITEM_ID = '$!{item_id}'
		        )AG,
		        (
				SELECT	T1.CONS_ITEM_ID				ITEM_ID,
						SUM(T2.WEEK_P30 *T1.QTY)	BOM_P30,
						SUM(T2.WEEK_P29 *T1.QTY)	BOM_P29,
						SUM(T2.WEEK_P28 *T1.QTY)	BOM_P28,
						SUM(T2.WEEK_P27 *T1.QTY)	BOM_P27,
						SUM(T2.WEEK_P26 *T1.QTY)	BOM_P26,
						SUM(T2.WEEK_P25 *T1.QTY)	BOM_P25,
						SUM(T2.WEEK_P24 *T1.QTY)	BOM_P24,
						SUM(T2.WEEK_P23 *T1.QTY)	BOM_P23,
						SUM(T2.WEEK_P22 *T1.QTY)	BOM_P22,
						SUM(T2.WEEK_P21 *T1.QTY)	BOM_P21,
						SUM(T2.WEEK_P20 *T1.QTY)	BOM_P20,
						SUM(T2.WEEK_P19 *T1.QTY)	BOM_P19,
						SUM(T2.WEEK_P18 *T1.QTY)	BOM_P18,
						SUM(T2.WEEK_P17 *T1.QTY)	BOM_P17,
						SUM(T2.WEEK_P16 *T1.QTY)	BOM_P16,
						SUM(T2.WEEK_P15 *T1.QTY)	BOM_P15,
						SUM(T2.WEEK_P14 *T1.QTY)	BOM_P14,
						SUM(T2.WEEK_P13 *T1.QTY)	BOM_P13,
						SUM(T2.WEEK_P12 *T1.QTY)	BOM_P12,
						SUM(T2.WEEK_P11 *T1.QTY)	BOM_P11,
						SUM(T2.WEEK_P10 *T1.QTY)	BOM_P10,
						SUM(T2.WEEK_P09 *T1.QTY)	BOM_P09,
						SUM(T2.WEEK_P08 *T1.QTY)	BOM_P08,
						SUM(T2.WEEK_P07 *T1.QTY)	BOM_P07,
						SUM(T2.WEEK_P06 *T1.QTY)	BOM_P06,
						SUM(T2.WEEK_P05 *T1.QTY)	BOM_P05,
						SUM(T2.WEEK_P04 *T1.QTY)	BOM_P04,
						SUM(T2.WEEK_P03 *T1.QTY)	BOM_P03,
						SUM(T2.WEEK_P02 *T1.QTY)	BOM_P02,
						SUM(T2.WEEK_P01 *T1.QTY)	BOM_P01,
						SUM(T2.WEEK    * T1.QTY)	BOM,				       
				        SUM(T2.WEEK_M00* T1.QTY)	BOM_M00,
				        SUM(T2.WEEK_M01* T1.QTY)	BOM_M01,
				        SUM(T2.WEEK_M02* T1.QTY)	BOM_M02,
				        SUM(T2.WEEK_M03* T1.QTY)	BOM_M03,
				        SUM(T2.WEEK_M04* T1.QTY)	BOM_M04,
				        SUM(T2.WEEK_M05* T1.QTY)	BOM_M05,
				        SUM(T2.WEEK_M06* T1.QTY)	BOM_M06,
				        SUM(T2.WEEK_M07* T1.QTY)	BOM_M07,
				        SUM(T2.WEEK_M08* T1.QTY)	BOM_M08,
				        SUM(T2.WEEK_M09* T1.QTY)	BOM_M09,
				        SUM(T2.WEEK_M10* T1.QTY)	BOM_M10,
				        SUM(T2.WEEK_M11* T1.QTY)	BOM_M11,
				        SUM(T2.WEEK_M12* T1.QTY)	BOM_M12,
				        SUM(T2.WEEK_M13* T1.QTY)	BOM_M13,
				        SUM(T2.WEEK_M14* T1.QTY)	BOM_M14,
				        SUM(T2.WEEK_M15* T1.QTY)	BOM_M15,
				        SUM(T2.WEEK_M16* T1.QTY)	BOM_M16,
				        SUM(T2.WEEK_M17* T1.QTY)	BOM_M17,
				        SUM(T2.WEEK_M18* T1.QTY)	BOM_M18,
				        SUM(T2.WEEK_M19* T1.QTY)	BOM_M19,
				        SUM(T2.WEEK_M20* T1.QTY)	BOM_M20,
				        SUM(T2.WEEK_M21* T1.QTY)	BOM_M21,
				        SUM(T2.WEEK_M22* T1.QTY)	BOM_M22,
				        SUM(T2.WEEK_M23* T1.QTY)	BOM_M23,
				        SUM(T2.WEEK_M24* T1.QTY)	BOM_M24,
				        SUM(T2.WEEK_M25* T1.QTY)	BOM_M25,
				        SUM(T2.WEEK_M26* T1.QTY)	BOM_M26,
				        SUM(T2.WEEK_M27* T1.QTY)	BOM_M27,
				        SUM(T2.WEEK_M28* T1.QTY)	BOM_M28,
				        SUM(T2.WEEK_M29* T1.QTY)	BOM_M29,
				        SUM(T2.WEEK_M30* T1.QTY)	BOM_M30
				FROM
					(
					SELECT  IM.ITEM_ID, 
							IM.ITEM_NAME,		
					        MB.CONS_ITEM_ID,
					       	MAX(MB.PROD_VER),    
					        MB.PROD_ITEM_ID,      
					        MB.CONS_QTY,
					        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
					        MB.CONS_QTY_UOM      
					FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
					WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
					AND		IM.ITEM_ID	= ITM.ITEM_CD
					AND		IM.ITYPE		= 'HAWA'	
					AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
					AND		IM.PR_FLAG = 'Y'
					GROUP 
					BY 		IM.ITEM_ID, 
							IM.ITEM_NAME,
					        MB.CONS_ITEM_ID,
					        MB.PROD_ITEM_ID,
					        MB.CONS_QTY,
					        MB.CONS_QTY_UOM, 
					        IM.QTY
					)T1,
					(
					SELECT	ITEM_ID,
							WEEK_P30,
			                WEEK_P29,
			                WEEK_P28,
			                WEEK_P27,
			                WEEK_P26,
			                WEEK_P25,
			                WEEK_P24,
			                WEEK_P23,
			                WEEK_P22,
			                WEEK_P21,
			                WEEK_P20,
			                WEEK_P19,
			                WEEK_P18,
			                WEEK_P17,
			                WEEK_P16,
			                WEEK_P15,
			                WEEK_P14,
			                WEEK_P13,
			                WEEK_P12,
			                WEEK_P11,
			                WEEK_P10,
			                WEEK_P09,
			                WEEK_P08,
			                WEEK_P07,
			                WEEK_P06,
			                WEEK_P05,
			                WEEK_P04,
			                WEEK_P03,
			                WEEK_P02,
			                WEEK_P01,
			                WEEK,
			                WEEK_M00,
			                WEEK_M01,
			                WEEK_M02,
			                WEEK_M03,
			                WEEK_M04,
			                WEEK_M05,
			                WEEK_M06,
			                WEEK_M07,
			                WEEK_M08,
			                WEEK_M09,
			                WEEK_M10,
			                WEEK_M11,
			                WEEK_M12,
			                WEEK_M13,
			                WEEK_M14,
			                WEEK_M15,
			                WEEK_M16,
			                WEEK_M17,
			                WEEK_M18,
			                WEEK_M19,
			                WEEK_M20,
			                WEEK_M21,
			                WEEK_M22,
			                WEEK_M23,
			                WEEK_M24,
			                WEEK_M25,
			                WEEK_M26,
			                WEEK_M27,
			                WEEK_M28,
			                WEEK_M29,
			                WEEK_M30
					FROM	SALES_WEEK_AGG
					WHERE	VERSION =  '$!{cnfm_date}'
					AND		GUBN 	= '2'
					)T2
					WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
					GROUP	
					BY		T1.CONS_ITEM_ID	
				)BOM
		WHERE	AG.ITEM_ID = BOM.ITEM_ID (+)
		AND		AG.ITEM_ID = '$!{item_id}'
		)
	</query>
	
	<query id="ip_01130_import_md_PlanAnalysis_list_pop_dw2" paging="false">
        -- 과거 30주 실적 
        
        SELECT	'과거 30주',
        		ROUND(( W+W_1+W_2+W_3+W_4+W_5+W_6+W_7+W_8+W_9+W_10+W_11+W_12+W_13+W_14+W_15+W_16+W_17+W_18+W_19+W_20+W_21+W_22+W_23+W_24+W_25+W_26+W_27+W_28+W_29)/CNT,0)	CNT,
 				 W, W_1, W_2, W_3, W_4, W_5, W_6, W_7, W_8, W_9,
 				 W_10, W_11, W_12, W_13, W_14, W_15, W_16, W_17, W_18, W_19,
 				 W_20, W_21, W_22, W_23, W_24, W_25, W_26, W_27, W_28, W_29 				
 		FROM
 		(
        SELECT	'과거 30주',
 				AG.CNT,
 				ROUND(AG.WEEK_P30 + NVL(BOM.BOM_P30,0),0)		W,
        		ROUND(AG.WEEK_P29 + NVL(BOM.BOM_P29,0),0)		W_1,
        		ROUND(AG.WEEK_P28 + NVL(BOM.BOM_P28,0),0)		W_2,
        		ROUND(AG.WEEK_P27 + NVL(BOM.BOM_P27,0),0)		W_3,
        		ROUND(AG.WEEK_P26 + NVL(BOM.BOM_P26,0),0)		W_4,
        		ROUND(AG.WEEK_P25 + NVL(BOM.BOM_P25,0),0)		W_5,
        		ROUND(AG.WEEK_P24 + NVL(BOM.BOM_P24,0),0)		W_6,
        		ROUND(AG.WEEK_P23 + NVL(BOM.BOM_P23,0),0)		W_7,
        		ROUND(AG.WEEK_P22 + NVL(BOM.BOM_P22,0),0)		W_8,
        		ROUND(AG.WEEK_P21 + NVL(BOM.BOM_P21,0),0)		W_9,
        		ROUND(AG.WEEK_P20 + NVL(BOM.BOM_P20,0),0)		W_10,
        		ROUND(AG.WEEK_P19 + NVL(BOM.BOM_P19,0),0)		W_11,
        		ROUND(AG.WEEK_P18 + NVL(BOM.BOM_P18,0),0)		W_12,
        		ROUND(AG.WEEK_P17 + NVL(BOM.BOM_P17,0),0)		W_13,
        		ROUND(AG.WEEK_P16 + NVL(BOM.BOM_P16,0),0)		W_14,
        		ROUND(AG.WEEK_P15 + NVL(BOM.BOM_P15,0),0)		W_15,
        		ROUND(AG.WEEK_P14 + NVL(BOM.BOM_P14,0),0)		W_16,
        		ROUND(AG.WEEK_P13 + NVL(BOM.BOM_P13,0),0)		W_17,
        		ROUND(AG.WEEK_P12 + NVL(BOM.BOM_P12,0),0)		W_18,
        		ROUND(AG.WEEK_P11 + NVL(BOM.BOM_P11,0),0)		W_19,
        		ROUND(AG.WEEK_P10 + NVL(BOM.BOM_P10,0),0)		W_20,
        		ROUND(AG.WEEK_P09 + NVL(BOM.BOM_P09,0),0)		W_21,
        		ROUND(AG.WEEK_P08 + NVL(BOM.BOM_P08,0),0)		W_22,
        		ROUND(AG.WEEK_P07 + NVL(BOM.BOM_P07,0),0)		W_23,
        		ROUND(AG.WEEK_P06 + NVL(BOM.BOM_P06,0),0)		W_24,
        		ROUND(AG.WEEK_P05 + NVL(BOM.BOM_P05,0),0)		W_25,
        		ROUND(AG.WEEK_P04 + NVL(BOM.BOM_P04,0),0)		W_26,
        		ROUND(AG.WEEK_P03 + NVL(BOM.BOM_P03,0),0)		W_27,
        		ROUND(AG.WEEK_P02 + NVL(BOM.BOM_P02,0),0)		W_28,
        		ROUND(AG.WEEK_P01 + NVL(BOM.BOM_P01,0),0)		W_29        	
 		FROM	(
		        SELECT  ITEM_ID,
		        		CNT,  
		                WEEK_P30,
		                WEEK_P29,
		                WEEK_P28,
		                WEEK_P27,
		                WEEK_P26,
		                WEEK_P25,
		                WEEK_P24,
		                WEEK_P23,
		                WEEK_P22,
		                WEEK_P21,
		                WEEK_P20,
		                WEEK_P19,
		                WEEK_P18,
		                WEEK_P17,
		                WEEK_P16,
		                WEEK_P15,
		                WEEK_P14,
		                WEEK_P13,
		                WEEK_P12,
		                WEEK_P11,
		                WEEK_P10,
		                WEEK_P09,
		                WEEK_P08,
		                WEEK_P07,
		                WEEK_P06,
		                WEEK_P05,
		                WEEK_P04,
		                WEEK_P03,
		                WEEK_P02,
		                WEEK_P01		                
		        FROM    SALES_WEEK_AGG
		        WHERE	GUBN = '1'
		        AND		VERSION = '$!{cnfm_date}'
		        AND		ITEM_ID = '$!{item_id}'
		        )AG,
		        (
				SELECT	T1.CONS_ITEM_ID				ITEM_ID,
						SUM(T2.WEEK_P30 *T1.QTY)	BOM_P30,
						SUM(T2.WEEK_P29 *T1.QTY)	BOM_P29,
						SUM(T2.WEEK_P28 *T1.QTY)	BOM_P28,
						SUM(T2.WEEK_P27 *T1.QTY)	BOM_P27,
						SUM(T2.WEEK_P26 *T1.QTY)	BOM_P26,
						SUM(T2.WEEK_P25 *T1.QTY)	BOM_P25,
						SUM(T2.WEEK_P24 *T1.QTY)	BOM_P24,
						SUM(T2.WEEK_P23 *T1.QTY)	BOM_P23,
						SUM(T2.WEEK_P22 *T1.QTY)	BOM_P22,
						SUM(T2.WEEK_P21 *T1.QTY)	BOM_P21,
						SUM(T2.WEEK_P20 *T1.QTY)	BOM_P20,
						SUM(T2.WEEK_P19 *T1.QTY)	BOM_P19,
						SUM(T2.WEEK_P18 *T1.QTY)	BOM_P18,
						SUM(T2.WEEK_P17 *T1.QTY)	BOM_P17,
						SUM(T2.WEEK_P16 *T1.QTY)	BOM_P16,
						SUM(T2.WEEK_P15 *T1.QTY)	BOM_P15,
						SUM(T2.WEEK_P14 *T1.QTY)	BOM_P14,
						SUM(T2.WEEK_P13 *T1.QTY)	BOM_P13,
						SUM(T2.WEEK_P12 *T1.QTY)	BOM_P12,
						SUM(T2.WEEK_P11 *T1.QTY)	BOM_P11,
						SUM(T2.WEEK_P10 *T1.QTY)	BOM_P10,
						SUM(T2.WEEK_P09 *T1.QTY)	BOM_P09,
						SUM(T2.WEEK_P08 *T1.QTY)	BOM_P08,
						SUM(T2.WEEK_P07 *T1.QTY)	BOM_P07,
						SUM(T2.WEEK_P06 *T1.QTY)	BOM_P06,
						SUM(T2.WEEK_P05 *T1.QTY)	BOM_P05,
						SUM(T2.WEEK_P04 *T1.QTY)	BOM_P04,
						SUM(T2.WEEK_P03 *T1.QTY)	BOM_P03,
						SUM(T2.WEEK_P02 *T1.QTY)	BOM_P02,
						SUM(T2.WEEK_P01 *T1.QTY)	BOM_P01						
				FROM
					(
					SELECT  IM.ITEM_ID, 
							IM.ITEM_NAME,		
					        MB.CONS_ITEM_ID,
					       	MAX(MB.PROD_VER),    
					        MB.PROD_ITEM_ID,      
					        MB.CONS_QTY,
					        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
					        MB.CONS_QTY_UOM      
					FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
					WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
					AND		IM.ITEM_ID	= ITM.ITEM_CD
					AND		IM.ITYPE		= 'HAWA'	
					AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
					AND		IM.USE_PR_PLAN = 'Y'
					GROUP 
					BY 		IM.ITEM_ID, 
							IM.ITEM_NAME,
					        MB.CONS_ITEM_ID,
					        MB.PROD_ITEM_ID,
					        MB.CONS_QTY,
					        MB.CONS_QTY_UOM, 
					        IM.QTY
					)T1,
					(
					SELECT	ITEM_ID,
							WEEK_P30,
			                WEEK_P29,
			                WEEK_P28,
			                WEEK_P27,
			                WEEK_P26,
			                WEEK_P25,
			                WEEK_P24,
			                WEEK_P23,
			                WEEK_P22,
			                WEEK_P21,
			                WEEK_P20,
			                WEEK_P19,
			                WEEK_P18,
			                WEEK_P17,
			                WEEK_P16,
			                WEEK_P15,
			                WEEK_P14,
			                WEEK_P13,
			                WEEK_P12,
			                WEEK_P11,
			                WEEK_P10,
			                WEEK_P09,
			                WEEK_P08,
			                WEEK_P07,
			                WEEK_P06,
			                WEEK_P05,
			                WEEK_P04,
			                WEEK_P03,
			                WEEK_P02,
			                WEEK_P01			               
					FROM	SALES_WEEK_AGG
					WHERE	VERSION = '$!{cnfm_date}'
					AND		GUBN 	= '1'
					)T2
					WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
					GROUP	
					BY		T1.CONS_ITEM_ID	
				)BOM
		WHERE	AG.ITEM_ID = BOM.ITEM_ID (+)
		AND		AG.ITEM_ID = '$!{item_id}'
		)
	</query>
	
	<!-- 과거30주 배정품목 컬러링 -->
	<query id="ip_01130_import_md_PlanAnalysis_list_pop_coloring" paging="false">
		
        SELECT	NVL(MAX(T1.WEEK_P30),T2.WEEK_P30)	W30, 
                NVL(MAX(T1.WEEK_P29),T2.WEEK_P29)	W29,
                NVL(MAX(T1.WEEK_P28),T2.WEEK_P28)	W28,
                NVL(MAX(T1.WEEK_P27),T2.WEEK_P27)	W27,
                NVL(MAX(T1.WEEK_P26),T2.WEEK_P26)	W26,
                NVL(MAX(T1.WEEK_P25),T2.WEEK_P25)	W25,
                NVL(MAX(T1.WEEK_P24),T2.WEEK_P24)	W24,
                NVL(MAX(T1.WEEK_P23),T2.WEEK_P23)	W23,
                NVL(MAX(T1.WEEK_P22),T2.WEEK_P22)	W22,
                NVL(MAX(T1.WEEK_P21),T2.WEEK_P21)	W21,
                NVL(MAX(T1.WEEK_P20),T2.WEEK_P20)	W20, 
                NVL(MAX(T1.WEEK_P19),T2.WEEK_P19)	W19,
                NVL(MAX(T1.WEEK_P18),T2.WEEK_P18)	W18,
                NVL(MAX(T1.WEEK_P17),T2.WEEK_P17)	W17,
                NVL(MAX(T1.WEEK_P16),T2.WEEK_P16)	W16,
                NVL(MAX(T1.WEEK_P15),T2.WEEK_P15)	W15,
                NVL(MAX(T1.WEEK_P14),T2.WEEK_P14)	W14,
                NVL(MAX(T1.WEEK_P13),T2.WEEK_P13)	W13,
                NVL(MAX(T1.WEEK_P12),T2.WEEK_P12)	W12,
                NVL(MAX(T1.WEEK_P11),T2.WEEK_P11)	W11, 
                NVL(MAX(T1.WEEK_P10),T2.WEEK_P10)	W10, 
                NVL(MAX(T1.WEEK_P09),T2.WEEK_P09)	W09,
                NVL(MAX(T1.WEEK_P08),T2.WEEK_P08)	W08,
                NVL(MAX(T1.WEEK_P07),T2.WEEK_P07)	W07,
                NVL(MAX(T1.WEEK_P06),T2.WEEK_P06)	W06,
                NVL(MAX(T1.WEEK_P05),T2.WEEK_P05)	W05,
                NVL(MAX(T1.WEEK_P04),T2.WEEK_P04)	W04,
                NVL(MAX(T1.WEEK_P03),T2.WEEK_P03)	W03,
                NVL(MAX(T1.WEEK_P02),T2.WEEK_P02)	W02,
                NVL(MAX(T1.WEEK_P01),T2.WEEK_P01)	W01
        FROM	(  
              	SELECT	PROD_CODE ITEM_ID,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW')   ,'YYYYMMDD'),'Y','N') WEEK, 
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-7,'IW') ,'YYYYMMDD'),'Y','N') WEEK_P01,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-14,'IW'),'YYYYMMDD'),'Y','N') WEEK_P02,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-21,'IW'),'YYYYMMDD'),'Y','N') WEEK_P03,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-28,'IW'),'YYYYMMDD'),'Y','N') WEEK_P04,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-35,'IW'),'YYYYMMDD'),'Y','N') WEEK_P05,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-42,'IW'),'YYYYMMDD'),'Y','N') WEEK_P06,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-49,'IW'),'YYYYMMDD'),'Y','N') WEEK_P07,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-56,'IW'),'YYYYMMDD'),'Y','N') WEEK_P08,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-63,'IW'),'YYYYMMDD'),'Y','N') WEEK_P09,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-70,'IW'),'YYYYMMDD'),'Y','N') WEEK_P10,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-77,'IW'),'YYYYMMDD'),'Y','N') WEEK_P11,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-84,'IW'),'YYYYMMDD'),'Y','N') WEEK_P12,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-91,'IW'),'YYYYMMDD'),'Y','N') WEEK_P13,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-98,'IW'),'YYYYMMDD'),'Y','N') WEEK_P14,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-105,'IW'),'YYYYMMDD'),'Y','N') WEEK_P15,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-112,'IW'),'YYYYMMDD'),'Y','N') WEEK_P16,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-119,'IW'),'YYYYMMDD'),'Y','N') WEEK_P17,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-126,'IW'),'YYYYMMDD'),'Y','N') WEEK_P18,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-133,'IW'),'YYYYMMDD'),'Y','N') WEEK_P19,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-140,'IW'),'YYYYMMDD'),'Y','N') WEEK_P20,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-147,'IW'),'YYYYMMDD'),'Y','N') WEEK_P21,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-154,'IW'),'YYYYMMDD'),'Y','N') WEEK_P22,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-161,'IW'),'YYYYMMDD'),'Y','N') WEEK_P23,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-168,'IW'),'YYYYMMDD'),'Y','N') WEEK_P24,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-175,'IW'),'YYYYMMDD'),'Y','N') WEEK_P25,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-182,'IW'),'YYYYMMDD'),'Y','N') WEEK_P26,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-189,'IW'),'YYYYMMDD'),'Y','N') WEEK_P27,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-196,'IW'),'YYYYMMDD'),'Y','N') WEEK_P28,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-203,'IW'),'YYYYMMDD'),'Y','N') WEEK_P29,
                        DECODE(CNFM_DATE,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-210,'IW'),'YYYYMMDD'),'Y','N') WEEK_P30                      
              	FROM	(    
                        SELECT  DISTINCT TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'IW'),'YYYYMMDD') CNFM_DATE,
                                PROD_CODE 
                        FROM 	SDORT203
                        WHERE 	CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-210,'IW'),'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')-7,'IW'),'YYYYMMDD')
                        AND 	ALLOC_ZONE	='01'           
                        AND 	PROD_CODE	='$!{item_id}'
                    	)
                )T1,
                (
                SELECT	'$!{item_id}'	ITEM_ID,
		                'A' WEEK,
		                'A' WEEK_P01,
		                'A' WEEK_P02,
		                'A' WEEK_P03,
		                'A' WEEK_P04,
		                'A' WEEK_P05,
		                'A' WEEK_P06,
		                'A' WEEK_P07,
		                'A' WEEK_P08,
		                'A' WEEK_P09,
		                'A' WEEK_P10,
		                'A' WEEK_P11,
		                'A' WEEK_P12,
		                'A' WEEK_P13,
		                'A' WEEK_P14,
		                'A' WEEK_P15,
		                'A' WEEK_P16,
		                'A' WEEK_P17,
		                'A' WEEK_P18,
		                'A' WEEK_P19,
		                'A' WEEK_P20,
		                'A' WEEK_P21,
		                'A' WEEK_P22,
		                'A' WEEK_P23,
		                'A' WEEK_P24,
		                'A' WEEK_P25,
		                'A' WEEK_P26,
		                'A' WEEK_P27,
		                'A' WEEK_P28,
		                'A' WEEK_P29,
		                'A' WEEK_P30
                FROM 	DUAL
                )T2
        WHERE	T1.ITEM_ID(+) = T2.ITEM_ID          	
        GROUP
        BY		T1.ITEM_ID
	</query>
	
	<!-- 수입상품 발주관리 메인 -->
	<query id="ip_01130_import_md_PlanAnalysis_list" paging="false">
		SELECT  T1.SALES_CAT05,
				T1.SALES_CAT03,
				T1.ITEM_ID,
        		T1.ITEM_NAME,
        		--T1.AVL_STOCK,
        		--T1.NS_STOCK,
        		--T1.EXP_STOCK,
        		T1.GUBN,
        		T1.GUBN_IDX,
        		T1.NO_FLAG,
        		NVL(T1.THREE_MON,0),
        		NVL(T1.MONTH_5,0),
        		NVL(T1.MONTH_4,0),
        		NVL(T1.MONTH_3,0),
        		NVL(T1.MONTH_2,0),
        		NVL(T1.MONTH_1,0),
        		--NVL(T1.AVL_STOCK,0),
        		NVL(T1.W,0),
        		NVL(T1.W_1,0),
        		NVL(T1.W_2,0),
        		NVL(T1.W_3,0),
        		NVL(T1.W_4,0),
        		NVL(T1.W_5,0),
        		NVL(T1.W_6,0),
        		NVL(T1.W_7,0),
        		NVL(T1.W_8,0),
        		NVL(T1.W_9,0),
        		NVL(T1.W_10,0),
        		NVL(T1.W_11,0),
        		NVL(T1.W_12,0),
        		NVL(T1.W_13,0),
        		NVL(T1.W_14,0),
        		NVL(T1.W_15,0),
        		NVL(T1.W_16,0),
        		NVL(T1.W_17,0),
        		NVL(T1.W_18,0),
        		NVL(T1.W_19,0),
        		NVL(T1.W_20,0),
        		NVL(T1.W_21,0),
        		NVL(T1.W_22,0),
        		NVL(T1.W_23,0),
        		NVL(T1.W_24,0),
        		NVL(T1.W_25,0),
        		NVL(T1.W_26,0),
        		T2.TP_FLAG
        FROM
		(
		SELECT 	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05) SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03) SALES_CAT03,
				IM.ITEM_ID,
        		IM.ITEM_NAME,
        		TO_CHAR(ROUND(NVL(DC.NS_STOCK,0)  + NVL(DC.EXP_STOCK,0) + NVL(BOM.NS_BOM_STOCK,0) + NVL(BOM.EXP_BOM_STOCK,0),0))	AVL_STOCK,
        		TO_CHAR(ROUND(NVL(DC.NS_STOCK,0)  + NVL(BOM.NS_BOM_STOCK,0),0))		NS_STOCK,
        		TO_CHAR(ROUND(NVL(DC.EXP_STOCK,0) + NVL(BOM.EXP_BOM_STOCK,0),0))		EXP_STOCK,
        		'기초재고'	GUBN,
        		'1'			GUBN_IDX,
        		''			NO_FLAG,
        		0			THREE_MON,
        		DC2.P_05 + NVL(BOM2.P_05,0)		MONTH_5,
        		DC2.P_04 + NVL(BOM2.P_04,0)		MONTH_4,
        		DC2.P_03 + NVL(BOM2.P_03,0)		MONTH_3,
        		DC2.P_02 + NVL(BOM2.P_02,0)		MONTH_2,
        		DC2.P_01 + NVL(BOM2.P_01,0)		MONTH_1,
        		ROUND(NVL(DC.NS_STOCK,0)  + NVL(DC.EXP_STOCK,0) + NVL(BOM.NS_BOM_STOCK,0) + NVL(BOM.EXP_BOM_STOCK,0),0)		W,
        		0			W_1,
        		0			W_2,
        		0			W_3,
        		0			W_4,
        		0			W_5,
        		0			W_6,
        		0			W_7,
        		0			W_8,
        		0			W_9,
        		0			W_10,
        		0			W_11,
        		0			W_12,
        		0			W_13,
        		0			W_14,
        		0			W_15,
        		0			W_16,
        		0			W_17,
        		0			W_18,
        		0			W_19,
        		0			W_20,
        		0			W_21,
        		0			W_22,
        		0			W_23,
        		0			W_24,
        		0			W_25,
        		0			W_26        		        		
		FROM	ITEM_MST IM,
				(
        		SELECT	DC.ITEM_ID,        		
        				SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) NS_STOCK,
                		SUM(DECODE(DM.DC_LOC_TYPE,'사내',0,DC.BASE_STOCK)) EXP_STOCK
  				FROM	DC_DATAWAREHOUSE DC,
        				DC_MST DM,
                        ITEM_MST IM
        		WHERE	DC.DC_ID		= 	DM.DC_ID
                AND		DC.ITEM_ID		=	IM.ITEM_ID
                AND		IM.PR_FLAG	=	'Y'
        		AND		DC.CNFM_DATE 	= 	'$!{cnfm_date}'      
        		GROUP
        		BY		DC.ITEM_ID
        		--HAVING	SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) &gt; 0
        		)DC,
        		(
                SELECT	ITEM_ID,
            			MAX(W)		W,
						MAX(M_01)	P_01, 
        				MAX(M_02)	P_02,
        				MAX(M_03)	P_03,
        				MAX(M_04)	P_04,
        				MAX(M_05)	P_05
                FROM	(
                		SELECT	ITEM_ID,
        						DECODE(YYYYMMDD,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW'),'YYYYMMDD'),			   BASE_STOCK,0) W,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_01,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_02,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_03,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_04,
                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_05
                        FROM	(     
                        		SELECT	DC.CNFM_DATE	YYYYMMDD,
                						DC.ITEM_ID,
                						SUM(DC.BASE_STOCK) BASE_STOCK
                				FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM
                				WHERE 	DC.ITEM_ID = IM.ITEM_ID
                				AND	DC.CNFM_DATE IN(
                					 				TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW'),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD')
                                     				)                                     
                				AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
								AND		IM.PR_FLAG	=	'Y'
								AND		IM.ITYPE		=	'HAWA'	
                				GROUP
                				BY		DC.CNFM_DATE,DC.ITEM_ID
                				--HAVING	SUM(DC.BASE_STOCK) > 0
                				)
               				)
                GROUP BY ITEM_ID
                )DC2,
                /* 가용, 사내, 사외 재고 전용 BOM */
                (
                SELECT	ITEM_ID,
                		CONS_ITEM_ID,
                        MAX(PROD_ITEM_ID),
                        ROUND(SUM(QTY * NS_STOCK),0) 			NS_BOM_STOCK,
                        ROUND(SUM(QTY * EXP_STOCK),0) 			EXP_BOM_STOCK
                FROM	(
                        SELECT  IM.ITEM_ID,                                         									
                                MB.CONS_ITEM_ID,
                                MAX(MB.PROD_VER),    
                                MB.PROD_ITEM_ID, 
                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) 	QTY,                                
                                DC.NS_STOCK,
                                DC.EXP_STOCK
                        FROM	ITEM_MST IM, MBOM MB,
                                (
                                SELECT	DC.ITEM_ID,
                                        SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) NS_STOCK,
                                        SUM(DECODE(DM.DC_LOC_TYPE,'사내',0,DC.BASE_STOCK)) EXP_STOCK
                                FROM	DC_DATAWAREHOUSE DC, DC_MST DM, ITEM_MST IM
                                WHERE	DC.CNFM_DATE 	= '$!{cnfm_date}'                                      
                                AND		DC.DC_ID 		= DM.DC_ID
                                AND		DC.ITEM_ID		= IM.ITEM_ID
                                AND		IM.ITEM_ID	IN  (
                						SELECT	DISTINCT MB.PROD_ITEM_ID
                                        FROM	MBOM MB, ITEM_MST IM
                                        WHERE	IM.ITEM_ID		=	MB.CONS_ITEM_ID
                                        AND		IM.PR_FLAG	= 'Y'
                                        AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                						) 
                                GROUP
                                BY		DC.ITEM_ID
                                )DC           	
                        WHERE	IM.ITEM_ID 			= MB.CONS_ITEM_ID 
                        AND		MB.PROD_ITEM_ID  	= DC.ITEM_ID                                
                        GROUP 
                        BY 		IM.ITEM_ID,                                        						
                                MB.CONS_ITEM_ID,
                                MB.PROD_ITEM_ID,
                                MB.CONS_QTY,                                        
                                MB.PROD_QTY,
                                MB.CONS_QTY_UOM,
                                IM.QTY,                                       
                                DC.NS_STOCK,
                                DC.EXP_STOCK    
                         )
                GROUP
                BY		ITEM_ID, 
                		CONS_ITEM_ID       
                )BOM,
                /* M-5,4,3,2,1,W 전용 BOM */
               (                
                SELECT	ITEM_ID,
                		SUM(W)		W,
                        SUM(P_01)	P_01,
                        SUM(P_02)	P_02,
                        SUM(P_03)	P_03,
                        SUM(P_04)	P_04,
                        SUM(P_05)	P_05
                FROM	(
		                SELECT	ITEM_ID,
		                		PROD_ITEM_ID,
		            			ROUND(MAX(W),0)		W,
								ROUND(MAX(M_01),0)	P_01, 
		        				ROUND(MAX(M_02),0)	P_02,
		        				ROUND(MAX(M_03),0)	P_03,
		        				ROUND(MAX(M_04),0)	P_04,
		        				ROUND(MAX(M_05),0)	P_05
		                FROM	(
		                		SELECT	ITEM_ID,
		                        		PROD_ITEM_ID,
		        						DECODE(YYYYMMDD,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW'),'YYYYMMDD'),			   BASE_STOCK,0) W,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_01,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_02,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_03,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_04,
		                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_05
		                        FROM	(     
		                        		SELECT	DC.CNFM_DATE	YYYYMMDD,                						
		                                        BOM.CONS_ITEM_ID	ITEM_ID, 
		                                        BOM.PROD_ITEM_ID,
		                						SUM(DC.BASE_STOCK) * BOM.QTY  BASE_STOCK
		                				FROM	DC_DATAWAREHOUSE DC,
		                                		(
		                                        SELECT	MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                                                MAX(MB.PROD_VER) PROD_VER
		                                        FROM	MBOM MB, ITEM_MST IM
		                                        WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID
		                                        AND		IM.PR_FLAG ='Y'
		                                        AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		                                        AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
												AND		IM.PR_FLAG	=	'Y'
												AND		IM.ITYPE		=	'HAWA'
		                                        GROUP
		                                        BY		MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                MB.CONS_QTY,
		                                                MB.CONS_QTY_UOM,
		                                                IM.QTY
		                                        )BOM
		                				WHERE 	DC.ITEM_ID = BOM.PROD_ITEM_ID
		                				AND		DC.CNFM_DATE IN(
		                					 				TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'IW'),'YYYYMMDD'),
		                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
		                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD')
		                                     				)                                     
		                				GROUP
		                				BY		DC.CNFM_DATE,
		                                		DC.ITEM_ID,
		                                        BOM.QTY,
		                                        BOM.CONS_ITEM_ID,
		                                        BOM.PROD_ITEM_ID                                                   				
		                				)
		               			)
		                GROUP 
		                BY 		ITEM_ID,
		                 		PROD_ITEM_ID
		                )
		        GROUP 
		        BY 		ITEM_ID        
               	)BOM2            
		WHERE 	DC.ITEM_ID		= 	IM.ITEM_ID
		AND		DC.ITEM_ID		=	DC2.ITEM_ID
		AND		DC.ITEM_ID		= 	BOM.ITEM_ID(+)
		AND		DC.ITEM_ID		=	BOM2.ITEM_ID(+)
		AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
		AND		IM.PR_FLAG	=	'Y'
		AND		IM.ITYPE		=	'HAWA'	
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'		
		UNION ALL
		SELECT 	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05) SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03) SALES_CAT03,
				IM.ITEM_ID,
        		IM.ITEM_NAME,
        		''	AVL_STOCK,
        		''	NS_STOCK,
        		''	EXP_STOCK,
        		'입고량'		GUBN,
        		'2'			GUBN_IDX,
        		''			NO_FLAG,
        		0			THREE_MON,
        		PR.MON_P05			MONTH_5,
        		PR.MON_P04			MONTH_4,
        		PR.MON_P03			MONTH_3,
        		PR.MON_P02			MONTH_2,
        		PR.MON_P01			MONTH_1,
        		IW.W			W,
        		IW.W1			W_1,
        		IW.W2			W_2,
        		IW.W3			W_3,
        		IW.W4			W_4,
        		IW.W5			W_5,
        		IW.W6			W_6,
        		IW.W7			W_7,
        		IW.W8			W_8,
        		IW.W9			W_9,
        		IW.W10			W_10,
        		IW.W11			W_11,
        		IW.W12			W_12,
        		IW.W13			W_13,
        		IW.W14			W_14,
        		IW.W15			W_15,
        		IW.W16			W_16,
        		IW.W17			W_17,
        		IW.W18			W_18,
        		IW.W19			W_19,
        		IW.W20			W_20,
        		IW.W21			W_21,
        		IW.W22			W_22,
        		IW.W23			W_23,
        		IW.W24			W_24,
        		IW.W25			W_25,
        		IW.W26			W_26   
		FROM	ITEM_MST IM,
				(
        		SELECT	DC.ITEM_ID,        		
        				SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) NS_STOCK,
                		SUM(DECODE(DM.DC_LOC_TYPE,'사내',0,DC.BASE_STOCK)) EXP_STOCK
  				FROM	DC_DATAWAREHOUSE DC,
        				DC_MST DM,
        				ITEM_MST IM
        		WHERE	DC.DC_ID		= 	DM.DC_ID
        		AND		DC.ITEM_ID		=	IM.ITEM_ID
        		AND		IM.PR_FLAG	=	'Y'
        		AND		DC.CNFM_DATE 	= 	'$!{cnfm_date}'      
        		GROUP
        		BY		DC.ITEM_ID
        		--HAVING	SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) &gt; 0
        		)DC,
        		(
        		SELECT	ITEM_ID,
            			SUM(W)		W,
                    	SUM(W1)		W1,
                    	SUM(W2)		W2,
                    	SUM(W3)		W3,
                    	SUM(W4)		W4,
                    	SUM(W5)		W5,
                    	SUM(W6)		W6,
                    	SUM(W7)		W7,
                    	SUM(W8)		W8,
                    	SUM(W9)		W9,
                    	SUM(W10)	W10,
                    	SUM(W11)	W11,
                    	SUM(W12)	W12,
                    	SUM(W13)	W13,
                    	SUM(W14)	W14,
                    	SUM(W15)	W15,
                    	SUM(W16)	W16,
                    	SUM(W17)	W17,
                    	SUM(W18)	W18,
                    	SUM(W19)	W19,
                    	SUM(W20)	W20,
                    	SUM(W21)	W21,
                    	SUM(W22)	W22,
                    	SUM(W23)	W23,
                    	SUM(W24)	W24,
                    	SUM(W25)	W25,
                    	SUM(W26)	W26
            	FROM
            		(	
            		SELECT 	DC.ITEM_ID,
            				--CASE WHEN TO_DATE(DC.CNFM_DATE) BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE,'D')+7
            				--	 THEN SUM(DC.RECEIPT_EXPT)
            				--	 ELSE 0
            				--	 END	W,
            				DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W,SUM(DC.RECEIPT_EXPT),0)	W,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W1,SUM(DC.RECEIPT_EXPT),0)	W1,
                   		 	DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W2,SUM(DC.RECEIPT_EXPT),0)	W2,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W3,SUM(DC.RECEIPT_EXPT),0)	W3,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W4,SUM(DC.RECEIPT_EXPT),0)	W4,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W5,SUM(DC.RECEIPT_EXPT),0)	W5,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W6,SUM(DC.RECEIPT_EXPT),0)	W6,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W7,SUM(DC.RECEIPT_EXPT),0)	W7,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W8,SUM(DC.RECEIPT_EXPT),0)	W8,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W9,SUM(DC.RECEIPT_EXPT),0)	W9,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W10,SUM(DC.RECEIPT_EXPT),0)	W10,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W11,SUM(DC.RECEIPT_EXPT),0)	W11,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W12,SUM(DC.RECEIPT_EXPT),0)	W12,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W13,SUM(DC.RECEIPT_EXPT),0)	W13,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W14,SUM(DC.RECEIPT_EXPT),0)	W14,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W15,SUM(DC.RECEIPT_EXPT),0)	W15,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W16,SUM(DC.RECEIPT_EXPT),0)	W16,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W17,SUM(DC.RECEIPT_EXPT),0)	W17,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W18,SUM(DC.RECEIPT_EXPT),0)	W18,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W19,SUM(DC.RECEIPT_EXPT),0)	W19,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W20,SUM(DC.RECEIPT_EXPT),0)	W20,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W21,SUM(DC.RECEIPT_EXPT),0)	W21,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W22,SUM(DC.RECEIPT_EXPT),0)	W22,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W23,SUM(DC.RECEIPT_EXPT),0)	W23,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W24,SUM(DC.RECEIPT_EXPT),0)	W24,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W25,SUM(DC.RECEIPT_EXPT),0)	W25,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'IW'),CAL.W26,SUM(DC.RECEIPT_EXPT),0)	W26
            		FROM 	DC_DATAWAREHOUSE DC, ITEM_MST IM,
            				(
                    		SELECT  TRUNC(TO_DATE('$!{cnfm_date}'),'IW')	W,
									TRUNC(TO_DATE('$!{cnfm_date}')+7,'IW')	W1,
        							TRUNC(TO_DATE('$!{cnfm_date}')+14,'IW')	W2,
        							TRUNC(TO_DATE('$!{cnfm_date}')+21,'IW')	W3,
        							TRUNC(TO_DATE('$!{cnfm_date}')+28,'IW')	W4,
        							TRUNC(TO_DATE('$!{cnfm_date}')+35,'IW')	W5,
        							TRUNC(TO_DATE('$!{cnfm_date}')+42,'IW')	W6,
        							TRUNC(TO_DATE('$!{cnfm_date}')+49,'IW')	W7,
       					 			TRUNC(TO_DATE('$!{cnfm_date}')+56,'IW')	W8,
        							TRUNC(TO_DATE('$!{cnfm_date}')+63,'IW')	W9,
        							TRUNC(TO_DATE('$!{cnfm_date}')+70,'IW')	W10,
        							TRUNC(TO_DATE('$!{cnfm_date}')+77,'IW')	W11,
        							TRUNC(TO_DATE('$!{cnfm_date}')+84,'IW')	W12,
        							TRUNC(TO_DATE('$!{cnfm_date}')+91,'IW')	W13,
        							TRUNC(TO_DATE('$!{cnfm_date}')+98,'IW')	W14,
        							TRUNC(TO_DATE('$!{cnfm_date}')+105,'IW') W15,
        							TRUNC(TO_DATE('$!{cnfm_date}')+112,'IW') W16,
        							TRUNC(TO_DATE('$!{cnfm_date}')+119,'IW') W17,
        							TRUNC(TO_DATE('$!{cnfm_date}')+126,'IW') W18,
        							TRUNC(TO_DATE('$!{cnfm_date}')+133,'IW') W19,
        							TRUNC(TO_DATE('$!{cnfm_date}')+140,'IW') W20,
        							TRUNC(TO_DATE('$!{cnfm_date}')+147,'IW') W21,
        							TRUNC(TO_DATE('$!{cnfm_date}')+154,'IW') W22,
        							TRUNC(TO_DATE('$!{cnfm_date}')+161,'IW') W23,
        							TRUNC(TO_DATE('$!{cnfm_date}')+168,'IW') W24,
        							TRUNC(TO_DATE('$!{cnfm_date}')+175,'IW') W25,
        							TRUNC(TO_DATE('$!{cnfm_date}')+182,'IW') W26
							FROM DUAL
                    		)CAL,
                    		(
                    		SELECT	TO_CHAR(CAL_DATE,'YYYYMMDD')	CAL_DATE
                    		FROM	CAL_MST
                    		WHERE	CAL_DATE BETWEEN TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')+210),'YYYYMMDD')
                    		)CAL2
                    -- 입고량은 이번주 총합량이 아닌 금일부터 주말까지의 합량이다. TRUNC('IW') 제거
            		WHERE 	DC.CNFM_DATE = CAL2.CAL_DATE
            		AND		DC.ITEM_ID	 =	IM.ITEM_ID
            		AND		IM.ITYPE	 =	'HAWA'
            		AND		IM.PR_FLAG	= 'Y'
            		GROUP 
            		BY 		DC.CNFM_DATE,DC.ITEM_ID
            		--HAVING	SUM(DC.RECEIPT_EXPT) &gt; 0
           			)
            		GROUP BY ITEM_ID
        		)IW,
        		(
        		SELECT	ITEM_ID,
        				MON_P01,
        				MON_P02,
        				MON_P03,
        				MON_P04,
        				MON_P05
        		FROM	DC_RECEIVE_PR
        		WHERE	VERSION	= '$!{cnfm_date}'
        		AND		GUBN = '1'
        		)PR     
		WHERE 	DC.ITEM_ID		= 	IM.ITEM_ID
		AND		DC.ITEM_ID		=	IW.ITEM_ID(+)
		AND		DC.ITEM_ID		=	PR.ITEM_ID
		AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
		AND		IM.PR_FLAG	=	'Y'
		AND		IM.ITYPE		=	'HAWA'			
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'		
		UNION ALL
		SELECT 	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05) SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03) SALES_CAT03,
				IM.ITEM_ID,
        		IM.ITEM_NAME,
        		''	AVL_STOCK,
        		''	NS_STOCK,
        		''	EXP_STOCK,
        		'전년 동주'		GUBN,
        		'3'				GUBN_IDX,
        		DECODE(ROUND((((NVL(AG.WEEK,0) + NVL(BOM.BOM,0))/7) * (TRUNC(SYSDATE+7,'D') - TRUNC(SYSDATE) + 1)),0) + 
                	   ROUND(NVL(AG.WEEK_M00,0) + NVL(BOM.BOM_01,0) +
                       ROUND(NVL(AG.WEEK_M01,0) + NVL(BOM.BOM_02,0),0),0),0,'NEW','OLD') NO_FLAG,
                THREE.MON_3	THREE_MON,
        		ROUND(AM.P_05 + NVL(BOM2.P_05,0),0)			MONTH_5,
        		ROUND(AM.P_04 + NVL(BOM2.P_04,0),0)			MONTH_4,
        		ROUND(AM.P_03 + NVL(BOM2.P_03,0),0)			MONTH_3,
        		ROUND(AM.P_02 + NVL(BOM2.P_02,0),0)			MONTH_2,
        		ROUND(AM.P_01 + NVL(BOM2.P_01,0),0)			MONTH_1,
        		ROUND((((NVL(AG.WEEK,0) + NVL(BOM.BOM,0))/7) * (TRUNC(SYSDATE+7,'D') - TRUNC(SYSDATE) + 1)),0)	W,
        		ROUND(NVL(AG.WEEK_M00,0) + NVL(BOM.BOM_01,0),0)		W_1,
        		ROUND(NVL(AG.WEEK_M01,0) + NVL(BOM.BOM_02,0),0)		W_2,
        		ROUND(NVL(AG.WEEK_M02,0) + NVL(BOM.BOM_03,0),0)		W_3,
        		ROUND(NVL(AG.WEEK_M03,0) + NVL(BOM.BOM_04,0),0)		W_4,
        		ROUND(NVL(AG.WEEK_M04,0) + NVL(BOM.BOM_05,0),0)		W_5,
        		ROUND(NVL(AG.WEEK_M05,0) + NVL(BOM.BOM_06,0),0)		W_6,
        		ROUND(NVL(AG.WEEK_M06,0) + NVL(BOM.BOM_07,0),0)		W_7,
        		ROUND(NVL(AG.WEEK_M07,0) + NVL(BOM.BOM_08,0),0)		W_8,
        		ROUND(NVL(AG.WEEK_M08,0) + NVL(BOM.BOM_09,0),0)		W_9,
        		ROUND(NVL(AG.WEEK_M09,0) + NVL(BOM.BOM_10,0),0)		W_10,
        		ROUND(NVL(AG.WEEK_M10,0) + NVL(BOM.BOM_11,0),0)		W_11,
        		ROUND(NVL(AG.WEEK_M11,0) + NVL(BOM.BOM_12,0),0)		W_12,
        		ROUND(NVL(AG.WEEK_M12,0) + NVL(BOM.BOM_13,0),0)		W_13,
        		ROUND(NVL(AG.WEEK_M13,0) + NVL(BOM.BOM_14,0),0)		W_14,
        		ROUND(NVL(AG.WEEK_M14,0) + NVL(BOM.BOM_15,0),0)		W_15,
        		ROUND(NVL(AG.WEEK_M15,0) + NVL(BOM.BOM_16,0),0)		W_16,
        		ROUND(NVL(AG.WEEK_M16,0) + NVL(BOM.BOM_17,0),0)		W_17,
        		ROUND(NVL(AG.WEEK_M17,0) + NVL(BOM.BOM_18,0),0)		W_18,
        		ROUND(NVL(AG.WEEK_M18,0) + NVL(BOM.BOM_19,0),0)		W_19,
        		ROUND(NVL(AG.WEEK_M19,0) + NVL(BOM.BOM_20,0),0)		W_20,
        		ROUND(NVL(AG.WEEK_M20,0) + NVL(BOM.BOM_21,0),0)		W_21,
        		ROUND(NVL(AG.WEEK_M21,0) + NVL(BOM.BOM_22,0),0)		W_22,
        		ROUND(NVL(AG.WEEK_M22,0) + NVL(BOM.BOM_23,0),0)		W_23,
        		ROUND(NVL(AG.WEEK_M23,0) + NVL(BOM.BOM_24,0),0)		W_24,
        		ROUND(NVL(AG.WEEK_M24,0) + NVL(BOM.BOM_25,0),0)		W_25,
        		ROUND(NVL(AG.WEEK_M25,0) + NVL(BOM.BOM_26,0),0)		W_26  
		FROM	ITEM_MST IM,
				(
				SELECT	T1.CONS_ITEM_ID				ITEM_ID,
						SUM(T2.WEEK    * T1.QTY)	BOM,				       
				        SUM(T2.WEEK_M00* T1.QTY)	BOM_01,
				        SUM(T2.WEEK_M01* T1.QTY)	BOM_02,
				        SUM(T2.WEEK_M02* T1.QTY)	BOM_03,
				        SUM(T2.WEEK_M03* T1.QTY)	BOM_04,
				        SUM(T2.WEEK_M04* T1.QTY)	BOM_05,
				        SUM(T2.WEEK_M05* T1.QTY)	BOM_06,
				        SUM(T2.WEEK_M06* T1.QTY)	BOM_07,
				        SUM(T2.WEEK_M07* T1.QTY)	BOM_08,
				        SUM(T2.WEEK_M08* T1.QTY)	BOM_09,
				        SUM(T2.WEEK_M09* T1.QTY)	BOM_10,
				        SUM(T2.WEEK_M10* T1.QTY)	BOM_11,
				        SUM(T2.WEEK_M11* T1.QTY)	BOM_12,
				        SUM(T2.WEEK_M12* T1.QTY)	BOM_13,
				        SUM(T2.WEEK_M13* T1.QTY)	BOM_14,
				        SUM(T2.WEEK_M14* T1.QTY)	BOM_15,
				        SUM(T2.WEEK_M15* T1.QTY)	BOM_16,
				        SUM(T2.WEEK_M16* T1.QTY)	BOM_17,
				        SUM(T2.WEEK_M17* T1.QTY)	BOM_18,
				        SUM(T2.WEEK_M18* T1.QTY)	BOM_19,
				        SUM(T2.WEEK_M19* T1.QTY)	BOM_20,
				        SUM(T2.WEEK_M20* T1.QTY)	BOM_21,
				        SUM(T2.WEEK_M21* T1.QTY)	BOM_22,
				        SUM(T2.WEEK_M22* T1.QTY)	BOM_23,
				        SUM(T2.WEEK_M23* T1.QTY)	BOM_24,
				        SUM(T2.WEEK_M24* T1.QTY)	BOM_25,
				        SUM(T2.WEEK_M25* T1.QTY)	BOM_26
				FROM
					(
					SELECT  IM.ITEM_ID, 
							IM.ITEM_NAME,		
					        MB.CONS_ITEM_ID,
					       	MAX(MB.PROD_VER),    
					        MB.PROD_ITEM_ID,      
					        MB.CONS_QTY,
					        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
					        MB.CONS_QTY_UOM      
					FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
					WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
					AND		IM.ITEM_ID	= ITM.ITEM_CD
					AND		IM.ITYPE		= 'HAWA'	
					AND		(IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')					
					AND		IM.PR_FLAG = 'Y'
					GROUP 
					BY 		IM.ITEM_ID, 
							IM.ITEM_NAME,
					        MB.CONS_ITEM_ID,
					        MB.PROD_ITEM_ID,
					        MB.CONS_QTY,
					        MB.CONS_QTY_UOM, 
					        IM.QTY
					)T1,
					(
					SELECT	ITEM_ID,
							WEEK,
							WEEK_M00,
							WEEK_M01,
							WEEK_M02,
							WEEK_M03,
							WEEK_M04,
							WEEK_M05,
							WEEK_M06,
							WEEK_M07,
							WEEK_M08,
							WEEK_M09,
							WEEK_M10,
							WEEK_M11,
							WEEK_M12,
							WEEK_M13,
							WEEK_M14,
							WEEK_M15,
							WEEK_M16,
							WEEK_M17,
							WEEK_M18,
							WEEK_M19,
							WEEK_M20,
							WEEK_M21,
							WEEK_M22,
							WEEK_M23,
							WEEK_M24,
							WEEK_M25,
							WEEK_M26
					FROM	SALES_WEEK_AGG
					WHERE	VERSION = '$!{cnfm_date}'
					AND		GUBN 	= '2'
					)T2
					WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
					GROUP	
					BY		T1.CONS_ITEM_ID	
				)BOM,
				(
        		SELECT	DC.ITEM_ID,        		
        				SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) NS_STOCK,
                		SUM(DECODE(DM.DC_LOC_TYPE,'사내',0,DC.BASE_STOCK)) EXP_STOCK
  				FROM	DC_DATAWAREHOUSE DC,
        				DC_MST DM,
        				ITEM_MST IM
        		WHERE	DC.DC_ID		= 	DM.DC_ID
        		AND		DC.ITEM_ID		=	IM.ITEM_ID
        		AND		IM.PR_FLAG	=	'Y'
				AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
        		AND		DC.CNFM_DATE 	= 	'$!{cnfm_date}'      
        		GROUP
        		BY		DC.ITEM_ID
        		--HAVING	SUM(DECODE(DM.DC_LOC_TYPE,'사내',DC.BASE_STOCK,0)) &gt; 0
        		)DC,
        		(
        		SELECT	ITEM_ID,
						SUM(M_01)	P_01, 
        				SUM(M_02)	P_02,
        				SUM(M_03)	P_03,
        				SUM(M_04)	P_04,
        				SUM(M_05)	P_05
        		FROM	(
        				SELECT	ITEM_ID,
        						DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),				SALES_QTY,0) M_01,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) M_02,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) M_03,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) M_04,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMM'),SALES_QTY,0) M_05
						FROM	(
								SELECT 	SUBSTR(DC.CNFM_DATE,0,6)	YYYYMM,
										DC.ITEM_ID,
        								SUM(DC.PRE_MONTH_SELL) 		SALES_QTY
								FROM 	DC_DATAWAREHOUSE DC, ITEM_MST IM
								WHERE 	DC.ITEM_ID	= IM.ITEM_ID
								AND		DC.CNFM_DATE IN (
														'$!{cnfm_date}',
														TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMMDD')
														)
								AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
								AND		IM.PR_FLAG	=	'Y'
								AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								AND		IM.ITYPE		=	'HAWA'									
								GROUP 
								BY 		DC.CNFM_DATE,
										DC.ITEM_ID
								) 
        				)
        		GROUP
        		BY		ITEM_ID	
        		)AM,
        		(        		
        		SELECT	CONS_ITEM_ID ITEM_ID,
						SUM(M_01)	P_01, 
        				SUM(M_02)	P_02,
        				SUM(M_03)	P_03,
        				SUM(M_04)	P_04,
        				SUM(M_05)	P_05
        		FROM	(
        				SELECT	ITEM_ID,
        						CONS_ITEM_ID,
        						DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),			   SALES_QTY,0) M_01,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) M_02,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) M_03,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) M_04,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMM'),SALES_QTY,0) M_05
						FROM	(
								SELECT 	SUBSTR(DC.CNFM_DATE,0,6)	YYYYMM,
										DC.ITEM_ID,
										BOM.CONS_ITEM_ID,
        								SUM(DC.PRE_MONTH_SELL)	* BOM.QTY	SALES_QTY
								FROM 	DC_DATAWAREHOUSE DC, 
                                        (
                                        SELECT	MB.CONS_ITEM_ID,
                                                MB.PROD_ITEM_ID,
                                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
                                                MAX(MB.PROD_VER) PROD_VER
                                        FROM	MBOM MB, ITEM_MST IM
                                        WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID
                                        AND		IM.PR_FLAG ='Y'
                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                                        AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
                                        AND		IM.PR_FLAG	=	'Y'
                                        AND		IM.ITYPE		=	'HAWA'
                                        GROUP
                                        BY		MB.CONS_ITEM_ID,
                                                MB.PROD_ITEM_ID,
                                                MB.CONS_QTY,
                                                MB.CONS_QTY_UOM,
                                                IM.QTY
                                        )BOM
								WHERE 	DC.ITEM_ID	= BOM.PROD_ITEM_ID
								AND		DC.CNFM_DATE IN (
														'$!{cnfm_date}',
														TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMMDD')
														)																
								GROUP 
								BY 		DC.CNFM_DATE,
										DC.ITEM_ID,
										BOM.CONS_ITEM_ID,
										BOM.QTY
								) 
        				)
        		GROUP
        		BY		CONS_ITEM_ID	
        		)BOM2,
        		(
        		SELECT	ITEM_ID,
						WEEK,
						WEEK_M00,
        				WEEK_M01,
        				WEEK_M02,
        				WEEK_M03,
        				WEEK_M04,
        				WEEK_M05,
        				WEEK_M06,
        				WEEK_M07,
        				WEEK_M08,
        				WEEK_M09,
        				WEEK_M10,
        				WEEK_M11,
        				WEEK_M12,
        				WEEK_M13,
        				WEEK_M14,
        				WEEK_M15,
        				WEEK_M16,
        				WEEK_M17,
        				WEEK_M18,
        				WEEK_M19,
        				WEEK_M20,
        				WEEK_M21,
        				WEEK_M22,
        				WEEK_M23,
        				WEEK_M24,
        				WEEK_M25,
        				WEEK_M26
				FROM	SALES_WEEK_AGG
				WHERE	VERSION = '$!{cnfm_date}'
				AND		GUBN 	= '2'
        		)AG,
    		 (
         	SELECT	S1.ITEM_ID,
         			ROUND(NVL(S1.MON_1,0) + NVL(S2.ONE_QTY,0),0)	MON_1,
	    			ROUND(NVL(S1.MON_3,0) + NVL(S2.THREE_QTY,0),0)	MON_3,
	    			ROUND(NVL(S1.MON_13,0) + NVL(S2.ONETH_QTY,0),0)	MON_13		    		
	    	FROM
			    (
			    SELECT  DC.ITEM_ID,
			            NVL(ROUND(SUM(DC.SALES_MEAN_1MON_TA),0),0) * 6	MON_1,
			            NVL(ROUND(SUM(DC.SALES_MEAN_3MON_TA),0),0) * 6	MON_3,
			            NVL(ROUND(((SUM(DC.SALES_MEAN_1MON_TA)+SUM(DC.SALES_MEAN_3MON_TA))/2) * 6,0),0)		MON_13	            
			    FROM    DC_DATAWAREHOUSE DC, ITEM_MST IM
			    WHERE   DC.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                AND		DC.ITEM_ID	= IM.ITEM_ID
                AND		IM.PR_FLAG = 'Y'
                AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
			    GROUP
			    BY		DC.ITEM_ID
			    )S1,
			    (
			    SELECT	T1.CONS_ITEM_ID					 ITEM_ID,
					    SUM(NVL(T2.MON_1,0) * NVL(T1.QTY,0))  ONE_QTY,
		   				SUM(NVL(T2.MON_3,0) * NVL(T1.QTY,0))  THREE_QTY,
		   				SUM(NVL(T2.MON_13,0) * NVL(T1.QTY,0)) ONETH_QTY	
				FROM	(
						SELECT  IM.ITEM_ID, 
								IM.ITEM_NAME,		
						        MB.CONS_ITEM_ID,
						       	MAX(MB.PROD_VER),    
						        MB.PROD_ITEM_ID,      
						        MB.CONS_QTY,
						        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
						        MB.CONS_QTY_UOM      
						FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
						WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
						AND		IM.ITEM_ID	= ITM.ITEM_CD
						AND		IM.ITYPE		= 'HAWA'	
						AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
						AND		IM.PR_FLAG = 'Y'
						GROUP 
						BY 		IM.ITEM_ID, 
								IM.ITEM_NAME,
						        MB.CONS_ITEM_ID,
						        MB.PROD_ITEM_ID,
						        MB.CONS_QTY,
						        MB.CONS_QTY_UOM, 
						        IM.QTY
						)T1,
						(
					    SELECT	DC.ITEM_ID,
		                        NVL(ROUND(SUM(DC.SALES_MEAN_1MON_TA),0),0) * 6	MON_1,
		                        NVL(ROUND(SUM(DC.SALES_MEAN_3MON_TA),0),0) * 6	MON_3,
		                        NVL(ROUND(((SUM(DC.SALES_MEAN_1MON_TA)+SUM(DC.SALES_MEAN_3MON_TA))/2) * 6,0),0)		MON_13	            
		                FROM    DC_DATAWAREHOUSE DC, ITEM_MST IM
		                WHERE	DC.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
		                AND		DC.ITEM_ID = IM.ITEM_ID  
                        AND		IM.ITEM_ID	IN  (
                						SELECT	DISTINCT MB.PROD_ITEM_ID
                                        FROM	MBOM MB, ITEM_MST IM
                                        WHERE	IM.ITEM_ID		=	MB.CONS_ITEM_ID
                                        AND		IM.PR_FLAG	= 'Y'
                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                						) 		                                  
		                GROUP
		                BY		DC.ITEM_ID              
						)T2
				WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
				GROUP
				BY		T1.CONS_ITEM_ID
				)S2
				WHERE	S1.ITEM_ID = S2.ITEM_ID (+)
            )THREE                
		WHERE 	DC.ITEM_ID		= 	IM.ITEM_ID
		AND		DC.ITEM_ID		=	THREE.ITEM_ID(+)
		AND		DC.ITEM_ID		=	AG.ITEM_ID(+)
		AND		DC.ITEM_ID		=	AM.ITEM_ID
		AND		IM.ITEM_ID		=	BOM.ITEM_ID(+)
		AND		IM.ITEM_ID		=	BOM2.ITEM_ID(+)
		AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
		AND		IM.PR_FLAG	=	'Y'
		AND		IM.ITYPE		=	'HAWA'
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'					
		)T1,
		/*TP_FLAG*/
		(
		SELECT  ITEM_ID,
                CASE
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') 		= IPGO_DATE THEN 0
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 7,'IW') 	= IPGO_DATE THEN 1
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 14,'IW') = IPGO_DATE THEN 2
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 21,'IW') = IPGO_DATE THEN 3
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 28,'IW') = IPGO_DATE THEN 4
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 35,'IW') = IPGO_DATE THEN 5
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 42,'IW') = IPGO_DATE THEN 6
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 49,'IW') = IPGO_DATE THEN 7
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 56,'IW') = IPGO_DATE THEN 8
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 63,'IW') = IPGO_DATE THEN 9
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 70,'IW') = IPGO_DATE THEN 10
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 77,'IW') = IPGO_DATE THEN 11
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 84,'IW') = IPGO_DATE THEN 12
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 91,'IW') = IPGO_DATE THEN 13
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 98,'IW') = IPGO_DATE THEN 14 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 105,'IW') = IPGO_DATE THEN 15 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 112,'IW') = IPGO_DATE THEN 16 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 119,'IW') = IPGO_DATE THEN 17  
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 126,'IW') = IPGO_DATE THEN 18 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 133,'IW') = IPGO_DATE THEN 19 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 140,'IW') = IPGO_DATE THEN 20  
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 147,'IW') = IPGO_DATE THEN 21 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 154,'IW') = IPGO_DATE THEN 22 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 161,'IW') = IPGO_DATE THEN 23
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 168,'IW') = IPGO_DATE THEN 24 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 175,'IW') = IPGO_DATE THEN 25
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 182,'IW') = IPGO_DATE THEN 26                  
                     ELSE 0
                END  TP_FLAG
       FROM	(
			SELECT	ITEM_ID, 
					TRUNC(TO_DATE('$!{cnfm_date}') + LEAD_TIME,'IW') IPGO_DATE
			FROM	(
					SELECT	ITEM_ID,		
							NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
					FROM	ITEM_MST
					--WHERE	NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) &gt; 0
					WHERE	ITYPE		= 'HAWA'	
                    AND		SELL_STOP_DATE &gt;= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
                    AND		PR_FLAG = 'Y'                   
					)
			)                        
		)T2
		WHERE	T1.ITEM_ID	= T2.ITEM_ID
		ORDER
		BY		T1.SALES_CAT05, T1.SALES_CAT03, T1.ITEM_ID, T1.GUBN_IDX
	</query>
	
	<!-- 수입상품 발주관리 메인 (월) -->
	<query id="ip_01180_import_md_PlanAnalysis_list_month" paging="false">
		SELECT  T1.SALES_CAT05,
				T1.SALES_CAT03,
				T1.ITEM_ID,
        		T1.ITEM_NAME,        		
        		T1.GUBN,
        		T1.GUBN_IDX,
        		T1.NO_FLAG,        		       		
        		NVL(T1.MONTH_12,0),
        		NVL(T1.MONTH_11,0),
        		NVL(T1.MONTH_10,0),
        		NVL(T1.MONTH_9,0),
        		NVL(T1.MONTH_8,0),
        		NVL(T1.MONTH_7,0),
        		NVL(T1.MONTH_6,0),
        		NVL(T1.MONTH_5,0),
        		NVL(T1.MONTH_4,0), 
        		NVL(T1.MONTH_3,0),
        		NVL(T1.MONTH_2,0),
        		NVL(T1.MONTH_1,0),        	
        		T2.TP_FLAG,
        		NVL(T1.THREE_MON,0)
        FROM
		(
		SELECT 	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05) SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03) SALES_CAT03,
				IM.ITEM_ID,
        		IM.ITEM_NAME,
        		--TO_CHAR(ROUND(NVL(DC.NS_STOCK,0)  + NVL(DC.EXP_STOCK,0) + NVL(BOM.NS_BOM_STOCK,0) + NVL(BOM.EXP_BOM_STOCK,0),0))	AVL_STOCK,
        		--TO_CHAR(ROUND(NVL(DC.NS_STOCK,0)  + NVL(BOM.NS_BOM_STOCK,0),0))			NS_STOCK,
        		--TO_CHAR(ROUND(NVL(DC.EXP_STOCK,0) + NVL(BOM.EXP_BOM_STOCK,0),0))		EXP_STOCK,
        		'기초재고'	GUBN,
        		'1'			GUBN_IDX,
        		''			NO_FLAG,       
        		0			THREE_MON,     		       		
        		DC.P_12 + NVL(BOM.P_12,0)		MONTH_12,
        		DC.P_11 + NVL(BOM.P_11,0)		MONTH_11,
        		DC.P_10 + NVL(BOM.P_10,0)		MONTH_10,
        		DC.P_09 + NVL(BOM.P_09,0)		MONTH_9,
        		DC.P_08 + NVL(BOM.P_08,0)		MONTH_8,
        		DC.P_07 + NVL(BOM.P_07,0)		MONTH_7,
        		DC.P_06 + NVL(BOM.P_06,0)		MONTH_6,
        		0		MONTH_5,
        		0		MONTH_4,
        		0		MONTH_3,
        		0		MONTH_2,
        		0		MONTH_1
   		FROM	ITEM_MST IM,				
        		(
                SELECT	ITEM_ID,
                		MAX(M_06)	P_06,
            			MAX(M_07)	P_07, 
        				MAX(M_08)	P_08,
        				MAX(M_09)	P_09,
        				MAX(M_10)	P_10,
        				MAX(M_11)	P_11,
        				MAX(M_12)	P_12
                FROM	(
                		SELECT	ITEM_ID,
                				DECODE(YYYYMMDD,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD'),BASE_STOCK,0) M_06,
        						DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_07,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_08,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_09,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_10,
                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_11,
                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-6),'YYYYMMDD'),BASE_STOCK,0) M_12
                        FROM	(      
                        		SELECT	DC.CNFM_DATE	YYYYMMDD,
                						DC.ITEM_ID,
                						SUM(DC.BASE_STOCK) BASE_STOCK
                				FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM
                				WHERE 	DC.ITEM_ID = IM.ITEM_ID
                				AND	DC.CNFM_DATE IN(
                					 				TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-6),'YYYYMMDD')
                                     				)                                     
                				AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
								AND		IM.PR_FLAG		=	'Y'
								AND		IM.ITYPE		=	'HAWA'	
                				GROUP
                				BY		DC.CNFM_DATE,DC.ITEM_ID
                				--HAVING	SUM(DC.BASE_STOCK) > 0
                				)
               				)
                GROUP BY ITEM_ID
                )DC,              
                /* M-12 전용 BOM */
               (                
                SELECT	ITEM_ID,
                		SUM(P_12)	P_12,
                        SUM(P_11)	P_11,
                        SUM(P_10)	P_10,
                        SUM(P_09)	P_09,
                        SUM(P_08)	P_08,
                        SUM(P_07)	P_07,
                        SUM(P_06)	P_06                    
                FROM	(
		                SELECT	ITEM_ID,
		                		PROD_ITEM_ID,
		            			ROUND(MAX(M_12),0)	P_12, 
								ROUND(MAX(M_11),0)	P_11, 
		        				ROUND(MAX(M_10),0)	P_10,
		        				ROUND(MAX(M_09),0)	P_09,
		        				ROUND(MAX(M_08),0)	P_08,
		        				ROUND(MAX(M_07),0)	P_07,
		        				ROUND(MAX(M_06),0)	P_06
		                FROM	(
		                		SELECT	ITEM_ID,
		                        		PROD_ITEM_ID,
		                        		DECODE(YYYYMMDD,TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD'),BASE_STOCK,0) M_06,
		        						DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_07,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_08,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_09,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_10,
		                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_11,
		                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-6),'YYYYMMDD'),BASE_STOCK,0) M_12				        			
		                        FROM	(     
		                        		SELECT	DC.CNFM_DATE	YYYYMMDD,                						
		                                        BOM.CONS_ITEM_ID	ITEM_ID, 
		                                        BOM.PROD_ITEM_ID,
		                						SUM(DC.BASE_STOCK) * BOM.QTY  BASE_STOCK
		                				FROM	DC_DATAWAREHOUSE DC,
		                                		(
		                                        SELECT	MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                                                MAX(MB.PROD_VER) PROD_VER
		                                        FROM	MBOM MB, ITEM_MST IM
		                                        WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID
		                                        AND		IM.PR_FLAG ='Y'
		                                        AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		                                        AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
												AND		IM.PR_FLAG		=	'Y'
												AND		IM.ITYPE		=	'HAWA'
		                                        GROUP
		                                        BY		MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                MB.CONS_QTY,
		                                                MB.CONS_QTY_UOM,
		                                                IM.QTY
		                                        )BOM
		                				WHERE 	DC.ITEM_ID = BOM.PROD_ITEM_ID
		                				AND		DC.CNFM_DATE IN(
			                					 				TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD'),
			                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
			        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
			        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
			        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
			                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),
			                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-6),'YYYYMMDD')
		                                     					)                                     
		                				GROUP
		                				BY		DC.CNFM_DATE,
		                                		DC.ITEM_ID,
		                                        BOM.QTY,
		                                        BOM.CONS_ITEM_ID,
		                                        BOM.PROD_ITEM_ID                                                   				
		                				)
		               			)
		                GROUP 
		                BY 		ITEM_ID,
		                 		PROD_ITEM_ID
		                )
		        GROUP 
		        BY 		ITEM_ID        
               	)BOM            
		WHERE 	DC.ITEM_ID		= 	IM.ITEM_ID
		AND		DC.ITEM_ID		= 	BOM.ITEM_ID(+)
		AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
		AND		IM.PR_FLAG		=	'Y'
		AND		IM.ITYPE		=	'HAWA'	
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'		
		UNION ALL
		SELECT 	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05) SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03) SALES_CAT03,
				IM.ITEM_ID,
        		IM.ITEM_NAME,        		
        		'입고량'		GUBN,
        		'2'			GUBN_IDX,
        		''			NO_FLAG,       
        		0			THREE_MON,    		
        		PR.MON_P06    		P_12,
                PR.MON_P05    		P_11,
                PR.MON_P04    		P_10,
                PR.MON_P03          P_9,
                PR.MON_P02          P_8,
                PR.MON_P01          P_7, 
        		IW.P_06			P_06,
        		IW.P_05			P_05,
        		IW.P_04			P_04,
        		IW.P_03			P_03,
        		IW.P_02			P_02,
        		IW.P_01			P_01        	 
		FROM	ITEM_MST IM,			
        		(
        		SELECT	ITEM_ID,
            			SUM(P_06)		P_06,
                    	SUM(P_05)		P_05,
                    	SUM(P_04)		P_04,
                    	SUM(P_03)		P_03,
                    	SUM(P_02)		P_02,
                    	SUM(P_01)		P_01                    	
            	FROM
            		(	
            		SELECT 	DC.ITEM_ID,
            				DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'MM'),CAL.P_06,SUM(DC.RECEIPT_EXPT),0)	P_06,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'MM'),CAL.P_05,SUM(DC.RECEIPT_EXPT),0)	P_05,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'MM'),CAL.P_04,SUM(DC.RECEIPT_EXPT),0)	P_04,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'MM'),CAL.P_03,SUM(DC.RECEIPT_EXPT),0)	P_03,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'MM'),CAL.P_02,SUM(DC.RECEIPT_EXPT),0)	P_02,
                    		DECODE(TRUNC(TO_DATE(DC.CNFM_DATE),'MM'),CAL.P_01,SUM(DC.RECEIPT_EXPT),0)	P_01                    	
            		FROM 	DC_DATAWAREHOUSE DC, ITEM_MST IM,
            				(
                    		SELECT  TRUNC(TO_DATE('$!{cnfm_date}'),'MM')	P_06,
                    				ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),1)	P_05,
                    				ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),2)	P_04,
                    				ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),3)	P_03,
                    				ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),4)	P_02,
                    				ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),5)	P_01                    		
							FROM DUAL
                    		)CAL,
                    		(
                    		SELECT	TO_CHAR(CAL_DATE,'YYYYMMDD')	CAL_DATE
                    		FROM	CAL_MST
                    		WHERE	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}'),'MM') AND ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),6)
                    		)CAL2
                    WHERE 	DC.CNFM_DATE 	= CAL2.CAL_DATE
            		AND		DC.ITEM_ID	 	= IM.ITEM_ID
            		AND		IM.ITYPE	 	= 'HAWA'
            		AND		IM.PR_FLAG		= 'Y'
            		GROUP 
            		BY 		DC.CNFM_DATE,DC.ITEM_ID
            		--HAVING	SUM(DC.RECEIPT_EXPT) &gt; 0
           			)
            		GROUP BY ITEM_ID
        		)IW,
        		(
        		SELECT	ITEM_ID,
        				MON_P01,
        				MON_P02,
        				MON_P03,
        				MON_P04,
        				MON_P05,
        				MON_P06
        		FROM	DC_RECEIVE_PR
        		WHERE	VERSION	= '$!{cnfm_date}'
        		AND		GUBN = '1'
        		)PR     
		WHERE 	IM.ITEM_ID		=	IW.ITEM_ID(+)
		AND		IM.ITEM_ID		=	PR.ITEM_ID
		AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
		AND		IM.PR_FLAG		=	'Y'
		AND		IM.ITYPE		=	'HAWA'			
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'		
		UNION ALL
		SELECT 	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05) SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03) SALES_CAT03,
				IM.ITEM_ID,
        		IM.ITEM_NAME,
        		'전년 동주'		GUBN,
        		'3'				GUBN_IDX,     
        		DECODE(ROUND((((NVL(AG.WEEK,0) + NVL(BOM.BOM,0))/7) * (TRUNC(SYSDATE+7,'D') - TRUNC(SYSDATE) + 1)),0) + 
                	   ROUND(NVL(AG.WEEK_M00,0) + NVL(BOM.BOM_01,0) +
                       ROUND(NVL(AG.WEEK_M01,0) + NVL(BOM.BOM_02,0),0),0),0,'NEW','OLD') NO_FLAG,
                THREE.MON_3	THREE_MON,	
        		ROUND(AM.P_12 + NVL(BOM2.P_12,0),0)			MONTH_12,
        		ROUND(AM.P_11 + NVL(BOM2.P_11,0),0)			MONTH_11,
        		ROUND(AM.P_10 + NVL(BOM2.P_10,0),0)			MONTH_10,
        		ROUND(AM.P_09 + NVL(BOM2.P_09,0),0)			MONTH_9,
        		ROUND(AM.P_08 + NVL(BOM2.P_08,0),0)			MONTH_8,
        		ROUND(AM.P_07 + NVL(BOM2.P_07,0),0)			MONTH_7,
        		ROUND(AM.P_06 + NVL(BOM2.P_06,0),0)			MONTH_6,
        		ROUND(AM.P_05 + NVL(BOM2.P_05,0),0)			MONTH_5,
        		ROUND(AM.P_04 + NVL(BOM2.P_04,0),0)			MONTH_4,
        		ROUND(AM.P_03 + NVL(BOM2.P_03,0),0)			MONTH_3,
        		ROUND(AM.P_02 + NVL(BOM2.P_02,0),0)			MONTH_2,
        		ROUND(AM.P_01 + NVL(BOM2.P_01,0),0)			MONTH_1
		FROM	ITEM_MST IM,
				(
				SELECT	T1.CONS_ITEM_ID				ITEM_ID,
						SUM(T2.WEEK    * T1.QTY)	BOM,				       
				        SUM(T2.WEEK_M00* T1.QTY)	BOM_01,
				        SUM(T2.WEEK_M01* T1.QTY)	BOM_02				   
				FROM
					(
					SELECT  IM.ITEM_ID, 
							IM.ITEM_NAME,		
					        MB.CONS_ITEM_ID,
					       	MAX(MB.PROD_VER),    
					        MB.PROD_ITEM_ID,      
					        MB.CONS_QTY,
					        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
					        MB.CONS_QTY_UOM      
					FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
					WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
					AND		IM.ITEM_ID	= ITM.ITEM_CD
					AND		IM.ITYPE	= 'HAWA'	
					AND		(IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')					
					AND		IM.PR_FLAG 	= 'Y'
					GROUP 
					BY 		IM.ITEM_ID, 
							IM.ITEM_NAME,
					        MB.CONS_ITEM_ID,
					        MB.PROD_ITEM_ID,
					        MB.CONS_QTY,
					        MB.CONS_QTY_UOM, 
					        IM.QTY
					)T1,
					(
					SELECT	ITEM_ID,
							WEEK,
							WEEK_M00,
							WEEK_M01,
							WEEK_M02							
					FROM	SALES_WEEK_AGG
					WHERE	VERSION = '$!{cnfm_date}'
					AND		GUBN 	= '2'
					)T2
					WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
					GROUP	
					BY		T1.CONS_ITEM_ID	
				)BOM,
				(
        		SELECT	ITEM_ID,
						WEEK,
						WEEK_M00,
        				WEEK_M01,
        				WEEK_M02        				
				FROM	SALES_WEEK_AGG
				WHERE	VERSION = '$!{cnfm_date}'
				AND		GUBN 	= '2'
        		)AG,
        		(
        		SELECT	ITEM_ID,
						SUM(M_12)	P_12, 
        				SUM(M_11)	P_11,
        				SUM(M_10)	P_10,
        				SUM(M_09)	P_09,
        				SUM(M_08)	P_08,
        				SUM(M_07)	P_07,
        				SUM(M_06)	P_06, 
        				SUM(M_05)	P_05,
        				SUM(M_04)	P_04,
        				SUM(M_03)	P_03,
        				SUM(M_02)	P_02,
        				SUM(M_01)	P_01
        		FROM	(
        				SELECT	ITEM_ID,        						
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-6),'YYYYMM'),SALES_QTY,0) 	M_01,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMM'),SALES_QTY,0) 	M_02,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMM'),SALES_QTY,0) 	M_03,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMM'),SALES_QTY,0) 	M_04,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMM'),SALES_QTY,0) 	M_05,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMM'),SALES_QTY,0) 	M_06,					
        						DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),				SALES_QTY,0) 	M_07,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) 	M_08,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) 	M_09,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) 	M_10,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMM'),SALES_QTY,0) 	M_11,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-5),'YYYYMM'),SALES_QTY,0) 	M_12								
						FROM	(
								SELECT 	SUBSTR(DC.CNFM_DATE,0,6)	YYYYMM,
										DC.ITEM_ID,
        								SUM(DC.PRE_MONTH_SELL) 		SALES_QTY
								FROM 	DC_DATAWAREHOUSE DC, ITEM_MST IM
								WHERE 	DC.ITEM_ID	= IM.ITEM_ID
								AND		DC.CNFM_DATE IN (
														TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD'),
														TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-5),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-6),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMMDD')
														)
								AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
								AND		IM.PR_FLAG	=	'Y'
								AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								AND		IM.ITYPE		=	'HAWA'									
								GROUP 
								BY 		DC.CNFM_DATE,
										DC.ITEM_ID
								) 
        				)
        		GROUP
        		BY		ITEM_ID	
        		)AM,
        		(        		
        		SELECT	CONS_ITEM_ID ITEM_ID,
						SUM(M_12)	P_12, 
        				SUM(M_11)	P_11,
        				SUM(M_10)	P_10,
        				SUM(M_09)	P_09,
        				SUM(M_08)	P_08,
        				SUM(M_07)	P_07,
        				SUM(M_06)	P_06, 
        				SUM(M_05)	P_05,
        				SUM(M_04)	P_04,
        				SUM(M_03)	P_03,
        				SUM(M_02)	P_02,
        				SUM(M_01)	P_01
        		FROM	(
        				SELECT	ITEM_ID,
        						CONS_ITEM_ID,
        						DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-6),'YYYYMM'),SALES_QTY,0) 	M_01,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMM'),SALES_QTY,0) 	M_02,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMM'),SALES_QTY,0) 	M_03,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMM'),SALES_QTY,0) 	M_04,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMM'),SALES_QTY,0) 	M_05,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMM'),SALES_QTY,0) 	M_06,					
        						DECODE(YYYYMM,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMM'),				SALES_QTY,0) 	M_07,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMM'),SALES_QTY,0) 	M_08,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMM'),SALES_QTY,0) 	M_09,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMM'),SALES_QTY,0) 	M_10,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMM'),SALES_QTY,0) 	M_11,
								DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-5),'YYYYMM'),SALES_QTY,0) 	M_12	     				
						FROM	(
								SELECT 	SUBSTR(DC.CNFM_DATE,0,6)	YYYYMM,
										DC.ITEM_ID,
										BOM.CONS_ITEM_ID,
        								SUM(DC.PRE_MONTH_SELL)	* BOM.QTY	SALES_QTY
								FROM 	DC_DATAWAREHOUSE DC, 
                                        (
                                        SELECT	MB.CONS_ITEM_ID,
                                                MB.PROD_ITEM_ID,
                                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
                                                MAX(MB.PROD_VER) PROD_VER
                                        FROM	MBOM MB, ITEM_MST IM
                                        WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID
                                        AND		IM.PR_FLAG ='Y'
                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                                        AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
                                        AND		IM.PR_FLAG		=	'Y'
                                        AND		IM.ITYPE		=	'HAWA'
                                        GROUP
                                        BY		MB.CONS_ITEM_ID,
                                                MB.PROD_ITEM_ID,
                                                MB.CONS_QTY,
                                                MB.CONS_QTY_UOM,
                                                IM.QTY
                                        )BOM
								WHERE 	DC.ITEM_ID	= BOM.PROD_ITEM_ID
								AND		DC.CNFM_DATE IN (
														TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD'),
														TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-1),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-2),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-3),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-4),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-5),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-6),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-7),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-8),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-9),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-10),'YYYYMMDD'),
        												TO_CHAR(ADD_MONTHS(TO_DATE('$!{cnfm_date}'),-11),'YYYYMMDD')
														)																
								GROUP 
								BY 		DC.CNFM_DATE,
										DC.ITEM_ID,
										BOM.CONS_ITEM_ID,
										BOM.QTY
								) 
        				)
        		GROUP
        		BY		CONS_ITEM_ID	
        	)BOM2,        		
    		 (
         	SELECT	S1.ITEM_ID,
         			ROUND(NVL(S1.MON_1,0) + NVL(S2.ONE_QTY,0),0)	MON_1,
	    			ROUND(NVL(S1.MON_3,0) + NVL(S2.THREE_QTY,0),0)	MON_3,
	    			ROUND(NVL(S1.MON_13,0) + NVL(S2.ONETH_QTY,0),0)	MON_13		    		
	    	FROM
			    (
			    SELECT  DC.ITEM_ID,
			            NVL(ROUND(SUM(DC.SALES_MEAN_1MON_TA),0),0) * 6	MON_1,
			            NVL(ROUND(SUM(DC.SALES_MEAN_3MON_TA),0),0) * 6	MON_3,
			            NVL(ROUND(((SUM(DC.SALES_MEAN_1MON_TA)+SUM(DC.SALES_MEAN_3MON_TA))/2) * 6,0),0)		MON_13	            
			    FROM    DC_DATAWAREHOUSE DC, ITEM_MST IM
			    WHERE   DC.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                AND		DC.ITEM_ID	= IM.ITEM_ID
                AND		IM.PR_FLAG = 'Y'
                AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
			    GROUP
			    BY		DC.ITEM_ID
			    )S1,
			    (
			    SELECT	T1.CONS_ITEM_ID					 ITEM_ID,
					    SUM(NVL(T2.MON_1,0) * NVL(T1.QTY,0))  ONE_QTY,
		   				SUM(NVL(T2.MON_3,0) * NVL(T1.QTY,0))  THREE_QTY,
		   				SUM(NVL(T2.MON_13,0) * NVL(T1.QTY,0)) ONETH_QTY	
				FROM	(
						SELECT  IM.ITEM_ID, 
								IM.ITEM_NAME,		
						        MB.CONS_ITEM_ID,
						       	MAX(MB.PROD_VER),    
						        MB.PROD_ITEM_ID,      
						        MB.CONS_QTY,
						        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
						        MB.CONS_QTY_UOM      
						FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
						WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
						AND		IM.ITEM_ID	= ITM.ITEM_CD
						AND		IM.ITYPE		= 'HAWA'	
						AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
						AND		IM.PR_FLAG = 'Y'
						GROUP 
						BY 		IM.ITEM_ID, 
								IM.ITEM_NAME,
						        MB.CONS_ITEM_ID,
						        MB.PROD_ITEM_ID,
						        MB.CONS_QTY,
						        MB.CONS_QTY_UOM, 
						        IM.QTY
						)T1,
						(
					    SELECT	DC.ITEM_ID,
		                        NVL(ROUND(SUM(DC.SALES_MEAN_1MON_TA),0),0) * 6	MON_1,
		                        NVL(ROUND(SUM(DC.SALES_MEAN_3MON_TA),0),0) * 6	MON_3,
		                        NVL(ROUND(((SUM(DC.SALES_MEAN_1MON_TA)+SUM(DC.SALES_MEAN_3MON_TA))/2) * 6,0),0)		MON_13	            
		                FROM    DC_DATAWAREHOUSE DC, ITEM_MST IM
		                WHERE	DC.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
		                AND		DC.ITEM_ID = IM.ITEM_ID  
                        AND		IM.ITEM_ID	IN  (
                						SELECT	DISTINCT MB.PROD_ITEM_ID
                                        FROM	MBOM MB, ITEM_MST IM
                                        WHERE	IM.ITEM_ID		=	MB.CONS_ITEM_ID
                                        AND		IM.PR_FLAG	= 'Y'
                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                						) 		                                  
		                GROUP
		                BY		DC.ITEM_ID              
						)T2
				WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
				GROUP
				BY		T1.CONS_ITEM_ID
				)S2
				WHERE	S1.ITEM_ID = S2.ITEM_ID (+)
            )THREE                
		WHERE 	IM.ITEM_ID		=	THREE.ITEM_ID(+)
		AND		IM.ITEM_ID		=	AM.ITEM_ID
		AND		IM.ITEM_ID		=	AG.ITEM_ID (+)
		AND		IM.ITEM_ID		=	BOM2.ITEM_ID(+)
		AND		IM.ITEM_ID		=	BOM.ITEM_ID(+)		
		AND		IM.SALES_CAT03	LIKE '%'||'$!{search_type}'||'%'
		AND		IM.PR_FLAG		=	'Y'
		AND		IM.ITYPE		=	'HAWA'
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'					
		)T1,
		/*TP_FLAG*/
		(
		SELECT  ITEM_ID,
                CASE
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}'),'MM') 		= IPGO_DATE THEN 0
                     WHEN ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}') + 7,'MM'),1) 	= IPGO_DATE THEN 1
                     WHEN ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}') + 7,'MM'),2) 	= IPGO_DATE THEN 2
                     WHEN ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}') + 7,'MM'),3) 	= IPGO_DATE THEN 3
                     WHEN ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}') + 7,'MM'),4) 	= IPGO_DATE THEN 4
                     WHEN ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}') + 7,'MM'),5) 	= IPGO_DATE THEN 5                                    
                     ELSE 0
                END  TP_FLAG
       FROM	(
			SELECT	ITEM_ID, 
					TRUNC(TO_DATE('$!{cnfm_date}') + LEAD_TIME,'MM') IPGO_DATE
			FROM	(
					SELECT	ITEM_ID,		
							NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
					FROM	ITEM_MST
					WHERE	ITYPE		= 'HAWA'	
                    AND		SELL_STOP_DATE &gt;= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
                    AND		PR_FLAG = 'Y'                   
					)
			)                        
		)T2
		WHERE	T1.ITEM_ID	= T2.ITEM_ID
		ORDER
		BY		T1.SALES_CAT05, T1.SALES_CAT03, T1.ITEM_ID, T1.GUBN_IDX
	</query>
	
	<!-- 수입상품 재고관리 팝업창  -->
	<query id="ip_01130_import_md_PlanAnalysis_list_pop" paging="false">
		SELECT  T1.GUBN,  
		     	T1.GUBN_IDX, 
		     	TO_NUMBER('')	AVG,	
        		ROUND(NVL(T3.WEEK_P30,0),0),
        		ROUND(NVL(T3.WEEK_P29,0),0),
        		ROUND(NVL(T3.WEEK_P28,0),0),
        		ROUND(NVL(T3.WEEK_P27,0),0),
        		ROUND(NVL(T3.WEEK_P26,0),0),
        		ROUND(NVL(T3.WEEK_P25,0),0),
        		ROUND(NVL(T3.WEEK_P24,0),0),
        		ROUND(NVL(T3.WEEK_P23,0),0),
        		ROUND(NVL(T3.WEEK_P22,0),0),
        		ROUND(NVL(T3.WEEK_P21,0),0),
        		ROUND(NVL(T3.WEEK_P20,0),0),
        		ROUND(NVL(T3.WEEK_P19,0),0),
        		ROUND(NVL(T3.WEEK_P18,0),0),
        		ROUND(NVL(T3.WEEK_P17,0),0),
        		ROUND(NVL(T3.WEEK_P16,0),0),
        		ROUND(NVL(T3.WEEK_P15,0),0),
        		ROUND(NVL(T3.WEEK_P14,0),0),
        		ROUND(NVL(T3.WEEK_P13,0),0),
        		ROUND(NVL(T3.WEEK_P12,0),0),
        		ROUND(NVL(T3.WEEK_P11,0),0),
        		ROUND(NVL(T3.WEEK_P10,0),0),
        		ROUND(NVL(T3.WEEK_P09,0),0),
        		ROUND(NVL(T3.WEEK_P08,0),0),
        		ROUND(NVL(T3.WEEK_P07,0),0),
        		ROUND(NVL(T3.WEEK_P06,0),0),
        		ROUND(NVL(T3.WEEK_P05,0),0),
        		ROUND(NVL(T3.WEEK_P04,0),0),
        		ROUND(NVL(T3.WEEK_P03,0),0),
        		ROUND(NVL(T3.WEEK_P02,0),0),
        		ROUND(NVL(T3.WEEK_P01,0),0),
        		NVL(T1.W,0),
        		NVL(T1.W_1,0),
        		NVL(T1.W_2,0),
        		NVL(T1.W_3,0),
        		NVL(T1.W_4,0),
        		NVL(T1.W_5,0),
        		NVL(T1.W_6,0),
        		NVL(T1.W_7,0),
        		NVL(T1.W_8,0),
        		NVL(T1.W_9,0),
        		NVL(T1.W_10,0),
        		NVL(T1.W_11,0),
        		NVL(T1.W_12,0),
        		NVL(T1.W_13,0),
        		NVL(T1.W_14,0),
        		NVL(T1.W_15,0),
        		NVL(T1.W_16,0),
        		NVL(T1.W_17,0),
        		NVL(T1.W_18,0),
        		NVL(T1.W_19,0),
        		NVL(T1.W_20,0),
        		NVL(T1.W_21,0),
        		NVL(T1.W_22,0),
        		NVL(T1.W_23,0),
        		NVL(T1.W_24,0),
        		NVL(T1.W_25,0),
        		NVL(T1.W_26,0),
        		NVL(T1.W_27,0),
        		NVL(T1.W_28,0),
        		NVL(T1.W_29,0),
        		NVL(T1.W_30,0),        		
        		T2.TP_FLAG        		
        FROM
		(
		SELECT 	F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02) SALES_CAT02,
				IM.ITEM_ID,
        		IM.ITEM_NAME,        		
        		'기초재고'	GUBN,
        		1			GUBN_IDX,        		
        		DC2.W   + NVL(BOM2.W,0)		W,
        		0			W_1,
        		0			W_2,
        		0			W_3,
        		0			W_4,
        		0			W_5,
        		0			W_6,
        		0			W_7,
        		0			W_8,
        		0			W_9,
        		0			W_10,
        		0			W_11,
        		0			W_12,
        		0			W_13,
        		0			W_14,
        		0			W_15,
        		0			W_16,
        		0			W_17,
        		0			W_18,
        		0			W_19,
        		0			W_20,
        		0			W_21,
        		0			W_22,
        		0			W_23,
        		0			W_24,
        		0			W_25,
        		0			W_26,
        		0			W_27,
        		0			W_28,
        		0			W_29,
        		0			W_30        		        		
		FROM	ITEM_MST IM,				
        		(
                SELECT	ITEM_ID,
            			MAX(W)		W,
						MAX(M_01)	P_01, 
        				MAX(M_02)	P_02,
        				MAX(M_03)	P_03,
        				MAX(M_04)	P_04,
        				MAX(M_05)	P_05
                FROM	(
                		SELECT	ITEM_ID,
        						DECODE(YYYYMMDD,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),			   BASE_STOCK,0) W,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_01,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_02,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_03,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_04,
                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_05
                        FROM	(     
                        		SELECT	DC.CNFM_DATE	YYYYMMDD,
                						DC.ITEM_ID,
                						SUM(DC.BASE_STOCK) BASE_STOCK
                				FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM
                				WHERE 	DC.ITEM_ID = IM.ITEM_ID
                				AND	DC.CNFM_DATE IN(
                					 				TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD')
                                     				)                                     
                				AND		IM.ITEM_ID = '$!{item_id}'
                				GROUP
                				BY		DC.CNFM_DATE,DC.ITEM_ID
                				--HAVING	SUM(DC.BASE_STOCK) > 0
                				)
               				)
                GROUP BY ITEM_ID
                )DC2,
                 /* M-5,4,3,2,1,W 전용 BOM */
               (                
                SELECT	ITEM_ID,
                		SUM(W)		W,
                        SUM(P_01)	P_01,
                        SUM(P_02)	P_02,
                        SUM(P_03)	P_03,
                        SUM(P_04)	P_04,
                        SUM(P_05)	P_05
                FROM	(
		                SELECT	ITEM_ID,
		                		PROD_ITEM_ID,
		            			ROUND(MAX(W),0)		W,
								ROUND(MAX(M_01),0)	P_01, 
		        				ROUND(MAX(M_02),0)	P_02,
		        				ROUND(MAX(M_03),0)	P_03,
		        				ROUND(MAX(M_04),0)	P_04,
		        				ROUND(MAX(M_05),0)	P_05
		                FROM	(
		                		SELECT	ITEM_ID,
		                        		PROD_ITEM_ID,
		        						DECODE(YYYYMMDD,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),			   BASE_STOCK,0) W,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_01,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_02,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_03,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_04,
		                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_05
		                        FROM	(     
		                        		SELECT	DC.CNFM_DATE	YYYYMMDD,                						
		                                        BOM.CONS_ITEM_ID	ITEM_ID, 
		                                        BOM.PROD_ITEM_ID,
		                						SUM(DC.BASE_STOCK) * BOM.QTY  BASE_STOCK
		                				FROM	DC_DATAWAREHOUSE DC,
		                                		(
		                                        SELECT	MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                                                MAX(MB.PROD_VER) PROD_VER
		                                        FROM	MBOM MB, ITEM_MST IM
		                                        WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID
		                                        AND		IM.ITEM_ID = '$!{item_id}'
		                                        AND		IM.PR_FLAG ='Y'
		                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
		                                        GROUP
		                                        BY		MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                MB.CONS_QTY,
		                                                MB.CONS_QTY_UOM,
		                                                IM.QTY
		                                        )BOM
		                				WHERE 	DC.ITEM_ID = BOM.PROD_ITEM_ID
		                				AND		DC.CNFM_DATE IN(
		                					 				TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),
		                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
		                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD')
		                                     				)                                     
		                				GROUP
		                				BY		DC.CNFM_DATE,
		                                		DC.ITEM_ID,
		                                        BOM.QTY,
		                                        BOM.CONS_ITEM_ID,
		                                        BOM.PROD_ITEM_ID                                                   				
		                				)
		               			)
		                GROUP 
		                BY 		ITEM_ID,
		                 		PROD_ITEM_ID
		                )
		        GROUP 
		        BY 		ITEM_ID        
               	)BOM2               
		WHERE 	DC2.ITEM_ID		= 	IM.ITEM_ID
		AND		DC2.ITEM_ID		=	BOM2.ITEM_ID(+)
		AND		IM.ITEM_ID = '$!{item_id}'	
		UNION ALL
		SELECT	F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02) SALES_CAT02,
				IM.ITEM_ID,
	    		IM.ITEM_NAME,
				'입고량'		GUBN,
	    		2			GUBN_IDX,        		
				MD.WEEK,
		        MD.WEEK_01,
				MD.WEEK_02,
				MD.WEEK_03,
				MD.WEEK_04,
				MD.WEEK_05,
				MD.WEEK_06,
				MD.WEEK_07,
				MD.WEEK_08,
				MD.WEEK_09,
				MD.WEEK_10,
				MD.WEEK_11,
				MD.WEEK_12,
				MD.WEEK_13,
				MD.WEEK_14,
				MD.WEEK_15,
				MD.WEEK_16,
				MD.WEEK_17,
				MD.WEEK_18,
				MD.WEEK_19,
				MD.WEEK_20,
				MD.WEEK_21,
				MD.WEEK_22,
				MD.WEEK_23,
				MD.WEEK_24,
				MD.WEEK_25,
				MD.WEEK_26,
				MD.WEEK_27,
				MD.WEEK_28,
				MD.WEEK_29,
				MD.WEEK_30				      
        FROM	ITEM_MST IM, IMPORT_MD_EXPECT MD		
		WHERE	IM.ITEM_ID = '$!{item_id}'
		AND		IM.ITEM_ID = MD.ITEM_ID
		AND		MD.VERSION = '$!{cnfm_date}'
		AND		MD.GUBN	   = '2'		
		UNION ALL
		#if("$!{checked_button}" == "")
		 SELECT	F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02) SALES_CAT02,
				IM.ITEM_ID,
	    		IM.ITEM_NAME,
				'사용자 예측'		GUBN,
	    		3				GUBN_IDX,        		
				MD.WEEK,
		        MD.WEEK_01,
				MD.WEEK_02,
				MD.WEEK_03,
				MD.WEEK_04,
				MD.WEEK_05,
				MD.WEEK_06,
				MD.WEEK_07,
				MD.WEEK_08,
				MD.WEEK_09,
				MD.WEEK_10,
				MD.WEEK_11,
				MD.WEEK_12,
				MD.WEEK_13,
				MD.WEEK_14,
				MD.WEEK_15,
				MD.WEEK_16,
				MD.WEEK_17,
				MD.WEEK_18,
				MD.WEEK_19,
				MD.WEEK_20,
				MD.WEEK_21,
				MD.WEEK_22,
				MD.WEEK_23,
				MD.WEEK_24,
				MD.WEEK_25,
				MD.WEEK_26,
				MD.WEEK_27,
				MD.WEEK_28,
				MD.WEEK_29,
				MD.WEEK_30				      
        FROM	ITEM_MST IM, IMPORT_MD_EXPECT MD		
		WHERE	IM.ITEM_ID = '$!{item_id}'
		AND		IM.ITEM_ID = MD.ITEM_ID
		AND		MD.VERSION = '$!{cnfm_date}'
		AND		MD.GUBN	   = '1'
		#elseif("$!{checked_button}" == "Y_1") 
		SELECT	F_GET_CODE_NAME('SALES_CAT2', T2.SALES_CAT02) SALES_CAT02,
				T2.ITEM_ID,
        		T2.ITEM_NAME,
				'사용자 예측'		GUBN,
        		3				GUBN_IDX,  
        		#if("$!{no_flag}" == "NEW") 
        		ROUND(DECODE((NVL(MAX(T1.ONE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),0,
        		(TO_NUMBER('$!{three_mon}')/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),
	        	(NVL(MAX(T1.ONE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1))
                ) * (1+(NVL('$!{simul_data}',0)/100)),0)																						ONE_W,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W1),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W1),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W1,
				ROUND(DECODE(NVL(MAX(T1.ONE_W2),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W2),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W2,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W3),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W3),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W3,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W4),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W4),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W4,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W5),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W5),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W5,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W6),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W6),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W6,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W7),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W7),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W7,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W8),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W8),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W8,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W9),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W9),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W9,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W10),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W10),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W10,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W11),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W11),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W11,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W12),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W12),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W12,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W13),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W13),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W13,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W14),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W14),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W14,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W15),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W15),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W15,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W16),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W16),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W16,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W17),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W17),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W17,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W18),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W18),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W18,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W19),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W19),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W19,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W20),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W20),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W20,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W21),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W21),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W21,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W22),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W22),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W22,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W23),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W23),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W23,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W24),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W24),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W24,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W25),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W25),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W25,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W26),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W26),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W26,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W27),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W27),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W27,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W28),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W28),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W28,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W29),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W29),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W29,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W30),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W30),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W30
		        #else      		
				ROUND((((NVL(MAX(T1.ONE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)))
				*	(1+(	NVL('$!{simul_data}',0)	/100))),0)		ONE_W,
		        ROUND(NVL(MAX(T1.ONE_W1),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W1,
				ROUND(NVL(MAX(T1.ONE_W2),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W2,
		        ROUND(NVL(MAX(T1.ONE_W3),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W3,
		        ROUND(NVL(MAX(T1.ONE_W4),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W4,
		        ROUND(NVL(MAX(T1.ONE_W5),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W5,
		        ROUND(NVL(MAX(T1.ONE_W6),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W6,
		        ROUND(NVL(MAX(T1.ONE_W7),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W7,
		        ROUND(NVL(MAX(T1.ONE_W8),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W8,
		        ROUND(NVL(MAX(T1.ONE_W9),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W9,
		        ROUND(NVL(MAX(T1.ONE_W10),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W10,
		        ROUND(NVL(MAX(T1.ONE_W11),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W11,
		        ROUND(NVL(MAX(T1.ONE_W12),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W12,
		        ROUND(NVL(MAX(T1.ONE_W13),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W13,
		        ROUND(NVL(MAX(T1.ONE_W14),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W14,
		        ROUND(NVL(MAX(T1.ONE_W15),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W15,
		        ROUND(NVL(MAX(T1.ONE_W16),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W16,
		        ROUND(NVL(MAX(T1.ONE_W17),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W17,
		        ROUND(NVL(MAX(T1.ONE_W18),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W18,
		        ROUND(NVL(MAX(T1.ONE_W19),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W19,
		        ROUND(NVL(MAX(T1.ONE_W20),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W20,
		        ROUND(NVL(MAX(T1.ONE_W21),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W21,
		        ROUND(NVL(MAX(T1.ONE_W22),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W22,
		        ROUND(NVL(MAX(T1.ONE_W23),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W23,
		        ROUND(NVL(MAX(T1.ONE_W24),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W24,
		        ROUND(NVL(MAX(T1.ONE_W25),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W25,
		        ROUND(NVL(MAX(T1.ONE_W26),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W26,
		        ROUND(NVL(MAX(T1.ONE_W27),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W27,
		        ROUND(NVL(MAX(T1.ONE_W28),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W28,
		        ROUND(NVL(MAX(T1.ONE_W29),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W29,
		        ROUND(NVL(MAX(T1.ONE_W30),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W30
		        #end
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,
		                DECODE(SALE_DATE,ONE,QTY,0)			ONE_W,
		                DECODE(SALE_DATE,ONE +7,QTY,0)		ONE_W1, 
		                DECODE(SALE_DATE,ONE +14,QTY,0)		ONE_W2, 
		                DECODE(SALE_DATE,ONE +21,QTY,0)		ONE_W3, 
		                DECODE(SALE_DATE,ONE +28,QTY,0)		ONE_W4, 
		                DECODE(SALE_DATE,ONE +35,QTY,0)		ONE_W5, 
		                DECODE(SALE_DATE,ONE +42,QTY,0)		ONE_W6, 
		                DECODE(SALE_DATE,ONE +49,QTY,0)		ONE_W7, 
		                DECODE(SALE_DATE,ONE +56,QTY,0)		ONE_W8, 
		                DECODE(SALE_DATE,ONE +63,QTY,0)		ONE_W9,
		                DECODE(SALE_DATE,ONE +70,QTY,0)		ONE_W10,
		                DECODE(SALE_DATE,ONE +77,QTY,0)		ONE_W11, 
		                DECODE(SALE_DATE,ONE +84,QTY,0)		ONE_W12, 
		                DECODE(SALE_DATE,ONE +91,QTY,0)		ONE_W13, 
		                DECODE(SALE_DATE,ONE +98,QTY,0)		ONE_W14, 
		                DECODE(SALE_DATE,ONE +105,QTY,0)	ONE_W15, 
		                DECODE(SALE_DATE,ONE +112,QTY,0)	ONE_W16, 
		                DECODE(SALE_DATE,ONE +119,QTY,0)	ONE_W17, 
		                DECODE(SALE_DATE,ONE +126,QTY,0)	ONE_W18, 
		                DECODE(SALE_DATE,ONE +133,QTY,0)	ONE_W19,
		                DECODE(SALE_DATE,ONE +140,QTY,0)	ONE_W20, 
		                DECODE(SALE_DATE,ONE +147,QTY,0)	ONE_W21, 
		                DECODE(SALE_DATE,ONE +154,QTY,0)	ONE_W22, 
		                DECODE(SALE_DATE,ONE +161,QTY,0)	ONE_W23, 
		                DECODE(SALE_DATE,ONE +168,QTY,0)	ONE_W24, 
		                DECODE(SALE_DATE,ONE +175,QTY,0)	ONE_W25, 
		                DECODE(SALE_DATE,ONE +182,QTY,0)	ONE_W26, 
		                DECODE(SALE_DATE,ONE +189,QTY,0)	ONE_W27, 
		                DECODE(SALE_DATE,ONE +196,QTY,0)	ONE_W28, 
		                DECODE(SALE_DATE,ONE +203,QTY,0)	ONE_W29,
		                DECODE(SALE_DATE,ONE +210,QTY,0)	ONE_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        			
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.PR_FLAG ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        	GROUP 
	                        	BY 		SALE_DATE,
	                                	ITEM_ID,
	                                	YYYY,
	                                	WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
		          				FROM	CAL_MST
		     					WHERE 	WEEK_NO = (
		                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        				  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
		                                          FROM		CAL_MST
		                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
		                                          )
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                )T1, ITEM_MST T2              
        WHERE	T1.ITEM_ID	= T2.ITEM_ID		
		AND		T2.ITEM_ID = '$!{item_id}' 
		GROUP 
		BY 		T2.ITEM_ID, T2.ITEM_NAME,T2.SALES_CAT02
		#elseif("$!{checked_button}" == "Y_2")
		SELECT	F_GET_CODE_NAME('SALES_CAT2', T2.SALES_CAT02) SALES_CAT02,
				T2.ITEM_ID,
        		T2.ITEM_NAME,
				'사용자 예측'		GUBN,
        		3				GUBN_IDX,
        		ROUND((((NVL(MAX(T1.TWO_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)))
				*	(1+(	NVL('$!{simul_data}',0)	/100))),0)						TWO_W,
		        ROUND(NVL(MAX(T1.TWO_W1),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W1,
				ROUND(NVL(MAX(T1.TWO_W2),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W2,
		        ROUND(NVL(MAX(T1.TWO_W3),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W3,
		        ROUND(NVL(MAX(T1.TWO_W4),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W4,
		        ROUND(NVL(MAX(T1.TWO_W5),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W5,
		        ROUND(NVL(MAX(T1.TWO_W6),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W6,
		        ROUND(NVL(MAX(T1.TWO_W7),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W7,
		        ROUND(NVL(MAX(T1.TWO_W8),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W8,
		        ROUND(NVL(MAX(T1.TWO_W9),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W9,
		        ROUND(NVL(MAX(T1.TWO_W10),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W10,
		        ROUND(NVL(MAX(T1.TWO_W11),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W11,
		        ROUND(NVL(MAX(T1.TWO_W12),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W12,
		        ROUND(NVL(MAX(T1.TWO_W13),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W13,
		        ROUND(NVL(MAX(T1.TWO_W14),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W14,
		        ROUND(NVL(MAX(T1.TWO_W15),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W15,
		        ROUND(NVL(MAX(T1.TWO_W16),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W16,
		        ROUND(NVL(MAX(T1.TWO_W17),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W17,
		        ROUND(NVL(MAX(T1.TWO_W18),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W18,
		        ROUND(NVL(MAX(T1.TWO_W19),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W19,
		        ROUND(NVL(MAX(T1.TWO_W20),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W20,
		        ROUND(NVL(MAX(T1.TWO_W21),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W21,
		        ROUND(NVL(MAX(T1.TWO_W22),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W22,
		        ROUND(NVL(MAX(T1.TWO_W23),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W23,
		        ROUND(NVL(MAX(T1.TWO_W24),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W24,
		        ROUND(NVL(MAX(T1.TWO_W25),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W25,
		        ROUND(NVL(MAX(T1.TWO_W26),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W26,
		        ROUND(NVL(MAX(T1.TWO_W27),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W27,
		        ROUND(NVL(MAX(T1.TWO_W28),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W28,
		        ROUND(NVL(MAX(T1.TWO_W29),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W29,
		        ROUND(NVL(MAX(T1.TWO_W30),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W30
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,
		                DECODE(SALE_DATE,TWO,QTY,0)			TWO_W,
		                DECODE(SALE_DATE,TWO +7,QTY,0)		TWO_W1, 
		                DECODE(SALE_DATE,TWO +14,QTY,0)		TWO_W2, 
		                DECODE(SALE_DATE,TWO +21,QTY,0)		TWO_W3, 
		                DECODE(SALE_DATE,TWO +28,QTY,0)		TWO_W4, 
		                DECODE(SALE_DATE,TWO +35,QTY,0)		TWO_W5, 
		                DECODE(SALE_DATE,TWO +42,QTY,0)		TWO_W6, 
		                DECODE(SALE_DATE,TWO +49,QTY,0)		TWO_W7, 
		                DECODE(SALE_DATE,TWO +56,QTY,0)		TWO_W8, 
		                DECODE(SALE_DATE,TWO +63,QTY,0)		TWO_W9,
		                DECODE(SALE_DATE,TWO +70,QTY,0)		TWO_W10,
		                DECODE(SALE_DATE,TWO +77,QTY,0)		TWO_W11, 
		                DECODE(SALE_DATE,TWO +84,QTY,0)		TWO_W12, 
		                DECODE(SALE_DATE,TWO +91,QTY,0)		TWO_W13, 
		                DECODE(SALE_DATE,TWO +98,QTY,0)		TWO_W14, 
		                DECODE(SALE_DATE,TWO +105,QTY,0)	TWO_W15, 
		                DECODE(SALE_DATE,TWO +112,QTY,0)	TWO_W16, 
		                DECODE(SALE_DATE,TWO +119,QTY,0)	TWO_W17, 
		                DECODE(SALE_DATE,TWO +126,QTY,0)	TWO_W18, 
		                DECODE(SALE_DATE,TWO +133,QTY,0)	TWO_W19,
		                DECODE(SALE_DATE,TWO +140,QTY,0)	TWO_W20, 
		                DECODE(SALE_DATE,TWO +147,QTY,0)	TWO_W21, 
		                DECODE(SALE_DATE,TWO +154,QTY,0)	TWO_W22, 
		                DECODE(SALE_DATE,TWO +161,QTY,0)	TWO_W23, 
		                DECODE(SALE_DATE,TWO +168,QTY,0)	TWO_W24, 
		                DECODE(SALE_DATE,TWO +175,QTY,0)	TWO_W25, 
		                DECODE(SALE_DATE,TWO +182,QTY,0)	TWO_W26, 
		                DECODE(SALE_DATE,TWO +189,QTY,0)	TWO_W27, 
		                DECODE(SALE_DATE,TWO +196,QTY,0)	TWO_W28, 
		                DECODE(SALE_DATE,TWO +203,QTY,0)	TWO_W29,
		                DECODE(SALE_DATE,TWO +210,QTY,0)	TWO_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                               
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        			
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                               
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.PR_FLAG ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        	GROUP 
	                        	BY 		SALE_DATE,
	                                	ITEM_ID,
	                                	YYYY,
	                                	WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
		          				FROM	CAL_MST
		     					WHERE 	WEEK_NO = (
		                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        				  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
		                                          FROM		CAL_MST
		                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
		                                          )
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     						)S2
                    	)                    
                )T1, ITEM_MST T2                
        WHERE	T1.ITEM_ID	= T2.ITEM_ID	
		AND		T2.ITEM_ID = '$!{item_id}'
		GROUP 
		BY 		T2.ITEM_ID, T2.ITEM_NAME,T2.SALES_CAT02  
		#else
		SELECT	F_GET_CODE_NAME('SALES_CAT2', T2.SALES_CAT02) SALES_CAT02,
				T2.ITEM_ID,
        		T2.ITEM_NAME,
				'사용자 예측'		GUBN,
        		3				GUBN_IDX,
        		ROUND((((NVL(MAX(T1.THREE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)))
				*	(1+(	NVL('$!{simul_data}',0)	/100))),0)						THREE_W,
		        ROUND(NVL(MAX(T1.THREE_W1),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W1,
				ROUND(NVL(MAX(T1.THREE_W2),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W2,
		        ROUND(NVL(MAX(T1.THREE_W3),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W3,
		        ROUND(NVL(MAX(T1.THREE_W4),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W4,
		        ROUND(NVL(MAX(T1.THREE_W5),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W5,
		        ROUND(NVL(MAX(T1.THREE_W6),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W6,
		        ROUND(NVL(MAX(T1.THREE_W7),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W7,
		        ROUND(NVL(MAX(T1.THREE_W8),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W8,
		        ROUND(NVL(MAX(T1.THREE_W9),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W9,
		        ROUND(NVL(MAX(T1.THREE_W10),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W10,
		        ROUND(NVL(MAX(T1.THREE_W11),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W11,
		        ROUND(NVL(MAX(T1.THREE_W12),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W12,
		        ROUND(NVL(MAX(T1.THREE_W13),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W13,
		        ROUND(NVL(MAX(T1.THREE_W14),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W14,
		        ROUND(NVL(MAX(T1.THREE_W15),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W15,
		        ROUND(NVL(MAX(T1.THREE_W16),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W16,
		        ROUND(NVL(MAX(T1.THREE_W17),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W17,
		        ROUND(NVL(MAX(T1.THREE_W18),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W18,
		        ROUND(NVL(MAX(T1.THREE_W19),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W19,
		        ROUND(NVL(MAX(T1.THREE_W20),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W20,
		        ROUND(NVL(MAX(T1.THREE_W21),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W21,
		        ROUND(NVL(MAX(T1.THREE_W22),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W22,
		        ROUND(NVL(MAX(T1.THREE_W23),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W23,
		        ROUND(NVL(MAX(T1.THREE_W24),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W24,
		        ROUND(NVL(MAX(T1.THREE_W25),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W25,
		        ROUND(NVL(MAX(T1.THREE_W26),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W26,
		        ROUND(NVL(MAX(T1.THREE_W27),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W27,
		        ROUND(NVL(MAX(T1.THREE_W28),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W28,
		        ROUND(NVL(MAX(T1.THREE_W29),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W29,
		        ROUND(NVL(MAX(T1.THREE_W30),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W30
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,
		                DECODE(SALE_DATE,THREE,QTY,0)		THREE_W,
		                DECODE(SALE_DATE,THREE +7,QTY,0)	THREE_W1, 
		                DECODE(SALE_DATE,THREE +14,QTY,0)	THREE_W2, 
		                DECODE(SALE_DATE,THREE +21,QTY,0)	THREE_W3, 
		                DECODE(SALE_DATE,THREE +28,QTY,0)	THREE_W4, 
		                DECODE(SALE_DATE,THREE +35,QTY,0)	THREE_W5, 
		                DECODE(SALE_DATE,THREE +42,QTY,0)	THREE_W6, 
		                DECODE(SALE_DATE,THREE +49,QTY,0)	THREE_W7, 
		                DECODE(SALE_DATE,THREE +56,QTY,0)	THREE_W8, 
		                DECODE(SALE_DATE,THREE +63,QTY,0)	THREE_W9,
		                DECODE(SALE_DATE,THREE +70,QTY,0)	THREE_W10,
		                DECODE(SALE_DATE,THREE +77,QTY,0)	THREE_W11, 
		                DECODE(SALE_DATE,THREE +84,QTY,0)	THREE_W12, 
		                DECODE(SALE_DATE,THREE +91,QTY,0)	THREE_W13, 
		                DECODE(SALE_DATE,THREE +98,QTY,0)	THREE_W14, 
		                DECODE(SALE_DATE,THREE +105,QTY,0)	THREE_W15, 
		                DECODE(SALE_DATE,THREE +112,QTY,0)	THREE_W16, 
		                DECODE(SALE_DATE,THREE +119,QTY,0)	THREE_W17, 
		                DECODE(SALE_DATE,THREE +126,QTY,0)	THREE_W18, 
		                DECODE(SALE_DATE,THREE +133,QTY,0)	THREE_W19,
		                DECODE(SALE_DATE,THREE +140,QTY,0)	THREE_W20, 
		                DECODE(SALE_DATE,THREE +147,QTY,0)	THREE_W21, 
		                DECODE(SALE_DATE,THREE +154,QTY,0)	THREE_W22, 
		                DECODE(SALE_DATE,THREE +161,QTY,0)	THREE_W23, 
		                DECODE(SALE_DATE,THREE +168,QTY,0)	THREE_W24, 
		                DECODE(SALE_DATE,THREE +175,QTY,0)	THREE_W25, 
		                DECODE(SALE_DATE,THREE +182,QTY,0)	THREE_W26, 
		                DECODE(SALE_DATE,THREE +189,QTY,0)	THREE_W27, 
		                DECODE(SALE_DATE,THREE +196,QTY,0)	THREE_W28, 
		                DECODE(SALE_DATE,THREE +203,QTY,0)	THREE_W29,
		                DECODE(SALE_DATE,THREE +210,QTY,0)	THREE_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        			
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.PR_FLAG ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        	GROUP 
	                        	BY 		SALE_DATE,
	                                	ITEM_ID,
	                                	YYYY,
	                                	WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
		          				FROM	CAL_MST
		     					WHERE 	WEEK_NO = (
		                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        				  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
		                                          FROM		CAL_MST
		                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
		                                          )
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                )T1, ITEM_MST T2                
        WHERE	T1.ITEM_ID	= T2.ITEM_ID		
		AND		T2.ITEM_ID = '$!{item_id}'
		GROUP 
		BY 		T2.ITEM_ID, T2.ITEM_NAME,T2.SALES_CAT02  
		#end
		)T1,
		/*TP_FLAG*/
		(
		SELECT  ITEM_ID,
                CASE
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') 		= IPGO_DATE THEN 0
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 7,'IW') 	= IPGO_DATE THEN 1
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 14,'IW') = IPGO_DATE THEN 2
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 21,'IW') = IPGO_DATE THEN 3
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 28,'IW') = IPGO_DATE THEN 4
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 35,'IW') = IPGO_DATE THEN 5
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 42,'IW') = IPGO_DATE THEN 6
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 49,'IW') = IPGO_DATE THEN 7
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 56,'IW') = IPGO_DATE THEN 8
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 63,'IW') = IPGO_DATE THEN 9
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 70,'IW') = IPGO_DATE THEN 10
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 77,'IW') = IPGO_DATE THEN 11
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 84,'IW') = IPGO_DATE THEN 12
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 91,'IW') = IPGO_DATE THEN 13
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 98,'IW') = IPGO_DATE THEN 14 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 105,'IW') = IPGO_DATE THEN 15 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 112,'IW') = IPGO_DATE THEN 16 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 119,'IW') = IPGO_DATE THEN 17  
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 126,'IW') = IPGO_DATE THEN 18 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 133,'IW') = IPGO_DATE THEN 19 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 140,'IW') = IPGO_DATE THEN 20  
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 147,'IW') = IPGO_DATE THEN 21 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 154,'IW') = IPGO_DATE THEN 22 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 161,'IW') = IPGO_DATE THEN 23
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 168,'IW') = IPGO_DATE THEN 24 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 175,'IW') = IPGO_DATE THEN 25
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 182,'IW') = IPGO_DATE THEN 26                  
                     ELSE 0
                END  TP_FLAG
       FROM	(
			SELECT	ITEM_ID, 
					TRUNC(TO_DATE('$!{cnfm_date}') + LEAD_TIME,'IW') IPGO_DATE
			FROM	(
					SELECT	ITEM_ID,		
							NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
					FROM	ITEM_MST
					--WHERE	NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) &gt; 0
					WHERE	ITYPE		= 'HAWA'	
                    AND		SELL_STOP_DATE &gt;= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
                    AND		PR_FLAG = 'Y'                   
					)
			)                        
		)T2,
		/*사용자 예측 과거30주*/
		(
		 SELECT	AG.ITEM_ID,
 				ROUND((AG.WEEK_P30 + NVL(BOM.BOM_P30,0)),0)		WEEK_P30,
        		ROUND((AG.WEEK_P29 + NVL(BOM.BOM_P29,0)),0)		WEEK_P29,
        		ROUND((AG.WEEK_P28 + NVL(BOM.BOM_P28,0)),0)		WEEK_P28,
        		ROUND((AG.WEEK_P27 + NVL(BOM.BOM_P27,0)),0)		WEEK_P27,
        		ROUND((AG.WEEK_P26 + NVL(BOM.BOM_P26,0)),0)		WEEK_P26,
        		ROUND((AG.WEEK_P25 + NVL(BOM.BOM_P25,0)),0)		WEEK_P25,
        		ROUND((AG.WEEK_P24 + NVL(BOM.BOM_P24,0)),0)		WEEK_P24,
        		ROUND((AG.WEEK_P23 + NVL(BOM.BOM_P23,0)),0)		WEEK_P23,
        		ROUND((AG.WEEK_P22 + NVL(BOM.BOM_P22,0)),0)		WEEK_P22,
        		ROUND((AG.WEEK_P21 + NVL(BOM.BOM_P21,0)),0)		WEEK_P21,
        		ROUND((AG.WEEK_P20 + NVL(BOM.BOM_P20,0)),0)		WEEK_P20,
        		ROUND((AG.WEEK_P19 + NVL(BOM.BOM_P19,0)),0)		WEEK_P19,
        		ROUND((AG.WEEK_P18 + NVL(BOM.BOM_P18,0)),0)		WEEK_P18,
        		ROUND((AG.WEEK_P17 + NVL(BOM.BOM_P17,0)),0)		WEEK_P17,
        		ROUND((AG.WEEK_P16 + NVL(BOM.BOM_P16,0)),0)		WEEK_P16,
        		ROUND((AG.WEEK_P15 + NVL(BOM.BOM_P15,0)),0)		WEEK_P15,
        		ROUND((AG.WEEK_P14 + NVL(BOM.BOM_P14,0)),0)		WEEK_P14,
        		ROUND((AG.WEEK_P13 + NVL(BOM.BOM_P13,0)),0)		WEEK_P13,
        		ROUND((AG.WEEK_P12 + NVL(BOM.BOM_P12,0)),0)		WEEK_P12,
        		ROUND((AG.WEEK_P11 + NVL(BOM.BOM_P11,0)),0)		WEEK_P11,
        		ROUND((AG.WEEK_P10 + NVL(BOM.BOM_P10,0)),0)		WEEK_P10,
        		ROUND((AG.WEEK_P09 + NVL(BOM.BOM_P09,0)),0)		WEEK_P09,
        		ROUND((AG.WEEK_P08 + NVL(BOM.BOM_P08,0)),0)		WEEK_P08,
        		ROUND((AG.WEEK_P07 + NVL(BOM.BOM_P07,0)),0)		WEEK_P07,
        		ROUND((AG.WEEK_P06 + NVL(BOM.BOM_P06,0)),0)		WEEK_P06,
        		ROUND((AG.WEEK_P05 + NVL(BOM.BOM_P05,0)),0)		WEEK_P05,
        		ROUND((AG.WEEK_P04 + NVL(BOM.BOM_P04,0)),0)		WEEK_P04,
        		ROUND((AG.WEEK_P03 + NVL(BOM.BOM_P03,0)),0)		WEEK_P03,
        		ROUND((AG.WEEK_P02 + NVL(BOM.BOM_P02,0)),0)		WEEK_P02,
        		ROUND((AG.WEEK_P01 + NVL(BOM.BOM_P01,0)),0)		WEEK_P01        	   	
 		FROM	(
		        SELECT  ITEM_ID,
		        		CNT,  
		                WEEK_P30,
		                WEEK_P29,
		                WEEK_P28,
		                WEEK_P27,
		                WEEK_P26,
		                WEEK_P25,
		                WEEK_P24,
		                WEEK_P23,
		                WEEK_P22,
		                WEEK_P21,
		                WEEK_P20,
		                WEEK_P19,
		                WEEK_P18,
		                WEEK_P17,
		                WEEK_P16,
		                WEEK_P15,
		                WEEK_P14,
		                WEEK_P13,
		                WEEK_P12,
		                WEEK_P11,
		                WEEK_P10,
		                WEEK_P09,
		                WEEK_P08,
		                WEEK_P07,
		                WEEK_P06,
		                WEEK_P05,
		                WEEK_P04,
		                WEEK_P03,
		                WEEK_P02,
		                WEEK_P01		                
		        FROM    SALES_WEEK_AGG
		        WHERE	GUBN = '1'
		        AND		VERSION = '$!{cnfm_date}'
		        AND		ITEM_ID = '$!{item_id}'
		        )AG,
		        (
				SELECT	T1.CONS_ITEM_ID				ITEM_ID,
						SUM(T2.WEEK_P30 *T1.QTY)	BOM_P30,
						SUM(T2.WEEK_P29 *T1.QTY)	BOM_P29,
						SUM(T2.WEEK_P28 *T1.QTY)	BOM_P28,
						SUM(T2.WEEK_P27 *T1.QTY)	BOM_P27,
						SUM(T2.WEEK_P26 *T1.QTY)	BOM_P26,
						SUM(T2.WEEK_P25 *T1.QTY)	BOM_P25,
						SUM(T2.WEEK_P24 *T1.QTY)	BOM_P24,
						SUM(T2.WEEK_P23 *T1.QTY)	BOM_P23,
						SUM(T2.WEEK_P22 *T1.QTY)	BOM_P22,
						SUM(T2.WEEK_P21 *T1.QTY)	BOM_P21,
						SUM(T2.WEEK_P20 *T1.QTY)	BOM_P20,
						SUM(T2.WEEK_P19 *T1.QTY)	BOM_P19,
						SUM(T2.WEEK_P18 *T1.QTY)	BOM_P18,
						SUM(T2.WEEK_P17 *T1.QTY)	BOM_P17,
						SUM(T2.WEEK_P16 *T1.QTY)	BOM_P16,
						SUM(T2.WEEK_P15 *T1.QTY)	BOM_P15,
						SUM(T2.WEEK_P14 *T1.QTY)	BOM_P14,
						SUM(T2.WEEK_P13 *T1.QTY)	BOM_P13,
						SUM(T2.WEEK_P12 *T1.QTY)	BOM_P12,
						SUM(T2.WEEK_P11 *T1.QTY)	BOM_P11,
						SUM(T2.WEEK_P10 *T1.QTY)	BOM_P10,
						SUM(T2.WEEK_P09 *T1.QTY)	BOM_P09,
						SUM(T2.WEEK_P08 *T1.QTY)	BOM_P08,
						SUM(T2.WEEK_P07 *T1.QTY)	BOM_P07,
						SUM(T2.WEEK_P06 *T1.QTY)	BOM_P06,
						SUM(T2.WEEK_P05 *T1.QTY)	BOM_P05,
						SUM(T2.WEEK_P04 *T1.QTY)	BOM_P04,
						SUM(T2.WEEK_P03 *T1.QTY)	BOM_P03,
						SUM(T2.WEEK_P02 *T1.QTY)	BOM_P02,
						SUM(T2.WEEK_P01 *T1.QTY)	BOM_P01						
				FROM
					(
					SELECT  IM.ITEM_ID, 
							IM.ITEM_NAME,		
					        MB.CONS_ITEM_ID,
					       	MAX(MB.PROD_VER),    
					        MB.PROD_ITEM_ID,      
					        MB.CONS_QTY,
					        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
					        MB.CONS_QTY_UOM      
					FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
					WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
					AND		IM.ITEM_ID	= ITM.ITEM_CD
					AND		IM.ITYPE		= 'HAWA'	
					AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
					AND		IM.PR_FLAG = 'Y'
					GROUP 
					BY 		IM.ITEM_ID, 
							IM.ITEM_NAME,
					        MB.CONS_ITEM_ID,
					        MB.PROD_ITEM_ID,
					        MB.CONS_QTY,
					        MB.CONS_QTY_UOM, 
					        IM.QTY
					)T1,
					(
					SELECT	ITEM_ID,
							WEEK_P30,
			                WEEK_P29,
			                WEEK_P28,
			                WEEK_P27,
			                WEEK_P26,
			                WEEK_P25,
			                WEEK_P24,
			                WEEK_P23,
			                WEEK_P22,
			                WEEK_P21,
			                WEEK_P20,
			                WEEK_P19,
			                WEEK_P18,
			                WEEK_P17,
			                WEEK_P16,
			                WEEK_P15,
			                WEEK_P14,
			                WEEK_P13,
			                WEEK_P12,
			                WEEK_P11,
			                WEEK_P10,
			                WEEK_P09,
			                WEEK_P08,
			                WEEK_P07,
			                WEEK_P06,
			                WEEK_P05,
			                WEEK_P04,
			                WEEK_P03,
			                WEEK_P02,
			                WEEK_P01			               
					FROM	SALES_WEEK_AGG
					WHERE	VERSION = '$!{cnfm_date}'
					AND		GUBN 	= '1'
					)T2
					WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
					GROUP	
					BY		T1.CONS_ITEM_ID	
				)BOM
		WHERE	AG.ITEM_ID = BOM.ITEM_ID (+)
		AND		AG.ITEM_ID = '$!{item_id}'
		)T3
		WHERE	T1.ITEM_ID	= T2.ITEM_ID(+)
		AND		T1.ITEM_ID  = T3.ITEM_ID(+)
		AND		T1.ITEM_ID = '$!{item_id}'		
		UNION ALL
        SELECT  S1.GUBN,
				S1.GUBN_IDX,
				ROUND((
                S1.THREE_W1  + S1.THREE_W2  + S1.THREE_W3  + S1.THREE_W4  + S1.THREE_W5  + S1.THREE_W6  + S1.THREE_W7  + S1.THREE_W8  + S1.THREE_W9  + S1.THREE_W10 +
                S1.THREE_W11 + S1.THREE_W12 + S1.THREE_W13 + S1.THREE_W14 + S1.THREE_W15 + S1.THREE_W16 + S1.THREE_W17 + S1.THREE_W18 + S1.THREE_W19 + S1.THREE_W20 +
                S1.THREE_W21 + S1.THREE_W22 + S1.THREE_W23 + S1.THREE_W24 + S1.THREE_W25 + S1.THREE_W26 + S1.THREE_W27 + S1.THREE_W28 + S1.THREE_W29 + S1.THREE_W30 + 
                ROUND(((S1.THREE_W/7) * (TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),0)
                )/31,0)	AVG,
		        S1.THREE_P30,
		        S1.THREE_P29,
		        S1.THREE_P28,
		        S1.THREE_P27,
		        S1.THREE_P26,
		        S1.THREE_P25,
		        S1.THREE_P24,
		        S1.THREE_P23,
		        S1.THREE_P22,
		        S1.THREE_P21,
		        S1.THREE_P20,
		        S1.THREE_P19,
		        S1.THREE_P18,
		        S1.THREE_P17,
		        S1.THREE_P16,
		        S1.THREE_P15,
		        S1.THREE_P14,
		        S1.THREE_P13,
		        S1.THREE_P12,
		        S1.THREE_P11,
		        S1.THREE_P10,
		        S1.THREE_P9,
		        S1.THREE_P8,
		        S1.THREE_P7,
		        S1.THREE_P6,
		        S1.THREE_P5,
		        S1.THREE_P4,
		        S1.THREE_P3,
		        S1.THREE_P2,
		        S1.THREE_P1,
		        ROUND(((S1.THREE_W/7) * (TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),0)	W,   
		        S1.THREE_W1,
		        S1.THREE_W2,
		        S1.THREE_W3,
		        S1.THREE_W4,
		        S1.THREE_W5,
		        S1.THREE_W6,
		        S1.THREE_W7,
		        S1.THREE_W8,
		        S1.THREE_W9,
		        S1.THREE_W10,
		        S1.THREE_W11,
		        S1.THREE_W12,
		        S1.THREE_W13,
		        S1.THREE_W14,
		        S1.THREE_W15,
		        S1.THREE_W16,
		        S1.THREE_W17,
		        S1.THREE_W18,
		        S1.THREE_W19,
		        S1.THREE_W20,
		        S1.THREE_W21,
		        S1.THREE_W22,
		        S1.THREE_W23,
		        S1.THREE_W24,
		        S1.THREE_W25,
		        S1.THREE_W26,
		        S1.THREE_W27,
		        S1.THREE_W28,
		        S1.THREE_W29,
		        S1.THREE_W30,
		        S2.TP_FLAG        
		FROM	(
				SELECT	'2013년도'	GUBN,
		        		6			 GUBN_IDX,
				    	ROUND(NVL(MAX(THREE_P30),0),0)	THREE_P30,
						ROUND(NVL(MAX(THREE_P29),0),0)	THREE_P29,
				        ROUND(NVL(MAX(THREE_P28),0),0)	THREE_P28,
				        ROUND(NVL(MAX(THREE_P27),0),0)	THREE_P27,
				        ROUND(NVL(MAX(THREE_P26),0),0)	THREE_P26,
				        ROUND(NVL(MAX(THREE_P25),0),0)	THREE_P25,
				        ROUND(NVL(MAX(THREE_P24),0),0)	THREE_P24,
				        ROUND(NVL(MAX(THREE_P23),0),0)	THREE_P23,
				        ROUND(NVL(MAX(THREE_P22),0),0)	THREE_P22,
				        ROUND(NVL(MAX(THREE_P21),0),0)	THREE_P21,
				        ROUND(NVL(MAX(THREE_P20),0),0)	THREE_P20,
				        ROUND(NVL(MAX(THREE_P19),0),0)	THREE_P19,
				        ROUND(NVL(MAX(THREE_P18),0),0)	THREE_P18,
				        ROUND(NVL(MAX(THREE_P17),0),0)	THREE_P17,
				        ROUND(NVL(MAX(THREE_P16),0),0)	THREE_P16,
				        ROUND(NVL(MAX(THREE_P15),0),0)	THREE_P15,
				        ROUND(NVL(MAX(THREE_P14),0),0)	THREE_P14,
				        ROUND(NVL(MAX(THREE_P13),0),0)	THREE_P13,
				        ROUND(NVL(MAX(THREE_P12),0),0)	THREE_P12,
				        ROUND(NVL(MAX(THREE_P11),0),0)	THREE_P11,
				        ROUND(NVL(MAX(THREE_P10),0),0)	THREE_P10,
				        ROUND(NVL(MAX(THREE_P9),0),0)	THREE_P9,
				        ROUND(NVL(MAX(THREE_P8),0),0)	THREE_P8,
				        ROUND(NVL(MAX(THREE_P7),0),0)	THREE_P7,
				        ROUND(NVL(MAX(THREE_P6),0),0)	THREE_P6,
				        ROUND(NVL(MAX(THREE_P5),0),0)	THREE_P5,
				        ROUND(NVL(MAX(THREE_P4),0),0)	THREE_P4,
				        ROUND(NVL(MAX(THREE_P3),0),0)	THREE_P3,
				        ROUND(NVL(MAX(THREE_P2),0),0)	THREE_P2,
				        ROUND(NVL(MAX(THREE_P1),0),0)	THREE_P1,
				        ROUND(NVL(MAX(THREE_W),0),0)	THREE_W,
				        ROUND(NVL(MAX(THREE_W1),0),0)	THREE_W1,
						ROUND(NVL(MAX(THREE_W2),0),0)	THREE_W2,
				        ROUND(NVL(MAX(THREE_W3),0),0)	THREE_W3,
				        ROUND(NVL(MAX(THREE_W4),0),0)	THREE_W4,
				        ROUND(NVL(MAX(THREE_W5),0),0)	THREE_W5,
				        ROUND(NVL(MAX(THREE_W6),0),0)	THREE_W6,
				        ROUND(NVL(MAX(THREE_W7),0),0)	THREE_W7,
				        ROUND(NVL(MAX(THREE_W8),0),0)	THREE_W8,
				        ROUND(NVL(MAX(THREE_W9),0),0)	THREE_W9,
				        ROUND(NVL(MAX(THREE_W10),0),0)	THREE_W10,
				        ROUND(NVL(MAX(THREE_W11),0),0)	THREE_W11,
				        ROUND(NVL(MAX(THREE_W12),0),0)	THREE_W12,
				        ROUND(NVL(MAX(THREE_W13),0),0)	THREE_W13,
				        ROUND(NVL(MAX(THREE_W14),0),0)	THREE_W14,
				        ROUND(NVL(MAX(THREE_W15),0),0)	THREE_W15,
				        ROUND(NVL(MAX(THREE_W16),0),0)	THREE_W16,
				        ROUND(NVL(MAX(THREE_W17),0),0)	THREE_W17,
				        ROUND(NVL(MAX(THREE_W18),0),0)	THREE_W18,
				        ROUND(NVL(MAX(THREE_W19),0),0)	THREE_W19,
				        ROUND(NVL(MAX(THREE_W20),0),0)	THREE_W20,
				        ROUND(NVL(MAX(THREE_W21),0),0)	THREE_W21,
				        ROUND(NVL(MAX(THREE_W22),0),0)	THREE_W22,
				        ROUND(NVL(MAX(THREE_W23),0),0)	THREE_W23,
				        ROUND(NVL(MAX(THREE_W24),0),0)	THREE_W24,
				        ROUND(NVL(MAX(THREE_W25),0),0)	THREE_W25,
				        ROUND(NVL(MAX(THREE_W26),0),0)	THREE_W26,
				        ROUND(NVL(MAX(THREE_W27),0),0)	THREE_W27,
				        ROUND(NVL(MAX(THREE_W28),0),0)	THREE_W28,
				        ROUND(NVL(MAX(THREE_W29),0),0)	THREE_W29,
				        ROUND(NVL(MAX(THREE_W30),0),0)	THREE_W30
        		FROM	(					
         				SELECT	YYYY,
								SALE_DATE,
								ITEM_ID,    
						        DECODE(SALE_DATE,THREE -7, QTY,0)	THREE_P1,
				                DECODE(SALE_DATE,THREE -14, QTY,0)	THREE_P2,
				                DECODE(SALE_DATE,THREE -21, QTY,0)	THREE_P3,
				                DECODE(SALE_DATE,THREE -28, QTY,0)	THREE_P4,
				                DECODE(SALE_DATE,THREE -35, QTY,0)	THREE_P5,
				                DECODE(SALE_DATE,THREE -42, QTY,0)	THREE_P6,
				                DECODE(SALE_DATE,THREE -49, QTY,0)	THREE_P7,
				                DECODE(SALE_DATE,THREE -56, QTY,0)	THREE_P8,
				                DECODE(SALE_DATE,THREE -63, QTY,0)	THREE_P9,
				                DECODE(SALE_DATE,THREE -70, QTY,0)	THREE_P10,
				                DECODE(SALE_DATE,THREE -77, QTY,0)	THREE_P11,
				                DECODE(SALE_DATE,THREE -84, QTY,0)	THREE_P12,
				                DECODE(SALE_DATE,THREE -91, QTY,0)	THREE_P13,
				                DECODE(SALE_DATE,THREE -98, QTY,0)	THREE_P14,
				                DECODE(SALE_DATE,THREE -105, QTY,0)	THREE_P15,
				                DECODE(SALE_DATE,THREE -112, QTY,0)	THREE_P16,
				                DECODE(SALE_DATE,THREE -119, QTY,0)	THREE_P17,
				                DECODE(SALE_DATE,THREE -126, QTY,0)	THREE_P18,
				                DECODE(SALE_DATE,THREE -133, QTY,0)	THREE_P19,
				                DECODE(SALE_DATE,THREE -140, QTY,0)	THREE_P20,
				                DECODE(SALE_DATE,THREE -147, QTY,0)	THREE_P21,
				                DECODE(SALE_DATE,THREE -154, QTY,0)	THREE_P22,
				                DECODE(SALE_DATE,THREE -161, QTY,0)	THREE_P23,
				                DECODE(SALE_DATE,THREE -168, QTY,0)	THREE_P24,
				                DECODE(SALE_DATE,THREE -175, QTY,0)	THREE_P25,
				                DECODE(SALE_DATE,THREE -182, QTY,0)	THREE_P26,
				                DECODE(SALE_DATE,THREE -189, QTY,0)	THREE_P27,
				                DECODE(SALE_DATE,THREE -196, QTY,0)	THREE_P28,
				                DECODE(SALE_DATE,THREE -203, QTY,0)	THREE_P29,
				                DECODE(SALE_DATE,THREE -210, QTY,0)	THREE_P30,
				                DECODE(SALE_DATE,THREE,		 QTY,0)	THREE_W,
				                DECODE(SALE_DATE,THREE +7,QTY,0)	THREE_W1, 
				                DECODE(SALE_DATE,THREE +14,QTY,0)	THREE_W2, 
				                DECODE(SALE_DATE,THREE +21,QTY,0)	THREE_W3, 
				                DECODE(SALE_DATE,THREE +28,QTY,0)	THREE_W4, 
				                DECODE(SALE_DATE,THREE +35,QTY,0)	THREE_W5, 
				                DECODE(SALE_DATE,THREE +42,QTY,0)	THREE_W6, 
				                DECODE(SALE_DATE,THREE +49,QTY,0)	THREE_W7, 
				                DECODE(SALE_DATE,THREE +56,QTY,0)	THREE_W8, 
				                DECODE(SALE_DATE,THREE +63,QTY,0)	THREE_W9,
				                DECODE(SALE_DATE,THREE +70,QTY,0)	THREE_W10,
				                DECODE(SALE_DATE,THREE +77,QTY,0)	THREE_W11, 
				                DECODE(SALE_DATE,THREE +84,QTY,0)	THREE_W12, 
				                DECODE(SALE_DATE,THREE +91,QTY,0)	THREE_W13, 
				                DECODE(SALE_DATE,THREE +98,QTY,0)	THREE_W14, 
				                DECODE(SALE_DATE,THREE +105,QTY,0)	THREE_W15, 
				                DECODE(SALE_DATE,THREE +112,QTY,0)	THREE_W16, 
				                DECODE(SALE_DATE,THREE +119,QTY,0)	THREE_W17, 
				                DECODE(SALE_DATE,THREE +126,QTY,0)	THREE_W18, 
				                DECODE(SALE_DATE,THREE +133,QTY,0)	THREE_W19,
				                DECODE(SALE_DATE,THREE +140,QTY,0)	THREE_W20, 
				                DECODE(SALE_DATE,THREE +147,QTY,0)	THREE_W21, 
				                DECODE(SALE_DATE,THREE +154,QTY,0)	THREE_W22, 
				                DECODE(SALE_DATE,THREE +161,QTY,0)	THREE_W23, 
				                DECODE(SALE_DATE,THREE +168,QTY,0)	THREE_W24, 
				                DECODE(SALE_DATE,THREE +175,QTY,0)	THREE_W25, 
				                DECODE(SALE_DATE,THREE +182,QTY,0)	THREE_W26, 
				                DECODE(SALE_DATE,THREE +189,QTY,0)	THREE_W27, 
				                DECODE(SALE_DATE,THREE +196,QTY,0)	THREE_W28, 
				                DECODE(SALE_DATE,THREE +203,QTY,0)	THREE_W29,
				                DECODE(SALE_DATE,THREE +210,QTY,0)	THREE_W30
		        		FROM	(
                 				SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
			                    		S1.ITEM_ID,
								        S1.YYYY,	
								        S1.WEEK_NO,       
								        S1.QTY,
								        S2.THREE,
			                            S2.TWO,
			                            S2.ONE
								FROM	(
			                    	  	SELECT	SALE_DATE,
			                                    ITEM_ID,
			                                    YYYY,
			                                    WEEK_NO,
			                                    SUM(QTY) QTY
			                            FROM	(
                            					SELECT 	A.SALE_DATE,
											     		A.ITEM_ID,						                                
											            A.YYYY,
											            A.WEEK_NO,
											            A.QTY
					    						FROM	SALES_WEEK_3_YEAR A		        										
		     									WHERE	A.ITEM_ID	=	'$!{item_id}'
                        						UNION ALL
						                        SELECT 	A.SALE_DATE,
											     		B.ITEM_ID,
						                                A.YYYY,
											            A.WEEK_NO,           
											            A.QTY * B.QTY	QTY           
											     FROM	SALES_WEEK_3_YEAR A,
											        	(
											            SELECT	IM.ITEM_ID,
													            MB.PROD_ITEM_ID,
													            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
													            MAX(MB.PROD_VER) PROD_VER
													    FROM	MBOM MB, ITEM_MST IM
													    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
													    AND		IM.ITEM_ID = '$!{item_id}'
													    AND		IM.PR_FLAG ='Y'
													    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
													    GROUP
													    BY		IM.ITEM_ID,
													            MB.PROD_ITEM_ID,
													            MB.CONS_QTY,
													            MB.CONS_QTY_UOM,
													            IM.QTY
								            			)B  
     											WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
                        		GROUP 
                        		BY 		SALE_DATE,
		                                ITEM_ID,
		                                YYYY,
		                                WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
		          				FROM	CAL_MST
		     					WHERE 	WEEK_NO = (
		                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        				  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
		                                          FROM		CAL_MST
		                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
		                                          )
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                    )
		UNION ALL
		SELECT	'2014년도'	GUBN,
         		5			 GUBN_IDX,
		    	ROUND(NVL(MAX(TWO_P30),0),0)	TWO_P30,
				ROUND(NVL(MAX(TWO_P29),0),0)	TWO_P29,
		        ROUND(NVL(MAX(TWO_P28),0),0)	TWO_P28,
		        ROUND(NVL(MAX(TWO_P27),0),0)	TWO_P27,
		        ROUND(NVL(MAX(TWO_P26),0),0)	TWO_P26,
		        ROUND(NVL(MAX(TWO_P25),0),0)	TWO_P25,
		        ROUND(NVL(MAX(TWO_P24),0),0)	TWO_P24,
		        ROUND(NVL(MAX(TWO_P23),0),0)	TWO_P23,
		        ROUND(NVL(MAX(TWO_P22),0),0)	TWO_P22,
		        ROUND(NVL(MAX(TWO_P21),0),0)	TWO_P21,
		        ROUND(NVL(MAX(TWO_P20),0),0)	TWO_P20,
		        ROUND(NVL(MAX(TWO_P19),0),0)	TWO_P19,
		        ROUND(NVL(MAX(TWO_P18),0),0)	TWO_P18,
		        ROUND(NVL(MAX(TWO_P17),0),0)	TWO_P17,
		        ROUND(NVL(MAX(TWO_P16),0),0)	TWO_P16,
		        ROUND(NVL(MAX(TWO_P15),0),0)	TWO_P15,
		        ROUND(NVL(MAX(TWO_P14),0),0)	TWO_P14,
		        ROUND(NVL(MAX(TWO_P13),0),0)	TWO_P13,
		        ROUND(NVL(MAX(TWO_P12),0),0)	TWO_P12,
		        ROUND(NVL(MAX(TWO_P11),0),0)	TWO_P11,
		        ROUND(NVL(MAX(TWO_P10),0),0)	TWO_P10,
		        ROUND(NVL(MAX(TWO_P9),0),0)		TWO_P9,
		        ROUND(NVL(MAX(TWO_P8),0),0)		TWO_P8,
		        ROUND(NVL(MAX(TWO_P7),0),0)		TWO_P7,
		        ROUND(NVL(MAX(TWO_P6),0),0)		TWO_P6,
		        ROUND(NVL(MAX(TWO_P5),0),0)		TWO_P5,
		        ROUND(NVL(MAX(TWO_P4),0),0)		TWO_P4,
		        ROUND(NVL(MAX(TWO_P3),0),0)		TWO_P3,
		        ROUND(NVL(MAX(TWO_P2),0),0)		TWO_P2,
		        ROUND(NVL(MAX(TWO_P1),0),0)		TWO_P1,		        
		        ROUND(NVL(MAX(TWO_W),0),0)		TWO_W,
		        ROUND(NVL(MAX(TWO_W1),0),0)		TWO_W1,
				ROUND(NVL(MAX(TWO_W2),0),0)		TWO_W2,
		        ROUND(NVL(MAX(TWO_W3),0),0)		TWO_W3,
		        ROUND(NVL(MAX(TWO_W4),0),0)		TWO_W4,
		        ROUND(NVL(MAX(TWO_W5),0),0)		TWO_W5,
		        ROUND(NVL(MAX(TWO_W6),0),0)		TWO_W6,
		        ROUND(NVL(MAX(TWO_W7),0),0)		TWO_W7,
		        ROUND(NVL(MAX(TWO_W8),0),0)		TWO_W8,
		        ROUND(NVL(MAX(TWO_W9),0),0)		TWO_W9,
		        ROUND(NVL(MAX(TWO_W10),0),0)	TWO_W10,
		        ROUND(NVL(MAX(TWO_W11),0),0)	TWO_W11,
		        ROUND(NVL(MAX(TWO_W12),0),0)	TWO_W12,
		        ROUND(NVL(MAX(TWO_W13),0),0)	TWO_W13,
		        ROUND(NVL(MAX(TWO_W14),0),0)	TWO_W14,
		        ROUND(NVL(MAX(TWO_W15),0),0)	TWO_W15,
		        ROUND(NVL(MAX(TWO_W16),0),0)	TWO_W16,
		        ROUND(NVL(MAX(TWO_W17),0),0)	TWO_W17,
		        ROUND(NVL(MAX(TWO_W18),0),0)	TWO_W18,
		        ROUND(NVL(MAX(TWO_W19),0),0)	TWO_W19,
		        ROUND(NVL(MAX(TWO_W20),0),0)	TWO_W20,
		        ROUND(NVL(MAX(TWO_W21),0),0)	TWO_W21,
		        ROUND(NVL(MAX(TWO_W22),0),0)	TWO_W22,
		        ROUND(NVL(MAX(TWO_W23),0),0)	TWO_W23,
		        ROUND(NVL(MAX(TWO_W24),0),0)	TWO_W24,
		        ROUND(NVL(MAX(TWO_W25),0),0)	TWO_W25,
		        ROUND(NVL(MAX(TWO_W26),0),0)	TWO_W26,
		        ROUND(NVL(MAX(TWO_W27),0),0)	TWO_W27,
		        ROUND(NVL(MAX(TWO_W28),0),0)	TWO_W28,
		        ROUND(NVL(MAX(TWO_W29),0),0)	TWO_W29,
		        ROUND(NVL(MAX(TWO_W30),0),0)	TWO_W30
        FROM	(					
         		SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,    
				        DECODE(SALE_DATE,TWO -7, QTY,0)		TWO_P1,
		                DECODE(SALE_DATE,TWO -14, QTY,0)	TWO_P2,
		                DECODE(SALE_DATE,TWO -21, QTY,0)	TWO_P3,
		                DECODE(SALE_DATE,TWO -28, QTY,0)	TWO_P4,
		                DECODE(SALE_DATE,TWO -35, QTY,0)	TWO_P5,
		                DECODE(SALE_DATE,TWO -42, QTY,0)	TWO_P6,
		                DECODE(SALE_DATE,TWO -49, QTY,0)	TWO_P7,
		                DECODE(SALE_DATE,TWO -56, QTY,0)	TWO_P8,
		                DECODE(SALE_DATE,TWO -63, QTY,0)	TWO_P9,
		                DECODE(SALE_DATE,TWO -70, QTY,0)	TWO_P10,
		                DECODE(SALE_DATE,TWO -77, QTY,0)	TWO_P11,
		                DECODE(SALE_DATE,TWO -84, QTY,0)	TWO_P12,
		                DECODE(SALE_DATE,TWO -91, QTY,0)	TWO_P13,
		                DECODE(SALE_DATE,TWO -98, QTY,0)	TWO_P14,
		                DECODE(SALE_DATE,TWO -105, QTY,0)	TWO_P15,
		                DECODE(SALE_DATE,TWO -112, QTY,0)	TWO_P16,
		                DECODE(SALE_DATE,TWO -119, QTY,0)	TWO_P17,
		                DECODE(SALE_DATE,TWO -126, QTY,0)	TWO_P18,
		                DECODE(SALE_DATE,TWO -133, QTY,0)	TWO_P19,
		                DECODE(SALE_DATE,TWO -140, QTY,0)	TWO_P20,
		                DECODE(SALE_DATE,TWO -147, QTY,0)	TWO_P21,
		                DECODE(SALE_DATE,TWO -154, QTY,0)	TWO_P22,
		                DECODE(SALE_DATE,TWO -161, QTY,0)	TWO_P23,
		                DECODE(SALE_DATE,TWO -168, QTY,0)	TWO_P24,
		                DECODE(SALE_DATE,TWO -175, QTY,0)	TWO_P25,
		                DECODE(SALE_DATE,TWO -182, QTY,0)	TWO_P26,
		                DECODE(SALE_DATE,TWO -189, QTY,0)	TWO_P27,
		                DECODE(SALE_DATE,TWO -196, QTY,0)	TWO_P28,
		                DECODE(SALE_DATE,TWO -203, QTY,0)	TWO_P29,
		                DECODE(SALE_DATE,TWO -210, QTY,0)	TWO_P30,
		                DECODE(SALE_DATE,TWO,QTY,0)			TWO_W,
		                DECODE(SALE_DATE,TWO +7,QTY,0)		TWO_W1, 
		                DECODE(SALE_DATE,TWO +14,QTY,0)		TWO_W2, 
		                DECODE(SALE_DATE,TWO +21,QTY,0)		TWO_W3, 
		                DECODE(SALE_DATE,TWO +28,QTY,0)		TWO_W4, 
		                DECODE(SALE_DATE,TWO +35,QTY,0)		TWO_W5, 
		                DECODE(SALE_DATE,TWO +42,QTY,0)		TWO_W6, 
		                DECODE(SALE_DATE,TWO +49,QTY,0)		TWO_W7, 
		                DECODE(SALE_DATE,TWO +56,QTY,0)		TWO_W8, 
		                DECODE(SALE_DATE,TWO +63,QTY,0)		TWO_W9,
		                DECODE(SALE_DATE,TWO +70,QTY,0)		TWO_W10,
		                DECODE(SALE_DATE,TWO +77,QTY,0)		TWO_W11, 
		                DECODE(SALE_DATE,TWO +84,QTY,0)		TWO_W12, 
		                DECODE(SALE_DATE,TWO +91,QTY,0)		TWO_W13, 
		                DECODE(SALE_DATE,TWO +98,QTY,0)		TWO_W14, 
		                DECODE(SALE_DATE,TWO +105,QTY,0)	TWO_W15, 
		                DECODE(SALE_DATE,TWO +112,QTY,0)	TWO_W16, 
		                DECODE(SALE_DATE,TWO +119,QTY,0)	TWO_W17, 
		                DECODE(SALE_DATE,TWO +126,QTY,0)	TWO_W18, 
		                DECODE(SALE_DATE,TWO +133,QTY,0)	TWO_W19,
		                DECODE(SALE_DATE,TWO +140,QTY,0)	TWO_W20, 
		                DECODE(SALE_DATE,TWO +147,QTY,0)	TWO_W21, 
		                DECODE(SALE_DATE,TWO +154,QTY,0)	TWO_W22, 
		                DECODE(SALE_DATE,TWO +161,QTY,0)	TWO_W23, 
		                DECODE(SALE_DATE,TWO +168,QTY,0)	TWO_W24, 
		                DECODE(SALE_DATE,TWO +175,QTY,0)	TWO_W25, 
		                DECODE(SALE_DATE,TWO +182,QTY,0)	TWO_W26, 
		                DECODE(SALE_DATE,TWO +189,QTY,0)	TWO_W27, 
		                DECODE(SALE_DATE,TWO +196,QTY,0)	TWO_W28, 
		                DECODE(SALE_DATE,TWO +203,QTY,0)	TWO_W29,
		                DECODE(SALE_DATE,TWO +210,QTY,0)	TWO_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                               
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
					    				FROM	SALES_WEEK_3_YEAR A						        			
						     			WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT 	A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.PR_FLAG ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
     									WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
                        	GROUP 
                        	BY 		SALE_DATE,
                                    ITEM_ID,
                                    YYYY,
                                    WEEK_NO
                        	)S1,
	     					(
	          				SELECT	DISTINCT 
									MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
							        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
							        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          				FROM	CAL_MST
	     					WHERE 	WEEK_NO = (
	                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        				  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
	                                          FROM		CAL_MST
	                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )
	                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
	     					)S2
                    	)                    
                    )
		UNION ALL                   
		SELECT	'2015년도'	GUBN,
         		4			 GUBN_IDX,
		    	ROUND(NVL(MAX(ONE_P30),0),0)	ONE_P30,
				ROUND(NVL(MAX(ONE_P29),0),0)	ONE_P29,
		        ROUND(NVL(MAX(ONE_P28),0),0)	ONE_P28,
		        ROUND(NVL(MAX(ONE_P27),0),0)	ONE_P27,
		        ROUND(NVL(MAX(ONE_P26),0),0)	ONE_P26,
		        ROUND(NVL(MAX(ONE_P25),0),0)	ONE_P25,
		        ROUND(NVL(MAX(ONE_P24),0),0)	ONE_P24,
		        ROUND(NVL(MAX(ONE_P23),0),0)	ONE_P23,
		        ROUND(NVL(MAX(ONE_P22),0),0)	ONE_P22,
		        ROUND(NVL(MAX(ONE_P21),0),0)	ONE_P21,
		        ROUND(NVL(MAX(ONE_P20),0),0)	ONE_P20,
		        ROUND(NVL(MAX(ONE_P19),0),0)	ONE_P19,
		        ROUND(NVL(MAX(ONE_P18),0),0)	ONE_P18,
		        ROUND(NVL(MAX(ONE_P17),0),0)	ONE_P17,
		        ROUND(NVL(MAX(ONE_P16),0),0)	ONE_P16,
		        ROUND(NVL(MAX(ONE_P15),0),0)	ONE_P15,
		        ROUND(NVL(MAX(ONE_P14),0),0)	ONE_P14,
		        ROUND(NVL(MAX(ONE_P13),0),0)	ONE_P13,
		        ROUND(NVL(MAX(ONE_P12),0),0)	ONE_P12,
		        ROUND(NVL(MAX(ONE_P11),0),0)	ONE_P11,
		        ROUND(NVL(MAX(ONE_P10),0),0)	ONE_P10,
		        ROUND(NVL(MAX(ONE_P9),0),0)		ONE_P9,
		        ROUND(NVL(MAX(ONE_P8),0),0)		ONE_P8,
		        ROUND(NVL(MAX(ONE_P7),0),0)		ONE_P7,
		        ROUND(NVL(MAX(ONE_P6),0),0)		ONE_P6,
		        ROUND(NVL(MAX(ONE_P5),0),0)		ONE_P5,
		        ROUND(NVL(MAX(ONE_P4),0),0)		ONE_P4,
		        ROUND(NVL(MAX(ONE_P3),0),0)		ONE_P3,
		        ROUND(NVL(MAX(ONE_P2),0),0)		ONE_P2,
		        ROUND(NVL(MAX(ONE_P1),0),0)		ONE_P1,	
		        #if("$!{no_flag}" == "NEW") 
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W),0),0)))		ONE_W,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W1),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W1),0),0)))	ONE_W1,
				TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W2),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W2),0),0)))	ONE_W2,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W3),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W3),0),0)))	ONE_W3,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W4),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W4),0),0)))	ONE_W4,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W5),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W5),0),0)))	ONE_W5,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W6),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W6),0),0)))	ONE_W6,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W7),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W7),0),0)))	ONE_W7,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W8),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W8),0),0)))	ONE_W8,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W9),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W9),0),0)))	ONE_W9,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W10),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W10),0),0)))	ONE_W10,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W11),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W11),0),0)))	ONE_W11,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W12),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W12),0),0)))	ONE_W12,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W13),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W13),0),0)))	ONE_W13,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W14),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W14),0),0)))	ONE_W14,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W15),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W15),0),0)))	ONE_W15,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W16),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W16),0),0)))	ONE_W16,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W17),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W17),0),0)))	ONE_W17,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W18),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W18),0),0)))	ONE_W18,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W19),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W19),0),0)))	ONE_W19,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W20),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W20),0),0)))	ONE_W20,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W21),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W21),0),0)))	ONE_W21,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W22),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W22),0),0)))	ONE_W22,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W23),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W23),0),0)))	ONE_W23,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W24),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W24),0),0)))	ONE_W24,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W25),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W25),0),0)))	ONE_W25,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W26),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W26),0),0)))	ONE_W26,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W27),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W27),0),0)))	ONE_W27,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W28),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W28),0),0)))	ONE_W28,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W29),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W29),0),0)))	ONE_W29,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W30),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W30),0),0)))	ONE_W30	
		        #else
		        ROUND(NVL(MAX(ONE_W),0),0)		ONE_W,
		        ROUND(NVL(MAX(ONE_W1),0),0)		ONE_W1,
				ROUND(NVL(MAX(ONE_W2),0),0)		ONE_W2,
		        ROUND(NVL(MAX(ONE_W3),0),0)		ONE_W3,
		        ROUND(NVL(MAX(ONE_W4),0),0)		ONE_W4,
		        ROUND(NVL(MAX(ONE_W5),0),0)		ONE_W5,
		        ROUND(NVL(MAX(ONE_W6),0),0)		ONE_W6,
		        ROUND(NVL(MAX(ONE_W7),0),0)		ONE_W7,
		        ROUND(NVL(MAX(ONE_W8),0),0)		ONE_W8,
		        ROUND(NVL(MAX(ONE_W9),0),0)		ONE_W9,
		        ROUND(NVL(MAX(ONE_W10),0),0)	ONE_W10,
		        ROUND(NVL(MAX(ONE_W11),0),0)	ONE_W11,
		        ROUND(NVL(MAX(ONE_W12),0),0)	ONE_W12,
		        ROUND(NVL(MAX(ONE_W13),0),0)	ONE_W13,
		        ROUND(NVL(MAX(ONE_W14),0),0)	ONE_W14,
		        ROUND(NVL(MAX(ONE_W15),0),0)	ONE_W15,
		        ROUND(NVL(MAX(ONE_W16),0),0)	ONE_W16,
		        ROUND(NVL(MAX(ONE_W17),0),0)	ONE_W17,
		        ROUND(NVL(MAX(ONE_W18),0),0)	ONE_W18,
		        ROUND(NVL(MAX(ONE_W19),0),0)	ONE_W19,
		        ROUND(NVL(MAX(ONE_W20),0),0)	ONE_W20,
		        ROUND(NVL(MAX(ONE_W21),0),0)	ONE_W21,
		        ROUND(NVL(MAX(ONE_W22),0),0)	ONE_W22,
		        ROUND(NVL(MAX(ONE_W23),0),0)	ONE_W23,
		        ROUND(NVL(MAX(ONE_W24),0),0)	ONE_W24,
		        ROUND(NVL(MAX(ONE_W25),0),0)	ONE_W25,
		        ROUND(NVL(MAX(ONE_W26),0),0)	ONE_W26,
		        ROUND(NVL(MAX(ONE_W27),0),0)	ONE_W27,
		        ROUND(NVL(MAX(ONE_W28),0),0)	ONE_W28,
		        ROUND(NVL(MAX(ONE_W29),0),0)	ONE_W29,
		        ROUND(NVL(MAX(ONE_W30),0),0)	ONE_W30
		        #end
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,    
				        DECODE(SALE_DATE,ONE -7, QTY,0)		ONE_P1,
		                DECODE(SALE_DATE,ONE -14, QTY,0)	ONE_P2,
		                DECODE(SALE_DATE,ONE -21, QTY,0)	ONE_P3,
		                DECODE(SALE_DATE,ONE -28, QTY,0)	ONE_P4,
		                DECODE(SALE_DATE,ONE -35, QTY,0)	ONE_P5,
		                DECODE(SALE_DATE,ONE -42, QTY,0)	ONE_P6,
		                DECODE(SALE_DATE,ONE -49, QTY,0)	ONE_P7,
		                DECODE(SALE_DATE,ONE -56, QTY,0)	ONE_P8,
		                DECODE(SALE_DATE,ONE -63, QTY,0)	ONE_P9,
		                DECODE(SALE_DATE,ONE -70, QTY,0)	ONE_P10,
		                DECODE(SALE_DATE,ONE -77, QTY,0)	ONE_P11,
		                DECODE(SALE_DATE,ONE -84, QTY,0)	ONE_P12,
		                DECODE(SALE_DATE,ONE -91, QTY,0)	ONE_P13,
		                DECODE(SALE_DATE,ONE -98, QTY,0)	ONE_P14,
		                DECODE(SALE_DATE,ONE -105, QTY,0)	ONE_P15,
		                DECODE(SALE_DATE,ONE -112, QTY,0)	ONE_P16,
		                DECODE(SALE_DATE,ONE -119, QTY,0)	ONE_P17,
		                DECODE(SALE_DATE,ONE -126, QTY,0)	ONE_P18,
		                DECODE(SALE_DATE,ONE -133, QTY,0)	ONE_P19,
		                DECODE(SALE_DATE,ONE -140, QTY,0)	ONE_P20,
		                DECODE(SALE_DATE,ONE -147, QTY,0)	ONE_P21,
		                DECODE(SALE_DATE,ONE -154, QTY,0)	ONE_P22,
		                DECODE(SALE_DATE,ONE -161, QTY,0)	ONE_P23,
		                DECODE(SALE_DATE,ONE -168, QTY,0)	ONE_P24,
		                DECODE(SALE_DATE,ONE -175, QTY,0)	ONE_P25,
		                DECODE(SALE_DATE,ONE -182, QTY,0)	ONE_P26,
		                DECODE(SALE_DATE,ONE -189, QTY,0)	ONE_P27,
		                DECODE(SALE_DATE,ONE -196, QTY,0)	ONE_P28,
		                DECODE(SALE_DATE,ONE -203, QTY,0)	ONE_P29,
		                DECODE(SALE_DATE,ONE -210, QTY,0)	ONE_P30,
		                DECODE(SALE_DATE,ONE,QTY,0)			ONE_W,
		                DECODE(SALE_DATE,ONE +7,QTY,0)		ONE_W1, 
		                DECODE(SALE_DATE,ONE +14,QTY,0)		ONE_W2, 
		                DECODE(SALE_DATE,ONE +21,QTY,0)		ONE_W3, 
		                DECODE(SALE_DATE,ONE +28,QTY,0)		ONE_W4, 
		                DECODE(SALE_DATE,ONE +35,QTY,0)		ONE_W5, 
		                DECODE(SALE_DATE,ONE +42,QTY,0)		ONE_W6, 
		                DECODE(SALE_DATE,ONE +49,QTY,0)		ONE_W7, 
		                DECODE(SALE_DATE,ONE +56,QTY,0)		ONE_W8, 
		                DECODE(SALE_DATE,ONE +63,QTY,0)		ONE_W9,
		                DECODE(SALE_DATE,ONE +70,QTY,0)		ONE_W10,
		                DECODE(SALE_DATE,ONE +77,QTY,0)		ONE_W11, 
		                DECODE(SALE_DATE,ONE +84,QTY,0)		ONE_W12, 
		                DECODE(SALE_DATE,ONE +91,QTY,0)		ONE_W13, 
		                DECODE(SALE_DATE,ONE +98,QTY,0)		ONE_W14, 
		                DECODE(SALE_DATE,ONE +105,QTY,0)	ONE_W15, 
		                DECODE(SALE_DATE,ONE +112,QTY,0)	ONE_W16, 
		                DECODE(SALE_DATE,ONE +119,QTY,0)	ONE_W17, 
		                DECODE(SALE_DATE,ONE +126,QTY,0)	ONE_W18, 
		                DECODE(SALE_DATE,ONE +133,QTY,0)	ONE_W19,
		                DECODE(SALE_DATE,ONE +140,QTY,0)	ONE_W20, 
		                DECODE(SALE_DATE,ONE +147,QTY,0)	ONE_W21, 
		                DECODE(SALE_DATE,ONE +154,QTY,0)	ONE_W22, 
		                DECODE(SALE_DATE,ONE +161,QTY,0)	ONE_W23, 
		                DECODE(SALE_DATE,ONE +168,QTY,0)	ONE_W24, 
		                DECODE(SALE_DATE,ONE +175,QTY,0)	ONE_W25, 
		                DECODE(SALE_DATE,ONE +182,QTY,0)	ONE_W26, 
		                DECODE(SALE_DATE,ONE +189,QTY,0)	ONE_W27, 
		                DECODE(SALE_DATE,ONE +196,QTY,0)	ONE_W28, 
		                DECODE(SALE_DATE,ONE +203,QTY,0)	ONE_W29,
		                DECODE(SALE_DATE,ONE +210,QTY,0)	ONE_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        		
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.PR_FLAG ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        GROUP 
	                        BY 		SALE_DATE,
	                                ITEM_ID,
	                                YYYY,
	                                WEEK_NO
                        	)S1,
	     					(
	          				SELECT	DISTINCT 
									MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
							        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
							        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          				FROM	CAL_MST
	     					WHERE 	WEEK_NO = (
	                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        				  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
	                                          FROM		CAL_MST
	                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )
	                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
	     					)S2
                    	)                    
                    )
                  )S1,
                  (
                  SELECT  	ITEM_ID,
	                		CASE WHEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') 		= IPGO_DATE THEN 0
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 7,'IW') 	= IPGO_DATE THEN 1
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 14,'IW') = IPGO_DATE THEN 2
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 21,'IW') = IPGO_DATE THEN 3
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 28,'IW') = IPGO_DATE THEN 4
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 35,'IW') = IPGO_DATE THEN 5
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 42,'IW') = IPGO_DATE THEN 6
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 49,'IW') = IPGO_DATE THEN 7
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 56,'IW') = IPGO_DATE THEN 8
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 63,'IW') = IPGO_DATE THEN 9
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 70,'IW') = IPGO_DATE THEN 10
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 77,'IW') = IPGO_DATE THEN 11
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 84,'IW') = IPGO_DATE THEN 12
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 91,'IW') = IPGO_DATE THEN 13
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 98,'IW') = IPGO_DATE THEN 14 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 105,'IW') = IPGO_DATE THEN 15 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 112,'IW') = IPGO_DATE THEN 16 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 119,'IW') = IPGO_DATE THEN 17  
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 126,'IW') = IPGO_DATE THEN 18 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 133,'IW') = IPGO_DATE THEN 19 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 140,'IW') = IPGO_DATE THEN 20  
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 147,'IW') = IPGO_DATE THEN 21 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 154,'IW') = IPGO_DATE THEN 22 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 161,'IW') = IPGO_DATE THEN 23
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 168,'IW') = IPGO_DATE THEN 24 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 175,'IW') = IPGO_DATE THEN 25
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 182,'IW') = IPGO_DATE THEN 26                  
			                     ELSE 0
			                END  TP_FLAG
		       		FROM	(
					SELECT	ITEM_ID, 
							TRUNC(TO_DATE('$!{cnfm_date}') + LEAD_TIME,'IW') IPGO_DATE
					FROM	(
							SELECT	ITEM_ID,		
									NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
							FROM	ITEM_MST
							--WHERE	NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) > 0
							WHERE	ITYPE		= 'HAWA'	
		                    AND		SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
		                    AND		PR_FLAG = 'Y'                   
							)
						)    
                  	)S2
          	WHERE S2.ITEM_ID = '$!{item_id}'
    ORDER 
    BY 		GUBN_IDX		
				
				
	</query>
	
	<query id="ip_01140_inventoryPlanAnalysis_md_list" paging="false">	
		SELECT	A.*,				
				ROWNUM
		FROM
		(
		SELECT	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
		        DECODE(MAX(FLAG.CONS_ITEM_ID),NULL,'F','T')																								BOM_FLAG,
		        --기초재고는 사외재고를 제거한 것으로 정의한다 2015-05-20 SCM팀
                NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) -
                (NVL(DW2.DY_STOCK,0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0) + NVL(DW2.GITA_STOCK,0) + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0))
                - NVL(DW2.CJ_STOCK,0) - ROUND(NVL(DW2_BOM.CJ_STOCK,0),0)   																				"기초재고",
                NVL(DW2.DY_STOCK,0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0)																					"동양재고",
                NVL(DW2.GITA_STOCK,0) + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0)																				"기타재고",  
                NVL(DW2.DY_STOCK,0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0) + NVL(DW2.GITA_STOCK,0) + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0)						"사외재고",              
                TRIM(TO_CHAR( DECODE( (SUM(DW.SALES_MEAN_3WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0,0,           
                ROUND((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0))/(SUM(DW.SALES_MEAN_3WEEK_ETC) + 
                NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0)) ,999999999990.9)) 																			"재고일수",
                NVL(SW.STOCK_WEEK,0)																													"재고주수",
                NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) + 
                NVL(DWSP.MON_M00,0) + NVL(DWSP.MON_M01,0) + NVL(DWSP.MON_M02,0)+ NVL(DWSP.MON_M03,0)													"총공급가능량",						
                TRIM(TO_CHAR( DECODE( (SUM(DW.SALES_MEAN_3WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0,0,           
                ROUND((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) + NVL(DWSP.MON_M00,0) + NVL(DWSP.MON_M01,0) + NVL(DWSP.MON_M02,0)
                + NVL(DWSP.MON_M03,0))/(SUM(DW.SALES_MEAN_3WEEK_ETC) + NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0)) ,999999999990.9)) 					"총공급가능일수",
                NVL(SW.TOT_STOCK_WEEK,0)																												"총공급가능주수",
                IM.PR_TO_PO,
                IM.PO_TO_LC,
                IM.LC_TO_PORT,
                IM.PORT_TO_CUST,
                NVL(MAX(IM.PROD_TERM),0)																								   				"유통기한\n경과일수",
                MAX(IM.PROD_TERM) * (SUM(DW.BASE_STOCK)+ NVL(MAX(DW_BOM.BASE_STOCK),0))																	"경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * (SUM(DW.BASE_STOCK)  + NVL(MAX(DW_BOM.BASE_STOCK),0))															"유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   				"유통기한일",
                TO_CHAR(ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1),'FM9990D99')||'%' 	"유통기한경과율",
                NVL(SUM(DW.SALES_PRE),0)+ NVL(MAX(DW_BOM.SALES_PRE),0)      																		 	"전일계",
                NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0)       						"일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)  + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0)   			"당월누계", 
               	NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) -
                (NVL(DW2.DY_STOCK,0) + NVL(DW2.CJ_STOCK,0)+  ROUND(NVL(DW2_BOM.CJ_STOCK,0),0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0) + NVL(DW2.GITA_STOCK,0) 
                + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0))  
                - (NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0))							"예상재고",
                NVL(SUM(DW.PRE_MONTH_SELL),0) 	+ NVL(MAX(DW_BOM.PRE_MONTH_SELL),0)																		"전월계",                
                --NVL(DWSP.MON_M00,0)																													"매입실적M",
                NVL(RC.RECEIPT_M,0)																														"매입실적M",
                NVL(RC.RECEIPT_M2,0)																													"매입실적M2",
                NVL(RC.RECEIPT_M3,0)																													"매입실적M3", 
                NVL(DWSP.MON_M01,0)																														"매입실적M+1",
                NVL(DWSP.MON_M02,0)																														"매입실적M+2",
                NVL(DWSP.MON_M03,0)																														"매입실적M+3",
                NVL(DWSP.MON_M04,0)																														"매입실적M+4",
                (NVL(SUM(DW.SALES_MEAN_1MON_TA),0) + NVL(MAX(DW_BOM.SALES_MEAN_1MON_TA),0)) * 6															"1개월평균",
               	(NVL(SUM(DW.SALES_MEAN_3MON_TA),0) + NVL(MAX(DW_BOM.SALES_MEAN_3MON_TA),0)) * 6															"3개월평균",
                (NVL(SUM(DW.SALES_MEAN_1WEEK_ETC),0) + NVL(MAX(DW_BOM.SALES_MEAN_1WEEK_ETC),0)) 														"1주평균",
               	(NVL(SUM(DW.SALES_MEAN_3WEEK_ETC),0) + NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)) 														"3주평균",               	
                NVL(SUM(DW.SALES_MEAN_1WEEK),0) + NVL(MAX(DW_BOM.SALES_MEAN_1WEEK),0)-SUM(DW.SALES_MEAN_3WEEK_ETC) -NVL(MAX(DW_BOM.SALES_MEAN_3WEEK),0)	"1,3주평균 편차",
                DECODE((SUM(DW.SALES_MEAN_3WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0, 0,
                TRIM(TO_CHAR( 
                ROUND((((SUM(DW.SALES_MEAN_1WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_1WEEK_ETC),0))/(SUM(DW.SALES_MEAN_3WEEK_ETC)+
                NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)))-1)*100,1),999999999990.9)))  																	"편차비율",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_MON_CUM),0)+ NVL(MAX(DW_BOM.SALES_PY_MON_CUM_TA),0)											  			   		"전년동월\n누계",
                NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0) "년누계",
                NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_INI_CUM),0)+ NVL(MAX(DW_BOM.SALES_PY_INI_CUM_TA),0)        														"전년누계",
                (NVL(MAX(DWSA.SELL_BOX_CUM),0)+NVL(SUM(DW.ISSUE_EXPT),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + 
                NVL(MAX(DW_BOM.ISSUE),0)) - (NVL(SUM(DW.SALES_PY_MON_CUM),0) + NVL(MAX(DW_BOM.SALES_PY_MON_CUM),0)+ NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) +
                NVL(MAX(DW_BOM.SALES_PY_MON_CUM_TA),0))																									"전년동일\n대비",
                (NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + 
                NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0)) - (NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_INI_CUM),0) + NVL(MAX(DW_BOM.SALES_PY_INI_CUM_TA),0))															"전년누계\n대비",               
		        NVL(DECODE(IM.BOX_PER_PALET,0,0,CEIL(((SUM(DW.BASE_STOCK)+NVL(MAX(DW_BOM.BASE_STOCK),0))/IM.BOX_PER_PALET))),0)							"기초재고(PALLET)",
		        NVL(DECODE(IM.BOX_PER_PALET,0,0,CEIL(((SUM(DW.STOCK_EXPT)+NVL(MAX(DW_BOM.STOCK_EXPT),0))/IM.BOX_PER_PALET))),0) 						"예상재고(PALLET)",
		        ROUND(((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0)) * IM.NWGT_PER_BUOM) / 1000000 , 2) 									"기초재고중량",		        
		        ROUND(NVL(DWSP2.MON_M00,0)  * IM.NWGT_PER_BUOM / 1000000, 2)																			"당월수입누계중량",
		        NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_M00,0) + NVL(DWSP2.MON_M01,0) + NVL(DWSP2.MON_M02,0) + NVL(DWSP2.MON_M03,0) +
                NVL(DWSP2.MON_M04,0) + NVL(DWSP2.MON_M05,0) + NVL(DWSP2.MON_M06,0)																		"년수입누계",
                ROUND((NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_M00,0) + NVL(DWSP2.MON_M01,0) + NVL(DWSP2.MON_M02,0) + NVL(DWSP2.MON_M03,0) +
                NVL(DWSP2.MON_M04,0) + NVL(DWSP2.MON_M05,0) + NVL(DWSP2.MON_M06,0)) * IM.NWGT_PER_BUOM / 1000000 , 2) 									"년수입누계중량",
                ROUND((NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)  + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0))
                 * IM.NWGT_PER_BUOM / 1000000, 2)																										"당월판매누계중량",
                ROUND((NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + 
                NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0)) * IM.NWGT_PER_BUOM / 1000000, 2)																	"년판매누계중량",                
		        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST 																			"리드타임"
		FROM    DC_DATAWAREHOUSE DW,
				(
				 SELECT	ITEM_ID,
				 		SUM(DY_STOCK) 	DY_STOCK,
				 		SUM(GITA_STOCK)	GITA_STOCK,
				 		SUM(CJ_STOCK)	CJ_STOCK
				 FROM	(
						 SELECT	DC.ITEM_ID,
						 		CASE 	WHEN DM.DC_ID = '1811'
						 				THEN SUM(DC.BASE_STOCK)
						 				ELSE 0
						 		END		DY_STOCK,
						 		CASE	WHEN	(DM.DC_LOC_TYPE = '사외' AND DM.DC_ID != '1811' AND DM.DC_ID != '8922')		
						 				THEN	SUM(DC.BASE_STOCK)
						 				ELSE	0
						 		END		GITA_STOCK  ,
						 		CASE	WHEN	(DM.DC_LOC_TYPE = '사외' AND DM.DC_ID = '8922')		
						 				THEN	SUM(DC.BASE_STOCK)
						 				ELSE	0
						 		END		CJ_STOCK                       
		                FROM	DC_DATAWAREHOUSE DC, DC_MST DM, ITEM_MST IM
		                WHERE	DC.CNFM_DATE 	= '$!{end_date}'                                      
		                AND		DC.DC_ID 		= DM.DC_ID
		                AND		DC.ITEM_ID		= IM.ITEM_ID
                        AND		IM.ST_FLAG  	= 'Y'
                        --AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		                GROUP
		                BY		DC.ITEM_ID, DM.DC_LOC_TYPE, DM.DC_ID
		                )
		         GROUP
		         BY		ITEM_ID
				)DW2,			
				(
        	 	SELECT	CONS_ITEM_ID,
             			ROUND(NVL(SUM(BASE_STOCK),0),0)	BASE_STOCK,
                        ROUND(NVL(SUM(SALES_PRE),0),0)	SALES_PRE,
                        ROUND(NVL(SUM(ISSUE),0),0)		ISSUE,
                        ROUND(NVL(SUM(ISSUE_EXPT),0),0)	ISSUE_EXPT,
                        ROUND(NVL(SUM(STOCK_EXPT),0),0)	STOCK_EXPT,
                        ROUND(NVL(SUM(PRE_MONTH_SELL),0),0)	PRE_MONTH_SELL,
                        ROUND(NVL(SUM(SALES_MEAN_1WEEK),0),0)	SALES_MEAN_1WEEK,
                        ROUND(NVL(SUM(SALES_MEAN_3WEEK),0),0)	SALES_MEAN_3WEEK,
                        ROUND(NVL(SUM(SALES_MEAN_1MON_TA),0),0)	SALES_MEAN_1MON_TA,
                        ROUND(NVL(SUM(SALES_MEAN_3MON_TA),0),0)	SALES_MEAN_3MON_TA,
                        ROUND(NVL(SUM(SALES_MEAN_1WEEK_ETC),0),0) SALES_MEAN_1WEEK_ETC,
                        ROUND(NVL(SUM(SALES_MEAN_3WEEK_ETC),0),0) SALES_MEAN_3WEEK_ETC,
                        ROUND(NVL(SUM(SALES_PY_MON_CUM),0),0) SALES_PY_MON_CUM,
                        ROUND(NVL(SUM(SALES_PY_MON_CUM_TA),0),0) SALES_PY_MON_CUM_TA,                                    
                        ROUND(NVL(SUM(SALES_INI_CUM),0),0) SALES_INI_CUM,
                        ROUND(NVL(SUM(SALES_INI_CUM_TA),0),0) SALES_INI_CUM_TA,
                        ROUND(NVL(SUM(SALES_PY_INI_CUM),0),0) SALES_PY_INI_CUM,
                        ROUND(NVL(SUM(SALES_PY_INI_CUM_TA),0),0) SALES_PY_INI_CUM_TA                                  
                FROM	(
                     	SELECT	S1.CONS_ITEM_ID,
	                 			S1.PROD_ITEM_ID,                         			
	                 			SUM(S2.BASE_STOCK) * S1.QTY	BASE_STOCK,
	                            SUM(S2.SALES_PRE) * S1.QTY	SALES_PRE,
	                            SUM(S2.ISSUE)	* S1.QTY	ISSUE,
	                            SUM(S2.ISSUE_EXPT) * S1.QTY	ISSUE_EXPT,
	                            SUM(S2.STOCK_EXPT) * S1.QTY STOCK_EXPT,
	                            SUM(S2.PRE_MONTH_SELL) * S1.QTY PRE_MONTH_SELL,
	                            SUM(S2.SALES_MEAN_1WEEK) * S1.QTY SALES_MEAN_1WEEK,
	                            SUM(S2.SALES_MEAN_3WEEK) * S1.QTY SALES_MEAN_3WEEK,
	                            SUM(S2.SALES_MEAN_1MON_TA) * S1.QTY SALES_MEAN_1MON_TA,
	                            SUM(S2.SALES_MEAN_3MON_TA) * S1.QTY SALES_MEAN_3MON_TA,
	                            SUM(S2.SALES_MEAN_1WEEK_ETC) * S1.QTY SALES_MEAN_1WEEK_ETC,
	                            SUM(S2.SALES_MEAN_3WEEK_ETC) * S1.QTY SALES_MEAN_3WEEK_ETC,
	                            SUM(S2.SALES_PY_MON_CUM) * S1.QTY SALES_PY_MON_CUM,
	                            SUM(S2.SALES_PY_MON_CUM_TA) * S1.QTY SALES_PY_MON_CUM_TA,
	                            SUM(S2.SALES_INI_CUM) * S1.QTY SALES_INI_CUM,
	                            SUM(S2.SALES_INI_CUM_TA) * S1.QTY SALES_INI_CUM_TA,
	                            SUM(S2.SALES_PY_INI_CUM) * S1.QTY SALES_PY_INI_CUM,
	                            SUM(S2.SALES_PY_INI_CUM_TA) * S1.QTY SALES_PY_INI_CUM_TA                                                                
                      	FROM	(
                         		SELECT  IM.ITEM_ID, 
	                                    IM.ITEM_NAME,		
	                                    MB.CONS_ITEM_ID,
	                                    MAX(MB.PROD_VER),    
	                                    MB.PROD_ITEM_ID,      
	                                    MB.CONS_QTY,
	                                    NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
	                                    MB.CONS_QTY_UOM      
	                            FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
	                            WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
	                            AND		IM.ITEM_ID	= ITM.ITEM_CD
	                            AND		IM.ITYPE		= 'HAWA'	
	                            --AND		(IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')	                          
	                            AND		IM.ST_FLAG = 'Y'
	                            GROUP 
	                            BY 		IM.ITEM_ID, 
	                                    IM.ITEM_NAME,
	                                    MB.CONS_ITEM_ID,
	                                    MB.PROD_ITEM_ID,
	                                    MB.CONS_QTY,
	                                    MB.CONS_QTY_UOM, 
	                                    IM.QTY
                            	)S1, DC_DATAWAREHOUSE S2
                        WHERE	S1.PROD_ITEM_ID = S2.ITEM_ID
                        AND	  	S2.CNFM_DATE	='$!{end_date}'
                        GROUP
                        BY		S1.QTY, S1.CONS_ITEM_ID,S1.PROD_ITEM_ID
                        )
                        GROUP BY CONS_ITEM_ID
                )DW_BOM,
                (
                SELECT	CONS_ITEM_ID,             			
                        SUM(DY_STOCK)	DY_STOCK,
                        SUM(GITA_STOCK) GITA_STOCK ,
                        SUM(CJ_STOCK)	CJ_STOCK                    
                FROM	(
                     	SELECT	S1.CONS_ITEM_ID,
	                 			S1.PROD_ITEM_ID,  
                                (
                                CASE 	WHEN S3.DC_ID = '1811'
						 				THEN SUM(S2.BASE_STOCK)
						 				ELSE 0
						 		END
                                )	* S1.QTY	DY_STOCK,
                                (
                                CASE 	WHEN S3.DC_ID = '8922'
						 				THEN SUM(S2.BASE_STOCK)
						 				ELSE 0
						 		END
                                )	* S1.QTY	CJ_STOCK,
						 		(
                                CASE	WHEN	(S3.DC_LOC_TYPE = '사외' AND S3.DC_ID NOT IN  ('1811','8922'))
						 				THEN	SUM(S2.BASE_STOCK)
						 				ELSE	0
						 		END		
                                ) * S1.QTY		GITA_STOCK                                         
                      	FROM	(
                         		SELECT  IM.ITEM_ID, 
	                                    IM.ITEM_NAME,		
	                                    MB.CONS_ITEM_ID,
	                                    MAX(MB.PROD_VER),    
	                                    MB.PROD_ITEM_ID,      
	                                    MB.CONS_QTY,
	                                    NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
	                                    MB.CONS_QTY_UOM      
	                            FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
	                            WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
	                            AND		IM.ITEM_ID	= ITM.ITEM_CD
	                            AND		IM.ITYPE		= 'HAWA'	
	                            --AND		(IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')	                            
	                            AND		IM.ST_FLAG = 'Y'
	                            GROUP 
	                            BY 		IM.ITEM_ID, 
	                                    IM.ITEM_NAME,
	                                    MB.CONS_ITEM_ID,
	                                    MB.PROD_ITEM_ID,
	                                    MB.CONS_QTY,
	                                    MB.CONS_QTY_UOM, 
	                                    IM.QTY
                            	)S1, DC_DATAWAREHOUSE S2, DC_MST S3
                        WHERE	S1.PROD_ITEM_ID = S2.ITEM_ID
                        AND	  	S2.CNFM_DATE	='$!{end_date}'
                        AND		S2.DC_ID		= S3.DC_ID
                        GROUP
                        BY		S1.QTY, S1.CONS_ITEM_ID,S1.PROD_ITEM_ID, S3.DC_LOC_TYPE, S3.DC_ID
                        )
                GROUP BY CONS_ITEM_ID
                )DW2_BOM, 
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
				-- AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
				 AND	IM.ST_FLAG 	= 'Y'                 			 
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,	
		       (
				SELECT  ITEM_ID,
						MON_M00,
						MON_M01,
						MON_M02,
						MON_M03,
						MON_M04
				FROM	DC_RECEIVE_PR
				WHERE	VERSION =  '$!{end_date}'
				AND		GUBN ='2'
		       )DWSP,
		       (
		       	SELECT	ITEM_ID,
				        SUM(RECEIPT_M)  RECEIPT_M, 
				        SUM(RECEIPT_M2) RECEIPT_M2,
				        SUM(RECEIPT_M3) RECEIPT_M3
				FROM	(
 						SELECT	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM'),'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+9,'YYYYMMDD')
		                        THEN SUM(RECEIPT_EXPT)
		                        ELSE 0
		                        END     RECEIPT_M,
		                    	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+10,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+19,'YYYYMMDD')
		                        THEN SUM(RECEIPT_EXPT)
		                        ELSE 0
		                        END     RECEIPT_M2,    
		                     	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+20,'YYYYMMDD') AND TO_CHAR(LAST_DAY(TRUNC(TO_DATE('$!{end_date}'))),'YYYYMMDD')
		                        THEN SUM(RECEIPT_EXPT)
		                        ELSE 0
		                        END     RECEIPT_M3,  
		                        S1.ITEM_ID
             			FROM 	DC_DATAWAREHOUSE S1, ITEM_MST S2
			            WHERE 	S1.CNFM_DATE BETWEEN '$!{start_date}' AND TO_CHAR(LAST_DAY(TRUNC(TO_DATE('$!{end_date}'))),'YYYYMMDD')
			            AND 	S1.ITEM_ID = S2.ITEM_ID
			            AND 	S2.ST_FLAG ='Y'
			            AND 	CNFM_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
			            HAVING 	SUM(RECEIPT_EXPT) > 0
			            GROUP 
			            BY 		S1.CNFM_DATE, S1.ITEM_ID
            			)		
            	GROUP BY ITEM_ID
               )RC,           
		      (		 
			 SELECT		ITEM_ID,
			 			MAX(DECODE(NO,1,MON_P01,0))		MON_P01,
			 			MAX(DECODE(NO,2,MON_P02,0))		MON_P02,
			            MAX(DECODE(NO,3,MON_P03,0))		MON_P03,
			            MAX(DECODE(NO,4,MON_P04,0))		MON_P04,
			            MAX(DECODE(NO,5,MON_P05,0))		MON_P05,
			            MAX(DECODE(NO,6,MON_P06,0))		MON_P06,
			            MAX(DECODE(NO,7,MON_P07,0))		MON_P07,
			            MAX(DECODE(NO,8,MON_P08,0))		MON_P08,
			            MAX(DECODE(NO,9,MON_P09,0))		MON_P09,
			            MAX(DECODE(NO,10,MON_P10,0))	MON_P10,
			            MAX(DECODE(NO,11,MON_P11,0))	MON_P11,
			            MAX(DECODE(NO,12,MON_M00,0))	MON_M00,
			            MAX(DECODE(NO,13,MON_M01,0))	MON_M01,
			            MAX(DECODE(NO,14,MON_M02,0))	MON_M02,
			            MAX(DECODE(NO,15,MON_M03,0))	MON_M03,
			            MAX(DECODE(NO,16,MON_M04,0))	MON_M04,
			            MAX(DECODE(NO,17,MON_M05,0))	MON_M05,
			            MAX(DECODE(NO,18,MON_M06,0)) 	MON_M06,
			            MAX(NO)							NO
			 FROM		(
			 			SELECT  ITEM_ID,
		 						TO_CHAR(MON_P11)	MON_P11,
		                		TO_CHAR(MON_P10)	MON_P10,
		                        TO_CHAR(MON_P09)	MON_P09,
		                        TO_CHAR(MON_P08)	MON_P08,
		                        TO_CHAR(MON_P07)	MON_P07,
		                        TO_CHAR(MON_P06)	MON_P06,
		                        TO_CHAR(MON_P05)	MON_P05,
		                        TO_CHAR(MON_P04)	MON_P04,
		                        TO_CHAR(MON_P03)	MON_P03,
		                        TO_CHAR(MON_P02)	MON_P02,
		                        TO_CHAR(MON_P01)	MON_P01,
		                        TO_CHAR(MON_M00)	MON_M00,
		                        TO_CHAR(MON_M01)	MON_M01,
		                        TO_CHAR(MON_M02)	MON_M02,
		                        TO_CHAR(MON_M03)	MON_M03,
		                        TO_CHAR(MON_M04)	MON_M04,
		                        TO_CHAR(MON_M05)	MON_M05,
		                        TO_CHAR(MON_M06)	MON_M06,
		                        T.NO                     
						FROM    DC_RECEIVE_PR L, 
		                		(
		                        SELECT 	ROWNUM NO, 
		                        		TO_CHAR(ROWNUM, 'FM00') NO2 
		                        FROM 	USER_OBJECTS 
		                        WHERE ROWNUM &lt; 19
		                        ) T
						WHERE	VERSION =   '$!{end_date}'
					 	AND 	GUBN='1'
		                AND   	T.NO &lt;= 18
		                ORDER 
		                BY 		T.NO
                		)
                WHERE 	NO BETWEEN 1 	AND SUBSTR(TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),5,6) - SUBSTR(TO_CHAR(TRUNC(SYSDATE,'YY'),'YYYYMM'),5,6)
               	OR		NO BETWEEN 12 	AND 12 + SUBSTR(TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),11),'YYYYMM'),5,6) - SUBSTR(TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),5,6)
               	GROUP 
               	BY 		ITEM_ID
		       	)DWSP2,
               (--판매실적 누계 --타계정포함
                SELECT	ITEM_ID,
                		ROUND(SUM(SELL_BOX_CUM),0) SELL_BOX_CUM
                FROM	(
		                SELECT	 CONS_ITEM_ID ITEM_ID,
		                		 SUM(SELL_BOX_CUM) SELL_BOX_CUM
		                FROM	(
				                SELECT   IM.CONS_ITEM_ID,
				                		 SA.ITEM_ID, 
				                         SUM(SA.QTY) * IM.QTY SELL_BOX_CUM
				                FROM     SALES_ACT SA,
		                		 		 DC_MST DM,
		                         		(
				                        SELECT  MB.PROD_ITEM_ID ITEM_ID,
				                        		MB.CONS_ITEM_ID,
				                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				                                MB.CONS_QTY_UOM      
				                        FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
				                        WHERE	IM.ITEM_ID 	= MB.CONS_ITEM_ID
				                        AND		IM.ITEM_ID	= ITM.ITEM_CD
				                        AND		IM.ITYPE	= 'HAWA'	
				                       -- AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
				                        AND		IM.ST_FLAG = 'Y'
				                        AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				                                OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
					                    GROUP 
					                    BY 		IM.ITEM_ID, 
					                            IM.ITEM_NAME,
					                            MB.CONS_ITEM_ID,
					                            MB.PROD_ITEM_ID,
					                            MB.CONS_QTY,
					                            MB.CONS_QTY_UOM, 
					                            IM.QTY
		                         		) IM,
			                         (
			                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
									 FROM	CAL_MST
									 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
					                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
			                         )    CAL                            
				                WHERE    SA.ITEM_ID = IM.ITEM_ID
				                --AND      SA.DELIV_LOC    NOT IN ('8901','8902','8903','8913','8914') --판매 실적은 수출도 참조
				                AND      SA.SALE_DATE = CAL.YYYYMMDD
				                AND		 SA.DELIV_LOC = DM.DC_ID
				                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
				                GROUP BY SA.ITEM_ID,IM.CONS_ITEM_ID, IM.QTY
		                		)
		                GROUP BY CONS_ITEM_ID
		                UNION ALL
		                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
		                FROM     SALES_ACT SA,
		                		 DC_MST DM,
		                         (
		                         SELECT *
				                 FROM   ITEM_MST IM
				                 WHERE	IM.ITYPE		= 'HAWA'	
								 --AND	IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								 AND	IM.ST_FLAG 	= 'Y'
				                 AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
						    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
		                         ) IM,
		                         (
		                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
								 FROM	CAL_MST
								 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
				                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
		                         )CAL                            
		                WHERE    SA.ITEM_ID = IM.ITEM_ID
		                --AND      SA.DELIV_LOC    NOT IN ('8901','8902','8903','8913','8914') --판매 실적은 수출도 참조
		                AND      SA.SALE_DATE = CAL.YYYYMMDD
		                AND		 SA.DELIV_LOC = DM.DC_ID
		                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
		                GROUP BY SA.ITEM_ID
		                )
		                GROUP BY ITEM_ID
               	)DWSA,               
		       	DC_MST DM,
		       	(
                SELECT  IM.ITEM_ID, 
                        IM.ITEM_NAME,		
                        MB.CONS_ITEM_ID
                FROM	ITEM_MST IM, MBOM MB, CMITEM ITM,
                		(
                         SELECT	ITEM_ID,
                        		SELL_STOP_DATE
                         FROM	ITEM_MST
                         --WHERE	SELL_STOP_DATE >=TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
                        )IM2
                WHERE	IM.ITEM_ID 	= MB.CONS_ITEM_ID
                AND		IM.ITEM_ID	= ITM.ITEM_CD
                AND		IM2.ITEM_ID = MB.PROD_ITEM_ID
                AND		IM.ITYPE		= 'HAWA'	
                --AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
                AND		IM.ST_FLAG = 'Y'
                GROUP 
                BY 		IM.ITEM_ID, 
                        IM.ITEM_NAME,
                        MB.CONS_ITEM_ID,                      
                        IM.QTY
                 )FLAG,
                 (
                 SELECT	ITEM_ID,STOCK_WEEK, TOT_STOCK_WEEK
                 FROM   IMPORT_MD_EXPECT
                 WHERE  VERSION = '$!{end_date}'
                 AND GUBN='1'
                 )SW   
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND		DW.ITEM_ID		= DWSP2.ITEM_ID(+)
		AND		DW.ITEM_ID		= DW2.ITEM_ID	
		AND		DW.ITEM_ID		= SW.ITEM_ID(+)		
		AND		DW.ITEM_ID		= DW_BOM.CONS_ITEM_ID(+)
		AND		DW.ITEM_ID		= DW2_BOM.CONS_ITEM_ID(+)
		AND     DW.ITEM_ID      = DWSA.ITEM_ID	(+)	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
		AND		DW.ITEM_ID		= FLAG.ITEM_ID(+)
		 AND     ((IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000') OR 
                  (NVL(DW.BASE_STOCK,0) + NVL(DW_BOM.BASE_STOCK,0) + NVL(DW2.DY_STOCK,0) + NVL(DW2_BOM.DY_STOCK,0) + NVL(DW2.GITA_STOCK,0) + NVL(DW2_BOM.GITA_STOCK,0)) > 0 )       
        AND		CM.CD_GRP		= 'SALES_CAT3'
		AND		(DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914') )   --동우,대현 창고 추가 이승용대리 요청 2014-12-09 
		AND     DW.CNFM_DATE	= '$!{end_date}'
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
		AND		IM.SALES_CAT03 LIKE '%'||'$!{sales_cat03}'||'%'
		AND     DW.ITEM_ID = RC.ITEM_ID(+)
		GROUP 
		BY  	SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, BOX_PER_PALET, IM.JGC_DUE_DATE, DWSP.MON_M00,
				DWSP.MON_M00, DWSP.MON_M01, DWSP.MON_M02, DWSP.MON_M03,DWSP.MON_M04, IM.PR_TO_PO, IM.PO_TO_LC, IM.LC_TO_PORT, IM.PORT_TO_CUST, DW2.DY_STOCK, DW2.GITA_STOCK,
				DW2_BOM.DY_STOCK, DW2_BOM.GITA_STOCK,IM.NWGT_PER_BUOM, DWSP2.MON_P11, DWSP2.MON_P10, DWSP2.MON_P09, DWSP2.MON_P08, DWSP2.MON_P07, DWSP2.MON_P06, 
                DWSP2.MON_P05, DWSP2.MON_P04, DWSP2.MON_P03, DWSP2.MON_P02, DWSP2.MON_P01, DWSP2.MON_M00, DWSP2.MON_M01, DWSP2.MON_M02, DWSP2.MON_M03, DWSP2.MON_M04, 
                DWSP2.MON_M05, DWSP2.MON_M06, SW.STOCK_WEEK, SW.TOT_STOCK_WEEK,RC.RECEIPT_M,RC.RECEIPT_M2,RC.RECEIPT_M3, DW2.CJ_STOCK, DW2_BOM.CJ_STOCK
		ORDER 
		BY 		SALES_CAT05, SALES_CAT03, DW.ITEM_ID
		)A
		ORDER 
		BY		A.SALES_CAT05, A.SALES_CAT03, A.ITEM_ID

	</query>
	
	<query id="ip_01140_inventoryPlanAnalysis_md_list_new" paging="false">	
		SELECT	A.*,				
				ROWNUM
		FROM
		(
		SELECT	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
		        'F'																							BOM_FLAG,
		        --기초재고는 사외재고를 제거한 것으로 정의한다 2015-05-20 SCM팀
                NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) -
                (NVL(DW2.DY_STOCK,0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0) + NVL(DW2.GITA_STOCK,0) + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0))
                - NVL(DW2.CJ_STOCK,0) - ROUND(NVL(DW2_BOM.CJ_STOCK,0),0)   																				"기초재고",
                NVL(DW2.DY_STOCK,0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0)																					"동양재고",
                NVL(DW2.GITA_STOCK,0) + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0)																				"기타재고",  
                NVL(DW2.DY_STOCK,0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0) + NVL(DW2.GITA_STOCK,0) + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0)						"사외재고",              
                TRIM(TO_CHAR( DECODE( (SUM(DW.SALES_MEAN_1MON_TA)+NVL(MAX(DW_BOM.SALES_MEAN_1MON_TA),0)),0,0,           
                ROUND((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0))/(SUM(DW.SALES_MEAN_1MON_TA) + 
                NVL(MAX(DW_BOM.SALES_MEAN_1MON_TA),0)),0)) ,999999999990.9)) 																			"재고일수",
                0																																		"재고주수",
                NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) + 
                NVL(DWSP.MON_M00,0) + NVL(DWSP.MON_M01,0) + NVL(DWSP.MON_M02,0)+ NVL(DWSP.MON_M03,0)													"총공급가능량",						
                TRIM(TO_CHAR( DECODE( (SUM(DW.SALES_MEAN_3WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0,0,           
                ROUND((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) + NVL(DWSP.MON_M00,0) + NVL(DWSP.MON_M01,0) + NVL(DWSP.MON_M02,0)
                + NVL(DWSP.MON_M03,0))/(SUM(DW.SALES_MEAN_3WEEK_ETC) + NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0)) ,999999999990.9)) 					"총공급가능일수",
                0																												"총공급가능주수",
                IM.PR_TO_PO,
                IM.PO_TO_LC,
                IM.LC_TO_PORT,
                IM.PORT_TO_CUST,
                NVL(MAX(IM.PROD_TERM),0)																								   				"유통기한\n경과일수",
                MAX(IM.PROD_TERM) * (SUM(DW.BASE_STOCK)+ NVL(MAX(DW_BOM.BASE_STOCK),0))																	"경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * (SUM(DW.BASE_STOCK)  + NVL(MAX(DW_BOM.BASE_STOCK),0))															"유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   				"유통기한일",
                TO_CHAR(ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1),'FM9990D99')||'%' 	"유통기한경과율",
                NVL(SUM(DW.SALES_PRE),0)+ NVL(MAX(DW_BOM.SALES_PRE),0)      																		 	"전일계",
                NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0)       						"일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)  + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0)   			"당월누계", 
               	NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0) -
                (NVL(DW2.DY_STOCK,0) + NVL(DW2.CJ_STOCK,0)+  ROUND(NVL(DW2_BOM.CJ_STOCK,0),0) + ROUND(NVL(DW2_BOM.DY_STOCK,0),0) + NVL(DW2.GITA_STOCK,0) 
                + ROUND(NVL(DW2_BOM.GITA_STOCK,0),0))  
                - (NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0))							"예상재고",
                NVL(SUM(DW.PRE_MONTH_SELL),0) 	+ NVL(MAX(DW_BOM.PRE_MONTH_SELL),0)																		"전월계",                
                --NVL(DWSP.MON_M00,0)																													"매입실적M",
                NVL(RC.RECEIPT_M,0)																														"매입실적M",
                NVL(RC.RECEIPT_M2,0)																													"매입실적M2",
                NVL(RC.RECEIPT_M3,0)																													"매입실적M3", 
                NVL(DWSP.MON_M01,0)																														"매입실적M+1",
                NVL(DWSP.MON_M02,0)																														"매입실적M+2",
                NVL(DWSP.MON_M03,0)																														"매입실적M+3",
                NVL(DWSP.MON_M04,0)																														"매입실적M+4",
                (NVL(SUM(DW.SALES_MEAN_1MON_TA),0) + NVL(MAX(DW_BOM.SALES_MEAN_1MON_TA),0)) * 6															"1개월평균",
               	(NVL(SUM(DW.SALES_MEAN_3MON_TA),0) + NVL(MAX(DW_BOM.SALES_MEAN_3MON_TA),0)) * 6															"3개월평균",
                (NVL(SUM(DW.SALES_MEAN_1WEEK_ETC),0) + NVL(MAX(DW_BOM.SALES_MEAN_1WEEK_ETC),0)) 														"1주평균",
               	(NVL(SUM(DW.SALES_MEAN_3WEEK_ETC),0) + NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)) 														"3주평균",               	
                NVL(SUM(DW.SALES_MEAN_1WEEK),0) + NVL(MAX(DW_BOM.SALES_MEAN_1WEEK),0)-SUM(DW.SALES_MEAN_3WEEK_ETC) -NVL(MAX(DW_BOM.SALES_MEAN_3WEEK),0)	"1,3주평균 편차",
                DECODE((SUM(DW.SALES_MEAN_3WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0, 0,
                TRIM(TO_CHAR( 
                ROUND((((SUM(DW.SALES_MEAN_1WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_1WEEK_ETC),0))/(SUM(DW.SALES_MEAN_3WEEK_ETC)+
                NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)))-1)*100,1),999999999990.9)))  																	"편차비율",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_MON_CUM),0)+ NVL(MAX(DW_BOM.SALES_PY_MON_CUM_TA),0)											  			   		"전년동월\n누계",
                NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0) "년누계",
                NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_INI_CUM),0)+ NVL(MAX(DW_BOM.SALES_PY_INI_CUM_TA),0)        														"전년누계",
                (NVL(MAX(DWSA.SELL_BOX_CUM),0)+NVL(SUM(DW.ISSUE_EXPT),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + 
                NVL(MAX(DW_BOM.ISSUE),0)) - (NVL(SUM(DW.SALES_PY_MON_CUM),0) + NVL(MAX(DW_BOM.SALES_PY_MON_CUM),0)+ NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) +
                NVL(MAX(DW_BOM.SALES_PY_MON_CUM_TA),0))																									"전년동일\n대비",
                (NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + 
                NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0)) - (NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_INI_CUM),0) + NVL(MAX(DW_BOM.SALES_PY_INI_CUM_TA),0))															"전년누계\n대비",               
		        NVL(DECODE(IM.BOX_PER_PALET,0,0,CEIL(((SUM(DW.BASE_STOCK)+NVL(MAX(DW_BOM.BASE_STOCK),0))/IM.BOX_PER_PALET))),0)							"기초재고(PALLET)",
		        NVL(DECODE(IM.BOX_PER_PALET,0,0,CEIL(((SUM(DW.STOCK_EXPT)+NVL(MAX(DW_BOM.STOCK_EXPT),0))/IM.BOX_PER_PALET))),0) 						"예상재고(PALLET)",
		        ROUND(((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0)) * IM.NWGT_PER_BUOM) / 1000000 , 2) 									"기초재고중량",		        
		        ROUND(NVL(DWSP2.MON_M00,0)  * IM.NWGT_PER_BUOM / 1000000, 2)																			"당월수입누계중량",
		        NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_M00,0) + NVL(DWSP2.MON_M01,0) + NVL(DWSP2.MON_M02,0) + NVL(DWSP2.MON_M03,0) +
                NVL(DWSP2.MON_M04,0) + NVL(DWSP2.MON_M05,0) + NVL(DWSP2.MON_M06,0)																		"년수입누계",
                ROUND((NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_M00,0) + NVL(DWSP2.MON_M01,0) + NVL(DWSP2.MON_M02,0) + NVL(DWSP2.MON_M03,0) +
                NVL(DWSP2.MON_M04,0) + NVL(DWSP2.MON_M05,0) + NVL(DWSP2.MON_M06,0)) * IM.NWGT_PER_BUOM / 1000000 , 2) 									"년수입누계중량",
                ROUND((NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)  + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0))
                 * IM.NWGT_PER_BUOM / 1000000, 2)																										"당월판매누계중량",
                ROUND((NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + 
                NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0)) * IM.NWGT_PER_BUOM / 1000000, 2)																	"년판매누계중량",                
		        IM.PR_TO_PO + IM.PO_TO_LC + IM.LC_TO_PORT + IM.PORT_TO_CUST 																			"리드타임"
		FROM    DC_DATAWAREHOUSE DW,
				(
				 SELECT	ITEM_ID,
				 		SUM(DY_STOCK) 	DY_STOCK,
				 		SUM(GITA_STOCK)	GITA_STOCK,
				 		SUM(CJ_STOCK)	CJ_STOCK
				 FROM	(
						 SELECT	DC.ITEM_ID,
						 		CASE 	WHEN DM.DC_ID = '1811'
						 				THEN SUM(DC.BASE_STOCK)
						 				ELSE 0
						 		END		DY_STOCK,
						 		CASE	WHEN	(DM.DC_LOC_TYPE = '사외' AND DM.DC_ID != '1811' AND DM.DC_ID != '8922')		
						 				THEN	SUM(DC.BASE_STOCK)
						 				ELSE	0
						 		END		GITA_STOCK  ,
						 		CASE	WHEN	(DM.DC_LOC_TYPE = '사외' AND DM.DC_ID = '8922')		
						 				THEN	SUM(DC.BASE_STOCK)
						 				ELSE	0
						 		END		CJ_STOCK                       
		                FROM	DC_DATAWAREHOUSE DC, DC_MST DM, ITEM_MST IM
		                WHERE	DC.CNFM_DATE 	= '$!{end_date}'                                      
		                AND		DC.DC_ID 		= DM.DC_ID
		                AND		DC.ITEM_ID		= IM.ITEM_ID
                        AND		IM.SB_FLAG  	= 'Y'
                        AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
		                GROUP
		                BY		DC.ITEM_ID, DM.DC_LOC_TYPE, DM.DC_ID
		                )
		         GROUP
		         BY		ITEM_ID
				)DW2,			
				(
        	 	SELECT	PROD_ITEM_ID,
             			ROUND(NVL(SUM(BASE_STOCK),0),0)	BASE_STOCK,
                        ROUND(NVL(SUM(SALES_PRE),0),0)	SALES_PRE,
                        ROUND(NVL(SUM(ISSUE),0),0)		ISSUE,
                        ROUND(NVL(SUM(ISSUE_EXPT),0),0)	ISSUE_EXPT,
                        ROUND(NVL(SUM(STOCK_EXPT),0),0)	STOCK_EXPT,
                        ROUND(NVL(SUM(PRE_MONTH_SELL),0),0)	PRE_MONTH_SELL,
                        ROUND(NVL(SUM(SALES_MEAN_1WEEK),0),0)	SALES_MEAN_1WEEK,
                        ROUND(NVL(SUM(SALES_MEAN_3WEEK),0),0)	SALES_MEAN_3WEEK,
                        ROUND(NVL(SUM(SALES_MEAN_1MON_TA),0),0)	SALES_MEAN_1MON_TA,
                        ROUND(NVL(SUM(SALES_MEAN_3MON_TA),0),0)	SALES_MEAN_3MON_TA,
                        ROUND(NVL(SUM(SALES_MEAN_1WEEK_ETC),0),0) SALES_MEAN_1WEEK_ETC,
                        ROUND(NVL(SUM(SALES_MEAN_3WEEK_ETC),0),0) SALES_MEAN_3WEEK_ETC,
                        ROUND(NVL(SUM(SALES_PY_MON_CUM),0),0) SALES_PY_MON_CUM,
                        ROUND(NVL(SUM(SALES_PY_MON_CUM_TA),0),0) SALES_PY_MON_CUM_TA,                                    
                        ROUND(NVL(SUM(SALES_INI_CUM),0),0) SALES_INI_CUM,
                        ROUND(NVL(SUM(SALES_INI_CUM_TA),0),0) SALES_INI_CUM_TA,
                        ROUND(NVL(SUM(SALES_PY_INI_CUM),0),0) SALES_PY_INI_CUM,
                        ROUND(NVL(SUM(SALES_PY_INI_CUM_TA),0),0) SALES_PY_INI_CUM_TA                                  
                FROM	(
                     	SELECT	S1.PROD_ITEM_ID,                         			
	                 			SUM(S2.BASE_STOCK) * (1/S1.QTY)	BASE_STOCK,
	                            SUM(S2.SALES_PRE) * (1/S1.QTY)	SALES_PRE,
	                            SUM(S2.ISSUE)	* (1/S1.QTY)	ISSUE,
	                            SUM(S2.ISSUE_EXPT) * (1/S1.QTY)	ISSUE_EXPT,
	                            SUM(S2.STOCK_EXPT) * (1/S1.QTY) STOCK_EXPT,
	                            SUM(S2.PRE_MONTH_SELL) * (1/S1.QTY) PRE_MONTH_SELL,
	                            SUM(S2.SALES_MEAN_1WEEK) * (1/S1.QTY) SALES_MEAN_1WEEK,
	                            SUM(S2.SALES_MEAN_3WEEK) * (1/S1.QTY) SALES_MEAN_3WEEK,
	                            SUM(S2.SALES_MEAN_1MON_TA) * (1/S1.QTY) SALES_MEAN_1MON_TA,
	                            SUM(S2.SALES_MEAN_3MON_TA) * (1/S1.QTY) SALES_MEAN_3MON_TA,
	                            SUM(S2.SALES_MEAN_1WEEK_ETC) * (1/S1.QTY) SALES_MEAN_1WEEK_ETC,
	                            SUM(S2.SALES_MEAN_3WEEK_ETC) * (1/S1.QTY) SALES_MEAN_3WEEK_ETC,
	                            SUM(S2.SALES_PY_MON_CUM) * (1/S1.QTY) SALES_PY_MON_CUM,
	                            SUM(S2.SALES_PY_MON_CUM_TA) * (1/S1.QTY) SALES_PY_MON_CUM_TA,
	                            SUM(S2.SALES_INI_CUM) * (1/S1.QTY) SALES_INI_CUM,
	                            SUM(S2.SALES_INI_CUM_TA) * (1/S1.QTY) SALES_INI_CUM_TA,
	                            SUM(S2.SALES_PY_INI_CUM) * (1/S1.QTY) SALES_PY_INI_CUM,
	                            SUM(S2.SALES_PY_INI_CUM_TA) * (1/S1.QTY) SALES_PY_INI_CUM_TA                                                                              
                      	FROM	(
                         		SELECT  IM.ITEM_ID, 
	                                    IM.ITEM_NAME,		
	                                    MB.CONS_ITEM_ID,
	                                    MAX(MB.PROD_VER),    
	                                    MB.PROD_ITEM_ID,      
	                                    MB.CONS_QTY,
	                                    NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
	                                    MB.CONS_QTY_UOM      
	                            FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
	                            WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
	                            AND		IM.ITEM_ID	= ITM.ITEM_CD
	                            AND		IM.ITYPE		= 'HAWA'	
	                            AND		(IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')	                         
	                            
	                            GROUP 
	                            BY 		IM.ITEM_ID, 
	                                    IM.ITEM_NAME,
	                                    MB.CONS_ITEM_ID,
	                                    MB.PROD_ITEM_ID,
	                                    MB.CONS_QTY,
	                                    MB.CONS_QTY_UOM, 
	                                    IM.QTY
                            	)S1, DC_DATAWAREHOUSE S2
                        WHERE	S1.ITEM_ID = S2.ITEM_ID
                        AND	  	S2.CNFM_DATE	='$!{end_date}'
                        GROUP
                        BY		S1.QTY,S1.PROD_ITEM_ID
                        )
                GROUP 
                BY 		PROD_ITEM_ID
                )DW_BOM,
                (
                SELECT	PROD_ITEM_ID,             			
                        SUM(DY_STOCK)	DY_STOCK,
                        SUM(GITA_STOCK) GITA_STOCK ,
                        SUM(CJ_STOCK)	CJ_STOCK                    
                FROM	(
                     	SELECT	S1.PROD_ITEM_ID,  
                                (
                                CASE 	WHEN S3.DC_ID = '1811'
						 				THEN SUM(S2.BASE_STOCK)
						 				ELSE 0
						 		END
                                )	* (1/S1.QTY)	DY_STOCK,
                                (
                                CASE 	WHEN S3.DC_ID = '8922'
						 				THEN SUM(S2.BASE_STOCK)
						 				ELSE 0
						 		END
                                )	* (1/S1.QTY)	CJ_STOCK,
						 		(
                                CASE	WHEN	(S3.DC_LOC_TYPE = '사외' AND S3.DC_ID NOT IN  ('1811','8922'))
						 				THEN	SUM(S2.BASE_STOCK)
						 				ELSE	0
						 		END		
                                ) * (1/S1.QTY)		GITA_STOCK                                         
                      	FROM	(
                         		SELECT  IM.ITEM_NAME,		
	                                    MB.CONS_ITEM_ID	ITEM_ID,		--완제품
	                                    MAX(MB.PROD_VER),    
	                                    MB.PROD_ITEM_ID,     	--소분제품 
	                                    MB.CONS_QTY,
	                                    NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
	                                    MB.CONS_QTY_UOM      
	                            FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
	                            WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
	                            AND		IM.ITEM_ID	= ITM.ITEM_CD
	                            AND		IM.ITYPE		= 'HAWA'	
	                            AND		(IM.SELL_STOP_DATE > TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')	
	                            GROUP 
	                            BY 		IM.ITEM_ID, 
	                                    IM.ITEM_NAME,
	                                    MB.CONS_ITEM_ID,
	                                    MB.PROD_ITEM_ID,
	                                    MB.CONS_QTY,
	                                    MB.CONS_QTY_UOM, 
	                                    IM.QTY
                            	)S1, DC_DATAWAREHOUSE S2, DC_MST S3
                        WHERE	S1.ITEM_ID = S2.ITEM_ID
                        AND	  	S2.CNFM_DATE	='$!{end_date}'
                        AND		S2.DC_ID		= S3.DC_ID
                        GROUP
                        BY		S1.QTY,S1.PROD_ITEM_ID, S3.DC_LOC_TYPE, S3.DC_ID
                        )
                GROUP 
                BY 		PROD_ITEM_ID
                )DW2_BOM, 
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
				-- AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
				 AND	IM.SB_FLAG 	= 'Y'                 			 
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,	
		       (
				SELECT  ITEM_ID,
						MON_M00,
						MON_M01,
						MON_M02,
						MON_M03,
						MON_M04
				FROM	DC_RECEIVE_PR
				WHERE	VERSION =  '$!{end_date}'
				AND		GUBN ='2'
		       )DWSP,
		       (
		       	SELECT	ITEM_ID,
				        SUM(RECEIPT_M)  RECEIPT_M, 
				        SUM(RECEIPT_M2) RECEIPT_M2,
				        SUM(RECEIPT_M3) RECEIPT_M3
				FROM	(
 						SELECT	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM'),'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+9,'YYYYMMDD')
		                        THEN SUM(RECEIPT_EXPT)
		                        ELSE 0
		                        END     RECEIPT_M,
		                    	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+10,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+19,'YYYYMMDD')
		                        THEN SUM(RECEIPT_EXPT)
		                        ELSE 0
		                        END     RECEIPT_M2,    
		                     	CASE WHEN S1.CNFM_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'MM')+20,'YYYYMMDD') AND TO_CHAR(LAST_DAY(TRUNC(TO_DATE('$!{end_date}'))),'YYYYMMDD')
		                        THEN SUM(RECEIPT_EXPT)
		                        ELSE 0
		                        END     RECEIPT_M3,  
		                        S1.ITEM_ID
             			FROM 	DC_DATAWAREHOUSE S1, ITEM_MST S2
			            WHERE 	S1.CNFM_DATE BETWEEN '$!{start_date}' AND TO_CHAR(LAST_DAY(TRUNC(TO_DATE('$!{end_date}'))),'YYYYMMDD')
			            AND 	S1.ITEM_ID = S2.ITEM_ID
			            AND 	S2.SB_FLAG ='Y'
			            AND 	CNFM_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
			            HAVING 	SUM(RECEIPT_EXPT) > 0
			            GROUP 
			            BY 		S1.CNFM_DATE, S1.ITEM_ID
            			)		
            	GROUP BY ITEM_ID
               )RC,           
		      (		 
			 SELECT		ITEM_ID,
			 			MAX(DECODE(NO,1,MON_P01,0))		MON_P01,
			 			MAX(DECODE(NO,2,MON_P02,0))		MON_P02,
			            MAX(DECODE(NO,3,MON_P03,0))		MON_P03,
			            MAX(DECODE(NO,4,MON_P04,0))		MON_P04,
			            MAX(DECODE(NO,5,MON_P05,0))		MON_P05,
			            MAX(DECODE(NO,6,MON_P06,0))		MON_P06,
			            MAX(DECODE(NO,7,MON_P07,0))		MON_P07,
			            MAX(DECODE(NO,8,MON_P08,0))		MON_P08,
			            MAX(DECODE(NO,9,MON_P09,0))		MON_P09,
			            MAX(DECODE(NO,10,MON_P10,0))	MON_P10,
			            MAX(DECODE(NO,11,MON_P11,0))	MON_P11,
			            MAX(DECODE(NO,12,MON_M00,0))	MON_M00,
			            MAX(DECODE(NO,13,MON_M01,0))	MON_M01,
			            MAX(DECODE(NO,14,MON_M02,0))	MON_M02,
			            MAX(DECODE(NO,15,MON_M03,0))	MON_M03,
			            MAX(DECODE(NO,16,MON_M04,0))	MON_M04,
			            MAX(DECODE(NO,17,MON_M05,0))	MON_M05,
			            MAX(DECODE(NO,18,MON_M06,0)) 	MON_M06,
			            MAX(NO)							NO
			 FROM		(
			 			SELECT  ITEM_ID,
		 						TO_CHAR(MON_P11)	MON_P11,
		                		TO_CHAR(MON_P10)	MON_P10,
		                        TO_CHAR(MON_P09)	MON_P09,
		                        TO_CHAR(MON_P08)	MON_P08,
		                        TO_CHAR(MON_P07)	MON_P07,
		                        TO_CHAR(MON_P06)	MON_P06,
		                        TO_CHAR(MON_P05)	MON_P05,
		                        TO_CHAR(MON_P04)	MON_P04,
		                        TO_CHAR(MON_P03)	MON_P03,
		                        TO_CHAR(MON_P02)	MON_P02,
		                        TO_CHAR(MON_P01)	MON_P01,
		                        TO_CHAR(MON_M00)	MON_M00,
		                        TO_CHAR(MON_M01)	MON_M01,
		                        TO_CHAR(MON_M02)	MON_M02,
		                        TO_CHAR(MON_M03)	MON_M03,
		                        TO_CHAR(MON_M04)	MON_M04,
		                        TO_CHAR(MON_M05)	MON_M05,
		                        TO_CHAR(MON_M06)	MON_M06,
		                        T.NO                     
						FROM    DC_RECEIVE_PR L, 
		                		(
		                        SELECT 	ROWNUM NO, 
		                        		TO_CHAR(ROWNUM, 'FM00') NO2 
		                        FROM 	USER_OBJECTS 
		                        WHERE ROWNUM &lt; 19
		                        ) T
						WHERE	VERSION =   '$!{end_date}'
					 	AND 	GUBN='1'
		                AND   	T.NO &lt;= 18
		                ORDER 
		                BY 		T.NO
                		)
                WHERE 	NO BETWEEN 1 	AND SUBSTR(TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),5,6) - SUBSTR(TO_CHAR(TRUNC(SYSDATE,'YY'),'YYYYMM'),5,6)
               	OR		NO BETWEEN 12 	AND 12 + SUBSTR(TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),11),'YYYYMM'),5,6) - SUBSTR(TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),5,6)
               	GROUP 
               	BY 		ITEM_ID
		       	)DWSP2,
               (--판매실적 누계 --타계정포함
                SELECT	ITEM_ID,
                		ROUND(SUM(SELL_BOX_CUM),0) SELL_BOX_CUM
                FROM	(
		                SELECT	 PROD_ITEM_ID ITEM_ID,
		                		 SUM(SELL_BOX_CUM) SELL_BOX_CUM
		                FROM	(
				                SELECT   IM.PROD_ITEM_ID,				                		 
				                         SUM(SA.QTY) * (1/IM.QTY) SELL_BOX_CUM
				                FROM     SALES_ACT SA,
		                		 		 DC_MST DM,
		                         		(
				                        SELECT  MB.PROD_ITEM_ID,
				                        		MB.CONS_ITEM_ID,
				                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				                                MB.CONS_QTY_UOM      
				                        FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
				                        WHERE	IM.ITEM_ID 	= MB.CONS_ITEM_ID
				                        AND		IM.ITEM_ID	= ITM.ITEM_CD
				                        AND		IM.ITYPE	= 'HAWA'	
				                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')				                        
				                        AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				                                OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
					                    GROUP 
					                    BY 		IM.ITEM_ID, 
					                            IM.ITEM_NAME,
					                            MB.CONS_ITEM_ID,
					                            MB.PROD_ITEM_ID,
					                            MB.CONS_QTY,
					                            MB.CONS_QTY_UOM, 
					                            IM.QTY
		                         		) IM,
			                         (
			                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
									 FROM	CAL_MST
									 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
					                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
			                         )    CAL                            
				                WHERE    SA.ITEM_ID = IM.CONS_ITEM_ID
				                AND      SA.SALE_DATE = CAL.YYYYMMDD
				                AND		 SA.DELIV_LOC = DM.DC_ID
				                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
				                GROUP 
				                BY 		IM.PROD_ITEM_ID, IM.QTY
		                		)
		                GROUP BY PROD_ITEM_ID
		                UNION ALL
		                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
		                FROM     SALES_ACT SA,
		                		 DC_MST DM,
		                         (
		                         SELECT *
				                 FROM   ITEM_MST IM
				                 WHERE	IM.ITYPE		= 'HAWA'	
								 AND	IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								 AND	IM.SB_FLAG 	= 'Y'
				                 AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
						    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
		                         ) IM,
		                         (
		                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
								 FROM	CAL_MST
								 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
				                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
		                         )CAL                            
		                WHERE    SA.ITEM_ID = IM.ITEM_ID
		                AND      SA.SALE_DATE = CAL.YYYYMMDD
		                AND		 SA.DELIV_LOC = DM.DC_ID
		                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
		                GROUP BY SA.ITEM_ID
		                )
		                GROUP BY ITEM_ID
               	)DWSA,               
		       	DC_MST DM 
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND		DW.ITEM_ID		= DWSP2.ITEM_ID(+)
		AND		DW.ITEM_ID		= DW2.ITEM_ID(+)
		AND		DW.ITEM_ID		= DW_BOM.PROD_ITEM_ID(+)
		AND		DW.ITEM_ID		= DW2_BOM.PROD_ITEM_ID(+)
		AND     DW.ITEM_ID      = DWSA.ITEM_ID	(+)	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03		
        AND		CM.CD_GRP		= 'SALES_CAT3'
		AND		(DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914') )   --동우,대현 창고 추가 이승용대리 요청 2014-12-09 
		AND     DW.CNFM_DATE	= '$!{end_date}'
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
		AND		IM.SALES_CAT03 LIKE '%'||'$!{sales_cat03}'||'%'
		AND     DW.ITEM_ID = RC.ITEM_ID(+)
		GROUP 
		BY  	SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, BOX_PER_PALET, IM.JGC_DUE_DATE, DWSP.MON_M00,
				DWSP.MON_M00, DWSP.MON_M01, DWSP.MON_M02, DWSP.MON_M03, DWSP.MON_M04, IM.PR_TO_PO, IM.PO_TO_LC, IM.LC_TO_PORT, IM.PORT_TO_CUST, DW2.DY_STOCK, DW2.GITA_STOCK,
				DW2_BOM.DY_STOCK, DW2_BOM.GITA_STOCK,IM.NWGT_PER_BUOM, DWSP2.MON_P11, DWSP2.MON_P10, DWSP2.MON_P09, DWSP2.MON_P08, DWSP2.MON_P07, DWSP2.MON_P06, 
                DWSP2.MON_P05, DWSP2.MON_P04, DWSP2.MON_P03, DWSP2.MON_P02, DWSP2.MON_P01, DWSP2.MON_M00, DWSP2.MON_M01, DWSP2.MON_M02, DWSP2.MON_M03, DWSP2.MON_M04, 
                DWSP2.MON_M05, DWSP2.MON_M06,RC.RECEIPT_M,RC.RECEIPT_M2,RC.RECEIPT_M3, DW2.CJ_STOCK, DW2_BOM.CJ_STOCK
		ORDER 
		BY 		SALES_CAT05, SALES_CAT03, DW.ITEM_ID
		)A
		ORDER 
		BY		A.SALES_CAT05, A.SALES_CAT03, A.ITEM_ID

	</query>
	
	<query id="ip_01140_inventoryPlanAnalysis_md_list_pop" paging="false">	
	#if("$!{gubn}" == "1")
		SELECT  F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
		      	SUM(DW.BASE_STOCK_2)              																			   			   "기초재고",
                SUM(DW.OUT_STOCK)  																										   "사외재고",
                TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND(SUM(DW.BASE_STOCK)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9))  "재고일수",
                NVL(MAX(IM.PROD_TERM),0)																								   "유통기한\n경과일수",
                MAX(IM.PROD_TERM) * SUM(DW.BASE_STOCK)																					   "경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * SUM(DW.BASE_STOCK)																			   "유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   "유통기한일",
                ROUND(DECODE(MAX(CIM.TERM_VAL),0,0,(MAX(IM.PROD_TERM)/MAX(CIM.TERM_VAL * 30))*100),1) 						   		   	   "유통기한경과율",
                SUM(DW.SALES_PRE)      																		 							   "전일계",
                SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)      													 							   "일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)    						 							   "누계",                
                SUM(DW.BASE_STOCK_2) -  SUM(DW.ISSUE_EXPT) - SUM(DW.ISSUE)              													"예상재고",
                NVL(SUM(DW.PRE_MONTH_SELL),0) 																								"전월계",                
                NVL(DWSP.MON_M00,0)																											"매입실적\nM",
                NVL(DWSP.MON_M01,0)																											"매입실적\nM+1",
                NVL(DWSP.MON_M02,0)																											"매입실적\nM+2",
                NVL(DWSP.MON_M03,0)																											"매입실적\nM+3",
               	NVL(SUM(DW.SALES_MEAN_1MON_TA),0) *6																						"1개월 평균",
               	NVL(SUM(DW.SALES_MEAN_3MON_TA),0) *6																						"3개월 평균",
                SUM(DW.SALES_MEAN_1MON_TA)-SUM(DW.SALES_MEAN_3MON_TA)                							 					   		"1,3주평균 편차",
                DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0, 0,
                TRIM(TO_CHAR( 
                ROUND(((SUM(DW.SALES_MEAN_1WEEK_ETC)/SUM(DW.SALES_MEAN_3WEEK_ETC))-1)*100,1) 
                ,999999999990.9)))  																									   "편차비율",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0)											  			   "전년동월\n누계",
                SUM(SALES_INI_CUM)+SUM(SALES_INI_CUM_TA)               																	   "년누계",
                SUM(SALES_PY_INI_CUM)+SUM(SALES_PY_INI_CUM_TA)              															   "전년누계",
                (NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE))-
                (NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0))													   "전년동일\n대비",
                (SUM(SALES_INI_CUM)+SUM(SALES_INI_CUM_TA))-(SUM(SALES_PY_INI_CUM)+SUM(SALES_PY_INI_CUM_TA))								   "전년누계\n대비",               
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.BASE_STOCK)/IM.BOX_PER_PALET)))												   "기초재고(PALLET)",
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.STOCK_EXPT)/IM.BOX_PER_PALET))) 											  	   "예상재고(PALLET)"		       
		FROM    (
        		SELECT	CASE WHEN DM.DC_LOC_TYPE ='사외'
		                	 THEN 0
		                	 ELSE DW.BASE_STOCK
		                	 END              					BASE_STOCK_2,
                        CASE WHEN DM.DC_LOC_TYPE ='사외'
		                	 THEN DW.BASE_STOCK
		                	 ELSE 0
		                	 END            					OUT_STOCK,
                        DW.*               		
                FROM	DC_DATAWAREHOUSE DW, DC_MST DM
                WHERE	DW.CNFM_DATE = '$!{cnfm_date}'
                AND		DW.DC_ID = DM.DC_ID                  
				)DW,
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                 ) IM,	
		       (
				SELECT  ITEM_ID,
						MON_M00,
						MON_M01,
						MON_M02,
						MON_M03
				FROM	DC_RECEIVE_PR
				WHERE	VERSION =  '$!{cnfm_date}'
				AND		GUBN='2'       
		       )DWSP,
               (               
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE	IM.ITYPE		= 'HAWA'	
						 AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD') AND  '$!{cnfm_date}'		                		
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID
                AND		 SA.ITEM_ID IN (
		        						SELECT	DISTINCT
		        								PROD_ITEM_ID
		        						FROM	MBOM
		        						WHERE	CONS_ITEM_ID = '$!{item_id}'
		        						UNION ALL
		                                SELECT	'$!{item_id}' PROD_ITEM_ID
		                                FROM	DUAL
		        						)
                AND      sa.sale_date = CAL.YYYYMMDD
                AND		 SA.DELIV_LOC = DM.DC_ID
                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
                GROUP BY SA.ITEM_ID
               )DWSA,               
		       DC_MST DM		      
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND     DW.ITEM_ID      = DWSA.ITEM_ID(+)
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		DW.ITEM_ID	IN (
        						SELECT	DISTINCT
        								PROD_ITEM_ID
        						FROM	MBOM
        						WHERE	CONS_ITEM_ID = '$!{item_id}'
        						UNION ALL
                                SELECT	'$!{item_id}' PROD_ITEM_ID
                                FROM	DUAL
        						)	
		AND		(DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914') )   
		AND     DW.CNFM_DATE	= '$!{cnfm_date}'
		GROUP BY  SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, BOX_PER_PALET, IM.JGC_DUE_DATE, DWSP.MON_M00,
				  DWSP.MON_M01, DWSP.MON_M02, DWSP.MON_M03
		ORDER BY  SALES_CAT05, SALES_CAT03, DW.ITEM_ID
	#else	
		SELECT  F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
		      	SUM(DW.BASE_STOCK_2)              																			   			   "기초재고",
                SUM(DW.OUT_STOCK)  																										   "사외재고",
                TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_1MON_TA),0,0,ROUND(SUM(DW.BASE_STOCK)/SUM(DW.SALES_MEAN_1MON_TA),1)) ,999999999990.9))  "재고일수",
                NVL(MAX(IM.PROD_TERM),0)																								   "유통기한\n경과일수",
                MAX(IM.PROD_TERM) * SUM(DW.BASE_STOCK)																					   "경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * SUM(DW.BASE_STOCK)																			   "유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   "유통기한일",
                ROUND(DECODE(MAX(CIM.TERM_VAL),0,0,(MAX(IM.PROD_TERM)/MAX(CIM.TERM_VAL * 30))*100),1) 						   		   	   "유통기한경과율",
                SUM(DW.SALES_PRE)      																		 							   "전일계",
                SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)      													 							   "일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)    						 							   "누계",                
                SUM(DW.BASE_STOCK_2) -  SUM(DW.ISSUE_EXPT) - SUM(DW.ISSUE)              													"예상재고",
                NVL(SUM(DW.PRE_MONTH_SELL),0) 																								"전월계",                
                NVL(DWSP.MON_M00,0)																											"매입실적\nM",
                NVL(DWSP.MON_M01,0)																											"매입실적\nM+1",
                NVL(DWSP.MON_M02,0)																											"매입실적\nM+2",
                NVL(DWSP.MON_M03,0)																											"매입실적\nM+3",
               	NVL(SUM(DW.SALES_MEAN_1MON_TA),0) *6																						"1개월 평균",
               	NVL(SUM(DW.SALES_MEAN_3MON_TA),0) *6																						"3개월 평균",
                SUM(DW.SALES_MEAN_1MON_TA)-SUM(DW.SALES_MEAN_3MON_TA)                							 					   		"1,3주평균 편차",
                DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0, 0,
                TRIM(TO_CHAR( 
                ROUND(((SUM(DW.SALES_MEAN_1WEEK_ETC)/SUM(DW.SALES_MEAN_3WEEK_ETC))-1)*100,1) 
                ,999999999990.9)))  																									   "편차비율",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0)											  			   "전년동월\n누계",
                SUM(SALES_INI_CUM)+SUM(SALES_INI_CUM_TA)               																	   "년누계",
                SUM(SALES_PY_INI_CUM)+SUM(SALES_PY_INI_CUM_TA)              															   "전년누계",
                (NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE))-
                (NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0))													   "전년동일\n대비",
                (SUM(SALES_INI_CUM)+SUM(SALES_INI_CUM_TA))-(SUM(SALES_PY_INI_CUM)+SUM(SALES_PY_INI_CUM_TA))								   "전년누계\n대비",               
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.BASE_STOCK)/IM.BOX_PER_PALET)))												   "기초재고(PALLET)",
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.STOCK_EXPT)/IM.BOX_PER_PALET))) 											  	   "예상재고(PALLET)"		       
		FROM    (
        		SELECT	CASE WHEN DM.DC_LOC_TYPE ='사외'
		                	 THEN 0
		                	 ELSE DW.BASE_STOCK
		                	 END              					BASE_STOCK_2,
                        CASE WHEN DM.DC_LOC_TYPE ='사외'
		                	 THEN DW.BASE_STOCK
		                	 ELSE 0
		                	 END            					OUT_STOCK,
                        DW.*               		
                FROM	DC_DATAWAREHOUSE DW, DC_MST DM
                WHERE	DW.CNFM_DATE = '$!{cnfm_date}'
                AND		DW.DC_ID = DM.DC_ID                  
				)DW,
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                 ) IM,	
		       (
				SELECT  ITEM_ID,
						MON_M00,
						MON_M01,
						MON_M02,
						MON_M03
				FROM	DC_RECEIVE_PR
				WHERE	VERSION =  '$!{cnfm_date}'
				AND		GUBN='2'       
		       )DWSP,
               (               
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE	IM.ITYPE		= 'HAWA'	
						 AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),'YYYYMMDD') AND  '$!{cnfm_date}'		                		
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID
                AND		 SA.ITEM_ID IN (
		        						SELECT	DISTINCT
		        								CONS_ITEM_ID
		        						FROM	MBOM
		        						WHERE	PROD_ITEM_ID = '$!{item_id}'
		        						UNION ALL
		                                SELECT	'$!{item_id}' CONS_ITEM_ID
		                                FROM	DUAL
		        						)
                AND      sa.sale_date = CAL.YYYYMMDD
                AND		 SA.DELIV_LOC = DM.DC_ID
                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
                GROUP BY SA.ITEM_ID
               )DWSA,               
		       DC_MST DM		      
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND     DW.ITEM_ID      = DWSA.ITEM_ID(+)
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		DW.ITEM_ID	IN (
        						SELECT	DISTINCT
        								CONS_ITEM_ID
        						FROM	MBOM
        						WHERE	PROD_ITEM_ID = '$!{item_id}'
        						UNION ALL
                                SELECT	'$!{item_id}' CONS_ITEM_ID
                                FROM	DUAL
        						)	
		AND		(DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914') )   
		AND     DW.CNFM_DATE	= '$!{cnfm_date}'
		GROUP BY  SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, BOX_PER_PALET, IM.JGC_DUE_DATE, DWSP.MON_M00,
				  DWSP.MON_M01, DWSP.MON_M02, DWSP.MON_M03
		ORDER BY  SALES_CAT05, SALES_CAT03 DESC, DW.ITEM_ID 
	#end

	</query>
	
	<query id="ip_01150_inventoryPlanAnalysis_md_list" paging="false">	
		SELECT	A.*,				
				ROWNUM
		FROM
		(
		SELECT	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
		        DECODE(MAX(FLAG.CONS_ITEM_ID),NULL,'F','T')																								BOM_FLAG,		       
                NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0)  - (NVL(DW2.BASE_STOCK,0) + ROUND(NVL(DW2_BOM.BASE_STOCK,0),0))               "기초재고",
                NVL(DW2.BASE_STOCK,0) + ROUND(NVL(DW2_BOM.BASE_STOCK,0),0)																				"사외재고",
                TRIM(TO_CHAR( DECODE( (SUM(DW.SALES_MEAN_3WEEK_ETC)+NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0,0,           
                ROUND((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0))/(SUM(DW.SALES_MEAN_3WEEK_ETC) + 
                NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)),0)) ,999999999990.9)) 																			"재고일수",                
                NVL(DWSS.MON_M00,0)																														"매입예정M", 
                NVL(DWSP.MON_P00,0)	 																													"매입누계",
                NVL(DWSP.MON_P01,0)	 																													"전월매입",
                NVL(SUM(DW.STOCK_EXPT),0) + NVL(MAX(DW_BOM.STOCK_EXPT),0) - (NVL(DW2.BASE_STOCK,0) + ROUND(NVL(DW2_BOM.BASE_STOCK,0),0))            	"예상재고",                
               	NVL(SUM(DW.SALES_PRE),0)+ NVL(MAX(DW_BOM.SALES_PRE),0)      																		 	"전일계",
                NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0)       						"일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)  + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0)   			"당월누계",                
                NVL(SUM(DW.PRE_MONTH_SELL),0) 	+ NVL(MAX(DW_BOM.PRE_MONTH_SELL),0)																		"전월계",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_MON_CUM),0)+ NVL(MAX(DW_BOM.SALES_PY_MON_CUM_TA),0)											  			   		"전년동월\n누계",                
                (NVL(MAX(DWSA.SELL_BOX_CUM),0)+NVL(SUM(DW.ISSUE_EXPT),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) + 
                NVL(MAX(DW_BOM.ISSUE),0)) - (NVL(SUM(DW.SALES_PY_MON_CUM),0) + NVL(MAX(DW_BOM.SALES_PY_MON_CUM),0)+ NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) +
                NVL(MAX(DW_BOM.SALES_PY_MON_CUM_TA),0))																									"전년동일\n대비",
                NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0) "년누계",
                NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_INI_CUM),0)+ NVL(MAX(DW_BOM.SALES_PY_INI_CUM_TA),0)        														"전년누계",
                (NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + 
                NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0)) - (NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0) + 
                NVL(MAX(DW_BOM.SALES_PY_INI_CUM),0) + NVL(MAX(DW_BOM.SALES_PY_INI_CUM_TA),0))															"전년누계\n대비", 
                (NVL(SUM(DW.SALES_MEAN_1WEEK_ETC),0) + NVL(MAX(DW_BOM.SALES_MEAN_1WEEK_ETC),0)) 														"1주평균",
               	(NVL(SUM(DW.SALES_MEAN_3WEEK_ETC),0) + NVL(MAX(DW_BOM.SALES_MEAN_3WEEK_ETC),0)) 														"3주평균",
               	NVL(MAX(IM.PROD_TERM),0)																								   				"입고\n경과일수",
                MAX(IM.PROD_TERM) * (SUM(DW.BASE_STOCK)+ NVL(MAX(DW_BOM.BASE_STOCK),0))																	"경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * (SUM(DW.BASE_STOCK)  + NVL(MAX(DW_BOM.BASE_STOCK),0))															"유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   				"유통기한일",
                TO_CHAR(ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1),'FM9990D99')||'%' 	"유통기한경과율", 
		        ROUND(((NVL(SUM(DW.BASE_STOCK),0) + NVL(MAX(DW_BOM.BASE_STOCK),0)) * IM.NWGT_PER_BUOM	) / 1000000 , 2) 								"기초재고중량",		        
		        ROUND(NVL(DWSP.MON_P00,0)  * IM.NWGT_PER_BUOM / 1000000, 2)																				"당월입고누계중량",
		        NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_P00,0) 																							"년입고누계",
                ROUND((NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_P00,0) ) * IM.NWGT_PER_BUOM / 1000000 , 2) 														"년입고누계중량",
                ROUND((NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)  + NVL(MAX(DW_BOM.ISSUE),0) + NVL(MAX(DW_BOM.ISSUE_EXPT),0))
                 * IM.NWGT_PER_BUOM / 1000000, 2)																										"당월누계중량",
                ROUND((NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0) + NVL(MAX(DW_BOM.SALES_INI_CUM),0) + 
                NVL(MAX(DW_BOM.SALES_INI_CUM_TA),0)) * IM.NWGT_PER_BUOM / 1000000, 2)																	"년누계중량"
		FROM    DC_DATAWAREHOUSE DW,	
				(
				 SELECT	ITEM_ID,
				 		SUM(BASE_STOCK) 	BASE_STOCK				 		
				 FROM	(
						 SELECT	DC.ITEM_ID,
						 	SUM(DC.BASE_STOCK) BASE_STOCK                    
		                FROM	DC_DATAWAREHOUSE DC, DC_MST DM, ITEM_MST IM
		                WHERE	DC.CNFM_DATE 	= '$!{end_date}'                                      
		                AND		DC.DC_ID 		= DM.DC_ID
		                AND		DC.ITEM_ID		= IM.ITEM_ID
		                AND		IM.RC_FLAG		= 'Y'
		                AND		DC.DC_ID !='1845'	--N카페 제거 2015-07-07 이승용 대리 요청
		                AND		DM.DC_LOC_TYPE ='사외'
		                GROUP
		                BY		DC.ITEM_ID, DM.DC_LOC_TYPE, DM.DC_ID
		                )
		         GROUP
		         BY		ITEM_ID
				)DW2,
				(
                SELECT	CONS_ITEM_ID,             			
                        SUM(BASE_STOCK)	BASE_STOCK                                           
                FROM	(
                     	SELECT	S1.CONS_ITEM_ID,
	                 			S1.PROD_ITEM_ID, 
	                 			SUM(S2.BASE_STOCK) * S1.QTY	BASE_STOCK                                                                       
                      	FROM	(
                         		SELECT  IM.ITEM_ID, 
	                                    IM.ITEM_NAME,		
	                                    MB.CONS_ITEM_ID,
	                                    MAX(MB.PROD_VER),    
	                                    MB.PROD_ITEM_ID,      
	                                    MB.CONS_QTY,
	                                    NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
	                                    MB.CONS_QTY_UOM      
	                            FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
	                            WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
	                            AND		IM.ITEM_ID	= ITM.ITEM_CD
	                            AND		IM.ITYPE		= 'HAWA'	
	                            AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
	                            AND		IM.RC_FLAG = 'Y'
	                            GROUP 
	                            BY 		IM.ITEM_ID, 
	                                    IM.ITEM_NAME,
	                                    MB.CONS_ITEM_ID,
	                                    MB.PROD_ITEM_ID,
	                                    MB.CONS_QTY,
	                                    MB.CONS_QTY_UOM, 
	                                    IM.QTY
                            	)S1, 
                            	DC_DATAWAREHOUSE S2, 
                            	DC_MST S3
                        WHERE	S1.PROD_ITEM_ID = S2.ITEM_ID
                        AND		S3.DC_LOC_TYPE	= '사외'
                        AND	  	S2.CNFM_DATE	='$!{end_date}'
                        AND		S2.DC_ID		= S3.DC_ID
                        GROUP
                        BY		S1.QTY, S1.CONS_ITEM_ID,S1.PROD_ITEM_ID, S3.DC_LOC_TYPE, S3.DC_ID
                        )
                GROUP BY CONS_ITEM_ID
                )DW2_BOM, 			
				(
        	 	SELECT	CONS_ITEM_ID,
             			ROUND(NVL(SUM(BASE_STOCK),0),0)	BASE_STOCK,
                        ROUND(NVL(SUM(SALES_PRE),0),0)	SALES_PRE,
                        ROUND(NVL(SUM(ISSUE),0),0)		ISSUE,
                        ROUND(NVL(SUM(ISSUE_EXPT),0),0)	ISSUE_EXPT,
                        ROUND(NVL(SUM(STOCK_EXPT),0),0)	STOCK_EXPT,
                        ROUND(NVL(SUM(PRE_MONTH_SELL),0),0)	PRE_MONTH_SELL,
                        ROUND(NVL(SUM(SALES_MEAN_1WEEK),0),0)	SALES_MEAN_1WEEK,
                        ROUND(NVL(SUM(SALES_MEAN_3WEEK),0),0)	SALES_MEAN_3WEEK,
                        ROUND(NVL(SUM(SALES_MEAN_1MON_TA),0),0)	SALES_MEAN_1MON_TA,
                        ROUND(NVL(SUM(SALES_MEAN_3MON_TA),0),0)	SALES_MEAN_3MON_TA,
                        ROUND(NVL(SUM(SALES_MEAN_1WEEK_ETC),0),0) SALES_MEAN_1WEEK_ETC,
                        ROUND(NVL(SUM(SALES_MEAN_3WEEK_ETC),0),0) SALES_MEAN_3WEEK_ETC,
                        ROUND(NVL(SUM(SALES_PY_MON_CUM),0),0) SALES_PY_MON_CUM,
                        ROUND(NVL(SUM(SALES_PY_MON_CUM_TA),0),0) SALES_PY_MON_CUM_TA,                                    
                        ROUND(NVL(SUM(SALES_INI_CUM),0),0) SALES_INI_CUM,
                        ROUND(NVL(SUM(SALES_INI_CUM_TA),0),0) SALES_INI_CUM_TA,
                        ROUND(NVL(SUM(SALES_PY_INI_CUM),0),0) SALES_PY_INI_CUM,
                        ROUND(NVL(SUM(SALES_PY_INI_CUM_TA),0),0) SALES_PY_INI_CUM_TA                                  
                FROM	(
                     	SELECT	S1.CONS_ITEM_ID,
	                 			S1.PROD_ITEM_ID,                         			
	                 			SUM(S2.BASE_STOCK) * S1.QTY	BASE_STOCK,
	                            SUM(S2.SALES_PRE) * S1.QTY	SALES_PRE,
	                            SUM(S2.ISSUE)	* S1.QTY	ISSUE,
	                            SUM(S2.ISSUE_EXPT) * S1.QTY	ISSUE_EXPT,
	                            SUM(S2.STOCK_EXPT) * S1.QTY STOCK_EXPT,
	                            SUM(S2.PRE_MONTH_SELL) * S1.QTY PRE_MONTH_SELL,
	                            SUM(S2.SALES_MEAN_1WEEK) * S1.QTY SALES_MEAN_1WEEK,
	                            SUM(S2.SALES_MEAN_3WEEK) * S1.QTY SALES_MEAN_3WEEK,
	                            SUM(S2.SALES_MEAN_1MON_TA) * S1.QTY SALES_MEAN_1MON_TA,
	                            SUM(S2.SALES_MEAN_3MON_TA) * S1.QTY SALES_MEAN_3MON_TA,
	                            SUM(S2.SALES_MEAN_1WEEK_ETC) * S1.QTY SALES_MEAN_1WEEK_ETC,
	                            SUM(S2.SALES_MEAN_3WEEK_ETC) * S1.QTY SALES_MEAN_3WEEK_ETC,
	                            SUM(S2.SALES_PY_MON_CUM) * S1.QTY SALES_PY_MON_CUM,
	                            SUM(S2.SALES_PY_MON_CUM_TA) * S1.QTY SALES_PY_MON_CUM_TA,
	                            SUM(S2.SALES_INI_CUM) * S1.QTY SALES_INI_CUM,
	                            SUM(S2.SALES_INI_CUM_TA) * S1.QTY SALES_INI_CUM_TA,
	                            SUM(S2.SALES_PY_INI_CUM) * S1.QTY SALES_PY_INI_CUM,
	                            SUM(S2.SALES_PY_INI_CUM_TA) * S1.QTY SALES_PY_INI_CUM_TA                                                                
                      	FROM	(
                         		SELECT  IM.ITEM_ID, 
	                                    IM.ITEM_NAME,		
	                                    MB.CONS_ITEM_ID,
	                                    MAX(MB.PROD_VER),    
	                                    MB.PROD_ITEM_ID,      
	                                    MB.CONS_QTY,
	                                    NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
	                                    MB.CONS_QTY_UOM      
	                            FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
	                            WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
	                            AND		IM.ITEM_ID	= ITM.ITEM_CD
	                            AND		IM.ITYPE		= 'HAWA'	
	                            AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
	                            AND		IM.RC_FLAG = 'Y'
	                            GROUP 
	                            BY 		IM.ITEM_ID, 
	                                    IM.ITEM_NAME,
	                                    MB.CONS_ITEM_ID,
	                                    MB.PROD_ITEM_ID,
	                                    MB.CONS_QTY,
	                                    MB.CONS_QTY_UOM, 
	                                    IM.QTY
                            	)S1, DC_DATAWAREHOUSE S2
                        WHERE	S1.PROD_ITEM_ID = S2.ITEM_ID
                        AND	  	S2.CNFM_DATE	='$!{end_date}'
                        GROUP
                        BY		S1.QTY, S1.CONS_ITEM_ID,S1.PROD_ITEM_ID
                        )
                        GROUP BY CONS_ITEM_ID
                )DW_BOM,               
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
				 AND	IM.RC_FLAG 	= 'Y'
                 [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,	
		       (
				SELECT  ITEM_ID,
						MON_P01,
						MON_P00						
				FROM	DC_RECEIVE_PR_P
				WHERE	VERSION =  '$!{end_date}'
				AND		GUBN ='1'
		       )DWSP,
		       (
				SELECT  ITEM_ID,
						MON_P01,
						MON_M00						
				FROM	DC_RECEIVE_PR
				WHERE	VERSION =  '$!{end_date}'
				AND		GUBN ='3'
		       )DWSS,
		      (		 
			 SELECT		ITEM_ID,
			 			MAX(DECODE(NO,1,MON_P01,0))		MON_P01,
			 			MAX(DECODE(NO,2,MON_P02,0))		MON_P02,
			            MAX(DECODE(NO,3,MON_P03,0))		MON_P03,
			            MAX(DECODE(NO,4,MON_P04,0))		MON_P04,
			            MAX(DECODE(NO,5,MON_P05,0))		MON_P05,
			            MAX(DECODE(NO,6,MON_P06,0))		MON_P06,
			            MAX(DECODE(NO,7,MON_P07,0))		MON_P07,
			            MAX(DECODE(NO,8,MON_P08,0))		MON_P08,
			            MAX(DECODE(NO,9,MON_P09,0))		MON_P09,
			            MAX(DECODE(NO,10,MON_P10,0))	MON_P10,
			            MAX(DECODE(NO,11,MON_P11,0))	MON_P11,
			            MAX(MON_P00)					MON_P00,			      
			            MAX(NO)							NO
			 FROM		(
			 			SELECT  ITEM_ID,
		 						TO_CHAR(MON_P11)	MON_P11,
		                		TO_CHAR(MON_P10)	MON_P10,
		                        TO_CHAR(MON_P09)	MON_P09,
		                        TO_CHAR(MON_P08)	MON_P08,
		                        TO_CHAR(MON_P07)	MON_P07,
		                        TO_CHAR(MON_P06)	MON_P06,
		                        TO_CHAR(MON_P05)	MON_P05,
		                        TO_CHAR(MON_P04)	MON_P04,
		                        TO_CHAR(MON_P03)	MON_P03,
		                        TO_CHAR(MON_P02)	MON_P02,
		                        TO_CHAR(MON_P01)	MON_P01,
		                        TO_CHAR(MON_P00)	MON_P00,		                     
		                        T.NO                     
						FROM    DC_RECEIVE_PR_P L, 
		                		(
		                        SELECT 	ROWNUM NO, 
		                        		TO_CHAR(ROWNUM, 'FM00') NO2 
		                        FROM 	USER_OBJECTS 
		                        WHERE ROWNUM &lt; 13
		                        ) T
						WHERE	VERSION =   '$!{end_date}'
					 	AND 	GUBN='1'
		                AND   	T.NO &lt;= 12
		                ORDER 
		                BY 		T.NO
                		)
                WHERE 	NO BETWEEN 1 AND SUBSTR(TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),5,6) - SUBSTR(TO_CHAR(TRUNC(SYSDATE,'YY'),'YYYYMM'),5,6)
               	GROUP 
               	BY 		ITEM_ID
		       	)DWSP2,
               (--판매실적 누계 --타계정포함
                SELECT	ITEM_ID,
                		ROUND(SUM(SELL_BOX_CUM),0) SELL_BOX_CUM
                FROM	(
		                SELECT	 CONS_ITEM_ID ITEM_ID,
		                		 SUM(SELL_BOX_CUM) SELL_BOX_CUM
		                FROM	(
				                SELECT   IM.CONS_ITEM_ID,
				                		 SA.ITEM_ID, 
				                         SUM(SA.QTY) * IM.QTY SELL_BOX_CUM
				                FROM     SALES_ACT SA,
		                		 		 DC_MST DM,
		                         		(
				                        SELECT  MB.PROD_ITEM_ID ITEM_ID,
				                        		MB.CONS_ITEM_ID,
				                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				                                MB.CONS_QTY_UOM      
				                        FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
				                        WHERE	IM.ITEM_ID 	= MB.CONS_ITEM_ID
				                        AND		IM.ITEM_ID	= ITM.ITEM_CD
				                        AND		IM.ITYPE	= 'HAWA'	
				                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
				                        AND		IM.RC_FLAG = 'Y'
				                        AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				                                OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
					                    GROUP 
					                    BY 		IM.ITEM_ID, 
					                            IM.ITEM_NAME,
					                            MB.CONS_ITEM_ID,
					                            MB.PROD_ITEM_ID,
					                            MB.CONS_QTY,
					                            MB.CONS_QTY_UOM, 
					                            IM.QTY
		                         		) IM,
			                         (
			                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
									 FROM	CAL_MST
									 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
					                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
			                         )    CAL                            
				                WHERE    SA.ITEM_ID = IM.ITEM_ID
				                AND      SA.SALE_DATE = CAL.YYYYMMDD
				                AND		 SA.DELIV_LOC = DM.DC_ID
				               GROUP BY SA.ITEM_ID,IM.CONS_ITEM_ID, IM.QTY
		                		)
		                GROUP BY CONS_ITEM_ID
		                UNION ALL
		                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
		                FROM     SALES_ACT SA,
		                		 DC_MST DM,
		                         (
		                         SELECT *
				                 FROM   ITEM_MST IM
				                 WHERE	IM.ITYPE		= 'HAWA'	
								 AND	IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								 AND	IM.RC_FLAG 	= 'Y'
				                 AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
						    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
		                         ) IM,
		                         (
		                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
								 FROM	CAL_MST
								 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
				                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
		                         )CAL                            
		                WHERE    SA.ITEM_ID = IM.ITEM_ID
		                AND      SA.SALE_DATE = CAL.YYYYMMDD
		                AND		 SA.DELIV_LOC = DM.DC_ID
		                GROUP BY SA.ITEM_ID
		                )
		                GROUP BY ITEM_ID
               	)DWSA,
		       	(
                SELECT  IM.ITEM_ID, 
                        IM.ITEM_NAME,		
                        MB.CONS_ITEM_ID
                FROM	ITEM_MST IM, MBOM MB, CMITEM ITM,
                		(
                         SELECT	ITEM_ID,
                        		SELL_STOP_DATE
                         FROM	ITEM_MST
                         WHERE	SELL_STOP_DATE >=TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
                        )IM2
                WHERE	IM.ITEM_ID 	= MB.CONS_ITEM_ID
                AND		IM.ITEM_ID	= ITM.ITEM_CD
                AND		IM2.ITEM_ID = MB.PROD_ITEM_ID
                AND		IM.ITYPE		= 'HAWA'	
                AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
                AND		IM.RC_FLAG = 'Y'
                GROUP 
                BY 		IM.ITEM_ID, 
                        IM.ITEM_NAME,
                        MB.CONS_ITEM_ID,                      
                        IM.QTY
                 )FLAG                      
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID (+)
		AND		DW.ITEM_ID		= DWSP2.ITEM_ID	(+)
		AND		DW.ITEM_ID		= DW_BOM.CONS_ITEM_ID(+)
		AND		DW.ITEM_ID		= DW2.ITEM_ID
		AND		DW.ITEM_ID		= DW2_BOM.CONS_ITEM_ID(+)		
		AND     DW.ITEM_ID      = DWSA.ITEM_ID (+)	
		AND		DW.ITEM_ID		= DWSS.ITEM_ID (+)
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID		
		AND		CM.CD			= IM.SALES_CAT03
		AND		DW.ITEM_ID		= FLAG.ITEM_ID(+)
        AND		CM.CD_GRP		= 'SALES_CAT3'
		AND     DW.CNFM_DATE	= '$!{end_date}'		
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
		AND		IM.SALES_CAT03 LIKE '%'||'$!{sales_cat03}'||'%'
		GROUP 
		BY  	SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, DWSP.MON_P01,DWSP.MON_P00, DWSS.MON_M00,
				IM.NWGT_PER_BUOM, DWSP2.MON_P11, DWSP2.MON_P10, DWSP2.MON_P09, DWSP2.MON_P08, DWSP2.MON_P07, DWSP2.MON_P06, 
                DWSP2.MON_P05, DWSP2.MON_P04, DWSP2.MON_P03, DWSP2.MON_P02, DWSP2.MON_P01, DWSP2.MON_P00, DW2.BASE_STOCK, DW2_BOM.BASE_STOCK
		ORDER 
		BY 		SALES_CAT05, SALES_CAT03, DW.ITEM_ID
		)A
		ORDER 
		BY		A.SALES_CAT05, A.SALES_CAT03, A.ITEM_ID

	</query>
	
	<query id="ip_01150_inventoryPlanAnalysis_md_list_pop" paging="false">	
	
		SELECT	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
		        NVL(SUM(DW.BASE_STOCK),0) - NVL(DW2.BASE_STOCK,0)                                 														"기초재고",
		        NVL(DW2.BASE_STOCK,0)                                   																				"사외재고",
                TRIM(TO_CHAR( DECODE( (SUM(DW.SALES_MEAN_3WEEK_ETC)),0,0,ROUND(NVL(SUM(DW.BASE_STOCK),0)/
                (SUM(DW.SALES_MEAN_3WEEK_ETC)),0)) ,999999999990.9)) 																					"재고일수",                
                NVL(DWSS.MON_M00,0)																														"매입예정M", 
                NVL(DWSP.MON_P00,0)	 																													"매입누계",
                NVL(DWSP.MON_P01,0)	 																													"전월매입",
                NVL(SUM(DW.STOCK_EXPT),0) - NVL(DW2.BASE_STOCK,0)                      													 				"예상재고",                
               	NVL(SUM(DW.SALES_PRE),0)      																		 									"전일계",
                NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0)        																				"일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)    																	"당월누계",                
                NVL(SUM(DW.PRE_MONTH_SELL),0) 																											"전월계",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+ NVL(SUM(DW.SALES_PY_MON_CUM_TA),0) 																	"전년동월\n누계",                
                (NVL(MAX(DWSA.SELL_BOX_CUM),0) + NVL(SUM(DW.ISSUE_EXPT),0) +  NVL(SUM(DW.ISSUE),0)) - 
                (NVL(SUM(DW.SALES_PY_MON_CUM),0) +  NVL(SUM(DW.SALES_PY_MON_CUM_TA),0))																	"전년동일\n대비",
                NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0)  	 																	"년누계",
                NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0)                       												"전년누계",
                (NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0)) - 
                (NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0))																	"전년누계\n대비", 
                NVL(SUM(DW.SALES_MEAN_1WEEK_ETC),0) 																									"1주평균",
               	NVL(SUM(DW.SALES_MEAN_3WEEK_ETC),0) 																									"3주평균",
               	NVL(MAX(IM.PROD_TERM),0)																								   				"입고\n경과일수",
                MAX(IM.PROD_TERM) * SUM(DW.BASE_STOCK)																									"경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * SUM(DW.BASE_STOCK)																							"유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   				"유통기한일",
                ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1)||'%' 						"유통기한경과율", 
		        ROUND((NVL(SUM(DW.BASE_STOCK),0) * IM.NWGT_PER_BUOM	) / 1000000 , 2) 																	"기초재고중량",		        
		        ROUND(NVL(DWSP.MON_P00,0)  * IM.NWGT_PER_BUOM / 1000000, 2)																				"당월입고누계중량",
		        NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_P00,0) 																							"년입고누계",
                ROUND((NVL(DWSP2.MON_P01,0) + NVL(DWSP2.MON_P02,0) + NVL(DWSP2.MON_P03,0) + NVL(DWSP2.MON_P04,0) + NVL(DWSP2.MON_P05,0) + 
                NVL(DWSP2.MON_P06,0) + NVL(DWSP2.MON_P07,0) + NVL(DWSP2.MON_P08,0) + NVL(DWSP2.MON_P09,0) + NVL(DWSP2.MON_P10,0) + 
                NVL(DWSP2.MON_P11,0) + NVL(DWSP2.MON_P00,0) ) * IM.NWGT_PER_BUOM / 1000000 , 2) 														"년입고누계중량",
                ROUND((NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE))
                 * IM.NWGT_PER_BUOM / 1000000, 2)																										"당월누계중량",
                ROUND((NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0)) * IM.NWGT_PER_BUOM / 1000000, 2)									"년누계중량"
		FROM    DC_DATAWAREHOUSE DW,				            
				CODE_MST CM,
				CMITEM	CIM,
				(
				 SELECT	ITEM_ID,
				 		SUM(BASE_STOCK) 	BASE_STOCK				 		
				 FROM	(
						 SELECT	DC.ITEM_ID,
						 		SUM(DC.BASE_STOCK) BASE_STOCK                    
		                FROM	DC_DATAWAREHOUSE DC, DC_MST DM
		                WHERE	DC.CNFM_DATE 	= '$!{end_date}'                                      
		                AND		DC.DC_ID 		= DM.DC_ID
		                AND		DC.DC_ID !='1845'	--N카페 제거 2015-07-07 이승용 대리 요청
		                AND		DM.DC_LOC_TYPE ='사외'
		                GROUP
		                BY		DC.ITEM_ID, DM.DC_LOC_TYPE, DM.DC_ID
		                )
		         GROUP
		         BY		ITEM_ID
				)DW2,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 AND	IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		
                 ) IM,	
		       (
				SELECT  ITEM_ID,
						MON_P01,
						MON_P00						
				FROM	DC_RECEIVE_PR_P
				WHERE	VERSION =  '$!{end_date}'
				AND		GUBN ='1'
		       )DWSP,
		       (
				SELECT  ITEM_ID,
						MON_P01,
						MON_M00						
				FROM	DC_RECEIVE_PR
				WHERE	VERSION =  '$!{end_date}'
				AND		GUBN ='3'
		       )DWSS,
		      (		 
			 SELECT		ITEM_ID,
			 			MAX(DECODE(NO,1,MON_P01,0))		MON_P01,
			 			MAX(DECODE(NO,2,MON_P02,0))		MON_P02,
			            MAX(DECODE(NO,3,MON_P03,0))		MON_P03,
			            MAX(DECODE(NO,4,MON_P04,0))		MON_P04,
			            MAX(DECODE(NO,5,MON_P05,0))		MON_P05,
			            MAX(DECODE(NO,6,MON_P06,0))		MON_P06,
			            MAX(DECODE(NO,7,MON_P07,0))		MON_P07,
			            MAX(DECODE(NO,8,MON_P08,0))		MON_P08,
			            MAX(DECODE(NO,9,MON_P09,0))		MON_P09,
			            MAX(DECODE(NO,10,MON_P10,0))	MON_P10,
			            MAX(DECODE(NO,11,MON_P11,0))	MON_P11,
			            MAX(MON_P00)					MON_P00,			      
			            MAX(NO)							NO
			 FROM		(
			 			SELECT  ITEM_ID,
		 						TO_CHAR(MON_P11)	MON_P11,
		                		TO_CHAR(MON_P10)	MON_P10,
		                        TO_CHAR(MON_P09)	MON_P09,
		                        TO_CHAR(MON_P08)	MON_P08,
		                        TO_CHAR(MON_P07)	MON_P07,
		                        TO_CHAR(MON_P06)	MON_P06,
		                        TO_CHAR(MON_P05)	MON_P05,
		                        TO_CHAR(MON_P04)	MON_P04,
		                        TO_CHAR(MON_P03)	MON_P03,
		                        TO_CHAR(MON_P02)	MON_P02,
		                        TO_CHAR(MON_P01)	MON_P01,
		                        TO_CHAR(MON_P00)	MON_P00,		                     
		                        T.NO                     
						FROM    DC_RECEIVE_PR_P L, 
		                		(
		                        SELECT 	ROWNUM NO, 
		                        		TO_CHAR(ROWNUM, 'FM00') NO2 
		                        FROM 	USER_OBJECTS 
		                        WHERE ROWNUM &lt; 13
		                        ) T
						WHERE	VERSION = '$!{end_date}'
					 	AND 	GUBN='1'
		                AND   	T.NO &lt;= 12
		                ORDER 
		                BY 		T.NO
                		)
                WHERE 	NO BETWEEN 1 AND SUBSTR(TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),5,6) - SUBSTR(TO_CHAR(TRUNC(SYSDATE,'YY'),'YYYYMM'),5,6)
               	GROUP 
               	BY 		ITEM_ID
		       	)DWSP2,
               (--판매실적 누계 --타계정포함
                SELECT	ITEM_ID,
                		ROUND(SUM(SELL_BOX_CUM),0) SELL_BOX_CUM
                FROM	(
		                SELECT	 ITEM_ID,
		                		 SUM(SELL_BOX_CUM) SELL_BOX_CUM
		                FROM	(
				                SELECT   IM.CONS_ITEM_ID,
				                		 SA.ITEM_ID, 
				                         SUM(SA.QTY)  SELL_BOX_CUM
				                FROM     SALES_ACT SA,
		                		 		 DC_MST DM,
		                         		(
				                        SELECT  MB.PROD_ITEM_ID ITEM_ID,
				                        		MB.CONS_ITEM_ID,
				                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				                                MB.CONS_QTY_UOM      
				                        FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
				                        WHERE	IM.ITEM_ID 	= MB.CONS_ITEM_ID
				                        AND		IM.ITEM_ID	= ITM.ITEM_CD
				                        AND		IM.ITYPE	= 'HAWA'	
				                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{end_date}'),'YYYYMMDD')
				                        AND		IM.RC_FLAG 	= 'Y'
				                        AND    	IM.ITEM_ID	='$!{item_id}'
					                    GROUP 
					                    BY 		IM.ITEM_ID, 
					                            IM.ITEM_NAME,
					                            MB.CONS_ITEM_ID,
					                            MB.PROD_ITEM_ID,
					                            MB.CONS_QTY,
					                            MB.CONS_QTY_UOM, 
					                            IM.QTY
		                         		) IM,
			                         (
			                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
									 FROM	CAL_MST
									 WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'MM'), 'YYYYMMDD')
					                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
			                         )    CAL                            
				                WHERE    SA.ITEM_ID = IM.ITEM_ID
				                AND      SA.SALE_DATE = CAL.YYYYMMDD
				                AND		 SA.DELIV_LOC = DM.DC_ID
				               GROUP BY SA.ITEM_ID,IM.CONS_ITEM_ID, IM.QTY
		                		)
		                GROUP BY ITEM_ID
		                UNION ALL
		                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
		                FROM     SALES_ACT SA,
		                		 DC_MST DM,
		                         (
		                         SELECT *
				                 FROM   ITEM_MST IM
				                 WHERE	IM.ITYPE		= 'HAWA'	
								 AND	IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								 AND	IM.RC_FLAG 	= 'Y'
				                 AND    IM.ITEM_ID	='$!{item_id}'
						    	 ) IM,
		                         (
		                         SELECT	TO_DATE(YYYYMMDD,'YYYY-MM-DD') YYYYMMDD
								 FROM	CAL_MST
								 WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'MM'), 'YYYYMMDD')
				                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
		                         )CAL                            
		                WHERE    SA.ITEM_ID = IM.ITEM_ID
		                AND      SA.SALE_DATE = CAL.YYYYMMDD
		                AND		 SA.DELIV_LOC = DM.DC_ID
		                GROUP BY SA.ITEM_ID
		                )
		                GROUP BY ITEM_ID
               	)DWSA		                        
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID (+)
		AND		DW.ITEM_ID		= DWSP2.ITEM_ID	(+)				
		AND     DW.ITEM_ID      = DWSA.ITEM_ID (+)	
		AND		DW.ITEM_ID		= DWSS.ITEM_ID (+)
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID	
		and		DW.ITEM_ID		IN (
        						SELECT	DISTINCT
        								PROD_ITEM_ID
        						FROM	MBOM
        						WHERE	CONS_ITEM_ID = '$!{item_id}'
        						UNION ALL
                                SELECT	'$!{item_id}' PROD_ITEM_ID
                                FROM	DUAL
        						)		
		AND		CM.CD			= IM.SALES_CAT03	
		AND		DW.ITEM_ID		= DW2.ITEM_ID	
        AND		CM.CD_GRP		= 'SALES_CAT3'
		AND     DW.CNFM_DATE	= '$!{end_date}'
		GROUP 
		BY  	SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, DWSP.MON_P01,DWSP.MON_P00, DWSS.MON_M00,
				IM.NWGT_PER_BUOM, DWSP2.MON_P11, DWSP2.MON_P10, DWSP2.MON_P09, DWSP2.MON_P08, DWSP2.MON_P07, DWSP2.MON_P06, 
                DWSP2.MON_P05, DWSP2.MON_P04, DWSP2.MON_P03, DWSP2.MON_P02, DWSP2.MON_P01, DWSP2.MON_P00, DW2.BASE_STOCK
		ORDER 
		BY 		SALES_CAT05, SALES_CAT03, DW.ITEM_ID		
	

	</query>
	
	<!-- GAP 분석 헤더 셋팅   -->  
	<query id="ip_01160_PurchaseRequest_Plan_dw1_header" paging="false">
	
		SELECT	TO_CHAR(CAL_DATE,'MM-DD')	WEEK,
	           		'WEEK_'||(ROWNUM-1)		HD_NAME
	        FROM	(
	                SELECT	DISTINCT TRUNC(CAL_DATE,'D')+1 CAL_DATE
	                FROM	CAL_MST
	                WHERE	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}')-84,'D')+1 AND TRUNC(TO_DATE('$!{cnfm_date}')+84,'D')+1
	                ORDER
	                BY		1
	         		)
	</query> 
	
	<query id="ip_01160_PurchaseRequest_Plan" paging="false">	
				
	SELECT	TO_CHAR(TO_DATE(S1.VERSION,'YYYY-MM-DD'),'YYYY-MM-DD')	CNFM_DATE,
			F_GET_CODE_NAME('SALES_CAT3', S2.SALES_CAT03)   SALES_CAT03,
	        S1.ITEM_ID,
	        S2.ITEM_NAME,
	        S2.SPEC,
	        S1.GUBN,
	        S1.IDX,
	  --      S1.W_P13,
	        S1.W_P12,
	        S1.W_P11,
	        S1.W_P10,
	        S1.W_P09,
	        S1.W_P08,
	        S1.W_P07,
	        S1.W_P06,
	        S1.W_P05,
	        S1.W_P04,
	        S1.W_P03,
	        S1.W_P02,
	        S1.W_P01,
	        S1.W,
	        S1.W_01,
	        S1.W_02,
	        S1.W_03,
	        S1.W_04,
	        S1.W_05,
	        S1.W_06,
	        S1.W_07,
	        S1.W_08,
	        S1.W_09,
	        S1.W_10,
	        S1.W_11,
	        S1.W_12,
	        (TRUNC(SYSDATE,'D') - TRUNC(TO_DATE(S1.VERSION),'D'))/7	TERM,
	        S3.TP_FLAG,
	        S1.REASON,
	        0	GAP 
	FROM	(
	  		SELECT	'기초재고'	GUBN,
	    			1		IDX,
		           T1.VERSION,
		           T1.ITEM_ID,
		           NVL(T1.W_P12,0) + NVL(T2.W_P12,0)	W_P12,
		           NVL(T1.W_P11,0) + NVL(T2.W_P11,0)	W_P11,
		           NVL(T1.W_P10,0) + NVL(T2.W_P10,0)	W_P10,
		           NVL(T1.W_P09,0) + NVL(T2.W_P09,0)	W_P09,
		           NVL(T1.W_P08,0) + NVL(T2.W_P08,0)	W_P08,
		           NVL(T1.W_P07,0) + NVL(T2.W_P07,0)	W_P07,
		           NVL(T1.W_P06,0) + NVL(T2.W_P06,0)	W_P06,
		           NVL(T1.W_P05,0) + NVL(T2.W_P05,0)	W_P05,
		           NVL(T1.W_P04,0) + NVL(T2.W_P04,0)	W_P04,
		           NVL(T1.W_P03,0) + NVL(T2.W_P03,0)	W_P03,
		           NVL(T1.W_P02,0) + NVL(T2.W_P02,0)	W_P02,
		           NVL(T1.W_P01,0) + NVL(T2.W_P01,0)	W_P01,
		           NVL(T1.W,0) 	+ NVL(T2.W,0)			W,
	        		0			W_01,
	                0			W_02,
	                0			W_03,
	                0			W_04,
	                0			W_05,
	                0			W_06,
	                0			W_07,
	                0			W_08,
	                0			W_09,
	                0			W_10,
	                0			W_11,
	                0			W_12,
	                ''	REASON  
  			FROM	(        
		            SELECT	S2.VERSION,
			    			S1.ITEM_ID,	    			
			                MAX(W_P12)	W_P12,    
			                MAX(W_P11)	W_P11, 
			                MAX(W_P10)	W_P10,      
			                MAX(W_P09)	W_P09, 
			                MAX(W_P08)	W_P08,
			                MAX(W_P07)	W_P07,
			                MAX(W_P06)	W_P06,
			                MAX(W_P05)	W_P05,
			                MAX(W_P04)	W_P04,
			                MAX(W_P03)	W_P03,
			                MAX(W_P02)	W_P02,
			                MAX(W_P01)	W_P01,
			                MAX(W)		W
	     			FROM	(
			                SELECT	TRUNC(DC.CNFM_DATE,'D')+1	IF_DTTM,                		
			                		IM.ITEM_ID,
			                		DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-84,'D')+1, SUM(DC.BASE_STOCK),0)	W_P12,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-77,'D')+1, SUM(DC.BASE_STOCK),0)	W_P11,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-70,'D')+1, SUM(DC.BASE_STOCK),0)	W_P10,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-63,'D')+1, SUM(DC.BASE_STOCK),0)	W_P09,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-56,'D')+1, SUM(DC.BASE_STOCK),0)	W_P08,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-49,'D')+1, SUM(DC.BASE_STOCK),0)	W_P07,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-42,'D')+1, SUM(DC.BASE_STOCK),0)	W_P06,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-35,'D')+1, SUM(DC.BASE_STOCK),0)	W_P05,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-28,'D')+1, SUM(DC.BASE_STOCK),0)	W_P04,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-21,'D')+1, SUM(DC.BASE_STOCK),0)	W_P03,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-14,'D')+1, SUM(DC.BASE_STOCK),0)	W_P02,
			                        DECODE(DC.CNFM_DATE, TRUNC(SYSDATE-7,'D')+1,  SUM(DC.BASE_STOCK),0)	W_P01,
			                		DECODE(DC.CNFM_DATE, TRUNC(SYSDATE,'D')+1, 	  SUM(DC.BASE_STOCK),0)		W
			                FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM,
			                		(
			                        SELECT	DISTINCT TO_CHAR(TRUNC(CAL_DATE,'D')+1,'YYYYMMDD')	CAL_DATE
			                        FROM	CAL_MST
			                        WHERE	CAL_DATE BETWEEN TRUNC(SYSDATE-84,'D')+1 AND TRUNC(SYSDATE,'D')+1
			                        )CAL                     
			                WHERE	DC.ITEM_ID		= IM.ITEM_ID	                
			                AND		DC.ITEM_ID	IN ( 
			                					SELECT	DISTINCT
			                        					ITEM_ID
						                        FROM	IMPORT_MD_EXPECT
						                        WHERE	REASON IS NOT NULL)
			                AND		DC.CNFM_DATE 	= CAL.CAL_DATE               
			                AND		IM.USE_PR_PLAN	= 'Y'
			                --AND		IM.PR_FLAG IS NULL
			                AND		IM.ITYPE		= 'HAWA'
			                GROUP
			                BY		DC.CNFM_DATE,
			                		IM.ITEM_ID
	                		)S1, 
			                (
			                SELECT	MAX(VERSION) VERSION,
			                        ITEM_ID
		                  	FROM	IMPORT_MD_EXPECT
		                  	WHERE	REASON IS NOT NULL
		                  	GROUP
		                  	BY		ITEM_ID                           
		            		)S2   
			      	WHERE   S1.ITEM_ID = S2.ITEM_ID
			      	GROUP
			      	BY		S1.ITEM_ID, 
			      			S2.VERSION
            		)T1,
            		(		
            		SELECT	ITEM_ID,
		                    NVL(ROUND(MAX(W_P12),0),0)	W_P12,   
		                    NVL(ROUND(MAX(W_P11),0),0)	W_P11,
		                    NVL(ROUND(MAX(W_P10),0),0)	W_P10,   
		                    NVL(ROUND(MAX(W_P09),0),0)	W_P09, 
		                    NVL(ROUND(MAX(W_P08),0),0)	W_P08,
		                    NVL(ROUND(MAX(W_P07),0),0)	W_P07,
		                    NVL(ROUND(MAX(W_P06),0),0)	W_P06,
		                    NVL(ROUND(MAX(W_P05),0),0)	W_P05,
		                    NVL(ROUND(MAX(W_P04),0),0)	W_P04,
		                    NVL(ROUND(MAX(W_P03),0),0)	W_P03,
		                    NVL(ROUND(MAX(W_P02),0),0)	W_P02,
		                    NVL(ROUND(MAX(W_P01),0),0)	W_P01,
		                    NVL(ROUND(MAX(W),0),0)		W  
			        FROM	(			
					        SELECT	CONS_ITEM_ID ITEM_ID,
					                SUM(W_P12)	W_P12,   
					                SUM(W_P11)	W_P11,
					                SUM(W_P10)	W_P10,   
					                SUM(W_P09)	W_P09, 
					                SUM(W_P08)	W_P08,
				                    SUM(W_P07)	W_P07,
				                    SUM(W_P06)	W_P06,
				                    SUM(W_P05)	W_P05,
				                    SUM(W_P04)	W_P04,
				                    SUM(W_P03)	W_P03,
				                    SUM(W_P02)	W_P02,
				                    SUM(W_P01)	W_P01,
				                    SUM(W)		W     
        					FROM    (
				                    SELECT	TRUNC(TO_DATE(DC.CNFM_DATE),'D')+1	IF_DTTM,
					                		DC.ITEM_ID, 
				                            BOM.CONS_ITEM_ID,                          
					                		ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-84,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY 	W_P12,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-77,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY 	W_P11,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-70,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P10,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-63,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P09,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-56,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P08,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-49,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P07,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-42,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P06,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-35,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P05,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-28,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P04,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-21,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P03,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-14,'D')+1,'YYYYMMDD'), SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P02,
					                        ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE-7,'D')+1,'YYYYMMDD'),  SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W_P01,
					                		ROUND(DECODE(DC.CNFM_DATE, TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD'), 	SUM(DC.BASE_STOCK),0),0) * BOM.QTY	W
	                				FROM	DC_DATAWAREHOUSE DC, 
				                    		(  
				                            SELECT	CONS_ITEM_ID,
				                            		PROD_ITEM_ID, 
				                            		NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				                            		MAX(MB.PROD_VER)
										    FROM	MBOM MB, ITEM_MST IM
										    WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID	
				                            AND		IM.USE_PR_PLAN  ='Y'	
				                            AND		IM.ITYPE		='HAWA'
				                            AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')	 
				                            AND		IM.PR_FLAG		IS NULL
				                            AND		MB.CONS_ITEM_ID IN (
				                            							SELECT 	DISTINCT ITEM_ID
				                                                        FROM	IMPORT_MD_EXPECT	
				                                                        WHERE	REASON IS NOT NULL
				                                                        )
				                            GROUP
								    		BY		IM.ITEM_ID,                                    		
										            MB.PROD_ITEM_ID,
		                                            MB.CONS_ITEM_ID,
										            MB.CONS_QTY,
										            MB.CONS_QTY_UOM,
										            IM.QTY	
				                             )BOM					                		                     
					                WHERE	DC.ITEM_ID = BOM.PROD_ITEM_ID	
					                AND		DC.CNFM_DATE IN (
					                						SELECT	DISTINCT TO_CHAR(TRUNC(CAL_DATE,'D')+1,'YYYYMMDD')	CAL_DATE
									                        FROM	CAL_MST
									                        WHERE	CAL_DATE BETWEEN TRUNC(SYSDATE-84,'D')+1 AND TRUNC(SYSDATE,'D')+1
					                						)
					                GROUP
					                BY		DC.CNFM_DATE, DC.ITEM_ID, BOM.QTY, BOM.CONS_ITEM_ID
                    				)
				            GROUP
				            BY		CONS_ITEM_ID  
				            )            		
		            GROUP
		            BY		ITEM_ID 
            		)T2
            WHERE	T1.ITEM_ID = T2.ITEM_ID (+)
             AND    T1.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'	    		
	      	UNION ALL
			SELECT	'입고량'	GUBN,
					2			IDX,	
					MD.VERSION,		
			        MD.ITEM_ID, 
			        MD.WEEK,
			        MD.WEEK_01,
			        MD.WEEK_02,
			        MD.WEEK_03,
			        MD.WEEK_04,
			        MD.WEEK_05,
			        MD.WEEK_06,
			        MD.WEEK_07,
			        MD.WEEK_08,
			        MD.WEEK_09,
			        MD.WEEK_10,
			        MD.WEEK_11,
			        MD.WEEK_12,
			        MD.WEEK_13,
			        MD.WEEK_14,
			        MD.WEEK_15,
			        MD.WEEK_16,
			        MD.WEEK_17,
			        MD.WEEK_18,
			        MD.WEEK_19,
			        MD.WEEK_20,	
			        MD.WEEK_21,
			        MD.WEEK_22,
			        MD.WEEK_23,
			        MD.WEEK_24,
			        MD.REASON			                           		      
			FROM	IMPORT_MD_EXPECT MD, ITEM_MST IM
			WHERE	MD.REASON IS NOT NULL
			AND		IM.ITEM_ID = MD.ITEM_ID
			--AND		IM.PR_FLAG IS NULL
			AND		IM.USE_PR_PLAN ='Y'
			AND		(MD.VERSION,MD.ITEM_ID) IN	(
							                      SELECT	MAX(VERSION),
							                                ITEM_ID
							                      FROM		IMPORT_MD_EXPECT
							                      WHERE		REASON IS NOT NULL
							                      GROUP
							                      BY		ITEM_ID
							                     )             
			AND		GUBN ='2'
			UNION ALL
			SELECT	'사용자예측'	GUBN,
					3			IDX,	
					MD.VERSION,		
			        MD.ITEM_ID, 
			        MD.WEEK,
			        MD.WEEK_01,
			        MD.WEEK_02,
			        MD.WEEK_03,
			        MD.WEEK_04,
			        MD.WEEK_05,
			        MD.WEEK_06,
			        MD.WEEK_07,
			        MD.WEEK_08,
			        MD.WEEK_09,
			        MD.WEEK_10,
			        MD.WEEK_11,
			        MD.WEEK_12,
			        MD.WEEK_13,
			        MD.WEEK_14,
			        MD.WEEK_15,
			        MD.WEEK_16,
			        MD.WEEK_17,
			        MD.WEEK_18,
			        MD.WEEK_19,
			        MD.WEEK_20,	
			        MD.WEEK_21,
			        MD.WEEK_22,
			        MD.WEEK_23,
			        MD.WEEK_24,
			        MD.REASON			                           		      
			FROM	IMPORT_MD_EXPECT MD, ITEM_MST IM
			WHERE	MD.REASON IS NOT NULL
			AND		IM.ITEM_ID = MD.ITEM_ID
			--AND		IM.PR_FLAG IS NULL
			AND		IM.USE_PR_PLAN ='Y'
			AND		(MD.VERSION,MD.ITEM_ID) IN	(
							                      SELECT	MAX(VERSION),
							                                ITEM_ID
							                      FROM		IMPORT_MD_EXPECT
							                      WHERE		REASON IS NOT NULL
							                      GROUP
							                      BY		ITEM_ID
							                      )             
			AND		GUBN ='1'
			UNION ALL
	        SELECT	'판매량'	GUBN,
                    4		IDX,
                    S1.VERSION,
        			S2.ITEM_ID,	  
        			CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
                         THEN SUM(WEEK)
                         ELSE 0
                         END	WEEK,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-6,'YYYYMMDD')
                         THEN SUM(WEEK_P01)
                         ELSE 0
                         END	WEEK_P01, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-13,'YYYYMMDD')
                         THEN SUM(WEEK_P02)
                         ELSE 0
                         END	WEEK_P02,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-20,'YYYYMMDD')
                         THEN SUM(WEEK_P03)
                         ELSE 0
                         END	WEEK_P03, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-27,'YYYYMMDD')
                         THEN SUM(WEEK_P04)
                         ELSE 0
                         END	WEEK_P04,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-34,'YYYYMMDD')
                         THEN SUM(WEEK_P05)
                         ELSE 0
                         END	WEEK_P05, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-41,'YYYYMMDD')
                         THEN SUM(WEEK_P06)
                         ELSE 0
                         END	WEEK_P06,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-48,'YYYYMMDD')
                         THEN SUM(WEEK_P07)
                         ELSE 0
                         END	WEEK_P07, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-55,'YYYYMMDD')
                         THEN SUM(WEEK_P08)
                         ELSE 0
                         END	WEEK_P08, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-62,'YYYYMMDD')
                         THEN SUM(WEEK_P09)
                         ELSE 0
                         END	WEEK_P09, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-69,'YYYYMMDD')
                         THEN SUM(WEEK_P10)
                         ELSE 0
                         END	WEEK_P10,     								
            		CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-76,'YYYYMMDD')
                         THEN SUM(WEEK_P11)
                         ELSE 0
                         END	WEEK_P11, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE(S1.VERSION),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-83,'YYYYMMDD')
                         THEN SUM(WEEK_P12)
                         ELSE 0
                         END	WEEK_P12,                    
	                0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    ''	REASON		                                   
			        FROM
			        	(
			        	SELECT	MAX(VERSION)	VERSION,
			        			ITEM_ID,
			        			MAX(WEEK)		WEEK,
	                            MAX(WEEK_P01)	WEEK_P01,
	                            MAX(WEEK_P02)	WEEK_P02,
	                            MAX(WEEK_P03)	WEEK_P03,
	                            MAX(WEEK_P04)	WEEK_P04,
	                            MAX(WEEK_P05)	WEEK_P05,
	                            MAX(WEEK_P06)	WEEK_P06,
	                            MAX(WEEK_P07)	WEEK_P07,
	                            MAX(WEEK_P08)	WEEK_P08,
	                            MAX(WEEK_P09)	WEEK_P09,
	                            MAX(WEEK_P10)	WEEK_P10,
	                            MAX(WEEK_P11)	WEEK_P11,
	                            MAX(WEEK_P12)	WEEK_P12
	                    FROM	(
				            SELECT	MD.VERSION,
		                   			SA.ITEM_ID,                   			
		                   			SA.WEEK,
		                            SA.WEEK_P01,
		                            SA.WEEK_P02,
		                            SA.WEEK_P03,
		                            SA.WEEK_P04,
		                            SA.WEEK_P05,
		                            SA.WEEK_P06,
		                            SA.WEEK_P07,
		                            SA.WEEK_P08,
		                            SA.WEEK_P09,
		                            SA.WEEK_P10,
		                            SA.WEEK_P11,
		                            SA.WEEK_P12                                                   
		                    FROM	SALES_WEEK_AGG SA,
		                    		(
		                            SELECT	MAX(VERSION) VERSION,
		                                    MD.ITEM_ID
		                            FROM	IMPORT_MD_EXPECT MD, ITEM_MST IM                         	
		                            WHERE	MD.GUBN	   	= '1'
		                            AND		MD.ITEM_ID	= IM.ITEM_ID
		                            AND		IM.USE_PR_PLAN = 'Y'
		                            --AND		IM.PR_FLAG IS NULL
									AND		MD.REASON IS NOT NULL
		                            GROUP
		                            BY		MD.ITEM_ID
		                            )MD						        		
		                    WHERE	SA.VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
		                    AND		SA.ITEM_ID = MD.ITEM_ID (+)
		                    AND		SA.GUBN	= '1'	                    
					        UNION ALL                                 
			                SELECT	 VERSION,
		                    		 ITEM_ID,                    		
			                		 ROUND(SUM(QTY),0)		WEEK,
		                    		 ROUND(SUM(QTY_P01),0)	WEEK_P01,
		                             ROUND(SUM(QTY_P02),0)	WEEK_P02,
		                             ROUND(SUM(QTY_P03),0)	WEEK_P03,
		                             ROUND(SUM(QTY_P04),0)	WEEK_P04,
		                             ROUND(SUM(QTY_P05),0)	WEEK_P05,
		                             ROUND(SUM(QTY_P06),0)	WEEK_P06,
		                             ROUND(SUM(QTY_P07),0)	WEEK_P07,
		                             ROUND(SUM(QTY_P08),0)	WEEK_P08,
		                             ROUND(SUM(QTY_P09),0)	WEEK_P09,
		                             ROUND(SUM(QTY_P10),0)	WEEK_P10,
		                             ROUND(SUM(QTY_P11),0)	WEEK_P11,
		                             ROUND(SUM(QTY_P12),0)	WEEK_P12                             	                                                   
		                	FROM	(
		                        	SELECT 	A.VERSION,
		                            		A.ITEM_ID	PROD_ITEM_ID,
		                            		B.ITEM_ID	ITEM_ID,                                    
		                            		A.WEEK	   * B.QTY  QTY,                                       		
								            A.WEEK_P01 * B.QTY	QTY_P01,
		                                    A.WEEK_P02 * B.QTY	QTY_P02, 
		                                    A.WEEK_P03 * B.QTY	QTY_P03, 
		                                    A.WEEK_P04 * B.QTY	QTY_P04, 
		                                    A.WEEK_P05 * B.QTY	QTY_P05, 
		                                    A.WEEK_P06 * B.QTY	QTY_P06, 
		                                    A.WEEK_P07 * B.QTY	QTY_P07, 
		                                    A.WEEK_P08 * B.QTY	QTY_P08, 
		                                    A.WEEK_P09 * B.QTY	QTY_P09, 
		                                    A.WEEK_P10 * B.QTY	QTY_P10,
		                                    A.WEEK_P11 * B.QTY	QTY_P11,
		                                    A.WEEK_P12 * B.QTY	QTY_P12                                    	                                           
							    	FROM	(
		                         			SELECT 	MD.VERSION,
						                   			SA.ITEM_ID,                   			
						                   			SA.WEEK,
						                            SA.WEEK_P01,
						                            SA.WEEK_P02,
						                            SA.WEEK_P03,
						                            SA.WEEK_P04,
						                            SA.WEEK_P05,
						                            SA.WEEK_P06,
						                            SA.WEEK_P07,
						                            SA.WEEK_P08,
						                            SA.WEEK_P09,
						                            SA.WEEK_P10,
						                            SA.WEEK_P11,
						                            SA.WEEK_P12				                                            
					                        FROM	SALES_WEEK_AGG SA,					                        		
					                                (
					                                SELECT	MAX(VERSION) VERSION,
		                                                    MD.ITEM_ID
		                                            FROM	IMPORT_MD_EXPECT MD, ITEM_MST IM
		                                            WHERE	MD.GUBN	   		= '1'
		                                            AND		MD.ITEM_ID		= IM.ITEM_ID
		                                            AND		IM.USE_PR_PLAN	='Y'
		                                            --AND		IM.PR_FLAG IS NULL
		                                            AND		MD.REASON IS NOT NULL
		                                            GROUP
		                                            BY		MD.ITEM_ID
					                                )MD			        		
						                    WHERE	SA.VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
					                        AND		SA.ITEM_ID = MD.ITEM_ID (+)
						                    AND		SA.GUBN	= '1'
		                         			)A,
							        		(
							            	SELECT	IM.ITEM_ID,                                    		
										            MB.PROD_ITEM_ID,
										            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
										            MAX(MB.PROD_VER) PROD_VER
										    FROM	MBOM MB, ITEM_MST IM
										    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID									   										   
										    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
										    GROUP
										    BY		IM.ITEM_ID,                                    		
										            MB.PROD_ITEM_ID,
										            MB.CONS_QTY,
										            MB.CONS_QTY_UOM,
										            IM.QTY
				            				)B  
				     				WHERE	A.ITEM_ID	=	B.PROD_ITEM_ID
			                        )
		                    GROUP
		                    BY		ITEM_ID, VERSION
		                    )
		            GROUP
		            BY		ITEM_ID
                	)S1, ITEM_MST S2
            WHERE	S1.ITEM_ID = S2.ITEM_ID
            GROUP
            BY		S2.ITEM_ID, 
            		S1.VERSION
		    UNION ALL
	        SELECT	'차이량'	GUBN,
                    5			IDX,	
                    MD.VERSION,		
                    MD.ITEM_ID, 
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,    	
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	0,
                   	''	REASON                   		      
            FROM	IMPORT_MD_EXPECT MD, ITEM_MST IM
            WHERE	MD.REASON IS NOT NULL
            AND		IM.ITEM_ID = MD.ITEM_ID
            AND		IM.USE_PR_PLAN ='Y'
            --AND		IM.PR_FLAG IS NULL
            AND		(MD.VERSION,MD.ITEM_ID) IN	(
			                                      SELECT	MAX(MD.VERSION),
			                                                MD.ITEM_ID
			                                      FROM		IMPORT_MD_EXPECT MD, ITEM_MST IM
			                                      WHERE		MD.REASON IS NOT NULL
			                                      AND		MD.ITEM_ID = IM.ITEM_ID
			                                      AND		IM.USE_PR_PLAN = 'Y'
			                                      --AND		IM.PR_FLAG IS NULL
			                                      GROUP
			                                      BY		MD.ITEM_ID
			                                      )             
	        AND		GUBN ='2'
	        ORDER 
	        BY 		4,2,1,3
	        )S1, ITEM_MST S2,
	        (
			SELECT	ITEM_ID,
               		CASE
	                WHEN TRUNC(SYSDATE,'IW') 		= IPGO_DATE THEN 0
	                WHEN TRUNC(SYSDATE + 7,'IW') 	= IPGO_DATE THEN 1
	                WHEN TRUNC(SYSDATE + 14,'IW') = IPGO_DATE THEN 2
	                WHEN TRUNC(SYSDATE + 21,'IW') = IPGO_DATE THEN 3
	                WHEN TRUNC(SYSDATE + 28,'IW') = IPGO_DATE THEN 4
	                WHEN TRUNC(SYSDATE + 35,'IW') = IPGO_DATE THEN 5
	                WHEN TRUNC(SYSDATE + 42,'IW') = IPGO_DATE THEN 6
	                WHEN TRUNC(SYSDATE + 49,'IW') = IPGO_DATE THEN 7
	                WHEN TRUNC(SYSDATE + 56,'IW') = IPGO_DATE THEN 8
	                WHEN TRUNC(SYSDATE + 63,'IW') = IPGO_DATE THEN 9
	                WHEN TRUNC(SYSDATE + 70,'IW') = IPGO_DATE THEN 10
	                WHEN TRUNC(SYSDATE + 77,'IW') = IPGO_DATE THEN 11
	                WHEN TRUNC(SYSDATE + 84,'IW') = IPGO_DATE THEN 12
	                WHEN TRUNC(SYSDATE + 91,'IW') = IPGO_DATE THEN 13
	                WHEN TRUNC(SYSDATE + 98,'IW') = IPGO_DATE THEN 14 
	                WHEN TRUNC(SYSDATE + 105,'IW') = IPGO_DATE THEN 15 
	                WHEN TRUNC(SYSDATE + 112,'IW') = IPGO_DATE THEN 16 
	                WHEN TRUNC(SYSDATE + 119,'IW') = IPGO_DATE THEN 17  
	                WHEN TRUNC(SYSDATE + 126,'IW') = IPGO_DATE THEN 18 
	                WHEN TRUNC(SYSDATE + 133,'IW') = IPGO_DATE THEN 19 
	                WHEN TRUNC(SYSDATE + 140,'IW') = IPGO_DATE THEN 20  
	                WHEN TRUNC(SYSDATE + 147,'IW') = IPGO_DATE THEN 21 
	                WHEN TRUNC(SYSDATE + 154,'IW') = IPGO_DATE THEN 22 
	                WHEN TRUNC(SYSDATE + 161,'IW') = IPGO_DATE THEN 23
	                WHEN TRUNC(SYSDATE + 168,'IW') = IPGO_DATE THEN 24 
	                WHEN TRUNC(SYSDATE + 175,'IW') = IPGO_DATE THEN 25
	                WHEN TRUNC(SYSDATE + 182,'IW') = IPGO_DATE THEN 26                  
                    ELSE 0
                	END  TP_FLAG
       	FROM	(
				SELECT	ITEM_ID, 
						TRUNC(SYSDATE + LEAD_TIME,'IW') IPGO_DATE
				FROM	(
						SELECT	ITEM_ID,		
								NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
						FROM	ITEM_MST						
						WHERE	ITYPE		= 'HAWA'	
	                    AND		SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD')
	                    --AND		PR_FLAG IS NULL
	                    AND		USE_PR_PLAN = 'Y'                   
						)
				)                        
		)S3
    WHERE 	S1.ITEM_ID  = S2.ITEM_ID
    AND		S1.ITEM_ID	= S3.ITEM_ID(+)
    AND		S2.SALES_CAT03 LIKE '%'||'$!{sales_cat03}'||'%'
    AND		S2.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
    AND    (S2.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
	    		OR   S2.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
	AND		(TRUNC(SYSDATE,'D') - TRUNC(TO_DATE(S1.VERSION),'D'))/7 > 0 
	ORDER 
	BY 		2,1,3,7
		
	</query>
	
	
	
	<query id="ip_01160_PurchaseRequest_Plan_pop_header" paging="false">	
		           
    	SELECT	SUBSTR(DAY,6,8),
				'WEEK_'||IDX HD_NAME,
				WEEK
		FROM	(
				SELECT	DAY,
						RANK() OVER (ORDER BY DAY)-1 IDX
				FROM	(
						SELECT 	DISTINCT TO_CHAR(TRUNC(CAL_DATE,'IW'),'YYYY/MM/DD') DAY
				        FROM 	CAL_MST
				        WHERE 	CAL_DATE BETWEEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') AND TRUNC(TO_DATE('$!{cnfm_date}')+210,'IW') 
				        )
   		 		),
   		 		(
                SELECT 	(TRUNC(SYSDATE,'IW') - TRUNC(TO_DATE('$!{cnfm_date}'),'IW'))/7	WEEK
				        FROM 	DUAL
                )
	</query>
	
	<query id="ip_01160_PurchaseRequest_Plan_pop" paging="false">	
		
		SELECT  T1.GUBN,  
		     	T1.GUBN_IDX, 
		     	TO_NUMBER('')	AVG,	
        		ROUND(NVL(T3.WEEK_P30,0),0),
        		ROUND(NVL(T3.WEEK_P29,0),0),
        		ROUND(NVL(T3.WEEK_P28,0),0),
        		ROUND(NVL(T3.WEEK_P27,0),0),
        		ROUND(NVL(T3.WEEK_P26,0),0),
        		ROUND(NVL(T3.WEEK_P25,0),0),
        		ROUND(NVL(T3.WEEK_P24,0),0),
        		ROUND(NVL(T3.WEEK_P23,0),0),
        		ROUND(NVL(T3.WEEK_P22,0),0),
        		ROUND(NVL(T3.WEEK_P21,0),0),
        		ROUND(NVL(T3.WEEK_P20,0),0),
        		ROUND(NVL(T3.WEEK_P19,0),0),
        		ROUND(NVL(T3.WEEK_P18,0),0),
        		ROUND(NVL(T3.WEEK_P17,0),0),
        		ROUND(NVL(T3.WEEK_P16,0),0),
        		ROUND(NVL(T3.WEEK_P15,0),0),
        		ROUND(NVL(T3.WEEK_P14,0),0),
        		ROUND(NVL(T3.WEEK_P13,0),0),
        		ROUND(NVL(T3.WEEK_P12,0),0),
        		ROUND(NVL(T3.WEEK_P11,0),0),
        		ROUND(NVL(T3.WEEK_P10,0),0),
        		ROUND(NVL(T3.WEEK_P09,0),0),
        		ROUND(NVL(T3.WEEK_P08,0),0),
        		ROUND(NVL(T3.WEEK_P07,0),0),
        		ROUND(NVL(T3.WEEK_P06,0),0),
        		ROUND(NVL(T3.WEEK_P05,0),0),
        		ROUND(NVL(T3.WEEK_P04,0),0),
        		ROUND(NVL(T3.WEEK_P03,0),0),
        		ROUND(NVL(T3.WEEK_P02,0),0),
        		ROUND(NVL(T3.WEEK_P01,0),0),
        		NVL(T1.W,0),
        		NVL(T1.W_1,0),
        		NVL(T1.W_2,0),
        		NVL(T1.W_3,0),
        		NVL(T1.W_4,0),
        		NVL(T1.W_5,0),
        		NVL(T1.W_6,0),
        		NVL(T1.W_7,0),
        		NVL(T1.W_8,0),
        		NVL(T1.W_9,0),
        		NVL(T1.W_10,0),
        		NVL(T1.W_11,0),
        		NVL(T1.W_12,0),
        		NVL(T1.W_13,0),
        		NVL(T1.W_14,0),
        		NVL(T1.W_15,0),
        		NVL(T1.W_16,0),
        		NVL(T1.W_17,0),
        		NVL(T1.W_18,0),
        		NVL(T1.W_19,0),
        		NVL(T1.W_20,0),
        		NVL(T1.W_21,0),
        		NVL(T1.W_22,0),
        		NVL(T1.W_23,0),
        		NVL(T1.W_24,0),
        		NVL(T1.W_25,0),
        		NVL(T1.W_26,0),
        		NVL(T1.W_27,0),
        		NVL(T1.W_28,0),
        		NVL(T1.W_29,0),
        		NVL(T1.W_30,0),        		
        		T2.TP_FLAG,
        		(TRUNC(SYSDATE,'D') - TRUNC(TO_DATE('$!{cnfm_date}'),'D'))/7	TERM        		
        FROM
		(
		SELECT 	F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02) SALES_CAT02,
				IM.ITEM_ID,
        		IM.ITEM_NAME,        		
        		'기초재고'	GUBN,
        		1			GUBN_IDX,        		
        		DC2.W   + NVL(BOM2.W,0)		W,
        		0			W_1,
        		0			W_2,
        		0			W_3,
        		0			W_4,
        		0			W_5,
        		0			W_6,
        		0			W_7,
        		0			W_8,
        		0			W_9,
        		0			W_10,
        		0			W_11,
        		0			W_12,
        		0			W_13,
        		0			W_14,
        		0			W_15,
        		0			W_16,
        		0			W_17,
        		0			W_18,
        		0			W_19,
        		0			W_20,
        		0			W_21,
        		0			W_22,
        		0			W_23,
        		0			W_24,
        		0			W_25,
        		0			W_26,
        		0			W_27,
        		0			W_28,
        		0			W_29,
        		0			W_30        		        		
		FROM	ITEM_MST IM,				
        		(
                SELECT	ITEM_ID,
            			MAX(W)		W,
						MAX(M_01)	P_01, 
        				MAX(M_02)	P_02,
        				MAX(M_03)	P_03,
        				MAX(M_04)	P_04,
        				MAX(M_05)	P_05
                FROM	(
                		SELECT	ITEM_ID,
        						DECODE(YYYYMMDD,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),			   BASE_STOCK,0) W,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_01,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_02,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_03,
								DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_04,
                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_05
                        FROM	(     
                        		SELECT	DC.CNFM_DATE	YYYYMMDD,
                						DC.ITEM_ID,
                						SUM(DC.BASE_STOCK) BASE_STOCK
                				FROM	DC_DATAWAREHOUSE DC, ITEM_MST IM
                				WHERE 	DC.ITEM_ID = IM.ITEM_ID
                				AND	DC.CNFM_DATE IN(
                					 				TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD')
                                     				)                                     
                				AND		IM.ITEM_ID = '$!{item_id}'
                				GROUP
                				BY		DC.CNFM_DATE,DC.ITEM_ID
                				--HAVING	SUM(DC.BASE_STOCK) > 0
                				)
               				)
                GROUP BY ITEM_ID
                )DC2,
                 /* M-5,4,3,2,1,W 전용 BOM */
               (                
                SELECT	ITEM_ID,
                		SUM(W)		W,
                        SUM(P_01)	P_01,
                        SUM(P_02)	P_02,
                        SUM(P_03)	P_03,
                        SUM(P_04)	P_04,
                        SUM(P_05)	P_05
                FROM	(
		                SELECT	ITEM_ID,
		                		PROD_ITEM_ID,
		            			ROUND(MAX(W),0)		W,
								ROUND(MAX(M_01),0)	P_01, 
		        				ROUND(MAX(M_02),0)	P_02,
		        				ROUND(MAX(M_03),0)	P_03,
		        				ROUND(MAX(M_04),0)	P_04,
		        				ROUND(MAX(M_05),0)	P_05
		                FROM	(
		                		SELECT	ITEM_ID,
		                        		PROD_ITEM_ID,
		        						DECODE(YYYYMMDD,TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),			   BASE_STOCK,0) W,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),BASE_STOCK,0) M_01,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),BASE_STOCK,0) M_02,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),BASE_STOCK,0) M_03,
										DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),BASE_STOCK,0) M_04,
		                                DECODE(YYYYMMDD,TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD'),BASE_STOCK,0) M_05
		                        FROM	(     
		                        		SELECT	DC.CNFM_DATE	YYYYMMDD,                						
		                                        BOM.CONS_ITEM_ID	ITEM_ID, 
		                                        BOM.PROD_ITEM_ID,
		                						SUM(DC.BASE_STOCK) * BOM.QTY  BASE_STOCK
		                				FROM	DC_DATAWAREHOUSE DC,
		                                		(
		                                        SELECT	MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                                                MAX(MB.PROD_VER) PROD_VER
		                                        FROM	MBOM MB, ITEM_MST IM
		                                        WHERE	MB.CONS_ITEM_ID = IM.ITEM_ID
		                                        AND		IM.ITEM_ID = '$!{item_id}'
		                                        AND		IM.USE_PR_PLAN ='Y'
		                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
		                                        GROUP
		                                        BY		MB.CONS_ITEM_ID,
		                                        		MB.PROD_ITEM_ID,
		                                                MB.CONS_QTY,
		                                                MB.CONS_QTY_UOM,
		                                                IM.QTY
		                                        )BOM
		                				WHERE 	DC.ITEM_ID = BOM.PROD_ITEM_ID
		                				AND		DC.CNFM_DATE IN(
		                					 				TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD'),
		                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-1),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-2),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-3),'YYYYMMDD'),
		        							 				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-4),'YYYYMMDD'),
		                                     				TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}'),'MM'),-5),'YYYYMMDD')
		                                     				)                                     
		                				GROUP
		                				BY		DC.CNFM_DATE,
		                                		DC.ITEM_ID,
		                                        BOM.QTY,
		                                        BOM.CONS_ITEM_ID,
		                                        BOM.PROD_ITEM_ID                                                   				
		                				)
		               			)
		                GROUP 
		                BY 		ITEM_ID,
		                 		PROD_ITEM_ID
		                )
		        GROUP 
		        BY 		ITEM_ID        
               	)BOM2               
		WHERE 	DC2.ITEM_ID		= 	IM.ITEM_ID
		AND		DC2.ITEM_ID		=	BOM2.ITEM_ID(+)
		AND		IM.ITEM_ID = '$!{item_id}'	
		UNION ALL
		SELECT	F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02) SALES_CAT02,
				IM.ITEM_ID,
	    		IM.ITEM_NAME,
				'입고량'		GUBN,
	    		2			GUBN_IDX,        		
				MD.WEEK,
		        MD.WEEK_01,
				MD.WEEK_02,
				MD.WEEK_03,
				MD.WEEK_04,
				MD.WEEK_05,
				MD.WEEK_06,
				MD.WEEK_07,
				MD.WEEK_08,
				MD.WEEK_09,
				MD.WEEK_10,
				MD.WEEK_11,
				MD.WEEK_12,
				MD.WEEK_13,
				MD.WEEK_14,
				MD.WEEK_15,
				MD.WEEK_16,
				MD.WEEK_17,
				MD.WEEK_18,
				MD.WEEK_19,
				MD.WEEK_20,
				MD.WEEK_21,
				MD.WEEK_22,
				MD.WEEK_23,
				MD.WEEK_24,
				MD.WEEK_25,
				MD.WEEK_26,
				MD.WEEK_27,
				MD.WEEK_28,
				MD.WEEK_29,
				MD.WEEK_30				      
        FROM	ITEM_MST IM, IMPORT_MD_EXPECT MD		
		WHERE	IM.ITEM_ID = '$!{item_id}'
		AND		IM.ITEM_ID = MD.ITEM_ID
		AND		MD.VERSION = '$!{cnfm_date}'
		AND		MD.GUBN	   = '2'		
		UNION ALL
		#if("$!{checked_button}" == "")
		 SELECT	F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02) SALES_CAT02,
				IM.ITEM_ID,
	    		IM.ITEM_NAME,
				'사용자 예측'		GUBN,
	    		3				GUBN_IDX,        		
				MD.WEEK,
		        MD.WEEK_01,
				MD.WEEK_02,
				MD.WEEK_03,
				MD.WEEK_04,
				MD.WEEK_05,
				MD.WEEK_06,
				MD.WEEK_07,
				MD.WEEK_08,
				MD.WEEK_09,
				MD.WEEK_10,
				MD.WEEK_11,
				MD.WEEK_12,
				MD.WEEK_13,
				MD.WEEK_14,
				MD.WEEK_15,
				MD.WEEK_16,
				MD.WEEK_17,
				MD.WEEK_18,
				MD.WEEK_19,
				MD.WEEK_20,
				MD.WEEK_21,
				MD.WEEK_22,
				MD.WEEK_23,
				MD.WEEK_24,
				MD.WEEK_25,
				MD.WEEK_26,
				MD.WEEK_27,
				MD.WEEK_28,
				MD.WEEK_29,
				MD.WEEK_30				      
        FROM	ITEM_MST IM, IMPORT_MD_EXPECT MD		
		WHERE	IM.ITEM_ID = '$!{item_id}'
		AND		IM.ITEM_ID = MD.ITEM_ID
		AND		MD.VERSION = '$!{cnfm_date}'
		AND		MD.GUBN	   = '1'
		#elseif("$!{checked_button}" == "Y_1") 
		SELECT	F_GET_CODE_NAME('SALES_CAT2', T2.SALES_CAT02) SALES_CAT02,
				T2.ITEM_ID,
        		T2.ITEM_NAME,
				'사용자 예측'		GUBN,
        		3				GUBN_IDX,  
        		#if("$!{no_flag}" == "NEW") 
        		ROUND(DECODE((NVL(MAX(T1.ONE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),0,
        		(TO_NUMBER('$!{three_mon}')/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),
	        	(NVL(MAX(T1.ONE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1))
                ) * (1+(NVL('$!{simul_data}',0)/100)),0)																						ONE_W,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W1),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W1),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W1,
				ROUND(DECODE(NVL(MAX(T1.ONE_W2),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W2),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W2,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W3),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W3),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W3,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W4),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W4),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W4,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W5),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W5),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W5,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W6),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W6),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W6,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W7),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W7),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W7,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W8),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W8),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W8,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W9),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W9),0))*(1+(NVL('$!{simul_data}',0)/100)),0)		ONE_W9,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W10),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W10),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W10,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W11),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W11),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W11,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W12),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W12),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W12,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W13),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W13),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W13,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W14),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W14),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W14,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W15),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W15),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W15,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W16),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W16),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W16,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W17),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W17),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W17,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W18),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W18),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W18,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W19),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W19),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W19,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W20),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W20),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W20,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W21),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W21),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W21,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W22),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W22),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W22,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W23),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W23),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W23,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W24),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W24),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W24,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W25),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W25),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W25,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W26),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W26),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W26,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W27),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W27),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W27,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W28),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W28),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W28,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W29),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W29),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W29,
		        ROUND(DECODE(NVL(MAX(T1.ONE_W30),0),0,TO_NUMBER('$!{three_mon}'),NVL(MAX(T1.ONE_W30),0))*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W30
		        #else      		
				ROUND((((NVL(MAX(T1.ONE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)))
				*	(1+(	NVL('$!{simul_data}',0)	/100))),0)		ONE_W,
		        ROUND(NVL(MAX(T1.ONE_W1),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W1,
				ROUND(NVL(MAX(T1.ONE_W2),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W2,
		        ROUND(NVL(MAX(T1.ONE_W3),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W3,
		        ROUND(NVL(MAX(T1.ONE_W4),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W4,
		        ROUND(NVL(MAX(T1.ONE_W5),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W5,
		        ROUND(NVL(MAX(T1.ONE_W6),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W6,
		        ROUND(NVL(MAX(T1.ONE_W7),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W7,
		        ROUND(NVL(MAX(T1.ONE_W8),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W8,
		        ROUND(NVL(MAX(T1.ONE_W9),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W9,
		        ROUND(NVL(MAX(T1.ONE_W10),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W10,
		        ROUND(NVL(MAX(T1.ONE_W11),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W11,
		        ROUND(NVL(MAX(T1.ONE_W12),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W12,
		        ROUND(NVL(MAX(T1.ONE_W13),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W13,
		        ROUND(NVL(MAX(T1.ONE_W14),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W14,
		        ROUND(NVL(MAX(T1.ONE_W15),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W15,
		        ROUND(NVL(MAX(T1.ONE_W16),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W16,
		        ROUND(NVL(MAX(T1.ONE_W17),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W17,
		        ROUND(NVL(MAX(T1.ONE_W18),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W18,
		        ROUND(NVL(MAX(T1.ONE_W19),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W19,
		        ROUND(NVL(MAX(T1.ONE_W20),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W20,
		        ROUND(NVL(MAX(T1.ONE_W21),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W21,
		        ROUND(NVL(MAX(T1.ONE_W22),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W22,
		        ROUND(NVL(MAX(T1.ONE_W23),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W23,
		        ROUND(NVL(MAX(T1.ONE_W24),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W24,
		        ROUND(NVL(MAX(T1.ONE_W25),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W25,
		        ROUND(NVL(MAX(T1.ONE_W26),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W26,
		        ROUND(NVL(MAX(T1.ONE_W27),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W27,
		        ROUND(NVL(MAX(T1.ONE_W28),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W28,
		        ROUND(NVL(MAX(T1.ONE_W29),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W29,
		        ROUND(NVL(MAX(T1.ONE_W30),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	ONE_W30
		        #end
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,
		                DECODE(SALE_DATE,ONE,QTY,0)			ONE_W,
		                DECODE(SALE_DATE,ONE +7,QTY,0)		ONE_W1, 
		                DECODE(SALE_DATE,ONE +14,QTY,0)		ONE_W2, 
		                DECODE(SALE_DATE,ONE +21,QTY,0)		ONE_W3, 
		                DECODE(SALE_DATE,ONE +28,QTY,0)		ONE_W4, 
		                DECODE(SALE_DATE,ONE +35,QTY,0)		ONE_W5, 
		                DECODE(SALE_DATE,ONE +42,QTY,0)		ONE_W6, 
		                DECODE(SALE_DATE,ONE +49,QTY,0)		ONE_W7, 
		                DECODE(SALE_DATE,ONE +56,QTY,0)		ONE_W8, 
		                DECODE(SALE_DATE,ONE +63,QTY,0)		ONE_W9,
		                DECODE(SALE_DATE,ONE +70,QTY,0)		ONE_W10,
		                DECODE(SALE_DATE,ONE +77,QTY,0)		ONE_W11, 
		                DECODE(SALE_DATE,ONE +84,QTY,0)		ONE_W12, 
		                DECODE(SALE_DATE,ONE +91,QTY,0)		ONE_W13, 
		                DECODE(SALE_DATE,ONE +98,QTY,0)		ONE_W14, 
		                DECODE(SALE_DATE,ONE +105,QTY,0)	ONE_W15, 
		                DECODE(SALE_DATE,ONE +112,QTY,0)	ONE_W16, 
		                DECODE(SALE_DATE,ONE +119,QTY,0)	ONE_W17, 
		                DECODE(SALE_DATE,ONE +126,QTY,0)	ONE_W18, 
		                DECODE(SALE_DATE,ONE +133,QTY,0)	ONE_W19,
		                DECODE(SALE_DATE,ONE +140,QTY,0)	ONE_W20, 
		                DECODE(SALE_DATE,ONE +147,QTY,0)	ONE_W21, 
		                DECODE(SALE_DATE,ONE +154,QTY,0)	ONE_W22, 
		                DECODE(SALE_DATE,ONE +161,QTY,0)	ONE_W23, 
		                DECODE(SALE_DATE,ONE +168,QTY,0)	ONE_W24, 
		                DECODE(SALE_DATE,ONE +175,QTY,0)	ONE_W25, 
		                DECODE(SALE_DATE,ONE +182,QTY,0)	ONE_W26, 
		                DECODE(SALE_DATE,ONE +189,QTY,0)	ONE_W27, 
		                DECODE(SALE_DATE,ONE +196,QTY,0)	ONE_W28, 
		                DECODE(SALE_DATE,ONE +203,QTY,0)	ONE_W29,
		                DECODE(SALE_DATE,ONE +210,QTY,0)	ONE_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        			
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.USE_PR_PLAN ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        	GROUP 
	                        	BY 		SALE_DATE,
	                                	ITEM_ID,
	                                	YYYY,
	                                	WEEK_NO
                        		)S1,
		     					(
		     					SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          					FROM	CAL_MST
	     						WHERE 	WEEK_NO = (
	                        				   --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        		  		SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
                                          		FROM		CAL_MST
	                                          	WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )		          				
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                )T1, ITEM_MST T2              
        WHERE	T1.ITEM_ID	= T2.ITEM_ID		
		AND		T2.ITEM_ID = '$!{item_id}' 
		GROUP 
		BY 		T2.ITEM_ID, T2.ITEM_NAME,T2.SALES_CAT02
		#elseif("$!{checked_button}" == "Y_2")
		SELECT	F_GET_CODE_NAME('SALES_CAT2', T2.SALES_CAT02) SALES_CAT02,
				T2.ITEM_ID,
        		T2.ITEM_NAME,
				'사용자 예측'		GUBN,
        		3				GUBN_IDX,
        		ROUND((((NVL(MAX(T1.TWO_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)))
				*	(1+(	NVL('$!{simul_data}',0)	/100))),0)						TWO_W,
		        ROUND(NVL(MAX(T1.TWO_W1),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W1,
				ROUND(NVL(MAX(T1.TWO_W2),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W2,
		        ROUND(NVL(MAX(T1.TWO_W3),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W3,
		        ROUND(NVL(MAX(T1.TWO_W4),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W4,
		        ROUND(NVL(MAX(T1.TWO_W5),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W5,
		        ROUND(NVL(MAX(T1.TWO_W6),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W6,
		        ROUND(NVL(MAX(T1.TWO_W7),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W7,
		        ROUND(NVL(MAX(T1.TWO_W8),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W8,
		        ROUND(NVL(MAX(T1.TWO_W9),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W9,
		        ROUND(NVL(MAX(T1.TWO_W10),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W10,
		        ROUND(NVL(MAX(T1.TWO_W11),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W11,
		        ROUND(NVL(MAX(T1.TWO_W12),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W12,
		        ROUND(NVL(MAX(T1.TWO_W13),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W13,
		        ROUND(NVL(MAX(T1.TWO_W14),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W14,
		        ROUND(NVL(MAX(T1.TWO_W15),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W15,
		        ROUND(NVL(MAX(T1.TWO_W16),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W16,
		        ROUND(NVL(MAX(T1.TWO_W17),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W17,
		        ROUND(NVL(MAX(T1.TWO_W18),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W18,
		        ROUND(NVL(MAX(T1.TWO_W19),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W19,
		        ROUND(NVL(MAX(T1.TWO_W20),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W20,
		        ROUND(NVL(MAX(T1.TWO_W21),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W21,
		        ROUND(NVL(MAX(T1.TWO_W22),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W22,
		        ROUND(NVL(MAX(T1.TWO_W23),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W23,
		        ROUND(NVL(MAX(T1.TWO_W24),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W24,
		        ROUND(NVL(MAX(T1.TWO_W25),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W25,
		        ROUND(NVL(MAX(T1.TWO_W26),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W26,
		        ROUND(NVL(MAX(T1.TWO_W27),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W27,
		        ROUND(NVL(MAX(T1.TWO_W28),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W28,
		        ROUND(NVL(MAX(T1.TWO_W29),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W29,
		        ROUND(NVL(MAX(T1.TWO_W30),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	TWO_W30
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,
		                DECODE(SALE_DATE,TWO,QTY,0)			TWO_W,
		                DECODE(SALE_DATE,TWO +7,QTY,0)		TWO_W1, 
		                DECODE(SALE_DATE,TWO +14,QTY,0)		TWO_W2, 
		                DECODE(SALE_DATE,TWO +21,QTY,0)		TWO_W3, 
		                DECODE(SALE_DATE,TWO +28,QTY,0)		TWO_W4, 
		                DECODE(SALE_DATE,TWO +35,QTY,0)		TWO_W5, 
		                DECODE(SALE_DATE,TWO +42,QTY,0)		TWO_W6, 
		                DECODE(SALE_DATE,TWO +49,QTY,0)		TWO_W7, 
		                DECODE(SALE_DATE,TWO +56,QTY,0)		TWO_W8, 
		                DECODE(SALE_DATE,TWO +63,QTY,0)		TWO_W9,
		                DECODE(SALE_DATE,TWO +70,QTY,0)		TWO_W10,
		                DECODE(SALE_DATE,TWO +77,QTY,0)		TWO_W11, 
		                DECODE(SALE_DATE,TWO +84,QTY,0)		TWO_W12, 
		                DECODE(SALE_DATE,TWO +91,QTY,0)		TWO_W13, 
		                DECODE(SALE_DATE,TWO +98,QTY,0)		TWO_W14, 
		                DECODE(SALE_DATE,TWO +105,QTY,0)	TWO_W15, 
		                DECODE(SALE_DATE,TWO +112,QTY,0)	TWO_W16, 
		                DECODE(SALE_DATE,TWO +119,QTY,0)	TWO_W17, 
		                DECODE(SALE_DATE,TWO +126,QTY,0)	TWO_W18, 
		                DECODE(SALE_DATE,TWO +133,QTY,0)	TWO_W19,
		                DECODE(SALE_DATE,TWO +140,QTY,0)	TWO_W20, 
		                DECODE(SALE_DATE,TWO +147,QTY,0)	TWO_W21, 
		                DECODE(SALE_DATE,TWO +154,QTY,0)	TWO_W22, 
		                DECODE(SALE_DATE,TWO +161,QTY,0)	TWO_W23, 
		                DECODE(SALE_DATE,TWO +168,QTY,0)	TWO_W24, 
		                DECODE(SALE_DATE,TWO +175,QTY,0)	TWO_W25, 
		                DECODE(SALE_DATE,TWO +182,QTY,0)	TWO_W26, 
		                DECODE(SALE_DATE,TWO +189,QTY,0)	TWO_W27, 
		                DECODE(SALE_DATE,TWO +196,QTY,0)	TWO_W28, 
		                DECODE(SALE_DATE,TWO +203,QTY,0)	TWO_W29,
		                DECODE(SALE_DATE,TWO +210,QTY,0)	TWO_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                               
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        			
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                               
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.USE_PR_PLAN ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        	GROUP 
	                        	BY 		SALE_DATE,
	                                	ITEM_ID,
	                                	YYYY,
	                                	WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          					FROM	CAL_MST
	     						WHERE 	WEEK_NO = (
	                        				   --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        		  		SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
                                          		FROM		CAL_MST
	                                          	WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )		          				
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                )T1, ITEM_MST T2                
        WHERE	T1.ITEM_ID	= T2.ITEM_ID	
		AND		T2.ITEM_ID = '$!{item_id}'
		GROUP 
		BY 		T2.ITEM_ID, T2.ITEM_NAME,T2.SALES_CAT02  
		#else
		SELECT	F_GET_CODE_NAME('SALES_CAT2', T2.SALES_CAT02) SALES_CAT02,
				T2.ITEM_ID,
        		T2.ITEM_NAME,
				'사용자 예측'		GUBN,
        		3				GUBN_IDX,
        		ROUND((((NVL(MAX(T1.THREE_W),0)/7) * ((TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)))
				*	(1+(	NVL('$!{simul_data}',0)	/100))),0)						THREE_W,
		        ROUND(NVL(MAX(T1.THREE_W1),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W1,
				ROUND(NVL(MAX(T1.THREE_W2),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W2,
		        ROUND(NVL(MAX(T1.THREE_W3),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W3,
		        ROUND(NVL(MAX(T1.THREE_W4),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W4,
		        ROUND(NVL(MAX(T1.THREE_W5),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W5,
		        ROUND(NVL(MAX(T1.THREE_W6),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W6,
		        ROUND(NVL(MAX(T1.THREE_W7),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W7,
		        ROUND(NVL(MAX(T1.THREE_W8),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W8,
		        ROUND(NVL(MAX(T1.THREE_W9),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W9,
		        ROUND(NVL(MAX(T1.THREE_W10),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W10,
		        ROUND(NVL(MAX(T1.THREE_W11),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W11,
		        ROUND(NVL(MAX(T1.THREE_W12),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W12,
		        ROUND(NVL(MAX(T1.THREE_W13),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W13,
		        ROUND(NVL(MAX(T1.THREE_W14),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W14,
		        ROUND(NVL(MAX(T1.THREE_W15),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W15,
		        ROUND(NVL(MAX(T1.THREE_W16),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W16,
		        ROUND(NVL(MAX(T1.THREE_W17),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W17,
		        ROUND(NVL(MAX(T1.THREE_W18),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W18,
		        ROUND(NVL(MAX(T1.THREE_W19),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W19,
		        ROUND(NVL(MAX(T1.THREE_W20),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W20,
		        ROUND(NVL(MAX(T1.THREE_W21),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W21,
		        ROUND(NVL(MAX(T1.THREE_W22),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W22,
		        ROUND(NVL(MAX(T1.THREE_W23),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W23,
		        ROUND(NVL(MAX(T1.THREE_W24),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W24,
		        ROUND(NVL(MAX(T1.THREE_W25),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W25,
		        ROUND(NVL(MAX(T1.THREE_W26),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W26,
		        ROUND(NVL(MAX(T1.THREE_W27),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W27,
		        ROUND(NVL(MAX(T1.THREE_W28),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W28,
		        ROUND(NVL(MAX(T1.THREE_W29),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W29,
		        ROUND(NVL(MAX(T1.THREE_W30),0)*(1+(NVL('$!{simul_data}',0)/100)),0)	THREE_W30
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,
		                DECODE(SALE_DATE,THREE,QTY,0)		THREE_W,
		                DECODE(SALE_DATE,THREE +7,QTY,0)	THREE_W1, 
		                DECODE(SALE_DATE,THREE +14,QTY,0)	THREE_W2, 
		                DECODE(SALE_DATE,THREE +21,QTY,0)	THREE_W3, 
		                DECODE(SALE_DATE,THREE +28,QTY,0)	THREE_W4, 
		                DECODE(SALE_DATE,THREE +35,QTY,0)	THREE_W5, 
		                DECODE(SALE_DATE,THREE +42,QTY,0)	THREE_W6, 
		                DECODE(SALE_DATE,THREE +49,QTY,0)	THREE_W7, 
		                DECODE(SALE_DATE,THREE +56,QTY,0)	THREE_W8, 
		                DECODE(SALE_DATE,THREE +63,QTY,0)	THREE_W9,
		                DECODE(SALE_DATE,THREE +70,QTY,0)	THREE_W10,
		                DECODE(SALE_DATE,THREE +77,QTY,0)	THREE_W11, 
		                DECODE(SALE_DATE,THREE +84,QTY,0)	THREE_W12, 
		                DECODE(SALE_DATE,THREE +91,QTY,0)	THREE_W13, 
		                DECODE(SALE_DATE,THREE +98,QTY,0)	THREE_W14, 
		                DECODE(SALE_DATE,THREE +105,QTY,0)	THREE_W15, 
		                DECODE(SALE_DATE,THREE +112,QTY,0)	THREE_W16, 
		                DECODE(SALE_DATE,THREE +119,QTY,0)	THREE_W17, 
		                DECODE(SALE_DATE,THREE +126,QTY,0)	THREE_W18, 
		                DECODE(SALE_DATE,THREE +133,QTY,0)	THREE_W19,
		                DECODE(SALE_DATE,THREE +140,QTY,0)	THREE_W20, 
		                DECODE(SALE_DATE,THREE +147,QTY,0)	THREE_W21, 
		                DECODE(SALE_DATE,THREE +154,QTY,0)	THREE_W22, 
		                DECODE(SALE_DATE,THREE +161,QTY,0)	THREE_W23, 
		                DECODE(SALE_DATE,THREE +168,QTY,0)	THREE_W24, 
		                DECODE(SALE_DATE,THREE +175,QTY,0)	THREE_W25, 
		                DECODE(SALE_DATE,THREE +182,QTY,0)	THREE_W26, 
		                DECODE(SALE_DATE,THREE +189,QTY,0)	THREE_W27, 
		                DECODE(SALE_DATE,THREE +196,QTY,0)	THREE_W28, 
		                DECODE(SALE_DATE,THREE +203,QTY,0)	THREE_W29,
		                DECODE(SALE_DATE,THREE +210,QTY,0)	THREE_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        			
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.USE_PR_PLAN ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        	GROUP 
	                        	BY 		SALE_DATE,
	                                	ITEM_ID,
	                                	YYYY,
	                                	WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          					FROM	CAL_MST
	     						WHERE 	WEEK_NO = (
	                        				   --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        		  		SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
                                          		FROM		CAL_MST
	                                          	WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )		          				
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                )T1, ITEM_MST T2                
        WHERE	T1.ITEM_ID	= T2.ITEM_ID		
		AND		T2.ITEM_ID = '$!{item_id}'
		GROUP 
		BY 		T2.ITEM_ID, T2.ITEM_NAME,T2.SALES_CAT02  
		#end
		UNION ALL
               SELECT		
        			F_GET_CODE_NAME('SALES_CAT2', S2.SALES_CAT02) SALES_CAT02,
                    S2.ITEM_ID,
                    S2.ITEM_NAME,
        			'판매량'	GUBN,
                    4		   GUBN_IDX	,
        			CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
                         THEN SUM(WEEK)
                         ELSE 0
                         END	WEEK,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-6,'YYYYMMDD')
                         THEN SUM(WEEK_P01)
                         ELSE 0
                         END	WEEK_P01, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-13,'YYYYMMDD')
                         THEN SUM(WEEK_P02)
                         ELSE 0
                         END	WEEK_P02,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-27,'YYYYMMDD')
                         THEN SUM(WEEK_P03)
                         ELSE 0
                         END	WEEK_P03, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-34,'YYYYMMDD')
                         THEN SUM(WEEK_P04)
                         ELSE 0
                         END	WEEK_P04,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-41,'YYYYMMDD')
                         THEN SUM(WEEK_P05)
                         ELSE 0
                         END	WEEK_P05, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-48,'YYYYMMDD')
                         THEN SUM(WEEK_P06)
                         ELSE 0
                         END	WEEK_P06,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-55,'YYYYMMDD')
                         THEN SUM(WEEK_P07)
                         ELSE 0
                         END	WEEK_P07, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-62,'YYYYMMDD')
                         THEN SUM(WEEK_P08)
                         ELSE 0
                         END	WEEK_P08, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-69,'YYYYMMDD')
                         THEN SUM(WEEK_P09)
                         ELSE 0
                         END	WEEK_P09, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-76,'YYYYMMDD')
                         THEN SUM(WEEK_P10)
                         ELSE 0
                         END	WEEK_P10,     								
            		CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-83,'YYYYMMDD')
                         THEN SUM(WEEK_P11)
                         ELSE 0
                         END	WEEK_P11, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-90,'YYYYMMDD')
                         THEN SUM(WEEK_P12)
                         ELSE 0
                         END	WEEK_P12,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-97,'YYYYMMDD')
                         THEN SUM(WEEK_P13)
                         ELSE 0
                         END	WEEK_P13, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-104,'YYYYMMDD')
                         THEN SUM(WEEK_P14)
                         ELSE 0
                         END	WEEK_P14,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-111,'YYYYMMDD')
                         THEN SUM(WEEK_P15)
                         ELSE 0
                         END	WEEK_P15, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-118,'YYYYMMDD')
                         THEN SUM(WEEK_P16)
                         ELSE 0
                         END	WEEK_P16,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-125,'YYYYMMDD')
                         THEN SUM(WEEK_P17)
                         ELSE 0
                         END	WEEK_P17, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-132,'YYYYMMDD')
                         THEN SUM(WEEK_P18)
                         ELSE 0
                         END	WEEK_P18, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-139,'YYYYMMDD')
                         THEN SUM(WEEK_P19)
                         ELSE 0
                         END	WEEK_P19, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-146,'YYYYMMDD')
                         THEN SUM(WEEK_P20)
                         ELSE 0
                         END	WEEK_P20,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-153,'YYYYMMDD')
                         THEN SUM(WEEK_P21)
                         ELSE 0
                         END	WEEK_P21, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-160,'YYYYMMDD')
                         THEN SUM(WEEK_P22)
                         ELSE 0
                         END	WEEK_P22,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-167,'YYYYMMDD')
                         THEN SUM(WEEK_P23)
                         ELSE 0
                         END	WEEK_P23, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-174,'YYYYMMDD')
                         THEN SUM(WEEK_P24)
                         ELSE 0
                         END	WEEK_P24,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-181,'YYYYMMDD')
                         THEN SUM(WEEK_P25)
                         ELSE 0
                         END	WEEK_P25, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-188,'YYYYMMDD')
                         THEN SUM(WEEK_P26)
                         ELSE 0
                         END	WEEK_P26,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-195,'YYYYMMDD')
                         THEN SUM(WEEK_P27)
                         ELSE 0
                         END	WEEK_P27, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-202,'YYYYMMDD')
                         THEN SUM(WEEK_P28)
                         ELSE 0
                         END	WEEK_P28, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-209,'YYYYMMDD')
                         THEN SUM(WEEK_P29)
                         ELSE 0
                         END	WEEK_P29, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-216,'YYYYMMDD')
                         THEN SUM(WEEK_P30)
                         ELSE 0
                         END	WEEK_P30               
            FROM   (
                   SELECT 	ITEM_ID,                   			
                   			WEEK,
                            WEEK_P01,
                            WEEK_P02,
                            WEEK_P03,
                            WEEK_P04,
                            WEEK_P05,
                            WEEK_P06,
                            WEEK_P07,
                            WEEK_P08,
                            WEEK_P09,
                            WEEK_P10,
                            WEEK_P11,
                            WEEK_P12,
                            WEEK_P13,
                            WEEK_P14,
                            WEEK_P15,
                            WEEK_P16,
                            WEEK_P17,
                            WEEK_P18,
                            WEEK_P19,
                            WEEK_P20,
                            WEEK_P21,
                            WEEK_P22,
                            WEEK_P23,
                            WEEK_P24,
                            WEEK_P25,
                            WEEK_P26,
                            WEEK_P27,
                            WEEK_P28,
                            WEEK_P29,
                            WEEK_P30
                    FROM	SALES_WEEK_AGG						        		
                    WHERE	VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND		GUBN	= '1'
                    AND		ITEM_ID	= '$!{item_id}'
	                UNION ALL                                            
	                SELECT	 ITEM_ID,                    		
	                		 ROUND(SUM(QTY),0)		WEEK,
                    		 ROUND(SUM(QTY_P01),0)	WEEK_P01,
                             ROUND(SUM(QTY_P02),0)	WEEK_P02,
                             ROUND(SUM(QTY_P03),0)	WEEK_P03,
                             ROUND(SUM(QTY_P04),0)	WEEK_P04,
                             ROUND(SUM(QTY_P05),0)	WEEK_P05,
                             ROUND(SUM(QTY_P06),0)	WEEK_P06,
                             ROUND(SUM(QTY_P07),0)	WEEK_P07,
                             ROUND(SUM(QTY_P08),0)	WEEK_P08,
                             ROUND(SUM(QTY_P09),0)	WEEK_P09,
                             ROUND(SUM(QTY_P10),0)	WEEK_P10,
                             ROUND(SUM(QTY_P11),0)	WEEK_P11,
                             ROUND(SUM(QTY_P12),0)	WEEK_P12,
                             ROUND(SUM(QTY_P13),0)	WEEK_P13,
                             ROUND(SUM(QTY_P14),0)	WEEK_P14,
                             ROUND(SUM(QTY_P15),0)	WEEK_P15,
                             ROUND(SUM(QTY_P16),0)	WEEK_P16,
                             ROUND(SUM(QTY_P17),0)	WEEK_P17,
                             ROUND(SUM(QTY_P18),0)	WEEK_P18,
                             ROUND(SUM(QTY_P19),0)	WEEK_P19,
                             ROUND(SUM(QTY_P20),0)	WEEK_P20,
                             ROUND(SUM(QTY_P21),0)	WEEK_P21,
                             ROUND(SUM(QTY_P22),0)	WEEK_P22,
                             ROUND(SUM(QTY_P23),0)	WEEK_P23,
                             ROUND(SUM(QTY_P24),0)	WEEK_P24,
                             ROUND(SUM(QTY_P25),0)	WEEK_P25,
                             ROUND(SUM(QTY_P26),0)	WEEK_P26,
                             ROUND(SUM(QTY_P27),0)	WEEK_P27,
                             ROUND(SUM(QTY_P28),0)	WEEK_P28,
                             ROUND(SUM(QTY_P29),0)	WEEK_P29,
                             ROUND(SUM(QTY_P30),0)	WEEK_P30                             
                    FROM	(
                            SELECT 	A.ITEM_ID	PROD_ITEM_ID,
                            		B.ITEM_ID	ITEM_ID,                                    
                            		A.WEEK	   * B.QTY  QTY,                                       		
						            A.WEEK_P01 * B.QTY	QTY_P01,
                                    A.WEEK_P02 * B.QTY	QTY_P02, 
                                    A.WEEK_P03 * B.QTY	QTY_P03, 
                                    A.WEEK_P04 * B.QTY	QTY_P04, 
                                    A.WEEK_P05 * B.QTY	QTY_P05, 
                                    A.WEEK_P06 * B.QTY	QTY_P06, 
                                    A.WEEK_P07 * B.QTY	QTY_P07, 
                                    A.WEEK_P08 * B.QTY	QTY_P08, 
                                    A.WEEK_P09 * B.QTY	QTY_P09, 
                                    A.WEEK_P10 * B.QTY	QTY_P10,
                                    A.WEEK_P11 * B.QTY	QTY_P11,
                                    A.WEEK_P12 * B.QTY	QTY_P12, 
                                    A.WEEK_P13 * B.QTY	QTY_P13, 
                                    A.WEEK_P14 * B.QTY	QTY_P14, 
                                    A.WEEK_P15 * B.QTY	QTY_P15, 
                                    A.WEEK_P16 * B.QTY	QTY_P16, 
                                    A.WEEK_P17 * B.QTY	QTY_P17, 
                                    A.WEEK_P18 * B.QTY	QTY_P18, 
                                    A.WEEK_P19 * B.QTY	QTY_P19, 
                                    A.WEEK_P20 * B.QTY	QTY_P20, 
                                    A.WEEK_P21 * B.QTY	QTY_P21,
                                    A.WEEK_P22 * B.QTY	QTY_P22, 
                                    A.WEEK_P23 * B.QTY	QTY_P23, 
                                    A.WEEK_P24 * B.QTY	QTY_P24, 
                                    A.WEEK_P25 * B.QTY	QTY_P25, 
                                    A.WEEK_P26 * B.QTY	QTY_P26, 
                                    A.WEEK_P27 * B.QTY	QTY_P27, 
                                    A.WEEK_P28 * B.QTY	QTY_P28, 
                                    A.WEEK_P29 * B.QTY	QTY_P29, 
                                    A.WEEK_P30 * B.QTY	QTY_P30           
						    FROM	(
                             		SELECT 	ITEM_ID,
                             				WEEK,
                                    		WEEK_P01,
                                            WEEK_P02,
                                            WEEK_P03,
                                            WEEK_P04,
                                            WEEK_P05,
                                            WEEK_P06,
                                            WEEK_P07,
                                            WEEK_P08,
                                            WEEK_P09,
                                            WEEK_P10,
                                            WEEK_P11,
                                            WEEK_P12,
                                            WEEK_P13,
                                            WEEK_P14,
                                            WEEK_P15,
                                            WEEK_P16,
                                            WEEK_P17,
                                            WEEK_P18,
                                            WEEK_P19,
                                            WEEK_P20,
                                            WEEK_P21,
                                            WEEK_P22,
                                            WEEK_P23,
                                            WEEK_P24,
                                            WEEK_P25,
                                            WEEK_P26,
                                            WEEK_P27,
                                            WEEK_P28,
                                            WEEK_P29,
                                            WEEK_P30 
                                    FROM 	SALES_WEEK_AGG
                                    WHERE 	VERSION=TO_CHAR(SYSDATE,'YYYYMMDD')                                                    
                                    AND 	GUBN='1'
                             		)A,
						        	(
						            SELECT	IM.ITEM_ID,                                    		
								            MB.PROD_ITEM_ID,
								            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
								            MAX(MB.PROD_VER) PROD_VER
								    FROM	MBOM MB, ITEM_MST IM
								    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
								    AND		IM.ITEM_ID = '$!{item_id}'											   
								    AND		IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
								    GROUP
								    BY		IM.ITEM_ID,                                    		
								            MB.PROD_ITEM_ID,
								            MB.CONS_QTY,
								            MB.CONS_QTY_UOM,
								            IM.QTY
			            			)B  
	     					WHERE	A.ITEM_ID	=	B.PROD_ITEM_ID
                            )
                    GROUP
                    BY		ITEM_ID
                    )S1, ITEM_MST S2
            WHERE	S1.ITEM_ID = S2.ITEM_ID
            GROUP
            BY		S2.ITEM_ID, S2.SALES_CAT02, S2.ITEM_NAME
            UNION ALL
            SELECT	F_GET_CODE_NAME('SALES_CAT2', T3.SALES_CAT02) SALES_CAT02,
                    T3.ITEM_ID,
                    T3.ITEM_NAME,
    		'차이량'		GUBN,
    		5			   GUBN_IDX,
			T1.WEEK    - T2.WEEK,	        
	        T1.WEEK_01 - T2.WEEK_01,
	        T1.WEEK_02 - T2.WEEK_02,
	        T1.WEEK_03 - T2.WEEK_03,
	        T1.WEEK_04 - T2.WEEK_04,
	        T1.WEEK_05 - T2.WEEK_05,
	        T1.WEEK_06 - T2.WEEK_06,
	        T1.WEEK_07 - T2.WEEK_07,
	        T1.WEEK_08 - T2.WEEK_08,
	        T1.WEEK_09 - T2.WEEK_09,
	        T1.WEEK_10 - T2.WEEK_10,
	        T1.WEEK_11 - T2.WEEK_11,
	        T1.WEEK_12 - T2.WEEK_12,
	        T1.WEEK_13 - T2.WEEK_13,
	        T1.WEEK_14 - T2.WEEK_14,
	        T1.WEEK_15 - T2.WEEK_15,
	        T1.WEEK_16 - T2.WEEK_16,
	        T1.WEEK_17 - T2.WEEK_17,
	        T1.WEEK_18 - T2.WEEK_18,
	        T1.WEEK_19 - T2.WEEK_19,
	        T1.WEEK_20 - T2.WEEK_20,
	        T1.WEEK_21 - T2.WEEK_21,
	        T1.WEEK_22 - T2.WEEK_22,
	        T1.WEEK_23 - T2.WEEK_23,
	        T1.WEEK_24 - T2.WEEK_24,
	        T1.WEEK_25 - T2.WEEK_25,
	        T1.WEEK_26 - T2.WEEK_26,
	        T1.WEEK_27 - T2.WEEK_27,
	        T1.WEEK_28 - T2.WEEK_28,
	        T1.WEEK_29 - T2.WEEK_29,
	        T1.WEEK_30 - T2.WEEK_30	       	      	                
	FROM	(
			SELECT	ITEM_ID,
            		WEEK,
	                WEEK_01,
	                WEEK_02,
	                WEEK_03,
	                WEEK_04,
	                WEEK_05,
	                WEEK_06,
	                WEEK_07,
	                WEEK_08,
	                WEEK_09,
	                WEEK_10,
	                WEEK_11,
	                WEEK_12,
	                WEEK_13,
	                WEEK_14,
	                WEEK_15,
	                WEEK_16,
	                WEEK_17,
	                WEEK_18,
	                WEEK_19,
	                WEEK_20,
	                WEEK_21,
	                WEEK_22,
	                WEEK_23,
	                WEEK_24,
	                WEEK_25,
	                WEEK_26,
	                WEEK_27,
	                WEEK_28,
	                WEEK_29,
	                WEEK_30	                          
        	FROM	IMPORT_MD_EXPECT
	        WHERE	VERSION	= '$!{cnfm_date}'
	        AND		ITEM_ID	= '$!{item_id}'
	        AND		GUBN 	= '1'	     
            )T1,   
        	(
        	SELECT	ITEM_ID,
            		CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD')
                         THEN SUM(WEEK)
                         ELSE 0
                         END	WEEK,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-6,'YYYYMMDD')
                         THEN SUM(WEEK_P01)
                         ELSE 0
                         END	WEEK_01, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-13,'YYYYMMDD')
                         THEN SUM(WEEK_P02)
                         ELSE 0
                         END	WEEK_02,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-27,'YYYYMMDD')
                         THEN SUM(WEEK_P03)
                         ELSE 0
                         END	WEEK_03, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-34,'YYYYMMDD')
                         THEN SUM(WEEK_P04)
                         ELSE 0
                         END	WEEK_04,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-41,'YYYYMMDD')
                         THEN SUM(WEEK_P05)
                         ELSE 0
                         END	WEEK_05, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-48,'YYYYMMDD')
                         THEN SUM(WEEK_P06)
                         ELSE 0
                         END	WEEK_06,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-55,'YYYYMMDD')
                         THEN SUM(WEEK_P07)
                         ELSE 0
                         END	WEEK_07, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-62,'YYYYMMDD')
                         THEN SUM(WEEK_P08)
                         ELSE 0
                         END	WEEK_08, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-69,'YYYYMMDD')
                         THEN SUM(WEEK_P09)
                         ELSE 0
                         END	WEEK_09, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-76,'YYYYMMDD')
                         THEN SUM(WEEK_P10)
                         ELSE 0
                         END	WEEK_10,     								
            		CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-83,'YYYYMMDD')
                         THEN SUM(WEEK_P11)
                         ELSE 0
                         END	WEEK_11, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-90,'YYYYMMDD')
                         THEN SUM(WEEK_P12)
                         ELSE 0
                         END	WEEK_12,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-97,'YYYYMMDD')
                         THEN SUM(WEEK_P13)
                         ELSE 0
                         END	WEEK_13, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-104,'YYYYMMDD')
                         THEN SUM(WEEK_P14)
                         ELSE 0
                         END	WEEK_14,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-111,'YYYYMMDD')
                         THEN SUM(WEEK_P15)
                         ELSE 0
                         END	WEEK_15, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-118,'YYYYMMDD')
                         THEN SUM(WEEK_P16)
                         ELSE 0
                         END	WEEK_16,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-125,'YYYYMMDD')
                         THEN SUM(WEEK_P17)
                         ELSE 0
                         END	WEEK_17, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-132,'YYYYMMDD')
                         THEN SUM(WEEK_P18)
                         ELSE 0
                         END	WEEK_18, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-139,'YYYYMMDD')
                         THEN SUM(WEEK_P19)
                         ELSE 0
                         END	WEEK_19, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-146,'YYYYMMDD')
                         THEN SUM(WEEK_P20)
                         ELSE 0
                         END	WEEK_20,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-153,'YYYYMMDD')
                         THEN SUM(WEEK_P21)
                         ELSE 0
                         END	WEEK_21, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-160,'YYYYMMDD')
                         THEN SUM(WEEK_P22)
                         ELSE 0
                         END	WEEK_22,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-167,'YYYYMMDD')
                         THEN SUM(WEEK_P23)
                         ELSE 0
                         END	WEEK_23, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-174,'YYYYMMDD')
                         THEN SUM(WEEK_P24)
                         ELSE 0
                         END	WEEK_24,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-181,'YYYYMMDD')
                         THEN SUM(WEEK_P25)
                         ELSE 0
                         END	WEEK_25, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-188,'YYYYMMDD')
                         THEN SUM(WEEK_P26)
                         ELSE 0
                         END	WEEK_26,
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-195,'YYYYMMDD')
                         THEN SUM(WEEK_P27)
                         ELSE 0
                         END	WEEK_27, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-202,'YYYYMMDD')
                         THEN SUM(WEEK_P28)
                         ELSE 0
                         END	WEEK_28, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-209,'YYYYMMDD')
                         THEN SUM(WEEK_P29)
                         ELSE 0
                         END	WEEK_29, 
                    CASE WHEN TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}'),'D')+1,'YYYYMMDD') &lt;= TO_CHAR(TRUNC(SYSDATE,'D')-216,'YYYYMMDD')
                         THEN SUM(WEEK_P30)
                         ELSE 0
                         END	WEEK_30                    
            FROM   (
                   SELECT 	ITEM_ID,
                   			WEEK,
                            WEEK_P01,
                            WEEK_P02,
                            WEEK_P03,
                            WEEK_P04,
                            WEEK_P05,
                            WEEK_P06,
                            WEEK_P07,
                            WEEK_P08,
                            WEEK_P09,
                            WEEK_P10,
                            WEEK_P11,
                            WEEK_P12,
                            WEEK_P13,
                            WEEK_P14,
                            WEEK_P15,
                            WEEK_P16,
                            WEEK_P17,
                            WEEK_P18,
                            WEEK_P19,
                            WEEK_P20,
                            WEEK_P21,
                            WEEK_P22,
                            WEEK_P23,
                            WEEK_P24,
                            WEEK_P25,
                            WEEK_P26,
                            WEEK_P27,
                            WEEK_P28,
                            WEEK_P29,
                            WEEK_P30
                    FROM	SALES_WEEK_AGG						        		
                    WHERE	VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND		GUBN	= '1'
                    AND		ITEM_ID	= '$!{item_id}'
	                UNION ALL                                            
	                SELECT	 ITEM_ID,
	                		 ROUND(SUM(QTY),0)		WEEK,
                    		 ROUND(SUM(QTY_P01),0)	WEEK_P01,
                             ROUND(SUM(QTY_P02),0)	WEEK_P02,
                             ROUND(SUM(QTY_P03),0)	WEEK_P03,
                             ROUND(SUM(QTY_P04),0)	WEEK_P04,
                             ROUND(SUM(QTY_P05),0)	WEEK_P05,
                             ROUND(SUM(QTY_P06),0)	WEEK_P06,
                             ROUND(SUM(QTY_P07),0)	WEEK_P07,
                             ROUND(SUM(QTY_P08),0)	WEEK_P08,
                             ROUND(SUM(QTY_P09),0)	WEEK_P09,
                             ROUND(SUM(QTY_P10),0)	WEEK_P10,
                             ROUND(SUM(QTY_P11),0)	WEEK_P11,
                             ROUND(SUM(QTY_P12),0)	WEEK_P12,
                             ROUND(SUM(QTY_P13),0)	WEEK_P13,
                             ROUND(SUM(QTY_P14),0)	WEEK_P14,
                             ROUND(SUM(QTY_P15),0)	WEEK_P15,
                             ROUND(SUM(QTY_P16),0)	WEEK_P16,
                             ROUND(SUM(QTY_P17),0)	WEEK_P17,
                             ROUND(SUM(QTY_P18),0)	WEEK_P18,
                             ROUND(SUM(QTY_P19),0)	WEEK_P19,
                             ROUND(SUM(QTY_P20),0)	WEEK_P20,
                             ROUND(SUM(QTY_P21),0)	WEEK_P21,
                             ROUND(SUM(QTY_P22),0)	WEEK_P22,
                             ROUND(SUM(QTY_P23),0)	WEEK_P23,
                             ROUND(SUM(QTY_P24),0)	WEEK_P24,
                             ROUND(SUM(QTY_P25),0)	WEEK_P25,
                             ROUND(SUM(QTY_P26),0)	WEEK_P26,
                             ROUND(SUM(QTY_P27),0)	WEEK_P27,
                             ROUND(SUM(QTY_P28),0)	WEEK_P28,
                             ROUND(SUM(QTY_P29),0)	WEEK_P29,
                             ROUND(SUM(QTY_P30),0)	WEEK_P30                             
                    FROM	(
                            SELECT 	A.ITEM_ID	PROD_ITEM_ID,
                            		B.ITEM_ID	ITEM_ID,   
                            		A.WEEK	   * B.QTY  QTY,                                         		
						            A.WEEK_P01 * B.QTY	QTY_P01,
                                    A.WEEK_P02 * B.QTY	QTY_P02, 
                                    A.WEEK_P03 * B.QTY	QTY_P03, 
                                    A.WEEK_P04 * B.QTY	QTY_P04, 
                                    A.WEEK_P05 * B.QTY	QTY_P05, 
                                    A.WEEK_P06 * B.QTY	QTY_P06, 
                                    A.WEEK_P07 * B.QTY	QTY_P07, 
                                    A.WEEK_P08 * B.QTY	QTY_P08, 
                                    A.WEEK_P09 * B.QTY	QTY_P09, 
                                    A.WEEK_P10 * B.QTY	QTY_P10,
                                    A.WEEK_P11 * B.QTY	QTY_P11,
                                    A.WEEK_P12 * B.QTY	QTY_P12, 
                                    A.WEEK_P13 * B.QTY	QTY_P13, 
                                    A.WEEK_P14 * B.QTY	QTY_P14, 
                                    A.WEEK_P15 * B.QTY	QTY_P15, 
                                    A.WEEK_P16 * B.QTY	QTY_P16, 
                                    A.WEEK_P17 * B.QTY	QTY_P17, 
                                    A.WEEK_P18 * B.QTY	QTY_P18, 
                                    A.WEEK_P19 * B.QTY	QTY_P19, 
                                    A.WEEK_P20 * B.QTY	QTY_P20, 
                                    A.WEEK_P21 * B.QTY	QTY_P21,
                                    A.WEEK_P22 * B.QTY	QTY_P22, 
                                    A.WEEK_P23 * B.QTY	QTY_P23, 
                                    A.WEEK_P24 * B.QTY	QTY_P24, 
                                    A.WEEK_P25 * B.QTY	QTY_P25, 
                                    A.WEEK_P26 * B.QTY	QTY_P26, 
                                    A.WEEK_P27 * B.QTY	QTY_P27, 
                                    A.WEEK_P28 * B.QTY	QTY_P28, 
                                    A.WEEK_P29 * B.QTY	QTY_P29, 
                                    A.WEEK_P30 * B.QTY	QTY_P30           
						    FROM	(
                             		SELECT 	ITEM_ID,
                             				WEEK,
                                    		WEEK_P01,
                                            WEEK_P02,
                                            WEEK_P03,
                                            WEEK_P04,
                                            WEEK_P05,
                                            WEEK_P06,
                                            WEEK_P07,
                                            WEEK_P08,
                                            WEEK_P09,
                                            WEEK_P10,
                                            WEEK_P11,
                                            WEEK_P12,
                                            WEEK_P13,
                                            WEEK_P14,
                                            WEEK_P15,
                                            WEEK_P16,
                                            WEEK_P17,
                                            WEEK_P18,
                                            WEEK_P19,
                                            WEEK_P20,
                                            WEEK_P21,
                                            WEEK_P22,
                                            WEEK_P23,
                                            WEEK_P24,
                                            WEEK_P25,
                                            WEEK_P26,
                                            WEEK_P27,
                                            WEEK_P28,
                                            WEEK_P29,
                                            WEEK_P30 
                                    FROM 	SALES_WEEK_AGG
                                    WHERE 	VERSION=TO_CHAR(SYSDATE,'YYYYMMDD')                                                    
                                    AND 	GUBN='1'
                             		)A,
						        	(
						            SELECT	IM.ITEM_ID,
								            MB.PROD_ITEM_ID,
								            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
								            MAX(MB.PROD_VER) PROD_VER
								    FROM	MBOM MB, ITEM_MST IM
								    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
								    AND		IM.ITEM_ID = '$!{item_id}'											   
								    AND		IM.SELL_STOP_DATE &gt;= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
								    GROUP
								    BY		IM.ITEM_ID,
								            MB.PROD_ITEM_ID,
								            MB.CONS_QTY,
								            MB.CONS_QTY_UOM,
								            IM.QTY
			            			)B  
	     					WHERE	A.ITEM_ID	=	B.PROD_ITEM_ID
                            )
                    GROUP
                    BY		ITEM_ID 
                    )
            GROUP
            BY		ITEM_ID
       	 	)T2, ITEM_MST T3
            WHERE	T1.ITEM_ID = T2.ITEM_ID
            AND		T1.ITEM_ID = T3.ITEM_ID
		)T1,
		/*TP_FLAG*/
		(
		SELECT  ITEM_ID,
                CASE
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') 		= IPGO_DATE THEN 0
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 7,'IW') 	= IPGO_DATE THEN 1
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 14,'IW') = IPGO_DATE THEN 2
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 21,'IW') = IPGO_DATE THEN 3
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 28,'IW') = IPGO_DATE THEN 4
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 35,'IW') = IPGO_DATE THEN 5
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 42,'IW') = IPGO_DATE THEN 6
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 49,'IW') = IPGO_DATE THEN 7
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 56,'IW') = IPGO_DATE THEN 8
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 63,'IW') = IPGO_DATE THEN 9
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 70,'IW') = IPGO_DATE THEN 10
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 77,'IW') = IPGO_DATE THEN 11
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 84,'IW') = IPGO_DATE THEN 12
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 91,'IW') = IPGO_DATE THEN 13
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 98,'IW') = IPGO_DATE THEN 14 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 105,'IW') = IPGO_DATE THEN 15 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 112,'IW') = IPGO_DATE THEN 16 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 119,'IW') = IPGO_DATE THEN 17  
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 126,'IW') = IPGO_DATE THEN 18 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 133,'IW') = IPGO_DATE THEN 19 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 140,'IW') = IPGO_DATE THEN 20  
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 147,'IW') = IPGO_DATE THEN 21 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 154,'IW') = IPGO_DATE THEN 22 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 161,'IW') = IPGO_DATE THEN 23
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 168,'IW') = IPGO_DATE THEN 24 
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 175,'IW') = IPGO_DATE THEN 25
                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 182,'IW') = IPGO_DATE THEN 26                  
                     ELSE 0
                END  TP_FLAG
       FROM	(
			SELECT	ITEM_ID, 
					TRUNC(TO_DATE('$!{cnfm_date}') + LEAD_TIME,'IW') IPGO_DATE
			FROM	(
					SELECT	ITEM_ID,		
							NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
					FROM	ITEM_MST
					--WHERE	NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) &gt; 0
					WHERE	ITYPE		= 'HAWA'	
                    AND		SELL_STOP_DATE &gt;= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
                    AND		USE_PR_PLAN = 'Y'                   
					)
			)                        
		)T2,
		/*사용자 예측 과거30주*/
		(
		 SELECT	AG.ITEM_ID,
 				ROUND((AG.WEEK_P30 + NVL(BOM.BOM_P30,0)),0)		WEEK_P30,
        		ROUND((AG.WEEK_P29 + NVL(BOM.BOM_P29,0)),0)		WEEK_P29,
        		ROUND((AG.WEEK_P28 + NVL(BOM.BOM_P28,0)),0)		WEEK_P28,
        		ROUND((AG.WEEK_P27 + NVL(BOM.BOM_P27,0)),0)		WEEK_P27,
        		ROUND((AG.WEEK_P26 + NVL(BOM.BOM_P26,0)),0)		WEEK_P26,
        		ROUND((AG.WEEK_P25 + NVL(BOM.BOM_P25,0)),0)		WEEK_P25,
        		ROUND((AG.WEEK_P24 + NVL(BOM.BOM_P24,0)),0)		WEEK_P24,
        		ROUND((AG.WEEK_P23 + NVL(BOM.BOM_P23,0)),0)		WEEK_P23,
        		ROUND((AG.WEEK_P22 + NVL(BOM.BOM_P22,0)),0)		WEEK_P22,
        		ROUND((AG.WEEK_P21 + NVL(BOM.BOM_P21,0)),0)		WEEK_P21,
        		ROUND((AG.WEEK_P20 + NVL(BOM.BOM_P20,0)),0)		WEEK_P20,
        		ROUND((AG.WEEK_P19 + NVL(BOM.BOM_P19,0)),0)		WEEK_P19,
        		ROUND((AG.WEEK_P18 + NVL(BOM.BOM_P18,0)),0)		WEEK_P18,
        		ROUND((AG.WEEK_P17 + NVL(BOM.BOM_P17,0)),0)		WEEK_P17,
        		ROUND((AG.WEEK_P16 + NVL(BOM.BOM_P16,0)),0)		WEEK_P16,
        		ROUND((AG.WEEK_P15 + NVL(BOM.BOM_P15,0)),0)		WEEK_P15,
        		ROUND((AG.WEEK_P14 + NVL(BOM.BOM_P14,0)),0)		WEEK_P14,
        		ROUND((AG.WEEK_P13 + NVL(BOM.BOM_P13,0)),0)		WEEK_P13,
        		ROUND((AG.WEEK_P12 + NVL(BOM.BOM_P12,0)),0)		WEEK_P12,
        		ROUND((AG.WEEK_P11 + NVL(BOM.BOM_P11,0)),0)		WEEK_P11,
        		ROUND((AG.WEEK_P10 + NVL(BOM.BOM_P10,0)),0)		WEEK_P10,
        		ROUND((AG.WEEK_P09 + NVL(BOM.BOM_P09,0)),0)		WEEK_P09,
        		ROUND((AG.WEEK_P08 + NVL(BOM.BOM_P08,0)),0)		WEEK_P08,
        		ROUND((AG.WEEK_P07 + NVL(BOM.BOM_P07,0)),0)		WEEK_P07,
        		ROUND((AG.WEEK_P06 + NVL(BOM.BOM_P06,0)),0)		WEEK_P06,
        		ROUND((AG.WEEK_P05 + NVL(BOM.BOM_P05,0)),0)		WEEK_P05,
        		ROUND((AG.WEEK_P04 + NVL(BOM.BOM_P04,0)),0)		WEEK_P04,
        		ROUND((AG.WEEK_P03 + NVL(BOM.BOM_P03,0)),0)		WEEK_P03,
        		ROUND((AG.WEEK_P02 + NVL(BOM.BOM_P02,0)),0)		WEEK_P02,
        		ROUND((AG.WEEK_P01 + NVL(BOM.BOM_P01,0)),0)		WEEK_P01        	   	
 		FROM	(
		        SELECT  ITEM_ID,
		        		CNT,  
		                WEEK_P30,
		                WEEK_P29,
		                WEEK_P28,
		                WEEK_P27,
		                WEEK_P26,
		                WEEK_P25,
		                WEEK_P24,
		                WEEK_P23,
		                WEEK_P22,
		                WEEK_P21,
		                WEEK_P20,
		                WEEK_P19,
		                WEEK_P18,
		                WEEK_P17,
		                WEEK_P16,
		                WEEK_P15,
		                WEEK_P14,
		                WEEK_P13,
		                WEEK_P12,
		                WEEK_P11,
		                WEEK_P10,
		                WEEK_P09,
		                WEEK_P08,
		                WEEK_P07,
		                WEEK_P06,
		                WEEK_P05,
		                WEEK_P04,
		                WEEK_P03,
		                WEEK_P02,
		                WEEK_P01		                
		        FROM    SALES_WEEK_AGG
		        WHERE	GUBN = '1'
		        AND		VERSION = '$!{cnfm_date}'
		        AND		ITEM_ID = '$!{item_id}'
		        )AG,
		        (
				SELECT	T1.CONS_ITEM_ID				ITEM_ID,
						SUM(T2.WEEK_P30 *T1.QTY)	BOM_P30,
						SUM(T2.WEEK_P29 *T1.QTY)	BOM_P29,
						SUM(T2.WEEK_P28 *T1.QTY)	BOM_P28,
						SUM(T2.WEEK_P27 *T1.QTY)	BOM_P27,
						SUM(T2.WEEK_P26 *T1.QTY)	BOM_P26,
						SUM(T2.WEEK_P25 *T1.QTY)	BOM_P25,
						SUM(T2.WEEK_P24 *T1.QTY)	BOM_P24,
						SUM(T2.WEEK_P23 *T1.QTY)	BOM_P23,
						SUM(T2.WEEK_P22 *T1.QTY)	BOM_P22,
						SUM(T2.WEEK_P21 *T1.QTY)	BOM_P21,
						SUM(T2.WEEK_P20 *T1.QTY)	BOM_P20,
						SUM(T2.WEEK_P19 *T1.QTY)	BOM_P19,
						SUM(T2.WEEK_P18 *T1.QTY)	BOM_P18,
						SUM(T2.WEEK_P17 *T1.QTY)	BOM_P17,
						SUM(T2.WEEK_P16 *T1.QTY)	BOM_P16,
						SUM(T2.WEEK_P15 *T1.QTY)	BOM_P15,
						SUM(T2.WEEK_P14 *T1.QTY)	BOM_P14,
						SUM(T2.WEEK_P13 *T1.QTY)	BOM_P13,
						SUM(T2.WEEK_P12 *T1.QTY)	BOM_P12,
						SUM(T2.WEEK_P11 *T1.QTY)	BOM_P11,
						SUM(T2.WEEK_P10 *T1.QTY)	BOM_P10,
						SUM(T2.WEEK_P09 *T1.QTY)	BOM_P09,
						SUM(T2.WEEK_P08 *T1.QTY)	BOM_P08,
						SUM(T2.WEEK_P07 *T1.QTY)	BOM_P07,
						SUM(T2.WEEK_P06 *T1.QTY)	BOM_P06,
						SUM(T2.WEEK_P05 *T1.QTY)	BOM_P05,
						SUM(T2.WEEK_P04 *T1.QTY)	BOM_P04,
						SUM(T2.WEEK_P03 *T1.QTY)	BOM_P03,
						SUM(T2.WEEK_P02 *T1.QTY)	BOM_P02,
						SUM(T2.WEEK_P01 *T1.QTY)	BOM_P01						
				FROM
					(
					SELECT  IM.ITEM_ID, 
							IM.ITEM_NAME,		
					        MB.CONS_ITEM_ID,
					       	MAX(MB.PROD_VER),    
					        MB.PROD_ITEM_ID,      
					        MB.CONS_QTY,
					        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
					        MB.CONS_QTY_UOM      
					FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
					WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
					AND		IM.ITEM_ID	= ITM.ITEM_CD
					AND		IM.ITYPE		= 'HAWA'	
					AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
					AND		IM.USE_PR_PLAN = 'Y'
					GROUP 
					BY 		IM.ITEM_ID, 
							IM.ITEM_NAME,
					        MB.CONS_ITEM_ID,
					        MB.PROD_ITEM_ID,
					        MB.CONS_QTY,
					        MB.CONS_QTY_UOM, 
					        IM.QTY
					)T1,
					(
					SELECT	ITEM_ID,
							WEEK_P30,
			                WEEK_P29,
			                WEEK_P28,
			                WEEK_P27,
			                WEEK_P26,
			                WEEK_P25,
			                WEEK_P24,
			                WEEK_P23,
			                WEEK_P22,
			                WEEK_P21,
			                WEEK_P20,
			                WEEK_P19,
			                WEEK_P18,
			                WEEK_P17,
			                WEEK_P16,
			                WEEK_P15,
			                WEEK_P14,
			                WEEK_P13,
			                WEEK_P12,
			                WEEK_P11,
			                WEEK_P10,
			                WEEK_P09,
			                WEEK_P08,
			                WEEK_P07,
			                WEEK_P06,
			                WEEK_P05,
			                WEEK_P04,
			                WEEK_P03,
			                WEEK_P02,
			                WEEK_P01			               
					FROM	SALES_WEEK_AGG
					WHERE	VERSION = '$!{cnfm_date}'
					AND		GUBN 	= '1'
					)T2
					WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
					GROUP	
					BY		T1.CONS_ITEM_ID	
				)BOM
		WHERE	AG.ITEM_ID = BOM.ITEM_ID (+)
		AND		AG.ITEM_ID = '$!{item_id}'
		)T3
		WHERE	T1.ITEM_ID	= T2.ITEM_ID(+)
		AND		T1.ITEM_ID  = T3.ITEM_ID(+)
		AND		T1.ITEM_ID = '$!{item_id}'		
		UNION ALL
        SELECT  S1.GUBN,
				S1.GUBN_IDX,
				ROUND((
                S1.THREE_W1  + S1.THREE_W2  + S1.THREE_W3  + S1.THREE_W4  + S1.THREE_W5  + S1.THREE_W6  + S1.THREE_W7  + S1.THREE_W8  + S1.THREE_W9  + S1.THREE_W10 +
                S1.THREE_W11 + S1.THREE_W12 + S1.THREE_W13 + S1.THREE_W14 + S1.THREE_W15 + S1.THREE_W16 + S1.THREE_W17 + S1.THREE_W18 + S1.THREE_W19 + S1.THREE_W20 +
                S1.THREE_W21 + S1.THREE_W22 + S1.THREE_W23 + S1.THREE_W24 + S1.THREE_W25 + S1.THREE_W26 + S1.THREE_W27 + S1.THREE_W28 + S1.THREE_W29 + S1.THREE_W30 + 
                ROUND(((S1.THREE_W/7) * (TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),0)
                )/31,0)	AVG,
		        S1.THREE_P30,
		        S1.THREE_P29,
		        S1.THREE_P28,
		        S1.THREE_P27,
		        S1.THREE_P26,
		        S1.THREE_P25,
		        S1.THREE_P24,
		        S1.THREE_P23,
		        S1.THREE_P22,
		        S1.THREE_P21,
		        S1.THREE_P20,
		        S1.THREE_P19,
		        S1.THREE_P18,
		        S1.THREE_P17,
		        S1.THREE_P16,
		        S1.THREE_P15,
		        S1.THREE_P14,
		        S1.THREE_P13,
		        S1.THREE_P12,
		        S1.THREE_P11,
		        S1.THREE_P10,
		        S1.THREE_P9,
		        S1.THREE_P8,
		        S1.THREE_P7,
		        S1.THREE_P6,
		        S1.THREE_P5,
		        S1.THREE_P4,
		        S1.THREE_P3,
		        S1.THREE_P2,
		        S1.THREE_P1,
		        ROUND(((S1.THREE_W/7) * (TRUNC(TO_DATE('$!{cnfm_date}')+7,'D') - TRUNC(TO_DATE('$!{cnfm_date}')) +1)),0)	W,   
		        S1.THREE_W1,
		        S1.THREE_W2,
		        S1.THREE_W3,
		        S1.THREE_W4,
		        S1.THREE_W5,
		        S1.THREE_W6,
		        S1.THREE_W7,
		        S1.THREE_W8,
		        S1.THREE_W9,
		        S1.THREE_W10,
		        S1.THREE_W11,
		        S1.THREE_W12,
		        S1.THREE_W13,
		        S1.THREE_W14,
		        S1.THREE_W15,
		        S1.THREE_W16,
		        S1.THREE_W17,
		        S1.THREE_W18,
		        S1.THREE_W19,
		        S1.THREE_W20,
		        S1.THREE_W21,
		        S1.THREE_W22,
		        S1.THREE_W23,
		        S1.THREE_W24,
		        S1.THREE_W25,
		        S1.THREE_W26,
		        S1.THREE_W27,
		        S1.THREE_W28,
		        S1.THREE_W29,
		        S1.THREE_W30,
		        S2.TP_FLAG,
		        (TRUNC(SYSDATE,'D') - TRUNC(TO_DATE('$!{cnfm_date}'),'D'))/7	TERM          
		FROM	(
				SELECT	'2013년도'	GUBN,
		        		8			 GUBN_IDX,
				    	ROUND(NVL(MAX(THREE_P30),0),0)	THREE_P30,
						ROUND(NVL(MAX(THREE_P29),0),0)	THREE_P29,
				        ROUND(NVL(MAX(THREE_P28),0),0)	THREE_P28,
				        ROUND(NVL(MAX(THREE_P27),0),0)	THREE_P27,
				        ROUND(NVL(MAX(THREE_P26),0),0)	THREE_P26,
				        ROUND(NVL(MAX(THREE_P25),0),0)	THREE_P25,
				        ROUND(NVL(MAX(THREE_P24),0),0)	THREE_P24,
				        ROUND(NVL(MAX(THREE_P23),0),0)	THREE_P23,
				        ROUND(NVL(MAX(THREE_P22),0),0)	THREE_P22,
				        ROUND(NVL(MAX(THREE_P21),0),0)	THREE_P21,
				        ROUND(NVL(MAX(THREE_P20),0),0)	THREE_P20,
				        ROUND(NVL(MAX(THREE_P19),0),0)	THREE_P19,
				        ROUND(NVL(MAX(THREE_P18),0),0)	THREE_P18,
				        ROUND(NVL(MAX(THREE_P17),0),0)	THREE_P17,
				        ROUND(NVL(MAX(THREE_P16),0),0)	THREE_P16,
				        ROUND(NVL(MAX(THREE_P15),0),0)	THREE_P15,
				        ROUND(NVL(MAX(THREE_P14),0),0)	THREE_P14,
				        ROUND(NVL(MAX(THREE_P13),0),0)	THREE_P13,
				        ROUND(NVL(MAX(THREE_P12),0),0)	THREE_P12,
				        ROUND(NVL(MAX(THREE_P11),0),0)	THREE_P11,
				        ROUND(NVL(MAX(THREE_P10),0),0)	THREE_P10,
				        ROUND(NVL(MAX(THREE_P9),0),0)	THREE_P9,
				        ROUND(NVL(MAX(THREE_P8),0),0)	THREE_P8,
				        ROUND(NVL(MAX(THREE_P7),0),0)	THREE_P7,
				        ROUND(NVL(MAX(THREE_P6),0),0)	THREE_P6,
				        ROUND(NVL(MAX(THREE_P5),0),0)	THREE_P5,
				        ROUND(NVL(MAX(THREE_P4),0),0)	THREE_P4,
				        ROUND(NVL(MAX(THREE_P3),0),0)	THREE_P3,
				        ROUND(NVL(MAX(THREE_P2),0),0)	THREE_P2,
				        ROUND(NVL(MAX(THREE_P1),0),0)	THREE_P1,
				        ROUND(NVL(MAX(THREE_W),0),0)	THREE_W,
				        ROUND(NVL(MAX(THREE_W1),0),0)	THREE_W1,
						ROUND(NVL(MAX(THREE_W2),0),0)	THREE_W2,
				        ROUND(NVL(MAX(THREE_W3),0),0)	THREE_W3,
				        ROUND(NVL(MAX(THREE_W4),0),0)	THREE_W4,
				        ROUND(NVL(MAX(THREE_W5),0),0)	THREE_W5,
				        ROUND(NVL(MAX(THREE_W6),0),0)	THREE_W6,
				        ROUND(NVL(MAX(THREE_W7),0),0)	THREE_W7,
				        ROUND(NVL(MAX(THREE_W8),0),0)	THREE_W8,
				        ROUND(NVL(MAX(THREE_W9),0),0)	THREE_W9,
				        ROUND(NVL(MAX(THREE_W10),0),0)	THREE_W10,
				        ROUND(NVL(MAX(THREE_W11),0),0)	THREE_W11,
				        ROUND(NVL(MAX(THREE_W12),0),0)	THREE_W12,
				        ROUND(NVL(MAX(THREE_W13),0),0)	THREE_W13,
				        ROUND(NVL(MAX(THREE_W14),0),0)	THREE_W14,
				        ROUND(NVL(MAX(THREE_W15),0),0)	THREE_W15,
				        ROUND(NVL(MAX(THREE_W16),0),0)	THREE_W16,
				        ROUND(NVL(MAX(THREE_W17),0),0)	THREE_W17,
				        ROUND(NVL(MAX(THREE_W18),0),0)	THREE_W18,
				        ROUND(NVL(MAX(THREE_W19),0),0)	THREE_W19,
				        ROUND(NVL(MAX(THREE_W20),0),0)	THREE_W20,
				        ROUND(NVL(MAX(THREE_W21),0),0)	THREE_W21,
				        ROUND(NVL(MAX(THREE_W22),0),0)	THREE_W22,
				        ROUND(NVL(MAX(THREE_W23),0),0)	THREE_W23,
				        ROUND(NVL(MAX(THREE_W24),0),0)	THREE_W24,
				        ROUND(NVL(MAX(THREE_W25),0),0)	THREE_W25,
				        ROUND(NVL(MAX(THREE_W26),0),0)	THREE_W26,
				        ROUND(NVL(MAX(THREE_W27),0),0)	THREE_W27,
				        ROUND(NVL(MAX(THREE_W28),0),0)	THREE_W28,
				        ROUND(NVL(MAX(THREE_W29),0),0)	THREE_W29,
				        ROUND(NVL(MAX(THREE_W30),0),0)	THREE_W30
        		FROM	(					
         				SELECT	YYYY,
								SALE_DATE,
								ITEM_ID,    
						        DECODE(SALE_DATE,THREE -7, QTY,0)	THREE_P1,
				                DECODE(SALE_DATE,THREE -14, QTY,0)	THREE_P2,
				                DECODE(SALE_DATE,THREE -21, QTY,0)	THREE_P3,
				                DECODE(SALE_DATE,THREE -28, QTY,0)	THREE_P4,
				                DECODE(SALE_DATE,THREE -35, QTY,0)	THREE_P5,
				                DECODE(SALE_DATE,THREE -42, QTY,0)	THREE_P6,
				                DECODE(SALE_DATE,THREE -49, QTY,0)	THREE_P7,
				                DECODE(SALE_DATE,THREE -56, QTY,0)	THREE_P8,
				                DECODE(SALE_DATE,THREE -63, QTY,0)	THREE_P9,
				                DECODE(SALE_DATE,THREE -70, QTY,0)	THREE_P10,
				                DECODE(SALE_DATE,THREE -77, QTY,0)	THREE_P11,
				                DECODE(SALE_DATE,THREE -84, QTY,0)	THREE_P12,
				                DECODE(SALE_DATE,THREE -91, QTY,0)	THREE_P13,
				                DECODE(SALE_DATE,THREE -98, QTY,0)	THREE_P14,
				                DECODE(SALE_DATE,THREE -105, QTY,0)	THREE_P15,
				                DECODE(SALE_DATE,THREE -112, QTY,0)	THREE_P16,
				                DECODE(SALE_DATE,THREE -119, QTY,0)	THREE_P17,
				                DECODE(SALE_DATE,THREE -126, QTY,0)	THREE_P18,
				                DECODE(SALE_DATE,THREE -133, QTY,0)	THREE_P19,
				                DECODE(SALE_DATE,THREE -140, QTY,0)	THREE_P20,
				                DECODE(SALE_DATE,THREE -147, QTY,0)	THREE_P21,
				                DECODE(SALE_DATE,THREE -154, QTY,0)	THREE_P22,
				                DECODE(SALE_DATE,THREE -161, QTY,0)	THREE_P23,
				                DECODE(SALE_DATE,THREE -168, QTY,0)	THREE_P24,
				                DECODE(SALE_DATE,THREE -175, QTY,0)	THREE_P25,
				                DECODE(SALE_DATE,THREE -182, QTY,0)	THREE_P26,
				                DECODE(SALE_DATE,THREE -189, QTY,0)	THREE_P27,
				                DECODE(SALE_DATE,THREE -196, QTY,0)	THREE_P28,
				                DECODE(SALE_DATE,THREE -203, QTY,0)	THREE_P29,
				                DECODE(SALE_DATE,THREE -210, QTY,0)	THREE_P30,
				                DECODE(SALE_DATE,THREE,		 QTY,0)	THREE_W,
				                DECODE(SALE_DATE,THREE +7,QTY,0)	THREE_W1, 
				                DECODE(SALE_DATE,THREE +14,QTY,0)	THREE_W2, 
				                DECODE(SALE_DATE,THREE +21,QTY,0)	THREE_W3, 
				                DECODE(SALE_DATE,THREE +28,QTY,0)	THREE_W4, 
				                DECODE(SALE_DATE,THREE +35,QTY,0)	THREE_W5, 
				                DECODE(SALE_DATE,THREE +42,QTY,0)	THREE_W6, 
				                DECODE(SALE_DATE,THREE +49,QTY,0)	THREE_W7, 
				                DECODE(SALE_DATE,THREE +56,QTY,0)	THREE_W8, 
				                DECODE(SALE_DATE,THREE +63,QTY,0)	THREE_W9,
				                DECODE(SALE_DATE,THREE +70,QTY,0)	THREE_W10,
				                DECODE(SALE_DATE,THREE +77,QTY,0)	THREE_W11, 
				                DECODE(SALE_DATE,THREE +84,QTY,0)	THREE_W12, 
				                DECODE(SALE_DATE,THREE +91,QTY,0)	THREE_W13, 
				                DECODE(SALE_DATE,THREE +98,QTY,0)	THREE_W14, 
				                DECODE(SALE_DATE,THREE +105,QTY,0)	THREE_W15, 
				                DECODE(SALE_DATE,THREE +112,QTY,0)	THREE_W16, 
				                DECODE(SALE_DATE,THREE +119,QTY,0)	THREE_W17, 
				                DECODE(SALE_DATE,THREE +126,QTY,0)	THREE_W18, 
				                DECODE(SALE_DATE,THREE +133,QTY,0)	THREE_W19,
				                DECODE(SALE_DATE,THREE +140,QTY,0)	THREE_W20, 
				                DECODE(SALE_DATE,THREE +147,QTY,0)	THREE_W21, 
				                DECODE(SALE_DATE,THREE +154,QTY,0)	THREE_W22, 
				                DECODE(SALE_DATE,THREE +161,QTY,0)	THREE_W23, 
				                DECODE(SALE_DATE,THREE +168,QTY,0)	THREE_W24, 
				                DECODE(SALE_DATE,THREE +175,QTY,0)	THREE_W25, 
				                DECODE(SALE_DATE,THREE +182,QTY,0)	THREE_W26, 
				                DECODE(SALE_DATE,THREE +189,QTY,0)	THREE_W27, 
				                DECODE(SALE_DATE,THREE +196,QTY,0)	THREE_W28, 
				                DECODE(SALE_DATE,THREE +203,QTY,0)	THREE_W29,
				                DECODE(SALE_DATE,THREE +210,QTY,0)	THREE_W30
		        		FROM	(
                 				SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
			                    		S1.ITEM_ID,
								        S1.YYYY,	
								        S1.WEEK_NO,       
								        S1.QTY,
								        S2.THREE,
			                            S2.TWO,
			                            S2.ONE
								FROM	(
			                    	  	SELECT	SALE_DATE,
			                                    ITEM_ID,
			                                    YYYY,
			                                    WEEK_NO,
			                                    SUM(QTY) QTY
			                            FROM	(
                            					SELECT 	A.SALE_DATE,
											     		A.ITEM_ID,						                                
											            A.YYYY,
											            A.WEEK_NO,
											            A.QTY
					    						FROM	SALES_WEEK_3_YEAR A		        										
		     									WHERE	A.ITEM_ID	=	'$!{item_id}'
                        						UNION ALL
						                        SELECT 	A.SALE_DATE,
											     		B.ITEM_ID,
						                                A.YYYY,
											            A.WEEK_NO,           
											            A.QTY * B.QTY	QTY           
											     FROM	SALES_WEEK_3_YEAR A,
											        	(
											            SELECT	IM.ITEM_ID,
													            MB.PROD_ITEM_ID,
													            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
													            MAX(MB.PROD_VER) PROD_VER
													    FROM	MBOM MB, ITEM_MST IM
													    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
													    AND		IM.ITEM_ID = '$!{item_id}'
													    AND		IM.USE_PR_PLAN ='Y'
													    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
													    GROUP
													    BY		IM.ITEM_ID,
													            MB.PROD_ITEM_ID,
													            MB.CONS_QTY,
													            MB.CONS_QTY_UOM,
													            IM.QTY
								            			)B  
     											WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
                        		GROUP 
                        		BY 		SALE_DATE,
		                                ITEM_ID,
		                                YYYY,
		                                WEEK_NO
                        		)S1,
		     					(
		          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          					FROM	CAL_MST
	     						WHERE 	WEEK_NO = (
	                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        		  		SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
                                          		FROM		CAL_MST
	                                          	WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )		          				
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
		     					)S2
                    	)                    
                    )
		UNION ALL
		SELECT	'2014년도'	GUBN,
         		7			 GUBN_IDX,
		    	ROUND(NVL(MAX(TWO_P30),0),0)	TWO_P30,
				ROUND(NVL(MAX(TWO_P29),0),0)	TWO_P29,
		        ROUND(NVL(MAX(TWO_P28),0),0)	TWO_P28,
		        ROUND(NVL(MAX(TWO_P27),0),0)	TWO_P27,
		        ROUND(NVL(MAX(TWO_P26),0),0)	TWO_P26,
		        ROUND(NVL(MAX(TWO_P25),0),0)	TWO_P25,
		        ROUND(NVL(MAX(TWO_P24),0),0)	TWO_P24,
		        ROUND(NVL(MAX(TWO_P23),0),0)	TWO_P23,
		        ROUND(NVL(MAX(TWO_P22),0),0)	TWO_P22,
		        ROUND(NVL(MAX(TWO_P21),0),0)	TWO_P21,
		        ROUND(NVL(MAX(TWO_P20),0),0)	TWO_P20,
		        ROUND(NVL(MAX(TWO_P19),0),0)	TWO_P19,
		        ROUND(NVL(MAX(TWO_P18),0),0)	TWO_P18,
		        ROUND(NVL(MAX(TWO_P17),0),0)	TWO_P17,
		        ROUND(NVL(MAX(TWO_P16),0),0)	TWO_P16,
		        ROUND(NVL(MAX(TWO_P15),0),0)	TWO_P15,
		        ROUND(NVL(MAX(TWO_P14),0),0)	TWO_P14,
		        ROUND(NVL(MAX(TWO_P13),0),0)	TWO_P13,
		        ROUND(NVL(MAX(TWO_P12),0),0)	TWO_P12,
		        ROUND(NVL(MAX(TWO_P11),0),0)	TWO_P11,
		        ROUND(NVL(MAX(TWO_P10),0),0)	TWO_P10,
		        ROUND(NVL(MAX(TWO_P9),0),0)		TWO_P9,
		        ROUND(NVL(MAX(TWO_P8),0),0)		TWO_P8,
		        ROUND(NVL(MAX(TWO_P7),0),0)		TWO_P7,
		        ROUND(NVL(MAX(TWO_P6),0),0)		TWO_P6,
		        ROUND(NVL(MAX(TWO_P5),0),0)		TWO_P5,
		        ROUND(NVL(MAX(TWO_P4),0),0)		TWO_P4,
		        ROUND(NVL(MAX(TWO_P3),0),0)		TWO_P3,
		        ROUND(NVL(MAX(TWO_P2),0),0)		TWO_P2,
		        ROUND(NVL(MAX(TWO_P1),0),0)		TWO_P1,		        
		        ROUND(NVL(MAX(TWO_W),0),0)		TWO_W,
		        ROUND(NVL(MAX(TWO_W1),0),0)		TWO_W1,
				ROUND(NVL(MAX(TWO_W2),0),0)		TWO_W2,
		        ROUND(NVL(MAX(TWO_W3),0),0)		TWO_W3,
		        ROUND(NVL(MAX(TWO_W4),0),0)		TWO_W4,
		        ROUND(NVL(MAX(TWO_W5),0),0)		TWO_W5,
		        ROUND(NVL(MAX(TWO_W6),0),0)		TWO_W6,
		        ROUND(NVL(MAX(TWO_W7),0),0)		TWO_W7,
		        ROUND(NVL(MAX(TWO_W8),0),0)		TWO_W8,
		        ROUND(NVL(MAX(TWO_W9),0),0)		TWO_W9,
		        ROUND(NVL(MAX(TWO_W10),0),0)	TWO_W10,
		        ROUND(NVL(MAX(TWO_W11),0),0)	TWO_W11,
		        ROUND(NVL(MAX(TWO_W12),0),0)	TWO_W12,
		        ROUND(NVL(MAX(TWO_W13),0),0)	TWO_W13,
		        ROUND(NVL(MAX(TWO_W14),0),0)	TWO_W14,
		        ROUND(NVL(MAX(TWO_W15),0),0)	TWO_W15,
		        ROUND(NVL(MAX(TWO_W16),0),0)	TWO_W16,
		        ROUND(NVL(MAX(TWO_W17),0),0)	TWO_W17,
		        ROUND(NVL(MAX(TWO_W18),0),0)	TWO_W18,
		        ROUND(NVL(MAX(TWO_W19),0),0)	TWO_W19,
		        ROUND(NVL(MAX(TWO_W20),0),0)	TWO_W20,
		        ROUND(NVL(MAX(TWO_W21),0),0)	TWO_W21,
		        ROUND(NVL(MAX(TWO_W22),0),0)	TWO_W22,
		        ROUND(NVL(MAX(TWO_W23),0),0)	TWO_W23,
		        ROUND(NVL(MAX(TWO_W24),0),0)	TWO_W24,
		        ROUND(NVL(MAX(TWO_W25),0),0)	TWO_W25,
		        ROUND(NVL(MAX(TWO_W26),0),0)	TWO_W26,
		        ROUND(NVL(MAX(TWO_W27),0),0)	TWO_W27,
		        ROUND(NVL(MAX(TWO_W28),0),0)	TWO_W28,
		        ROUND(NVL(MAX(TWO_W29),0),0)	TWO_W29,
		        ROUND(NVL(MAX(TWO_W30),0),0)	TWO_W30
        FROM	(					
         		SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,    
				        DECODE(SALE_DATE,TWO -7, QTY,0)		TWO_P1,
		                DECODE(SALE_DATE,TWO -14, QTY,0)	TWO_P2,
		                DECODE(SALE_DATE,TWO -21, QTY,0)	TWO_P3,
		                DECODE(SALE_DATE,TWO -28, QTY,0)	TWO_P4,
		                DECODE(SALE_DATE,TWO -35, QTY,0)	TWO_P5,
		                DECODE(SALE_DATE,TWO -42, QTY,0)	TWO_P6,
		                DECODE(SALE_DATE,TWO -49, QTY,0)	TWO_P7,
		                DECODE(SALE_DATE,TWO -56, QTY,0)	TWO_P8,
		                DECODE(SALE_DATE,TWO -63, QTY,0)	TWO_P9,
		                DECODE(SALE_DATE,TWO -70, QTY,0)	TWO_P10,
		                DECODE(SALE_DATE,TWO -77, QTY,0)	TWO_P11,
		                DECODE(SALE_DATE,TWO -84, QTY,0)	TWO_P12,
		                DECODE(SALE_DATE,TWO -91, QTY,0)	TWO_P13,
		                DECODE(SALE_DATE,TWO -98, QTY,0)	TWO_P14,
		                DECODE(SALE_DATE,TWO -105, QTY,0)	TWO_P15,
		                DECODE(SALE_DATE,TWO -112, QTY,0)	TWO_P16,
		                DECODE(SALE_DATE,TWO -119, QTY,0)	TWO_P17,
		                DECODE(SALE_DATE,TWO -126, QTY,0)	TWO_P18,
		                DECODE(SALE_DATE,TWO -133, QTY,0)	TWO_P19,
		                DECODE(SALE_DATE,TWO -140, QTY,0)	TWO_P20,
		                DECODE(SALE_DATE,TWO -147, QTY,0)	TWO_P21,
		                DECODE(SALE_DATE,TWO -154, QTY,0)	TWO_P22,
		                DECODE(SALE_DATE,TWO -161, QTY,0)	TWO_P23,
		                DECODE(SALE_DATE,TWO -168, QTY,0)	TWO_P24,
		                DECODE(SALE_DATE,TWO -175, QTY,0)	TWO_P25,
		                DECODE(SALE_DATE,TWO -182, QTY,0)	TWO_P26,
		                DECODE(SALE_DATE,TWO -189, QTY,0)	TWO_P27,
		                DECODE(SALE_DATE,TWO -196, QTY,0)	TWO_P28,
		                DECODE(SALE_DATE,TWO -203, QTY,0)	TWO_P29,
		                DECODE(SALE_DATE,TWO -210, QTY,0)	TWO_P30,
		                DECODE(SALE_DATE,TWO,QTY,0)			TWO_W,
		                DECODE(SALE_DATE,TWO +7,QTY,0)		TWO_W1, 
		                DECODE(SALE_DATE,TWO +14,QTY,0)		TWO_W2, 
		                DECODE(SALE_DATE,TWO +21,QTY,0)		TWO_W3, 
		                DECODE(SALE_DATE,TWO +28,QTY,0)		TWO_W4, 
		                DECODE(SALE_DATE,TWO +35,QTY,0)		TWO_W5, 
		                DECODE(SALE_DATE,TWO +42,QTY,0)		TWO_W6, 
		                DECODE(SALE_DATE,TWO +49,QTY,0)		TWO_W7, 
		                DECODE(SALE_DATE,TWO +56,QTY,0)		TWO_W8, 
		                DECODE(SALE_DATE,TWO +63,QTY,0)		TWO_W9,
		                DECODE(SALE_DATE,TWO +70,QTY,0)		TWO_W10,
		                DECODE(SALE_DATE,TWO +77,QTY,0)		TWO_W11, 
		                DECODE(SALE_DATE,TWO +84,QTY,0)		TWO_W12, 
		                DECODE(SALE_DATE,TWO +91,QTY,0)		TWO_W13, 
		                DECODE(SALE_DATE,TWO +98,QTY,0)		TWO_W14, 
		                DECODE(SALE_DATE,TWO +105,QTY,0)	TWO_W15, 
		                DECODE(SALE_DATE,TWO +112,QTY,0)	TWO_W16, 
		                DECODE(SALE_DATE,TWO +119,QTY,0)	TWO_W17, 
		                DECODE(SALE_DATE,TWO +126,QTY,0)	TWO_W18, 
		                DECODE(SALE_DATE,TWO +133,QTY,0)	TWO_W19,
		                DECODE(SALE_DATE,TWO +140,QTY,0)	TWO_W20, 
		                DECODE(SALE_DATE,TWO +147,QTY,0)	TWO_W21, 
		                DECODE(SALE_DATE,TWO +154,QTY,0)	TWO_W22, 
		                DECODE(SALE_DATE,TWO +161,QTY,0)	TWO_W23, 
		                DECODE(SALE_DATE,TWO +168,QTY,0)	TWO_W24, 
		                DECODE(SALE_DATE,TWO +175,QTY,0)	TWO_W25, 
		                DECODE(SALE_DATE,TWO +182,QTY,0)	TWO_W26, 
		                DECODE(SALE_DATE,TWO +189,QTY,0)	TWO_W27, 
		                DECODE(SALE_DATE,TWO +196,QTY,0)	TWO_W28, 
		                DECODE(SALE_DATE,TWO +203,QTY,0)	TWO_W29,
		                DECODE(SALE_DATE,TWO +210,QTY,0)	TWO_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,				                               
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
					    				FROM	SALES_WEEK_3_YEAR A						        			
						     			WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT 	A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.USE_PR_PLAN ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
     									WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
                        	GROUP 
                        	BY 		SALE_DATE,
                                    ITEM_ID,
                                    YYYY,
                                    WEEK_NO
                        	)S1,
	     					(
	          				SELECT	DISTINCT 
										MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
								        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
	          					FROM	CAL_MST
	     						WHERE 	WEEK_NO = (
	                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        		  		SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
                                          		FROM		CAL_MST
	                                          	WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
	                                          )		          				
		                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
	     					)S2
                    	)                    
                    )
		UNION ALL                   
		SELECT	'2015년도'	GUBN,
         		6			 GUBN_IDX,
		    	ROUND(NVL(MAX(ONE_P30),0),0)	ONE_P30,
				ROUND(NVL(MAX(ONE_P29),0),0)	ONE_P29,
		        ROUND(NVL(MAX(ONE_P28),0),0)	ONE_P28,
		        ROUND(NVL(MAX(ONE_P27),0),0)	ONE_P27,
		        ROUND(NVL(MAX(ONE_P26),0),0)	ONE_P26,
		        ROUND(NVL(MAX(ONE_P25),0),0)	ONE_P25,
		        ROUND(NVL(MAX(ONE_P24),0),0)	ONE_P24,
		        ROUND(NVL(MAX(ONE_P23),0),0)	ONE_P23,
		        ROUND(NVL(MAX(ONE_P22),0),0)	ONE_P22,
		        ROUND(NVL(MAX(ONE_P21),0),0)	ONE_P21,
		        ROUND(NVL(MAX(ONE_P20),0),0)	ONE_P20,
		        ROUND(NVL(MAX(ONE_P19),0),0)	ONE_P19,
		        ROUND(NVL(MAX(ONE_P18),0),0)	ONE_P18,
		        ROUND(NVL(MAX(ONE_P17),0),0)	ONE_P17,
		        ROUND(NVL(MAX(ONE_P16),0),0)	ONE_P16,
		        ROUND(NVL(MAX(ONE_P15),0),0)	ONE_P15,
		        ROUND(NVL(MAX(ONE_P14),0),0)	ONE_P14,
		        ROUND(NVL(MAX(ONE_P13),0),0)	ONE_P13,
		        ROUND(NVL(MAX(ONE_P12),0),0)	ONE_P12,
		        ROUND(NVL(MAX(ONE_P11),0),0)	ONE_P11,
		        ROUND(NVL(MAX(ONE_P10),0),0)	ONE_P10,
		        ROUND(NVL(MAX(ONE_P9),0),0)		ONE_P9,
		        ROUND(NVL(MAX(ONE_P8),0),0)		ONE_P8,
		        ROUND(NVL(MAX(ONE_P7),0),0)		ONE_P7,
		        ROUND(NVL(MAX(ONE_P6),0),0)		ONE_P6,
		        ROUND(NVL(MAX(ONE_P5),0),0)		ONE_P5,
		        ROUND(NVL(MAX(ONE_P4),0),0)		ONE_P4,
		        ROUND(NVL(MAX(ONE_P3),0),0)		ONE_P3,
		        ROUND(NVL(MAX(ONE_P2),0),0)		ONE_P2,
		        ROUND(NVL(MAX(ONE_P1),0),0)		ONE_P1,	
		        #if("$!{no_flag}" == "NEW") 
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W),0),0)))		ONE_W,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W1),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W1),0),0)))	ONE_W1,
				TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W2),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W2),0),0)))	ONE_W2,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W3),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W3),0),0)))	ONE_W3,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W4),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W4),0),0)))	ONE_W4,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W5),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W5),0),0)))	ONE_W5,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W6),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W6),0),0)))	ONE_W6,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W7),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W7),0),0)))	ONE_W7,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W8),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W8),0),0)))	ONE_W8,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W9),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W9),0),0)))	ONE_W9,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W10),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W10),0),0)))	ONE_W10,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W11),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W11),0),0)))	ONE_W11,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W12),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W12),0),0)))	ONE_W12,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W13),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W13),0),0)))	ONE_W13,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W14),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W14),0),0)))	ONE_W14,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W15),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W15),0),0)))	ONE_W15,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W16),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W16),0),0)))	ONE_W16,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W17),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W17),0),0)))	ONE_W17,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W18),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W18),0),0)))	ONE_W18,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W19),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W19),0),0)))	ONE_W19,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W20),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W20),0),0)))	ONE_W20,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W21),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W21),0),0)))	ONE_W21,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W22),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W22),0),0)))	ONE_W22,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W23),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W23),0),0)))	ONE_W23,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W24),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W24),0),0)))	ONE_W24,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W25),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W25),0),0)))	ONE_W25,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W26),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W26),0),0)))	ONE_W26,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W27),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W27),0),0)))	ONE_W27,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W28),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W28),0),0)))	ONE_W28,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W29),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W29),0),0)))	ONE_W29,
		        TO_NUMBER(DECODE(ROUND(NVL(MAX(ONE_W30),0),0),0,'$!{three_mon}',ROUND(NVL(MAX(ONE_W30),0),0)))	ONE_W30	
		        #else
		        ROUND(NVL(MAX(ONE_W),0),0)		ONE_W,
		        ROUND(NVL(MAX(ONE_W1),0),0)		ONE_W1,
				ROUND(NVL(MAX(ONE_W2),0),0)		ONE_W2,
		        ROUND(NVL(MAX(ONE_W3),0),0)		ONE_W3,
		        ROUND(NVL(MAX(ONE_W4),0),0)		ONE_W4,
		        ROUND(NVL(MAX(ONE_W5),0),0)		ONE_W5,
		        ROUND(NVL(MAX(ONE_W6),0),0)		ONE_W6,
		        ROUND(NVL(MAX(ONE_W7),0),0)		ONE_W7,
		        ROUND(NVL(MAX(ONE_W8),0),0)		ONE_W8,
		        ROUND(NVL(MAX(ONE_W9),0),0)		ONE_W9,
		        ROUND(NVL(MAX(ONE_W10),0),0)	ONE_W10,
		        ROUND(NVL(MAX(ONE_W11),0),0)	ONE_W11,
		        ROUND(NVL(MAX(ONE_W12),0),0)	ONE_W12,
		        ROUND(NVL(MAX(ONE_W13),0),0)	ONE_W13,
		        ROUND(NVL(MAX(ONE_W14),0),0)	ONE_W14,
		        ROUND(NVL(MAX(ONE_W15),0),0)	ONE_W15,
		        ROUND(NVL(MAX(ONE_W16),0),0)	ONE_W16,
		        ROUND(NVL(MAX(ONE_W17),0),0)	ONE_W17,
		        ROUND(NVL(MAX(ONE_W18),0),0)	ONE_W18,
		        ROUND(NVL(MAX(ONE_W19),0),0)	ONE_W19,
		        ROUND(NVL(MAX(ONE_W20),0),0)	ONE_W20,
		        ROUND(NVL(MAX(ONE_W21),0),0)	ONE_W21,
		        ROUND(NVL(MAX(ONE_W22),0),0)	ONE_W22,
		        ROUND(NVL(MAX(ONE_W23),0),0)	ONE_W23,
		        ROUND(NVL(MAX(ONE_W24),0),0)	ONE_W24,
		        ROUND(NVL(MAX(ONE_W25),0),0)	ONE_W25,
		        ROUND(NVL(MAX(ONE_W26),0),0)	ONE_W26,
		        ROUND(NVL(MAX(ONE_W27),0),0)	ONE_W27,
		        ROUND(NVL(MAX(ONE_W28),0),0)	ONE_W28,
		        ROUND(NVL(MAX(ONE_W29),0),0)	ONE_W29,
		        ROUND(NVL(MAX(ONE_W30),0),0)	ONE_W30
		        #end
        FROM	(					
		         SELECT	YYYY,
						SALE_DATE,
						ITEM_ID,    
				        DECODE(SALE_DATE,ONE -7, QTY,0)		ONE_P1,
		                DECODE(SALE_DATE,ONE -14, QTY,0)	ONE_P2,
		                DECODE(SALE_DATE,ONE -21, QTY,0)	ONE_P3,
		                DECODE(SALE_DATE,ONE -28, QTY,0)	ONE_P4,
		                DECODE(SALE_DATE,ONE -35, QTY,0)	ONE_P5,
		                DECODE(SALE_DATE,ONE -42, QTY,0)	ONE_P6,
		                DECODE(SALE_DATE,ONE -49, QTY,0)	ONE_P7,
		                DECODE(SALE_DATE,ONE -56, QTY,0)	ONE_P8,
		                DECODE(SALE_DATE,ONE -63, QTY,0)	ONE_P9,
		                DECODE(SALE_DATE,ONE -70, QTY,0)	ONE_P10,
		                DECODE(SALE_DATE,ONE -77, QTY,0)	ONE_P11,
		                DECODE(SALE_DATE,ONE -84, QTY,0)	ONE_P12,
		                DECODE(SALE_DATE,ONE -91, QTY,0)	ONE_P13,
		                DECODE(SALE_DATE,ONE -98, QTY,0)	ONE_P14,
		                DECODE(SALE_DATE,ONE -105, QTY,0)	ONE_P15,
		                DECODE(SALE_DATE,ONE -112, QTY,0)	ONE_P16,
		                DECODE(SALE_DATE,ONE -119, QTY,0)	ONE_P17,
		                DECODE(SALE_DATE,ONE -126, QTY,0)	ONE_P18,
		                DECODE(SALE_DATE,ONE -133, QTY,0)	ONE_P19,
		                DECODE(SALE_DATE,ONE -140, QTY,0)	ONE_P20,
		                DECODE(SALE_DATE,ONE -147, QTY,0)	ONE_P21,
		                DECODE(SALE_DATE,ONE -154, QTY,0)	ONE_P22,
		                DECODE(SALE_DATE,ONE -161, QTY,0)	ONE_P23,
		                DECODE(SALE_DATE,ONE -168, QTY,0)	ONE_P24,
		                DECODE(SALE_DATE,ONE -175, QTY,0)	ONE_P25,
		                DECODE(SALE_DATE,ONE -182, QTY,0)	ONE_P26,
		                DECODE(SALE_DATE,ONE -189, QTY,0)	ONE_P27,
		                DECODE(SALE_DATE,ONE -196, QTY,0)	ONE_P28,
		                DECODE(SALE_DATE,ONE -203, QTY,0)	ONE_P29,
		                DECODE(SALE_DATE,ONE -210, QTY,0)	ONE_P30,
		                DECODE(SALE_DATE,ONE,QTY,0)			ONE_W,
		                DECODE(SALE_DATE,ONE +7,QTY,0)		ONE_W1, 
		                DECODE(SALE_DATE,ONE +14,QTY,0)		ONE_W2, 
		                DECODE(SALE_DATE,ONE +21,QTY,0)		ONE_W3, 
		                DECODE(SALE_DATE,ONE +28,QTY,0)		ONE_W4, 
		                DECODE(SALE_DATE,ONE +35,QTY,0)		ONE_W5, 
		                DECODE(SALE_DATE,ONE +42,QTY,0)		ONE_W6, 
		                DECODE(SALE_DATE,ONE +49,QTY,0)		ONE_W7, 
		                DECODE(SALE_DATE,ONE +56,QTY,0)		ONE_W8, 
		                DECODE(SALE_DATE,ONE +63,QTY,0)		ONE_W9,
		                DECODE(SALE_DATE,ONE +70,QTY,0)		ONE_W10,
		                DECODE(SALE_DATE,ONE +77,QTY,0)		ONE_W11, 
		                DECODE(SALE_DATE,ONE +84,QTY,0)		ONE_W12, 
		                DECODE(SALE_DATE,ONE +91,QTY,0)		ONE_W13, 
		                DECODE(SALE_DATE,ONE +98,QTY,0)		ONE_W14, 
		                DECODE(SALE_DATE,ONE +105,QTY,0)	ONE_W15, 
		                DECODE(SALE_DATE,ONE +112,QTY,0)	ONE_W16, 
		                DECODE(SALE_DATE,ONE +119,QTY,0)	ONE_W17, 
		                DECODE(SALE_DATE,ONE +126,QTY,0)	ONE_W18, 
		                DECODE(SALE_DATE,ONE +133,QTY,0)	ONE_W19,
		                DECODE(SALE_DATE,ONE +140,QTY,0)	ONE_W20, 
		                DECODE(SALE_DATE,ONE +147,QTY,0)	ONE_W21, 
		                DECODE(SALE_DATE,ONE +154,QTY,0)	ONE_W22, 
		                DECODE(SALE_DATE,ONE +161,QTY,0)	ONE_W23, 
		                DECODE(SALE_DATE,ONE +168,QTY,0)	ONE_W24, 
		                DECODE(SALE_DATE,ONE +175,QTY,0)	ONE_W25, 
		                DECODE(SALE_DATE,ONE +182,QTY,0)	ONE_W26, 
		                DECODE(SALE_DATE,ONE +189,QTY,0)	ONE_W27, 
		                DECODE(SALE_DATE,ONE +196,QTY,0)	ONE_W28, 
		                DECODE(SALE_DATE,ONE +203,QTY,0)	ONE_W29,
		                DECODE(SALE_DATE,ONE +210,QTY,0)	ONE_W30
		        FROM	(
	                    SELECT	TO_DATE(S1.SALE_DATE,'YYYY-MM-DD') SALE_DATE,
	                    		S1.ITEM_ID,
						        S1.YYYY,	
						        S1.WEEK_NO,       
						        S1.QTY,
						        S2.THREE,
	                            S2.TWO,
	                            S2.ONE
						FROM	(
	                    	  	SELECT	SALE_DATE,
	                                    ITEM_ID,
	                                    YYYY,
	                                    WEEK_NO,
	                                    SUM(QTY) QTY
                                FROM	(
			                            SELECT 	A.SALE_DATE,
									     		A.ITEM_ID,
									            A.YYYY,
									            A.WEEK_NO,
									            A.QTY
								    	FROM	SALES_WEEK_3_YEAR A						        		
		     							WHERE	A.ITEM_ID	=	'$!{item_id}'
				                        UNION ALL
				                        SELECT A.SALE_DATE,
									     		B.ITEM_ID,				                                
									            A.YYYY,
									            A.WEEK_NO,           
									            A.QTY * B.QTY	QTY           
									     FROM	SALES_WEEK_3_YEAR A,
									        	(
									            SELECT	IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
											            MAX(MB.PROD_VER) PROD_VER
											    FROM	MBOM MB, ITEM_MST IM
											    WHERE	MB.CONS_ITEM_ID(+) = IM.ITEM_ID
											    AND		IM.ITEM_ID = '$!{item_id}'
											    AND		IM.USE_PR_PLAN ='Y'
											    AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')		                                        
											    GROUP
											    BY		IM.ITEM_ID,
											            MB.PROD_ITEM_ID,
											            MB.CONS_QTY,
											            MB.CONS_QTY_UOM,
											            IM.QTY
						            			)B  
				     					WHERE	A.ITEM_ID(+)	=	B.PROD_ITEM_ID
                        				)
	                        GROUP 
	                        BY 		SALE_DATE,
	                                ITEM_ID,
	                                YYYY,
	                                WEEK_NO
                        	)S1,
	     					(
	          				SELECT	DISTINCT 
									MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),1,TRUNC(CAL_DATE,'IW'),''))	ONE, 
							        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),2,TRUNC(CAL_DATE,'IW'),''))	TWO,
							        MAX(DECODE(ROUND((TRUNC(TO_DATE('$!{cnfm_date}')) -  TRUNC(CAL_DATE,'IW'))/365,0),3,TRUNC(CAL_DATE,'IW'),''))	THREE
          					FROM	CAL_MST
     						WHERE 	WEEK_NO = (
                        				  --SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)  윤달이라 2016년은 +1 해준다.
		                        		  SELECT	DECODE(WEEK_NO,53,52,WEEK_NO)+1
                                          FROM		CAL_MST
                                          WHERE		CAL_DATE = TRUNC(TO_DATE('$!{cnfm_date}'),'IW')
                                          )		          				
	                        AND		YYYY	BETWEEN TO_CHAR(ADD_MONTHS(TRUNC(TO_DATE('$!{cnfm_date}')),-36),'YYYY') AND TO_CHAR(TRUNC(TO_DATE('$!{cnfm_date}')),'YYYY')
     					)S2
                    	)                    
                    )
                  )S1,
                  (
                  SELECT  	ITEM_ID,
	                		CASE WHEN TRUNC(TO_DATE('$!{cnfm_date}'),'IW') 		= IPGO_DATE THEN 0
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 7,'IW') 	= IPGO_DATE THEN 1
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 14,'IW') = IPGO_DATE THEN 2
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 21,'IW') = IPGO_DATE THEN 3
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 28,'IW') = IPGO_DATE THEN 4
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 35,'IW') = IPGO_DATE THEN 5
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 42,'IW') = IPGO_DATE THEN 6
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 49,'IW') = IPGO_DATE THEN 7
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 56,'IW') = IPGO_DATE THEN 8
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 63,'IW') = IPGO_DATE THEN 9
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 70,'IW') = IPGO_DATE THEN 10
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 77,'IW') = IPGO_DATE THEN 11
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 84,'IW') = IPGO_DATE THEN 12
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 91,'IW') = IPGO_DATE THEN 13
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 98,'IW') = IPGO_DATE THEN 14 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 105,'IW') = IPGO_DATE THEN 15 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 112,'IW') = IPGO_DATE THEN 16 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 119,'IW') = IPGO_DATE THEN 17  
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 126,'IW') = IPGO_DATE THEN 18 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 133,'IW') = IPGO_DATE THEN 19 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 140,'IW') = IPGO_DATE THEN 20  
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 147,'IW') = IPGO_DATE THEN 21 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 154,'IW') = IPGO_DATE THEN 22 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 161,'IW') = IPGO_DATE THEN 23
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 168,'IW') = IPGO_DATE THEN 24 
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 175,'IW') = IPGO_DATE THEN 25
			                     WHEN TRUNC(TO_DATE('$!{cnfm_date}') + 182,'IW') = IPGO_DATE THEN 26                  
			                     ELSE 0
			                END  TP_FLAG
		       		FROM	(
					SELECT	ITEM_ID, 
							TRUNC(TO_DATE('$!{cnfm_date}') + LEAD_TIME,'IW') IPGO_DATE
					FROM	(
							SELECT	ITEM_ID,		
									NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) LEAD_TIME
							FROM	ITEM_MST
							--WHERE	NVL(PR_TO_PO,0) + NVL(PO_TO_LC,0) + NVL(LC_TO_PORT,0) + NVL(PORT_TO_CUST,0) > 0
							WHERE	ITYPE		= 'HAWA'	
		                    AND		SELL_STOP_DATE >= TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
		                    AND		USE_PR_PLAN = 'Y'                   
							)
						)    
                  	)S2
          	WHERE S2.ITEM_ID = '$!{item_id}'
    ORDER 
    BY 		GUBN_IDX		
        
	</query>
	
	<query id="ip_01170_inventoryPlanAnalysis_md_semi_list" paging="false">	
		SELECT	A.*,				
				ROWNUM
		FROM
		(
		SELECT	F_GET_CODE_NAME('SALES_CAT5', IM.SALES_CAT05)       SALES_CAT05,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,		       
                NVL(SUM(DW.BASE_STOCK),0) - NVL(DW2.BASE_STOCK,0)	 "기초재고",                
                NVL(DW2.BASE_STOCK,0)								 "사외재고",              
                TRIM(TO_CHAR( DECODE( SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,           
                ROUND(NVL(SUM(DW.BASE_STOCK),0)/SUM(DW.SALES_MEAN_3WEEK_ETC),0)) ,999999999990.9)) 														"재고일수", 
                NVL(MAX(IM.PROD_TERM),0)																								   				"유통기한\n경과일수",
                MAX(IM.PROD_TERM) * SUM(DW.BASE_STOCK)																									"경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * SUM(DW.BASE_STOCK)																							"유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   				"유통기한일",
                TO_CHAR(ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1),'FM9990D99')||'%' 	"유통기한경과율",
                NVL(SUM(DW.SALES_PRE),0) 																		 										"전일계",
                NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0)    																					"일계",
                NVL(MAX(DWSA.SELL_BOX_CUM),0) + SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)    																	"당월누계", 
               	NVL(SUM(DW.BASE_STOCK),0) - NVL(DW2.BASE_STOCK,0) - NVL(SUM(DW.ISSUE_EXPT),0) - NVL(SUM(DW.ISSUE),0)									"예상재고",
              	NVL(SUM(DW.PRE_MONTH_SELL),0) 																											"전월계",                                
                NVL(DWSP2.MON_00,0)																														"당월생산누계",
                NVL(DWSP2.MON_P01,0)																													"전월생산누계",
                NVL(DWSP.THIS_QTY,0)																													"금년생산누계",
                NVL(DWSP.LAST_QTY,0)																													"전년생산누계",
                NVL(SUM(DW.SALES_MEAN_1MON_TA),0) * 6																									"1개월평균",
               	NVL(SUM(DW.SALES_MEAN_3MON_TA),0)  * 6																									"3개월평균",
                NVL(SUM(DW.SALES_MEAN_1WEEK_ETC),0) 																									"1주평균",
               	NVL(SUM(DW.SALES_MEAN_3WEEK_ETC),0)																										"3주평균", 
                NVL(SUM(DW.SALES_PY_MON_CUM),0) + NVL(SUM(DW.SALES_PY_MON_CUM_TA),0)																	"전년동월누계",
                NVL(SUM(DW.SALES_INI_CUM),0) 	+ NVL(SUM(DW.SALES_INI_CUM_TA),0)   																	"금년누계",
                NVL(SUM(DW.SALES_PY_INI_CUM),0) + NVL(SUM(DW.SALES_PY_INI_CUM_TA),0)																	"전년누계",             
                NVL(MAX(DWSA.SELL_BOX_CUM),0)	+ NVL(SUM(DW.ISSUE_EXPT),0) + NVL(SUM(DW.ISSUE),0) - 
                NVL(SUM(DW.SALES_PY_MON_CUM),0) - NVL(SUM(DW.SALES_PY_MON_CUM_TA),0)																	"전년동일\n대비",
                NVL(SUM(DW.SALES_INI_CUM),0) 	+ NVL(SUM(DW.SALES_INI_CUM_TA),0) - NVL(SUM(DW.SALES_PY_INI_CUM),0) - NVL(SUM(DW.SALES_PY_INI_CUM_TA),0)"전년누계\n대비",
		        ROUND((NVL(SUM(DW.BASE_STOCK),0) * IM.NWGT_PER_BUOM) / 1000000 , 2) 																	"기초재고중량",		        
		        ROUND((NVL(DWSP2.MON_00,0) 	 	 * IM.NWGT_PER_BUOM) / 1000000 , 2) 																	"당월매입누계중량",		   
               	ROUND((NVL(DWSP.THIS_QTY,0) 	 * IM.NWGT_PER_BUOM) / 1000000 , 2)																		"금년생산누계중량",
                ROUND((NVL(DWSP.LAST_QTY,0) 	 * IM.NWGT_PER_BUOM) / 1000000 , 2)																		"전년생산누계중량",
                ROUND((NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE) )
                 * IM.NWGT_PER_BUOM / 1000000, 2)																										"당월판매누계중량",
                ROUND((NVL(SUM(DW.SALES_INI_CUM),0) + NVL(SUM(DW.SALES_INI_CUM_TA),0)) * IM.NWGT_PER_BUOM / 1000000, 2)									"년판매누계중량",
                ROUND((NVL(SY.QTY,0) 	 	 * IM.NWGT_PER_BUOM) / 1000000 , 2) 																		"전년판매누계중량",
                SM.BOX_COST																																"박스당작업비",
                SM.BOX_COST * NVL(DWSP.THIS_QTY,0)																										"총 작업비",
                SUM(DW.ISSUE_CUM) 																														"금년판매매출액",
                TO_CHAR(ROUND(NVL(SM.BOX_COST * NVL(DWSP.THIS_QTY,0)/DECODE(SUM(DW.ISSUE_CUM),0,NULL,SUM(DW.ISSUE_CUM)),0),4)*100,'FM9990D99')||'%'
		FROM    DC_DATAWAREHOUSE DW,
				(
				 SELECT	ITEM_ID,
				 		SUM(OUT_STOCK) 	BASE_STOCK 		
				 FROM	(
						 SELECT	DC.ITEM_ID,						 		
						 		CASE	WHEN	DM.DC_LOC_TYPE = '사외'
						 				THEN	SUM(DC.BASE_STOCK)
						 				ELSE	0
						 		END		OUT_STOCK                        
		                FROM	DC_DATAWAREHOUSE DC, DC_MST DM, ITEM_MST IM
		                WHERE	DC.CNFM_DATE 	= '$!{end_date}'               
                        AND		DC.ITEM_ID		= IM.ITEM_ID                       
		                AND		DC.DC_ID 		= DM.DC_ID
                        AND		IM.SEMI_FLAG	= 'Y'
		                GROUP
		                BY		DC.ITEM_ID, DM.DC_LOC_TYPE, DM.DC_ID
		                )
		         GROUP
		         BY		ITEM_ID                 
				)DW2,
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.* 
                 FROM 	ITEM_MST IM
				 WHERE	IM.ITYPE		= 'HAWA'	
				 AND	IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
				 AND	IM.SEMI_FLAG 	= 'Y'                 				 
                AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
                 ) IM,	
                (
                SELECT	ITEM_ID,
                		MAX(THIS_QTY)	THIS_QTY,
                        MAX(LAST_QTY)	LAST_QTY
                FROM	(
                        SELECT	ITEM_ID,		
                                YYYY,
                                DECODE(YYYY,TO_CHAR(TRUNC(SYSDATE,'YY'),'YYYY'),SUM(COMPL_QTY),0)	THIS_QTY,
                                DECODE(YYYY,TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),-1),'YYYY'),SUM(COMPL_QTY),0)	LAST_QTY
                        FROM	(
                                SELECT   PO.ITEM_ID,
                                         SUBSTR(TO_CHAR(PO.START_DTTM,'YYYYMMDD'),1,6)	YYYYMM,
                                         SUBSTR(TO_CHAR(PO.START_DTTM,'YYYYMMDD'),1,4)	YYYY, 
                                         SUM(PO.COMPL_QTY) COMPL_QTY
                                FROM     V_ERP_PO_MES PO,
                                         ITEM_MST IM                                                        
                                WHERE	PO.ITEM_ID = IM.ITEM_ID
                                AND		IM.SEMI_FLAG = 'Y'
                                AND     PO.START_DTTM BETWEEN ADD_MONTHS(TRUNC(TO_DATE('$!{start_date}','YYYY-MM-DD'),'YY'),-12) AND TO_DATE('$!{end_date}','YYYY-MM-DD')
                                GROUP 
                                BY 		PO.ITEM_ID,
                                        PO.START_DTTM
                                )
                        GROUP
                        BY		ITEM_ID,
                                YYYY
                        )
                GROUP
                BY		ITEM_ID
		       )DWSP,
		      (
                SELECT	ITEM_ID,
                		MAX(MON_00)	MON_00,
                        MAX(MON_P01)	MON_P01
                FROM	(
                        SELECT	ITEM_ID,		
                                DECODE(YYYYMM,TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYYMM'),SUM(COMPL_QTY),0)	MON_00,
                                DECODE(YYYYMM,TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1),'YYYYMM'),SUM(COMPL_QTY),0)	MON_P01                              
                        FROM	(
                                SELECT   PO.ITEM_ID,
                                         SUBSTR(TO_CHAR(PO.START_DTTM,'YYYYMMDD'),1,6)	YYYYMM,                                         
                                         SUM(PO.COMPL_QTY) COMPL_QTY
                                FROM     V_ERP_PO_MES PO,
                                         ITEM_MST IM                                                        
                                WHERE	PO.ITEM_ID = IM.ITEM_ID
                                AND		IM.SEMI_FLAG = 'Y'
                                AND     PO.START_DTTM BETWEEN ADD_MONTHS(TO_DATE('$!{start_date}','YYYY-MM-DD'),-1) AND TO_DATE('$!{end_date}','YYYY-MM-DD')
                                GROUP 
                                BY 		PO.ITEM_ID,
                                        PO.START_DTTM
                                )
                        GROUP
                        BY		ITEM_ID,
                                YYYYMM
                        )
                GROUP
                BY		ITEM_ID
		       )DWSP2,
               (--판매실적 누계 --타계정포함
                SELECT	ITEM_ID,
                		ROUND(SUM(SELL_BOX_CUM),0) SELL_BOX_CUM
                FROM	(
		                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
		                FROM     SALES_ACT SA,
		                		 DC_MST DM,
		                         (
		                         SELECT *
				                 FROM   ITEM_MST IM
				                 WHERE	IM.ITYPE		= 'HAWA'	
								 AND	IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
								 AND	IM.SEMI_FLAG 	= 'Y'				                 			 
				                 AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
						    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')
		                         ) IM,
		                         (
		                         SELECT	YYYYMMDD
								 FROM	CAL_MST
								 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
				                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
		                         )CAL                            
		                WHERE    SA.ITEM_ID = IM.ITEM_ID
		                --AND      SA.DELIV_LOC    NOT IN ('8901','8902','8903','8913','8914') --판매 실적은 수출도 참조
		                AND      SA.SALE_DATE = CAL.YYYYMMDD
		                AND		 SA.DELIV_LOC = DM.DC_ID
		                AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914'))
		                GROUP BY SA.ITEM_ID
		                )
		                GROUP BY ITEM_ID
               	)DWSA,               
		       	DC_MST DM, (
                			SELECT	ITEM_ID,
                            		SUM(QTY)	QTY
                            FROM	SALES_WEEK_3_YEAR
                            WHERE	YYYY=TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE,'YY'),-1),'YYYY')	
                            GROUP
                            BY		ITEM_ID
                            )SY,
		       	(
		              	SELECT	A.ITEM_ID,
        				A.VER,
                		A.BOX_COST
                FROM	(
						SELECT	ITEM_ID,
				       			MAX(PROD_VER) VER,
				       			BOX_COST
				       	FROM	SET_PROD_MST	
		                GROUP 
		                BY 		ITEM_ID,
		                		BOX_COST
		                )A,
		                (
	               	 	SELECT	ITEM_ID,
	                			MAX(PROD_VER) VER
	                    FROM 	SET_PROD_MST
                        WHERE	BOX_COST IS NOT NULL
	                    GROUP 
	                    BY 		ITEM_ID
	                	)B
		                WHERE 	A.ITEM_ID 	= B.ITEM_ID
		                AND 	A.VER 		= B.VER
				       	)SM
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND		DW.ITEM_ID		= DWSP2.ITEM_ID(+)
		AND		DW.ITEM_ID		= SM.ITEM_ID(+)
		AND		DW.ITEM_ID		= DW2.ITEM_ID	
		AND     DW.ITEM_ID      = DWSA.ITEM_ID	(+)	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)			
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		DW.ITEM_ID		= SY.ITEM_ID(+)		
		AND		CM.CD			= IM.SALES_CAT03		
        AND		CM.CD_GRP		= 'SALES_CAT3'
		AND		(DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','1842','8914') )   --동우,대현 창고 추가 이승용대리 요청 2014-12-09 
		AND     DW.CNFM_DATE	= '$!{end_date}'
		AND		IM.SALES_CAT05 LIKE '%'||'$!{sales_cat05}'||'%'
		AND		IM.SALES_CAT03 LIKE '%'||'$!{sales_cat03}'||'%'
		GROUP 
		BY  	SALES_CAT05, SALES_CAT03, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, BOX_PER_PALET, IM.JGC_DUE_DATE, DWSP.ITEM_ID,
				DW2.BASE_STOCK,IM.NWGT_PER_BUOM, DWSP2.MON_P01,DWSP2.MON_00,DWSP.THIS_QTY,DWSP.LAST_QTY,SM.BOX_COST, SY.QTY           
		ORDER 
		BY 		SALES_CAT05, SALES_CAT03, DW.ITEM_ID
		)A
		ORDER 
		BY		A.SALES_CAT05, A.SALES_CAT03, A.ITEM_ID

	</query>
	
	<query id="op_02090_get_ipgo_date" paging="false">	
		
		SELECT	TO_CHAR(TRUNC(TO_DATE('$!{version}','YYYY-MM-DD') +'$!{read_time}'),'YYYYMMDD')
		FROM	DUAL

	</query>

<!--
=====================================================================================================
 끝  
=====================================================================================================
--> 

</queries>
	