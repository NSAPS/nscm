<?xml version="1.0" encoding="EUC-KR"?>
<queries>	

<!--
=====================================================================================================
	기준정보>>생산계획>>공급할당품목설정 관리
=====================================================================================================
--> 
	
	<!-- 
	=======================
	  재고정책 기초 정보생성
	=======================
	-->
	
	<!-- 안전재고 버전 --> 
	<query id="stock_policy_qty_version" paging="true"> 
		SELECT  MAX(WORK_DATE)
		FROM    stock_policy_qty, DUAL B
	</query> 
		
	<!-- 표준편차 생성  -->  
	<query id="ip_01010_inventoryPlan_create_std_dev_list_1" paging="true"> 
	//
		SELECT  MAX(WORK_DATE),
		        FROM_DATE,
		        TO_DATE
		FROM    stock_policy_qty, DUAL B
		WHERE   WORK_DATE   = 
		        (
		        select  MAX(WORK_DATE)
		        from    stock_policy_qty
		        )
		GROUP BY FROM_DATE, TO_DATE
	</query> 

		
	<!-- 표준편차 생성 SP 호출 --> 
	<query id="ip_01010_SP_inventoryPlan_Create_std_dev"  fix="from_date to_date safety_parm calcul_type user_id"> 
		CALL	SP_IP_STOCK_POLICY_QTY
				(
				'CREDATA',
				SYSDATE,
				1,
				1,
				REPLACE(REPLACE('$!{work_date}', '-', ''), '/', ''),
				REPLACE(REPLACE('$!{from_date}', '-', ''), '/', ''),
				REPLACE(REPLACE('$!{to_date}', '-', ''), '/', ''),
				'$!{safety_parm}',
				'$!{calcul_type}',
				'$!{user_id}'
				)
	</query> 

	<!-- 표준편차 생성 SP 호출 --> 
	<query id="ip_01010_SP_inventoryPlan_Create_std_dev_ns"  fix="from_date to_date safety_parm calcul_type user_id"> 
		CALL	SP_IP_STOCK_POLICY_NS
				(
				'CREDATA',
				SYSDATE,
				1,
				1,
				REPLACE(REPLACE('$!{work_date}', '-', ''), '/', ''),
				REPLACE(REPLACE('$!{from_date}', '-', ''), '/', ''),
				REPLACE(REPLACE('$!{to_date}', '-', ''), '/', ''),
				'$!{safety_parm}',
				'$!{calcul_type}',
				'$!{user_id}'
				)
	</query> 

	<!-- 
	=======================
	 재고정책 품목별 관리 
	=======================
	-->

	<!-- 재고정책_ 품목별 관리 조회 -->  
	<query id="ip_01020_inventoryPlan_item_mod" paging="true"> 
	#if ( "$!{item_id}" != "" )
		
		/* item 있다. */
		SELECT  SP.LOC_ID,
		        DM.DC_SHORT_NAME,
		        SP.PRDT_LT,
		        SP.RECEIPT_LT,
		        SP.SAFETY_PARM,
		        SP.STANDARD_DEV,
		        SP.SAFETY_STOCK_FLAG									FLAG,
		        DW.QTY_3W,
		        DW.QTY_1W,
		        ROUND(SP.SAFETY_STOCK,0)								SAFETY_STOCK,
		        SP.CAMP_STOC,
                --비축재고
                DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                    NVL(SP.SAVE_STOC,0)))      SAVE_STOC,
                --비축기간    
                DECODE( DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                        DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                        NVL(SP.SAVE_STOC,0)))
                        ,0, '',  TO_CHAR(TO_DATE(SP.START_DATE), 'YYYY-MM-DD') )  	START_DATE,
                DECODE( DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                         DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                         NVL(SP.SAVE_STOC,0)))
                        ,0, '',  TO_CHAR(TO_DATE(SP.END_DATE), 'YYYY-MM-DD') )  	END_DATE,
                ROUND(SP.SAFETY_STOCK,0)+(SP.CAMP_STOC)+
                DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                    NVL(SP.SAVE_STOC,0)))     OPTI_STOCK,
                FA_STOCK --"공장할당용 안전재고"
		FROM    STOCK_POLICY_QTY SP, 
		        DC_MST DM,
		        (
		        SELECT	ITEM_ID, DC_ID, 
		        		SUM(SALES_MEAN_3WEEK) QTY_3W, 
		        		SUM(SALES_MEAN_1WEEK) QTY_1W
		        FROM	DC_DATAWAREHOUSE, DUAL B
		        WHERE	CNFM_DATE	= TO_CHAR(SYSDATE, 'YYYYMMDD')
		        AND		ITEM_ID		= '$!{item_id}'
		        GROUP 
		        BY		CNFM_DATE, ITEM_ID, DC_ID
		        ) DW
		WHERE   DM.DC_ID	= SP.LOC_ID(+)
		AND     SP.LOC_ID	= DW.DC_ID(+)
		AND     WORK_DATE	= (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
		AND     SP.ITEM_ID	= '$!{item_id}'
        GROUP BY SP.LOC_ID, DM.DC_SHORT_NAME, SP.PRDT_LT, SP.RECEIPT_LT,
                SP.SAFETY_PARM, SP.STANDARD_DEV, SP.SAFETY_STOCK_FLAG,
                DW.QTY_3W, DW.QTY_1W, SP.SAFETY_STOCK , SP.CAMP_STOC,
                SP.SAVE_STOC, SP.START_DATE, SP.END_DATE, FA_STOCK		
--STOCK_POLICY_QTY에 데이터가 없을 경우
        UNION ALL
        SELECT  DM.DC_ID LOC_ID,
                DM.DC_SHORT_NAME,
                0 PRDT_LT,
                0 RECEIPT_LT,
                1 SAFETY_PARM,
                1 STANDARD_DEV,
                '00'  FLAG,
                NVL(0, DW.QTY_3W),
                NVL(0, DW.QTY_1W),
                0 SAFETY_STOCK,
                0 CAMP_STOC,
                0 SAVE_STOC,
                '' START_DATE, 
                '' END_DATE,  
                0 OPTI_STOCK,
                0 FA_STOCK
        FROM    (
                SELECT  *
                FROM    DC_MST
                WHERE   DC_ID NOT IN    
                                    (
                                    SELECT  SP.LOC_ID DC_ID
                                    FROM    STOCK_POLICY_QTY SP, DUAL B
                                    WHERE   SP.ITEM_ID   = '$!{item_id}'
                                    AND     WORK_DATE    = (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
                                    --UNION
                                    --SELECT  DM.DC_ID
                                    --FROM    DC_MST DM, DUAL B
                                    --WHERE   DM.DC_LOC_TYPE = '사외'
                                    UNION
                                    SELECT  DM.DC_ID -- 삭제된 물류센터 제거
                                    FROM    DC_MST DM, DUAL B
                                    WHERE   DM.CDC_FLAG = 'N'
                                    AND     DM.RDC_FLAG = 'N'
                                    UNION 
                                    SELECT  DC_ID -- 삼다수 배송을 위한 부두 제외
                                    FROM    dc_mst
                                    where dc_id between '8511' and '8519'
                                    )
                )DM,
                (
                SELECT    ITEM_ID, DC_ID, 
                        SUM(SALES_MEAN_3WEEK) QTY_3W, 
                        SUM(SALES_MEAN_1WEEK) QTY_1W
                FROM    DC_DATAWAREHOUSE, DUAL B
                WHERE    CNFM_DATE    = TO_CHAR(SYSDATE, 'YYYYMMDD')
                AND        ITEM_ID    = '$!{item_id}'
                GROUP 
                BY        CNFM_DATE, ITEM_ID, DC_ID
                ) DW, ITEM_MST IM
        WHERE   DM.DC_ID = DW.DC_ID(+)
        AND     DW.ITEM_ID = IM.ITEM_ID
       -- AND     (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
        AND     DM.DC_ID NOT IN    (
                                    SELECT  SP.LOC_ID 
                                    FROM    STOCK_POLICY_QTY SP, DUAL B 
                                    WHERE   SP.ITEM_ID   = '$!{item_id}'
                                    AND     WORK_DATE    = (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
                                    )
        ORDER BY 1
	#else
		/* item 없다. */
		SELECT  SP.LOC_ID,
		        DM.DC_SHORT_NAME,
		        SP.PRDT_LT,
		        SP.RECEIPT_LT,
		        SP.SAFETY_PARM,
		        SP.STANDARD_DEV,
		        SP.SAFETY_STOCK_FLAG									FLAG,
		        DW.QTY_3W,
		        DW.QTY_1W,
		        ROUND(SP.SAFETY_STOCK,0)								SAFETY_STOCK,
		        SP.CAMP_STOC,
		        SP.SAVE_STOC,
		        TO_CHAR(TO_DATE(SP.START_DATE), 'YYYY-MM-DD')			START_DATE, 
		        TO_CHAR(TO_DATE(SP.END_DATE), 'YYYY-MM-DD')				END_DATE,  
		        ROUND(SP.SAFETY_STOCK,0)+(SP.CAMP_STOC)+(SP.SAVE_STOC)	OPTI_STOCK,
		        FA_STOCK
		FROM    STOCK_POLICY_QTY SP, 
		        DC_MST DM,
		        (
		        SELECT	ITEM_ID, DC_ID, 
		        		SUM(SALES_MEAN_3WEEK) QTY_3W, 
		        		SUM(SALES_MEAN_1WEEK) QTY_1W
		        FROM	DC_DATAWAREHOUSE, DUAL B
		        WHERE	CNFM_DATE	= TO_CHAR(SYSDATE, 'YYYYMMDD')
		        AND		ITEM_ID		= '$!{item_id}'
		        GROUP 
		        BY		CNFM_DATE, ITEM_ID, DC_ID
		        ) DW
		WHERE   1 = 0
	#end					
	</query> 


   <!-- 재고정책_  품목별 정보 저장 : UPDATE -->
	<query id="ip_01020_inventoryPlan_item_save_01" fix="_user_id item_id" 
	iterator="dc_id prdt_lt inpt_lt safety_parm std_dev safe_stoc_flag safety_stoc camp_stoc save_stoc start_date end_date fa_stock"> 
	        UPDATE	STOCK_POLICY_QTY
	        SET     PRDT_LT				= '$!{prdt_lt}',
	                RECEIPT_LT			= '$!{inpt_lt}',
	                SAFETY_PARM			= '$!{safety_parm}',
	                STANDARD_DEV		= '$!{std_dev}',
	                SAFETY_STOCK_FLAG	= '$!{safe_stoc_flag}',
	                SAFETY_STOCK		= '$!{safety_stoc}',
	                CAMP_STOC			= '$!{camp_stoc}',
	                SAVE_STOC			= '$!{save_stoc}',
	                START_DATE			= REPLACE(REPLACE('$!{start_date}', '-', ''), '/', ''),
	                END_DATE			= REPLACE(REPLACE('$!{end_date}', '-', ''), '/', ''),
	                FA_STOCK			= '$!{fa_stock}',
	                MADE_TYPE			= 'UP',
	                MADE_DTTM			= SYSDATE,
	                MADE_BY				= '$!{_user_id}'
	        WHERE	LOC_ID				= '$!{dc_id}'
	        AND		ITEM_ID				= '$!{item_id}'
	        AND     WORK_DATE			= (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
	</query>

	<!-- 재고정책_  품목별 정보 저장 : INSERT -->
	<query id="ip_01020_inventoryPlan_item_save_02" fix="_user_id item_id"
	iterator="dc_id prdt_lt inpt_lt safety_parm std_dev safe_stoc_flag safety_stoc camp_stoc save_stoc start_date end_date opti_save_lvl fa_stock"> 
		INSERT 
		  INTO STOCK_POLICY_QTY
		       ( WORK_DATE, LOC_TYPE, LOC_ID, ITEM_ID, PRDT_LT, RECEIPT_LT, SAFETY_PARM, STANDARD_DEV, SAFETY_STOCK_FLAG, 
		       		SAFETY_STOCK, CAMP_STOC, SAVE_STOC, START_DATE, END_DATE, FA_STOCK, QTY_UOM, MADE_TYPE, MADE_DTTM, MADE_BY )
		  SELECT    (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)	WORK_DATE, 
					'DC'					LOC_TYPE, 
					'$!{dc_id}'				LOC_ID, 
					'$!{item_id}'			ITEM_ID, 
					'$!{prdt_lt}'			PRDT_LT, 
					'$!{inpt_lt}'			RECEIPT_LT, 
					'$!{safety_parm}'		SAFETY_PARM, 
					'$!{std_dev}'			STANDARD_DEV, 
					'$!{safe_stoc_flag}'	SAFETY_STOCK_FLAG, 
					'$!{safety_stoc}'		SAFETY_STOCK, 
					'$!{camp_stoc}'			CAMP_STOC, 
					'$!{save_stoc}'			SAVE_STOC, 
					REPLACE(REPLACE('$!{start_date}', '-', ''), '/', '')	START_DATE, 
					REPLACE(REPLACE('$!{end_date}', '-', ''), '/', '')		END_DATE, 
					'$!{fa_stock}'			FA_STOCK, 
					'BOX'			QTY_UOM, 
					'AD'			MADE_TYPE, 
					SYSDATE			MADE_DTTM, 
					'$!{_user_id}'	MADE_BY
		    FROM    DUAL
		   WHERE    NOT EXISTS(
		            SELECT	ITEM_ID
		            FROM	STOCK_POLICY_QTY
		            WHERE	LOC_ID		= '$!{dc_id}'
		            AND		ITEM_ID		= '$!{item_id}'
		            AND		WORK_DATE	= (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
		            )
		                      
	</query>


	<!-- 
	=======================================
	  재고정책 품목별 기준정보관리 : 신규 품목 등록
	=======================================
	-->

	<!-- 재고정책_ 품목별 관리 등록 화면 조회  -->  
	<query id="ip_01020_inventoryPlan_item_reg" paging="true"> 
		SELECT  SP.ITEM_ID,
		        IM.ITEM_NAME,
		        NVL(SA.SELL_BOX,0)                  "전월실적",
		        NVL(DW.SALES_PRE_CUM,0)             "판매누계",  
		        NVL(DW.QTY_3W,0)                    "3주평균",
		        NVL(DW.QTY_1W,0)                    "1주평균",
		        MAX(SAFETY_PARM)                    "안전계수", 
		        SUM(STANDARD_DEV)                   "표준편차",
		        SUM(SAFETY_STOCK)                   "안전재고 수량", 
		        SUM(CAMP_STOC)                      "임시안전재고", 
		        SUM(DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
		            DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
		            NVL(SP.SAVE_STOC,0))))           "비축재고",
		        SUM(SAFETY_STOCK)	+
		        SUM(CAMP_STOC)		+
		        SUM(DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
		            DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
		            NVL(SP.SAVE_STOC,0))))           "Total"
		FROM    STOCK_POLICY_QTY SP, ITEM_MST IM, 
		        (
		        SELECT	ITEM_ID,
		                SUM(SALES_MEAN_3WEEK) QTY_3W, 
		                SUM(SALES_MEAN_1WEEK) QTY_1W,
		                SUM(SALES_PRE_CUM)    SALES_PRE_CUM
		        FROM	DC_DATAWAREHOUSE, DUAL B
		        WHERE	CNFM_DATE	= TO_CHAR(SYSDATE, 'YYYYMMDD')
		        --WHERE	CNFM_DATE	= TRUNC(SYSDATE)
		        GROUP 
		        BY		CNFM_DATE, ITEM_ID
		        ) DW,
		        (
		        SELECT  SA.ITEM_ID, SUM(SA.QTY) SELL_BOX
		        FROM    SALES_ACT_RECENT SA, ITEM_MST IM
		        WHERE   SA.ITEM_ID = IM.ITEM_ID
		        AND     SA.SALE_DATE   BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MONTH'),-1)
		                AND        LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MONTH'),-1))
		        GROUP BY SA.ITEM_ID
		        ) SA
		WHERE   SP.ITEM_ID  = IM.ITEM_ID
		AND     SP.ITEM_ID  = DW.ITEM_ID(+)
		AND     SP.ITEM_ID  = SA.ITEM_ID(+)
		AND     SP.WORK_DATE   = (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
		AND     SP.LOC_TYPE    = 'DC'
		AND     IM.ITEM_STATUS = 'ST'
		AND		IM.HR_TY1	NOT LIKE '606006%'--수산물
		AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		AND		IM.CAT03	NOT LIKE 'O1%'
		AND		IM.DIVISION = '$!{search_type}'
       [AND			(SP.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				OR	IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]		
		GROUP BY SP.ITEM_ID, IM.ITEM_NAME, SA.SELL_BOX, DW.QTY_3W, DW.QTY_1W, DW.SALES_PRE_CUM
		ORDER BY SP.ITEM_ID			
	</query> 


	<!-- 재고정책_ 품목별 관리 등록 신규 생성  : 기존정보 삭제 -->  
	<query id="ip_01020_inventoryPlan_item_reg_save_01" paging="true"> 
		DELETE  STOCK_POLICY_QTY
		WHERE   WORK_DATE = (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
		AND     ITEM_ID = '$!{item_id}'
	</query> 

	<!-- 재고정책_ 품목별 관리 등록 신규 생성  : 신규정보 등록 -->  
	<query id="ip_01020_inventoryPlan_item_reg_save_02" paging="true"> 
		INSERT INTO STOCK_POLICY_QTY
		SELECT  WORK_DATE, 
		        LOC_TYPE, 
		        LOC_ID, 
		        --신제품
		        '$!{item_id}' ITEM_ID,
		        FROM_DATE, 
		        TO_DATE, 
		        PRDT_LT, 
		        RECEIPT_LT, 
		        SAFETY_PARM, 
		        STANDARD_DEV, 
		        '' SAFETY_STOCK_FLAG, 
		        round(('$!{cre_rate}'*SAFETY_STOCK)/100,0)  "안전재고", 
		        round(('$!{cre_rate}'*CAMP_STOC)/100,0)     "임시안전재고", 
		        round(('$!{cre_rate}'*SAVE_STOC)/100,0)     "비축재고", 
		        START_DATE,
		        END_DATE, 
		        QTY_UOM, 
		        'AD'MADE_TYPE, 
		        SYSDATE MADE_DTTM, 
		        MADE_BY,
		        0 FA_STOCK
		FROM    STOCK_POLICY_QTY
		WHERE   WORK_DATE = (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
		-- 대상 품목
		AND     ITEM_ID = '$!{tgt_item_id}'
	</query> 

	<!-- 
	===============================
	  재고정책출고사업장기별 기준정보관리
	===============================
	-->

	<!-- 재고정책_ 출고사업장별 관리 -->  
	<query id="ip_01030_inventoryPlan_DC_mod" paging="true"> 
		SELECT  DM.DC_ID,
		        DM.DC_SHORT_NAME,
		        DM.KEEPING_CAPA1,
		        DM.KEEPING_CAPA2,
		        DM.KEEPING_CAPA3,
		        DW.SAVE_STOC,
		        ROUND((DW.SAVE_STOC/DM.KEEPING_CAPA3)*100,1) STOC_RATE
		FROM    DC_MST DM,
		        (
		        SELECT  DC_ID,
		                SUM(BASE_STOCK) SAVE_STOC
		        FROM    DC_DATAWAREHOUSE
		        WHERE   CNFM_DATE = TO_CHAR(SYSDATE, 'yyyymmdd')
		        GROUP BY DC_ID
		        )DW
		WHERE   DM.DC_ID = DW.DC_ID(+)
		AND     DM.DC_ID NOT IN 
	                            (
	                            SELECT DC_ID
	                            FROM DC_MST
	                            WHERE	CDC_FLAG = 'N'
	                            AND		RDC_FLAG = 'N'
	                            ) 
        AND     DM.CDC_FLAG     LIKE '%'||'$!{cdc_flag}'||'%'
        AND     DM.RDC_FLAG     LIKE '%'||'$!{rdc_flag}'||'%'
        ORDER BY    DC_ID		
	</query> 

	<!-- 재고정책_ 출고사업장 품목별 상세 관리 화면 -->  
	<query id="ip_01030_inventoryPlan_DC_sub_mod" paging="true">
		SELECT  SP.ITEM_ID,
		        IM.ITEM_NAME,
		        SP.PRDT_LT,
		        SP.RECEIPT_LT,
		        SP.SAFETY_PARM,
		        SP.STANDARD_DEV,
		        ROUND(SP.SAFETY_STOCK,0)								SAFETY_STOCK,
		        SP.CAMP_STOC,
                --비축재고
                DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                    NVL(SP.SAVE_STOC,0)))      SAVE_STOC,
                --비축기간    
                DECODE( DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                        DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                        NVL(SP.SAVE_STOC,0)))
                        ,0, '',  TO_CHAR(TO_DATE(SP.START_DATE), 'YYYY-MM-DD') )  	START_DATE,
                DECODE( DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                         DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                         NVL(SP.SAVE_STOC,0)))
                        ,0, '',  TO_CHAR(TO_DATE(SP.END_DATE), 'YYYY-MM-DD') )  	END_DATE,
                ROUND(SP.SAFETY_STOCK,0)+(SP.CAMP_STOC)+
                DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                    NVL(SP.SAVE_STOC,0)))     OPTI_STOCK,
		        SP.SAFETY_STOCK_FLAG,
		        DW.QTY
		FROM    STOCK_POLICY_QTY SP, ITEM_MST IM,
		        (
		        SELECT	ITEM_ID, DC_ID, SUM(SALES_MEAN_3WEEK) QTY
		        FROM	DC_DATAWAREHOUSE
		        WHERE	CNFM_DATE   = TO_CHAR(SYSDATE, 'yyyymmdd')
		        AND		DC_ID       = '$!{dc_id}'
		        GROUP 
		        BY		CNFM_DATE, ITEM_ID, DC_ID
		        ) DW
		WHERE   SP.ITEM_ID	= IM.ITEM_ID
		AND     SP.ITEM_ID	= DW.ITEM_ID
		AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
 		AND     WORK_DATE	= (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
		AND     SP.LOC_ID   = '$!{dc_id}'
       [AND			(SP.ITEM_ID		LIKE '%'||'$!{serch_word}'||'%' 
				OR	IM.ITEM_NAME	LIKE '%'||'$!{serch_word}'||'%')]
		ORDER BY IM.ITEM_ID      
	</query>
	
	<!-- 재고정책_ 출고사업장 품목별 정보 저장 -->  
	<query id="ip_01030_inventoryPlan_DC_sub_save" fix="_user_id dc_id" iterator="item_id prdt_lt inpt_lt safety_parm std_dev safe_stoc_flag safety_stoc camp_stoc save_stoc start_date end_date opti_save_lvl"> 
		UPDATE	STOCK_POLICY_QTY
	    SET		PRDT_LT         = '$!{prdt_lt}',
	            RECEIPT_LT      = '$!{inpt_lt}',
	            SAFETY_PARM     = '$!{safety_parm}',
	            STANDARD_DEV    = '$!{std_dev}',
                SAFETY_STOCK_FLAG	= '$!{safe_stoc_flag}',
	            SAFETY_STOCK    = '$!{safety_stoc}',
	            CAMP_STOC       = '$!{camp_stoc}',
	            SAVE_STOC       = '$!{save_stoc}',
	            START_DATE      = REPLACE(REPLACE('$!{start_date}', '-', ''), '/', ''),
	            END_DATE        = REPLACE(REPLACE('$!{end_date}', '-', ''), '/', ''),
	            --OPTI_STOC_LVL = '$!{opti_save_lvl}',
	            MADE_TYPE		= 'UP',
	            MADE_DTTM		= SYSDATE,
	            MADE_BY			= '$!{_user_id}'
	    WHERE	LOC_ID		    = '$!{dc_id}'
	    AND		ITEM_ID			= '$!{item_id}'
	    AND     WORK_DATE	= (SELECT  MAX(WORK_DATE) FROM    STOCK_POLICY_QTY)
	</query>
	
	<!-- 
	=======================
	  공급할당품목설정 
	=======================
	-->

	<!-- 공급할당품목설정 조회 --> 
	<query id="ip_02020_dcAllocatonItemMgmt_mod" paging="true"> 
	#if("$!{search_type}" != "" || "$!{search_word}" != "" || "$!{search_item}" != "" )
     SELECT      ITEM_ID,
                ITEM_NAME,
                MAX(    		 TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'0','YYYYMMDD'))		CNFM_DATE_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',ALLOC_FLAG,'N'))	ALLOC_FLAG_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',ALLOC_GUBN,0))		ALLOC_GUBN_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',STOC,0))			STOC_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0', round(decode(SALE,0,0,STOC/SALE),1) ,0))  		STOC_DAY_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',INPT,0))			INPT_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',SALE,0))			SALE_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',PROM,0))			PROM_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',CAN_ALLOC_RATE,0))	CAN_ALLOC_RATE_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',TOT_ALLOC_RATE,0))	TOT_ALLOC_RATE_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',TOT_ALLOC_BOX,0))	TOT_ALLOC_BOX_1,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',DELV,0))			DELV_1,
--
                MAX(    		 TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'1','YYYYMMDD'))        CNFM_DATE_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',ALLOC_FLAG,'N'))    ALLOC_FLAG_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',ALLOC_GUBN,0))      ALLOC_GUBN_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',STOC,0))            STOC_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',STOC_DAY,0))        STOC_DAY_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',INPT,0))            INPT_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',SALE,0))            SALE_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',PROM,0))            PROM_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_2,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'1',DELV,0))            DELV_2,
--
                MAX(          	 TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'2','YYYYMMDD'))        CNFM_DATE_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',ALLOC_FLAG,'N'))    ALLOC_FLAG_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',ALLOC_GUBN,0))      ALLOC_GUBN_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',STOC,0))            STOC_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',STOC_DAY,0))        STOC_DAY_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',INPT,0))            INPT_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',SALE,0))            SALE_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',PROM,0))            PROM_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_3,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'2',DELV,0))            DELV_3,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'3','YYYYMMDD'))        CNFM_DATE_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',ALLOC_FLAG,'N'))    ALLOC_FLAG_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',ALLOC_GUBN,0))      ALLOC_GUBN_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',STOC,0))            STOC_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',STOC_DAY,0))        STOC_DAY_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',INPT,0))            INPT_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',SALE,0))            SALE_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',PROM,0))            PROM_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_4,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'3',DELV,0))            DELV_4,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'4','YYYYMMDD'))        CNFM_DATE_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',ALLOC_FLAG,'N'))    ALLOC_FLAG_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',ALLOC_GUBN,0))      ALLOC_GUBN_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',STOC,0))            STOC_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',STOC_DAY,0))        STOC_DAY_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',INPT,0))            INPT_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',SALE,0))            SALE_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',PROM,0))            PROM_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_5,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'4',DELV,0))            DELV_5,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'5','YYYYMMDD'))        CNFM_DATE_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',ALLOC_FLAG,'N'))    ALLOC_FLAG_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',ALLOC_GUBN,0))      ALLOC_GUBN_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',STOC,0))            STOC_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',STOC_DAY,0))        STOC_DAY_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',INPT,0))            INPT_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',SALE,0))            SALE_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',PROM,0))            PROM_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_6,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'5',DELV,0))            DELV_6,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'6','YYYYMMDD'))        CNFM_DATE_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',ALLOC_FLAG,'N'))    ALLOC_FLAG_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',ALLOC_GUBN,0))      ALLOC_GUBN_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',STOC,0))            STOC_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',STOC_DAY,0))        STOC_DAY_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',INPT,0))            INPT_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',SALE,0))            SALE_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',PROM,0))            PROM_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_7,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'6',DELV,0))            DELV_7,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'7','YYYYMMDD'))        CNFM_DATE_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',ALLOC_FLAG,'N'))    ALLOC_FLAG_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',ALLOC_GUBN,0))      ALLOC_GUBN_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',STOC,0))            STOC_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',STOC_DAY,0))        STOC_DAY_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',INPT,0))            INPT_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',SALE,0))            SALE_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',PROM,0))            PROM_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_8,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'7',DELV,0))            DELV_8,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'8','YYYYMMDD'))        CNFM_DATE_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',ALLOC_FLAG,'N'))    ALLOC_FLAG_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',ALLOC_GUBN,0))      ALLOC_GUBN_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',STOC,0))            STOC_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',STOC_DAY,0))        STOC_DAY_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',INPT,0))            INPT_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',SALE,0))            SALE_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',PROM,0))            PROM_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_9,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'8',DELV,0))            DELV_9,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'9','YYYYMMDD'))        CNFM_DATE_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',ALLOC_FLAG,'N'))    ALLOC_FLAG_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',ALLOC_GUBN,0))      ALLOC_GUBN_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',STOC,0))            STOC_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',STOC_DAY,0))        STOC_DAY_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',INPT,0))            INPT_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',SALE,0))            SALE_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',PROM,0))            PROM_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_10,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'9',DELV,0))            DELV_10,
--
                MAX(    		 TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'10','YYYYMMDD'))        CNFM_DATE_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',ALLOC_FLAG,'N'))    ALLOC_FLAG_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',ALLOC_GUBN,0))      ALLOC_GUBN_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',STOC,0))            STOC_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',STOC_DAY,0))        STOC_DAY_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',INPT,0))            INPT_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',SALE,0))            SALE_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',PROM,0))            PROM_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',CAN_ALLOC_RATE,0))  CAN_ALLOC_RATE_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',TOT_ALLOC_RATE,0))  TOT_ALLOC_RATE_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',TOT_ALLOC_BOX,0))   TOT_ALLOC_BOX_11,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'10',DELV,0))            DELV_11,
--
                MAX(             TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'11','YYYYMMDD'))        CNFM_DATE_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',ALLOC_FLAG,'N'))    ALLOC_FLAG_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',ALLOC_GUBN,0))      ALLOC_GUBN_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',STOC,0))            STOC_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',STOC_DAY,0))        STOC_DAY_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',INPT,0))            INPT_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',SALE,0))            SALE_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',PROM,0))			PROM_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',CAN_ALLOC_RATE,0))	CAN_ALLOC_RATE_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',TOT_ALLOC_RATE,0))	TOT_ALLOC_RATE_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',TOT_ALLOC_BOX,0))	TOT_ALLOC_BOX_12,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'11',DELV,0))			DELV_12,
	            MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',SALES_MEAN_3WEEK,0))		SALES_MEAN_3WEEK,
	            MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',SAFETY_STOCK,0))			SAFETY_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',AY_STOCK,0))            AY_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',AS_STOCK,0))            AS_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',ANS_STOCK,0))           ANS_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',PSL_STOCK,0))           PSL_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',GM_STOCK,0))            CDC_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',PS_STOCK,0))            PS_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',NS_STOCK,0))            NS_STOCK,
                MAX(DECODE(DW.CNFM_DATE, TO_DATE('$!{in_cnfm_date}')+'0',DY_STOCK,0))            DY_STOCK
		FROM    (
                SELECT      DC.ITEM_ID,
                            IM.ITEM_NAME,
                            DC.CNFM_DATE,
                            DF.ALLOC_FLAG,
                            DI.ALLOC_GUBN,
                            sum(BASE_STOCK)																										STOC,        
                            sum(RECEIPT) + sum(RECEIPT_EXPT)                                                                                    INPT_1,        
                            sum(RECEIPT_EXPT)                                                                                    				INPT,        
                            sum(RECEIPT) 					                                                                                    INPT_2,        
                            sum(ISSUE)                                                                                                          ISSUE,
                            sum(ISSUE_EXPT)                                                                                                     ISSUE_EXPT,
                        #if("$!{week_flag}" == "plan")
                        	/* 판매계획*/
                            round(decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,sum(BASE_STOCK)/(sum(SALES_PLAN)+sum(PROM_PLAN))),1)				STOC_DAY,        
                            sum(SALES_PLAN)                                                                                                     SALE,        
                            sum(PROM_PLAN)                                                                                                      PROM,
                            DECODE(DI.ALLOC_GUBN, 2, round(decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,(MAX(SALES_PLAN+PROM_PLAN)/(sum(SALES_PLAN)+sum(PROM_PLAN)))*100),1) ,0)		TOT_ALLOC_RATE,        
                            DECODE(DI.ALLOC_GUBN, 2, MAX(SALES_PLAN+PROM_PLAN) ,0)																									TOT_ALLOC_BOX,
                        #elseif("$!{week_flag}" == "1week")
                        	/* 1주평균 */
                            round(decode((sum(SALES_1WEEK)),0,0,sum(BASE_STOCK)/(sum(SALES_1WEEK))),1)				STOC_DAY,        
                            MAX(SALES_1WEEK)                                                                                                     SALE,        
                            sum(0)                                                                                                      PROM,
                            DECODE(DI.ALLOC_GUBN, 2, round(decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,(MAX(SALES_1WEEK)/(sum(SALES_PLAN)+sum(PROM_PLAN)))*100),1) ,0)		TOT_ALLOC_RATE,        
                            DECODE(DI.ALLOC_GUBN, 2, MAX(SALES_1WEEK) ,0)																									TOT_ALLOC_BOX,
                        #elseif("$!{week_flag}" == "3week")
                        	/* 3주평균 */
                            round(decode((sum(SALES_3WEEK)),0,0,sum(BASE_STOCK)/(sum(SALES_3WEEK))),1)				STOC_DAY,        
                            MAX(SALES_3WEEK)                                                                                                     SALE,        
                            sum(0)                                                                                                      PROM,
                            DECODE(DI.ALLOC_GUBN, 2, round(decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,(MAX(SALES_3WEEK)/(sum(SALES_PLAN)+sum(PROM_PLAN)))*100),1) ,0)		TOT_ALLOC_RATE,        
                            DECODE(DI.ALLOC_GUBN, 2, MAX(SALES_3WEEK) ,0)																									TOT_ALLOC_BOX,
                        #elseif("$!{week_flag}" == "13week")
                        	/* 1+3주평균/2 */
                            round(decode((sum(SALES_13WEEK)),0,0,sum(BASE_STOCK)/(sum(SALES_13WEEK))),1)				STOC_DAY,        
                            MAX(SALES_13WEEK)                                                                                                     SALE,        
                            sum(0)                                                                                                      PROM,
                            DECODE(DI.ALLOC_GUBN, 2, round(decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,(MAX(SALES_13WEEK)/(sum(SALES_PLAN)+sum(PROM_PLAN)))*100),1) ,0)		TOT_ALLOC_RATE,        
                            DECODE(DI.ALLOC_GUBN, 2, MAX(SALES_13WEEK),0)																		TOT_ALLOC_BOX,
                        #end    
                            round(decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,sum(BASE_STOCK)/(sum(SALES_PLAN)+sum(PROM_PLAN)))*100,1)			CAN_ALLOC_RATE,
                            sum(SALES_MEAN_3WEEK)                                                                                               SALES_MEAN_3WEEK,        
                            sum(ISSUE)+sum(ISSUE_EXPT) 					                                                                        DELV,        
                            SP.SAFETY_STOCK,
                            CD.AY_STOCK,
                            CD.AS_STOCK,
                            CD.ANS_STOCK,
                            CD.PSL_STOCK,
                            CD.GM_STOCK,
                            CD.PS_STOCK,
                            CD.NS_STOCK,
                            CD.DY_STOCK
                FROM        DC_DATAWAREHOUSE DC, ITEM_MST IM, DC_MST DM,
                			(
							SELECT  CNFM_DATE, 
							        PROD_CODE,   
							        MAX(ALLOC_GUBN) ALLOC_GUBN
							FROM    SDORT203
							GROUP BY CNFM_DATE, 
							        PROD_CODE                			
                			) DI, 
                			SDORT202 DF, -- 공급할당 FLAG 정보 
	                        (
	                        SELECT  SP.ITEM_ID, 
	                                SUM(SP.SAFETY_STOCK)+SUM(SP.CAMP_STOC)+
	                                SUM(DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
	                                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
	                                    NVL(SP.SAVE_STOC,0))))      SAFETY_STOCK
	                        FROM    STOCK_POLICY_QTY  SP, ITEM_MST IM
	                        WHERE   SP.ITEM_ID		= IM.ITEM_ID
					        AND     IM.ITEM_STATUS = 'ST'
					        --AND			IM.CAT01		NOT IN('PX', 'KAL')item_type
					        AND		IM.ITYPE		LIKE '$!{item_type}'		
                            #if ( "$!{search_type}" == "T86" )
              				AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              				#else
              				AND     IM.DIVISION    = '$!{search_type}'
              				#end
	                        AND     SP.WORK_DATE	= (SELECT MAX(WORK_DATE) FROM STOCK_POLICY_QTY)
	                        [AND	(SP.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
									OR	IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
	                        GROUP BY SP.ITEM_ID
	                       )SP,
	                       (-- CDC 재고
                            SELECT  DW.ITEM_ID, 
                                    SUM(DECODE(DW.DC_ID, '7100', DW.BASE_STOCK, 0)) AY_STOCK,
                                    SUM(DECODE(DW.DC_ID, '7200', DW.BASE_STOCK, 0)) AS_STOCK,
                                    SUM(DECODE(DW.DC_ID, '7300', DW.BASE_STOCK, 0)) + 
                                    SUM(DECODE(DW.DC_ID, '7400', DW.BASE_STOCK, 0)) ANS_STOCK,
                                    SUM(DECODE(DW.DC_ID, '7500', DW.BASE_STOCK, 0)) PSL_STOCK,
                                    SUM(DECODE(DW.DC_ID, '7600', DW.BASE_STOCK, 0)) GM_STOCK,
                                    SUM(DECODE(DW.DC_ID, '7700', DW.BASE_STOCK, 0)) PS_STOCK,
                                    SUM(DECODE(DW.DC_ID, '7800', DW.BASE_STOCK, 0)) NS_STOCK,
                                    SUM(DECODE(DW.DC_ID, '1811', DW.BASE_STOCK, 0)) DY_STOCK
                            FROM    DC_DATAWAREHOUSE DW, 
                            		(
                                    SELECT *
                                    FROM ITEM_MST IM
                                    WHERE	IM.ITEM_STATUS    = 'ST'
                                    AND		NVL(IM.CAT01,0)       NOT IN('PX', 'KAL','군용')
                                    AND		NVL(IM.CAT03,0)       NOT IN( 'O10')
                                    AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
							        AND		IM.ITYPE		LIKE '$!{item_type}'		
                                    #if ( "$!{search_type}" == "T86" )
              				  		AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              						#else
              						AND     IM.DIVISION    = '$!{search_type}'
              						#end
                                    [AND	(IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
										OR	IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                                    ) IM                                    
                            WHERE   DW.ITEM_ID		= IM.ITEM_ID
                            AND     DW.CNFM_DATE	= '$!{in_cnfm_date}'
                            GROUP BY DW.ITEM_ID
							)CD,
                            (
                            SELECT      DC.ITEM_ID,
                            ----------------------------------------------------------
                                        SUM(SALES_MEAN_1WEEK)        SALES_1WEEK, 
                                        SUM(SALES_MEAN_3WEEK)        SALES_3WEEK,
                                        (SUM(SALES_MEAN_1WEEK+SALES_MEAN_3WEEK)/2)    SALES_13WEEK                                    
                            ----------------------------------------------------------
                            FROM        DC_DATAWAREHOUSE DC, DC_MST DM,
	                            		(
	                                    SELECT *
	                                    FROM ITEM_MST IM
	                                    WHERE	IM.ITEM_STATUS    = 'ST'
	                                    AND		NVL(IM.CAT01,0)       NOT IN('PX', 'KAL','군용')
	                                    AND		NVL(IM.CAT03,0)       NOT IN( 'O10')
	                                    AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								        AND		IM.ITYPE		LIKE '$!{item_type}'		
	                                    #if ( "$!{search_type}" == "T86" )
              							AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              							#else
              							AND     IM.DIVISION    = '$!{search_type}'
              							#end
	                                    [AND	(IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
											OR	IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
	                                    ) IM   
                            WHERE       DC.ITEM_ID        = IM.ITEM_ID
                            AND         DC.DC_ID        = DM.DC_ID
                            AND         DM.EXPORT_FLAG IS NULL
                            AND         DC.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                            GROUP BY    DC.ITEM_ID
                            )SM,							
							(
							-----------------------------------------------------  대상 품목 ------------------------------------------------------------
							SELECT	DISTINCT ITEM_ID
							FROM	(
									SELECT  ITEM_ID,
									        ITEM_NAME,
									        TYPE,
										#if ( "$!{stock_day_flag}" != "Y" ) 
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+0,   'D'), 1, '$!{stock_day}', D0)) D0,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+1,   'D'), 1, '$!{stock_day}', D1)) D1,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+2,   'D'), 1, '$!{stock_day}', D2)) D2,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+3,   'D'), 1, '$!{stock_day}', D3)) D3,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+4,   'D'), 1, '$!{stock_day}', D4)) D4,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+5,   'D'), 1, '$!{stock_day}', D5)) D5,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+6,   'D'), 1, '$!{stock_day}', D6)) D6,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+7,   'D'), 1, '$!{stock_day}', D7)) D7,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+8,   'D'), 1, '$!{stock_day}', D8)) D8,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+9,   'D'), 1, '$!{stock_day}', D9)) D9,
									        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
									        DECODE(TO_CHAR(SYSDATE+10,   'D'), 1, '$!{stock_day}', D10)) D10
										#else
									        D0,
									        D1,
									        D2,
									        D3,
									        D4,
									        D5,
									        D6,
									        D7,
									        D8,
									        D9,	        
									        D10	        
										#end
									FROM 
									        (
											-- 실적 제고일수 S
											SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
							                		, IM.CAT06
											        --, W3.BASE_STOCK
											        , W3.CLGO SA
											        , TRIM(TO_CHAR(
											        	ROUND(DECODE(OD.OD_QTY, 0, 0,W3.BASE_STOCK/ OD.OD_QTY),1)
											        	 ,999999999990.9)) "D0"
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+1,   'yyyymmdd'))*W3.CLGO 
									                     - OD.OD_QTY +  W3.IPGO1)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D1"
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+2,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D2"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+3,   'yyyymmdd'))*W3.CLGO 
											          - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D3"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+4,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D4"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+5,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
											          - W3.CLGO +  W3.IPGO5)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D5"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+6,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
											          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D6"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+7,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
											          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
											          - W3.CLGO +  W3.IPGO7)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D7"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+8,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
											          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
											          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D8"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+9,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
											          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
											          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
											          - W3.CLGO +  W3.IPGO9)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D9"        
											        , TRIM(TO_CHAR(
									                    DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
											        	ROUND(DECODE(W3.CLGO, 0, 0,
											          (W3.BASE_STOCK +
									                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+10,   'yyyymmdd'))*W3.CLGO 
											          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
											          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
											          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
											          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
											          - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)
											          / W3.CLGO),1))
											          ,999999999990.9)) "D10"        
											FROM    ( 
											        SELECT  ITEM_ID
											                ,SUM(BASE_STOCK) BASE_STOCK
											                ,SUM(CLGO) CLGO
											                ,SUM(IPGO1)  IPGO1
											                ,SUM(IPGO2)  IPGO2
											                ,SUM(IPGO3)  IPGO3
											                ,SUM(IPGO4)  IPGO4
											                ,SUM(IPGO5)  IPGO5
											                ,SUM(IPGO6)  IPGO6
											                ,SUM(IPGO7)  IPGO7
											                ,SUM(IPGO8)  IPGO8
											                ,SUM(IPGO9)  IPGO9
											                ,SUM(IPGO10) IPGO10
											                ,SUM(IPGO11) IPGO11
											        FROM    (
											                SELECT  DW.ITEM_ID 
									                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.BASE_STOCK),0) BASE_STOCK
							                                       #if ( "$!{week_flag}" == "3week" ) 
									                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
							                                       #elseif ( "$!{week_flag}" == "1week" ) 
									                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_1WEEK_ETC),0) CLGO
							                                       #elseif ( "$!{week_flag}" == "31week" ) 
									                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0),0) CLGO
									                               #else
									                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
							                                       #end
									                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO1
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO2
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO3
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO4
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO5
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO6
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO7
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO8
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO9
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO10
											                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO11
											                FROM	DC_DATAWAREHOUSE	DW, DC_MST DM,
											                		(
							                                        SELECT	IM.ITEM_ID
							                                        FROM	ITEM_MST IM				                                        
							                                        WHERE	ITEM_STATUS = 'ST'
							                                        AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
							                                        AND		NVL(IM.CAT01,0)       NOT IN('PX', 'KAL','군용')
							                                        AND		NVL(IM.CAT03,0)       NOT IN( 'O10')
							                                        AND		NVL(IM.CAT06,0)       LIKE '%'||'$!{cat06}'||'%'
							                                        AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
							                                        AND		IM.SEARCH_FLAG != 'N'
							                                       	#if ( "$!{search_type}" == "T86" )
              														AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              														#else
              														AND     IM.DIVISION    = '$!{search_type}'
              														#end
							                                       	AND		IM.ITYPE		LIKE '$!{item_type}'		
							                                       	[AND    (IM.ITEM_ID      LIKE '%'||'$!{search_item}'||'%'
								          			  				OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]
							                                        ) 					IM,
							                                        (
																	SELECT	YYYYMMDD
																	FROM	CAL_MST CAL
																	WHERE	YYYYMMDD BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'$!{search_period}','YYYYMMDD'))
																	) 					CAL
											                WHERE	DW.ITEM_ID 		= IM.ITEM_ID
							                                AND     DW.CNFM_DATE 	= CAL.YYYYMMDD
									                        AND		DW.DC_ID = DM.DC_ID
									                        AND     DM.EXPORT_FLAG IS NULL
											                GROUP BY DW.ITEM_ID, CNFM_DATE
											                )
											        GROUP BY ITEM_ID
											        ) W3, ITEM_MST IM,
									                (
													SELECT MIN(YYYYMMDD) SUN_DAY
													FROM CAL_MST
													WHERE YYYYMMDD >= SYSDATE
													AND HOLIDAY_FLAG = 'Y'
									                ) SU,
							                        (
							                        SELECT  DW.ITEM_ID,
							                                SUM(DW.ISSUE) OD_QTY
							                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
							                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
							                        AND     DW.DC_ID = DM.DC_ID
							                        AND     DM.EXPORT_FLAG IS NULL
							                        GROUP BY DW.ITEM_ID                        
							                        )OD
											WHERE	W3.ITEM_ID = IM.ITEM_ID 
											AND		W3.ITEM_ID = OD.ITEM_ID
											GROUP BY	W3.ITEM_ID, IM.ITEM_NAME, IM.CAT06, W3.BASE_STOCK, W3.CLGO, 
														W3.IPGO1, W3.IPGO2, W3.IPGO3, W3.IPGO4, W3.IPGO5, W3.IPGO6, W3.IPGO7, W3.IPGO8, W3.IPGO9, W3.IPGO10,
														SU.SUN_DAY, OD.OD_QTY
											)
									)
							#if("$!{stock_day}" != "")
								#if ( "$!{stock_day_flag}" != "Y" ) 
									#if 	( "$!{search_period}" == "3" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0)
									#elseif ( "$!{search_period}" == "4" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0)
									#elseif ( "$!{search_period}" == "5" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999)  OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0  OR D3 &gt;  0 OR D4 &gt;  0)
									#elseif ( "$!{search_period}" == "6" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0)
									#elseif ( "$!{search_period}" == "7" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0)
									#elseif ( "$!{search_period}" == "8" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0)
									#elseif ( "$!{search_period}" == "9" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999) OR D8 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0 OR D8 &gt;  0)
									#elseif ( "$!{search_period}" == "10" )
									WHERE	(D0 &lt;  NVL($!{stock_day},999) OR D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999) OR D8 &lt;  NVL($!{stock_day},999) OR D9 &lt;  NVL($!{stock_day},999))
									AND		(D0 &gt;  0 OR D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0 OR D8 &gt;  0 OR D9 &gt;  0)
									#end
								#else
									#if 	( "$!{search_period}" == "10" )
									WHERE   D9 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "9" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "8" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "7" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "6" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "5" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "4" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25) OR D3 &gt;  NVL($!{stock_day},25)
									#elseif ( "$!{search_period}" == "3" )
									WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25) OR D3 &gt;  NVL($!{stock_day},25) OR D2 &gt;  NVL($!{stock_day},25)	OR	D1 &gt;  NVL($!{stock_day},25)	OR	D0 &gt;  NVL($!{stock_day},25)
									#end
								#end
							#end
							-----------------------------------------------------  대상 품목 ------------------------------------------------------------							
							#if ( "$!{alloc_item_flag}" == "Y" ) 
							-- 공급할당 품목인것
								UNION
								SELECT		DISTINCT DC.ITEM_ID								
								FROM		(
											SELECT  CNFM_DATE, 
											        PROD_CODE	ITEM_ID,   
											        MAX(ALLOC_GUBN) ALLOC_GUBN,
											        'Y' ALLOC_FLAG
											FROM    SDORT203
									        WHERE   CNFM_DATE   BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'$!{search_period}','YYYYMMDD'))
									        AND     ALLOC_GUBN	= '2'   -- 2 -> '관리'             
											GROUP BY CNFM_DATE, 
											        PROD_CODE  		        
											) DC, ITEM_MST IM
								WHERE		DC.ITEM_ID = IM.ITEM_ID
								AND			(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								--AND			DC.CNFM_DATE   BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'$!{search_period}','YYYYMMDD'))
								--AND			ALLOC_GUBN = '2'
								AND         IM.ITEM_STATUS    = 'ST'
						        AND			IM.ITYPE		LIKE '$!{item_type}'		
								#if ( "$!{search_type}" == "T86" )
              					AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              					#else
              					AND     IM.DIVISION    = '$!{search_type}'
              					#end
							--------------------------------------------------------------------------------------
	                            UNION
	                            SELECT      DISTINCT    DC.ITEM_ID								
	                            FROM        DC_DATAWAREHOUSE DC,
											(
		                                    SELECT *
		                                    FROM ITEM_MST IM
		                                    WHERE IM.ITEM_STATUS    = 'ST'
		                                    AND NVL(IM.CAT01,0)       NOT IN('PX', 'KAL','군용')
		                                    AND NVL(IM.CAT03,0)       NOT IN( 'O10')
		                                    AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
									        AND		IM.ITYPE		LIKE '$!{item_type}'		
		                                    #if ( "$!{search_type}" == "T86" )
              								AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              								#else
              								AND     IM.DIVISION    = '$!{search_type}'
              								#end
		                                    [AND	(IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
												OR	IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		                                    ) IM,
		                                    (
		                                    SELECT	YYYYMMDD
		                                    FROM	CAL_MST
		                                    WHERE	YYYYMMDD BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'$!{search_period}','YYYYMMDD'))
		                                    )CAL
	                            WHERE       DC.ITEM_ID		= IM.ITEM_ID
	                            --AND         DC.CNFM_DATE   BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+'$!{search_period}','YYYYMMDD'))
	                            AND         DC.CNFM_DATE	= YYYYMMDD
	                            GROUP BY    DC.ITEM_ID, IM.ITEM_NAME, DC.CNFM_DATE  
	                            HAVING      (ROUND (DECODE((SUM(SALES_PLAN)+SUM(PROM_PLAN)),0,0,SUM(BASE_STOCK)/DECODE(SUM(SALES_MEAN_3WEEK),0, 1, SUM(SALES_MEAN_3WEEK)) ),1) &lt;  NVL('$!{stock_day}',9999999))
                                AND			(round (decode((sum(SALES_PLAN)+sum(PROM_PLAN)),0,0,sum(BASE_STOCK)/(sum(SALES_PLAN)+sum(PROM_PLAN))),1) &gt; 0)
							--------------------------------------------------------------------------------------
							#else                                            
							#end
                        )ID,
                        (
                        SELECT	YYYYMMDD
                        FROM	CAL_MST
                        WHERE	YYYYMMDD BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+11,'YYYYMMDD'))
                        AND     HOLIDAY_FLAG IS  NULL
                        )CAL
                WHERE   DC.ITEM_ID		= IM.ITEM_ID
                AND     DC.ITEM_ID		= DI.PROD_CODE(+)
	            AND     DC.ITEM_ID		= SP.ITEM_ID(+)
                AND     DC.CNFM_DATE	= DI.CNFM_DATE(+) 
                AND     DC.CNFM_DATE	= DF.CNFM_DATE(+)
                AND		DC.ITEM_ID		= CD.ITEM_ID(+)
                AND     DC.DC_ID        = DM.DC_ID
                AND     DM.EXPORT_FLAG  IS NULL
                AND     DC.ITEM_ID  	= ID.ITEM_ID -- 대상 ITEM_ID
                AND		DC.ITEM_ID		= SM.ITEM_ID
                AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                --AND   DC.CNFM_DATE   BETWEEN '$!{in_cnfm_date}' AND (TO_CHAR(TO_DATE('$!{in_cnfm_date}')+11,'YYYYMMDD'))
                AND		DC.CNFM_DATE = CAL.YYYYMMDD
                GROUP
                BY		DC.ITEM_ID, IM.ITEM_NAME, DC.CNFM_DATE, DI.ALLOC_GUBN, DF.ALLOC_FLAG, SP.SAFETY_STOCK, 
                        CD.AY_STOCK, CD.AS_STOCK, CD.ANS_STOCK, CD.PSL_STOCK, CD.GM_STOCK, CD.PS_STOCK, CD.NS_STOCK, CD.DY_STOCK
                ) DW
    GROUP BY    DW.ITEM_ID, DW.ITEM_NAME
    ORDER BY    DW.ITEM_ID
		#else
			SELECT 
				''T_1	,''T_2		,'0'T_3		,'0'T_4		,'0'T_5		,'0'T_6		,'0'T_7		,'0'T_8		,'0'T_9		,'0'T_10	,'0'T_11	,'0'T_12	,'0'T_13	,'0'T_14	,'0'T_15	,'0'T_16	,
				'0'T_17	,'0'T_18	,'0'T_19	,'0'T_20	,'0'T_21	,'0'T_22	,'0'T_23	,'0'T_24	,'0'T_25	,'0'T_26	,'0'T_27	,'0'T_28	,'0'T_29	,'0'T_30	,'0'T_31	,'0'T_32	,
				'0'T_33	,'0'T_34	,'0'T_35	,'0'T_36	,'0'T_37	,'0'T_38	,'0'T_39	,'0'T_40	,'0'T_41	,'0'T_42	,'0'T_43	,'0'T_44	,'0'T_45	,'0'T_46	,'0'T_47	,'0'T_48	,
				'0'T_49	,'0'T_50	,'0'T_51	,'0'T_52	,'0'T_53	,'0'T_54	,'0'T_55	,'0'T_56	,'0'T_57	,'0'T_58	,'0'T_59	,'0'T_60	,'0'T_61	,'0'T_62	,'0'T_63	,'0'T_64	,
				'0'T_65	,'0'T_66	,'0'T_67	,'0'T_68	,'0'T_69	,'0'T_70	,'0'T_71	,'0'T_72	,'0'T_73	,'0'T_74	,'0'T_75	,'0'T_76	,'0'T_77	,'0'T_78	,'0'T_79	,'0'T_80	,
				'0'T_81	,'0'T_82	,'0'T_83	,'0'T_84	,'0'T_85	,'0'T_86	,'0'T_87	,'0'T_88	,'0'T_89	,'0'T_90	,'0'T_91	,'0'T_92	,'0'T_93	,'0'T_94	,'0'T_95	,'0'T_96	,
				'0'T_97	,'0'T_98	,'0'T_99	,'0'T_100	,'0'T_101	,'0'T_102	,'0'T_103	,'0'T_104	,'0'T_105	,'0'T_106	,'0'T_107	,'0'T_108	,'0'T_109	,'0'T_110	,'0'T_111	,'0'T_112	,
				'0'T_113,'0'T_114	,'0'T_115	,'0'T_116	,'0'T_117	,'0'T_118	,'0'T_119	,'0'T_120	,'0'T_121	,'0'T_122	,'0'T_123	,'0'T_124	,'0'T_125	,'0'T_126	,'0'T_127	,'0'T_128	,
				'0'T_129,'0'T_130	,'0'T_131	,'0'T_132	,'0'T_133	,'0'T_134	,'0'T_135	,'0'T_136	,'0'T_137	,'0'T_138	,'0'T_139	,'0'T_140	,'0'T_141	,'0'T_142	,'0'T_143	,'0'T_144	,
				'0'T_145,'0'T_146	,'0'T_147	,'0'T_148	,'0'T_149	,'0'T_150	,'0'T_151	,'0'T_152	,'0'T_153	,'0'T_154	,'0'T_155	,'0'T_156	,'0'T_157
			FROM DUAL
		#end   
	</query> 
	
	<!-- cnfm_date -->  
	<query id="ip_02020_cnfm_date" > 
		SELECT	TO_CHAR(NVL(TO_DATE('$!{in_cnfm_date}'),SYSDATE) +ROWNUM-1,'YYYYMMDD'),
                TO_CHAR(NVL(TO_DATE('$!{in_cnfm_date}'),SYSDATE) +ROWNUM-1,'DY')
		FROM	CODE_MST,
				DUAL
		WHERE	ROWNUM	&lt;= 12
 	</query>
	
	
	<!-- combo search_type -->
	<query id="ip_02020_combo_search_type" > 

		SELECT  CD,    CD_NAME
		FROM    CODE_MST, DUAL B
		WHERE   CD_GRP = 'DIVISION'
		AND		CD NOT IN ('70','90')   --세트제품, 카레레스토랑 제거 2015-01-26 노효
		AND     MADE_TYPE !='DE'
		AND     CD NOT IN ('00')

	</query> 
	<!-- 공급 할당 품목 설정 : 삭제 -->
	<query id="ip_02020_dcAllocatonItemMgmt_mod_save_01" iterator="item_id cnfm_date alloc_gubn delete_flag"> 
		#if( "$!{alloc_gubn}" == "2" )
		CALL SP_IP_SET_ALLOC_GUBN('$!{cnfm_date}', '$!{item_id}', '01', '$!{_user_id}')
		#else
		CALL SP_IP_SET_ALLOC_GUBN('$!{cnfm_date}', '$!{item_id}', '00', '$!{_user_id}')
		#end 				
		
	</query>
	
	<!-- 공급 할당 품목 설정 : 삭제  미사용 -->
	<query id="ip_02020_dcAllocatonItemMgmt_mod_save_01_org" iterator="item_id cnfm_date alloc_gubn delete_flag"> 
            DELETE	DC_ALLOC_ITEM
            WHERE	CNFM_DATE	= '$!{cnfm_date}'
            AND		ITEM_ID		= '$!{item_id}'
	</query>

	<!-- 공급 할당 품목 설정 : 삭제  미사용 -->
	<query id="ip_02020_dcAllocatonItemMgmt_mod_save_02" fix="_user_id" iterator="item_id cnfm_date alloc_gubn tot_alloc_box"> 
		#if( "$!{alloc_gubn}" == "2" )
			INSERT     INTO DC_ALLOC_ITEM(CNFM_DATE, ITEM_ID, ALLOC_GUBN, TOT_ALLOC_BOX, MADE_TYPE, MADE_DTTM, MADE_BY)
            SELECT      '$!{cnfm_date}'		AS CNFM_DATE,
            			'$!{item_id}'		AS ITEM_ID,
            			'$!{alloc_gubn}'    AS ALLOC_GUBN,
                        DECODE('$!{tot_alloc_box}', 'NaN', 0 , '$!{tot_alloc_box}') AS TOT_ALLOC_BOX,
                        'AD'                AS MADE_TYPE,
                        SYSDATE             AS MADE_DTTM,
                        '$!{_user_id}'      AS MADE_BY
              FROM     DUAL
             WHERE     NOT EXISTS ( 
                       SELECT CNFM_DATE, ITEM_ID
                       FROM DC_ALLOC_ITEM  
                       WHERE CNFM_DATE  = '$!{cnfm_date}' 
                       AND ITEM_ID      = '$!{item_id}')
		#else
			INSERT     INTO DC_ALLOC_ITEM(CNFM_DATE, ITEM_ID, ALLOC_GUBN, TOT_ALLOC_BOX, MADE_TYPE, MADE_DTTM, MADE_BY)
            SELECT      '$!{cnfm_date}'		AS CNFM_DATE,
            			'$!{item_id}'		AS ITEM_ID,
            			'$!{alloc_gubn}'    AS ALLOC_GUBN,
                        DECODE('$!{tot_alloc_box}', 'NaN', 0 , '$!{tot_alloc_box}') AS TOT_ALLOC_BOX,
                        'AD'                AS MADE_TYPE,
                        SYSDATE             AS MADE_DTTM,
                        '$!{_user_id}'      AS MADE_BY
            FROM     	DUAL
            WHERE     	1=0 -- 아무것도 지우지 않음
		#end 		
 
		
	</query>


	<!-- 
	=======================
	  재고정책 추이  분석
	=======================
	-->
	
	<!--  품종 중분류  -->  
	<query id="ip_01040_cat02" > 
		SELECT	CD, CD_NAME
		FROM	CODE_MST
		WHERE	CD_GRP ='SALES_CAT2'
		AND		MADE_TYPE != 'DE'
	</query> 

	
	<!--  재고추이 분석 헤더 날짜  -->  
	<query id="ip_01040_inventoryPlanAnalysis_list_date" > 
        SELECT  TO_CHAR(SYSDATE,     'MM/DD')||'('||TO_CHAR(SYSDATE,	 'DY')||')'	DAY_1, 
                TO_CHAR(SYSDATE+1,   'MM/DD')||'('||TO_CHAR(SYSDATE+1,   'DY')||')' DAY_2, 
                TO_CHAR(SYSDATE+2,   'MM/DD')||'('||TO_CHAR(SYSDATE+2,   'DY')||')' DAY_3, 
                TO_CHAR(SYSDATE+3,   'MM/DD')||'('||TO_CHAR(SYSDATE+3,   'DY')||')' DAY_4, 
                TO_CHAR(SYSDATE+4,   'MM/DD')||'('||TO_CHAR(SYSDATE+4,   'DY')||')' DAY_5, 
                TO_CHAR(SYSDATE+5,   'MM/DD')||'('||TO_CHAR(SYSDATE+5,   'DY')||')' DAY_6, 
                TO_CHAR(SYSDATE+6,   'MM/DD')||'('||TO_CHAR(SYSDATE+6,   'DY')||')' DAY_7 
          FROM  DUAL
	</query> 
		
	<!--  재고정책 추이  분석  -->  
	<query id="ip_01040_inventoryPlanAnalysis_list" paging="true"> 
		#if("$!{dc_id}" != "" || "$!{cat_02}" != "" || "$!{item_id}" != "" )
	        SELECT  T2.ITEM_ID,
	        		T2.ITEM_NAME,T1.LOC_ID,MAX(T3.DC_SHORT_NAME)    DC_NAME,
	                ROUND(SUM(T1.SAFE_STOCK),0)            SAFE_STOCK,
	                ROUND(SUM(T1.SALES_MEAN_3WEEK),0)    SALES_MEAN_3WEEK,
                    ROUND(SUM(T1.SELL_BOX),0)               SELL_BOX,
                    ROUND(SUM(T1.SALES_PRE_CUM),0)          SALES_PRE_CUM,
	                ROUND(SUM(T1.NOW_STOCK),0)            NOW_STOCK,
	                ROUND(SUM(T1.NOW_ENTER_PLAN),0)        NOW_ENTER_PLAN,
	                ROUND(SUM(T1.NOW_DELIV_PLAN),0)        NOW_DELIV_PLAN,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN),0)    STOCK_PLAN0,
	                ROUND(SUM(T1.PURCH_PLAN1),0)            PURCH_PLAN1,
	                ROUND(SUM(T1.SALES_PLAN1),0)            SALES_PLAN1,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN)    +
	                    SUM(T1.PURCH_PLAN1)    -    SUM(T1.SALES_PLAN1),0)                                    STOCK_PLAN1,
	                ROUND(SUM(T1.PURCH_PLAN2),0)            PURCH_PLAN2,
	                ROUND(SUM(T1.SALES_PLAN2),0)            SALES_PLAN2,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN)    +
	                    SUM(T1.PURCH_PLAN1)    -    SUM(T1.SALES_PLAN1)        +    SUM(T1.PURCH_PLAN2)        -
	                    SUM(T1.SALES_PLAN2),0)                                                            STOCK_PLAN2,
	                ROUND(SUM(T1.PURCH_PLAN3),0)            PURCH_PLAN3,
	                ROUND(SUM(T1.SALES_PLAN3),0)            SALES_PLAN3,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN)    +
	                    SUM(T1.PURCH_PLAN1)    -    SUM(T1.SALES_PLAN1)        +    SUM(T1.PURCH_PLAN2)        -
	                    SUM(T1.SALES_PLAN2)    +    SUM(T1.PURCH_PLAN3)        -    SUM(T1.SALES_PLAN3),0)        STOCK_PLAN3,
	                ROUND(SUM(T1.PURCH_PLAN4),0)            PURCH_PLAN4,
	                ROUND(SUM(T1.SALES_PLAN4),0)            SALES_PLAN4,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN)    +
	                    SUM(T1.PURCH_PLAN1)    -    SUM(T1.SALES_PLAN1)        +    SUM(T1.PURCH_PLAN2)        -
	                    SUM(T1.SALES_PLAN2)    +    SUM(T1.PURCH_PLAN3)        -    SUM(T1.SALES_PLAN3)        +
	                    SUM(T1.PURCH_PLAN4)    -    SUM(T1.SALES_PLAN4),0)                                    STOCK_PLAN4,
	                ROUND(SUM(T1.PURCH_PLAN5),0)            PURCH_PLAN5,
	                ROUND(SUM(T1.SALES_PLAN5),0)            SALES_PLAN5,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN)    +
	                    SUM(T1.PURCH_PLAN1)    -    SUM(T1.SALES_PLAN1)        +    SUM(T1.PURCH_PLAN2)        -
	                    SUM(T1.SALES_PLAN2)    +    SUM(T1.PURCH_PLAN3)        -    SUM(T1.SALES_PLAN3)        +
	                    SUM(T1.PURCH_PLAN4)    -    SUM(T1.SALES_PLAN4)        +    SUM(T1.PURCH_PLAN5)        -
	                    SUM(T1.SALES_PLAN5),0)                                                            STOCK_PLAN5,
	                ROUND(SUM(T1.PURCH_PLAN6),0)            PURCH_PLAN6,
	                ROUND(SUM(T1.SALES_PLAN6),0)            SALES_PLAN6,
	                ROUND(SUM(T1.NOW_STOCK)    +    SUM(T1.NOW_ENTER_PLAN)    -    SUM(T1.NOW_DELIV_PLAN)    +
	                    SUM(T1.PURCH_PLAN1)    -    SUM(T1.SALES_PLAN1)        +    SUM(T1.PURCH_PLAN2)        -
	                    SUM(T1.SALES_PLAN2)    +    SUM(T1.PURCH_PLAN3)        -    SUM(T1.SALES_PLAN3)        +
	                    SUM(T1.PURCH_PLAN4)    -    SUM(T1.SALES_PLAN4)        +    SUM(T1.PURCH_PLAN5)        -
	                    SUM(T1.SALES_PLAN5)    +    SUM(T1.PURCH_PLAN6)        -    SUM(T1.SALES_PLAN6),0)        STOCK_PLAN6
	        FROM    (
	                <!--현재고 안전재고-->
	                SELECT	TO_CHAR(SYSDATE,'YYYY-MM-DD')	NOW_DATE,A.ITEM_ID,
	                        A.LOC_ID,
	                        SUM(A.NOW_STOCK)				NOW_STOCK,
	                        B.SAFETY_STOCK+B.CAMP_STOC+
	                        DECODE(SIGN(SYSDATE-TO_DATE(B.START_DATE,'YYYYMMDD')),-1,0,
	                        DECODE(SIGN(TO_DATE(B.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
	                        NVL(B.SAVE_STOC,0)))        SAFE_STOCK,
	                        0							SALES_MEAN_3WEEK, 
	                        0							SELL_BOX,
	                        0							SALES_PRE_CUM,
	                        0    						NOW_ENTER_PLAN,
	                        0    						NOW_DELIV_PLAN,
	                        0    						PURCH_PLAN1,
	                        0    						PURCH_PLAN2,
	                        0    						PURCH_PLAN3,
	                        0    						PURCH_PLAN4,
	                        0    						PURCH_PLAN5,
	                        0    						PURCH_PLAN6,
	                        0    						SALES_PLAN1,
	                        0    						SALES_PLAN2,
	                        0    						SALES_PLAN3,
	                        0    						SALES_PLAN4,
	                        0    						SALES_PLAN5,
	                        0    						SALES_PLAN6
	                FROM    (
	                        SELECT	SUBSTR(STC.CENTER_CD,5,4)	LOC_ID,
	                                STC.ITEM_CD					ITEM_ID,
	                                SUM(STC.STOCK_QTY)	/	(DECODE (ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))    NOW_STOCK
	                        FROM	LS010NM		STC,
	                        		CMITEM		ITM
	                        WHERE	STC.BRAND_CD			=	'100001'
	                        AND     STC.ITEM_STATE			=	'A'
	                        AND     STC.STOCK_QTY        &lt;&gt;	0
	                        AND     SUBSTR(STC.CENTER_CD,5,4)	LIKE    '%'||'$!{dc_id}'||'%'
	                        AND     STC.ITEM_CD                 LIKE    '%'||'$!{item_id}'||'%'
	                        AND     STC.ITEM_CD				=	ITM.ITEM_CD
	                        AND     ITM.ITEM_DIV			IN	('FERT', 'HAWA')
	                        GROUP	BY	SUBSTR(STC.CENTER_CD, 5, 4),
	                                    STC.ITEM_CD,
	                                    ITM.MIN_UNIT_UOM,
	                                    ITM.BOX_UNIT_QTY
	                        UNION	ALL
	                        SELECT	SUBSTR(STC.CENTER_CD,5,4)	LOC_ID,
	                                STC.ITEM_CD					ITEM_ID,
	                                SUM(STC.STOCK_QTY)	/	(DECODE (ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))    NOW_STOCK
	                        FROM	LS010NM_G	STC,
	                        		CMITEM		ITM
	                        WHERE	STC.BRAND_CD			=	'100001'
	                        AND     STC.ITEM_STATE			=	'A'
	                        AND     STC.STOCK_QTY		&lt;&gt;	0
	                        AND     SUBSTR(STC.CENTER_CD,5,4)	LIKE    '%'||'$!{dc_id}'||'%'
	                        AND     STC.ITEM_CD                 LIKE    '%'||'$!{item_id}'||'%'
	                        AND     STC.ITEM_CD				=	ITM.ITEM_CD
	                        AND     ITM.ITEM_DIV			IN	('FERT', 'HAWA')
	                        GROUP	BY	SUBSTR(STC.CENTER_CD, 5, 4),
	                                    STC.ITEM_CD,
	                                    ITM.MIN_UNIT_UOM,
	                                    ITM.BOX_UNIT_QTY
	                        UNION	ALL
	                        SELECT	SUBSTR(STC.CENTER_CD,5,4) LOC_ID,
	                                STC.ITEM_CD ITEM_ID,
	                                SUM(STC.STOCK_QTY)	/	(DECODE (ITM.MIN_UNIT_UOM,'EA',ITM.BOX_UNIT_QTY,1))    NOW_STOCK
	                        FROM	LS010NM_P	STC,
	                        		CMITEM		ITM
	                        WHERE	STC.BRAND_CD			=	'100001'
	                        AND     STC.ITEM_STATE			=	'A'
	                        AND     STC.STOCK_QTY		&lt;&gt;	0
	                        AND     SUBSTR(STC.CENTER_CD,5,4)	LIKE    '%'||'$!{dc_id}'||'%'
	                        AND     STC.ITEM_CD                 LIKE    '%'||'$!{item_id}'||'%'
	                        AND     STC.ITEM_CD				=	ITM.ITEM_CD
	                        AND     ITM.ITEM_DIV			IN	('FERT', 'HAWA')
	                        GROUP	BY	SUBSTR(STC.CENTER_CD, 5, 4),
	                                    STC.ITEM_CD,
	                                    ITM.MIN_UNIT_UOM,
	                                    ITM.BOX_UNIT_QTY
	                        )	A,
	                        STOCK_POLICY_QTY	B
	                WHERE	A.ITEM_ID			=	B.ITEM_ID(+)
	                AND     A.LOC_ID			=	B.LOC_ID(+)
	                AND     A.LOC_ID			LIKE	'%'||'$!{dc_id}'||'%'
	                AND     A.ITEM_ID			LIKE	'%'||'$!{item_id}'||'%'
	                AND     B.WORK_DATE			=	(
									                SELECT	MAX(WORK_DATE)    
									                FROM	STOCK_POLICY_QTY
									                )
	                GROUP	BY	A.ITEM_ID,A.LOC_ID,B.SAFETY_STOCK,B.CAMP_STOC,B.SAVE_STOC,
	                            B.START_DATE,B.END_DATE
	                UNION	ALL
                	<!--3 주 평균판매 / 전월 실적 /  판매누계-->
                    SELECT	TO_CHAR(SYSDATE,'YYYY-MM-DD')	NOW_DATE,
		                    A.ITEM_ID,
		                    A.DC_ID,
                            0    							NOW_STOCK,
                            0    							SAFE_STOCK,
                            SALES_MEAN_3WEEK				SALES_MEAN_3WEEK,
                            SELL_BOX						SELL_BOX,
                            SALES_PRE_CUM					SALES_PRE_CUM,
                            0    							NOW_ENTER_PLAN,
                            0    							NOW_DELIV_PLAN,
                            0    							PURCH_PLAN1,
                            0    							PURCH_PLAN2,
                            0    							PURCH_PLAN3,
                            0    							PURCH_PLAN4,
                            0    							PURCH_PLAN5,
                            0    							PURCH_PLAN6,
                            0    							SL_ALES_PLAN1,
                            0    							SALES_PLAN2,
                            0    							SALES_PLAN3,
                            0    							SALES_PLAN4,
                            0    							SALES_PLAN5,
                            0    							SALES_PLAN6
                    FROM	DC_DATAWAREHOUSE	A, 
                            (
                            SELECT	SA.ITEM_ID, 
		                            SA.DELIV_LOC, 
		                            SUM(SA.QTY) SELL_BOX
                            FROM	SALES_ACT_RECENT SA, ITEM_MST IM
                            WHERE	SA.ITEM_ID = IM.ITEM_ID
                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
					        AND     SA.SALE_DATE   BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MONTH'),-1)
					                AND        LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MONTH'),-1))
                            GROUP	BY	SA.ITEM_ID, 
                            			SA.DELIV_LOC                            
                            ) SA
                    WHERE	A.DC_ID			=	SA.DELIV_LOC
                    AND     A.ITEM_ID		=	SA.ITEM_ID
                    AND     A.CNFM_DATE		=	TO_CHAR(SYSDATE,'YYYYMMDD')
                    AND     A.DC_ID			LIKE    '%'||'$!{dc_id}'||'%'
                    AND     A.ITEM_ID		LIKE    '%'||'$!{item_id}'||'%'
                    UNION	ALL
	                <!-- 입고 출고 예정-->
	                <!-- 예정은 과거 3일 감안  /  진행은 당일만-->  
	                SELECT	TO_CHAR(SYSDATE,'YYYY-MM-DD')		NOW_DATE,
			                A.ITEM_ID,
			                A.LOC_ID,
	                        0									SAFE_STOCK,
	                        0									SALES_MEAN_3WEEK,
	                        0									SELL_BOX,
	                        0									SALES_PRE_CUM,
	                        0									NOW_STOCK,
	                        SUM(A.ENTER_PLAN)	/	(DECODE (B.MIN_UNIT_UOM,'EA',B.BOX_UNIT_QTY,1))    NOW_ENTER_PLAN,
	                        SUM(A.DELIV_PLAN)	/	(DECODE (B.MIN_UNIT_UOM,'EA',B.BOX_UNIT_QTY,1))    NOW_DELIV_PLAN,
	                        0									PURCH_PLAN1,
	                        0									PURCH_PLAN2,
	                        0									PURCH_PLAN3,
	                        0									PURCH_PLAN4,
	                        0									PURCH_PLAN5,
	                        0									PURCH_PLAN6,
	                        0									SALES_PLAN1,
	                        0									SALES_PLAN2,
	                        0									SALES_PLAN3,
	                        0									SALES_PLAN4,
	                        0									SALES_PLAN5,
	                        0									SALES_PLAN6
	                FROM    (
	                        SELECT	SUBSTR(EEH.CENTER_CD,5,4)	LOC_ID,
	                        		EED.ITEM_CD					ITEM_ID,
	                                EED.ORDER_QTY				ENTER_PLAN,
	                                0							DELIV_PLAN
	                        FROM	LI010NM    EEH,
	                        		LI010ND    EED
	                        WHERE	EEH.CENTER_CD				=	EED.CENTER_CD
	                        AND		EEH.BRAND_CD				=	EED.BRAND_CD
	                        AND		EEH.ORDER_DATE				=	EED.ORDER_DATE
	                        AND		EEH.ORDER_NO				=	EED.ORDER_NO
	                        AND		EEH.BRAND_CD				=	'100001'
	                        AND		EEH.INBOUND_STATE			=	'10'
	                        AND		EED.ITEM_STATE				=	'A'
	                        AND		EED.ORDER_QTY			&lt;&gt;	0
	                        AND		SUBSTR(EEH.CENTER_CD,5,4)	LIKE    '%'||'$!{dc_id}'||'%'
	                        AND		EED.ITEM_CD					LIKE    '%'||'$!{item_id}'||'%'
	                        AND		SUBSTR(EEH.INOUT_CD,1,1)	=	'E'
	                        AND		TO_CHAR (EED.ORDER_DATE, 'YYYYMMDD')	BETWEEN	TO_CHAR(SYSDATE - 3, 'YYYYMMDD')	AND	TO_CHAR(SYSDATE, 'YYYYMMDD')
	                        UNION	ALL
	                        SELECT	SUBSTR(EEH.CENTER_CD,5,4)	LOC_ID,
	                        		EED.ITEM_CD					ITEM_ID,
	                                EED.ORDER_QTY				ENTER_PLAN,
	                                0							DELIV_PLAN
	                        FROM	LI010NM_G	EEH,
	                        		LI010ND_G	EED
	                        WHERE	EEH.CENTER_CD				=	EED.CENTER_CD
	                        AND     EEH.BRAND_CD				=	EED.BRAND_CD
	                        AND     EEH.ORDER_DATE				=	EED.ORDER_DATE
	                        AND     EEH.ORDER_NO				=	EED.ORDER_NO
	                        AND     EEH.BRAND_CD				=	'100001'
	                        AND     EEH.INBOUND_STATE			=	'10'
	                        AND     EED.ITEM_STATE				=	'A'
	                        AND     EED.ORDER_QTY			&lt;&gt;	0
	                        AND     SUBSTR(EEH.CENTER_CD,5,4)	LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     EED.ITEM_CD					LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR(EEH.INOUT_CD,1,1)	=	'E'
	                        AND     TO_CHAR (EED.ORDER_DATE, 'YYYYMMDD')	BETWEEN	TO_CHAR(SYSDATE - 3, 'YYYYMMDD')	AND	TO_CHAR(SYSDATE, 'YYYYMMDD')
	                        UNION	ALL
	                        SELECT	SUBSTR(EEH.CENTER_CD,5,4)	LOC_ID,
	                        		EED.ITEM_CD					ITEM_ID,
	                                EED.ORDER_QTY				ENTER_PLAN,
	                                0							DELIV_PLAN
	                        FROM	LI010NM_P	EEH,
	                        		LI010ND_P	EED
	                        WHERE	EEH.CENTER_CD				=	EED.CENTER_CD
	                        AND     EEH.BRAND_CD				=	EED.BRAND_CD
	                        AND     EEH.ORDER_DATE				=	EED.ORDER_DATE
	                        AND     EEH.ORDER_NO				=	EED.ORDER_NO
	                        AND     EEH.BRAND_CD				=	'100001'
	                        AND     EEH.INBOUND_STATE			=	'10'
	                        AND     EED.ITEM_STATE				=	'A'
	                        AND     EED.ORDER_QTY			&lt;&gt;	0
	                        AND     SUBSTR(EEH.CENTER_CD,5,4)	LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     EED.ITEM_CD					LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR(EEH.INOUT_CD,1,1)	=	'E'
	                        AND     TO_CHAR (EED.ORDER_DATE, 'YYYYMMDD')	BETWEEN	TO_CHAR(SYSDATE - 3, 'YYYYMMDD')	AND	TO_CHAR(SYSDATE, 'YYYYMMDD')
	                        UNION	ALL	                        
	                        SELECT	SUBSTR(ECH.CENTER_CD,5,4)	LOC_ID,
	                        		ECD.ITEM_CD					ITEM_ID,
	                                ECD.ORDER_QTY				ENTER_PLAN,
	                                0							DELIV_PLAN
	                        FROM	LI020NM		ECH,
	                        		LI020ND		ECD
	                        WHERE	ECH.CENTER_CD							=	ECD.CENTER_CD
	                        AND     ECH.BRAND_CD							=	ECD.BRAND_CD
	                        AND     ECH.INBOUND_DATE						=	ECD.INBOUND_DATE
	                        AND     ECH.INBOUND_NO							=	ECD.INBOUND_NO
	                        AND     ECH.BRAND_CD							=	'100001'
	                        AND     ECH.INBOUND_STATE					&gt;	'50'
	                        AND     ECD.ITEM_STATE							=	'A'
	                        AND     ECD.ORDER_QTY        				&lt;&gt;	0
	                        AND     SUBSTR(ECH.CENTER_CD,5,4)			LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     ECD.ITEM_CD							LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR (ECH.INOUT_CD, 1, 1)				=	'E'
	                        AND     TO_CHAR (ECH.INBOUND_DATE,'YYYYMMDD')	= TO_CHAR(SYSDATE, 'YYYYMMDD')
	                        UNION	ALL	                        
	                        SELECT	SUBSTR(ECH.CENTER_CD,5,4)	LOC_ID,
	                        		ECD.ITEM_CD					ITEM_ID,
	                                ECD.ORDER_QTY				ENTER_PLAN,
	                                0							DELIV_PLAN
	                        FROM	LI020NM_G					ECH,
	                        		LI020ND_G					ECD
	                        WHERE	ECH.CENTER_CD							=	ECD.CENTER_CD
	                        AND     ECH.BRAND_CD							=	ECD.BRAND_CD
	                        AND     ECH.INBOUND_DATE						=	ECD.INBOUND_DATE
	                        AND     ECH.INBOUND_NO							=	ECD.INBOUND_NO
	                        AND     ECH.BRAND_CD							=	'100001'
	                        AND     ECH.INBOUND_STATE					&gt;	'50'
	                        AND     ECD.ITEM_STATE							=	'A'
	                        AND     ECD.ORDER_QTY						&lt;&gt;	0
	                        AND     SUBSTR(ECH.CENTER_CD,5,4)				LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     ECD.ITEM_CD                 			LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR (ECH.INOUT_CD, 1, 1)				=	'E'
	                        AND     TO_CHAR (ECH.INBOUND_DATE,'YYYYMMDD')	= TO_CHAR(SYSDATE, 'YYYYMMDD')	                        
	                        UNION	ALL
	                        
	                        SELECT	SUBSTR(ECH.CENTER_CD,5,4)	LOC_ID,
	                        		ECD.ITEM_CD					ITEM_ID,
	                                ECD.ORDER_QTY				ENTER_PLAN,
	                                0							DELIV_PLAN
	                        FROM	LI020NM_P	ECH,
	                        		LI020ND_P	ECD
	                        WHERE	ECH.CENTER_CD							=	ECD.CENTER_CD
	                        AND     ECH.BRAND_CD							=	ECD.BRAND_CD
	                        AND     ECH.INBOUND_DATE						=	ECD.INBOUND_DATE
	                        AND     ECH.INBOUND_NO							=	ECD.INBOUND_NO
	                        AND     ECH.BRAND_CD							=	'100001'
	                        AND     ECH.INBOUND_STATE						&gt;	'50'
	                        AND     ECD.ITEM_STATE							=	'A'
	                        AND     ECD.ORDER_QTY						&lt;&gt;	0
	                        AND     SUBSTR(ECH.CENTER_CD,5,4)			LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     ECD.ITEM_CD							LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR (ECH.INOUT_CD, 1, 1)				=	'E'
	                        AND     TO_CHAR (ECH.INBOUND_DATE,'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')	                        
	                        UNION	ALL	                        
	                        SELECT	SUBSTR(DEH.CENTER_CD,5,4)	LOC_ID,
	                        		DED.ITEM_CD					ITEM_ID,
	                                0							ENTER_PLAN,
	                                DED.ORDER_QTY				DELIV_PLAN
	                        FROM	LO010NM		DEH,
	                        		LO010ND		DED
	                        WHERE	DEH.CENTER_CD							=	DED.CENTER_CD
	                        AND     DEH.BRAND_CD							=	DED.BRAND_CD
	                        AND     DEH.ORDER_DATE							=	DED.ORDER_DATE
	                        AND     DEH.ORDER_NO							=	DED.ORDER_NO
	                        AND     DEH.BRAND_CD							=	'100001'
	                        AND     DEH.OUTBOUND_STATE						=	'10'
	                        AND     DED.ITEM_STATE							=	'A'
	                        AND     DED.ORDER_QTY					&lt;&gt;	0
	                        AND     SUBSTR(DEH.CENTER_CD,5,4)			LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     DED.ITEM_CD							LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR(DEH.INOUT_CD,1,1)				=	'D'
	                        AND     TO_CHAR (DED.ORDER_DATE, 'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')	                        
	                        UNION	ALL
	                        SELECT	SUBSTR(DEH.CENTER_CD,5,4)	LOC_ID,
	                        		DED.ITEM_CD					ITEM_ID,
	                                0							ENTER_PLAN,
	                                DED.ORDER_QTY				DELIV_PLAN
	                        FROM	LO010NM_G	DEH,
	                        		LO010ND_G	DED
	                        WHERE	DEH.CENTER_CD							=	DED.CENTER_CD
	                        AND     DEH.BRAND_CD							=	DED.BRAND_CD
	                        AND     DEH.ORDER_DATE							=	DED.ORDER_DATE
	                        AND     DEH.ORDER_NO							=	DED.ORDER_NO
	                        AND     DEH.BRAND_CD							=	'100001'
	                        AND     DEH.OUTBOUND_STATE						=	'10'
	                        AND     DED.ITEM_STATE							=	'A'
	                        AND     DED.ORDER_QTY						&lt;&gt;	0
	                        AND     SUBSTR(DEH.CENTER_CD,5,4)			LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     DED.ITEM_CD							LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR(DEH.INOUT_CD,1,1)				='D'
	                        AND     TO_CHAR (DED.ORDER_DATE, 'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')	                        
	                        UNION	ALL
	                        
	                        SELECT	SUBSTR(DEH.CENTER_CD,5,4)	LOC_ID,
	                        		DED.ITEM_CD					ITEM_ID,
	                                0							ENTER_PLAN,
	                                DED.ORDER_QTY				DELIV_PLAN
	                        FROM    LO010NM_P	DEH,
	                        		LO010ND_P	DED
	                        WHERE	DEH.CENTER_CD							=	DED.CENTER_CD
	                        AND     DEH.BRAND_CD							=	DED.BRAND_CD
	                        AND     DEH.ORDER_DATE							=	DED.ORDER_DATE
	                        AND     DEH.ORDER_NO							=	DED.ORDER_NO
	                        AND     DEH.BRAND_CD							=	'100001'
	                        AND     DEH.OUTBOUND_STATE						=	'10'
	                        AND     DED.ITEM_STATE							=	'A'
	                        AND     DED.ORDER_QTY						&lt;&gt;	0
	                        AND     SUBSTR(DEH.CENTER_CD,5,4)				LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     DED.ITEM_CD								LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR(DEH.INOUT_CD,1,1)				=	'D'
	                        AND     TO_CHAR (DED.ORDER_DATE, 'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')	                        
	                        UNION	ALL	                        	                        
	                        SELECT	SUBSTR(DCH.CENTER_CD,5,4)	LOC_ID,
	                        		DCD.ITEM_CD					ITEM_ID,
	                                0							ENTER_PLAN,
	                                DCD.ORDER_QTY				DELIV_PLAN
	                        FROM	LO020NM		DCH,
	                        		LO020ND		DCD
	                        WHERE	DCH.CENTER_CD							=	DCD.CENTER_CD
	                        AND     DCH.BRAND_CD							=	DCD.BRAND_CD
	                        AND     DCH.OUTBOUND_DATE						=	DCD.OUTBOUND_DATE
	                        AND     DCH.OUTBOUND_NO							=	DCD.OUTBOUND_NO
	                        AND     DCH.BRAND_CD							=	'100001'
	                        AND     DCH.OUTBOUND_STATE						&gt;	'50'
	                        AND     DCD.ITEM_STATE							=	'A'
	                        AND     DCD.ORDER_QTY						&lt;&gt;	0
	                        AND     SUBSTR(DCH.CENTER_CD,5,4)				LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     DCD.ITEM_CD								LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR (DCH.INOUT_CD, 1, 1)				=	'D'
	                        AND     TO_CHAR (DCH.OUTBOUND_DATE,'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')	                        
	                        UNION	ALL
	                        SELECT	SUBSTR(DCH.CENTER_CD,5,4)	LOC_ID,
	                        		DCD.ITEM_CD					ITEM_ID,
	                                0							ENTER_PLAN,
	                                DCD.ORDER_QTY				DELIV_PLAN
	                        FROM	LO020NM_G	DCH,
	                        		LO020ND_G	DCD
	                        WHERE	DCH.CENTER_CD							=	DCD.CENTER_CD
	                        AND     DCH.BRAND_CD							=	DCD.BRAND_CD
	                        AND     DCH.OUTBOUND_DATE						=	DCD.OUTBOUND_DATE
	                        AND     DCH.OUTBOUND_NO							=	DCD.OUTBOUND_NO
	                        AND     DCH.BRAND_CD							=	'100001'
	                        AND     DCH.OUTBOUND_STATE						&gt;	'50'
	                        AND     DCD.ITEM_STATE							=	'A'
	                        AND     DCD.ORDER_QTY							&lt;&gt;	0
	                        AND     SUBSTR(DCH.CENTER_CD,5,4)				LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     DCD.ITEM_CD								LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR (DCH.INOUT_CD, 1, 1)				=	'D'
	                        AND     TO_CHAR (DCH.OUTBOUND_DATE,'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')
	                        UNION	ALL
	                        
	                        SELECT	SUBSTR(DCH.CENTER_CD,5,4)	LOC_ID,
	                        		DCD.ITEM_CD					ITEM_ID,
	                                0							ENTER_PLAN,
	                                DCD.ORDER_QTY				DELIV_PLAN
	                        FROM    LO020NM_P	DCH,
	                        		LO020ND_P	DCD
	                        WHERE	DCH.CENTER_CD							=	DCD.CENTER_CD
	                        AND     DCH.BRAND_CD							=	DCD.BRAND_CD
	                        AND     DCH.OUTBOUND_DATE						=	DCD.OUTBOUND_DATE
	                        AND     DCH.OUTBOUND_NO							=	DCD.OUTBOUND_NO
	                        AND     DCH.BRAND_CD							=	'100001'
	                        AND     DCH.OUTBOUND_STATE						&gt;	'50'
	                        AND     DCD.ITEM_STATE							=	'A'
	                        AND     DCD.ORDER_QTY						&lt;&gt;	0
	                        AND     SUBSTR(DCH.CENTER_CD,5,4)				LIKE	'%'||'$!{dc_id}'||'%'
	                        AND     DCD.ITEM_CD								LIKE	'%'||'$!{item_id}'||'%'
	                        AND     SUBSTR (DCH.INOUT_CD, 1, 1)				=	'D'
	                        AND     TO_CHAR (DCH.OUTBOUND_DATE,'YYYYMMDD')	=	TO_CHAR(SYSDATE, 'YYYYMMDD')
	                        )	A,
	                        CMITEM	B
	                WHERE	A.ITEM_ID		=	B.ITEM_CD
	                AND		B.ITEM_DIV		IN	('FERT','HAWA')
	                AND		A.LOC_ID		LIKE	'%'||'$!{dc_id}'||'%'
	                AND		A.ITEM_ID		LIKE	'%'||'$!{item_id}'||'%'
	                GROUP	BY	A.ITEM_ID,
				                A.LOC_ID,
				                B.MIN_UNIT_UOM,
				                B.BOX_UNIT_QTY	                
	                UNION	ALL
	                <!--매입 생산 입고 예정-->
	                SELECT	TO_CHAR(SYSDATE,'YYYY-MM-DD')	NOW_DATE,
			                								A.ITEM_ID,
			                								A.LOC_ID,
	                        0								NOW_STOCK,
	                        0								SAFE_STOCK,
	                        0								SALES_MEAN_3WEEK,
	                        0								SELL_BOX,
	                        0								SALES_PRE_CUM,
	                        0								NOW_ENTER_PLAN,
	                        0								NOW_DELIV_PLAN,
	                        DECODE(A.AVAIL_DATE,	TO_CHAR(SYSDATE+1,'YYYY-MM-DD'),SUM(QTY),0)    PURCH_PLAN1,
	                        DECODE(A.AVAIL_DATE,	TO_CHAR(SYSDATE+2,'YYYY-MM-DD'),SUM(QTY),0)    PURCH_PLAN2,
	                        DECODE(A.AVAIL_DATE,	TO_CHAR(SYSDATE+3,'YYYY-MM-DD'),SUM(QTY),0)    PURCH_PLAN3,
	                        DECODE(A.AVAIL_DATE,	TO_CHAR(SYSDATE+4,'YYYY-MM-DD'),SUM(QTY),0)    PURCH_PLAN4,
	                        DECODE(A.AVAIL_DATE,	TO_CHAR(SYSDATE+5,'YYYY-MM-DD'),SUM(QTY),0)    PURCH_PLAN5,
	                        DECODE(A.AVAIL_DATE,	TO_CHAR(SYSDATE+6,'YYYY-MM-DD'),SUM(QTY),0)    PURCH_PLAN6,
	                        0								SALES_PLAN1,
	                        0								SALES_PLAN2,
	                        0								SALES_PLAN3,
	                        0								SALES_PLAN4,
	                        0								SALES_PLAN5,
	                        0								SALES_PLAN6
	                FROM    (
	                        SELECT	A.ITEM_ID,
			                        A.LOC_ID,
			                        TO_CHAR(A.AVAIL_DATE,'YYYY-MM-DD')	AVAIL_DATE,
	                                F_GETCONVBOX(A.ITEM_ID,A.QTY_UOM,SUM(QTY))	QTY
	                        FROM	MAT_STORE_PLAN	A
	                        WHERE	A.IF_DTTM		=	(
								                        SELECT	MAX(IF_DTTM)    
								                        FROM	MAT_STORE_PLAN
								                        )
	                        AND		A.AVAIL_DATE	&gt;	SYSDATE
	                        AND		A.AVAIL_DATE	&lt;=	SYSDATE+6
	                        AND		A.PLANT_ID		=	'1300'
	                        AND		A.LOC_ID		LIKE	'%'||'$!{dc_id}'||'%'
	                        AND		A.ITEM_ID		LIKE	'%'||'$!{item_id}'||'%'
	                        GROUP	BY	A.ITEM_ID,
				                        A.LOC_ID,
				                        A.AVAIL_DATE,
				                        A.QTY_UOM
	                        UNION	ALL
	                        SELECT	T1.ITEM_ID,
			                        T3.DC_ID,
			                        TO_CHAR(T1.START_DTTM,'YYYY-MM-DD'),
	                                DECODE(NVL(SUM(T1.COMPL_QTY),0),0,
	                                    F_GETCONVBOX(T1.ITEM_ID,T1.QTY_UOM,SUM(T1.PO_QTY)),
	                                    F_GETCONVBOX(T1.ITEM_ID,T1.QTY_UOM,SUM(T1.COMPL_QTY)))    QTY
	                        FROM    (
	                                SELECT	K1.*
	                                FROM	ERP_PO	K1,
	                                        (
	                                        SELECT	PO_ID,
	                                                PLANT_ID,
	                                                MAX(IF_DTTM)	IF_DTTM 
	                                        FROM	ERP_PO
	                                        WHERE	TO_CHAR(IF_DTTM,'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE-14,'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD')
	                                        AND		STATUS	&lt;&gt;	'TECO'
	                                        GROUP	BY	PO_ID,
	                                                	PLANT_ID
	                                        )	K2
	                                WHERE	TO_CHAR(K1.IF_DTTM,'YYYYMMDD') BETWEEN TO_CHAR(SYSDATE-14,'YYYYMMDD') AND TO_CHAR(SYSDATE,'YYYYMMDD')
	                                AND		K1.IF_DTTM	= K2.IF_DTTM
	                                AND		K1.PLANT_ID	= K2.PLANT_ID
	                                AND		K1.PO_ID	= K2.PO_ID
	                                AND		TO_CHAR(K1.START_DTTM,'YYYYMMDD')	BETWEEN	TO_CHAR(SYSDATE+1,'YYYYMMDD')	AND	TO_CHAR(SYSDATE+6,'YYYYMMDD')
	                                )			T1,
	                                ITEM_MST	T2,
	                                DC_MST		T3
	                        WHERE	T1.ITEM_ID	= T2.ITEM_ID
	                        AND		T2.ITYPE	IN ('FERT')
	                        AND		T1.PLANT_ID	= T3.PLANT_ID
	                        GROUP	BY	TO_CHAR(T1.START_DTTM,'YYYY-MM-DD'),
				                        T3.DC_ID,
				                        T1.ITEM_ID,
				                        T1.QTY_UOM
	                        UNION	ALL
	                        <!--/* 공장별 마지막 버젼의 계획오더 */-->
	                        SELECT	T1.ITEM_ID,
			                        T5.DC_ID,
			                        TO_CHAR(TO_DATE(T1.START_DATE,'YYYY-MM-DD'),'YYYY-MM-DD'),
	                                SUM(T1.QTY)
	                        FROM	IF_DAILY_SCH_PLAN	T1,
	                                ITEM_MST			T2,
	                                (
	                                 <!--/* 마지막 공정정보 */-->
	                                SELECT	S1.PLANT_ID,
	                                        S1.ITEM_ID,
	                                        S1.PROD_VER,
	                                        MAX(S1.PROC_ID)	PROC_ID
	                                FROM    ITEM_CAPA	S1,
	                                        (
	                                        SELECT	PLANT_ID, 
			                                        ITEM_ID, 
			                                        PROD_VER, 
			                                        MAX(OPER_ID) OPER_ID
	                                        FROM	ITEM_CAPA
	                                        WHERE	ITEM_ID		LIKE	'%'||'$!{item_id}'||'%'
	                                        GROUP	BY	PLANT_ID, 
				                                        ITEM_ID, 
				                                        PROD_VER
	                                        )	S2
	                                WHERE	S1.PLANT_ID		=		S2.PLANT_ID
	                                AND		S1.ITEM_ID		LIKE	'%'||'$!{item_id}'||'%'
	                                AND		S1.ITEM_ID		=		S2.ITEM_ID
	                                AND		S1.PROD_VER		=		S2.PROD_VER
	                                AND		S1.OPER_ID		=		S2.OPER_ID
	                                GROUP	BY	S1.PLANT_ID,
				                                S1.ITEM_ID,
				                                S1.PROD_VER
	                                )	T3,
	                                (
	                                SELECT	PLANT_ID,
	                                        MAX(VERSION)	VER
	                                FROM	IF_DAILY_SCH_PLAN
	                                WHERE	PLAN_KIND	=	'PROD'
	                                AND		START_DATE	&gt;	TO_CHAR(SYSDATE,'YYYYMMDD')
	                                AND		PLAN_DATE	&gt;	TO_CHAR(SYSDATE-3,'YYYYMMDD')
	                                GROUP	BY	PLANT_ID
	                                )		T4,
	                                DC_MST	T5
	                        WHERE	T1.PLAN_KIND		=		'PROD'
	                        AND		VERSION				=		T4.VER
	                        AND		T1.PLANT_ID			=		T4.PLANT_ID
	                        AND		T1.ITEM_ID			LIKE	'%'||'$!{item_id}'||'%'
	                        AND		T1.ITEM_ID			=		T2.ITEM_ID
	                        AND		T2.ITYPE			=		'FERT'
	                        AND		T1.SCH_TYPE			=		'W'
	                        AND		T1.START_DATE	BETWEEN	TO_CHAR(SYSDATE,'YYYYMMDD')	AND	TO_CHAR(SYSDATE+13,'YYYYMMDD')
	                        AND		T1.PLANT_ID			=		T3.PLANT_ID
	                        AND		T1.ITEM_ID			=		T3.ITEM_ID
	                        AND		T1.PROD_VER			=		T3.PROD_VER
	                        AND		T1.PROC_ID			=		T3.PROC_ID
	                        AND		T1.PLANT_ID			=		T5.PLANT_ID
	                        AND		T5.DC_ID			LIKE	'%'||'$!{dc_id}'||'%'
	                        GROUP	BY	TO_CHAR(TO_DATE(T1.START_DATE,'YYYY-MM-DD'),'YYYY-MM-DD'),
				                        T5.DC_ID,
				                        T1.ITEM_ID
	                        )	A
	                GROUP	BY	A.ITEM_ID,
				                A.LOC_ID,
				                A.AVAIL_DATE
	                UNION	ALL
	                <!--판매 계획-->
	                SELECT	TO_CHAR(SYSDATE,'YYYY-MM-DD')	NOW_DATE,
							A.ITEM_ID,
	                		A.DELIV_LOC						LOC_ID,
	                        0								NOW_STOCK,
	                        0								SALES_MEAN_3WEEK,
	                        0								SELL_BOX,
	                        0								SALES_PRE_CUM,
	                        0								SAFE_STOCK,
	                        0								NOW_ENTER_PLAN,
	                        0								NOW_DELIV_PLAN,
	                        0								PURCH_PLAN1,
	                        0								PURCH_PLAN2,
	                        0								PURCH_PLAN3,
	                        0								PURCH_PLAN4,
	                        0								PURCH_PLAN5,
	                        0								PURCH_PLAN6,
	                        DECODE(A.YYYYMMDD,TO_CHAR(SYSDATE+1,'YYYYMMDD'),
	                            SUM(A.NORMAL_QTY+A.PROM_QTY+A.SUPT_QTY+A.SAMP_QTY),0)    SALES_PLAN1,
	                        DECODE(A.YYYYMMDD,TO_CHAR(SYSDATE+2,'YYYYMMDD'),
	                            SUM(A.NORMAL_QTY+A.PROM_QTY+A.SUPT_QTY+A.SAMP_QTY),0)    SALES_PLAN2,
	                        DECODE(A.YYYYMMDD,TO_CHAR(SYSDATE+3,'YYYYMMDD'),
	                            SUM(A.NORMAL_QTY+A.PROM_QTY+A.SUPT_QTY+A.SAMP_QTY),0)    SALES_PLAN3,
	                        DECODE(A.YYYYMMDD,TO_CHAR(SYSDATE+4,'YYYYMMDD'),
	                            SUM(A.NORMAL_QTY+A.PROM_QTY+A.SUPT_QTY+A.SAMP_QTY),0)    SALES_PLAN4,
	                        DECODE(A.YYYYMMDD,TO_CHAR(SYSDATE+5,'YYYYMMDD'),
	                            SUM(A.NORMAL_QTY+A.PROM_QTY+A.SUPT_QTY+A.SAMP_QTY),0)    SALES_PLAN5,
	                        DECODE(A.YYYYMMDD,TO_CHAR(SYSDATE+6,'YYYYMMDD'),
	                            SUM(A.NORMAL_QTY+A.PROM_QTY+A.SUPT_QTY+A.SAMP_QTY),0)    SALES_PLAN6
	                FROM	NFOS_SALES_PLAN_WEEKLY	A
	                WHERE	A.YYYY||VERSION		=	(
									                SELECT	MAX(YYYY||VERSION)    
									                FROM	NFOS_SALES_PLAN_WEEKLY
									                )
	                AND		A.YYYYMMDD		&gt;=	TO_CHAR(SYSDATE+1,'YYYYMMDD')
	                AND		A.YYYYMMDD		&lt;=	TO_CHAR(SYSDATE+6,'YYYYMMDD')
	                AND		A.ITEM_ID		LIKE	'%'||'$!{item_id}'||'%'
	                AND		A.DELIV_LOC		LIKE	'%'||'$!{dc_id}'||'%'
	                GROUP	BY	A.ITEM_ID,
				                A.DELIV_LOC,
				                A.YYYYMMDD
	                )			T1,
	                ITEM_MST	T2,
	                DC_MST		T3 
	        WHERE	T1.ITEM_ID		=		T2.ITEM_ID(+)
	        AND		T1.ITEM_ID		LIKE	'%'||'$!{item_id}'||'%'
	        AND		T1.LOC_ID		LIKE	'%'||'$!{dc_id}'||'%'
	        AND		T1.LOC_ID		=		T3.DC_ID
	        AND		T2.SALES_CAT02	LIKE	'%'||'$!{cat_02}'||'%'
	        AND		T2.ITYPE		IN		('FERT','HAWA')
	        AND		T2.SCM_CHARGE	=		'$!{scm_charge}' <!--2012-11-20 SCM팀 김종환 과장 요청-->
	        AND		T2.ITEM_STATUS	=		'ST'
	        AND		T2.SALES_CAT02	&lt;&gt;	'128'
	        AND		(T2.SELL_STOP_DATE	>	TO_CHAR(SYSDATE,'YYYYMMDD') or T2.SELL_STOP_DATE = '00000000')
	        AND		T2.CAT03		NOT	LIKE	'O%'
	        GROUP	BY	T2.ITEM_ID,
	        			T2.ITEM_NAME,T1.LOC_ID
	        --HAVING    SUM(T1.NOW_STOCK)        &lt;&gt;    0    OR        SUM(T1.SAFE_STOCK)        &lt;&gt;    0
	        ORDER    BY    T2.ITEM_ID,T1.LOC_ID
		#else
			select 
				''T_1	,''T_2	,''T_3	,''T_4	,'0'T_5	,'0'T_6	,'0'T_7	,'0'T_8	,'0'T_9	,'0'T_10	,'0'T_11	,'0'T_12	,'0'T_13	,'0'T_14	,'0'T_15	,'0'T_16	,
				'0'T_17	,'0'T_18	,'0'T_19	,'0'T_20	,'0'T_21	,'0'T_22	,'0'T_23	,'0'T_24	,'0'T_25	,'0'T_26	,'0'T_27	,'0'T_28	,'0'T_29	,'0'T_30
			from dual
		#end         
	</query> 

	<!-- 품목별 재고추이 분석  02 -->  
	<query id="ip_01050_Inventory_plan_analysis_check_item_type" paging="false">
		SELECT ITYPE
		FROM   ITEM_MST
		WHERE  ITEM_ID = '$!{item_id}'
	</query>
	
	
	<query id="ip_01050_inventoryPlanAnalysis_02_list" paging="false">
	#if("$!{in_act_type}" == "01" ) 
		-- 품목별 재고추이 분석  01 일반
		SELECT  F_GET_CODE_NAME('SALES_CAT1', IM.SALES_CAT01)       SALES_CAT01,
			  --F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02)       SALES_CAT02,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,		       
		        NVL(SUM(DW.BASE_STOCK),0)                          																		   "기초재고",		        
                TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK),0,0,ROUND(SUM(DW.BASE_STOCK)/SUM(DW.SALES_MEAN_3WEEK),1)) ,999999999990.9))  "재고일수",
                MAX(IM.PROD_TERM)																										   "유통기한\n경과일수",
                MAX(IM.PROD_TERM_AVG)																										"유통기한\n경과일수",
                MAX(IM.PROD_TERM) * NVL(SUM(DW.BASE_STOCK),0)																			   "경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * NVL(SUM(DW.BASE_STOCK),0)																		   "유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   "유통기한일",
                ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM_AVG),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1)  			"유통기한경과율",
                --MAX(NVL(DWSA.SELL_BOX_CUM,0))+SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))-SUM(NVL(ISSUE_TA,0))-SUM(NVL(ISSUE_WMS,0)) "누계",
                --SUM(DW.SALES_PRE)-SUM(DW.SALES_PRE_TA)      																			   	"전일계",
                --SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)-SUM(ISSUE_TA)-SUM(ISSUE_WMS)      													   	"일계",                
                --NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)-SUM(ISSUE_TA)-SUM(ISSUE_WMS)    						    "누계",
                 --2015-11-11 수출면스낵 및 수출 면,스낵 조회시에는 DW 수출 테이블 데이터를 가져온다. 
                #if ( "$!{search_type}" == "O1020" )  
                NVL(EXP.SALES_PRE,0),
                NVL(EXP.ISSUE,0),
                NVL(EXP.SELL_BOX_CUM,0),
                SUM(DW.PRE_MONTH_SELL)-SUM(DW.PRE_MONTH_SELL_TA) 																		   		"전월계", 
                NVL(SUM(DW.BASE_STOCK),0)  - NVL(EXP.ISSUE,0),
                #elseif ( "$!{search_type}" == "O10" )
                NVL(EXP.SALES_PRE,0),
                NVL(EXP.ISSUE,0),
                NVL(EXP.SELL_BOX_CUM,0),
                SUM(DW.PRE_MONTH_SELL)-SUM(DW.PRE_MONTH_SELL_TA) 																		   		"전월계", 
                NVL(SUM(DW.BASE_STOCK),0)  - NVL(EXP.ISSUE,0),
                #elseif ( "$!{search_type}" == "O20" )
                NVL(EXP.SALES_PRE,0),
                NVL(EXP.ISSUE,0),
                NVL(EXP.SELL_BOX_CUM,0),
                SUM(DW.PRE_MONTH_SELL)-SUM(DW.PRE_MONTH_SELL_TA) 																		   		"전월계", 
                NVL(SUM(DW.BASE_STOCK),0)  - NVL(EXP.ISSUE,0),
                #else                
                SUM(NVL(DW.SALES_PRE,0))-SUM(NVL(DW.SALES_PRE_TA,0))      																   "전일계",	
                SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))-SUM(NVL(ISSUE_TA,0))-SUM(NVL(ISSUE_WMS,0))      						   "일계",
                --"판매누계" 전일까지 판매 누계 + 당일 판매분 추가 //20100701//권용찬//SCM팀 요청 
                MAX(NVL(DWSA.SELL_BOX_CUM,0))+SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))-SUM(NVL(ISSUE_TA,0))-SUM(NVL(ISSUE_WMS,0))  "누계",
                SUM(DW.PRE_MONTH_SELL)-SUM(DW.PRE_MONTH_SELL_TA) 																		   		"전월계",  
                SUM(DW.STOCK_EXPT)                      													 							   		"예상재고",  
                #end          
                SUM(DW.RECEIPT_EXPT)                    																				   		"생산/매입계획",
                NVL(PROD.QTY,0)																													"금주 잔여생산량",
                NVL(NPROD.QTY,0)																												"차주 생산계획량",
              --DECODE(IM.ITYPE, 'FERT', MAX(PO.COMPL_QTY), MAX(DWSP.RECEIPT_EXPT))                          							   
                CASE WHEN IM.CAT03 = 'P40' OR IM.ITYPE = 'FERT' THEN MAX(PO.COMPL_QTY)
                	 ELSE 	MAX(DWSP.RECEIPT_EXPT)
               	END																														   		"생산/매입실적누계",               	
               	 --NVL(MAX(IM.PROD_TERM),0)																	 							   		"생산경과일수",
               	--2014-12-15 이승용 대리 요청 : 가공용품 1,3주 평균은 기타출고 데이터로 나오게
               	#if( "$!{search_type}" == "P40" )
               	CASE 	WHEN MAX(IM.SALES_CAT03) = '125' THEN SUM(DW.SALES_MEAN_1WEEK)
               			ELSE	MAX(DW.GITA_CHGO_MEAN_1WEEK)
               	END																									  					   		"1주평균",
               	CASE 	WHEN MAX(IM.SALES_CAT03) = '125' THEN SUM(DW.SALES_MEAN_3WEEK)
               			ELSE	MAX(DW.GITA_CHGO_MEAN_3WEEK)	
               	END																														   		"3주평균",                
               	#else
                SUM(DW.SALES_MEAN_1WEEK)                    																			   		"1주평균",
                SUM(DW.SALES_MEAN_3WEEK)                    																			   		"3주평균",
                #end               
                SUM(DW.SALES_MEAN_1WEEK)-SUM(DW.SALES_MEAN_3WEEK) 																		   		"1,3주",
                DECODE(SUM(DW.SALES_MEAN_3WEEK),0, 0,
                TRIM(TO_CHAR(
                ROUND(((SUM(DW.SALES_MEAN_1WEEK)/SUM(DW.SALES_MEAN_3WEEK))-1)*100,1),
                999999999990.9)))  																												"편차비율",                
                NVL(SUM(DW.SALES_PY_MON_CUM),0)																							   		"전년동월\n누계",
                (MAX(NVL(DWSA.SELL_BOX_CUM,0))+SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))-SUM(NVL(ISSUE_TA,0))
                -SUM(NVL(ISSUE_WMS,0))) - NVL(SUM(DW.SALES_PY_MON_CUM),0)          														   		"전년동월\n대비", 
                NVL(SUM(SALES_INI_CUM),0)-NVL(SUM(SALES_INI_CUM_TA),0) + (SUM(NVL(DW.ISSUE_EXPT,0))
                 + SUM(NVL(DW.ISSUE,0))-SUM(NVL(ISSUE_TA,0))-SUM(NVL(ISSUE_WMS,0)) ) 															"년누계",
                SUM(SALES_PY_INI_CUM)-SUM(SALES_PY_INI_CUM_TA)              															   		"전년누계",                
                NVL(SUM(SALES_INI_CUM),0)-NVL(SUM(SALES_INI_CUM_TA),0) + (SUM(NVL(DW.ISSUE_EXPT,0))
                 + SUM(NVL(DW.ISSUE,0))-SUM(NVL(ISSUE_TA,0))-SUM(NVL(ISSUE_WMS,0)) )  
                 - (SUM(SALES_PY_INI_CUM)-SUM(SALES_PY_INI_CUM_TA))  																			"전년누계\n대비",
                MAX(SG.GOAL_BOX)                        																				   		"판매목표",
		        DECODE(MAX(SG.GOAL_BOX),0,0,ROUND(SUM(DW.SALES_PRE_CUM)/MAX(SG.GOAL_BOX),3)*100)||'%'        							   		"판매목표달성률",
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.BASE_STOCK)/IM.BOX_PER_PALET)))												   		"기초재고(PALLET)",
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.STOCK_EXPT)/IM.BOX_PER_PALET))) 											  	   		"예상재고(PALLET)",
		        NVL(ROUND((TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND(SUM(DW.BASE_STOCK)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) 
		        ,999999999990.9))	+MAX(IM.PROD_TERM))/ DECODE(MAX(CIM.TERM_VAL * 30 ),0,NULL,MAX(CIM.TERM_VAL * 30))*100,1),0) 				"재고소진완료",
                IM.JGC_DUE_DATE																									   				"장기체화",   
                --- 2015-01-15 노효국 부장 요청 사외창고 추가 (경북,삼보,동양)                             
                NVL(MAX(DW2.BASE_STOCK),0)																								    	"사외창고",
                NVL(REQ.REQT_QTY,0)																										   		"생산의뢰량"                
		FROM    DC_DATAWAREHOUSE DW, 
						--2015-11-10 scm팀 요청으로 일계 전일계 누계는 dw 데이터를 사용한다.
					(
					 SELECT	PROD_CODE,
                    		SUM(ISSUE) ISSUE,
                            SUM(SALES_PRE) SALES_PRE,
                            SUM(SELL_BOX_CUM) SELL_BOX_CUM
                     FROM	(
		                    SELECT	PROD_CODE,
		                    		CASE WHEN YYYYMMDD = TO_CHAR(SYSDATE,'YYYYMMDD')
		                                 THEN SELL_BOX
		                            ELSE 0
		                            END ISSUE,
		                            CASE WHEN YYYYMMDD = TO_CHAR(SYSDATE-1,'YYYYMMDD')
		                                 THEN SELL_BOX
		                            ELSE 0
		                            END SALES_PRE,
		                            SUM(SELL_BOX) SELL_BOX_CUM
		                    FROM	 (
				                    SELECT	yyyymmdd,
									 		PROD_CODE,
									 		sum(sell_box) SELL_BOX
									 FROM 	dwsdf210_dd
							         WHERE 	yyyymmdd BETWEEN '$!{start_date}' AND '$!{end_date}'
							         AND 	sale_gubn='2'
							         GROUP BY yyyymmdd,PROD_CODE
				                     )                     
                     		GROUP BY PROD_CODE,YYYYMMDD,SELL_BOX
                     		)
                   	GROUP BY PROD_CODE
                   	ORDER BY 1
					)EXP,		
				(
				SELECT CNFM_DATE,
                	   ITEM_ID,                    
                	   SUM(BASE_STOCK) BASE_STOCK
                FROM   DC_DATAWAREHOUSE
                WHERE	CNFM_DATE	=	'$!{end_date}'
                AND		DC_ID IN ('1841','1811','1813','8906','8907','8936')   --이포컴, 켈로그 추가 노효국 부장 요청 2015-02-05
                GROUP BY CNFM_DATE, ITEM_ID
                ) DW2,
                (
                SELECT	ITEM_ID,						
						SUM(DECODE(DUE_DATE, TRUNC(TO_DATE('$!{end_date}')+14,'D')-1, NVL(EXPORT_PLAN,0)))	REQT_QTY									
				FROM	PLANT_ALLOC_ITEM_ADJ
				WHERE	VERSION	= (	SELECT	MAX(VERSION) 
									FROM	PLANT_ALLOC_ITEM_ADJ
									WHERE	DUE_DATE	= TRUNC(TO_DATE('$!{end_date}')+14,'D')-1
									)
				--AND		SUBSTR(VERSION,1,8) >= TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D'),'YYYYMMDD')
				AND		DUE_DATE	= TRUNC(TO_DATE('$!{end_date}')+14,'D')-1 						
				GROUP
				BY		ITEM_ID
                )REQ,
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM
                 --       (
                 --       SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                 --       FROM    WMS_STOCK ST, DC_MST DM
                 --       WHERE   ST.LOC_ID = DM.DC_ID
                 --       AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                 --       AND     (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','8914'))
                 --       --HAVING  SUM(QTY) > 0
                 --       GROUP   BY ST.ITEM_ID                        
                 --       ) ST                 
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 --AND    IM.ITEM_ID = ST.ITEM_ID
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 -2011-01-10 : SCM팀 이승용 요청- (원복)
                        -- 그래도 제고 있으면 나와야함  -2011-06-15 : SCM팀 노효국 요청-
                 --       OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N'
                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
				 AND	NOT (IM.MATERIAL_GROUP &gt;= '5K000' AND     IM.MATERIAL_GROUP &lt;= '5S999')
				 #end
				 AND	MATERIAL_GROUP NOT LIKE '62%'
				 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
				#if( "$!{search_type}" == "1020" )
                 AND    IM.DIVISION        IN ('10','20')
                 /* 20140425 정승룡 사원 요청 면/스낵 검색 시 가공품 조회 안되게 수정*/
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%'  
                #elseif( "$!{search_type}" == "10V" )
                 AND    IM.DIVISION        IN ('10')
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                #elseif ( "$!{search_type}" == "310" )
                AND		IM.CAT06 = '310'      
                #elseif ( "$!{search_type}" == "P40" )
                AND		IM.CAT03 = 'P40'
                #elseif ( "$!{search_type}" == "T86" )
                 --	관심품목
                AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
                #elseif ( "$!{search_type}" == "O1020" )
                 -- 수출제품 면
                 AND	IM.DIVISION	IN ('10','20')			
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O10" )
                 -- 수출제품 면
                 AND	IM.DIVISION	= '10'
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O20" )
                 -- 수출제품 스낵
                 AND	IM.DIVISION	= '20'
                 AND	IM.CAT03 LIKE 'O%'                  
                #else
                 AND    IM.DIVISION        = '$!{search_type}'
                 /* 20140425 정승룡 사원 요청 검색 시 가공품 조회 안되게 수정*/
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%'
                #end 
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,
		       (
				/* 매입실적 누계는 FT_BUY(sap입고실적) 에서 가저온다. */
				SELECT  ITEM_CD	ITEM_ID,
				        SUM(BUY_QTY/B.QTY)  RECEIPT_EXPT 
				FROM    FT_BUY A,
		                 (
		                 SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
						#if( "$!{search_type}" == "1020" )
		                 AND    IM.DIVISION        IN ('10','20')
		                #elseif( "$!{search_type}" == "10V" )
              			 AND    IM.DIVISION        IN ('10')
                 		 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                		#elseif ( "$!{search_type}" == "310" )
               			 AND		IM.CAT06 = '310'  
		                #elseif ( "$!{search_type}" == "P40" )
		                AND		IM.CAT03 = 'P40'
		                #elseif ( "$!{search_type}" == "T86" )
              			 --	관심품목
              		     AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
              		    #elseif ( "$!{search_type}" == "O1020" )
              		     -- 수출제품 면
              			AND	IM.DIVISION	IN ('10','20')			
              		    AND	IM.CAT03 LIKE 'O%'
              			#elseif ( "$!{search_type}" == "O10" )
              		     -- 수출제품 면
               			AND	IM.DIVISION	= '10'
               			AND	IM.CAT03 LIKE 'O%'
                		#elseif ( "$!{search_type}" == "O20" )
               		  	 -- 수출제품 스낵
               			AND	IM.DIVISION	= '20'
               			AND	IM.CAT03 LIKE 'O%'               		
		                #else
		                 AND    IM.DIVISION        = '$!{search_type}'
		                #end
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		                 ) B,
						 (
						 SELECT	CAL_DATE
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}'), 'YYYYMMDD')
		        				--"판매계획누계" 전일까지 누계 + 당일분 추가 //20100701//권용찬//SCM팀 요청 
						 )	CAL		                 
 				WHERE   A.ITEM_CD = B.ITEM_ID
				AND     B.ITYPE = 'HAWA'
				AND     A.BUY_DAY = CAL_DATE
				AND     BUY_QTY >0 -- 반품 구매오더 제외
				GROUP BY ITEM_CD		       
		       )DWSP,
		       (
		       SELECT	ITEM_ID,
		       			MAX(QTY)	QTY
		       FROM		(	
		               SELECT   ITEM_ID,
		                        SUM(SHIFT_QTY)	QTY
		               FROM     (
		                       SELECT   DISTINCT   SUBSTR(WO_ID,12,8)	PROD_DATE, WO_ID, SHIFT_QTY, ITEM_ID
		                       FROM     DAILY_SCH_PLAN_SHIFT
		                       WHERE    VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')-5,'YYYYMMDD')||'%'                      
		                       AND      PROD_DATES BETWEEN TO_CHAR(TO_DATE('$!{end_date}')+1,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+7,'YYYYMMDD')
		                       )
		               GROUP
		               BY       ITEM_ID
		               UNION ALL
		               SELECT   ITEM_ID,
		                        SUM(QTY)
		               FROM     IF_SET_PROD_ORDER
		               WHERE    SEQ='10'
		               AND      IDU_FLAG != 'D'
		               AND      START_DATE BETWEEN TO_CHAR(TO_DATE('$!{end_date}')+1,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+7,'YYYYMMDD')
		               GROUP
		               BY       ITEM_ID
		               )
		       GROUP
		       BY		ITEM_ID
               )PROD,
                (
                SELECT	ITEM_ID,
		       			MAX(QTY)	QTY
		       	FROM	(	
		               SELECT   ITEM_ID,
		                        SUM(SHIFT_QTY)	QTY
		               FROM     (
		                       SELECT   DISTINCT   SUBSTR(WO_ID,12,8)	PROD_DATE, WO_ID, SHIFT_QTY, ITEM_ID
		                       FROM     DAILY_SCH_PLAN_SHIFT
		                       WHERE    VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+2,'YYYYMMDD')||'%'                      
		                       AND      PROD_DATES BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+8,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+14,'YYYYMMDD')
		                       )
		               GROUP
		               BY       ITEM_ID
		               UNION ALL
				               SELECT   ITEM_ID,
				                        SUM(QTY)
				               FROM     IF_SET_PROD_ORDER
				               WHERE    SEQ='10'
				               AND      IDU_FLAG != 'D'
				               AND      START_DATE BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+8,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+14,'YYYYMMDD')
				               GROUP
				               BY       ITEM_ID
				       )
				GROUP
				BY		ITEM_ID
               )NPROD,
               (--판매실적 누계
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT_RECENT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
						#if( "$!{search_type}" == "1020" )
		                 AND    IM.DIVISION        IN ('10','20')
		                #elseif( "$!{search_type}" == "10V" )
                		 AND    IM.DIVISION        IN ('10')
               			 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
               			#elseif ( "$!{search_type}" == "310" )
               			 AND		IM.CAT06 = '310'  
		                #elseif ( "$!{search_type}" == "P40" )
		                AND		IM.CAT03 = 'P40'
		                #elseif ( "$!{search_type}" == "T86" )
               			  --	관심품목
             			AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
            			#elseif ( "$!{search_type}" == "O1020" )
            		     -- 수출제품 면
                 		AND	IM.DIVISION	IN ('10','20')			
                 		AND	IM.CAT03 LIKE 'O%'
                		#elseif ( "$!{search_type}" == "O10" )
                 		-- 수출제품 면
              		    AND	IM.DIVISION	= '10'
             		    AND	IM.CAT03 LIKE 'O%'
              		    #elseif ( "$!{search_type}" == "O20" )
                 		-- 수출제품 스낵
                		AND	IM.DIVISION	= '20'
               		  	AND	IM.CAT03 LIKE 'O%'               		 
		                #else
		                 AND    IM.DIVISION        = '$!{search_type}'
		                #end
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID
                --AND      SA.DELIV_LOC    NOT IN ('8901','8902','8903','8913','8914') --판매 실적은 수출도 참조
                AND      SA.SALE_DATE = CAL.YYYYMMDD
                AND		DM.EXPORT_FLAG IS NULL
              	AND		DM.DC_ID NOT IN ('8901','8903','8938')  --CY 재고 제거
              	AND (SA.DELIV_LOC = DM.DC_ID )
              --  AND		 (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','8914'))  2015-09-21 수출창고 재고도 포함 이승용대리요청
                GROUP BY SA.ITEM_ID
               )DWSA,
               (
               SELECT   PO.ITEM_ID, SUM(COMPL_QTY) COMPL_QTY
               FROM     V_ERP_PO_MES PO,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		IN ('FERT', 'HAWA')
						#if( "$!{search_type}" == "1020" )
		                 AND    IM.DIVISION        IN ('10','20')
		                #elseif( "$!{search_type}" == "10V" )
                		 AND    IM.DIVISION        IN ('10')
                		 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
               			 #elseif ( "$!{search_type}" == "310" )
              			  AND		IM.CAT06 = '310'  
		                #elseif ( "$!{search_type}" == "P40" )
		                AND		IM.CAT03 = 'P40'
		                 #elseif ( "$!{search_type}" == "T86" )
               			 AND SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
		                #elseif ( "$!{search_type}" == "O1020" )
		                 -- 수출제품 면
		                 AND	IM.DIVISION	IN ('10','20')
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O10" )
		                 -- 수출제품 면
		                 AND	IM.DIVISION	= '10'
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O20" )
		                 -- 수출제품 스낵
		                 AND	IM.DIVISION	= '20'
		                 AND	IM.CAT03 LIKE 'O%'		               
		                #else
		                 AND    IM.DIVISION        = '$!{search_type}'
		                #end
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	*
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}'), 'YYYYMMDD')
		        				--"판매계획누계" 전일까지 누계 + 당일분 추가 //20100701//권용찬//SCM팀 요청 
                         )    CAL                                    
               WHERE    PO.ITEM_ID = IM.ITEM_ID
               AND      PO.START_DTTM = CAL.CAL_DATE
               GROUP BY PO.ITEM_ID               
               )PO,
		       (-- 영업 목표
                SELECT  PROD_CODE, SUM(GOAL_BOX) GOAL_BOX
                FROM    SDPLT102 SG, ITEM_MST IM,
                        (
                        SELECT	DISTINCT    DEPT_CODE
                        FROM    SDSTT401
                        WHERE   APPL_END_YYMM    = '999912'
                        AND     DEPT_GRAD_CODE    = '40'
                        )    DT
                WHERE   SG.PROD_CODE	=  IM.ITEM_ID
                AND     SG.DEPT_CODE    = DT.DEPT_CODE  		       
				AND		CNFM_YYMM		= TO_CHAR(TO_DATE('$!{end_date}'), 'YYYYMM')
        		AND     (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
				AND		IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
				#if( "$!{search_type}" == "1020" )
                 AND    IM.DIVISION        IN ('10','20')
                #elseif( "$!{search_type}" == "10V" )
                 AND    IM.DIVISION        IN ('10')
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                #elseif ( "$!{search_type}" == "310" )
              	  AND		IM.CAT06 = '310'  
                #elseif ( "$!{search_type}" == "P40" )
                AND		IM.CAT03 = 'P40'
                 #elseif ( "$!{search_type}" == "T86" )
              	  AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
                #elseif ( "$!{search_type}" == "O1020" )
                 -- 수출제품 면
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	IN ('10','20')
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O10" )
                 -- 수출제품 면
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	= '10'
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O20" )
                 -- 수출제품 스낵
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	= '20'
                 AND	IM.CAT03 LIKE 'O%'               
                #else
                 AND    IM.DIVISION        = '$!{search_type}'
                #end
				[AND	(SG.PROD_CODE	LIKE '%'||'$!{search_item}'||'%'
				   OR	IM.ITEM_NAME    LIKE '%'||'$!{search_item}'||'%')]
				GROUP BY PROD_CODE
		       ) SG, DC_MST DM,
		        /* 유통기한경과율 계산을 위한 생산실적 역산계산 */
		       (
		       SELECT	ITEM_ID,
						ROUND(NVL((SUM(QTY*DAY)/DECODE(MAX(CUR_STOCK),0,NULL,MAX(CUR_STOCK))),0),2) RESULT
			   FROM		(
						SELECT	ITEM_ID,		
        						QTY,
        						DAY,        
        						CUR_STOCK
						FROM	(
								SELECT 	S1.ITEM_ID,
										S1.START_DTTM,
        								CASE WHEN MAX(S2.CUR_STOCK) - MAX(S1.PROD_SUM) >= 0
        	 							THEN SUM(QTY)
             							ELSE SUM(QTY)+ MAX(S2.CUR_STOCK) - MAX(S1.PROD_SUM)
             							END	QTY,
        								MAX(S1.PROD_SUM) PROD_SUM,                
        								TRUNC(SYSDATE) - START_DTTM	DAY,
        								MAX(S2.CUR_STOCK)	CUR_STOCK
								FROM	(    
										SELECT	T1.ITEM_ID,
												T1.START_DTTM,
        										SUM(T1.COMPL_QTY) QTY ,
        										SUM(T1.COMPL_QTY) OVER(PARTITION BY T1.ITEM_ID ORDER BY T1.START_DTTM DESC) PROD_SUM            
										FROM	V_ERP_PO_MES T1, ITEM_MST T2
										WHERE	T1.START_DTTM BETWEEN ADD_MONTHS(TRUNC(SYSDATE),-6) AND TO_DATE('$!{end_date}','YYYY-MM-DD')
										AND		T1.ITEM_ID	= T2.ITEM_ID
										AND		T2.ITYPE IN ('FERT','HAWA')
										AND		T2.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
										GROUP
										BY		T1.ITEM_ID, T1.START_DTTM, T1.COMPL_QTY
										)S1,
										(
 										SELECT 	ITEM_ID,
        										SUM(BASE_STOCK)	CUR_STOCK 
										FROM 	DC_DATAWAREHOUSE
										WHERE 	CNFM_DATE = '$!{end_date}'		
										GROUP 
        								BY 		ITEM_ID
										)S2
								WHERE	S1.ITEM_ID	= S2.ITEM_ID
								GROUP
								BY		S1.ITEM_ID,
										S1.START_DTTM       
								)
						WHERE	QTY >= 0
						)
				GROUP BY	ITEM_ID
				ORDER BY	ITEM_ID
		       )MES		     		     	
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND     DW.ITEM_ID      = DWSA.ITEM_ID(+)
		AND		DW.ITEM_ID		= EXP.PROD_CODE(+)
		AND		DW.ITEM_ID		= MES.ITEM_ID(+)	
		AND		DW.ITEM_ID		= REQ.ITEM_ID(+)	
		AND		DW.ITEM_ID		= PROD.ITEM_ID(+)
		AND		DW.ITEM_ID		= NPROD.ITEM_ID(+)
		#if( "$!{checked_button_mt}" == "MTO" )  
		AND		IM.MT_FLAG		= '1'
		#elseif ( "$!{checked_button_mt}" == "MTS" ) 
		AND		IM.MT_FLAG		= '2'
		#end
		AND		DW.ITEM_ID		= DW2.ITEM_ID
		AND		DW.CNFM_DATE	= DW2.CNFM_DATE
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)
		AND     DW.ITEM_ID      = SG.PROD_CODE(+)
		AND		DW.ITEM_ID		= PO.ITEM_ID(+)
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		DM.DC_ID NOT IN ('8901','8903','8938')  --CY 재고 제거
		AND		DM.EXPORT_FLAG IS NULL    --2015-11-30 이승용 요청 CY , DSJ, 동우 대현 제거
		AND     DW.CNFM_DATE	= '$!{end_date}'
		#if ( "$!{search_type}" == "O1020" )  
        HAVING ( SUM(DW.BASE_STOCK) >0 OR EXP.SELL_BOX_CUM > 0 )     
        #elseif ( "$!{search_type}" == "O10" )
        HAVING ( SUM(DW.BASE_STOCK) >0 OR EXP.SELL_BOX_CUM > 0 )
        #elseif ( "$!{search_type}" == "O20" )
        HAVING ( SUM(DW.BASE_STOCK) >0 OR EXP.SELL_BOX_CUM > 0 )
        #else                
        HAVING  SUM(DW.BASE_STOCK) > 0 
        #end		
		GROUP BY  CM.CAT01, SALES_CAT01, SALES_CAT02, SALES_CAT03,  DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03,  BOX_PER_PALET, IM.JGC_DUE_DATE, MES.RESULT, REQ.REQT_QTY,
				  EXP.SALES_PRE,EXP.ISSUE,EXP.SELL_BOX_CUM, PROD.QTY, NPROD.QTY 		
		ORDER BY  IM.SALES_CAT01,  TO_NUMBER(CM.CAT01), SALES_CAT02, SALES_CAT03, DW.ITEM_ID
	#else
		-- 품목별 재고추이 분석  02 타계정포함
		SELECT  F_GET_CODE_NAME('SALES_CAT1', IM.SALES_CAT01)       SALES_CAT01,
			  --F_GET_CODE_NAME('SALES_CAT2', IM.SALES_CAT02)       SALES_CAT02,
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                DW.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,
                NVL(SUM(DW.BASE_STOCK),0)                          																			   		"기초재고",
                TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND(SUM(DW.BASE_STOCK)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9))  	"재고일수",
                MAX(IM.PROD_TERM)																										   			"유통기한\n경과일수",
                MAX(IM.PROD_TERM_AVG)																												"유통기한\n경과일수",
                MAX(IM.PROD_TERM) * NVL(SUM(DW.BASE_STOCK),0)																						"경과일수히든",
                MAX(CIM.TERM_VAL * 30 ) * NVL(SUM(DW.BASE_STOCK),0)																					"유통기한히든",
                MAX(CIM.TERM_VAL * 30 )																									   			"유통기한일",
              --ROUND(DECODE(MAX(CIM.TERM_VAL),0,0,(MAX(IM.PROD_TERM_AVG)/MAX(CIM.TERM_VAL * 30))*100),1) 						   		   				"유통기한경과율",
                ROUND(DECODE(NVL(MAX(CIM.TERM_VAL),0),0,0,(NVL(MAX(IM.PROD_TERM_AVG),0)/NVL(MAX(CIM.TERM_VAL * 30),0))*100),1)  						"유통기한경과율", 
                --2015-11-11 수출면스낵 및 수출 면,스낵 조회시에는 DW 테이블 데이터를 가져온다. 
                #if ( "$!{search_type}" == "O1020" )  
                NVL(EXP.SALES_PRE,0),
                NVL(EXP.ISSUE,0),
                NVL(EXP.SELL_BOX_CUM,0),
                SUM(DW.PRE_MONTH_SELL) 																									   "전월계",
                NVL(SUM(DW.BASE_STOCK),0)  - NVL(EXP.ISSUE,0),
                #elseif ( "$!{search_type}" == "O10" )
                NVL(EXP.SALES_PRE,0),
                NVL(EXP.ISSUE,0),
                NVL(EXP.SELL_BOX_CUM,0),
                SUM(DW.PRE_MONTH_SELL) 																									   "전월계",
                NVL(SUM(DW.BASE_STOCK),0)  - NVL(EXP.ISSUE,0),
                #elseif ( "$!{search_type}" == "O20" )
                NVL(EXP.SALES_PRE,0),
                NVL(EXP.ISSUE,0),
                NVL(EXP.SELL_BOX_CUM,0),
                SUM(DW.PRE_MONTH_SELL) 																									   "전월계",
                NVL(SUM(DW.BASE_STOCK),0)  - NVL(EXP.ISSUE,0),
                #else                
                SUM(DW.SALES_PRE)      																		 							   "전일계",
                SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)      													 							   "일계",               
                NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)    						 							   "누계", 
                SUM(DW.PRE_MONTH_SELL) 																									   "전월계",
                SUM(DW.STOCK_EXPT)                      													 							   "예상재고",  
                #end                  
                SUM(DW.RECEIPT_EXPT)                    																				   "생산/매입계획",
                NVL(PROD.QTY,0)																													"금주 잔여생산량",
                NVL(NPROD.QTY,0)																												"차주 생산계획량",
                --DECODE(IM.ITYPE, 'FERT', MAX(PO.COMPL_QTY), MAX(DWSP.RECEIPT_EXPT))                          							   
                CASE WHEN IM.CAT03 = 'P40' OR IM.ITYPE = 'FERT' THEN MAX(PO.COMPL_QTY)
                	 ELSE 	MAX(DWSP.RECEIPT_EXPT)
               	END																													 	   "생산/매입실적누계",               	
                --NVL(MAX(IM.PROD_TERM),0)																	 							   "생산경과일수",
                --2014-12-15 이승용 대리 요청 : 가공용품 1,3주 평균은 기타출고 데이터로 나오게
               	#if( "$!{search_type}" == "P40" )
               	CASE 	WHEN MAX(IM.SALES_CAT03) = '125' THEN SUM(DW.SALES_MEAN_1WEEK)
               			ELSE	MAX(DW.GITA_CHGO_MEAN_1WEEK)
               	END																									  					   "1주평균",
               	CASE 	WHEN MAX(IM.SALES_CAT03) = '125' THEN SUM(DW.SALES_MEAN_3WEEK)
               			ELSE	MAX(DW.GITA_CHGO_MEAN_3WEEK)	
               	END																														   "3주평균",                
               	#else
                SUM(DW.SALES_MEAN_1WEEK_ETC)                    																		   "1주평균",
                SUM(DW.SALES_MEAN_3WEEK_ETC)                    																		   "3주평균",
                #end
                --"1,3주평균 편차" 신규 칼럼 추가 //20100701//권용찬//SCM팀 요청 
                SUM(DW.SALES_MEAN_1WEEK_ETC)-SUM(DW.SALES_MEAN_3WEEK_ETC)                							 					   "1,3주평균 편차",
                ---"편차비율"
                DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0, 0,
                TRIM(TO_CHAR( 
                ROUND(((SUM(DW.SALES_MEAN_1WEEK_ETC)/SUM(DW.SALES_MEAN_3WEEK_ETC))-1)*100,1) 
                ,999999999990.9)))  																									   "편차비율",
                NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0)											  			   "전년동월\n누계",
                (NVL(MAX(DWSA.SELL_BOX_CUM),0)+SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE))-
                (NVL(SUM(DW.SALES_PY_MON_CUM),0)+NVL(SUM(DW.SALES_PY_MON_CUM_TA),0))													   "전년동월\n대비",
                NVL(SUM(SALES_INI_CUM),0) + SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)              												"년누계",
                SUM(SALES_PY_INI_CUM)              															   								"전년누계",                
                NVL(SUM(SALES_INI_CUM),0) + SUM(DW.ISSUE_EXPT) + SUM(DW.ISSUE)   -  SUM(SALES_PY_INI_CUM) 									"전년누계\n대비",
                MAX(SG.GOAL_BOX)                        																				   "판매목표",
		        DECODE(MAX(SG.GOAL_BOX),0,0,ROUND(SUM(DW.SALES_PRE_CUM)/MAX(SG.GOAL_BOX),3)*100)||'%'        							   "판매목표달성률",
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.BASE_STOCK)/IM.BOX_PER_PALET)))												   "기초재고(PALLET)",
		        DECODE(IM.BOX_PER_PALET,0,0,CEIL((SUM(DW.STOCK_EXPT)/IM.BOX_PER_PALET))) 											  	   "예상재고(PALLET)",
		        NVL(ROUND((TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND(SUM(DW.BASE_STOCK)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9))
                +	  MAX(IM.PROD_TERM))/ DECODE(MAX(CIM.TERM_VAL * 30 ),0,NULL,MAX(CIM.TERM_VAL * 30))*100,1),0) 						   "재고소진완료",
               IM.JGC_DUE_DATE																									   		   "장기체화", 
                --- 2015-01-15 노효국 부장 요청 사외창고 추가 (경북,삼보,동양)                      
               NVL(MAX(DW2.BASE_STOCK),0)																								   "사외창고",
               NVL(REQ.REQT_QTY,0)																										   "생산의뢰량"
		FROM    DC_DATAWAREHOUSE DW, 	
						--2015-11-10 scm팀 요청으로 일계 전일계 누계는 dw 데이터를 사용한다.
					(
					 SELECT	PROD_CODE,
                    		SUM(ISSUE) ISSUE,
                            SUM(SALES_PRE) SALES_PRE,
                            SUM(SELL_BOX_CUM) SELL_BOX_CUM
                     FROM	(
		                    SELECT	PROD_CODE,
		                    		CASE WHEN YYYYMMDD = TO_CHAR(SYSDATE,'YYYYMMDD')
		                                 THEN SELL_BOX
		                            ELSE 0
		                            END ISSUE,
		                            CASE WHEN YYYYMMDD = TO_CHAR(SYSDATE-1,'YYYYMMDD')
		                                 THEN SELL_BOX
		                            ELSE 0
		                            END SALES_PRE,
		                            SUM(SELL_BOX) SELL_BOX_CUM
		                    FROM	 (
				                    SELECT	yyyymmdd,
									 		PROD_CODE,
									 		sum(sell_box) SELL_BOX
									 FROM 	dwsdf210_dd
							         WHERE 	yyyymmdd BETWEEN '$!{start_date}' AND '$!{end_date}'
							         AND 	sale_gubn='2'
							         GROUP BY yyyymmdd,PROD_CODE
				                     )                     
                     		GROUP BY PROD_CODE,YYYYMMDD,SELL_BOX
                     		)
                   	GROUP BY PROD_CODE
                   	ORDER BY 1
					)EXP,					
				(
				SELECT CNFM_DATE,
                	   ITEM_ID,                    
                	   SUM(BASE_STOCK) BASE_STOCK
                FROM   DC_DATAWAREHOUSE
                WHERE	CNFM_DATE	=	'$!{end_date}'
                AND		DC_ID IN ('1841','1811','1813','8906','8907','8936')   --이포컴, 켈로그 추가 노효국 부장 요청 2015-02-05
                GROUP BY CNFM_DATE, ITEM_ID
                ) DW2,
                (
                SELECT	ITEM_ID,						
						SUM(DECODE(DUE_DATE, TRUNC(TO_DATE('$!{end_date}')+14,'D')-1, NVL(EXPORT_PLAN,0)))	REQT_QTY									
				FROM	PLANT_ALLOC_ITEM_ADJ
				WHERE	VERSION	= (	SELECT	MAX(VERSION) 
									FROM	PLANT_ALLOC_ITEM_ADJ
									WHERE	DUE_DATE	= TRUNC(TO_DATE('$!{end_date}')+14,'D')-1
									)
				--AND		SUBSTR(VERSION,1,8) >= TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D'),'YYYYMMDD')
				AND		DUE_DATE	= TRUNC(TO_DATE('$!{end_date}')+14,'D')-1 						
				GROUP
				BY		ITEM_ID
                )REQ,
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM
                 --       (
                 --       SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                 --       FROM    WMS_STOCK ST, DC_MST DM
                 --       WHERE   ST.LOC_ID = DM.DC_ID
                 --       AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                 --       AND     (DM.EXPORT_FLAG IS NULL OR DM.DC_ID IN( '8913','8914'))
                 --       --HAVING  SUM(QTY) > 0
                 --       GROUP   BY ST.ITEM_ID                        
                 --       ) ST  
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 --AND    IM.ITEM_ID = ST.ITEM_ID (+)
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 -2011-01-10 : SCM팀 이승용 요청- (원복)
                        -- 그래도 제고 있으면 나와야함  -2011-06-15 : SCM팀 노효국 요청-
                        --OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N'
                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		         AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
				 AND	NOT (IM.MATERIAL_GROUP &gt;= '5K000' AND     IM.MATERIAL_GROUP &lt;= '5S999')
				 #end
				 AND	MATERIAL_GROUP NOT LIKE '62%'
				 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
				#if( "$!{search_type}" == "1020" )
                 AND    IM.DIVISION        IN ('10','20')
                 /* 20140425 정승룡 사원 요청 면/스낵 검색 시 가공품 조회 안되게 수정*/
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                #elseif( "$!{search_type}" == "10V" )
                 AND    IM.DIVISION        IN ('10')
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                #elseif ( "$!{search_type}" == "310" )
                AND		IM.CAT06 = '310'       
                #elseif ( "$!{search_type}" == "P40" )
                AND		IM.CAT03 = 'P40'
                #elseif ( "$!{search_type}" == "T86" )
             	   AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
				#elseif ( "$!{search_type}" == "O1020" )
                 -- 수출제품 면
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	IN ('10','20')
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O10" )
                 -- 수출제품 면
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	= '10'
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O20" )
                 -- 수출제품 스낵
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	= '20'
                 AND	IM.CAT03 LIKE 'O%'
                #else
                 AND    IM.DIVISION        = '$!{search_type}'
                 /* 20140425 정승룡 사원 요청 검색 시 가공품 조회 안되게 수정*/
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%'
                #end 
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,	
		       (
				/* 매입실적 누계는 FT_BUY(sap입고실적) 에서 가저온다. */
				SELECT  ITEM_CD	ITEM_ID,
						0 SALES_PLAN,
				        SUM(BUY_QTY/B.QTY)  RECEIPT_EXPT 
				FROM    FT_BUY A,
		                 (
		                 SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
						#if( "$!{search_type}" == "1020" )
		                 AND    IM.DIVISION        IN ('10','20')
		                #elseif( "$!{search_type}" == "10V" )
                 			AND    IM.DIVISION        IN ('10')
                 			AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                		#elseif ( "$!{search_type}" == "310" )
                			AND		IM.CAT06 = '310'  
		                #elseif ( "$!{search_type}" == "P40" )
		                AND		IM.CAT03 = 'P40'
		                 #elseif ( "$!{search_type}" == "T86" )
            		    AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
		                #elseif ( "$!{search_type}" == "O1020" )
		                 -- 수출제품 면
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	IN ('10','20')
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O10" )
		                 -- 수출제품 면
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	= '10'
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O20" )
		                 -- 수출제품 스낵
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	= '20'
		                 AND	IM.CAT03 LIKE 'O%'		              
		                #else
		                 AND    IM.DIVISION        = '$!{search_type}'
		                #end
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
		                 ) B,
						 (
						 SELECT	CAL_DATE
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}'), 'YYYYMMDD')
		        				--"판매계획누계" 전일까지 누계 + 당일분 추가 //20100701//권용찬//SCM팀 요청 
						 )	CAL		                 
 				WHERE   A.ITEM_CD = B.ITEM_ID
				AND     B.ITYPE = 'HAWA'
				AND     A.BUY_DAY = CAL_DATE
				AND     BUY_QTY >0 -- 반품 구매오더 제외
				GROUP BY ITEM_CD		       
		       )DWSP,
		       (
               SELECT   ITEM_ID,
                        SUM(SHIFT_QTY)	QTY
               FROM     (
                       SELECT   DISTINCT   SUBSTR(WO_ID,12,8)	PROD_DATE, WO_ID, SHIFT_QTY, ITEM_ID
                       FROM     DAILY_SCH_PLAN_SHIFT
                       WHERE    VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')-5,'YYYYMMDD')||'%'                      
                       AND      PROD_DATES BETWEEN TO_CHAR(TO_DATE('$!{end_date}')+1,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+7,'YYYYMMDD')
                       )
               GROUP
               BY       ITEM_ID
               )PROD,
                (
               SELECT   ITEM_ID,
                        SUM(SHIFT_QTY)	QTY
               FROM     (
                       SELECT   DISTINCT   SUBSTR(WO_ID,12,8)	PROD_DATE, WO_ID, SHIFT_QTY, ITEM_ID
                       FROM     DAILY_SCH_PLAN_SHIFT
                       WHERE    VERSION LIKE TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+2,'YYYYMMDD')||'%'                      
                       AND      PROD_DATES BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+8,'YYYYMMDD') AND TO_CHAR(TRUNC(TO_DATE('$!{end_date}'),'D')+14,'YYYYMMDD')
                       )
               GROUP
               BY       ITEM_ID
               )NPROD,
               (--판매실적 누계 --타계정포함
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
						#if( "$!{search_type}" == "1020" )
		                 AND    IM.DIVISION        IN ('10','20')
		                #elseif( "$!{search_type}" == "10V" )
                		 AND    IM.DIVISION        IN ('10')
                		 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
               			 #elseif ( "$!{search_type}" == "310" )
               			 AND		IM.CAT06 = '310'  
		                #elseif ( "$!{search_type}" == "P40" )
		                AND		IM.CAT03 = 'P40'
		                 #elseif ( "$!{search_type}" == "T86" )
            			    AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
		                #elseif ( "$!{search_type}" == "O1020" )
		                 -- 수출제품 면
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	IN ('10','20')
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O10" )
		                 -- 수출제품 면
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	= '10'
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O20" )
		                 -- 수출제품 스낵
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	= '20'
		                 AND	IM.CAT03 LIKE 'O%'		             
		                #else
		                 AND    IM.DIVISION        = '$!{search_type}'
		                #end
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}')-1, 'YYYYMMDD')
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID
                --AND      SA.DELIV_LOC    NOT IN ('8901','8902','8903','8913','8914') --판매 실적은 수출도 참조
                AND      SA.SALE_DATE = CAL.YYYYMMDD
                AND		 (SA.DELIV_LOC = DM.DC_ID )
                AND		DM.EXPORT_FLAG IS NULL
                AND		DM.DC_ID NOT IN ('8901','8903','8938')  --CY 재고 제거
                GROUP BY SA.ITEM_ID
               )DWSA,
               (
               SELECT   PO.ITEM_ID, SUM(COMPL_QTY) COMPL_QTY
               FROM     V_ERP_PO_MES PO,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		IN ('FERT', 'HAWA')
						#if( "$!{search_type}" == "1020" )
		                 AND    IM.DIVISION        IN ('10','20')
		                #elseif( "$!{search_type}" == "10V" )
                		 AND    IM.DIVISION        IN ('10')
               			  AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
               			 #elseif ( "$!{search_type}" == "310" )
               			 AND		IM.CAT06 = '310'  
		                #elseif ( "$!{search_type}" == "P40" )
		                AND		IM.CAT03 = 'P40'
		                 #elseif ( "$!{search_type}" == "T86" )
              			  AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
		                #elseif ( "$!{search_type}" == "O1020" )
		                 -- 수출제품 면
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	IN ('10','20')
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O10" )
		                 -- 수출제품 면
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	= '10'
		                 AND	IM.CAT03 LIKE 'O%'
		                #elseif ( "$!{search_type}" == "O20" )
		                 -- 수출제품 스낵
		                 AND    IM.ITYPE	= 'FERT'
		                 AND	IM.DIVISION	= '20'
		                 AND	IM.CAT03 LIKE 'O%'		                
		                #else
		                 AND    IM.DIVISION        = '$!{search_type}'
		                #end
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	*
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '$!{start_date}'
		                		AND		TO_CHAR(TO_DATE('$!{end_date}'), 'YYYYMMDD')
		        				--"생산실적누계" 전일까지 누계 + 당일분 추가 //20100701//권용찬//SCM팀 요청 
                         )    CAL                                    
               WHERE    PO.ITEM_ID = IM.ITEM_ID
               AND      PO.START_DTTM = CAL.CAL_DATE
               GROUP BY PO.ITEM_ID               
               )PO,
		       (-- 영업 목표
                SELECT  PROD_CODE, SUM(GOAL_BOX) GOAL_BOX
                FROM    SDPLT102 SG, ITEM_MST IM,
                        (
                        SELECT	DISTINCT    DEPT_CODE
                        FROM    SDSTT401
                        WHERE   APPL_END_YYMM    = '999912'
                        AND     DEPT_GRAD_CODE    = '40'
                        )    DT
                WHERE   SG.PROD_CODE	= IM.ITEM_ID
                AND     SG.DEPT_CODE    = DT.DEPT_CODE  		       
				AND		CNFM_YYMM		= TO_CHAR(TO_DATE('$!{end_date}'), 'YYYYMM')
        		AND     (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
				AND		IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
				#if( "$!{search_type}" == "1020" )
                 AND    IM.DIVISION        IN ('10','20')
                #elseif( "$!{search_type}" == "10V" )
                 AND    IM.DIVISION        IN ('10')
                 AND	IM.ITEM_NAME NOT LIKE '%가공용%' 
                #elseif ( "$!{search_type}" == "310" )
                AND		IM.CAT06 = '310'  
                #elseif ( "$!{search_type}" == "P40" )
                AND		IM.CAT03 = 'P40'
                 #elseif ( "$!{search_type}" == "T86" )
              	  AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
                #elseif ( "$!{search_type}" == "O1020" )
                 -- 수출제품 면
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	IN ('10','20')
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O10" )
                 -- 수출제품 면
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	= '10'
                 AND	IM.CAT03 LIKE 'O%'
                #elseif ( "$!{search_type}" == "O20" )
                 -- 수출제품 스낵
                 AND    IM.ITYPE	= 'FERT'
                 AND	IM.DIVISION	= '20'
                 AND	IM.CAT03 LIKE 'O%'               
                #else
                 AND    IM.DIVISION        = '$!{search_type}'
                #end
				[AND	(SG.PROD_CODE	LIKE '%'||'$!{search_item}'||'%'
				   OR	IM.ITEM_NAME    LIKE '%'||'$!{search_item}'||'%')]
				GROUP BY PROD_CODE
		       ) SG, DC_MST DM,
		       /* 유통기한경과율 계산을 위한 생산실적 역산계산 */
		       (
		       SELECT	ITEM_ID,
						ROUND(NVL((SUM(QTY*DAY)/DECODE(MAX(CUR_STOCK),0,NULL,MAX(CUR_STOCK))),0),2) RESULT
			   FROM		(
						SELECT	ITEM_ID,		
        						QTY,
        						DAY,        
        						CUR_STOCK
						FROM	(
								SELECT 	S1.ITEM_ID,
										S1.START_DTTM,
        								CASE WHEN MAX(S2.CUR_STOCK) - MAX(S1.PROD_SUM) >= 0
        	 							THEN SUM(QTY)
             							ELSE SUM(QTY)+ MAX(S2.CUR_STOCK) - MAX(S1.PROD_SUM)
             							END	QTY,
        								MAX(S1.PROD_SUM) PROD_SUM,                
        								TRUNC(SYSDATE) - START_DTTM	DAY,
        								MAX(S2.CUR_STOCK)	CUR_STOCK
								FROM	(    
										SELECT	T1.ITEM_ID,
												T1.START_DTTM,
        										SUM(T1.COMPL_QTY) QTY ,
        										SUM(T1.COMPL_QTY) OVER(PARTITION BY T1.ITEM_ID ORDER BY T1.START_DTTM DESC) PROD_SUM            
										FROM	V_ERP_PO_MES T1, ITEM_MST T2
										WHERE	T1.START_DTTM BETWEEN ADD_MONTHS(TRUNC(SYSDATE),-6) AND TO_DATE('$!{end_date}','YYYY-MM-DD')
										AND		T1.ITEM_ID	= T2.ITEM_ID
										AND		T2.ITYPE IN ('FERT','HAWA')
										AND		T2.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
										GROUP
										BY		T1.ITEM_ID, T1.START_DTTM, T1.COMPL_QTY
										)S1,
										(
 										SELECT 	ITEM_ID,
        										SUM(BASE_STOCK)	CUR_STOCK 
										FROM 	DC_DATAWAREHOUSE
										WHERE 	CNFM_DATE = '$!{end_date}'		
										GROUP 
        								BY 		ITEM_ID
										)S2
								WHERE	S1.ITEM_ID	= S2.ITEM_ID
								GROUP
								BY		S1.ITEM_ID,
										S1.START_DTTM       
								)
						WHERE	QTY >= 0
						)
				GROUP BY	ITEM_ID
				ORDER BY	ITEM_ID
		       )MES		     
		WHERE   DW.ITEM_ID      = DWSP.ITEM_ID(+)
		AND     DW.ITEM_ID      = DWSA.ITEM_ID(+)
		AND		DW.ITEM_ID		= EXP.PROD_CODE(+)
		AND		DW.ITEM_ID		= MES.ITEM_ID(+)	
		AND		DW.ITEM_ID		= REQ.ITEM_ID(+)	
		AND		DW.ITEM_ID		= DW2.ITEM_ID
		AND		DW.ITEM_ID		= PROD.ITEM_ID(+)
		AND		DW.ITEM_ID		= NPROD.ITEM_ID(+)
		#if( "$!{checked_button_mt}" == "MTO" )  
		AND		IM.MT_FLAG		= '1'
		#elseif ( "$!{checked_button_mt}" == "MTS" ) 
		AND		IM.MT_FLAG		= '2'
		#end
		AND		DW.CNFM_DATE	= DW2.CNFM_DATE
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)
		AND     DW.ITEM_ID      = SG.PROD_CODE(+)
		AND		DW.ITEM_ID		= PO.ITEM_ID(+)
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		DM.DC_ID NOT IN ('8901','8903','8938')  --CY 재고 제거
		AND		DM.EXPORT_FLAG IS NULL    --2015-11-30 이승용 요청 CY , DSJ, 동우 대현 제거		
		AND     DW.CNFM_DATE	= '$!{end_date}'
		#if ( "$!{search_type}" == "O1020" )  
        HAVING ( SUM(DW.BASE_STOCK) >0 OR EXP.SELL_BOX_CUM > 0 )     
        #elseif ( "$!{search_type}" == "O10" )
        HAVING ( SUM(DW.BASE_STOCK) >0 OR EXP.SELL_BOX_CUM > 0 )
        #elseif ( "$!{search_type}" == "O20" )
        HAVING ( SUM(DW.BASE_STOCK) >0 OR EXP.SELL_BOX_CUM > 0 )
        #else                
        HAVING  SUM(DW.BASE_STOCK) > 0 
        #end
		GROUP BY  SALES_CAT01, SALES_CAT02, SALES_CAT03, CM.CAT01, DW.ITEM_ID, IM.ITEM_NAME, IM.ITYPE, IM.SPEC, IM.CAT03, BOX_PER_PALET, IM.JGC_DUE_DATE, MES.RESULT, REQ.REQT_QTY,
					EXP.SALES_PRE,EXP.ISSUE,EXP.SELL_BOX_CUM,PROD.QTY, NPROD.QTY
		ORDER BY  IM.SALES_CAT01,  TO_NUMBER(CM.CAT01), SALES_CAT02, SALES_CAT03, DW.ITEM_ID
	#end	

	</query>
	
	
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list" paging="true">
	SELECT	*
	FROM	(
		SELECT  DECODE(JGC.DIVISION,10,'음료 마케팅팀',20,'상품 마케팅1팀','상품 마케팅2팀'),			
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                JGC.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,		   
		        JGC.STOCK			                          																			   			"장기체화\n발생재고",
		        NVL(JGC.SALES_PRE,0)     																								  			"전일계",
                NVL(JGC.ISSUE,0)       																				   								"일계",   
                MAX(NVL(DWSA.SELL_BOX_CUM,0))+SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))  													"누계",             
                NVL(JGC.SELL_BOX_CUM,0)																												"총누계",
                --CASE WHEN JGC.REMAIN_STOCK &lt; 0
                	 --THEN 0
                	-- ELSE TO_NUMBER(JGC.REMAIN_STOCK)
                --END																																"장기체화\n잔여재고",
                CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END																															"장기체화\n잔여재고",
               	TO_DATE(JGC.EXPIRY_VERSION) - TO_DATE('$!{start_date}')																			    "잔여일수",
               	JGC.EXPIRY_VERSION																													"만기일",
               	JGC.PROD_TERM																										 	   			"유통기한\n경과일수",
		        ROUND(NVL((JGC.PROD_TERM/DECODE(JGC.TERM_VAL,0,NULL,JGC.TERM_VAL)),0),2)*100 						   			  	   				PROD_TERM_RATE,  
		        JGC.DUE_DATE 																														"처리기한",
		        DECODE(JGC.STOCK,0,0,ROUND((NVL(JGC.SELL_BOX_CUM,0)/JGC.STOCK),2)) * 100||'%'														"재고소진율",                
                --JGC.REGISTER_DAY																													"등록경과일",
                TRUNC(SYSDATE) - TO_DATE(JGC.REGISTER_DAY)																							"등록경과일",
		        CASE	WHEN 	 
		        				CASE	WHEN	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END		
										END
         				ELSE	 0		
         		END																																"30%",
    			CASE	WHEN 	 
		        				CASE	WHEN	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"50%",
    			CASE	WHEN 	 
		        				CASE	WHEN	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"80%",
   				CASE	WHEN 	 
		        				CASE	WHEN	(1 * JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(1 * JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(1 * JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(1 * JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"100%",
		        JGC.TERM_VAL																								  			   			"유통기한",		  
		   	    CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) &lt;= 0
		   	    	 THEN 0
		   	    	 ELSE ROUND(( CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END	)/SUM(DW.SALES_MEAN_3WEEK_ETC),0)
		   	    END																														  			"재고일수",
                CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 THEN SUM(DW.SALES_MEAN_3WEEK_ETC)
                	 ELSE 0
                END																							   										"3주평균판매량",
               -- MAX(JGC.CNFM_DATE)																													"일자",
                JGC.REGISTER_DAY																													"등록일"                
		FROM    DC_DATAWAREHOUSE DW,
				JGC_ITEM_STOCK JGC, 				
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM,
                        (
                        SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                        FROM    WMS_STOCK ST, DC_MST DM
                        WHERE   ST.LOC_ID = DM.DC_ID
                        AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                        AND     DM.EXPORT_FLAG IS NULL 
                        --HAVING  SUM(QTY) > 0
                        GROUP   BY ST.ITEM_ID                        
                        ) ST                 
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 AND    IM.ITEM_ID = ST.ITEM_ID (+)
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 
                        -- 그래도 제고 있으면 나와야함 
                        OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N'
				 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,
               (--판매실적 누계 
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품		                
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'					 	
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'MM'),'YYYYMMDD')  --장기체화 품목은 1일부터가 아니라 1월9일부터 누계 시작
		                		AND		TO_CHAR(TO_DATE('$!{start_date}')-1, 'YYYYMMDD')
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID               
                AND      SA.SALE_DATE = CAL.YYYYMMDD
                AND		 SA.DELIV_LOC = DM.DC_ID
                AND		 DM.EXPORT_FLAG IS NULL 
                GROUP BY SA.ITEM_ID
               )DWSA,               
		      DC_MST DM	
		WHERE   DW.ITEM_ID      = DWSA.ITEM_ID(+)	
		AND		DW.CNFM_DATE	= JGC.CNFM_DATE
		AND		IM.ITEM_ID		= JGC.ITEM_ID	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)	  		
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		JGC.STOCK &gt; 0
        #if ( "$!{search_type}" == "00" )
              	-- 장기체화(전체)
             	AND	JGC.DIVISION	IS NOT NULL
               	#elseif ( "$!{search_type}" == "10" )
                -- 장기체화(음료)
                AND	JGC.DIVISION	= '10'
              	#elseif ( "$!{search_type}" == "20" )
                -- 장기체화(상품1)
               	AND	JGC.DIVISION	= '20'       
               	#elseif ( "$!{search_type}" == "30" )
                -- 장기체화(상품2)
                AND	JGC.DIVISION	= '30'
                #else
                 AND    JGC.DIVISION        = '$!{search_type}'
                #end
		AND		DM.EXPORT_FLAG IS NULL 
		AND     DW.CNFM_DATE	= '$!{start_date}'
		AND		JGC.CNFM_DATE 	= '$!{start_date}'
		AND		JGC.SEARCH_FLAG	= 'Y'
		GROUP BY  JGC.DIVISION, SALES_CAT03, JGC.ITEM_ID, JGC.EXPIRY_VERSION, JGC.PROD_TERM, JGC.TERM_VAL, IM.ITEM_NAME, IM.SPEC, JGC.STOCK, JGC.DUE_DATE, JGC.SELL_BOX_CUM, JGC.SALES_PRE, JGC.ISSUE, JGC.REMAIN_STOCK, JGC.REGISTER_DAY		
		ORDER BY  JGC.DIVISION, SALES_CAT03, JGC.ITEM_ID, JGC.EXPIRY_VERSION
		)
	WHERE	PROD_TERM_RATE &gt;= 50
	</query>
	
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list2" paging="true">
	SELECT	*
	FROM	
		(
		SELECT  DECODE(JGC.DIVISION,10,'음료 마케팅팀',20,'상품 마케팅1팀','상품 마케팅2팀'),			
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                JGC.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,		   
		        JGC.STOCK			                          																			   			"장기체화\n발생재고",
		        NVL(JGC.SALES_PRE,0)     																								  			"전일계",
                NVL(JGC.ISSUE,0)       																				   								"일계",
                MAX(NVL(DWSA.SELL_BOX_CUM,0)) + SUM(NVL(DW.ISSUE_EXPT,0)) + SUM(NVL(DW.ISSUE,0))  													"누계",
                NVL(JGC.SELL_BOX_CUM,0)																												"총누계",
                --CASE WHEN JGC.REMAIN_STOCK &lt; 0
                	 --THEN 0
                	-- ELSE TO_NUMBER(JGC.REMAIN_STOCK)
                --END																																"장기체화\n잔여재고",
                CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END																															"장기체화\n잔여재고",
               	TO_DATE(JGC.EXPIRY_VERSION) - TO_DATE('$!{start_date}')																			    "잔여일수",
               	JGC.EXPIRY_VERSION																													"만기일",
               	JGC.PROD_TERM																										 	   			"유통기한\n경과일수",
		        ROUND(NVL((JGC.PROD_TERM/DECODE(JGC.TERM_VAL,0,NULL,JGC.TERM_VAL)),0),2)*100 						   			  	   				PROD_TERM_RATE, 		         
		        JGC.DUE_DATE 																														"처리기한",
		        DECODE(JGC.STOCK,0,0,ROUND((NVL(JGC.SELL_BOX_CUM,0)/JGC.STOCK),2)) * 100||'%'														"재고소진율",                
                --JGC.REGISTER_DAY																													"등록경과일",
                TRUNC(SYSDATE) - TO_DATE(JGC.REGISTER_DAY)																							"등록경과일",
		        CASE	WHEN 	 
		        				CASE	WHEN	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END		
										END
         				ELSE	 0		
         		END																																"30%",
    			CASE	WHEN 	 
		        				CASE	WHEN	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"50%",
    			CASE	WHEN 	 
		        				CASE	WHEN	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"80%",
   				CASE	WHEN 	 
		        				CASE	WHEN	(1 * JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(1 * JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(1 * JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(1 * JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"100%",
		        JGC.TERM_VAL																								  			   			"유통기한",		  
		   	    CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) &lt;= 0
		   	    	 THEN 0
		   	    	 ELSE ROUND(( CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END	)/SUM(DW.SALES_MEAN_3WEEK_ETC),0)
		   	    END																														  			"재고일수",
                CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 THEN SUM(DW.SALES_MEAN_3WEEK_ETC)
                	 ELSE 0
                END																							   										"3주평균판매량",
                MAX(JGC.CNFM_DATE)																													"일자",
                JGC.REGISTER_DAY																													"등록일"                
		FROM    DC_DATAWAREHOUSE DW,
				JGC_ITEM_STOCK JGC, 				
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM,
                        (
                        SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                        FROM    WMS_STOCK ST, DC_MST DM
                        WHERE   ST.LOC_ID = DM.DC_ID
                        AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                        AND     DM.EXPORT_FLAG IS NULL 
                        --HAVING  SUM(QTY) > 0
                        GROUP   BY ST.ITEM_ID                        
                        ) ST                 
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 AND    IM.ITEM_ID = ST.ITEM_ID (+)
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 
                        -- 그래도 제고 있으면 나와야함 
                        OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N'
				 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,
               (--판매실적 누계 
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품		                
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'					 	
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN TO_CHAR(TRUNC(TO_DATE('$!{start_date}'),'MM'),'YYYYMMDD')
		                		AND		TO_CHAR(TO_DATE('$!{start_date}')-1, 'YYYYMMDD')
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID               
                AND      SA.SALE_DATE = CAL.YYYYMMDD
                AND		 SA.DELIV_LOC = DM.DC_ID
                AND		 DM.EXPORT_FLAG IS NULL 
                GROUP BY SA.ITEM_ID
               )DWSA,               
		      DC_MST DM	
		WHERE   DW.ITEM_ID      = DWSA.ITEM_ID(+)	
		AND		DW.CNFM_DATE	= JGC.CNFM_DATE
		AND		IM.ITEM_ID		= JGC.ITEM_ID	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)	  		
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		JGC.STOCK &gt; 0
        #if ( "$!{search_type}" == "00" )
              	-- 장기체화(전체)
             	AND	JGC.DIVISION	IS NOT NULL
               	#elseif ( "$!{search_type}" == "10" )
                -- 장기체화(음료)
                AND	JGC.DIVISION	= '10'
              	#elseif ( "$!{search_type}" == "20" )
                -- 장기체화(상품1)
               	AND	JGC.DIVISION	= '20'       
               	#elseif ( "$!{search_type}" == "30" )
                -- 장기체화(상품2)
                AND	JGC.DIVISION	= '30'
                #else
                 AND    JGC.DIVISION        = '$!{search_type}'
                #end
		AND		DM.EXPORT_FLAG IS NULL 
		AND     DW.CNFM_DATE	= '$!{start_date}'
		AND		JGC.CNFM_DATE 	= '$!{start_date}'
		AND		JGC.SEARCH_FLAG	= 'Y'
		GROUP BY  JGC.DIVISION, SALES_CAT03, JGC.ITEM_ID, JGC.EXPIRY_VERSION, JGC.PROD_TERM, JGC.TERM_VAL, IM.ITEM_NAME, IM.SPEC, JGC.STOCK, JGC.DUE_DATE, JGC.SELL_BOX_CUM, JGC.SALES_PRE, JGC.ISSUE, JGC.REMAIN_STOCK, JGC.REGISTER_DAY		
		ORDER BY  JGC.DIVISION, SALES_CAT03, JGC.ITEM_ID, JGC.EXPIRY_VERSION
		)
	WHERE	PROD_TERM_RATE &lt; 50       
        	
	</query>
	
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list_expert" paging="true">
		
	SELECT	A.SALES_CAT03, 
			A.ITEM_ID,
	        A.ITEM_NAME,
	        A.SPEC,
	        A.MTO_MTS_TYPE,
	        A.BUDU_QTY + A.QTY  				"장기체화 발생재고",
	        A.SALES_PRE,
	        A.ISSUE,
	        A.BUDU_QTY,	        
	        A.QTY								"장기체화 현재재고",							
	        A.START_DTTM,	        
	        A.DAY,
	        A.TERM_VAL,
	        A.TERM_VAL - A.DAY					"유통기한 잔여일",
	        A.PROD_TERM,
	        A.PROD_DTTM,
	        A.STOCK_TERM,
	        A.SALES_MEAN_1WEEK,
	        A.SALES_MEAN_3WEEK,	        
	        A.GYR
	      --  SUM(B.BASE_STOCK)	      	
	FROM	(
			SELECT  F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
	                IM.ITEM_ID,
	                IM.ITEM_NAME,
			        IM.SPEC,
			        PROD.QTY,			        
			        SUM(DW.BASE_STOCK)	BASE_STOCK,
			        TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK),0,0,ROUND(PROD.QTY/SUM(DW.SALES_MEAN_3WEEK),1)) ,999999999990.9))  					STOCK_TERM,
			        MIN(PROD.DAY)																										   				DAY,
			        MAX(CIM.TERM_VAL * 30 )																									   			TERM_VAL,	
			        NVL(MIN(PROD.PROD_TERM),0)																											PROD_TERM,
			        NVL(PROD.SALES_PRE,0)	SALES_PRE,
	                NVL(PROD.ISSUE,0)	ISSUE,
	                SUM(DW.SALES_MEAN_1WEEK)                    																			   			SALES_MEAN_1WEEK,
	                SUM(DW.SALES_MEAN_3WEEK)                    																			   			SALES_MEAN_3WEEK,
	                DECODE(IM.MTO_MTS_TYPE,'0001','MTO','0002','MTS','기타')        																		MTO_MTS_TYPE,
	               	CASE WHEN 	NVL(MIN(PROD.PROD_TERM),0) &lt; 20	
                    	 	THEN 'G'
                         	ELSE CASE WHEN NVL(MIN(PROD.PROD_TERM),0) &gt;= 20	AND  NVL(MIN(PROD.PROD_TERM),0) &lt; 50
                                   	  THEN 'Y'
                                   	  ELSE 'R'
                          	END
                	END																																	GYR,
                	TO_CHAR(PROD.START_DTTM,'YYYY-MM-DD')																								START_DTTM,
                	TO_CHAR(PROD.PROD_DTTM,'YYYY-MM-DD')																								PROD_DTTM,  
                	PROD.BUDU_QTY																														BUDU_QTY
			FROM    DC_DATAWAREHOUSE DW,
					CODE_MST CM,
					CMITEM	CIM,
					(
					SELECT	ITEM_ID,
				    		QTY,
				            DAY,
				            START_DTTM,
				            PROD_DTTM,
				            PROD_TERM,
				            TERM_VAL,
				            SUM(BUDU_QTY) BUDU_QTY,
				            SUM(SALES_PRE)	SALES_PRE,
				            SUM(ISSUE)	ISSUE
				   	FROM	(
 							SELECT	S1.ITEM_ID,
				          			S1.QTY,
				                    S1.DAY,
				                    S1.START_DTTM,
				                    S1.PROD_DTTM,
				                    S1.PROD_TERM,
				                    S1.TERM_VAL,   
				                    CASE WHEN S2.OUTBOUND_DATE >= TO_DATE(S1.START_DTTM) 
				                         THEN S2.INPUT_QTY/S3.BOX_UNIT_QTY
				                         ELSE 0
				                    END BUDU_QTY,
				                    S2.OUTBOUND_DATE,
				                    S2.SALES_PRE,
				                    S2.ISSUE                        
          					FROM	(						                   
				                    SELECT	ITEM_ID,                    	   		
				                           	QTY,
				                       		DAY,       
				                       		START_DTTM,   
				                       		PROD_DTTM,                 
				                       		TERM_VAL,
				                       		NVL(PROD_TERM,0) PROD_TERM ,
				                       		IDX                       
				                    FROM
					                    (
					                    SELECT	ITEM_ID,		
					    						CASE WHEN QTY >=  CUR_STOCK-CY_QTY
					                               	 THEN CUR_STOCK-CY_QTY
					                                 ELSE QTY
					                            END	QTY, 
					    						DAY,  
					    						START_DTTM + (TERM_VAL * 0.2)	START_DTTM,			--장기체화 발생일은 경과율20%
					    						START_DTTM	PROD_DTTM,
					    						RANK() OVER(PARTITION BY ITEM_ID ORDER BY DAY DESC) IDX,
					                            TERM_VAL,
					                            NVL(ROUND(DAY/DECODE(TERM_VAL,0,NULL,TERM_VAL),2)*100,0) PROD_TERM,      
					    						CUR_STOCK
										FROM	(
												SELECT 	S1.ITEM_ID,
														S1.START_DTTM,
					                                    S1.TERM_VAL,
					    								CASE WHEN MAX(S2.CUR_STOCK) - NVL(S3.CUR_STOCK,0) - MAX(S1.PROD_SUM) >= 0
					    	 							THEN SUM(QTY)
					         							ELSE SUM(QTY)+ MAX(S2.CUR_STOCK)- NVL(S3.CUR_STOCK,0) - MAX(S1.PROD_SUM)
					         							END	QTY,
					         							NVL(S3.CUR_STOCK,0)	CY_QTY,
					    								MAX(S1.PROD_SUM) PROD_SUM,                
					    								TRUNC(SYSDATE) - START_DTTM	DAY,
					    								MAX(S2.CUR_STOCK)	CUR_STOCK
												FROM	(    
														SELECT	T1.ITEM_ID,
																T1.START_DTTM,
					                                            T2.TERMVAL * 30 TERM_vAL,
					    										SUM(T1.COMPL_QTY) QTY ,
					    										SUM(T1.COMPL_QTY) OVER(PARTITION BY T1.ITEM_ID ORDER BY T1.START_DTTM DESC) PROD_SUM            
														FROM	V_ERP_PO_MES T1, ITEM_MST T2
														WHERE	T1.START_DTTM BETWEEN ADD_MONTHS(TRUNC(SYSDATE),-12) AND TO_DATE('$!{end_date}','YYYY-MM-DD')
														AND		T1.ITEM_ID	= T2.ITEM_ID                                   
														AND		T2.ITYPE IN ('FERT','HAWA')
														AND     NVL(T2.CAT03,'XX')     LIKE 'O%' --수출품 
														#if ( "$!{search_type}" == "00" )   
										                AND		T2.DIVISION IN('10','20')
										                #elseif ( "$!{search_type}" == "10" )
										                AND		T2.DIVISION = '10'
										                #else
										                AND		T2.DIVISION = '20'
										                #end                              
														AND	(T2.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR T2.SELL_STOP_DATE = '00000000')
														GROUP
														BY		T1.ITEM_ID, T1.START_DTTM, T1.COMPL_QTY, T2.TERMVAL
														)S1,
														(
					 									SELECT 	ITEM_ID,
					        									SUM(BASE_STOCK)	CUR_STOCK 
														FROM 	DC_DATAWAREHOUSE
														WHERE 	CNFM_DATE = '$!{end_date}'                                   
														GROUP 
					        							BY 		ITEM_ID
														)S2,
														(
					 										SELECT 	DC.ITEM_ID,
					        										SUM(DC.BASE_STOCK)	CUR_STOCK 
															FROM 	DC_DATAWAREHOUSE DC, DC_MST DM
															WHERE 	DC.CNFM_DATE = '$!{end_date}'
					                                        AND		DC.DC_ID = DM.DC_ID
					                                        AND		DM.DC_NAME LIKE '%CY%'
					                                        HAVING SUM(DC.BASE_STOCK) > 0
															GROUP 
					        								BY 		DC.ITEM_ID
															)S3															
												WHERE	S1.ITEM_ID	= S2.ITEM_ID (+)
												AND		S1.ITEM_ID  = S3.ITEM_ID (+) 
												GROUP
												BY		S1.ITEM_ID,
														S1.START_DTTM,
					                                    S1.TERM_VAL,
					                                    S3.CUR_STOCK          
												)
										WHERE	QTY &gt; 0					
				                        AND		PROD_SUM -	(
				                        					 CASE WHEN QTY &gt;=  CUR_STOCK-CY_QTY
							                               	 THEN CUR_STOCK-CY_QTY
							                                 ELSE QTY
				                            				 END
				                            				 )	 >= 0
					                    --AND		NVL(ROUND(DAY/DECODE(TERM_VAL,0,NULL,TERM_VAL),2)*100,0) &gt;= 20
					                    ORDER
					                    BY		ITEM_ID
					                    )
					                WHERE	IDX = 1
					                )S1,
					                (
			                    	SELECT	T1.OUTBOUND_DATE,
			                    			CASE WHEN T1.OUTBOUND_DATE = TRUNC(SYSDATE)-1
                                            	 THEN T2.INPUT_QTY/T3.BOX_UNIT_QTY
                                                 ELSE 0
                                            END	 SALES_PRE,
                                            CASE WHEN T1.OUTBOUND_DATE = TRUNC(SYSDATE)
                                            	 THEN T2.INPUT_QTY/T3.BOX_UNIT_QTY
                                                 ELSE 0
                                            END	 ISSUE,
			                    			T2.ITEM_CD,
			                                T1.INOUT_CD,
			                    			T2.INPUT_QTY
			                        FROM	LO020NM T1, 
			                        		LO020ND T2,
			                        		CMITEM	T3
			                        WHERE	T1.OUTBOUND_DATE 	= T2.OUTBOUND_DATE
			                        AND		T1.OUTBOUND_DATE 	BETWEEN TRUNC(SYSDATE,'YY') AND TRUNC(SYSDATE)
			                        AND		T1.REAL_DELIVERY_CD 	IN ('13008901','13008903','13008902')
			                        AND    	T1.CENTER_CD	= T2.CENTER_CD
			                        AND		T2.ITEM_CD		= T3.ITEM_CD
			                        AND		T1.BRAND_CD		= T2.BRAND_CD
			                        AND		T1.OUTBOUND_NO	= T2.OUTBOUND_NO                         
			                        AND		T1.INOUT_CD		= 'D24'
                         			)S2, CMITEM S3
                      		WHERE	S1.ITEM_ID 		= S2.ITEM_CD (+)
                    		AND	  	S1.ITEM_ID 		= S3.ITEM_CD (+)
                    		)
                	GROUP 
                	BY 	ITEM_ID,
			    		QTY,
			            DAY,
			            START_DTTM,
			            PROD_DTTM,
			            PROD_TERM,
			            TERM_VAL			            
	        		)PROD,
					ITEM_MST IM,	                         
					DC_MST DM	
			WHERE   DW.CNFM_DATE	= '$!{end_date}'
			AND		DW.ITEM_ID		= IM.ITEM_ID
			AND		IM.ITEM_ID		= PROD.ITEM_ID(+)
            --AND		IM.PROD_TERM	= PROD.DAY
			AND		IM.ITEM_ID		= CIM.ITEM_CD(+)	  		
			AND     DW.ITEM_ID      = IM.ITEM_ID
			AND		DW.DC_ID		= DM.DC_ID			
			AND		CM.CD			= IM.SALES_CAT03
	        AND		CM.CD_GRP		= 'SALES_CAT3'  
	        #if ( "$!{search_type}" == "00" )   
	        AND		IM.DIVISION IN('10','20')
	     	#elseif ( "$!{search_type}" == "10" )
	        AND		IM.DIVISION = '10'
	      	#else
	        AND		IM.DIVISION = '20'
	       	#end
	        AND     NVL(IM.CAT03,'XX')     LIKE 'O%' --수출품 
	        AND     DM.DC_ID NOT IN ('8901','8902','8903')
	        #if ( "$!{mto_gubn}" == "00" )
	     	#elseif ( "$!{mto_gubn}" == "10" )
	        AND		IM.MTO_MTS_TYPE = '0001'
	      	#else
	        AND		IM.MTO_MTS_TYPE = '0002'
	       	#end
	       	AND		 PROD.QTY > 0
	        HAVING	SUM(DW.BASE_STOCK) > 0
			GROUP 
			BY   	SALES_CAT03,  
					IM.ITEM_ID,
	               	IM.ITEM_NAME,
			        IM.SPEC,
			        IM.MTO_MTS_TYPE,
			        PROD.QTY,
			        PROD.SALES_PRE,
	                PROD.ISSUE,	               
	                PROD.START_DTTM,
	                PROD.BUDU_QTY,
	                PROD.PROD_DTTM
	)A
	#if ( "$!{search_item}" == "" )
	WHERE	A.PROD_TERM &gt;= '20'
	#else   
	WHERE	A.PROD_TERM &gt;= '$!{search_item}'
    #end 
    ORDER
    BY		1,2
	</query>
	
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_summaryReport" paging="true">
		 SELECT	 DECODE(A.DIVISION,10,'음료 마케팅팀',20,'상품 마케팅1팀','상품 마케팅2팀'),
 				 A.SALES_CAT03				"자재그룹", 
                 SUM(A.STOCK)				"장기체화발생재고",
                 SUM(NVL(A.SALES_PRE,0))	"전일계",
                 SUM(NVL(A.ISSUE,0))		"일계",
                 SUM(NVL(A.SELL_BOX_CUM,0))	"누계",
                 SUM(NVL(A.REMAIN_STOCK,0))	"잔여재고",
                 ROUND((SUM(NVL(A.SELL_BOX_CUM,0))/SUM(A.STOCK)),3)*100   "재고소진율",
                 SUM(A.EXPECT_STOCK)							  		  "잔여에상수랑"                 
		 FROM	(	
		 SELECT  JGC.DIVISION 										DIVISION,		
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,               	   
		        JGC.STOCK											STOCK,
		        JGC.SALES_PRE   									SALES_PRE,
                JGC.ISSUE       									ISSUE,
                JGC.SELL_BOX_CUM									SELL_BOX_CUM,
                CASE WHEN (JGC.STOCK - JGC.SELL_BOX_CUM) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - JGC.SELL_BOX_CUM)
                END																																	REMAIN_STOCK,
                DECODE(JGC.STOCK,0,0,ROUND((JGC.SELL_BOX_CUM/JGC.STOCK),2)) * 100||'%'																SELL_RATE, 
                ROUND(NVL((JGC.PROD_TERM/DECODE(JGC.TERM_VAL,0,NULL,JGC.TERM_VAL)),0),2)*100														PROD_TERM_RATE,           
		        --유통기한 경과예상수량 계산식 : (재고일수+유통기한경과일-유통기한)* SUM(DW.SALES_MEAN_3WEEK_ETC)
		        CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) &lt;= 0
		        	 THEN JGC.STOCK - JGC.SELL_BOX_CUM
		        	 ELSE CASE WHEN
		        			(TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND((CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9)) 
		        		   + JGC.PROD_TERM - JGC.TERM_VAL) * SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
		        	 	  THEN (TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND((CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9)) 
		        		   + JGC.PROD_TERM - JGC.TERM_VAL) * SUM(DW.SALES_MEAN_3WEEK_ETC)
		        	      ELSE  0
		        	      END
		        END																															    	EXPECT_STOCK		        
		FROM    DC_DATAWAREHOUSE DW,
				JGC_ITEM_STOCK JGC, 				
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM,
                        (
                        SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                        FROM    WMS_STOCK ST, DC_MST DM
                        WHERE   ST.LOC_ID = DM.DC_ID
                        AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                        AND     DM.EXPORT_FLAG IS NULL 
                        --HAVING  SUM(QTY) > 0
                        GROUP   BY ST.ITEM_ID                        
                        ) ST                 
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 AND    IM.ITEM_ID = ST.ITEM_ID (+)
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 
                        -- 그래도 제고 있으면 나와야함 
                        OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N' 
                 ) IM,                          
		      DC_MST DM	
		WHERE   DW.CNFM_DATE	= JGC.CNFM_DATE
		AND		IM.ITEM_ID		= JGC.ITEM_ID	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)	  		
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		JGC.STOCK &gt; 0
        AND		JGC.DIVISION	IS NOT NULL
        AND		DM.EXPORT_FLAG IS NULL 
		AND     DW.CNFM_DATE	= '$!{start_date}'
		AND		JGC.CNFM_DATE 	= '$!{start_date}'
		AND		JGC.SEARCH_FLAG	= 'Y'
		GROUP BY  JGC.DIVISION, SALES_CAT03, JGC.STOCK, JGC.SELL_BOX_CUM, JGC.SALES_PRE, JGC.ISSUE, JGC.PROD_TERM, JGC.TERM_VAL		
		)A		
		WHERE	PROD_TERM_RATE &gt;= 50		
		GROUP BY A.DIVISION, A.SALES_CAT03
		ORDER BY A.DIVISION, A.SALES_CAT03
	</query>
	
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_summaryReport2" paging="true">
		 SELECT	 DECODE(A.DIVISION,10,'음료 마케팅팀',20,'상품 마케팅1팀','상품 마케팅2팀'),		--판매부진 전
 				 A.SALES_CAT03				"자재그룹", 
                 SUM(A.STOCK)				"장기체화발생재고",
                 SUM(NVL(A.SALES_PRE,0))	"전일계",
                 SUM(NVL(A.ISSUE,0))		"일계",
                 SUM(NVL(A.SELL_BOX_CUM,0))	"누계",
                 SUM(NVL(A.REMAIN_STOCK,0))	"잔여재고",
                 ROUND((SUM(NVL(A.SELL_BOX_CUM,0))/SUM(A.STOCK)),3)*100   "재고소진율",
                 SUM(A.EXPECT_STOCK)							  		  "잔여에상수랑"                 
		 FROM	(	
		 SELECT  JGC.DIVISION 										DIVISION,		
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,               	   
		        JGC.STOCK											STOCK,
		        JGC.SALES_PRE   									SALES_PRE,
                JGC.ISSUE       									ISSUE,
                JGC.SELL_BOX_CUM									SELL_BOX_CUM,
                CASE WHEN (JGC.STOCK - JGC.SELL_BOX_CUM) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - JGC.SELL_BOX_CUM)
                END																																	REMAIN_STOCK,
                DECODE(JGC.STOCK,0,0,ROUND((JGC.SELL_BOX_CUM/JGC.STOCK),2)) * 100||'%'																SELL_RATE, 
                ROUND(NVL((JGC.PROD_TERM/DECODE(JGC.TERM_VAL,0,NULL,JGC.TERM_VAL)),0),2)*100														PROD_TERM_RATE,           
		        --유통기한 경과예상수량 계산식 : (재고일수+유통기한경과일-유통기한)* SUM(DW.SALES_MEAN_3WEEK_ETC)
		        CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) &lt;= 0
		        	 THEN JGC.STOCK - JGC.SELL_BOX_CUM
		        	 ELSE CASE WHEN
		        			(TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND((CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9)) 
		        		   + JGC.PROD_TERM - JGC.TERM_VAL) * SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
		        	 	  THEN (TRIM(TO_CHAR( DECODE(SUM(DW.SALES_MEAN_3WEEK_ETC),0,0,ROUND((CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END)/SUM(DW.SALES_MEAN_3WEEK_ETC),1)) ,999999999990.9)) 
		        		   + JGC.PROD_TERM - JGC.TERM_VAL) * SUM(DW.SALES_MEAN_3WEEK_ETC)
		        	      ELSE  0
		        	      END
		        END																															    	EXPECT_STOCK		        
		FROM    DC_DATAWAREHOUSE DW,
				JGC_ITEM_STOCK JGC, 				
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM,
                        (
                        SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                        FROM    WMS_STOCK ST, DC_MST DM
                        WHERE   ST.LOC_ID = DM.DC_ID
                        AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                        AND     DM.EXPORT_FLAG IS NULL 
                        --HAVING  SUM(QTY) > 0
                        GROUP   BY ST.ITEM_ID                        
                        ) ST                 
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 AND    IM.ITEM_ID = ST.ITEM_ID (+)
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 
                        -- 그래도 제고 있으면 나와야함 
                        OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N' 
                 ) IM,                          
		      DC_MST DM	
		WHERE   DW.CNFM_DATE	= JGC.CNFM_DATE
		AND		IM.ITEM_ID		= JGC.ITEM_ID	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)	  		
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		JGC.STOCK &gt; 0
        AND		JGC.DIVISION	IS NOT NULL
        AND		DM.EXPORT_FLAG IS NULL 
		AND     DW.CNFM_DATE	= '$!{start_date}'
		AND		JGC.CNFM_DATE 	= '$!{start_date}'
		AND		JGC.SEARCH_FLAG	= 'Y'
		GROUP BY  JGC.DIVISION, SALES_CAT03, JGC.STOCK, JGC.SELL_BOX_CUM, JGC.SALES_PRE, JGC.ISSUE, JGC.PROD_TERM, JGC.TERM_VAL		
		)A		
		WHERE	PROD_TERM_RATE &lt; 50		
		GROUP BY A.DIVISION, A.SALES_CAT03
		ORDER BY A.DIVISION, A.SALES_CAT03
	</query>
	
	
	<!-- 장기체 등록 팀 구분 리스트 -->
	<query id="jgc_division_list">
			
			SELECT 	DISTINCT JGC.DIVISION 	DIVISION,
					DECODE(JGC.DIVISION,10,'음료 마케팅팀',20,'상품 마케팅1팀','상품 마케팅2팀') GUBN
			FROM 	JGC_ITEM_STOCK	JGC    , ( SELECT 'TMP' TMP FROM DUAL ) TP <!-- 비정상멈춤 현상 방지 TMP 테이블 조인 -->		
			UNION ALL
			SELECT		'0'		DIVISION,
						'선  택' 	GUBN
            FROM DUAL
  			ORDER 	BY DIVISION           
            
            
         
            			
			
	</query>
	
	<!-- 장기체 등록 품목명 -->
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list_reg_item_name">
			
			SELECT 	F_GET_ITEM_NAME(IM.ITEM_ID)								
			  FROM 	(
			  		SELECT	ITEM_ID
			  		FROM	ITEM_MST
			  		WHERE	ITEM_ID = '$!{item_id}'
			  		)IM
					, ( SELECT 'TMP' TMP FROM DUAL ) TP <!-- 비정상멈춤 현상 방지 TMP 테이블 조인 -->			 
			 
			
	</query>
	
	<!-- 장기체 등록 유통기한 -->
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list_reg_term_val">
			
			SELECT 	TO_NUMBER(IM.TERMVAL*30) - TO_NUMBER(TO_DATE('$!{expiry_version}') - TRUNC(SYSDATE)),
					IM.TERMVAL *30													
			  FROM 	(
			  		SELECT	ITEM_ID,
			  				TERMVAL
			  		FROM	ITEM_MST
			  		WHERE	ITEM_ID = '$!{item_id}'
			  		)IM
					, ( SELECT 'TMP' TMP FROM DUAL ) TP <!-- 비정상멈춤 현상 방지 TMP 테이블 조인 -->			 
			 
			
	</query>
	
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list_excelDown" paging="true">
		
		SELECT  JGC.DIVISION,			
				F_GET_CODE_NAME('SALES_CAT3', IM.SALES_CAT03)       SALES_CAT03,
                JGC.ITEM_ID,
                IM.ITEM_NAME,
		        IM.SPEC,		   
		        JGC.STOCK			                          																			   			"장기체화\n발생재고",
		        NVL(JGC.SALES_PRE,0)     																								  			"전일계",
                NVL(JGC.ISSUE,0)       																				   								"일계",
                NVL(JGC.SELL_BOX_CUM,0)																												"누계",
                --CASE WHEN JGC.REMAIN_STOCK &lt; 0
                	 --THEN 0
                	-- ELSE TO_NUMBER(JGC.REMAIN_STOCK)
                --END																																"장기체화\n잔여재고",
                CASE WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                	 THEN	0
                	 ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                	 END																															"장기체화\n잔여재고",
                DECODE(JGC.STOCK,0,0,ROUND((NVL(JGC.SELL_BOX_CUM,0)/JGC.STOCK),2)) * 100||'%'														"재고소진율",
                TO_DATE(JGC.EXPIRY_VERSION) - TO_DATE('$!{start_date}')																			    "잔여일수",
                TRUNC(SYSDATE) - TO_DATE(JGC.REGISTER_DAY)																							"등록경과일",   
		        CASE	WHEN 	 
		        				CASE	WHEN	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.3*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END		
										END
         				ELSE	 0		
         		END																																"30%",
    			CASE	WHEN 	 
		        				CASE	WHEN	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.5*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"50%",
    			CASE	WHEN 	 
		        				CASE	WHEN	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(0.8*JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"80%",
   				CASE	WHEN 	 
		        				CASE	WHEN	(1 * JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(CASE 	WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								 ) - 
                								(	(1 * JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	0
										END 	> = 0
   		 				THEN  	CASE	WHEN	(1 * JGC.TERM_VAL - JGC.PROD_TERM) > 0
 										THEN	(  CASE WHEN 	(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
                										THEN	0
                										ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
                										END	
                								) - 
                								(	(1 * JGC.TERM_VAL - JGC.PROD_TERM) * 
                									CASE 	WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) > 0
                	 								THEN 	SUM(DW.SALES_MEAN_3WEEK_ETC)
					                				ELSE 0
					                				END
		     									)
										ELSE	CASE 	WHEN (JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0)) &lt; 0
				                	 					THEN	0
				                	 					ELSE	TO_NUMBER(JGC.STOCK - NVL(JGC.SELL_BOX_CUM,0))
				                	 					END	
										END
         				ELSE 0
         		END																																	"100%",
		        JGC.EXPIRY_VERSION																													"만기일",
		        JGC.TERM_VAL																								  			   			"유통기한",
		        JGC.PROD_TERM																										 	   			"유통기한\n경과일수",
		        ROUND(NVL((JGC.PROD_TERM/DECODE(JGC.TERM_VAL,0,NULL,JGC.TERM_VAL)),0),2)*100||'%' 						   			  	   			"유통기한경과율",
		   	    CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) &lt;= 0
		   	    	 THEN 0
		   	    	 ELSE ROUND(JGC.STOCK/SUM(DW.SALES_MEAN_3WEEK_ETC),0)
		   	    END																														  			"재고일수",
                CASE WHEN SUM(DW.SALES_MEAN_3WEEK_ETC) &gt; 0
                	 THEN SUM(DW.SALES_MEAN_3WEEK_ETC)
                	 ELSE 0
                END																							   										"3주평균판매량",              
		        JGC.DUE_DATE 																														"처리기한",
               	MAX(JGC.CNFM_DATE)																													"일자",
                JGC.REGISTER_DAY																													"등록일"
		FROM    DC_DATAWAREHOUSE DW,
				JGC_ITEM_STOCK JGC, 				
				CODE_MST CM,
				CMITEM	CIM,
				 (
                 SELECT IM.*
                 FROM   ITEM_MST IM,
                        (
                        SELECT  ST.ITEM_ID, SUM(ST.QTY) ST_QTY
                        FROM    WMS_STOCK ST, DC_MST DM
                        WHERE   ST.LOC_ID = DM.DC_ID
                        AND     ST.IF_DTTM = (SELECT MAX(ST.IF_DTTM) FROM WMS_STOCK ST)
                        AND     DM.EXPORT_FLAG IS NULL 
                        --HAVING  SUM(QTY) > 0
                        GROUP   BY ST.ITEM_ID                        
                        ) ST                 
                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
                 AND    IM.ITEM_ID = ST.ITEM_ID (+)
                 AND    (
                        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
                        -- 판매계획 종료된 제품 조회 안되게 조치 
                        -- 그래도 제고 있으면 나와야함 
                        OR IM.ITEM_ID = ST.ITEM_ID 
                        )
                 --AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                 AND	IM.SEARCH_FLAG != 'N' 
				 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'
                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
		    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                 ) IM,
               (--판매실적 누계 
                SELECT   SA.ITEM_ID, SUM(SA.QTY) SELL_BOX_CUM
                FROM     SALES_ACT_RECENT SA,
                		 DC_MST DM,
                         (
                         SELECT *
		                 FROM   ITEM_MST IM
		                 WHERE  IM.HR_TY1 NOT LIKE '606006%'
		                 AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                 AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                 #if( "$!{search_type}" != "O1020" &amp;&amp; "$!{search_type}" != "O10" &amp;&amp; "$!{search_type}" != "O20")
		                 AND    NVL(IM.CAT03,'XX')    NOT LIKE 'O%'
		                 #end
		                 AND	IM.ITYPE		LIKE '%'||'$!{item_type}'||'%'					 	
		                [AND    (IM.ITEM_ID		LIKE '%'||'$!{search_item}'||'%'
				    		OR   IM.ITEM_NAME	LIKE '%'||'$!{search_item}'||'%')]
                         ) IM,
                         (
                         SELECT	YYYYMMDD
						 FROM	CAL_MST
						 WHERE	YYYYMMDD BETWEEN '20150109'  --장기체화 품목은 1일부터가 아니라 1월9일부터 누계 시작
		                		AND		TO_CHAR(TO_DATE('$!{start_date}')-1, 'YYYYMMDD')
                         )    CAL                            
                WHERE    SA.ITEM_ID = IM.ITEM_ID               
                AND      SA.SALE_DATE = CAL.YYYYMMDD
                AND		 SA.DELIV_LOC = DM.DC_ID
                AND		 DM.EXPORT_FLAG IS NULL 
                GROUP BY SA.ITEM_ID
               )DWSA,               
		      DC_MST DM	
		WHERE   DW.ITEM_ID      = DWSA.ITEM_ID(+)	
		AND		DW.CNFM_DATE	= JGC.CNFM_DATE
		AND		IM.ITEM_ID		= JGC.ITEM_ID	
		AND		IM.ITEM_ID		= CIM.ITEM_CD(+)	  		
		AND     DW.ITEM_ID      = IM.ITEM_ID
		AND		DW.DC_ID		= DM.DC_ID
		AND		CM.CD			= IM.SALES_CAT03
        AND		CM.CD_GRP		= 'SALES_CAT3'
        AND		JGC.STOCK &gt; 0
        #if ( "$!{search_type}" == "00" )
              	-- 장기체화(전체)
             	AND	JGC.DIVISION	IS NOT NULL
               	#elseif ( "$!{search_type}" == "10" )
                -- 장기체화(음료)
                AND	JGC.DIVISION	= '10'
              	#elseif ( "$!{search_type}" == "20" )
                -- 장기체화(상품1)
               	AND	JGC.DIVISION	= '20'       
               	#elseif ( "$!{search_type}" == "30" )
                -- 장기체화(상품2)
                AND	JGC.DIVISION	= '30'
                #else
                 AND    JGC.DIVISION        = '$!{search_type}'
                #end
		AND		DM.EXPORT_FLAG IS NULL 
		AND     DW.CNFM_DATE	= '$!{start_date}'
		AND		JGC.CNFM_DATE 	= '$!{start_date}'
		AND		JGC.SEARCH_FLAG	= 'Y'
		GROUP BY  JGC.DIVISION, SALES_CAT03, JGC.ITEM_ID, JGC.EXPIRY_VERSION, JGC.PROD_TERM, JGC.TERM_VAL, IM.ITEM_NAME, IM.SPEC, JGC.STOCK, JGC.DUE_DATE, JGC.SELL_BOX_CUM, JGC.SALES_PRE, JGC.ISSUE, JGC.REMAIN_STOCK, JGC.REGISTER_DAY
		ORDER BY  JGC.DIVISION, SALES_CAT03, JGC.ITEM_ID, JGC.EXPIRY_VERSION
		
	</query>
	
	<!-- 1. JGC_ITEM_STOCK : DELETE (기존에 같은 CNFM_DATE의  데이타를 삭제) -->
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list_excel_save_01">
	
		DELETE 	JGC_ITEM_STOCK
		WHERE	CNFM_DATE = TO_CHAR(TO_DATE('$!{start_date}'),'YYYYMMDD')	
		AND		DIVISION  LIKE '%'||'$!{checked_button}'||'%'

		
	</query>
	
	<!-- 2. JGC_ITEM_STOCK : INSERT -->
	<query id="ip_01120_Jgc_inventoryPlanAnalysis_list_excel_save_02" fix="_user_id" 
	iterator="cnfm_date item_id item_name division stock expiry_version due_date prod_term term_val sell_box_cum sales_pre issue stock_remain register_day ">
	
		INSERT  INTO JGC_ITEM_STOCK
                (CNFM_DATE, ITEM_ID, ITEM_NAME, DIVISION, STOCK, EXPIRY_VERSION, PROD_TERM, TERM_VAL, DUE_DATE, MADE_DTTM, MADE_BY, SELL_BOX_CUM, SALES_PRE, ISSUE, REMAIN_STOCK, REGISTER_DAY)
        SELECT  TRIM('$!{cnfm_date}')       CNFM_DATE,     	--일자         
                TRIM('$!{item_id}')        	ITEM_ID,	 	--품목코드
                TRIM('$!{item_name}')       ITEM_NAME,		--품목명
                TRIM('$!{division}')        DIVISION,		--팀구분
                TRIM('$!{stock}')        	STOCK,			--발생재고
                TRIM('$!{expiry_version}')  EXPIRY_VERSION, --만기일
                TRIM('$!{prod_term}')		PROD_TERM,		--경과일수
                TRIM('$!{term_val}')		TERM_VAL,		--유통기한                
                TRIM('$!{due_date}')     	DUE_DATE,		--처리기한
                 SYSDATE                    MADE_DTTM,
                '$!{_user_id}'              MADE_BY,
                TRIM('$!{sell_box_cum}')	SELL_BOX_CUM,	--누계
                TRIM('$!{sales_pre}')		SALES_PRE,		--전일계
                TRIM('$!{issue}')			ISSUE,			--일계
                TRIM('$!{stock_remain}')	REMAIN_STOCK,		--전일계
                TRIM('$!{register_day}')	REGISTER_DAY		--등록일 
        FROM    DUAL
		
	</query>

	<!-- 
	=======================
	  출고사업장별 재고분석
	=======================
	-->
	<!-- 출고사업장별 재고분석  -->  
	<query id="ip_01060_inventoryPlanAnalysis_dc" paging="false">
		SELECT	DECODE(DD,0,DC_ID,'')			DC_ID,
				DECODE(DD,0,DC_NAME,'합계')		DC_NAME,
				SUM(BASE_STOCK)					BASE_STOCK,
				SUM(BASE_PLT) 					BASE_PLT,
				SUM(SALES_PRE_CUM)+SUM(CHGO)	SALES_PRE_CUM, --판매누계 = 전일판매 + 당일판매
				SUM(SALES_PRE)					SALES_PRE,
				SUM(IPGO)						IPGO,
				SUM(CHGO)						CHGO, --출고
				SUM(SS_CHGO)					SS_CHGO, --수송 출고
				SUM(MICH)						MICH, --미출고
		        --
		        NULL                    CHGO_1W,
		        NULL                    CHGO_3W,
		        --
				SUM(EXPT)						EXPT,
				SUM(EXPT_PLT)					EXPT_PLT,
				ROUND(DECODE(SUM(SALES_MEAN_3WEEK),0,0,SUM(BASE_STOCK)/SUM(SALES_MEAN_3WEEK)),1)	TODAY_DAY,
				SUM(CAPA1)						CAPA1, --적재량 (BOX)
				ROUND(DECODE(SUM(CAPA1),0,0,SUM(EXPT)/SUM(CAPA1))*100,1)	CAPA_ENABLE, --적재율(BOX)
				SUM(CAPA2)						CAPA2, --추가적재 가능량(BOX)
				SUM(CAPA1_PL)						CAPA1_PL, --적재량 (PLT)
				ROUND(DECODE(SUM(CAPA1_PL),0,0,SUM(EXPT_PLT)/SUM(CAPA1_PL))*100,1)	CAPA_ENABLE_PL, --적재율(PLT)
				SUM(CAPA2_PL)						CAPA2_PL, --추가적재 가능량(PLT)
				ROUND(DECODE(SUM(SALES_MEAN_3WEEK),0,0,SUM(STOCK_EXPT)/SUM(SALES_MEAN_3WEEK)),1)	NEXT_DAY
		FROM	(
				SELECT  DW.DC_ID,
						DM.DC_SHORT_NAME									  DC_NAME,
						SUM(DW.BASE_STOCK)                                    BASE_STOCK,		--      "기초재고",
						ROUND(SUM(BASE_STOCK/F_GETBOXPERPALLET(DW.DC_ID, IM.ITEM_ID)),1) BASE_PLT, --      "기초PLT",
						SUM(DW.SALES_PRE_CUM)                                 SALES_PRE_CUM, 	--      "판매누계",
						SUM(DW.SALES_PRE)                                     SALES_PRE,		--      "판매일계",
						SUM(DW.RECEIPT_EXPT)+SUM(RECEIPT)                     IPGO,				--      "입고예정",
						SUM(DW.ISSUE_EXPT)+SUM(DW.ISSUE)					  CHGO,				--      "출고예정",
						SUM(TRANS_BOX)										  SS_CHGO,			--      "출고예정",
						MAX(NI_QTY)                                           MICH,				--      "미출고량",
						MAX(DWPT.QTY)                                         EXPT,				--      "예상재고 BOX",
						MAX(DWPT.PLT)                                         EXPT_PLT,			--      "예상재고 PLT",
		                -----------
		                --MAX(CHGO_1W)                                          CHGO_1W,             -- 1주평균 출고량
		                --MAX(CHGO_3W)                                          CHGO_3W,             -- 3주평균 출고량
		                ------------ 
						SUM(SALES_MEAN_3WEEK) SALES_MEAN_3WEEK,
						SUM(STOCK_EXPT)		STOCK_EXPT,
                       #if ( "$!{search_type}" == "02" ) 
		                MAX(DM.KEEPING_CAPA2)                                                                           CAPA1,        --"적재능력(BOX)",
		                ROUND(DECODE(MAX(DWPT.QTY), 0, 0, (MAX(DWPT.QTY)/MAX(DM.KEEPING_CAPA2))*100),1)                 CAPA_ENABLE,--"적재율",
		                MAX(DM.KEEPING_CAPA2)-MAX(DWPT.QTY)                                                             CAPA2,        --"추가적재가능량"
		                MAX(DM.KEEPING_CAPA2_PL)                                                                        CAPA1_PL,        --"적재능력(BOX)",
		                ROUND(DECODE(MAX(DWPT.PLT), 0, 0, (MAX(DWPT.PLT)/MAX(DM.KEEPING_CAPA2_PL))*100),1)              CAPA_ENABLE_PL,--"적재율",
		                MAX(DM.KEEPING_CAPA2_PL)-MAX(DWPT.PLT)                                                          CAPA2_PL        --"추가적재가능량"
                       #else
		                MAX(DM.KEEPING_CAPA1)                                                                           CAPA1,        --"적재능력(BOX)",
		                ROUND(DECODE(MAX(DWPT.QTY), 0, 0, (MAX(DWPT.QTY)/MAX(DM.KEEPING_CAPA1))*100),1)                 CAPA_ENABLE,--"적재율",
		                MAX(DM.KEEPING_CAPA1)-MAX(DWPT.QTY)                                                             CAPA2,        --"추가적재가능량"
		                MAX(DM.KEEPING_CAPA1_PL)                                                                        CAPA1_PL,        --"적재능력(BOX)",
		                ROUND(DECODE(MAX(DWPT.PLT), 0, 0, (MAX(DWPT.PLT)/MAX(DM.KEEPING_CAPA1_PL))*100),1)              CAPA_ENABLE_PL,--"적재율",
		                MAX(DM.KEEPING_CAPA1_PL)-MAX(DWPT.PLT)                                                          CAPA2_PL        --"추가적재가능량"
                       #end
				FROM    DC_DATAWAREHOUSE DW, DC_MST DM,
						(
						SELECT  DC_ID, SUM(QTY) QTY, SUM(PLT) PLT
						FROM(--예상재고 박스 / 파레트
								SELECT  DW.DC_ID, DW.ITEM_ID, SUM(DW.STOCK_EXPT) QTY, 
										ROUND(SUM(DW.STOCK_EXPT)/DECODE(IM.BOX_PER_PALET,0,100,IM.BOX_PER_PALET),1) PLT
								FROM    DC_DATAWAREHOUSE DW, ITEM_MST IM
								WHERE   DW.ITEM_ID		= IM.ITEM_ID(+)
								AND     DW.CNFM_DATE	= '$!{in_cnfm_date}'
								AND		DW.DC_ID	NOT IN ('8901','8902','8903','8913','8914')
								GROUP BY DW.ITEM_ID, DW.DC_ID, IM.BOX_PER_PALET
								)	T1,
								(
								/* 전체(00) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	IN ('FERT','HAWA')
								AND		'00'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 자사생산품 면/스낵 전체(01) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	= 'FERT'
								AND		DIVISION	IN ('10','20')
								AND		'01'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 전체 (백산수 제외)(02) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	IN ('FERT','HAWA')
								AND		'02'	= '$!{search_type}'
								--AND	HR_TY1	NOT LIKE '303001%' -- 삼다수
								AND		HR_TY1	NOT LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04 
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 자사생산품 면/스낵 */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	= 'FERT'
								AND		DIVISION	IN ('10','20')
								AND		DIVISION	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 백산수 (31)*/
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								--WHERE	HR_TY1	LIKE '303001%' -- 삼다수
								WHERE	HR_TY1	LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04 
								AND		ITYPE	= 'HAWA'
								AND		'31'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 기타 (91)*/
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								--WHERE	HR_TY1	NOT LIKE '303001%'
								WHERE	HR_TY1	NOT LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04
								AND		NOT (DIVISION	IN ('10','20') AND ITYPE = 'FERT')
								AND		ITYPE	IN('FERT', 'HAWA')
								AND		'91'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								) IM
								<!--2012-11-15 추가 SCM팀 김종환 과장 요청 
								 (
									SELECT	ITEM_ID 
									FROM	ITEM_MST IM
									WHERE	SCM_CHARGE = '9415038'
									AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
								) IM2
								2012-11-15 추가 SCM팀 김종환 과장 요청 -->
						WHERE	T1.ITEM_ID	= IM.ITEM_ID
						GROUP BY DC_ID       
						)DWPT,
						(--미출고량
						SELECT  A.STOR_CODE DC_ID,  
								SUM(B.REQT_BOX)- SUM(B.SELL_BOX) NI_QTY
						FROM    SDORT101    A, SDORT102    B,
								(
								/* 전체(00) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	IN ('FERT','HAWA')
								AND		'00'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 자사생산품 면/스낵 전체(01) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	= 'FERT'
								AND		DIVISION	IN ('10','20')
								AND		'01'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 전체 (백산수 제외)(02) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	IN ('FERT','HAWA')
								AND		'02'	= '$!{search_type}'
								--AND	HR_TY1	NOT LIKE '303001%' -- 삼다수 
								AND		HR_TY1	NOT LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 자사생산품 면/스낵 */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								WHERE	ITYPE	= 'FERT'
								AND		DIVISION	IN ('10','20')
								AND		DIVISION	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 백산수(31) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								--WHERE	HR_TY1	LIKE '303001%'
								WHERE	HR_TY1	LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04
								AND		ITYPE	= 'HAWA'
								AND		'31'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								UNION	ALL
								/* 기타(91) */
								SELECT	ITEM_ID
								FROM	ITEM_MST IM
								--WHERE	HR_TY1	NOT LIKE '303001%'
								WHERE	HR_TY1	NOT LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04
								AND		NOT (DIVISION	IN ('10','20') AND ITYPE = 'FERT')
								AND		ITYPE	IN('FERT', 'HAWA')
								AND		'91'	= '$!{search_type}'
								AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
								AND		HR_TY1 NOT LIKE '606006%'
								AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
								AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
								) IM
								<!--2012-11-15 추가 SCM팀 김종환 과장 요청 
								 (
									SELECT	ITEM_ID 
									FROM	ITEM_MST IM
									WHERE	SCM_CHARGE = '$!{scm_charge}'
									AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
								) IM2
								2012-11-15 추가 SCM팀 김종환 과장 요청 -->
						WHERE   A.SLIP_NO                       =    B.SLIP_NO
						AND     SUBSTR(A.SLIP_GUBN_CODE,1,2)    = 'YO'
						AND     LENGTH(A.CNFM_DATE)             = 8 
						AND     A.CNFM_DATE                     = '$!{in_cnfm_date}'
						AND		B.PROD_CODE						= IM.ITEM_ID
						HAVING  SUM(B.REQT_BOX)- SUM(B.SELL_BOX) > 0
						GROUP BY A.STOR_CODE
						)NI,
--                        (
--                        /* 1W / 3W 평균 출고량 */
--                        SELECT  DC_ID,
--                                SUM(
--                                CASE
--                                    WHEN RANK &lt;= 6
--                                    THEN ROUND((DW.ISSUE_EXPT + DW.ISSUE + DW.TRANS_BOX)/6)
--                                    ELSE 0
--                                END) CHGO_1W,
--                                SUM(
--                                CASE
--                                    WHEN RANK &lt;= 18
--                                    THEN ROUND((DW.ISSUE_EXPT + DW.ISSUE + DW.TRANS_BOX)/18)
--                                    ELSE 0
--                                END) CHGO_3W
--                        FROM    DC_DATAWAREHOUSE DW,
--                                (
--                                SELECT    YYYYMMDD, RANK
--                                FROM    (
--                                        SELECT    YYYYMMDD, RANK() OVER (ORDER BY YYYYMMDD    DESC) RANK
--                                        FROM    CAL_MST
--                                        WHERE    HOLIDAY_FLAG     IS NULL
--                                        AND        CAL_DATE        &lt; TRUNC(SYSDATE)
--                                        )
--                                WHERE    RANK &lt;= 18                                
--                                ) CAL,
--                                (
--                                /* 전체(00) */
--                                SELECT    ITEM_ID
--                                FROM    ITEM_MST IM
--                                WHERE    ITYPE    IN ('FERT','HAWA')
--                                AND        '00'    = '$!{search_type}'
--                                AND        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
--                                AND        HR_TY1 NOT LIKE '606006%'
--                                AND        IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
--                                AND        NVL(CAT03,'XX')    NOT LIKE 'O%'
--                                UNION    ALL
--                                /* 자사생산품 면/스낵 전체(01) */
--                                SELECT    ITEM_ID
--                                FROM    ITEM_MST IM
--                                WHERE    ITYPE    = 'FERT'
--                                AND        DIVISION    IN ('10','20')
--                                AND        '01'    = '$!{search_type}'
--                                AND        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
--                                AND        HR_TY1 NOT LIKE '606006%'
--                                AND        IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
--                                AND        NVL(CAT03,'XX')    NOT LIKE 'O%'
--                                UNION    ALL
--                                /* 전체 (백산수 제외)(02) */
--                                SELECT    ITEM_ID
--                                FROM    ITEM_MST IM
--                                WHERE    ITYPE    IN ('FERT','HAWA')
--                                AND        '02'    = '$!{search_type}'
--                                AND        HR_TY1    NOT LIKE '303001%' -- 삼다수 
--                                AND        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
--                                AND        HR_TY1 NOT LIKE '606006%'
--                                AND        IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
--                                AND        NVL(CAT03,'XX')    NOT LIKE 'O%'
--                                UNION    ALL
--                                /* 자사생산품 면/스낵 */
--                                SELECT    ITEM_ID
--                                FROM    ITEM_MST IM
--                                WHERE    ITYPE    = 'FERT'
--                                AND        DIVISION    IN ('10','20')
--                                AND        DIVISION    = '$!{search_type}'
--                                AND        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
--                                AND        HR_TY1 NOT LIKE '606006%'
--                                AND        IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
--                                AND        NVL(CAT03,'XX')    NOT LIKE 'O%'
--                                UNION    ALL
--                                /* 백산수(31) */
--                                SELECT    ITEM_ID
--                                FROM    ITEM_MST IM
--                                WHERE    HR_TY1    LIKE '303001%'
--                                AND        ITYPE    = 'HAWA'
--                                AND        '31'    = '$!{search_type}'
--                                AND        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
--                                AND        HR_TY1 NOT LIKE '606006%'
--                                AND        IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
--                                AND        NVL(CAT03,'XX')    NOT LIKE 'O%'
--                                UNION    ALL
--                                /* 기타(91) */
--                                SELECT    ITEM_ID
--                                FROM    ITEM_MST IM
--                                WHERE    HR_TY1    NOT LIKE '303001%'
--                                AND        NOT (DIVISION    IN ('10','20') AND ITYPE = 'FERT')
--                                AND        ITYPE    IN('FERT', 'HAWA')
--                                AND        '91'    = '$!{search_type}'
--                                AND        (IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
--                                AND        HR_TY1 NOT LIKE '606006%'
--                                AND        IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
--                                AND        NVL(CAT03,'XX')    NOT LIKE 'O%'
--                                ) IM
--                        WHERE   CNFM_DATE = CAL.YYYYMMDD
--                        AND     DW.ITEM_ID = IM.ITEM_ID
--                        AND     DW.DC_ID = '7100'
--                        GROUP BY DW.DC_ID
--                        )CHGO,
						(
						/* 전체(00) */
						SELECT	ITEM_ID
						FROM	ITEM_MST IM
						WHERE	ITYPE	IN ('FERT','HAWA')
						AND		'00'	= '$!{search_type}'
						AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
						AND		HR_TY1 NOT LIKE '606006%'
						AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
						AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
						UNION	ALL
						/* 자사생산품 면/스낵 전체(01) */
						SELECT	ITEM_ID
						FROM	ITEM_MST IM
						WHERE	ITYPE	= 'FERT'
						AND		DIVISION	IN ('10','20')
						AND		'01'	= '$!{search_type}'
						AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
						AND		HR_TY1 NOT LIKE '606006%'
						AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
						AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
						UNION	ALL
						/* 전체 (백산수 제외)(02) */
						SELECT	ITEM_ID
						FROM	ITEM_MST IM
						WHERE	ITYPE	IN ('FERT','HAWA')
						AND		'02'	= '$!{search_type}'
						--AND	HR_TY1	NOT LIKE '303001%' -- 삼다수
						AND		HR_TY1	NOT LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04 
						AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
						AND		HR_TY1 NOT LIKE '606006%'
						AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
						AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
						UNION	ALL
						/* 자사생산품 면/스낵 */
						SELECT	ITEM_ID
						FROM	ITEM_MST IM
						WHERE	ITYPE	= 'FERT'
						AND		DIVISION	IN ('10','20')
						AND		DIVISION	= '$!{search_type}'
						AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
						AND		HR_TY1 NOT LIKE '606006%'
						AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
						AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
						UNION	ALL
						/* 백산수(31) */
						SELECT	ITEM_ID
						FROM	ITEM_MST IM
						--WHERE	HR_TY1	LIKE '303001%'
						WHERE	HR_TY1	LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04
						AND		ITYPE	= 'HAWA'
						AND		'31'	= '$!{search_type}'
						AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
						AND		HR_TY1 NOT LIKE '606006%'
						AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
						AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
						UNION	ALL
						/* 기타(91) */
						SELECT	ITEM_ID
						FROM	ITEM_MST IM
						--WHERE	HR_TY1	NOT LIKE '303001%'
						WHERE	HR_TY1	NOT LIKE '303011%' -- SCM팀 이승용 대리 백산수로 변경 요청 2013-07-04
						AND		NOT (DIVISION	IN ('10','20') AND ITYPE = 'FERT')
						AND		ITYPE	IN('FERT', 'HAWA')
						AND		'91'	= '$!{search_type}'
						AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
						AND		HR_TY1 NOT LIKE '606006%'
						AND		IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
						AND		NVL(CAT03,'XX')    NOT LIKE 'O%'
						) IM
						<!--2012-11-15 추가 SCM팀 김종환 과장 요청 
						 (
							SELECT	ITEM_ID 
							FROM	ITEM_MST IM
							WHERE	SCM_CHARGE = '$!{scm_charge}'
							AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000')
						) IM2
						2012-11-15 추가 SCM팀 김종환 과장 요청 -->
				WHERE   DW.DC_ID        = DM.DC_ID
				AND     DW.DC_ID        = DWPT.DC_ID(+)
				AND     DW.DC_ID        = NI.DC_ID(+)
				<!--AND		DW.DC_ID		= CHGO.DC_ID(+)-->
				AND     DW.CNFM_DATE    = '$!{in_cnfm_date}'
				AND		DW.ITEM_ID		= IM.ITEM_ID
				AND		DM.DC_LOC_TYPE = '사내'
				AND		DW.DC_ID != '8000' --물류기획 제외
				AND		DM.MADE_TYPE	!= 'DE'
				GROUP BY DW.DC_ID, DM.DC_SHORT_NAME
				)	T1,
				(
				SELECT	0	DD
				FROM	DUAL
				UNION	ALL
				SELECT	1	DD
				FROM	DUAL
				)	T2
		GROUP
		BY		DECODE(DD,0,DC_ID,''),
				DECODE(DD,0,DC_NAME,'합계')
		ORDER BY 1

	</query> 

	<!-- 
	=======================
	  일자별 재고 흐름 분석
	=======================
	-->
	<!-- 일자별 재고 흐름 분석 : 헤더 날짜  -->  
	<query id="ip_01070_dailyInventoryPlanAnalysis_header" paging="true">
        SELECT  to_date('$!{cnfm_date}') -19  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -19 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -18  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -18 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -17  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -17 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -16  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -16 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -15  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -15 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -14  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -14 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -13  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -13 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -12  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -12 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -11  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -11 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -10  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -10 , 'DY')||')' ,
                to_date('$!{cnfm_date}') -9   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -9  , 'DY')||')',
                to_date('$!{cnfm_date}') -8   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -8  , 'DY')||')',
                to_date('$!{cnfm_date}') -7   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -7  , 'DY')||')',
                to_date('$!{cnfm_date}') -6   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -6  , 'DY')||')',
                to_date('$!{cnfm_date}') -5   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -5  , 'DY')||')',
                to_date('$!{cnfm_date}') -4   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -4  , 'DY')||')',
                to_date('$!{cnfm_date}') -3   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -3  , 'DY')||')',
                to_date('$!{cnfm_date}') -2   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -2  , 'DY')||')',
                to_date('$!{cnfm_date}') -1   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -1  , 'DY')||')',
                to_date('$!{cnfm_date}') -0   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') -0  , 'DY')||')',
                to_date('$!{cnfm_date}') +1   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +1  , 'DY')||')',
                to_date('$!{cnfm_date}') +2   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +2  , 'DY')||')',
                to_date('$!{cnfm_date}') +3   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +3  , 'DY')||')',
                to_date('$!{cnfm_date}') +4   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +4  , 'DY')||')',
                to_date('$!{cnfm_date}') +5   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +5  , 'DY')||')',
                to_date('$!{cnfm_date}') +6   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +6  , 'DY')||')',
                to_date('$!{cnfm_date}') +7   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +7  , 'DY')||')',
                to_date('$!{cnfm_date}') +8   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +8  , 'DY')||')',
                to_date('$!{cnfm_date}') +9   ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +9  , 'DY')||')',
                to_date('$!{cnfm_date}') +10  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +10 , 'DY')||')',
                to_date('$!{cnfm_date}') +11  ||'(' ||TO_CHAR(to_date('$!{cnfm_date}') +11 , 'DY')||')'
        FROM    DUAL, DUAL B
	</query> 


	<!-- 일자별 재고 흐름 분석 : 디테일 데이터  -->  
	<query id="ip_01070_dailyInventoryPlanAnalysis" paging="true">
        SELECT  DW.ITEM_ID,                                                                                                              	
				IM.ITEM_NAME,                                                                                                    	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -19  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_01,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -19  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_01,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -19  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_01,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -19  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_01,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -19  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_01,
				       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -18  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_02,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -18  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_02,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -18  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_02,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -18  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_02,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -18  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_02,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -17  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_03,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -17  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_03,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -17  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_03,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -17  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_03,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -17  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_03,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -16  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_04,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -16  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_04,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -16  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_04,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -16  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_04,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -16  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_04,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -15  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_05,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -15  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_05,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -15  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_05,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -15  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_05,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -15  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_05,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -14  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_06,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -14  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_06,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -14  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_06,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -14  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_06,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -14  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_06,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -13  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_07,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -13  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_07,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -13  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_07,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -13  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_07,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -13  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_07,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -12  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_08,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -12  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_08,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -12  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_08,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -12  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_08,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -12  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_08,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -11  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_09,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -11  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_09,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -11  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_09,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -11  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_09,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -11  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_09,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -10  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_10,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -10  , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_10,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -10  , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_10,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -10  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_10,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -10  , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_10,       	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -9   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_11,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -9   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_11,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -9   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_11,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -9   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_11,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -9   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_11,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -8   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_12,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -8   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_12,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -8   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_12,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -8   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_12,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -8   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_12,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -7   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_13,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -7   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_13,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -7   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_13,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -7   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_13,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -7   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_13,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -6   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_14,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -6   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_14,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -6   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_14,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -6   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_14,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -6   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_14,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -5   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_15,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -5   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_15,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -5   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_15,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -5   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_15,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -5   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_15,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -4   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_16,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -4   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_16,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -4   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_16,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -4   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_16,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -4   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_16,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -3   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_17,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -3   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_17,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -3   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_17,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -3   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_17,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -3   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_17,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -2   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_18,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -2   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_18,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -2   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_18,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -2   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_18,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -2   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_18,      	
				
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -1   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_19,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -1   , 'YYYYMMDD'), DW.SP_QTY, 0))      SP_QTY_19,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -1   , 'YYYYMMDD'), DW.SA_QTY, 0))      SA_QTY_19,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -1   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_19,       	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') -1   , 'YYYYMMDD'), DW.PA_QTY, 0))      PA_QTY_19,
				      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +0   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_20,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +0   , 'YYYYMMDD'), DW.OD_QTY, 0))      SA_QTY_20,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +0   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_20,
				      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +1   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_21,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +1   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_21,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +1   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_21,
				      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +2   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_22,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +2   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_22,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +2   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_22,
				      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +3   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_23,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +3   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_23,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +3   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_23,
				      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +4   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_24,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +4   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_24,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +4   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_24,
				      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +5   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_25,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +5   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_25,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +5   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_25, 
				     	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +6   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_26,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +6   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_26,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +6   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_26, 
				     	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +7   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_27,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +7   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_27,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +7   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_27, 
				     	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +8   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_28,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +8   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_28,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +8   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_28, 
				     	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +9   , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_29,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +9   , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_29,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +9   , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_29, 
				     	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +10  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_30,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +10  , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_30,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +10  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_30, 
				     	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +11  , 'YYYYMMDD'), DW.BS_QTY, 0))      BS_QTY_31,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +11  , 'YYYYMMDD'), DW.SP_QTY, 0))      SA_QTY_31,      	
				MAX(DECODE(DW.YYYYMMDD, TO_CHAR(to_date('$!{cnfm_date}') +11  , 'YYYYMMDD'), DW.PO_QTY, 0))      PO_QTY_31  
        FROM
                (
                SELECT ITEM_ID, YYYYMMDD,
                       SUM(BS_QTY)  BS_QTY, --기초재고 
                       SUM(SP_QTY)  SP_QTY, --판매계획
                       SUM(SA_QTY)  SA_QTY, --판매실적
                       SUM(PO_QTY)  PO_QTY, --생산계획
                       SUM(PA_QTY)  PA_QTY, --생산실적
                       SUM(OD_QTY)  OD_QTY, --주문수량
                       SUM(STOCK_EXPT)  STOCK_EXPT  --예상재고
                FROM(
                    SELECT  DW.ITEM_ID, 
                            DW.CNFM_DATE       YYYYMMDD, 
                            SUM(DW.BASE_STOCK)             BS_QTY, 
                            SUM(DW.RECEIPT_EXPT)           PO_QTY,
                            0                              PA_QTY,
                            0                              SA_QTY,
                            SUM(DW.ISSUE_EXPT)+SUM(DW.ISSUE)       OD_QTY,
                            SUM(DW.SALES_PLAN)+SUM(DW.PROM_PLAN) SP_QTY,
                            SUM(DW.STOCK_EXPT)             STOCK_EXPT
                    FROM    DC_DATAWAREHOUSE DW,
                            (
                            SELECT  ITEM_ID
                            FROM    ITEM_MST IM
                            WHERE   IM.DIVISION = '$!{serch_type}'
                            AND     IM.ITYPE IN ('FERT', 'HAWA')
                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{serch_word}'||'%'
		          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{serch_word}'||'%')]
                            )IM
                    WHERE   DW.ITEM_ID      = IM.ITEM_ID
                    AND		DW.DC_ID	NOT IN ('8901','8902','8903','8913','8914')
                    AND     DW.CNFM_DATE BETWEEN TO_CHAR(to_date('$!{cnfm_date}')-19,'YYYYMMDD')
                                     AND TO_CHAR(to_date('$!{cnfm_date}')+11, 'YYYYMMDD')
                    GROUP BY DW.ITEM_ID, DW.CNFM_DATE
                        
                    UNION ALL

                    SELECT  SA.ITEM_ID, 
                            TO_CHAR(SA.SALE_DATE, 'YYYYMMDD')    YYYYMMDD, 
                            0               BS_QTY, 
                            0               PO_QTY,
                            0               PA_QTY,
                            SUM(SA.QTY)     SA_QTY,
                            0               OD_QTY,
                            0               SP_QTY,
                            0               STOCK_EXPT
                    FROM    SALES_ACT_RECENT SA,
                            (
                            SELECT  ITEM_ID
                            FROM    ITEM_MST IM
                            WHERE   IM.DIVISION = '$!{serch_type}'
                            AND     IM.ITYPE IN ('FERT', 'HAWA')
                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{serch_word}'||'%'
		          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{serch_word}'||'%')]
                            )IM
                    WHERE   SA.ITEM_ID      = IM.ITEM_ID
                    AND		SA.DELIV_LOC NOT IN ('8901','8902','8903','8913','8914')
                    AND     SA.SALE_DATE BETWEEN to_date('$!{cnfm_date}')-19
                                     AND to_date('$!{cnfm_date}')+11
                    GROUP BY SA.ITEM_ID, SA.SALE_DATE
                        
                    UNION ALL
                        
                    SELECT  PA.ITEM_ID, 
                            TO_CHAR(PA.START_DTTM, 'yyyymmdd')       YYYYMMDD, 
                            0               BS_QTY, 
                            0               PO_QTY,
                            SUM(PA.COMPL_QTY)   PA_QTY,
                            0               SA_QTY,
                            0               OD_QTY,
                            0               SP_QTY,
                            0               STOCK_EXPT
                    FROM    V_ERP_PO_MES PA,
                            (
                            SELECT  ITEM_ID
                            FROM    ITEM_MST IM
                            WHERE   IM.DIVISION = '$!{serch_type}'
                            AND     IM.ITYPE IN ('FERT', 'HAWA')
                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{serch_word}'||'%'
		          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{serch_word}'||'%')]
                            )IM                            
                    WHERE   PA.ITEM_ID      = IM.ITEM_ID
                    AND     PA.START_DTTM   BETWEEN to_date('$!{cnfm_date}')-19
                                     AND to_date('$!{cnfm_date}')+11
                    GROUP BY PA.ITEM_ID, PA.START_DTTM
                    )
                GROUP BY ITEM_ID, YYYYMMDD  
                )DW, ITEM_MST IM
        WHERE   DW.ITEM_ID = IM.ITEM_ID
        AND     IM.HR_TY1 NOT LIKE '606006%'
        AND     NVL(IM.CAT03,'XX')    NOT LIKE 'O%'   
        GROUP BY DW.ITEM_ID, IM.ITEM_NAME
        ORDER 
        BY      DW.ITEM_ID
	</query> 


	<!-- 
	=======================
	  제품 입고 경과일수 분석
	=======================
	-->

	<query id="ip_01080_StockTermAnalysis" paging="false">
        -- 출고장별
        SELECT  DW.DC_ID, IM.DC_NAME,	
                DW.ITEM_ID, IM.ITEM_NAME, 
                DW.STOCK_EXPT		"익일예상재고", 
                DW.SALES_MEAN_1WEEK "1주평균",
                DW.SALES_MEAN_3WEEK "3주평균",
                ST.STOC_DAY			"전국재고일수",
                 
                ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
                DECODE(DW.STOCK_EXPT, 0, 0, 999),
                DW.STOCK_EXPT/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1) "재고소진가능일", 
                --재고소진가능일수경우 익일 예상제고에 의한 재고소진가능일을 구한다 , 
                --당일재고가 0이면 익일 오더가 들어가더라도 소진 가능일수가 999로 나온다 : 20091118 이승용 요청처리  
                DW.STOCK_TERM "입고경과일",
                DECODE(IM.TERM_VAL, 0, 36, IM.TERM_VAL) "제품유통기한", --WMS 상의 유통기간이 0으로 입력될경우 36개월로 인식
                TRUNC(GY.PERIOD_DATE)-TRUNC(SYSDATE) "유통기한 잔여일",
		        --
		        ROUND(((
		        DW.STOCK_TERM +
		        ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
		        DECODE(DW.BASE_STOCK, 0, 0, 999),
		        DW.BASE_STOCK/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1)
		        )
		        / (DECODE(IM.TERM_VAL, 0, 36, IM.TERM_VAL)*30))*100, 2)
		        "유통기한경과비율",                
		        --
		        NVL(SP.SP,0)   "입고경과일 판매계획",
		        NVL(SP.SA,0)   "입고경과일 판매실적",
		        ------
		        NVL(SP.SA,0)- NVL(SP.SP,0) "계획오차",
                DECODE(NVL(SP.SP,0), 0, 0,
                TRIM(TO_CHAR(
                ROUND((SP.SA-SP.SP)/NVL(SP.SP,0)*100,1)
                ,999999999990.9))) "계획오차비율",
		        ------
                IM.SAFETY_STOCK "안전재고",
                IM.MIN_PICK_QTY "수송단위"
        FROM    (
                /* 물류경로별 ITEM_ID 목록 추출 */
                SELECT      DISTINCT DI.TGT_LOC DC_ID, DC_NAME, 
                            DI.PROD_ID ITEM_ID, IM.ITEM_NAME, 
                            IM.TERM_VAL,
                            TU.MIN_PICK_QTY,
                            SA.SAFETY_STOCK
                FROM        MAP_PROD_DCPATH DI, 
                            (
                             SELECT     DC_ID, DC_SHORT_NAME DC_NAME
                             FROM       DC_MST
                             WHERE		MADE_TYPE != 'DE'
							#if ( "$!{dc_flag}" == "RDC" )
							--dc_flag" == "RDC
                             AND		RDC_FLAG = 'Y'
                             AND		CDC_FLAG != 'Y'
                             UNION ALL
                             SELECT     DC_ID, DC_SHORT_NAME DC_NAME
                             FROM       DC_MST
                             WHERE		DC_ID = '8510'							
							#else
 								#if ( "$!dc_flag" == "CDC" )
 							--dc_flag" == "CDC
                             AND CDC_FLAG = 'Y'
 								#else
 								--dc_flag is null?????????
 								#end
							#end
							) DC,
                            (
                            SELECT  ITEM_ID, ITEM_NAME, IC.TERM_VAL
                             FROM   ITEM_MST IM, CMITEM IC
                            WHERE   IM.ITEM_ID = IC.ITEM_CD
                            AND		IM.DIVISION = '$!{search_type}'
                            AND		IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{search_item}'||'%'
		          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]
                            ) IM, 
                            (/* 안전재고 */
                            SELECT      PY.WORK_DATE, PY.LOC_ID DC_ID, PY.ITEM_ID
                                        , SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC) SAFETY_STOCK2
                                        , CASE WHEN TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
                                                      BETWEEN NVL(PY.START_DATE, '00000000') AND NVL(PY.END_DATE, '00000000')
                                               THEN SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC)
                                               ELSE SUM(PY.SAFETY_STOCK+PY.CAMP_STOC)
                                          END SAFETY_STOCK
                            FROM        STOCK_POLICY_QTY PY,
                                        (SELECT     MAX(WORK_DATE) WORK_DATE
                                         FROM       STOCK_POLICY_QTY
                                         WHERE      LOC_TYPE = 'DC'
                                        ) MV
                            WHERE       PY.WORK_DATE = MV.WORK_DATE
                            GROUP       BY PY.WORK_DATE, PY.LOC_ID, PY.ITEM_ID, NVL(PY.START_DATE, '00000000'), NVL(PY.END_DATE, '00000000')
                            ) SA, TRANS_UNIT TU
                WHERE       DI.TGT_LOC = DC.DC_ID
                AND         DI.PROD_ID = IM.ITEM_ID
                AND         DI.PROD_ID = TU.ITEM_ID(+)
                AND         DI.TGT_LOC = TU.RDC_ID(+)
                AND         DI.PROD_ID = SA.ITEM_ID(+)
                AND         DI.TGT_LOC = SA.DC_ID(+)
				AND			DI.TGT_LOC		LIKE '%'||'$!{selected_dc_id}'||'%'
                ) IM,
                (
                SELECT  SUBSTR(GY.CENTER_CD,5,4) DC_ID, ITEM_CD ITEM_ID, MIN(PERIOD_DATE) PERIOD_DATE
                FROM    GYRINFO GY
                WHERE   GY.OUTBOUND_DATE   = '$!{gyr_date}'
                GROUP BY SUBSTR(GY.CENTER_CD,5,4), ITEM_CD        
                )GY,
                (
				SELECT  SP.ITEM_ID, SP.ITEM_NAME, SP.DELIV_LOC DC_ID, SUM(SP)SP, SUM(SA) SA                        
				FROM    (                        
				        SELECT  SP.ITEM_ID, IM.ITEM_NAME, SP.DELIV_LOC, SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY ) SP, NULL SA
				        FROM    NFOS_SALES_PLAN_WEEKLY SP, V_NFOS_PLAN_VERSION PV,
				                (
				                SELECT  ITEM_ID, ITEM_NAME
				                FROM    ITEM_MST IM
	                            WHERE	IM.DIVISION = '$!{search_type}'
	                            AND		IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
	                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
	                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{search_item}'||'%'
			          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]                              
				                )IM, DC_DATAWAREHOUSE DW
				        WHERE   SP.YYYYMMDD = PV.YYYYMMDD
				        AND     SP.ITEM_ID = IM.ITEM_ID
				        AND     SP.ITEM_ID = DW.ITEM_ID(+)
				        AND     SP.DELIV_LOC = DW.DC_ID(+)
				        AND     SP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('$!{cnfm_date}')-DW.STOCK_TERM, 'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{cnfm_date}')-1, 'YYYYMMDD')
				        AND     SP.YYYYMMDD > TO_CHAR(TO_DATE('$!{cnfm_date}')-90, 'YYYYMMDD')
				        AND     SP.VERSION = PV.VERSION
				        AND     SP.YYYY = PV.YYYY
				        AND     DW.CNFM_DATE = TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
				        AND     SP.DOMAIN = 'DO'
				        GROUP BY SP.ITEM_ID, IM.ITEM_NAME, SP.DELIV_LOC
				        UNION ALL
				        SELECT  SA.ITEM_ID, IM.ITEM_NAME, SA.DELIV_LOC, NULL SP, SUM(SA.QTY)SA 
				        FROM    SALES_ACT_RECENT SA,
				                (
				                SELECT  ITEM_ID, ITEM_NAME
				                FROM    ITEM_MST IM
	                            WHERE	IM.DIVISION = '$!{search_type}'
	                            AND		IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
	                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
	                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{search_item}'||'%'
			          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]                                
				                )IM, DC_DATAWAREHOUSE DW
				        WHERE   SA.ITEM_ID = IM.ITEM_ID
				        AND     SA.ITEM_ID = DW.ITEM_ID
				        AND     SA.DELIV_LOC = DW.DC_ID
				        AND     SA.SALE_DATE BETWEEN TO_CHAR(TO_DATE('$!{cnfm_date}')-DW.STOCK_TERM, 'YYYY-MM-DD') AND TO_CHAR(TO_DATE('$!{cnfm_date}')-1, 'YYYY-MM-DD')
				        AND     SA.DOMAIN = 'DO'
				        AND     DW.CNFM_DATE = TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
				        GROUP BY SA.ITEM_ID, IM.ITEM_NAME, SA.DELIV_LOC
				        ) SP
				GROUP BY SP.ITEM_ID, SP.ITEM_NAME, SP.DELIV_LOC                  
                )SP,
                (
                SELECT  DW.ITEM_ID,
                        ROUND(DECODE((( SUM(DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK))/2), 0, 
                        DECODE(SUM(DW.BASE_STOCK), 0, 0, 999),
                        SUM(DW.BASE_STOCK)/(( SUM(DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK))/2)),1) STOC_DAY
                FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                WHERE   CNFM_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                AND     DW.DC_ID = DM.DC_ID
                AND     (DM.DC_LOC_TYPE != '사외' OR DM.SL_CAT LIKE '%냉동%')
                GROUP BY DW.ITEM_ID                
                ) ST,   DC_DATAWAREHOUSE DW                
        WHERE   DW.CNFM_DATE	=  TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
        AND     IM.ITEM_ID		= DW.ITEM_ID(+)
        AND     IM.DC_ID    = DW.DC_ID(+)
        AND     IM.ITEM_ID  = GY.ITEM_ID(+)
        AND     IM.DC_ID    = GY.DC_ID(+)
        AND     IM.DC_ID    = SP.DC_ID
        AND     IM.ITEM_ID  = SP.ITEM_ID
        AND     IM.ITEM_ID  = ST.ITEM_ID
		AND		(DW.STOCK_TERM >= NVL('$!{stock_term}', 999999999990)
		OR		ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
                DECODE(DW.STOCK_EXPT, 0, 0, 999),
                DW.STOCK_EXPT/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1) >= NVL('$!{reduce_term}', 999999999990)
        OR		ROUND(((
		        DW.STOCK_TERM +
		        ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
		        DECODE(DW.STOCK_EXPT, 0, 0, 999),
		        DW.BASE_STOCK/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1)
		        )
		        / (DECODE(IM.TERM_VAL, 0, 36, IM.TERM_VAL)*30))*100, 2)       >= NVL('$!{fc_rate}', 999999999990)  
                )        AND		DW.STOCK_EXPT > 0
        ORDER BY 1, 3
	</query> 

	<!-- 제품 입고 경과일수 분석 제품별 -->  
	<query id="ip_01080_StockTermAnalysis_2" paging="false">
		-- 품목별
        SELECT  DW.ITEM_ID, IM.ITEM_NAME, 
                DW.DC_ID, IM.DC_NAME,
                DW.BASE_STOCK, 
                DW.SALES_MEAN_1WEEK "1주평균",
                DW.SALES_MEAN_3WEEK "3주평균", 
                ST.STOC_DAY			"전국재고일수",
                --소진가능일 
                ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
                DECODE(DW.STOCK_EXPT, 0, 0, 999),
                DW.STOCK_EXPT/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1) "재고소진가능일", 
                DW.STOCK_TERM "입고경과일",
                DECODE(IM.TERM_VAL, 0, 36, IM.TERM_VAL)  "제품유통기한",
                TRUNC(GY.PERIOD_DATE)-TRUNC(SYSDATE) "유통기한 잔여일",
		        --
		        ROUND(((
		        DW.STOCK_TERM +
		        ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
		        DECODE(DW.BASE_STOCK, 0, 0, 999),
		        DW.BASE_STOCK/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1)
		        )
		        / (DECODE(IM.TERM_VAL, 0, 36, IM.TERM_VAL)*30))*100, 2)
		        "유통기한경과비율",                
		        --
		        NVL(SP.SP,0)   "입고경과일 판매계획",
		        NVL(SP.SA,0)   "입고경과일 판매실적",
		        ------
		        NVL(SP.SA,0)- NVL(SP.SP,0) "계획오차",
                DECODE(NVL(SP.SP,0), 0, 0,
                TRIM(TO_CHAR(
                ROUND((SP.SA-SP.SP)/NVL(SP.SP,0)*100,1)
                ,999999999990.9))) "계획오차비율",
		        ------
                IM.SAFETY_STOCK "안전재고",
                IM.MIN_PICK_QTY "수송단위"
        FROM    (
                /* 물류경로별 ITEM_ID 목록 추출 */
                SELECT      DISTINCT DI.TGT_LOC DC_ID, DC_NAME, 
                            DI.PROD_ID ITEM_ID, IM.ITEM_NAME, 
                            IM.TERM_VAL,
                            TU.MIN_PICK_QTY,
                            SA.SAFETY_STOCK
                FROM        MAP_PROD_DCPATH DI, 
                            (
                             SELECT     DC_ID, DC_SHORT_NAME DC_NAME
                             FROM       DC_MST
                             WHERE		MADE_TYPE != 'DE'
							#if ( "$!{dc_flag}" == "RDC" )
							--dc_flag" == "RDC
                             AND		RDC_FLAG = 'Y'
                             AND		CDC_FLAG != 'Y'
                             UNION ALL
                             SELECT     DC_ID, DC_SHORT_NAME DC_NAME
                             FROM       DC_MST
                             WHERE		DC_ID = '8510'							
							#else
 								#if ( "$!dc_flag" == "CDC" )
 							--dc_flag" == "CDC
                             AND CDC_FLAG = 'Y'
 								#else
 								--dc_flag is null?????????
 								#end
							#end
							) DC,
                            (
                            SELECT  ITEM_ID, ITEM_NAME, IC.TERM_VAL
                             FROM   ITEM_MST IM, CMITEM IC
                            WHERE   IM.ITEM_ID = IC.ITEM_CD
                            AND		IM.DIVISION = '$!{search_type}'
                            AND		IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{search_item}'||'%'
		          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]
                            ) IM, 
                            (/* 안전재고 */
                            SELECT      PY.WORK_DATE, PY.LOC_ID DC_ID, PY.ITEM_ID
                                        , SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC) SAFETY_STOCK2
                                        , CASE WHEN TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
                                                      BETWEEN NVL(PY.START_DATE, '00000000') AND NVL(PY.END_DATE, '00000000')
                                               THEN SUM(PY.SAFETY_STOCK+PY.CAMP_STOC+PY.SAVE_STOC)
                                               ELSE SUM(PY.SAFETY_STOCK+PY.CAMP_STOC)
                                          END SAFETY_STOCK
                            FROM        STOCK_POLICY_QTY PY,
                                        (SELECT     MAX(WORK_DATE) WORK_DATE
                                         FROM       STOCK_POLICY_QTY
                                         WHERE      LOC_TYPE = 'DC'
                                        ) MV
                            WHERE       PY.WORK_DATE = MV.WORK_DATE
                            GROUP       BY PY.WORK_DATE, PY.LOC_ID, PY.ITEM_ID, NVL(PY.START_DATE, '00000000'), NVL(PY.END_DATE, '00000000')
                            ) SA, TRANS_UNIT TU
                WHERE       DI.TGT_LOC = DC.DC_ID
                AND         DI.PROD_ID = IM.ITEM_ID
                AND         DI.PROD_ID = TU.ITEM_ID(+)
                AND         DI.TGT_LOC = TU.RDC_ID(+)
                AND         DI.PROD_ID = SA.ITEM_ID(+)
                AND         DI.TGT_LOC = SA.DC_ID(+)
				AND			DI.TGT_LOC		LIKE '%'||'$!{selected_dc_id}'||'%'
                ) IM,
                (
                SELECT  SUBSTR(GY.CENTER_CD,5,4) DC_ID, ITEM_CD ITEM_ID, MIN(PERIOD_DATE) PERIOD_DATE
                FROM    GYRINFO GY
                WHERE   GY.OUTBOUND_DATE   = '$!{gyr_date}'
                GROUP BY SUBSTR(GY.CENTER_CD,5,4), ITEM_CD        
                )GY,
                (
				SELECT  SP.ITEM_ID, SP.ITEM_NAME, SP.DELIV_LOC DC_ID, SUM(SP)SP, SUM(SA) SA                        
				FROM    (                        
				        SELECT  SP.ITEM_ID, IM.ITEM_NAME, SP.DELIV_LOC, SUM(NORMAL_QTY+PROM_QTY+SUPT_QTY+SAMP_QTY ) SP, NULL SA
				        FROM    NFOS_SALES_PLAN_WEEKLY SP, V_NFOS_PLAN_VERSION PV,
				                (
				                SELECT  ITEM_ID, ITEM_NAME
				                FROM    ITEM_MST IM
	                            WHERE	IM.DIVISION = '$!{search_type}'
	                            AND		IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
	                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
	                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{search_item}'||'%'
			          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]                              
				                )IM, DC_DATAWAREHOUSE DW
				        WHERE   SP.YYYYMMDD = PV.YYYYMMDD
				        AND     SP.ITEM_ID = IM.ITEM_ID
				        AND     SP.ITEM_ID = DW.ITEM_ID(+)
				        AND     SP.DELIV_LOC = DW.DC_ID(+)
				        AND     SP.YYYYMMDD BETWEEN TO_CHAR(TO_DATE('$!{cnfm_date}')-DW.STOCK_TERM, 'YYYYMMDD') AND TO_CHAR(TO_DATE('$!{cnfm_date}')-1, 'YYYYMMDD')
				        AND     SP.YYYYMMDD > TO_CHAR(TO_DATE('$!{cnfm_date}')-90, 'YYYYMMDD')
				        AND     SP.VERSION = PV.VERSION
				        AND     SP.YYYY = PV.YYYY
				        AND     DW.CNFM_DATE = TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
				        AND     SP.DOMAIN = 'DO'
				        GROUP BY SP.ITEM_ID, IM.ITEM_NAME, SP.DELIV_LOC
				        UNION ALL
				        SELECT  SA.ITEM_ID, IM.ITEM_NAME, SA.DELIV_LOC, NULL SP, SUM(SA.QTY)SA 
				        FROM    SALES_ACT_RECENT SA,
				                (
				                SELECT  ITEM_ID, ITEM_NAME
				                FROM    ITEM_MST IM
	                            WHERE	IM.DIVISION = '$!{search_type}'
	                            AND		IM.ITYPE	LIKE '%'||'$!{item_type}'||'%'
	                            AND		(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
	                            [AND    (IM.ITEM_ID       LIKE '%'||'$!{search_item}'||'%'
			          			  OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]                                
				                )IM, DC_DATAWAREHOUSE DW
				        WHERE   SA.ITEM_ID = IM.ITEM_ID
				        AND     SA.ITEM_ID = DW.ITEM_ID
				        AND     SA.DELIV_LOC = DW.DC_ID
				        AND     SA.SALE_DATE BETWEEN TO_CHAR(TO_DATE('$!{cnfm_date}')-DW.STOCK_TERM, 'YYYY-MM-DD') AND TO_CHAR(TO_DATE('$!{cnfm_date}')-1, 'YYYY-MM-DD')
				        AND     SA.DOMAIN = 'DO'
				        AND     DW.CNFM_DATE = TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
				        GROUP BY SA.ITEM_ID, IM.ITEM_NAME, SA.DELIV_LOC
				        ) SP
				GROUP BY SP.ITEM_ID, SP.ITEM_NAME, SP.DELIV_LOC                  
                )SP, 
                (
                SELECT  DW.ITEM_ID,
                        ROUND(DECODE((( SUM(DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK))/2), 0, 
                        DECODE(SUM(DW.BASE_STOCK), 0, 0, 999),
                        SUM(DW.BASE_STOCK)/(( SUM(DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK))/2)),1) STOC_DAY
                FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                WHERE   CNFM_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
                AND     DW.DC_ID = DM.DC_ID
                AND     (DM.DC_LOC_TYPE != '사외' OR DM.SL_CAT LIKE '%냉동%')
                GROUP BY DW.ITEM_ID                
                ) ST,   DC_DATAWAREHOUSE DW
        WHERE   DW.CNFM_DATE	=  TO_CHAR(TO_DATE('$!{cnfm_date}'), 'YYYYMMDD')
        AND     IM.ITEM_ID		= DW.ITEM_ID(+)
        AND     IM.DC_ID    = DW.DC_ID(+)
        AND     IM.ITEM_ID  = GY.ITEM_ID(+)
        AND     IM.DC_ID    = GY.DC_ID(+)
        AND     IM.DC_ID    = SP.DC_ID
        AND     IM.ITEM_ID  = SP.ITEM_ID
        AND     IM.ITEM_ID  = ST.ITEM_ID
		AND		(DW.STOCK_TERM >= NVL('$!{stock_term}', 999999999990)
		OR		ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
                DECODE(DW.STOCK_EXPT, 0, 0, 999),
                DW.STOCK_EXPT/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1) >= NVL('$!{reduce_term}', 999999999990)
        OR		ROUND(((
		        DW.STOCK_TERM +
		        ROUND(DECODE(((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2), 0, 
		        DECODE(DW.STOCK_EXPT, 0, 0, 999),
		        DW.STOCK_EXPT/((DW.SALES_MEAN_1WEEK+DW.SALES_MEAN_3WEEK)/2)),1)
		        )
		        / (DECODE(IM.TERM_VAL, 0, 36, IM.TERM_VAL)*30))*100, 2)       >= NVL('$!{fc_rate}', 999999999990)  
                )	
        AND     DW.STOCK_EXPT > 0
        ORDER BY 1, 3
	</query>

	<!-- 제품 입고 경과일수 분석 제품별 -->  
	<query id="get_max_gyrdate" paging="false">
		SELECT	TO_CHAR(MAX(OUTBOUND_DATE), 'YYYY-MM-DD')
		FROM	(
				SELECT	OUTBOUND_DATE,
						COUNT(DISTINCT CENTER_CD)
				FROM	GYRINFO, DUAL
				WHERE	OUTBOUND_DATE BETWEEN ADD_MONTHS(SYSDATE,-1) AND TRUNC(SYSDATE)
				HAVING	COUNT(DISTINCT CENTER_CD) &gt; 20
				GROUP
				BY		OUTBOUND_DATE
				)
	</query> 



	<!-- 재고 및 생산 적합성 분석 헤더  -->  
	<query id="ip_02050_Inventory_production_analysis_list_header" paging="false">

			SELECT  TO_CHAR(SYSDATE,     'MM/DD')||'('||TO_CHAR(SYSDATE,     'DY')||')' DAY_0, 
			        TO_CHAR(SYSDATE+1,   'MM/DD')||'('||TO_CHAR(SYSDATE+1,   'DY')||')' DAY_1, 
			        TO_CHAR(SYSDATE+2,   'MM/DD')||'('||TO_CHAR(SYSDATE+2,   'DY')||')' DAY_2, 
			        TO_CHAR(SYSDATE+3,   'MM/DD')||'('||TO_CHAR(SYSDATE+3,   'DY')||')' DAY_3, 
			        TO_CHAR(SYSDATE+4,   'MM/DD')||'('||TO_CHAR(SYSDATE+4,   'DY')||')' DAY_4, 
			        TO_CHAR(SYSDATE+5,   'MM/DD')||'('||TO_CHAR(SYSDATE+5,   'DY')||')' DAY_5, 
			        TO_CHAR(SYSDATE+6,   'MM/DD')||'('||TO_CHAR(SYSDATE+6,   'DY')||')' DAY_6,
			        TO_CHAR(SYSDATE+7,   'MM/DD')||'('||TO_CHAR(SYSDATE+7,   'DY')||')' DAY_7,
			        TO_CHAR(SYSDATE+8,   'MM/DD')||'('||TO_CHAR(SYSDATE+8,   'DY')||')' DAY_8,
			        TO_CHAR(SYSDATE+9,   'MM/DD')||'('||TO_CHAR(SYSDATE+9,   'DY')||')' DAY_9,
			        TO_CHAR(SYSDATE+10,  'MM/DD')||'('||TO_CHAR(SYSDATE+10,  'DY')||')' DAY_10,
			        TO_CHAR(SYSDATE+11,  'MM/DD')||'('||TO_CHAR(SYSDATE+11,  'DY')||')' DAY_11,
			        TO_CHAR(SYSDATE+12,  'MM/DD')||'('||TO_CHAR(SYSDATE+12,  'DY')||')' DAY_12,
			        TO_CHAR(SYSDATE+13,  'MM/DD')||'('||TO_CHAR(SYSDATE+13,  'DY')||')' DAY_13,
			        TO_CHAR(SYSDATE+14,  'MM/DD')||'('||TO_CHAR(SYSDATE+14,  'DY')||')' DAY_14,
			        TO_CHAR(SYSDATE+15,  'MM/DD')||'('||TO_CHAR(SYSDATE+15,  'DY')||')' DAY_15,
			        TO_CHAR(SYSDATE+16,  'MM/DD')||'('||TO_CHAR(SYSDATE+16,  'DY')||')' DAY_16,
			        TO_CHAR(SYSDATE+17,  'MM/DD')||'('||TO_CHAR(SYSDATE+17,  'DY')||')' DAY_17,
			        TO_CHAR(SYSDATE+18,  'MM/DD')||'('||TO_CHAR(SYSDATE+18,  'DY')||')' DAY_18,
			        TO_CHAR(SYSDATE+19,  'MM/DD')||'('||TO_CHAR(SYSDATE+19,  'DY')||')' DAY_19,
			        TO_CHAR(SYSDATE+20,  'MM/DD')||'('||TO_CHAR(SYSDATE+20,  'DY')||')' DAY_20
			FROM    DUAL

	</query> 



	<!-- 재고 및 생산 적합성 분석 -->  
	<query id="get_CAT06_list" paging="false">
		SELECT  CD, CD_NAME
		FROM    CODE_MST, DUAL
		WHERE   CD_GRP = 'CAT06'
		AND		CD_NAME NOT LIKE '%수출%'
		ORDER BY 1
	</query> 

	<!-- 재고 및 생산 적합성 분석  -->  
	<query id="ip_02050_get_line_id" paging="false">
        /* 라인ID 가져오기 */
        SELECT  DISTINCT
                CA.PLANT_ID, 
                CA.LINE_ID,
                HR.HID_NAME,
                CA.LINE_ID
        FROM    ITEM_CAPA CA, HRCHY HR
        WHERE   CA.LINE_ID  = HR.HID
        AND     CA.PLANT_ID = HR.HTYPE
        --AND     CA.PLANT_ID = '%'||''||'%'
        UNION ALL
        /* 공장별 전체 */
        SELECT  CD PLANT_ID,
                '' LINE_ID,
                '전체' HID_NAME,
                '00000'
        FROM    CODE_MST
        WHERE   CD_GRP = 'PLANT_NAME'
        UNION ALL
        /* 라인선택 */
        SELECT  '' PLANT_ID,
                '' LINE_ID,
                '공장선택' HID_NAME,
                '00000'
        FROM    DUAL
        WHERE   ROWNUM = 1
        ORDER 
        BY      1, 4
	</query> 

	<!-- 재고 및 생산 적합성 분석  -->  
	<query id="ip_02050_get_line_id_item_id" paging="false">
		/* 해당 라인에 서 생산되는 제품 */
		SELECT  DISTINCT ITEM_ID  
		FROM    ITEM_CAPA
		WHERE   PLANT_ID    = '1110'
		AND     LINE_ID     = '12020'
		AND     ITEM_TYPE = 'FERT'
	</query> 
	
	<!--  품종 중분류  -->  
	<query id="ip_02050_Inventory_production_analysis_list_combo" > 
		SELECT	CD, CD_NAME
		FROM	CODE_MST
		WHERE	CD_GRP ='SALES_CAT2'
		AND		MADE_TYPE != 'DE'
		AND		CD  LIKE '%10%'
	</query> 
	


	<!-- 재고 및 생산 적합성 분석 -->  
	<query id="ip_02050_Inventory_production_analysis_list" paging="false">
#if("$!{search_type}" == "")
		SELECT  '' CAT06,
				'' ITEM_ID,
		        '' ITEM_NAME,
		        '' TYPE,
		        '' D0,
		        '' D1,
		        '' D2,
		        '' D3,
		        '' D4,
		        '' D5,
		        '' D6,
		        '' D7,
		        '' D8,
		        '' D9,
		        '' D10,
		        '' D11,
		        '' D12,
		        '' D13,
		        '' D14,
		        '' D15,
		        '' D16,
		        '' D17,
		        '' D18,
		        '' D19,
		        '' D20,
		        '' RANK		        
		FROM	DUAL
		WHERE	1=0
#else		

	#if("$!{term_gubn}" == "Week")

		SELECT  CAT06,
				K1.ITEM_ID,
		        ITEM_NAME,
		        TYPE,
				TRIM(TO_CHAR( D0  ,999999999990.9)) "D0" ,
				TRIM(TO_CHAR( D1  ,999999999990.9)) "D1" ,
				TRIM(TO_CHAR( D2  ,999999999990.9)) "D2" ,
				TRIM(TO_CHAR( D3  ,999999999990.9)) "D3" ,
				TRIM(TO_CHAR( D4  ,999999999990.9)) "D4" ,
				TRIM(TO_CHAR( D5  ,999999999990.9)) "D5" ,
				TRIM(TO_CHAR( D6  ,999999999990.9)) "D6" ,
				TRIM(TO_CHAR( D7  ,999999999990.9)) "D7" ,
				TRIM(TO_CHAR( D8  ,999999999990.9)) "D8" ,
				TRIM(TO_CHAR( D9  ,999999999990.9)) "D9" ,
				TRIM(TO_CHAR( D10 ,999999999990.9)) "D10", 
				TRIM(TO_CHAR( D11 ,999999999990.9)) "D11", 
				TRIM(TO_CHAR( D12 ,999999999990.9)) "D12", 
				TRIM(TO_CHAR( D13 ,999999999990.9)) "D13", 
				TRIM(TO_CHAR( D14 ,999999999990.9)) "D14", 
				TRIM(TO_CHAR( D15 ,999999999990.9)) "D15", 
				TRIM(TO_CHAR( D16 ,999999999990.9)) "D16", 
				TRIM(TO_CHAR( D17 ,999999999990.9)) "D17", 
				TRIM(TO_CHAR( D18 ,999999999990.9)) "D18", 
				TRIM(TO_CHAR( D19 ,999999999990.9)) "D19", 
				TRIM(TO_CHAR( D20 ,999999999990.9)) "D20",
                MOD(DENSE_RANK() OVER (ORDER BY K1.ITEM_ID),2) RANK
		FROM 
		        (
                -- 실적 제고일수 S
                SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
                        , IM.CAT06
                        --, W3.BASE_STOCK
                        , W3.CLGO SA
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0, (W3.BASE_STOCK - OD.OD_QTY)/W3.CLGO),1)
                             ,999999999990.9)) "D0"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                             - OD.OD_QTY +  W3.IPGO1)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D1"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D2"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D3"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D4"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D5"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D6"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D7"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D8"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO +  W3.IPGO9)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D9"        
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D10"
                          ------------------------
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D11"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D12"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D13"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D14"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D15"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D16"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D17"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17- W3.CLGO +  W3.IPGO18)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D18"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17- W3.CLGO +  W3.IPGO18
                          - W3.CLGO   +  W3.IPGO19)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D19"
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17- W3.CLGO +  W3.IPGO18
                          - W3.CLGO   +  W3.IPGO19- W3.CLGO +  W3.IPGO20)
                          / W3.CLGO),1)
                          ,999999999990.9)) "D20"
				FROM    ( -- 
				        SELECT  ITEM_ID
				                ,SUM(BASE_STOCK) BASE_STOCK
				                ,SUM(CLGO) CLGO
				                ,SUM(IPGO1)  IPGO1
				                ,SUM(IPGO2)  IPGO2
				                ,SUM(IPGO3)  IPGO3
				                ,SUM(IPGO4)  IPGO4
				                ,SUM(IPGO5)  IPGO5
				                ,SUM(IPGO6)  IPGO6
				                ,SUM(IPGO7)  IPGO7
				                ,SUM(IPGO8)  IPGO8
			                	,SUM(IPGO9)  IPGO9
				                ,SUM(IPGO10) IPGO10
				                ,SUM(IPGO11) IPGO11
                                -------------------
                                ,SUM(IPGO12) IPGO12
                                ,SUM(IPGO13) IPGO13
                                ,SUM(IPGO14) IPGO14
                                ,SUM(IPGO15) IPGO15
                                ,SUM(IPGO16) IPGO16
                                ,SUM(IPGO17) IPGO17
                                ,SUM(IPGO18) IPGO18
                                ,SUM(IPGO19) IPGO19
                                ,SUM(IPGO20) IPGO20
                                ,SUM(IPGO21) IPGO21
				        FROM    (
				                SELECT -- 주간단위 출고이므로 (6 * CLGO)으로 한다.
				                		 ITEM_ID 
		                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.BASE_STOCK),0) BASE_STOCK
                                       #if ( "$!{week_flag}" == "3week" ) 
		                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.SALES_MEAN_3WEEK_ETC),0)*6 CLGO
                                       #elseif ( "$!{week_flag}" == "1week" ) 
		                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.SALES_MEAN_1WEEK_ETC),0)*6 CLGO
                                       #elseif ( "$!{week_flag}" == "31week" ) 
		                                , DECODE(CAL_DATE, TRUNC(SYSDATE), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0),0)*6 CLGO
		                               #else
		                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.SALES_MEAN_3WEEK_ETC),0)*6 CLGO
                                       #end
										, DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1	,  	SUM(DW.RECEIPT_EXPT),0) IPGO1
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+7	,  	SUM(DW.RECEIPT_EXPT),0) IPGO2
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+14	,  	SUM(DW.RECEIPT_EXPT),0) IPGO3
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+21	,  	SUM(DW.RECEIPT_EXPT),0) IPGO4
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+28	,  	SUM(DW.RECEIPT_EXPT),0) IPGO5
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+35	,  	SUM(DW.RECEIPT_EXPT),0) IPGO6
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+42	,  	SUM(DW.RECEIPT_EXPT),0) IPGO7
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+49	,  	SUM(DW.RECEIPT_EXPT),0) IPGO8
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+56	,  	SUM(DW.RECEIPT_EXPT),0) IPGO9
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+63	,  	SUM(DW.RECEIPT_EXPT),0) IPGO10
				                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+70	,  	SUM(DW.RECEIPT_EXPT),0) IPGO11
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+77	,  	SUM(DW.RECEIPT_EXPT),0) IPGO12
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+84	,  	SUM(DW.RECEIPT_EXPT),0) IPGO13
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+91	,  	SUM(DW.RECEIPT_EXPT),0) IPGO14
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+98	,  	SUM(DW.RECEIPT_EXPT),0) IPGO15
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+105, 	SUM(DW.RECEIPT_EXPT),0) IPGO16
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+112, 	SUM(DW.RECEIPT_EXPT),0) IPGO17
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+119, 	SUM(DW.RECEIPT_EXPT),0) IPGO18
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+128, 	SUM(DW.RECEIPT_EXPT),0) IPGO19
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+135, 	SUM(DW.RECEIPT_EXPT),0) IPGO20
                                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+142, 	SUM(DW.RECEIPT_EXPT),0) IPGO21
				                FROM	(
				                		SELECT	ITEM_ID,
                                                TO_DATE(CNFM_DATE,'YYYY-MM-DD')	CAL_DATE,
                                                SUM(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,'yyyymmdd'), DW.BASE_STOCK,0)) BASE_STOCK,
                                                SUM(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,'yyyymmdd'), DW.SALES_MEAN_3WEEK_ETC,0)) SALES_MEAN_3WEEK_ETC,
                                                SUM(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,'yyyymmdd'), DW.SALES_MEAN_3WEEK_ETC,0)) SALES_MEAN_1WEEK_ETC,
                                                SUM(RECEIPT_EXPT)	RECEIPT_EXPT 
                                        FROM	DC_DATAWAREHOUSE DW, DC_MST DM
                                        WHERE	DW.CNFM_DATE 	>= TO_CHAR(SYSDATE,'yyyymmdd')
                                        AND		DW.DC_ID = DM.DC_ID
                                        AND     DM.EXPORT_FLAG IS NULL
                                        GROUP
                                        BY		ITEM_ID, CNFM_DATE
				                		)	DW
                                GROUP
                                BY		ITEM_ID, CAL_DATE
				                )
				        GROUP BY ITEM_ID
				        ) W3, ITEM_MST IM,
		                (
						SELECT MIN(YYYYMMDD) SUN_DAY
						FROM CAL_MST
						WHERE YYYYMMDD >= SYSDATE
						AND HOLIDAY_FLAG = 'Y'
		                ) SU,
                        (
                        SELECT  DW.ITEM_ID,
                                SUM(DW.ISSUE) OD_QTY
                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                        AND     DW.DC_ID = DM.DC_ID
                        AND     DM.EXPORT_FLAG IS NULL
                        GROUP BY DW.ITEM_ID                        
                        )OD
				WHERE	W3.ITEM_ID = IM.ITEM_ID 
				AND     W3.ITEM_ID = OD.ITEM_ID
				AND		IM.SEARCH_FLAG != 'N'
				AND		IM.SALES_CAT02 LIKE '%'||'$!{sales_cat02}'||'%'
				#if("$!{scm_charge}" == "00" )
					AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )	
				#elseif("$!{scm_charge}" != "XX" )
					AND IM.SCM_CHARGE =  '$!{scm_charge}' -- SCM담당
					AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )
				#end
				GROUP
				BY		W3.ITEM_ID, IM.ITEM_NAME, IM.CAT06, W3.BASE_STOCK, W3.CLGO, 
						W3.IPGO1,  W3.IPGO2,  W3.IPGO3,  W3.IPGO4,  W3.IPGO5,  W3.IPGO6,  W3.IPGO7,  W3.IPGO8,  W3.IPGO9,  W3.IPGO10,
						W3.IPGO11, W3.IPGO12, W3.IPGO13, W3.IPGO14, W3.IPGO15, W3.IPGO16, W3.IPGO17, W3.IPGO18, W3.IPGO19, W3.IPGO20,
						SU.SUN_DAY, OD.OD_QTY
			)	K1,
			(
		-----------------------------------------------------  대상 품목 ------------------------------------------------------------
		SELECT	DISTINCT ITEM_ID
		FROM	(
				SELECT  ITEM_ID,
				        ITEM_NAME,
				        TYPE,
					#if ( "$!{stock_day_flag}" != "Y" ) 
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+0,   'D'), 1, '$!{stock_day}', D0)) D0,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+1,   'D'), 1, '$!{stock_day}', D1)) D1,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+2,   'D'), 1, '$!{stock_day}', D2)) D2,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+3,   'D'), 1, '$!{stock_day}', D3)) D3,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+4,   'D'), 1, '$!{stock_day}', D4)) D4,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+5,   'D'), 1, '$!{stock_day}', D5)) D5,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+6,   'D'), 1, '$!{stock_day}', D6)) D6,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+7,   'D'), 1, '$!{stock_day}', D7)) D7,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+8,   'D'), 1, '$!{stock_day}', D8)) D8,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+9,   'D'), 1, '$!{stock_day}', D9)) D9,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+10,   'D'), 1, '$!{stock_day}', D10)) D10
					#else
				        D0,
				        D1,
				        D2,
				        D3,
				        D4,
				        D5,
				        D6,
				        D7,
				        D8,
				        D9,	        
				        D10	        
					#end
				FROM 
				        (
						-- 실적 제고일수 S
						SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
		                		, IM.CAT06
						        --, W3.BASE_STOCK
						        , W3.CLGO SA
						        , TRIM(TO_CHAR(
						        	ROUND(DECODE(W3.CLGO, 0, 0, (W3.BASE_STOCK - OD.OD_QTY)/W3.CLGO),1)
						        	 ,999999999990.9)) "D0"
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
				                     - OD.OD_QTY +  W3.IPGO1)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D1"
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D2"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D3"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D4"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D5"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D6"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D7"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D8"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
						          - W3.CLGO +  W3.IPGO9)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D9"        
						        , TRIM(TO_CHAR(
				                    ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
						          - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)
						          / W3.CLGO),1)
						          ,999999999990.9)) "D10"        
						FROM    ( 
						        SELECT  ITEM_ID
						                ,SUM(BASE_STOCK) BASE_STOCK
						                ,SUM(CLGO) CLGO
						                ,SUM(IPGO1)  IPGO1
						                ,SUM(IPGO2)  IPGO2
						                ,SUM(IPGO3)  IPGO3
						                ,SUM(IPGO4)  IPGO4
						                ,SUM(IPGO5)  IPGO5
						                ,SUM(IPGO6)  IPGO6
						                ,SUM(IPGO7)  IPGO7
						                ,SUM(IPGO8)  IPGO8
						                ,SUM(IPGO9)  IPGO9
						                ,SUM(IPGO10) IPGO10
						                ,SUM(IPGO11) IPGO11
						        FROM    (
						                SELECT  -- 주간단위 출고이므로 (6 * CLGO)으로 한다.
						                		 DW.ITEM_ID 
				                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.BASE_STOCK),0) BASE_STOCK
		                                       #if ( "$!{week_flag}" == "3week" ) 
				                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.SALES_MEAN_3WEEK_ETC),0)*6 CLGO
		                                       #elseif ( "$!{week_flag}" == "1week" ) 
				                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.SALES_MEAN_1WEEK_ETC),0)*6 CLGO
		                                       #elseif ( "$!{week_flag}" == "31week" ) 
				                                , DECODE(CAL_DATE, TRUNC(SYSDATE), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0),0)*6 CLGO
				                               #else
				                                , DECODE(CAL_DATE, TRUNC(SYSDATE), SUM(DW.SALES_MEAN_3WEEK_ETC),0)*6 CLGO
		                                       #end
												, DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1	,  	SUM(DW.RECEIPT_EXPT),0) IPGO1
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+7	,  	SUM(DW.RECEIPT_EXPT),0) IPGO2
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+14	,  	SUM(DW.RECEIPT_EXPT),0) IPGO3
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+21	,  	SUM(DW.RECEIPT_EXPT),0) IPGO4
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+28	,  	SUM(DW.RECEIPT_EXPT),0) IPGO5
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+35	,  	SUM(DW.RECEIPT_EXPT),0) IPGO6
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+42	,  	SUM(DW.RECEIPT_EXPT),0) IPGO7
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+49	,  	SUM(DW.RECEIPT_EXPT),0) IPGO8
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+56	,  	SUM(DW.RECEIPT_EXPT),0) IPGO9
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+63	,  	SUM(DW.RECEIPT_EXPT),0) IPGO10
						                        , DECODE(TRUNC(CAL_DATE,'D')+1, TRUNC(SYSDATE,'D')+1+70	,  	SUM(DW.RECEIPT_EXPT),0) IPGO11
						                FROM	(
						                		SELECT	ITEM_ID,
		                                                TO_DATE(CNFM_DATE,'YYYY-MM-DD')	CAL_DATE,
		                                                SUM(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,'yyyymmdd'), DW.BASE_STOCK,0)) BASE_STOCK,
		                                                SUM(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,'yyyymmdd'), DW.SALES_MEAN_3WEEK_ETC,0)) SALES_MEAN_3WEEK_ETC,
		                                                SUM(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,'yyyymmdd'), DW.SALES_MEAN_3WEEK_ETC,0)) SALES_MEAN_1WEEK_ETC,
		                                                SUM(RECEIPT_EXPT)	RECEIPT_EXPT 
		                                        FROM	DC_DATAWAREHOUSE DW, DC_MST DM
		                                        WHERE	DW.CNFM_DATE 	>= TO_CHAR(SYSDATE,'yyyymmdd')
		                                        AND		DW.DC_ID = DM.DC_ID
		                                        AND     DM.EXPORT_FLAG IS NULL
		                                        GROUP
		                                        BY		ITEM_ID, CNFM_DATE
						                		)	DW,
						                		(
		                                        SELECT	IM.ITEM_ID
		                                        FROM	ITEM_MST IM,
								                        (
								                        --SELECT  DISTINCT ITEM_ID
								                        --FROM    ITEM_DTL
								                        --WHERE   PLANT_ID LIKE '%'||'$!{plant_id}'||'%'
								                        --AND ITYPE = 'FERT'
                                                        /* 해당 공장/라인 에서 생산되는 제품 */
                                                        SELECT  DISTINCT ITEM_ID  
                                                        FROM    ITEM_CAPA
                                                        WHERE   PLANT_ID	LIKE '%'||'$!{plant_id}'||'%'
                                                        AND     LINE_ID		LIKE '%'||'$!{line_id}'||'%'
                                                        AND     ITEM_TYPE = 'FERT'								                        
								                        ) ID				                                        
		                                        WHERE ITEM_STATUS = 'ST'
		                                        AND IM.ITEM_ID = ID.ITEM_ID(+)
		                                        AND	IM.SELL_STOP_DATE = '99991231'
		                                        AND		IM.SALES_CAT02 LIKE '%'||'$!{sales_cat02}'||'%'
		                                        AND NVL(IM.MULTI_FLAG,0)	LIKE '%'||'$!{multi_flag}'||'%'
		                                        --2015-01-22 103100006 예외추가 신명재 요청
		                                        AND (NVL(IM.CAT01,0)       NOT IN('PX', 'KAL','군용') OR IM.ITEM_ID IN ('103100006'))
		                                        AND NVL(IM.CAT03,0)       NOT IN( 'O10')
		                                        AND NVL(IM.CAT06,0)       LIKE '%'||'$!{cat06}'||'%'
		                                        AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                                        AND	IM.SEARCH_FLAG != 'N'
		                                        #if("$!{scm_charge}" == "00" )
													AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )	
												#elseif("$!{scm_charge}" != "XX" )
													AND IM.SCM_CHARGE =  '$!{scm_charge}' -- SCM담당
													AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )
												#end
		                                        #if( "$!{plant_id}" != "" || "$!{line_id}" != "")
                								AND    ID.ITEM_ID IS NOT NULL
                								#end 
		                                        #if( "$!{search_type}" == "1020" )
                								AND    IM.DIVISION        IN ('10','20')
                								#elseif( "$!{search_type}" == "10V" )
                 								AND    IM.DIVISION        IN ('10')
                								#elseif ( "$!{search_type}" == "310" )
                								AND		IM.CAT06 = '310'      
              									#elseif ( "$!{search_type}" == "P40" )
               									AND		IM.CAT03 = 'P40'
               									#elseif ( "$!{search_type}" == "T86" )
                								AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
                								#else
		                                       	AND IM.DIVISION       = '$!{search_type}'
		                                       	#end
		                                       	[AND    (IM.ITEM_ID      LIKE '%'||'$!{search_item}'||'%'
			          			  				OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]
		                                        ) 					IM
						                WHERE	DW.ITEM_ID 		= IM.ITEM_ID
		                                GROUP BY DW.ITEM_ID, DW.CAL_DATE
						                )
						        GROUP BY ITEM_ID
						        ) W3, ITEM_MST IM,
				                (
								SELECT MIN(YYYYMMDD) SUN_DAY
								FROM CAL_MST
								WHERE YYYYMMDD >= SYSDATE
								AND HOLIDAY_FLAG = 'Y'
				                ) SU,
		                        (
		                        SELECT  DW.ITEM_ID,
		                                SUM(DW.ISSUE) OD_QTY
		                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
		                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
		                        AND     DW.DC_ID = DM.DC_ID
		                        AND     DM.EXPORT_FLAG IS NULL
		                        GROUP BY DW.ITEM_ID                        
		                        )OD
						WHERE	W3.ITEM_ID = IM.ITEM_ID 
						AND		W3.ITEM_ID = OD.ITEM_ID
						GROUP BY	W3.ITEM_ID, IM.ITEM_NAME, IM.CAT06, W3.BASE_STOCK, W3.CLGO, 
									W3.IPGO1, W3.IPGO2, W3.IPGO3, W3.IPGO4, W3.IPGO5, W3.IPGO6, W3.IPGO7, W3.IPGO8, W3.IPGO9, W3.IPGO10,
									SU.SUN_DAY, OD.OD_QTY
						)
				)
		#if("$!{stock_day}" != "")
			#if ( "$!{stock_day_flag}" != "Y" ) 
				#if 	( "$!{search_period}" == "3" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0)
				#elseif ( "$!{search_period}" == "4" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0)
				#elseif ( "$!{search_period}" == "5" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999)  OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0  OR D3 &gt;  0 OR D4 &gt;  0)
				#elseif ( "$!{search_period}" == "6" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0)
				#elseif ( "$!{search_period}" == "7" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0)
				#elseif ( "$!{search_period}" == "8" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0)
				#elseif ( "$!{search_period}" == "9" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999) OR D8 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0 OR D8 &gt;  0)
				#elseif ( "$!{search_period}" == "10" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999) OR D8 &lt;  NVL($!{stock_day},999) OR D9 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0 OR D8 &gt;  0 OR D9 &gt;  0)
				#end
			#else
				#if 	( "$!{search_period}" == "10" )
				WHERE   D9 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "9" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "8" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "7" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "6" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "5" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "4" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25) OR D3 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "3" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25) OR D3 &gt;  NVL($!{stock_day},25) OR D2 &gt;  NVL($!{stock_day},25)	OR	D1 &gt;  NVL($!{stock_day},25)	OR	D0 &gt;  NVL($!{stock_day},25)
				#end
			#end
		#end
		-----------------------------------------------------  대상 품목 ------------------------------------------------------------
			)	K2
	WHERE	K1.ITEM_ID	= K2.ITEM_ID
	ORDER BY 2, 4


	#else
		SELECT  CAT06,
				K1.ITEM_ID,
		        ITEM_NAME,
		        TYPE,
				TRIM(TO_CHAR( D0  ,999999999990.9)) "D0" ,
				TRIM(TO_CHAR( D1  ,999999999990.9)) "D1" ,
				TRIM(TO_CHAR( D2  ,999999999990.9)) "D2" ,
				TRIM(TO_CHAR( D3  ,999999999990.9)) "D3" ,
				TRIM(TO_CHAR( D4  ,999999999990.9)) "D4" ,
				TRIM(TO_CHAR( D5  ,999999999990.9)) "D5" ,
				TRIM(TO_CHAR( D6  ,999999999990.9)) "D6" ,
				TRIM(TO_CHAR( D7  ,999999999990.9)) "D7" ,
				TRIM(TO_CHAR( D8  ,999999999990.9)) "D8" ,
				TRIM(TO_CHAR( D9  ,999999999990.9)) "D9" ,
				TRIM(TO_CHAR( D10 ,999999999990.9)) "D10", 
				TRIM(TO_CHAR( D11 ,999999999990.9)) "D11", 
				TRIM(TO_CHAR( D12 ,999999999990.9)) "D12", 
				TRIM(TO_CHAR( D13 ,999999999990.9)) "D13", 
				TRIM(TO_CHAR( D14 ,999999999990.9)) "D14", 
				TRIM(TO_CHAR( D15 ,999999999990.9)) "D15", 
				TRIM(TO_CHAR( D16 ,999999999990.9)) "D16", 
				TRIM(TO_CHAR( D17 ,999999999990.9)) "D17", 
				TRIM(TO_CHAR( D18 ,999999999990.9)) "D18", 
				TRIM(TO_CHAR( D19 ,999999999990.9)) "D19", 
				TRIM(TO_CHAR( D20 ,999999999990.9)) "D20",
                MOD(DENSE_RANK() OVER (ORDER BY K1.ITEM_ID),2) RANK
		FROM 
		        (
                -- 실적 제고일수 S
                SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
                        , IM.CAT06
                        --, W3.BASE_STOCK
                        , W3.CLGO SA
                        , TRIM(TO_CHAR(
                            ROUND(DECODE(OD.OD_QTY, 0, 0,W3.BASE_STOCK/ OD.OD_QTY),1)
                             ,999999999990.9)) "D0"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+1,   'yyyymmdd'))*W3.CLGO
                             - OD.OD_QTY +  W3.IPGO1)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D1"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+2,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D2"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+3,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D3"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+4,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D4"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+5,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D5"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+6,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D6"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+7,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D7"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+8,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D8"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+9,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO +  W3.IPGO9)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D9"        
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+10,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D10"
                          ------------------------
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+11, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+11,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D11"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+12, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+12,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D12"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+13, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+13,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D13"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+14, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+14,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D14"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+15, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+15,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D15"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+16, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+16,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D16"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+17, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+17,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D17"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+18, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+18,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17- W3.CLGO +  W3.IPGO18)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D18"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+19, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+19,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17- W3.CLGO +  W3.IPGO18
                          - W3.CLGO   +  W3.IPGO19)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D19"
                        , TRIM(TO_CHAR(
                            DECODE(TO_CHAR(SYSDATE+20, 'D'), 1, 0,
                            ROUND(DECODE(W3.CLGO, 0, 0,
                          (W3.BASE_STOCK +
                            F_GET_HOLI_DAY(TO_CHAR(SYSDATE+20,   'yyyymmdd'))*W3.CLGO
                          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
                          - W3.CLGO   +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
                          - W3.CLGO   +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
                          - W3.CLGO   +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
                          - W3.CLGO   +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
                          - W3.CLGO   +  W3.IPGO11- W3.CLGO +  W3.IPGO12
                          - W3.CLGO   +  W3.IPGO13- W3.CLGO +  W3.IPGO14
                          - W3.CLGO   +  W3.IPGO15- W3.CLGO +  W3.IPGO16
                          - W3.CLGO   +  W3.IPGO17- W3.CLGO +  W3.IPGO18
                          - W3.CLGO   +  W3.IPGO19- W3.CLGO +  W3.IPGO20)
                          / W3.CLGO),1))
                          ,999999999990.9)) "D20"
				FROM    ( -- 
				        SELECT  ITEM_ID
				                ,SUM(BASE_STOCK) BASE_STOCK
				                ,SUM(CLGO) CLGO
				                ,SUM(IPGO1)  IPGO1
				                ,SUM(IPGO2)  IPGO2
				                ,SUM(IPGO3)  IPGO3
				                ,SUM(IPGO4)  IPGO4
				                ,SUM(IPGO5)  IPGO5
				                ,SUM(IPGO6)  IPGO6
				                ,SUM(IPGO7)  IPGO7
				                ,SUM(IPGO8)  IPGO8
			                	,SUM(IPGO9)  IPGO9
				                ,SUM(IPGO10) IPGO10
				                ,SUM(IPGO11) IPGO11
                                -------------------
                                ,SUM(IPGO12) IPGO12
                                ,SUM(IPGO13) IPGO13
                                ,SUM(IPGO14) IPGO14
                                ,SUM(IPGO15) IPGO15
                                ,SUM(IPGO16) IPGO16
                                ,SUM(IPGO17) IPGO17
                                ,SUM(IPGO18) IPGO18
                                ,SUM(IPGO19) IPGO19
                                ,SUM(IPGO20) IPGO20
                                ,SUM(IPGO21) IPGO21
				        FROM    (
				                SELECT  ITEM_ID 
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.BASE_STOCK),0) BASE_STOCK
                                       #if ( "$!{week_flag}" == "3week" ) 
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
                                       #elseif ( "$!{week_flag}" == "1week" ) 
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_1WEEK_ETC),0) CLGO
                                       #elseif ( "$!{week_flag}" == "31week" ) 
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0),0) CLGO
		                               #else
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
                                       #end
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO1
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO2
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO3
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO4
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO5
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO6
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO7
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO8
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO9
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO10
				                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO11
                                        ---------------------------------------------------------------
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO12
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO13
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO14
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO15
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO16
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO17
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO18
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO19
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO20
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO21
				                FROM	DC_DATAWAREHOUSE DW, DC_MST DM,
				                		(
										SELECT	YYYYMMDD
										FROM	CAL_MST CAL
										WHERE	CAL.CAL_DATE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE+20)
										) 					CAL
				                WHERE	DW.CNFM_DATE 	= CAL.YYYYMMDD
		                        AND		DW.DC_ID = DM.DC_ID
		                        AND     DM.EXPORT_FLAG IS NULL
				                GROUP BY ITEM_ID, CNFM_DATE
				                )
				        GROUP BY ITEM_ID
				        ) W3, ITEM_MST IM,
		                (
						SELECT MIN(YYYYMMDD) SUN_DAY
						FROM CAL_MST
						WHERE YYYYMMDD >= SYSDATE
						AND HOLIDAY_FLAG = 'Y'
		                ) SU,
                        (
                        SELECT  DW.ITEM_ID,
                                SUM(DW.ISSUE) OD_QTY
                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                        AND     DW.DC_ID = DM.DC_ID
                        AND     DM.EXPORT_FLAG IS NULL
                        GROUP BY DW.ITEM_ID                        
                        )OD
				WHERE	W3.ITEM_ID = IM.ITEM_ID 
				AND     W3.ITEM_ID = OD.ITEM_ID
				AND		IM.SEARCH_FLAG != 'N'
				AND		IM.SALES_CAT02 LIKE '%'||'$!{sales_cat02}'||'%'
				#if("$!{scm_charge}" == "00" )
					AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )	
				#elseif("$!{scm_charge}" != "XX" )
					AND IM.SCM_CHARGE =  '$!{scm_charge}' -- SCM담당
					AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )
				#end
				GROUP
				BY		W3.ITEM_ID, IM.ITEM_NAME, IM.CAT06, W3.BASE_STOCK, W3.CLGO, 
						W3.IPGO1,  W3.IPGO2,  W3.IPGO3,  W3.IPGO4,  W3.IPGO5,  W3.IPGO6,  W3.IPGO7,  W3.IPGO8,  W3.IPGO9,  W3.IPGO10,
						W3.IPGO11, W3.IPGO12, W3.IPGO13, W3.IPGO14, W3.IPGO15, W3.IPGO16, W3.IPGO17, W3.IPGO18, W3.IPGO19, W3.IPGO20,
						SU.SUN_DAY, OD.OD_QTY
			)	K1,
			(
		-----------------------------------------------------  대상 품목 ------------------------------------------------------------
		SELECT	DISTINCT ITEM_ID
		FROM	(
				SELECT  ITEM_ID,
				        ITEM_NAME,
				        TYPE,
					#if ( "$!{stock_day_flag}" != "Y" ) 
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+0,   'D'), 1, '$!{stock_day}', D0)) D0,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+1,   'D'), 1, '$!{stock_day}', D1)) D1,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+2,   'D'), 1, '$!{stock_day}', D2)) D2,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+3,   'D'), 1, '$!{stock_day}', D3)) D3,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+4,   'D'), 1, '$!{stock_day}', D4)) D4,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+5,   'D'), 1, '$!{stock_day}', D5)) D5,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+6,   'D'), 1, '$!{stock_day}', D6)) D6,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+7,   'D'), 1, '$!{stock_day}', D7)) D7,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+8,   'D'), 1, '$!{stock_day}', D8)) D8,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+9,   'D'), 1, '$!{stock_day}', D9)) D9,
				        DECODE(D0+D1+D2+D3+D4+D5+D6+D7+D8+D9+D10, 0, 0,	        
				        DECODE(TO_CHAR(SYSDATE+10,   'D'), 1, '$!{stock_day}', D10)) D10
					#else
				        D0,
				        D1,
				        D2,
				        D3,
				        D4,
				        D5,
				        D6,
				        D7,
				        D8,
				        D9,	        
				        D10	        
					#end
				FROM 
				        (
						-- 실적 제고일수 S
						SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
		                		, IM.CAT06
						        --, W3.BASE_STOCK
						        , W3.CLGO SA
						        , TRIM(TO_CHAR(
						        	ROUND(DECODE(OD.OD_QTY, 0, 0,W3.BASE_STOCK/ OD.OD_QTY),1)
						        	 ,999999999990.9)) "D0"
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+1,   'yyyymmdd'))*W3.CLGO 
				                     - OD.OD_QTY +  W3.IPGO1)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D1"
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+2,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1- W3.CLGO +  W3.IPGO2)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D2"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+3,   'yyyymmdd'))*W3.CLGO 
						          - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D3"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+4,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D4"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+5,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D5"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+6,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D6"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+7,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D7"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+8,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D8"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+9,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
						          - W3.CLGO +  W3.IPGO9)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D9"        
						        , TRIM(TO_CHAR(
				                    DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
						        	ROUND(DECODE(W3.CLGO, 0, 0,
						          (W3.BASE_STOCK +
				                    F_GET_HOLI_DAY(TO_CHAR(SYSDATE+10,   'yyyymmdd'))*W3.CLGO 
						          - OD.OD_QTY +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
						          - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
						          - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
						          - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
						          - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)
						          / W3.CLGO),1))
						          ,999999999990.9)) "D10"        
						FROM    ( 
						        SELECT  ITEM_ID
						                ,SUM(BASE_STOCK) BASE_STOCK
						                ,SUM(CLGO) CLGO
						                ,SUM(IPGO1)  IPGO1
						                ,SUM(IPGO2)  IPGO2
						                ,SUM(IPGO3)  IPGO3
						                ,SUM(IPGO4)  IPGO4
						                ,SUM(IPGO5)  IPGO5
						                ,SUM(IPGO6)  IPGO6
						                ,SUM(IPGO7)  IPGO7
						                ,SUM(IPGO8)  IPGO8
						                ,SUM(IPGO9)  IPGO9
						                ,SUM(IPGO10) IPGO10
						                ,SUM(IPGO11) IPGO11
						        FROM    (
						                SELECT  DW.ITEM_ID 
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.BASE_STOCK),0) BASE_STOCK
		                                       #if ( "$!{week_flag}" == "3week" ) 
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "1week" ) 
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_1WEEK_ETC),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "31week" ) 
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0),0) CLGO
				                               #else
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
		                                       #end
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO1
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO2
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO3
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO4
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO5
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO6
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO7
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO8
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO9
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO10
						                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO11
						                FROM	DC_DATAWAREHOUSE	DW, DC_MST DM,
						                		(
		                                        SELECT	IM.ITEM_ID
		                                        FROM	ITEM_MST IM,
								                        (
								                        --SELECT  DISTINCT ITEM_ID
								                        --FROM    ITEM_DTL
								                        --WHERE   PLANT_ID LIKE '%'||'$!{plant_id}'||'%'
								                        --AND ITYPE = 'FERT'
                                                        /* 해당 공장/라인 에서 생산되는 제품 */
                                                        SELECT  DISTINCT ITEM_ID  
                                                        FROM    ITEM_CAPA
                                                        WHERE   PLANT_ID	LIKE '%'||'$!{plant_id}'||'%'
                                                        AND     LINE_ID		LIKE '%'||'$!{line_id}'||'%'
                                                        AND     ITEM_TYPE = 'FERT'								                        
								                        ) ID				                                        
		                                        WHERE ITEM_STATUS = 'ST'
		                                        AND IM.ITEM_ID = ID.ITEM_ID
		                                        AND	(IM.SELL_STOP_DATE > TO_CHAR(SYSDATE,'YYYYMMDD') or IM.SELL_STOP_DATE = '00000000')
		                                        AND NVL(IM.MULTI_FLAG,0)	LIKE '%'||'$!{multi_flag}'||'%'
		                                        AND (NVL(IM.CAT01,0)       NOT IN('PX', 'KAL','군용') OR IM.ITEM_ID IN ('103100006'))
		                                        AND NVL(IM.CAT03,0)       NOT IN( 'O10')
		                                        AND NVL(IM.CAT06,0)       LIKE '%'||'$!{cat06}'||'%'
		                                        AND	IM.HR_TY1 NOT LIKE '9090029%'-- 유통가공 반제품
		                                        AND	IM.SEARCH_FLAG != 'N'
		                                        AND		IM.SALES_CAT02 LIKE '%'||'$!{sales_cat02}'||'%'
		                                        #if("$!{scm_charge}" == "00" )
													AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )	
												#elseif("$!{scm_charge}" != "XX" )
													AND IM.SCM_CHARGE =  '$!{scm_charge}' -- SCM담당
													AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )
												#end
		                                        #if( "$!{search_type}" == "1020" )
                								AND    IM.DIVISION        IN ('10','20')
                								#elseif( "$!{search_type}" == "10V" )
                 								AND    IM.DIVISION        IN ('10')
                								#elseif ( "$!{search_type}" == "310" )
                								AND		IM.CAT06 = '310'      
              									#elseif ( "$!{search_type}" == "P40" )
               									AND		IM.CAT03 = 'P40'
               									#elseif ( "$!{search_type}" == "T86" )
                								AND		SUBSTR(IM.AT_FLAG,F_GET_AT_FLAG('$!{user_id}'),1) ='Y'
                								#else
		                                       	AND IM.DIVISION       = '$!{search_type}'
		                                       	#end
		                                       	AND IM.ITYPE = 'FERT'
		                                       	[AND    (IM.ITEM_ID      LIKE '%'||'$!{search_item}'||'%'
			          			  				OR     IM.ITEM_NAME     LIKE '%'||'$!{search_item}'||'%')]
		                                        ) 					IM,
		                                        (
												SELECT	YYYYMMDD
												FROM	CAL_MST CAL
												WHERE	CAL.CAL_DATE BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE+10)
												) 					CAL
						                WHERE	DW.ITEM_ID 		= IM.ITEM_ID
		                                AND     DW.CNFM_DATE 	= CAL.YYYYMMDD
				                        AND		DW.DC_ID = DM.DC_ID
				                        AND     DM.EXPORT_FLAG IS NULL
						                GROUP BY DW.ITEM_ID, CNFM_DATE
						                )
						        GROUP BY ITEM_ID
						        ) W3, ITEM_MST IM,
				                (
								SELECT MIN(YYYYMMDD) SUN_DAY
								FROM CAL_MST
								WHERE YYYYMMDD >= SYSDATE
								AND HOLIDAY_FLAG = 'Y'
				                ) SU,
		                        (
		                        SELECT  DW.ITEM_ID,
		                                SUM(DW.ISSUE) OD_QTY
		                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
		                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
		                        AND     DW.DC_ID = DM.DC_ID
		                        AND     DM.EXPORT_FLAG IS NULL
		                        GROUP BY DW.ITEM_ID                        
		                        )OD
						WHERE	W3.ITEM_ID = IM.ITEM_ID 
						AND		W3.ITEM_ID = OD.ITEM_ID
						GROUP BY	W3.ITEM_ID, IM.ITEM_NAME, IM.CAT06, W3.BASE_STOCK, W3.CLGO, 
									W3.IPGO1, W3.IPGO2, W3.IPGO3, W3.IPGO4, W3.IPGO5, W3.IPGO6, W3.IPGO7, W3.IPGO8, W3.IPGO9, W3.IPGO10,
									SU.SUN_DAY, OD.OD_QTY
						)
				)
		#if("$!{stock_day}" != "")
			#if ( "$!{stock_day_flag}" != "Y" ) 
				#if 	( "$!{search_period}" == "3" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0)
				#elseif ( "$!{search_period}" == "4" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0)
				#elseif ( "$!{search_period}" == "5" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999)  OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0  OR D3 &gt;  0 OR D4 &gt;  0)
				#elseif ( "$!{search_period}" == "6" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0)
				#elseif ( "$!{search_period}" == "7" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0)
				#elseif ( "$!{search_period}" == "8" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0)
				#elseif ( "$!{search_period}" == "9" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999) OR D8 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0 OR D8 &gt;  0)
				#elseif ( "$!{search_period}" == "10" )
				WHERE	(D1 &lt;  NVL($!{stock_day},999) OR D2 &lt;  NVL($!{stock_day},999) OR D3 &lt;  NVL($!{stock_day},999) OR D4 &lt;  NVL($!{stock_day},999) OR D5 &lt;  NVL($!{stock_day},999) OR D6 &lt;  NVL($!{stock_day},999) OR D7 &lt;  NVL($!{stock_day},999) OR D8 &lt;  NVL($!{stock_day},999) OR D9 &lt;  NVL($!{stock_day},999))
				AND		(D1 &gt;  0 OR D2 &gt;  0 OR D3 &gt;  0 OR D4 &gt;  0 OR D5 &gt;  0 OR D6 &gt;  0 OR D7 &gt;  0 OR D8 &gt;  0 OR D9 &gt;  0)
				#end
			#else
				#if 	( "$!{search_period}" == "10" )
				WHERE   D9 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "9" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "8" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "7" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "6" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "5" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "4" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25) OR D3 &gt;  NVL($!{stock_day},25)
				#elseif ( "$!{search_period}" == "3" )
				WHERE   D9 &gt;  NVL($!{stock_day},25) OR D8 &gt;  NVL($!{stock_day},25) OR D7 &gt;  NVL($!{stock_day},25) OR D6 &gt;  NVL($!{stock_day},25) OR D5 &gt;  NVL($!{stock_day},25) OR D4 &gt;  NVL($!{stock_day},25) OR D3 &gt;  NVL($!{stock_day},25) OR D2 &gt;  NVL($!{stock_day},25)	OR	D1 &gt;  NVL($!{stock_day},25)	OR	D0 &gt;  NVL($!{stock_day},25)
				#end
			#end
		#end
		-----------------------------------------------------  대상 품목 ------------------------------------------------------------
			)	K2
	WHERE	K1.ITEM_ID	= K2.ITEM_ID
	ORDER BY 2, 4
	
	#end
#end
	</query> 


	<!-- 재고 및 생산 적합성 분석 pop_up hearder (와이즈그리드) -->  
	<query id="ip_02050_get_sales_mean_week" paging="false">
	    /* GET_SALES_MEAN_WEEK_ETC */
	    SELECT  ITEM_ID,
	            F_GET_SALES_MEAN_WEEK_ETC(K1.ITEM_ID, '1W') "1W",
	            F_GET_SALES_MEAN_WEEK_ETC(K1.ITEM_ID, '3W') "3W",
	            F_GET_SALES_MEAN_WEEK_ETC(K1.ITEM_ID, '13W') "13W"
	    FROM    ITEM_MST K1
	    WHERE   ITEM_ID = '$!{item_id}'
	</query> 
	
	<query id="ip_02050_get_sales_mean_1week_pre" paging="false">
	    SELECT	NVL(MIN(ITEM_ID),'X'),			
				NVL(ROUND(SUM(QTY)/6,0),0)				SALES_MEAN_1WEEK
		FROM	SALES_ACT	T1				
		WHERE   T1.SALE_DATE    BETWEEN  TRUNC(SYSDATE-370) AND  TRUNC(SYSDATE-365)
	    AND		T1.ITEM_ID		= '$!{item_id}'    
		
	</query> 
	
	<query id="ip_02050_get_sales_mean_3week_pre" paging="false">
	    SELECT	NVL(MIN(ITEM_ID),'X'),			
				NVL(ROUND(SUM(QTY)/18,0),0)				SALES_MEAN_1WEEK
		FROM	SALES_ACT	T1				
		WHERE	T1.SALE_DATE	BETWEEN TRUNC(SYSDATE-382) AND TRUNC(SYSDATE-365)
	    AND		T1.ITEM_ID		= '$!{item_id}'    
	
		
	</query> 
	
	<query id="ip_02050_get_sales_mean_month" paging="false">
	    /* GET_SALES_MEAN_WEEK */
	    SELECT  ITEM_ID,
	            NVL(F_GET_SALES_MEAN_MONTH(K1.ITEM_ID, '1M'),0) * 6 "1M",
	            NVL(F_GET_SALES_MEAN_MONTH(K1.ITEM_ID, '3M'),0) * 6 "3M",
	            NVL(F_GET_SALES_MEAN_MONTH(K1.ITEM_ID, '13M'),0) *6 "13M"
	    FROM    ITEM_MST K1
	    WHERE   ITEM_ID = '$!{item_id}'
	</query> 
	
	<query id="ip_01130_get_sales_mean_month" paging="false">
	    SELECT	S1.ITEM_ID,
	    		ROUND((NVL(S1.MON_1,0) + NVL(S2.ONE_QTY,0))* 6,0),
	    		ROUND((NVL(S1.MON_3,0) + NVL(S2.THREE_QTY,0))* 6,0),
	    		ROUND((NVL(S1.MON_13,0) + NVL(S2.ONETH_QTY,0))* 6,0)
	    FROM
	    (
	    SELECT  ITEM_ID,
	            NVL(SUM(SALES_MEAN_1MON_TA),0) 	MON_1,
	            NVL(SUM(SALES_MEAN_3MON_TA),0) 	MON_3,
	            NVL(((SUM(SALES_MEAN_1MON_TA)+SUM(SALES_MEAN_3MON_TA))/2) ,0)		MON_13	            
	    FROM    DC_DATAWAREHOUSE
	    WHERE   ITEM_ID = '$!{item_id}'
	    AND		CNFM_DATE = TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
	    GROUP
	    BY		ITEM_ID
	    )S1,
	    (
	    SELECT	T1.CONS_ITEM_ID					 ITEM_ID,
	    		SUM(T2.MON_1 * T1.QTY)  ONE_QTY,
   				SUM(T2.MON_3 * T1.QTY)  THREE_QTY,
   				SUM(T2.MON_13 * T1.QTY) ONETH_QTY					
		FROM	(
				SELECT  IM.ITEM_ID, 
						IM.ITEM_NAME,		
				        MB.CONS_ITEM_ID,
				       	MAX(MB.PROD_VER),    
				        MB.PROD_ITEM_ID,      
				        MB.CONS_QTY,
				        NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
				        MB.CONS_QTY_UOM      
				FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
				WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
				AND		IM.ITEM_ID	= ITM.ITEM_CD
				AND		IM.ITYPE		= 'HAWA'	
				AND		IM.SELL_STOP_DATE >= TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD')
				AND		IM.USE_PR_PLAN = 'Y'
				GROUP 
				BY 		IM.ITEM_ID, 
						IM.ITEM_NAME,
				        MB.CONS_ITEM_ID,
				        MB.PROD_ITEM_ID,
				        MB.CONS_QTY,
				        MB.CONS_QTY_UOM, 
				        IM.QTY
				)T1,
				(
			    SELECT	DC.ITEM_ID,
                        NVL(SUM(DC.SALES_MEAN_1MON_TA),0) 	MON_1,
                        NVL(SUM(DC.SALES_MEAN_3MON_TA),0) 	MON_3,
                        NVL(((SUM(DC.SALES_MEAN_1MON_TA)+SUM(DC.SALES_MEAN_3MON_TA))/2),0)		MON_13	            
                FROM    DC_DATAWAREHOUSE DC, ITEM_MST IM
                WHERE	DC.CNFM_DATE = TO_CHAR(TO_DATE('$!{cnfm_date}'),'YYYYMMDD')
                AND		DC.ITEM_ID = IM.ITEM_ID                    
                GROUP
                BY		DC.ITEM_ID              
				)T2
		WHERE 	T1.PROD_ITEM_ID = T2.ITEM_ID
		GROUP
		BY		T1.CONS_ITEM_ID
		)S2
		WHERE	S1.ITEM_ID = S2.ITEM_ID (+)
	</query> 
	
	<query id="ip_01130_get_container_box" paging="false">
	    SELECT  NVL(CONTAINER_BOX,0)	            
	    FROM    ITEM_MST
	    WHERE   ITEM_ID = '$!{item_id}'
	</query> 
	
	<query id="ip_01130_get_palet_box" paging="false">
	    SELECT  NVL(BOX_PER_PALET,0)	            
	    FROM    ITEM_MST
	    WHERE   ITEM_ID = '$!{item_id}'
	</query> 
	
	<query id="ip_01130_get_term_val" paging="false">
	    SELECT  NVL(TERMVAL * 30,0)		TERMVAL,
	    		ROUND(DECODE(NVL(MAX(TERMVAL),0),0,0,(NVL(MAX(PROD_TERM -(ROUND(SYSDATE - TO_DATE('$!{cnfm_date}'),0))),0)/NVL(MAX(TERMVAL * 30),0))*100),1)||'%'	            
	    FROM    ITEM_MST
	    WHERE   ITEM_ID = '$!{item_id}'
	    GROUP
	    BY		TERMVAL
	</query> 
	


	<!-- 재고 및 생산 적합성 분석 pop_up hearder (와이즈그리드) -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_header" paging="false">

		#if("$!{term_gubn}" == "Week")
			-- (Week) 재고 및 생산 적합성 분석 pop_up hearder
			SELECT	TO_CHAR(CAL_DATE,   'MM/DD')||'('||TO_CHAR(CAL_DATE,   'DY')||')' DAY,
					'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
			FROM	(
			        SELECT	CAL_DATE
			        FROM	CAL_MST
			        WHERE	CAL_DATE >= TRUNC(SYSDATE,'D')
			        AND		WEEK_DAY = '월'
			        ORDER
			        BY		CAL_DATE
					)
		#else
			-- (Day) 재고 및 생산 적합성 분석 pop_up hearder
			SELECT  TO_CHAR(SYSDATE+ROWNUM-1,   'MM/DD')||'('||TO_CHAR(SYSDATE+ROWNUM-1,   'DY')||')' DAY,
			        'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
			FROM    CODE_MST
			WHERE   ROWNUM &lt; 62  -- org = 12 
			
		#end
	</query> 
	
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_hawa_header" paging="false">

	
			SELECT	TO_CHAR(CAL_DATE,   'MM/DD')||'('||TO_CHAR(CAL_DATE,   'DY')||')' DAY,
					'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
			FROM	(
			        SELECT	CAL_DATE
			        FROM	CAL_MST
			        WHERE	CAL_DATE BETWEEN TRUNC(SYSDATE,'D') AND TRUNC(SYSDATE+427,'D')			        
			        AND		WEEK_DAY = '월'
			        ORDER
			        BY		CAL_DATE 
					)
	
	</query> 

	<!-- 재고 및 생산 적합성 분석 pop_up hearder (DW2 과거 30일 실적) -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_header2" paging="false">
        -- 과거30일실적 hearder
        /* 
		SELECT  TO_CHAR(SYSDATE-ROWNUM,   'MM/DD')||'('||TO_CHAR(SYSDATE-ROWNUM,   'DY')||')' DAY,
		        'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
		FROM    CODE_MST
		WHERE   ROWNUM &lt; 32 --12
		*/
        -- 전월동일 hearder
        SELECT  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE),-1)+ROWNUM-1,   'MM/DD')||'('||TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE),-1)+ROWNUM-1,   'DY')||')' DAY,
                'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
        FROM    CODE_MST
        WHERE   ROWNUM &lt; 32		
	</query>
	
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_hawa_header2" paging="false">
        -- 과거30일실적 hearder      
		SELECT	TO_CHAR(CAL_DATE,   'MM/DD')||'('||TO_CHAR(CAL_DATE,   'DY')||')' DAY,
				'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
		FROM	(
			        SELECT	CAL_DATE
			        FROM	CAL_MST
			        WHERE	CAL_DATE BETWEEN TRUNC(SYSDATE-210,'D') AND TRUNC(SYSDATE+7,'D')			        
			        AND		WEEK_DAY = '월'
			        ORDER
			        BY		CAL_DATE 
				)
		
	</query>

	<!-- 재고 및 생산 적합성 분석 pop_up hearder (DW3 전년 동일) -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_header3" paging="false">
        -- 전년동일 hearder -30일, +30일
		SELECT  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE),-13)+ROWNUM-1,   'MM/DD')||'('||TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE),-13)+ROWNUM-1,   'DY')||')' DAY,
		        'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
		FROM    CODE_MST
		WHERE   ROWNUM &lt; 62
	</query>
	
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_hawa_header3" paging="false">
        -- 전년동일 hearder -30일, +30일
		SELECT	TO_CHAR(CAL_DATE,   'MM/DD')||'('||TO_CHAR(CAL_DATE,   'DY')||')' DAY,
				'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
		FROM	(
			        SELECT	CAL_DATE
			        FROM	CAL_MST
			        WHERE	CAL_DATE BETWEEN TRUNC(ADD_MONTHS(SYSDATE,-12)-210,'D') AND TRUNC(ADD_MONTHS(SYSDATE,-12)+217,'D')			        
			        AND		WEEK_DAY = '월'
			        ORDER
			        BY		CAL_DATE 
				)
	</query>

	<!-- 재고 및 생산 적합성 분석 pop_up hearder (DW4 전월 동일) -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_up_header4" paging="false">
        -- 전월동일 hearder
        SELECT  TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE),-1)+ROWNUM-1,   'MM/DD')||'('||TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE),-1)+ROWNUM-1,   'DY')||')' DAY,
                'DAY_'||LPAD(ROWNUM-1,2,'0') HD_NAME
        FROM    CODE_MST
        WHERE   ROWNUM &lt; 32
	</query>
	
		
	
	<!-- 재고 및 생산 적합성 분석 팝업 과거 30일 실적  DW2-->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_DW2" paging="false">
        -- 과거 30일 실적 
        SELECT  '과거 30일',  --과거 30일부터 오늘 순으로
        		ROUND(SUM(SA.QTY)/31)  "기간평균",  
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+00)    ,SA.QTY,   0))    DAY_31,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+01)    ,SA.QTY,   0))    DAY_30,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+02)    ,SA.QTY,   0))    DAY_29,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+03)    ,SA.QTY,   0))    DAY_28,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+04)    ,SA.QTY,   0))    DAY_27,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+05)    ,SA.QTY,   0))    DAY_26,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+06)    ,SA.QTY,   0))    DAY_25,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+07)    ,SA.QTY,   0))    DAY_24,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+08)    ,SA.QTY,   0))    DAY_23,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+09)    ,SA.QTY,   0))    DAY_22,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+10)    ,SA.QTY,   0))    DAY_21,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+11)    ,SA.QTY,   0))    DAY_20,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+12)    ,SA.QTY,   0))    DAY_19,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+13)    ,SA.QTY,   0))    DAY_18,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+14)    ,SA.QTY,   0))    DAY_17,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+15)    ,SA.QTY,   0))    DAY_16,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+16)    ,SA.QTY,   0))    DAY_15,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+17)    ,SA.QTY,   0))    DAY_14,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+18)    ,SA.QTY,   0))    DAY_13,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+19)    ,SA.QTY,   0))    DAY_12,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+20)    ,SA.QTY,   0))    DAY_11,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+21)    ,SA.QTY,   0))    DAY_10,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+22)    ,SA.QTY,   0))    DAY_09,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+23)    ,SA.QTY,   0))    DAY_08,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+24)    ,SA.QTY,   0))    DAY_07,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+25)    ,SA.QTY,   0))    DAY_06,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+26)    ,SA.QTY,   0))    DAY_05,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+27)    ,SA.QTY,   0))    DAY_04,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+28)    ,SA.QTY,   0))    DAY_03,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+29)    ,SA.QTY,   0))    DAY_02,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+30)    ,SA.QTY,   0))    DAY_01
        FROM    (
                SELECT  SALE_DATE, ITEM_ID, SUM(QTY) QTY 
                FROM    SALES_ACT
                WHERE   SALE_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE),-1) AND ADD_MONTHS(TRUNC(SYSDATE),-1)+30
                AND     ITEM_ID = '$!{item_id}'
                --AND        ACT_TYPE = '01'
                GROUP BY SALE_DATE, ITEM_ID
                )SA,
                (
                SELECT  COUNT(CAL_DATE) CNT
                FROM    CAL_MST
                WHERE   CAL_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE),-1) AND ADD_MONTHS(TRUNC(SYSDATE),-1)+30
                AND     HOLIDAY_FLAG IS NULL
                )
                GROUP BY CNT
	</query>
	
	<query id="ip_02050_Inventory_production_analysis_list_pop_hawa_DW2" paging="false">
        -- 과거 30주 실적 
        SELECT  '과거 30주',  --과거 30일부터 오늘 순으로
        		ROUND(SUM(WEEK + WEEK_P01+WEEK_P02+WEEK_P03+WEEK_P04+WEEK_P05+WEEK_P06+WEEK_P07+WEEK_P08+WEEK_P09+WEEK_P10+
        			WEEK_P11+WEEK_P12+WEEK_P13+WEEK_P14+WEEK_P15+WEEK_P16+WEEK_P17+WEEK_P18+WEEK_P19+WEEK_P20+
        			WEEK_P21+WEEK_P22+WEEK_P23+WEEK_P24+WEEK_P25+WEEK_P26+WEEK_P27+WEEK_P28+WEEK_P29+WEEK_P30)/31,0)	  "기간평균",  
                WEEK_P30,
                WEEK_P29,
                WEEK_P28,
                WEEK_P27,
                WEEK_P26,
                WEEK_P25,
                WEEK_P24,
                WEEK_P23,
                WEEK_P22,
                WEEK_P21,
                WEEK_P20,
                WEEK_P19,
                WEEK_P18,
                WEEK_P17,
                WEEK_P16,
                WEEK_P15,
                WEEK_P14,
                WEEK_P13,
                WEEK_P12,
                WEEK_P11,
                WEEK_P10,
                WEEK_P09,
                WEEK_P08,
                WEEK_P07,
                WEEK_P06,
                WEEK_P05,
                WEEK_P04,
                WEEK_P03,
                WEEK_P02,
                WEEK_P01,
                WEEK
        FROM    SALES_WEEK_AGG
        WHERE	GUBN = '1'
        AND		VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
        AND		ITEM_ID = '$!{item_id}'
        GROUP
        BY		WEEK,WEEK_P01,WEEK_P02,WEEK_P03,WEEK_P04,WEEK_P05,WEEK_P06,WEEK_P07,WEEK_P08,WEEK_P09,WEEK_P10,
        		WEEK_P11,WEEK_P12,WEEK_P13,WEEK_P14,WEEK_P15,WEEK_P16,WEEK_P17,WEEK_P18,WEEK_P19,WEEK_P20,
        		WEEK_P21,WEEK_P22,WEEK_P23,WEEK_P24,WEEK_P25,WEEK_P26,WEEK_P27,WEEK_P28,WEEK_P29,WEEK_P30
	</query>
	
	<!-- 재고 및 생산 적합성 분석 팝업 전년 동일  실적  DW3 -->  
	<!-- 재고 및 생산 적합성 분석 팝업 전년 동일  실적  DW3 -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_DW3" paging="false">	
			-- 전년 동일 
        SELECT  '전년 동일', --12
        		ROUND(SUM(SA.QTY)/61)  "기간평균",
                /* 동일이전 */
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+00)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+01)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+02)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+03)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+04)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+05)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+06)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+07)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+08)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+09)    ,SA.QTY,   0))    DAY,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+10)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+11)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+12)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+13)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+14)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+15)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+16)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+17)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+18)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+19)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+20)    ,SA.QTY,   0))    DAY,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+21)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+22)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+23)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+24)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+25)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+26)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+27)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+28)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+29)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+30)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+31)    ,SA.QTY,   0))    DAY,
                /* 동일이후 */
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+32)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+33)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+34)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+35)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+36)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+37)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+38)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+39)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+40)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+41)    ,SA.QTY,   0))    DAY,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+42)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+43)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+44)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+45)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+46)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+47)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+48)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+49)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+50)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+51)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+52)    ,SA.QTY,   0))    DAY,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+53)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+54)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+55)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+56)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+57)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+58)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+59)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+60)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+61)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+62)    ,SA.QTY,   0))    DAY,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE), -13)+63)    ,SA.QTY,   0))    DAY
        FROM    (
                SELECT  SALE_DATE, ITEM_ID, SUM(QTY) QTY
                FROM    SALES_ACT
                WHERE   SALE_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE), -13)+00 AND ADD_MONTHS(TRUNC(SYSDATE), -13)+63
                AND     ITEM_ID = '$!{item_id}'
                --AND        ACT_TYPE = '01'
                GROUP BY SALE_DATE, ITEM_ID
                )SA,
                (
                SELECT  COUNT(CAL_DATE) CNT
                FROM    CAL_MST
                WHERE   CAL_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE), -13)+00 AND ADD_MONTHS(TRUNC(SYSDATE), -13)+63
                AND     HOLIDAY_FLAG IS NULL 
                )
                GROUP BY CNT
	</query>
	
	<query id="ip_02050_Inventory_production_analysis_list_pop_hawa_DW3" paging="false">	
 				-- 전년 동주
        SELECT  '전년동주',  --과거 30일부터 오늘 순으로
        		ROUND(SUM(WEEK + WEEK_P01+WEEK_P02+WEEK_P03+WEEK_P04+WEEK_P05+WEEK_P06+WEEK_P07+WEEK_P08+WEEK_P09+WEEK_P10+
        			WEEK_P11+WEEK_P12+WEEK_P13+WEEK_P14+WEEK_P15+WEEK_P16+WEEK_P17+WEEK_P18+WEEK_P19+WEEK_P20+
        			WEEK_P21+WEEK_P22+WEEK_P23+WEEK_P24+WEEK_P25+WEEK_P26+WEEK_P27+WEEK_P28+WEEK_P29+WEEK_P30)/31,0)  "기간평균",  
                WEEK_P30,
                WEEK_P29,
                WEEK_P28,
                WEEK_P27,
                WEEK_P26,
                WEEK_P25,
                WEEK_P24,
                WEEK_P23,
                WEEK_P22,
                WEEK_P21,
                WEEK_P20,
                WEEK_P19,
                WEEK_P18,
                WEEK_P17,
                WEEK_P16,
                WEEK_P15,
                WEEK_P14,
                WEEK_P13,
                WEEK_P12,
                WEEK_P11,
                WEEK_P10,
                WEEK_P09,
                WEEK_P08,
                WEEK_P07,
                WEEK_P06,
                WEEK_P05,
                WEEK_P04,
                WEEK_P03,
                WEEK_P02,
                WEEK_P01,
                WEEK,
                WEEK_M00,
                WEEK_M01,
                WEEK_M02,
                WEEK_M03,
                WEEK_M04,
                WEEK_M05,
                WEEK_M06,
                WEEK_M07,
                WEEK_M08,
                WEEK_M09,
                WEEK_M10,
                WEEK_M11,
                WEEK_M12,
                WEEK_M13,
                WEEK_M14,
                WEEK_M15,
                WEEK_M16,
                WEEK_M17,
                WEEK_M18,
                WEEK_M19,
                WEEK_M20,
                WEEK_M21,
                WEEK_M22,
                WEEK_M23,
                WEEK_M24,
                WEEK_M25,
                WEEK_M26,
                WEEK_M27,
                WEEK_M28,
                WEEK_M29,
                WEEK_M30
        FROM    SALES_WEEK_AGG
        WHERE	GUBN = '2'
        AND		VERSION = TO_CHAR(SYSDATE,'YYYYMMDD')
        AND		ITEM_ID = '$!{item_id}'
        GROUP
        BY		WEEK,WEEK_P01,WEEK_P02,WEEK_P03,WEEK_P04,WEEK_P05,WEEK_P06,WEEK_P07,WEEK_P08,WEEK_P09,WEEK_P10,
        		WEEK_P11,WEEK_P12,WEEK_P13,WEEK_P14,WEEK_P15,WEEK_P16,WEEK_P17,WEEK_P18,WEEK_P19,WEEK_P20,
        		WEEK_P21,WEEK_P22,WEEK_P23,WEEK_P24,WEEK_P25,WEEK_P26,WEEK_P27,WEEK_P28,WEEK_P29,WEEK_P30,
        		WEEK_M00,WEEK_M01,WEEK_M02,WEEK_M03,WEEK_M04,WEEK_M05,WEEK_M06,WEEK_M07,WEEK_M08,WEEK_M09,WEEK_M10,
        		WEEK_M11,WEEK_M12,WEEK_M13,WEEK_M14,WEEK_M15,WEEK_M16,WEEK_M17,WEEK_M18,WEEK_M19,WEEK_M20,
        		WEEK_M21,WEEK_M22,WEEK_M23,WEEK_M24,WEEK_M25,WEEK_M26,WEEK_M27,WEEK_M28,WEEK_M29,WEEK_M30
	</query>

	<!-- 재고 및 생산 적합성 분석 팝업 월년 동일  실적  DW4 -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_DW4" paging="false">	
		-- 전월 동일 
        SELECT  '전월 동일', --12
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+00)    ,SA.QTY,   0))    DAY_20,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+01)    ,SA.QTY,   0))    DAY_19,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+02)    ,SA.QTY,   0))    DAY_18,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+03)    ,SA.QTY,   0))    DAY_17,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+04)    ,SA.QTY,   0))    DAY_16,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+05)    ,SA.QTY,   0))    DAY_15,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+06)    ,SA.QTY,   0))    DAY_14,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+07)    ,SA.QTY,   0))    DAY_13,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+08)    ,SA.QTY,   0))    DAY_12,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+09)    ,SA.QTY,   0))    DAY_11,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+10)    ,SA.QTY,   0))    DAY_10,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+11)    ,SA.QTY,   0))    DAY_09,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+12)    ,SA.QTY,   0))    DAY_08,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+13)    ,SA.QTY,   0))    DAY_07,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+14)    ,SA.QTY,   0))    DAY_06,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+15)    ,SA.QTY,   0))    DAY_05,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+16)    ,SA.QTY,   0))    DAY_04,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+17)    ,SA.QTY,   0))    DAY_03,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+18)    ,SA.QTY,   0))    DAY_02,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+19)    ,SA.QTY,   0))    DAY_01,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+20)    ,SA.QTY,   0))    DAY_00,
                --
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+21)    ,SA.QTY,   0))    DAY_10,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+22)    ,SA.QTY,   0))    DAY_09,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+23)    ,SA.QTY,   0))    DAY_08,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+24)    ,SA.QTY,   0))    DAY_07,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+25)    ,SA.QTY,   0))    DAY_06,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+26)    ,SA.QTY,   0))    DAY_05,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+27)    ,SA.QTY,   0))    DAY_04,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+28)    ,SA.QTY,   0))    DAY_03,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+29)    ,SA.QTY,   0))    DAY_02,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+30)    ,SA.QTY,   0))    DAY_01,
                SUM(DECODE(SALE_DATE,   TRUNC(ADD_MONTHS(TRUNC(SYSDATE),-1)+31)    ,SA.QTY,   0))    DAY_00
        FROM    (
                SELECT  SALE_DATE, ITEM_ID, QTY 
                FROM    SALES_ACT
                WHERE   SALE_DATE BETWEEN ADD_MONTHS(TRUNC(SYSDATE),-1) AND ADD_MONTHS(TRUNC(SYSDATE),-1)+32
                AND     ITEM_ID = '$!{item_id}'
                --AND        ACT_TYPE = '01'
                )SA        
	</query>


	<!-- 재고 및 생산 적합성 분석 팝업 판매계획 -->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_plan" paging="false">	
        -- 계획 제고일수 pop_up 
		SELECT	DECODE(A, 1, '기초재고',  2, '재고일수',  3, '판매계획', 4, '생산입고')  "구분",
		        DECODE(A, 1, D0기초재고,  2, D0재고일수,  3, 당일주문, 4, D0입고)  D0,
		        DECODE(A, 1, D1기초재고,  2, D1재고일수,  3, D1판매, 4, D1입고)  D1,
		        DECODE(A, 1, D2기초재고,  2, D2재고일수,  3, D2판매, 4, D2입고)  D2,
		        DECODE(A, 1, D3기초재고,  2, D3재고일수,  3, D3판매, 4, D3입고)  D3,
		        DECODE(A, 1, D4기초재고,  2, D4재고일수,  3, D4판매, 4, D4입고)  D4,
		        DECODE(A, 1, D5기초재고,  2, D5재고일수,  3, D5판매, 4, D5입고)  D5,
		        DECODE(A, 1, D6기초재고,  2, D6재고일수,  3, D6판매, 4, D6입고)  D6,
		        DECODE(A, 1, D7기초재고,  2, D7재고일수,  3, D7판매, 4, D7입고)  D7,
		        DECODE(A, 1, D8기초재고,  2, D8재고일수,  3, D8판매, 4, D8입고)  D8,
		        DECODE(A, 1, D9기초재고,  2, D9재고일수,  3, D9판매, 4, D9입고)  D9,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D10판매,4, D10입고) D10,
		        ------------------------------------------------------------------
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D11판매,4, D11입고) D11,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D12판매,4, D12입고) D12,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D13판매,4, D13입고) D13,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D14판매,4, D14입고) D14,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D15판매,4, D15입고) D15,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D16판매,4, D16입고) D16,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D17판매,4, D17입고) D17,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D18판매,4, D18입고) D18,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D19판매,4, D19입고) D19,
		        DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, D20판매,4, D20입고) D20
		FROM 
		        (
		        -- 계획 제고일수 
		        -- 기초재고-재고일수-판매계획-생산입고예정
		        SELECT  W3.ITEM_ID, IM.ITEM_NAME, '계획' TYPE
		                --, W3.BASE_STOCK량
		                , MAX(OD.OD_QTY) "당일주문"
		                -------------------------------------
		                , W3.BASE_STOCK "D0기초재고"
		                , TRIM(TO_CHAR(
		                    ROUND(DECODE(W3.CLGO0, 0, 0,W3.BASE_STOCK/ W3.CLGO0),1)
		                     ,999999999990.9)) "D0재고일수"
		                , W3.CLGO0 "D0판매"
		                , W3.IPGO0 "D0입고"
		                -------------------------------------
		                , DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                     - W3.CLGO0 +  W3.IPGO0)) "D1기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO1, 0, 0,
		                  (W3.BASE_STOCK 
		                  - W3.CLGO0 +  W3.IPGO0)
		                  / W3.CLGO1),1))
		                  ,999999999990.9)) "D1재고일수"
		                , W3.CLGO1 "D1판매"
		                , W3.IPGO1 "D1입고"
		                ---------------------------------------------------
		                , DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1))  "D2기초재고"       
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO2, 0, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1)
		                  / W3.CLGO2),1))
		                  ,999999999990.9)) "D2재고일수" 
		                , W3.CLGO2 "D2판매"
		                , W3.IPGO2 "D2입고"
		                  ---------------------------------------------------       
		                , DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2)) "D3기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO3, 0, 0,
		                 (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2)
		                  / W3.CLGO3),1))
		                  ,999999999990.9)) "D3재고일수"
		                , W3.CLGO3 "D3판매"
		                , W3.IPGO3 "D3입고"
		                  ---------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
		                   (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3)) "D4기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO4, 0, 0,
		                 (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3)
		                  / W3.CLGO4),1))
		                  ,999999999990.9)) "D4재고일수"
		                , W3.CLGO4 "D4판매"
		                , W3.IPGO4 "D4입고"
		                  -------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4)) "D5기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO5, 0, 0,
		                 (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4)
		                  / W3.CLGO5),1))
		                  ,999999999990.9)) "D5재고일수" 
		                , W3.CLGO5 "D5판매"
		                , W3.IPGO5 "D5입고"
		                  --------------------------------------------------------       
		                , DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
		                   (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5)) "D6기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO6, 0, 0,
		                 (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5)
		                  / W3.CLGO6),1))
		                  ,999999999990.9)) "D6재고일수" 
		                , W3.CLGO6 "D6판매"
		                , W3.IPGO6 "D6입고"
		                  ---------------------------------------------------------       
		                ,  DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
		                   (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6)) "D7기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO7, 0, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 )
		                  / W3.CLGO7),1))
		                  ,999999999990.9)) "D7재고일수"
		                , W3.CLGO7 "D7판매"
		                , W3.IPGO7 "D7입고"
		                  ---------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 - W3.CLGO7 +  W3.IPGO7)) "D8기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO8, 0, 0,
		                 (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 - W3.CLGO7 +  W3.IPGO7)
		                  / W3.CLGO8),1))
		                  ,999999999990.9)) "D8재고일수"
		                , W3.CLGO8 "D8판매"
		                , W3.IPGO8 "D8입고"
		                  -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 - W3.CLGO7 +  W3.IPGO7
		                  - W3.CLGO8 +  W3.IPGO8)) "D9기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO9, 0, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 - W3.CLGO7 +  W3.IPGO7
		                  - W3.CLGO8 +  W3.IPGO8)
		                  / W3.CLGO9),1))
		                  ,999999999990.9)) "D9재고일수"
		                , W3.CLGO9 "D9판매"
		                , W3.IPGO9 "D9입고"
		                  -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 - W3.CLGO7 +  W3.IPGO7
		                  - W3.CLGO8 +  W3.IPGO8 - W3.CLGO9 +  W3.IPGO9)) "D10기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO10, 0, 0,
		                  (W3.BASE_STOCK +
		                  - W3.CLGO0 +  W3.IPGO0 - W3.CLGO1 +  W3.IPGO1
		                  - W3.CLGO2 +  W3.IPGO2 - W3.CLGO3 +  W3.IPGO3 
		                  - W3.CLGO4 +  W3.IPGO4 - W3.CLGO5 +  W3.IPGO5
		                  - W3.CLGO6 +  W3.IPGO6 - W3.CLGO7 +  W3.IPGO7
		                  - W3.CLGO8 +  W3.IPGO8 - W3.CLGO9 +  W3.IPGO9)
		                  / W3.CLGO10),1))
		                  ,999999999990.9)) "D10재고일수"
		                , W3.CLGO10 "D10판매"
		                , W3.IPGO10 "D10입고"
		                -------------------
		                , W3.CLGO11 "D11판매"
		                , W3.CLGO12 "D12판매"
		                , W3.CLGO13 "D13판매"
		                , W3.CLGO14 "D14판매"
		                , W3.CLGO15 "D15판매"
		                , W3.CLGO16 "D16판매"
		                , W3.CLGO17 "D17판매"
		                , W3.CLGO18 "D18판매"
		                , W3.CLGO19 "D19판매"
		                , W3.CLGO20 "D20판매"
		                -------------------
		                , W3.IPGO11 "D11입고"
		                , W3.IPGO12 "D12입고"
		                , W3.IPGO13 "D13입고"
		                , W3.IPGO14 "D14입고"
		                , W3.IPGO15 "D15입고"
		                , W3.IPGO16 "D16입고"
		                , W3.IPGO17 "D17입고"
		                , W3.IPGO18 "D18입고"
		                , W3.IPGO19 "D19입고"
		                , W3.IPGO20 "D20입고"
		        FROM    (
		                
		                SELECT  ITEM_ID
		                        ,SUM(BASE_STOCK) BASE_STOCK
		                        ,SUM(SALES_MEAN_3WEEK) SALES_MEAN_3WEEK
		                        ,SUM(IPGO1)  IPGO0
		                        ,SUM(IPGO2)  IPGO1
		                        ,SUM(IPGO3)  IPGO2
		                        ,SUM(IPGO4)  IPGO3 
		                        ,SUM(IPGO5)  IPGO4
		                        ,SUM(IPGO6)  IPGO5
		                        ,SUM(IPGO7)  IPGO6
		                        ,SUM(IPGO8)  IPGO7
		                        ,SUM(IPGO9)  IPGO8
		                        ,SUM(IPGO10) IPGO9
		                        ,SUM(IPGO11) IPGO10
		                        -------------------
		                        ,SUM(IPGO12) IPGO11
		                        ,SUM(IPGO13) IPGO12
		                        ,SUM(IPGO14) IPGO13
		                        ,SUM(IPGO15) IPGO14
		                        ,SUM(IPGO16) IPGO15
		                        ,SUM(IPGO17) IPGO16
		                        ,SUM(IPGO18) IPGO17
		                        ,SUM(IPGO19) IPGO18
		                        ,SUM(IPGO20) IPGO19
		                        ,SUM(IPGO21) IPGO20
		                        -------------------
		                        ,SUM(CLGO1)  CLGO0
		                        ,SUM(CLGO2)  CLGO1
		                        ,SUM(CLGO3)  CLGO2
		                        ,SUM(CLGO4)  CLGO3
		                        ,SUM(CLGO5)  CLGO4
		                        ,SUM(CLGO6)  CLGO5
		                        ,SUM(CLGO7)  CLGO6
		                        ,SUM(CLGO8)  CLGO7
		                        ,SUM(CLGO9)  CLGO8
		                        ,SUM(CLGO10) CLGO9
		                        ,SUM(CLGO11) CLGO10
		                        ------------------
		                        ,SUM(CLGO12) CLGO11                        
		                        ,SUM(CLGO13) CLGO12                        
		                        ,SUM(CLGO14) CLGO13                        
		                        ,SUM(CLGO15) CLGO14                        
		                        ,SUM(CLGO16) CLGO15                        
		                        ,SUM(CLGO17) CLGO16                        
		                        ,SUM(CLGO18) CLGO17                       
		                        ,SUM(CLGO19) CLGO18                        
		                        ,SUM(CLGO20) CLGO19                        
		                        ,SUM(CLGO21) CLGO20                        
		                FROM    (
		                        SELECT  ITEM_ID 
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.BASE_STOCK),0) BASE_STOCK
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK),0) SALES_MEAN_3WEEK
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO1
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO2
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO3
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO4
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO5
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO6
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO7
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO8
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO9
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO10
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO11
		                                ----------------------------------------------------------------------------------
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO12
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO13
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO14
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO15
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO16
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO17
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO18
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO19
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO20
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO21
		                                ----------------------------------------------------------------------------------
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO1
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO2
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO3
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO4
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO5
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO6
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO7
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO8
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO9
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO10
		                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO11
		                                ----------------------------------------------------------------------------------                                
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO12
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO13
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO14
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO15
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO16
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO17
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO18
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO19
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO20
                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.SALES_PLAN+DW.PROM_PLAN),0) CLGO21
		                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
		                        WHERE   CNFM_DATE BETWEEN TO_CHAR(SYSDATE, 'yyyymmdd') AND TO_CHAR(SYSDATE+20, 'yyyymmdd')
		                        AND		DW.DC_ID = DM.DC_ID
		                        AND     DM.EXPORT_FLAG IS NULL
		                        AND     ITEM_ID = '$!{item_id}'
		                        GROUP BY ITEM_ID, CNFM_DATE
		                        )
		                GROUP BY ITEM_ID
		                
		                ) W3, ITEM_MST IM,
                        (
                        SELECT  DW.ITEM_ID,
                                SUM(DW.ISSUE) OD_QTY
                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                        AND     DW.DC_ID = DM.DC_ID
                        AND     ITEM_ID = '$!{item_id}'
                        AND     DM.EXPORT_FLAG IS NULL
                        GROUP BY DW.ITEM_ID		                        
                        )OD
		        WHERE	W3.ITEM_ID = IM.ITEM_ID
                AND     W3.ITEM_ID = OD.ITEM_ID
		        GROUP
		        BY		W3.ITEM_ID, IM.ITEM_NAME, W3.BASE_STOCK, W3.SALES_MEAN_3WEEK, 
		                W3.IPGO0,W3.IPGO1, W3.IPGO2, W3.IPGO3, W3.IPGO4, W3.IPGO5, W3.IPGO6, W3.IPGO7, W3.IPGO8, W3.IPGO9, W3.IPGO10,
		                W3.IPGO11, W3.IPGO12, W3.IPGO13, W3.IPGO14, W3.IPGO15, W3.IPGO16, W3.IPGO17, W3.IPGO18, W3.IPGO19, W3.IPGO20,
		                W3.CLGO0,W3.CLGO1, W3.CLGO2, W3.CLGO3, W3.CLGO4, W3.CLGO5, W3.CLGO6, W3.CLGO7, W3.CLGO8, W3.CLGO9, W3.CLGO10,
		                W3.CLGO11, W3.CLGO12, W3.CLGO13, W3.CLGO14, W3.CLGO15, W3.CLGO16, W3.CLGO17, W3.CLGO18, W3.CLGO19, W3.CLGO20
		         ),           
		        (            
		        SELECT 1 A
		        FROM DUAL
		        UNION ALL
		        SELECT 2 A
		        FROM DUAL
		        UNION ALL
		        SELECT 3 A
		        FROM DUAL
		        UNION ALL
		        SELECT 4 A
		        FROM DUAL
		)	
	</query> 

	<!-- 재고 및 생산 적합성 분석 팝업(일자별) -실적-->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_act" paging="false">	
		-- 실적 제고일수 pop_up 
		SELECT #if ( "$!{week_flag}" == "3week" ) 
                DECODE(A, 1, '기초재고', 2, '재고일수',  3, '3주 평균', 4, '생산계획', 5, '가용입고량', 6, '가용재고', 7, '가용일수')   "구분",
               #elseif ( "$!{week_flag}" == "1week" ) 
                DECODE(A, 1, '기초재고', 2, '재고일수',  3, '1주 평균', 4, '생산계획', 5, '가용입고량', 6, '가용재고', 7, '가용일수')   "구분",
               #elseif ( "$!{week_flag}" == "31week" ) 
                DECODE(A, 1, '기초재고', 2, '재고일수',  3, '3주+1주', 4, '생산계획', 5, '가용입고량', 6, '가용재고', 7, '가용일수')   "구분",
               #elseif ( "$!{week_flag}" == "simul" ) 
                DECODE(A, 1, '기초재고', 2, '재고일수',  3, 'Simul',  4, '생산계획', 5, '가용입고량', 6, '가용재고', 7, '가용일수')   "구분",
               #else
                DECODE(A, 1, '기초재고', 2, '재고일수',  3, '평균판매', 4, '생산계획', 5, '가용입고량', 6, '가용재고', 7, '가용일수')   "구분",
               #end
                DECODE(A, 1, D0기초재고,  2, D0재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)   ), 'Y', 0, 당일주문), 4, D0입고,    5, D0야간입고)   D0,
                DECODE(A, 1, D1기초재고,  2, D1재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+1 ), 'Y', 0, 평균판매), 4, D1입고,    5, D1야간입고)   D1,
                DECODE(A, 1, D2기초재고,  2, D2재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+2 ), 'Y', 0, 평균판매), 4, D2입고,    5, D2야간입고)   D2,
                DECODE(A, 1, D3기초재고,  2, D3재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+3 ), 'Y', 0, 평균판매), 4, D3입고,    5, D3야간입고)   D3,
                DECODE(A, 1, D4기초재고,  2, D4재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+4 ), 'Y', 0, 평균판매), 4, D4입고,    5, D4야간입고)   D4,
                DECODE(A, 1, D5기초재고,  2, D5재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+5 ), 'Y', 0, 평균판매), 4, D5입고,    5, D5야간입고)   D5,
                DECODE(A, 1, D6기초재고,  2, D6재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+6 ), 'Y', 0, 평균판매), 4, D6입고,    5, D6야간입고)   D6,
                DECODE(A, 1, D7기초재고,  2, D7재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+7 ), 'Y', 0, 평균판매), 4, D7입고,    5, D7야간입고)   D7,
                DECODE(A, 1, D8기초재고,  2, D8재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+8 ), 'Y', 0, 평균판매), 4, D8입고,    5, D8야간입고)   D8,
                DECODE(A, 1, D9기초재고,  2, D9재고일수,  3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+9 ), 'Y', 0, 평균판매), 4, D9입고,    5, D9야간입고)   D9,
                DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+10), 'Y', 0, 평균판매), 4, D10입고,   5, D10야간입고)  D10,
                -----------------------------------------------------------L------------------------ ---   ' '
                DECODE(A, 1, D11기초재고, 2, D11재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+11), 'Y', 0, 평균판매), 4, D11입고,   5, D11야간입고)  D11,
                DECODE(A, 1, D12기초재고, 2, D12재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+12), 'Y', 0, 평균판매), 4, D12입고,   5, D12야간입고)  D12,
                DECODE(A, 1, D13기초재고, 2, D13재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+13), 'Y', 0, 평균판매), 4, D13입고,   5, D13야간입고)  D13,
                DECODE(A, 1, D14기초재고, 2, D14재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+14), 'Y', 0, 평균판매), 4, D14입고,   5, D14야간입고)  D14,
                DECODE(A, 1, D15기초재고, 2, D15재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+15), 'Y', 0, 평균판매), 4, D15입고,   5, D15야간입고)  D15,
                DECODE(A, 1, D16기초재고, 2, D16재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+16), 'Y', 0, 평균판매), 4, D16입고,   5, D16야간입고)  D16,
                DECODE(A, 1, D17기초재고, 2, D17재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+17), 'Y', 0, 평균판매), 4, D17입고,   5, D17야간입고)  D17,
                DECODE(A, 1, D18기초재고, 2, D18재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+18), 'Y', 0, 평균판매), 4, D18입고,   5, D18야간입고)  D18,
                DECODE(A, 1, D19기초재고, 2, D19재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+19), 'Y', 0, 평균판매), 4, D19입고,   5, D19야간입고)  D19,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+20), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D20,
                -----------------------------------------------------------L------------------------ ---   ' '
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+21), 'Y', 0, 평균판매), 4, D11입고,   5, D11야간입고)  D21,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+22), 'Y', 0, 평균판매), 4, D12입고,   5, D12야간입고)  D22,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+23), 'Y', 0, 평균판매), 4, D13입고,   5, D13야간입고)  D23,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+24), 'Y', 0, 평균판매), 4, D14입고,   5, D14야간입고)  D24,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+25), 'Y', 0, 평균판매), 4, D15입고,   5, D15야간입고)  D25,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+26), 'Y', 0, 평균판매), 4, D16입고,   5, D16야간입고)  D26,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+27), 'Y', 0, 평균판매), 4, D17입고,   5, D17야간입고)  D27,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+28), 'Y', 0, 평균판매), 4, D18입고,   5, D18야간입고)  D28,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+29), 'Y', 0, 평균판매), 4, D19입고,   5, D19야간입고)  D29,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+30), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D30,
------------------------------------------------------------------------------------------------
                -----------------------------------------------------------L------------------------ ---   ' '
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+31), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D31,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+32), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D32,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+33), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D33,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+34), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D34,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+35), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D35,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+36), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D36,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+37), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D37,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+38), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D38,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+39), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D39,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+40), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D40,
                -----------------------------------------------------------L------------------------ ---   ' '
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+41), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D41,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+42), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D42,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+43), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D43,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+44), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D44,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+45), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D45,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+46), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D46,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+47), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D47,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+48), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D48,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+59), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D49,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+50), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D50,
                -----------------------------------------------------------L------------------------ ---   ' '
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+51), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D51,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+52), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D52,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+53), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D53,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+54), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D54,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+55), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D55,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+56), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D56,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+57), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D57,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+58), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D58,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+59), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D59,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, DECODE(F_GET_HOLI_DAY_FLAG(TRUNC(SYSDATE)+60), 'Y', 0, 평균판매), 4, D20입고,   5, D20야간입고)  D60
------------------------------------------------------------------------------------------------
		FROM 
		        (
		        -- 실적 제고일수 
		        -- 기초재고-재고일수-평균판매-생산입고예정
		        SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
		                --, W3.BASE_STOCK량
		                , MAX(OD.OD_QTY) "당일주문"
		                , W3.CLGO "평균판매"
		                -------------------------------------
		                , W3.BASE_STOCK "D0기초재고"
		                , TRIM(TO_CHAR(
		                    ROUND(DECODE(W3.CLGO, 0, 0,W3.BASE_STOCK/ W3.CLGO),1)
		                     ,999999999990.9)) "D0재고일수"
		                , DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,W3.IPGO1) "D0입고"
		                -------------------------------------
		                , DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+1,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END) 
		                     - W3.CLGO +  W3.IPGO1)) "D1기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+1,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END) 
		                     - W3.CLGO +  W3.IPGO1)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D1재고일수"
		                , W3.IPGO2 "D1입고"
		                ---------------------------------------------------
		                , DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+2,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2))  "D2기초재고"       
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+2, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+2,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D2재고일수" 
		                , W3.IPGO3 "D2입고"
		                  ---------------------------------------------------       
		                , DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+3,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3)) "D3기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+3, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+3,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1- W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D3재고일수"
		                , W3.IPGO4 "D3입고"
		                  ---------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+4,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)) "D4기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+4, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+4,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D4재고일수"
		                , W3.IPGO5 "D4입고"
		                  -------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+5,   'yyyymmdd')  > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5)) "D5기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+5, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+5,   'yyyymmdd')  > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D5재고일수" 
		                , W3.IPGO6 "D5입고"
		                  --------------------------------------------------------       
		                , DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+6,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)) "D6기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+6, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+6,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D6재고일수" 
		                , W3.IPGO7 "D6입고"
		                  ---------------------------------------------------------       
		                ,  DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+7,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7)) "D7기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+7, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+7,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D7재고일수"
		                , W3.IPGO8 "D7입고"
		                  ---------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+8,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)) "D8기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+8, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+8,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D8재고일수"
		                , W3.IPGO9 "D8입고"
		                  -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+9,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9)) "D9기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+9, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+9,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D9재고일수"
		                , W3.IPGO10 "D9입고"
		                  -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+10,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)) "D10기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+10, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+10,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D10재고일수"
		                , W3.IPGO11 "D10입고"
		                   -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+11, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+11,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11)) "D11기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+11, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+11,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D11재고일수"		                
		                , W3.IPGO12 "D11입고"
		                  -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+12, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+12,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12)) "D12기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+12, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+12,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D12재고일수"
		                , W3.IPGO13 "D12입고"
		                   -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+13, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+13,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13)) "D13기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+13, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+13,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D13재고일수"		                
		                , W3.IPGO14 "D13입고"
		                 -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+14, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+14,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14)) "D14기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+14, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+14,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D14재고일수"		                
		                , W3.IPGO15 "D14입고"
		               -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+15, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+15,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15)) "D15기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+14, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+14,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D15재고일수"
		                , W3.IPGO16 "D15입고"
		                -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+16, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+16,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16)) "D16기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+16, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+16,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D16재고일수"
		                , W3.IPGO17 "D16입고"
		                    -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+17, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+17,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17)) "D17기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+17, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+17,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D17재고일수"
		                , W3.IPGO18 "D17입고"
		                    -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+18, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+18,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17 - W3.CLGO +  W3.IPGO18)) "D18기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+18, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+18,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17 - W3.CLGO +  W3.IPGO18)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D18재고일수"
		                , W3.IPGO19 "D18입고"
		                         -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+19, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+19,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17 - W3.CLGO +  W3.IPGO18
		                  - W3.CLGO +  W3.IPGO19)) "D19기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+19, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+19,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17 - W3.CLGO +  W3.IPGO18
		                  - W3.CLGO +  W3.IPGO19)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D19재고일수"
		                , W3.IPGO20 "D19입고"
		                         -----------------------------------------------------------        
		                , DECODE(TO_CHAR(SYSDATE+20, 'D'), 1, 0,
		                    (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+20,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17 - W3.CLGO +  W3.IPGO18
		                  - W3.CLGO +  W3.IPGO19 - W3.CLGO +  W3.IPGO20)) "D20기초재고"
		                , TRIM(TO_CHAR(
		                    DECODE(TO_CHAR(SYSDATE+20, 'D'), 1, 0,
		                    ROUND(DECODE(W3.CLGO, 0, 0,
		                  (W3.BASE_STOCK +
		                    (CASE 
		                        WHEN TO_CHAR(SYSDATE+20,   'yyyymmdd') > SU.SUN_DAY THEN W3.CLGO
		                        ELSE 0
		                     END)
		                  - W3.CLGO +  W3.IPGO1 - W3.CLGO +  W3.IPGO2 
		                  - W3.CLGO +  W3.IPGO3 - W3.CLGO +  W3.IPGO4 
		                  - W3.CLGO +  W3.IPGO5 - W3.CLGO +  W3.IPGO6
		                  - W3.CLGO +  W3.IPGO7 - W3.CLGO +  W3.IPGO8
		                  - W3.CLGO +  W3.IPGO9 - W3.CLGO +  W3.IPGO10
		                  - W3.CLGO +  W3.IPGO11 - W3.CLGO +  W3.IPGO12
		                  - W3.CLGO +  W3.IPGO13 - W3.CLGO +  W3.IPGO14
		                  - W3.CLGO +  W3.IPGO15 - W3.CLGO +  W3.IPGO16
		                  - W3.CLGO +  W3.IPGO17 - W3.CLGO +  W3.IPGO18
		                  - W3.CLGO +  W3.IPGO19 - W3.CLGO +  W3.IPGO20)
		                  / W3.CLGO),1))
		                  ,999999999990.9)) "D20재고일수"
		                , W3.IPGO21 "D20입고"
		                --------------------
                        , W3.YA_IPGO1 "D0야간입고"
                        , W3.YA_IPGO2 "D1야간입고"
                        , W3.YA_IPGO3 "D2야간입고"
                        , W3.YA_IPGO4 "D3야간입고"
                        , W3.YA_IPGO5 "D4야간입고"
                        , W3.YA_IPGO6 "D5야간입고"
                        , W3.YA_IPGO7 "D6야간입고"
                        , W3.YA_IPGO8 "D7야간입고"
                        , W3.YA_IPGO9 "D8야간입고"
                        , W3.YA_IPGO10"D9야간입고"
                        , W3.YA_IPGO11"D10야간입고"		                
                        , W3.YA_IPGO12"D11야간입고"		                
                        , W3.YA_IPGO13"D12야간입고"		                
                        , W3.YA_IPGO14"D13야간입고"		                
                        , W3.YA_IPGO15"D14야간입고"		                
                        , W3.YA_IPGO16"D15야간입고"		                
                        , W3.YA_IPGO17"D16야간입고"		                
                        , W3.YA_IPGO18"D17야간입고"		                
                        , W3.YA_IPGO19"D18야간입고"		                
                        , W3.YA_IPGO20"D19야간입고"		                
                        , W3.YA_IPGO21"D20야간입고"		                
		        FROM    ( -- 14464
		        	 	SELECT	S1.ITEM_ID,
	                     		S1.BASE_STOCK + S2.BASE_STOCK	BASE_STOCK,
	                            S1.CLGO		+ 	S2.CLGO			CLGO,
	                            S1.IPGO1	+	S2.IPGO1		IPGO1,
	                            S1.IPGO2	+	S2.IPGO2		IPGO2,
	                            S1.IPGO3	+	S2.IPGO3		IPGO3,
	                            S1.IPGO4	+	S2.IPGO4		IPGO4,
	                            S1.IPGO5	+	S2.IPGO5		IPGO5,
	                            S1.IPGO6	+	S2.IPGO6		IPGO6,
	                            S1.IPGO7	+	S2.IPGO7		IPGO7,
	                            S1.IPGO8	+	S2.IPGO8		IPGO8,
	                            S1.IPGO9	+	S2.IPGO9		IPGO9,
	                            S1.IPGO10	+	S2.IPGO10		IPGO10,
	                            S1.IPGO11	+	S2.IPGO11		IPGO11,
	                            S1.IPGO12	+	S2.IPGO12		IPGO12,
	                            S1.IPGO13	+	S2.IPGO13		IPGO13,
	                            S1.IPGO14	+	S2.IPGO14		IPGO14,
	                            S1.IPGO15	+	S2.IPGO15		IPGO15,
	                            S1.IPGO16	+	S2.IPGO16		IPGO16,
	                            S1.IPGO17	+	S2.IPGO17		IPGO17,
	                            S1.IPGO18	+	S2.IPGO18		IPGO18,
	                            S1.IPGO19	+	S2.IPGO19		IPGO19,
	                            S1.IPGO20	+	S2.IPGO20		IPGO20,
	                            S1.IPGO21	+	S2.IPGO21		IPGO21,
	                            S1.YA_IPGO1	+	S2.YA_IPGO1		YA_IPGO1,
	                            S1.YA_IPGO2	+	S2.YA_IPGO2		YA_IPGO2,
	                            S1.YA_IPGO3	+	S2.YA_IPGO3		YA_IPGO3,
	                            S1.YA_IPGO4	+	S2.YA_IPGO4		YA_IPGO4,
	                            S1.YA_IPGO5	+	S2.YA_IPGO5		YA_IPGO5,
	                            S1.YA_IPGO6	+	S2.YA_IPGO6		YA_IPGO6,
	                            S1.YA_IPGO7	+	S2.YA_IPGO7		YA_IPGO7,
	                            S1.YA_IPGO8	+	S2.YA_IPGO8		YA_IPGO8,
	                            S1.YA_IPGO9	+	S2.YA_IPGO9		YA_IPGO9,
	                            S1.YA_IPGO10	+	S2.YA_IPGO10		YA_IPGO10,
	                            S1.YA_IPGO11	+	S2.YA_IPGO11		YA_IPGO11,
	                            S1.YA_IPGO12	+	S2.YA_IPGO12		YA_IPGO12,
	                            S1.YA_IPGO13	+	S2.YA_IPGO13		YA_IPGO13,
	                            S1.YA_IPGO14	+	S2.YA_IPGO14		YA_IPGO14,
	                            S1.YA_IPGO15	+	S2.YA_IPGO15		YA_IPGO15,
	                            S1.YA_IPGO16	+	S2.YA_IPGO16		YA_IPGO16,
	                            S1.YA_IPGO17	+	S2.YA_IPGO17		YA_IPGO17,
	                            S1.YA_IPGO18	+	S2.YA_IPGO18		YA_IPGO18,
	                            S1.YA_IPGO19	+	S2.YA_IPGO19		YA_IPGO19,
	                            S1.YA_IPGO20	+	S2.YA_IPGO20		YA_IPGO20,
	                            S1.YA_IPGO21	+	S2.YA_IPGO21		YA_IPGO21
                     	FROM	(
	                        	SELECT  ITEM_ID
				                        ,SUM(BASE_STOCK) BASE_STOCK
				                        ,SUM(CLGO) CLGO
				                        ,SUM(IPGO1)  IPGO1
				                        ,SUM(IPGO2)  IPGO2
				                        ,SUM(IPGO3)  IPGO3
				                        ,SUM(IPGO4)  IPGO4
				                        ,SUM(IPGO5)  IPGO5
				                        ,SUM(IPGO6)  IPGO6
				                        ,SUM(IPGO7)  IPGO7
				                        ,SUM(IPGO8)  IPGO8
				                        ,SUM(IPGO9)  IPGO9
				                        ,SUM(IPGO10) IPGO10
				                        ,SUM(IPGO11) IPGO11
		                                -------------------
				                        ,SUM(IPGO12) IPGO12
				                        ,SUM(IPGO13) IPGO13
				                        ,SUM(IPGO14) IPGO14
				                        ,SUM(IPGO15) IPGO15
				                        ,SUM(IPGO16) IPGO16
				                        ,SUM(IPGO17) IPGO17
				                        ,SUM(IPGO18) IPGO18
				                        ,SUM(IPGO19) IPGO19
				                        ,SUM(IPGO20) IPGO20
				                        ,SUM(IPGO21) IPGO21
		                                -------------------
		                                ,SUM(YA_IPGO1)  YA_IPGO1
		                                ,SUM(YA_IPGO2)  YA_IPGO2
		                                ,SUM(YA_IPGO3)  YA_IPGO3
		                                ,SUM(YA_IPGO4)  YA_IPGO4
		                                ,SUM(YA_IPGO5)  YA_IPGO5
		                                ,SUM(YA_IPGO6)  YA_IPGO6
		                                ,SUM(YA_IPGO7)  YA_IPGO7
		                                ,SUM(YA_IPGO8)  YA_IPGO8
		                                ,SUM(YA_IPGO9)  YA_IPGO9
		                                ,SUM(YA_IPGO10) YA_IPGO10
		                                ,SUM(YA_IPGO11) YA_IPGO11
		                                -------------------		                        
		                                ,SUM(YA_IPGO12) YA_IPGO12
		                                ,SUM(YA_IPGO13) YA_IPGO13
		                                ,SUM(YA_IPGO14) YA_IPGO14
		                                ,SUM(YA_IPGO15) YA_IPGO15
		                                ,SUM(YA_IPGO16) YA_IPGO16
		                                ,SUM(YA_IPGO17) YA_IPGO17
		                                ,SUM(YA_IPGO18) YA_IPGO18
		                                ,SUM(YA_IPGO19) YA_IPGO19
		                                ,SUM(YA_IPGO20) YA_IPGO20
		                                ,SUM(YA_IPGO21) YA_IPGO21
			                	FROM    (
				                        SELECT  ITEM_ID 
				                                ,DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.BASE_STOCK),0) BASE_STOCK
						                   	   #if ( "$!{week_flag}" == "3week" ) 
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "1week" ) 
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_1WEEK_ETC),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "31week" ) 
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "simul" ) 
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), '$!{simul_data}',0) CLGO
				                               #else
				                                 ----   $!{week_flag}
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC),0) CLGO
		                                       #end
		                                       	, DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO1
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO2
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO3
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO4
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO5
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO6
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO7
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO8
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO9
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO10
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO11
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO12
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO13
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO14
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO15
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO16
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO17
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO18
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO19
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO20
				                                , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.RECEIPT_EXPT),0) IPGO21
		                                        ------------------------------------------
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO1
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO2
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO3
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO4
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO5
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO6
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO7
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO8
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO9
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO10
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO11
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO12
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO13
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO14
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO15
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO16
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO17
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO18
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO19
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO20
		                                        , DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA),0) YA_IPGO21
				                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
				                        WHERE   CNFM_DATE BETWEEN TO_CHAR(SYSDATE, 'yyyymmdd') AND TO_CHAR(SYSDATE+20, 'yyyymmdd')
				                        AND		DW.DC_ID = DM.DC_ID
		                                --AND		DM.DC_LOC_TYPE != '사외'
				                        --AND     DM.EXPORT_FLAG IS NULL
				                        AND     ITEM_ID = '$!{item_id}'
				                        GROUP BY ITEM_ID, CNFM_DATE
				                        )
				                GROUP BY ITEM_ID
		                        )S1,
	                        	( 
	                        	SELECT	ITEM_ID,
	                            		ROUND(SUM(BASE_STOCK),0)	BASE_STOCK,
	                                    ROUND(SUM(CLGO),0)		CLGO,
	                                    ROUND(SUM(IPGO1),0)		IPGO1,
	                                    ROUND(SUM(IPGO2),0)		IPGO2,
	                                    ROUND(SUM(IPGO3),0)		IPGO3,
	                                    ROUND(SUM(IPGO4),0)		IPGO4,
	                                    ROUND(SUM(IPGO5),0)		IPGO5,
	                                    ROUND(SUM(IPGO6),0)		IPGO6,
	                                    ROUND(SUM(IPGO7),0)		IPGO7,
	                                    ROUND(SUM(IPGO8),0)		IPGO8,
	                                    ROUND(SUM(IPGO9),0)		IPGO9,
	                                    ROUND(SUM(IPGO10),0)	IPGO10,
	                                    ROUND(SUM(IPGO11),0)	IPGO11,
	                                    ROUND(SUM(IPGO12),0)	IPGO12,
	                                    ROUND(SUM(IPGO13),0)	IPGO13,
	                                    ROUND(SUM(IPGO14),0)	IPGO14,
	                                    ROUND(SUM(IPGO15),0)	IPGO15,
	                                    ROUND(SUM(IPGO16),0)	IPGO16,
	                                    ROUND(SUM(IPGO17),0)	IPGO17,
	                                    ROUND(SUM(IPGO18),0)	IPGO18,
	                                    ROUND(SUM(IPGO19),0)	IPGO19,
	                                    ROUND(SUM(IPGO20),0)	IPGO20,
	                                    ROUND(SUM(IPGO21),0)	IPGO21,
	                                    ROUND(SUM(YA_IPGO1),0)	YA_IPGO1,
	                                    ROUND(SUM(YA_IPGO2),0)	YA_IPGO2,
	                                    ROUND(SUM(YA_IPGO3),0)	YA_IPGO3,
	                                    ROUND(SUM(YA_IPGO4),0)	YA_IPGO4,
	                                    ROUND(SUM(YA_IPGO5),0)	YA_IPGO5,
	                                    ROUND(SUM(YA_IPGO6),0)	YA_IPGO6,
	                                    ROUND(SUM(YA_IPGO7),0)	YA_IPGO7,
	                                    ROUND(SUM(YA_IPGO8),0)	YA_IPGO8,
	                                    ROUND(SUM(YA_IPGO9),0)	YA_IPGO9,
	                                    ROUND(SUM(YA_IPGO10),0)	YA_IPGO10,
	                                    ROUND(SUM(YA_IPGO11),0)	YA_IPGO11,
	                                    ROUND(SUM(YA_IPGO12),0)	YA_IPGO12,
	                                    ROUND(SUM(YA_IPGO13),0)	YA_IPGO13,
	                                    ROUND(SUM(YA_IPGO14),0)	YA_IPGO14,
	                                    ROUND(SUM(YA_IPGO15),0)	YA_IPGO15,
	                                    ROUND(SUM(YA_IPGO16),0)	YA_IPGO16,
	                                    ROUND(SUM(YA_IPGO17),0)	YA_IPGO17,
	                                    ROUND(SUM(YA_IPGO18),0)	YA_IPGO18,
	                                    ROUND(SUM(YA_IPGO19),0)	YA_IPGO19,
	                                    ROUND(SUM(YA_IPGO20),0)	YA_IPGO20,
	                                    ROUND(SUM(YA_IPGO21),0)	YA_IPGO21                                    
	                            FROM	(
			                        	SELECT  NVL(BOM.CONS_ITEM_ID,'$!{item_id}')	ITEM_ID                      		
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.BASE_STOCK) * BOM.QTY ,0),0) BASE_STOCK
				                                #if ( "$!{week_flag}" == "3week" ) 
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC)* BOM.QTY ,0),0) CLGO		                                        
		                                       #elseif ( "$!{week_flag}" == "1week" )
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_1WEEK_ETC)* BOM.QTY ,0),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "31week" ) 
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), ROUND(SUM((DW.SALES_MEAN_3WEEK_ETC+DW.SALES_MEAN_1WEEK_ETC)/2),0) * BOM.QTY ,0),0) CLGO
		                                       #elseif ( "$!{week_flag}" == "simul" ) 
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), '$!{simul_data}' * BOM.QTY ,0),0) CLGO		                                    
				                               #else
				                                 ----   $!{week_flag}
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.SALES_MEAN_3WEEK_ETC)* BOM.QTY ,0),0) CLGO
		                                       #end				                               
		                                       	, NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO1
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO2
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO3
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO4
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO5
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO6
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO7
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO8
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO9
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO10
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO11
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO12
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO13
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO14
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO15
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO16
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO17
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO18
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO19
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO20
				                                , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.RECEIPT_EXPT) * BOM.QTY,0),0) IPGO21
		                                        ------------------------------------------
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE,   'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO1
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+1, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO2
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+2, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO3
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+3, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO4
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+4, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO5
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+5, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO6
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+6, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO7
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+7, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO8
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+8, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO9
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+9, 'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO10
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+10,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO11
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+11,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO12
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+12,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO13
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+13,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO14
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+14,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO15
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+15,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO16
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+16,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO17
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+17,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO18
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+18,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO19
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+19,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO20
		                                        , NVL(DECODE(CNFM_DATE, TO_CHAR(SYSDATE+20,'yyyymmdd'), SUM(DW.RECEIPT_EXPT_YA) * BOM.QTY,0),0) YA_IPGO21
			                        	FROM    DC_DATAWAREHOUSE DW, DC_MST DM,
	                                			(
		                                        SELECT  IM.ITEM_ID, 
		                                                IM.ITEM_NAME,		
		                                                MB.CONS_ITEM_ID,
		                                                MAX(MB.PROD_VER),    
		                                                MB.PROD_ITEM_ID,      
		                                                MB.CONS_QTY,
		                                                   NVL(MB.CONS_QTY/DECODE(MB.CONS_QTY_UOM,'EA',DECODE(IM.QTY,0,NULL,IM.QTY),1),0) QTY,
		                                                MB.CONS_QTY_UOM      
		                                        FROM	ITEM_MST IM, MBOM MB, CMITEM ITM
		                                        WHERE	IM.ITEM_ID = MB.CONS_ITEM_ID
		                                        AND		IM.ITEM_ID	= ITM.ITEM_CD
		                                        AND		IM.ITYPE		= 'HAWA'	
		                                        AND		IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD')		                                        
		                                        AND		IM.ITEM_ID ='$!{item_id}'
		                                        GROUP 
		                                        BY 		IM.ITEM_ID, 
		                                                IM.ITEM_NAME,
		                                                MB.CONS_ITEM_ID,
		                                                MB.PROD_ITEM_ID,
		                                                MB.CONS_QTY,
		                                                MB.CONS_QTY_UOM, 
		                                                IM.QTY
		                            			)BOM,
		                                        (
		                                        SELECT	YYYYMMDD
		                                        FROM	CAL_MST
		                                        WHERE	CAL_DATE BETWEEN TO_CHAR(SYSDATE, 'yyyymmdd') AND TO_CHAR(SYSDATE+20, 'yyyymmdd')
		                                        )CAL
				                        WHERE   CNFM_DATE = CAL.YYYYMMDD
		                                AND		DW.ITEM_ID = BOM.PROD_ITEM_ID(+)
				                        AND		DW.DC_ID = DM.DC_ID
		                                AND		(DM.DC_LOC_TYPE != '사외' OR DM.SL_CAT LIKE '%냉동%')		                
				                        GROUP BY BOM.CONS_ITEM_ID,CNFM_DATE, BOM.QTY
	                                )
	                                GROUP BY ITEM_ID
	                        )S2
	                        WHERE	S1.ITEM_ID = S2.ITEM_ID
		                ) W3, ITEM_MST IM,
		                (
		                SELECT MIN(YYYYMMDD) SUN_DAY
		                FROM CAL_MST
		                WHERE YYYYMMDD >= SYSDATE
		                AND HOLIDAY_FLAG = 'Y'
		                ) SU,
                        (
                        SELECT  DW.ITEM_ID,
                                SUM(DW.ISSUE) OD_QTY
                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                        AND     DW.DC_ID = DM.DC_ID
                        AND     ITEM_ID = '$!{item_id}'
                        AND     DM.EXPORT_FLAG IS NULL
                        GROUP BY DW.ITEM_ID		                        
                        )OD
		        WHERE	W3.ITEM_ID = IM.ITEM_ID
                AND     W3.ITEM_ID = OD.ITEM_ID
		        GROUP
		        BY		W3.ITEM_ID, IM.ITEM_NAME, W3.BASE_STOCK, W3.CLGO, 
		                W3.IPGO1, W3.IPGO2, W3.IPGO3, W3.IPGO4, W3.IPGO5, W3.IPGO6, W3.IPGO7, W3.IPGO8, W3.IPGO9, W3.IPGO10, W3.IPGO11,
		                W3.IPGO12, W3.IPGO13, W3.IPGO14, W3.IPGO15, W3.IPGO16, W3.IPGO17, W3.IPGO18, W3.IPGO19, W3.IPGO20, W3.IPGO21,
		                SU.SUN_DAY
                        ,W3.YA_IPGO1 ,W3.YA_IPGO2 ,W3.YA_IPGO3 ,W3.YA_IPGO4 ,W3.YA_IPGO5 ,W3.YA_IPGO6 ,W3.YA_IPGO7 ,W3.YA_IPGO8 ,W3.YA_IPGO9 ,W3.YA_IPGO10, W3.YA_IPGO11
						,W3.YA_IPGO12, W3.YA_IPGO13, W3.YA_IPGO14, W3.YA_IPGO15, W3.YA_IPGO16, W3.YA_IPGO17, W3.YA_IPGO18, W3.YA_IPGO19, W3.YA_IPGO20, W3.YA_IPGO21
		         ),           
		       (            
		        SELECT 1 A, 6 ORD      -- 기초재고 
		        FROM DUAL
		        UNION ALL
		        SELECT 2 A, 7 ORD      -- 재고일수
		        FROM DUAL
		        UNION ALL
		        SELECT 3 A, 3 ORD      -- 3주평균, 1주, 3주+1주, Simul, 평균판매
		        FROM DUAL
		        UNION ALL
		        SELECT 4 A, 5 ORD      -- 생산입고 -> 생산계획 
		        FROM DUAL
		        UNION ALL
		        SELECT 5 A, 4 ORD      -- 가용출고량 -> 가용입고량
		        FROM DUAL
		        UNION ALL
		        SELECT 6 A, 1 ORD      -- 가용재고량
		        FROM DUAL
		        UNION ALL
		        SELECT 7 A, 2 ORD      -- 재고일수 -> 가용일수
		        FROM DUAL
		        )
       ORDER
       BY  ORD
	</query> 
	<!-- 재고 및 생산 적합성 분석 팝업(주차 별) -실적-->  
	<query id="ip_02050_Inventory_production_analysis_list_pop_hawa_act" paging="false">	
		-- 실적 제고일수 pop_up 
		SELECT #if ( "$!{week_flag}" == "3week" ) 
                DECODE(A, 1, '기초재고', 2, '재고주수',  3, '3개월 평균', 4, '주간입고량')   "구분",
               #elseif ( "$!{week_flag}" == "1week" ) 
                DECODE(A, 1, '기초재고', 2, '재고주수',  3, '1개월 평균', 4, '주간입고량')   "구분",
               #elseif ( "$!{week_flag}" == "31week" ) 
                DECODE(A, 1, '기초재고', 2, '재고주수',  3, '3개월+1개월', 4, '주간입고량')   "구분",
               #elseif ( "$!{week_flag}" == "simul" ) 
                DECODE(A, 1, '기초재고', 2, '재고주수',  3, 'SIMUL', 4, '주간입고량')   "구분",
               #else
                DECODE(A, 1, '기초재고', 2, '재고주수',  3, '평균판매', 4, '주간입고량')   "구분",
               #end
                DECODE(A, 1, D0기초재고,  2, D0재고일수,  3, 평균판매, 4, D0입고)   D0,
                DECODE(A, 1, D1기초재고,  2, D1재고일수,  3, 평균판매, 4, D1입고)   D1,
                DECODE(A, 1, D2기초재고,  2, D2재고일수,  3, 평균판매, 4, D2입고)   D2,
                DECODE(A, 1, D3기초재고,  2, D3재고일수,  3, 평균판매, 4, D3입고)   D3,
                DECODE(A, 1, D4기초재고,  2, D4재고일수,  3, 평균판매, 4, D4입고)   D4,
                DECODE(A, 1, D5기초재고,  2, D5재고일수,  3, 평균판매, 4, D5입고)   D5,
                DECODE(A, 1, D6기초재고,  2, D6재고일수,  3, 평균판매, 4, D6입고)   D6,
                DECODE(A, 1, D7기초재고,  2, D7재고일수,  3, 평균판매, 4, D7입고)   D7,
                DECODE(A, 1, D8기초재고,  2, D8재고일수,  3, 평균판매, 4, D8입고)   D8,
                DECODE(A, 1, D9기초재고,  2, D9재고일수,  3, 평균판매, 4, D9입고)   D9,
                DECODE(A, 1, D10기초재고, 2, D10재고일수, 3, 평균판매, 4, D10입고)  D10,
               
                DECODE(A, 1, D11기초재고, 2, D11재고일수, 3, 평균판매, 4, D11입고)  D11,
                DECODE(A, 1, D12기초재고, 2, D12재고일수, 3, 평균판매, 4, D12입고)  D12,
                DECODE(A, 1, D13기초재고, 2, D13재고일수, 3, 평균판매, 4, D13입고)  D13,
                DECODE(A, 1, D14기초재고, 2, D14재고일수, 3, 평균판매, 4, D14입고)  D14,
                DECODE(A, 1, D15기초재고, 2, D15재고일수, 3, 평균판매, 4, D15입고)  D15,
                DECODE(A, 1, D16기초재고, 2, D16재고일수, 3, 평균판매, 4, D16입고)  D16,
                DECODE(A, 1, D17기초재고, 2, D17재고일수, 3, 평균판매, 4, D17입고)  D17,
                DECODE(A, 1, D18기초재고, 2, D18재고일수, 3, 평균판매, 4, D18입고)  D18,
                DECODE(A, 1, D19기초재고, 2, D19재고일수, 3, 평균판매, 4, D19입고)  D19,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, 평균판매, 4, D20입고)  D20,
                
                DECODE(A, 1, D20기초재고, 2, D11재고일수, 3, 평균판매, 4, D11입고)  D21,
                DECODE(A, 1, D20기초재고, 2, D12재고일수, 3, 평균판매, 4, D12입고)  D22,
                DECODE(A, 1, D20기초재고, 2, D13재고일수, 3, 평균판매, 4, D13입고)  D23,
                DECODE(A, 1, D20기초재고, 2, D14재고일수, 3, 평균판매, 4, D14입고)  D24,
                DECODE(A, 1, D20기초재고, 2, D15재고일수, 3, 평균판매, 4, D15입고)  D25,
                DECODE(A, 1, D20기초재고, 2, D16재고일수, 3, 평균판매, 4, D16입고)  D26,
                DECODE(A, 1, D20기초재고, 2, D17재고일수, 3, 평균판매, 4, D17입고)  D27,
                DECODE(A, 1, D20기초재고, 2, D18재고일수, 3, 평균판매, 4, D18입고)  D28,
                DECODE(A, 1, D20기초재고, 2, D19재고일수, 3, 평균판매, 4, D19입고)  D29,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, 평균판매, 4, D20입고)  D30,
                
                DECODE(A, 1, D11기초재고, 2, D11재고일수, 3, 평균판매, 4, D11입고)  D31,
                DECODE(A, 1, D12기초재고, 2, D12재고일수, 3, 평균판매, 4, D12입고)  D32,
                DECODE(A, 1, D13기초재고, 2, D13재고일수, 3, 평균판매, 4, D13입고)  D33,
                DECODE(A, 1, D14기초재고, 2, D14재고일수, 3, 평균판매, 4, D14입고)  D34,
                DECODE(A, 1, D15기초재고, 2, D15재고일수, 3, 평균판매, 4, D15입고)  D35,
                DECODE(A, 1, D16기초재고, 2, D16재고일수, 3, 평균판매, 4, D16입고)  D36,
                DECODE(A, 1, D17기초재고, 2, D17재고일수, 3, 평균판매, 4, D17입고)  D37,
                DECODE(A, 1, D18기초재고, 2, D18재고일수, 3, 평균판매, 4, D18입고)  D38,
                DECODE(A, 1, D19기초재고, 2, D19재고일수, 3, 평균판매, 4, D19입고)  D39,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, 평균판매, 4, D20입고)  D40,
                
                DECODE(A, 1, D11기초재고, 2, D11재고일수, 3, 평균판매, 4, D11입고)  D41,
                DECODE(A, 1, D12기초재고, 2, D12재고일수, 3, 평균판매, 4, D12입고)  D42,
                DECODE(A, 1, D13기초재고, 2, D13재고일수, 3, 평균판매, 4, D13입고)  D43,
                DECODE(A, 1, D14기초재고, 2, D14재고일수, 3, 평균판매, 4, D14입고)  D44,
                DECODE(A, 1, D15기초재고, 2, D15재고일수, 3, 평균판매, 4, D15입고)  D45,
                DECODE(A, 1, D16기초재고, 2, D16재고일수, 3, 평균판매, 4, D16입고)  D46,
                DECODE(A, 1, D17기초재고, 2, D17재고일수, 3, 평균판매, 4, D17입고)  D47,
                DECODE(A, 1, D18기초재고, 2, D18재고일수, 3, 평균판매, 4, D18입고)  D48,
                DECODE(A, 1, D19기초재고, 2, D19재고일수, 3, 평균판매, 4, D19입고)  D49,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, 평균판매, 4, D20입고)  D50,
                
                DECODE(A, 1, D11기초재고, 2, D11재고일수, 3, 평균판매, 4, D11입고)  D51,
                DECODE(A, 1, D12기초재고, 2, D12재고일수, 3, 평균판매, 4, D12입고)  D52,
                DECODE(A, 1, D13기초재고, 2, D13재고일수, 3, 평균판매, 4, D13입고)  D53,
                DECODE(A, 1, D14기초재고, 2, D14재고일수, 3, 평균판매, 4, D14입고)  D54,
                DECODE(A, 1, D15기초재고, 2, D15재고일수, 3, 평균판매, 4, D15입고)  D55,
                DECODE(A, 1, D16기초재고, 2, D16재고일수, 3, 평균판매, 4, D16입고)  D56,
                DECODE(A, 1, D17기초재고, 2, D17재고일수, 3, 평균판매, 4, D17입고)  D57,
                DECODE(A, 1, D18기초재고, 2, D18재고일수, 3, 평균판매, 4, D18입고)  D58,
                DECODE(A, 1, D19기초재고, 2, D19재고일수, 3, 평균판매, 4, D19입고)  D59,
                DECODE(A, 1, D20기초재고, 2, D20재고일수, 3, 평균판매, 4, D20입고)  D60  
		FROM 
		        (
		        -- 실적 제고일수 
		        -- 기초재고-재고일수-평균판매-생산입고예정
		        SELECT  W3.ITEM_ID, IM.ITEM_NAME, '실적' TYPE
		                --, W3.BASE_STOCK량
		                , MAX(OD.OD_QTY) "당주주문"
		                , W3.CLGO "평균판매"
		                -------------------------------------
		                , W3.BASE_STOCK "D0기초재고"
		                , TRIM(TO_CHAR(
		                    ROUND(DECODE(W3.CLGO, 0, 0, (W3.BASE_STOCK) / W3.CLGO),1)
		                     ,999999999990.9)) "D0재고일수"
		                , DECODE(TO_CHAR(SYSDATE+1, 'D'), 1, 0,W3.IPGO1) "D0입고"
		                -------------------------------------
		                , W3.BASE_STOCK - W3.CLGO + W3.IPGO1       "D1기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - W3.CLGO +  W3.IPGO1)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0)			               							"D1재고일수"
		                , W3.IPGO2 "D1입고"
		                ---------------------------------------------------
		                , W3.BASE_STOCK - (W3.CLGO * 2) + W3.IPGO1 + W3.IPGO2      	 	"D2기초재고"       
		                , NVL(ROUND(((W3.BASE_STOCK - OD.OD_QTY - (W3.CLGO * 2) +  W3.IPGO1 + W3.IPGO2)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0)			                						"D2재고일수"
		                , W3.IPGO3 "D2입고"
		                  ---------------------------------------------------       
		                ,  W3.BASE_STOCK - (W3.CLGO * 3) + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3                          						 	"D3기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 3) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0)			                   						"D3재고일수"
		                , W3.IPGO4 "D3입고"
		                  ---------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 4) + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 											"D4기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK  - (W3.CLGO * 4) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0)	 												"D4재고일수"
		                , W3.IPGO5 "D4입고"
		                  -------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 5) + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 								"D5기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK  - (W3.CLGO * 5) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0)	 												"D5재고일수" 
		                , W3.IPGO6 "D5입고"
		                  --------------------------------------------------------       
		                ,  W3.BASE_STOCK - (W3.CLGO * 6)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 					"D6기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK  - (W3.CLGO * 6) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D6재고일수" 
		                , W3.IPGO7 "D6입고"
		                  ---------------------------------------------------------       
		                ,  W3.BASE_STOCK - (W3.CLGO * 7)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7 		"D7기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 7) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D7재고일수"
		                , W3.IPGO8 "D7입고"
		                  ---------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 8)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 													"D8기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 8) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D8재고일수"
		                , W3.IPGO9 "D8입고"
                        ---------------------------------------------------------     
                        ,  W3.BASE_STOCK - (W3.CLGO * 9)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 											"D9기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 9) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D9재고일수"
		                , W3.IPGO10 "D9입고"
		                  -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 10)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 								"D10기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 10) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D10재고일수"		                
		                , W3.IPGO11 "D10입고"
		                  -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 11)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 					"D11기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 11) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 +W3.IPGO11)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D11재고일수"		                
		                , W3.IPGO12 "D11입고"
                        ----------------------------------------------------------- 
                        ,  W3.BASE_STOCK - (W3.CLGO * 12)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12 		"D12기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 12) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D12재고일수"	
		                , W3.IPGO13 "D12입고"
                        -----------------------------------------------------------
                        ,  W3.BASE_STOCK - (W3.CLGO * 13)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 													"D13기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 13) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D13재고일수"	                
		                , W3.IPGO14 "D13입고"
		                 -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 14)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 										"D14기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 14) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D14재고일수"	                
		                , W3.IPGO15 "D14입고"
		               -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 15)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 							"D15기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 15) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D15재고일수"
		                , W3.IPGO16 "D15입고"
		                -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 16)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 				"D16기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 16) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D16재고일수"
		                , W3.IPGO17 "D16입고"
		                    -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 17)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17 	"D17기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 17) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D17재고일수"
		                , W3.IPGO18 "D17입고"
		                    -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 18)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17
                         + W3.IPGO18 													"D18기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 18) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17
                         + W3.IPGO18)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D18재고일수"
		                , W3.IPGO19 "D18입고"
		                         -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 19)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17
                         + W3.IPGO18 + W3.IPGO19 										"D19기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 19) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17
                         + W3.IPGO18 + W3.IPGO19)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D19재고일수"
		                , W3.IPGO20 "D19입고"
		                         -----------------------------------------------------------        
		                ,  W3.BASE_STOCK - (W3.CLGO * 20)  + W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 +W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17
                         + W3.IPGO18 + W3.IPGO19 + W3.IPGO20 							"D20기초재고"
		                , NVL(ROUND(((W3.BASE_STOCK - (W3.CLGO * 20) +  W3.IPGO1 + W3.IPGO2
                         + W3.IPGO3 + W3.IPGO4 + W3.IPGO5 + W3.IPGO6 + W3.IPGO7
                         + W3.IPGO8 + W3.IPGO9 + W3.IPGO10 + W3.IPGO11 + W3.IPGO12
                         + W3.IPGO13 + W3.IPGO14 + W3.IPGO15 + W3.IPGO16 + W3.IPGO17
                         + W3.IPGO18 + W3.IPGO19 + W3.IPGO20)
		                  / DECODE(W3.CLGO,0,NULL,W3.CLGO)),1),0) 												"D20재고일수"
		                , W3.IPGO21 "D20입고"	
		        FROM    ( -- 14464
		                SELECT  ITEM_ID
		                        ,SUM(BASE_STOCK) BASE_STOCK
		                        ,SUM(CLGO) CLGO
		                        ,SUM(IPGO1)  IPGO1
		                        ,SUM(IPGO2)  IPGO2
		                        ,SUM(IPGO3)  IPGO3
		                        ,SUM(IPGO4)  IPGO4
		                        ,SUM(IPGO5)  IPGO5
		                        ,SUM(IPGO6)  IPGO6
		                        ,SUM(IPGO7)  IPGO7
		                        ,SUM(IPGO8)  IPGO8
		                        ,SUM(IPGO9)  IPGO9
		                        ,SUM(IPGO10) IPGO10
		                        ,SUM(IPGO11) IPGO11
                                -------------------
		                        ,SUM(IPGO12) IPGO12
		                        ,SUM(IPGO13) IPGO13
		                        ,SUM(IPGO14) IPGO14
		                        ,SUM(IPGO15) IPGO15
		                        ,SUM(IPGO16) IPGO16
		                        ,SUM(IPGO17) IPGO17
		                        ,SUM(IPGO18) IPGO18
		                        ,SUM(IPGO19) IPGO19
		                        ,SUM(IPGO20) IPGO20
		                        ,SUM(IPGO21) IPGO21                                
		                FROM    (
		                        SELECT   TRUNC(TO_DATE(CNFM_DATE),'D'),ITEM_ID
		                               , DECODE(CNFM_DATE, TO_CHAR(TRUNC(SYSDATE,'D')+1,'YYYYMMDD'), SUM(DW.BASE_STOCK),0) BASE_STOCK    --월요일 기준
                                       #if ( "$!{week_flag}" == "3week" ) 
                                       , DECODE(CNFM_DATE, TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD'), ROUND(SUM(DW.SALES_MEAN_3MON_TA),0),0)* 6 CLGO   --당일 기준
                                       #elseif ( "$!{week_flag}" == "1week" ) 
                                       , DECODE(CNFM_DATE, TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD'), ROUND(SUM(DW.SALES_MEAN_1MON_TA),0),0)* 6 CLGO   --당일 기준
                                       #elseif ( "$!{week_flag}" == "31week" ) 
                                       , DECODE(CNFM_DATE, TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD'), ROUND(SUM((DW.SALES_MEAN_3MON_TA+DW.SALES_MEAN_1MON_TA)/2),0),0)* 6 CLGO
                                       #elseif ( "$!{week_flag}" == "simul" ) 
                                       , DECODE(CNFM_DATE, TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD'), '$!{simul_data}' ,0)* 6 CLGO
		                               #else
		                                 ----   $!{week_flag}
		                               , DECODE(CNFM_DATE, TO_CHAR(TRUNC(SYSDATE),'YYYYMMDD'), ROUND(SUM(DW.SALES_MEAN_3MON_TA),0),0)*6 CLGO   --당일 기준
                                       #end
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE,	  'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO1
                                       , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+7, 'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO2
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+14,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO3
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+21,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO4
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+28,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO5
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+35,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO6
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+42,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO7
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+49,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO8
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+56,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO9
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+63,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO10
                                        
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+70,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO11
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+77,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO12
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1, 'YYYYMMDD'),TO_CHAR(TRUNC(SYSDATE+84,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO13
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+91,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO14
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+98,'D')+1,'YYYYMMDD'),  SUM(DW.RECEIPT_EXPT),0) IPGO15
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+105,'D')+1,'YYYYMMDD'), SUM(DW.RECEIPT_EXPT),0) IPGO16
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+112,'D')+1,'YYYYMMDD'), SUM(DW.RECEIPT_EXPT),0) IPGO17
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+119,'D')+1,'YYYYMMDD'), SUM(DW.RECEIPT_EXPT),0) IPGO18
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+126,'D')+1,'YYYYMMDD'), SUM(DW.RECEIPT_EXPT),0) IPGO19
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+133,'D')+1,'YYYYMMDD'), SUM(DW.RECEIPT_EXPT),0) IPGO20
		                               , DECODE(TO_CHAR(TRUNC(TO_DATE(CNFM_DATE),'D')+1,'YYYYMMDD'), TO_CHAR(TRUNC(SYSDATE+140,'D')+1,'YYYYMMDD'), SUM(DW.RECEIPT_EXPT),0) IPGO21
                                 FROM    DC_DATAWAREHOUSE DW, DC_MST DM,
                                		(
                                        	SELECT TO_CHAR(CAL_DATE,'YYYYMMDD') CAL_DATE
                                            FROM CAL_MST
      										WHERE CAL_DATE BETWEEN TRUNC(SYSDATE,'D') AND TRUNC(SYSDATE+140)
       										--AND HOLIDAY_FLAG IS NULL
                                         ) CAL                                     
		                         WHERE   DW.CNFM_DATE BETWEEN TO_CHAR(TRUNC(SYSDATE,'D'),'YYYYMMDD') AND TO_CHAR(SYSDATE+140, 'YYYYMMDD')
                                 AND	 DW.CNFM_DATE=CAL.CAL_DATE                                 
		                         AND	 DW.DC_ID = DM.DC_ID
		                         #if ( "$!{export_flag}" == "1" ) 
		                         #else
		                         AND     DM.EXPORT_FLAG IS NULL
		                         #end
		                         AND     ITEM_ID = '$!{item_id}'
		                         GROUP BY  TRUNC(TO_DATE(CNFM_DATE),'D'),ITEM_ID,CNFM_DATE
		                        )
		                GROUP BY ITEM_ID
		                ) W3, ITEM_MST IM,		             
                        (
                        SELECT  DW.ITEM_ID,
                                SUM(DW.ISSUE) OD_QTY  --당주 주문판매
                        FROM    DC_DATAWAREHOUSE DW, DC_MST DM
                        WHERE   DW.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
                        AND     DW.DC_ID = DM.DC_ID
                        AND     ITEM_ID = '$!{item_id}'
                        #if ( "$!{export_flag}" == "1" ) 
                        #else
                        AND     DM.EXPORT_FLAG IS NULL
                        #end
                        GROUP BY DW.ITEM_ID		                        
                        )OD
		        WHERE	W3.ITEM_ID = IM.ITEM_ID
                AND     W3.ITEM_ID = OD.ITEM_ID
		        GROUP
		        BY		W3.ITEM_ID, IM.ITEM_NAME, W3.BASE_STOCK, W3.CLGO, 
		                W3.IPGO1, W3.IPGO2, W3.IPGO3, W3.IPGO4, W3.IPGO5, W3.IPGO6, W3.IPGO7, W3.IPGO8, W3.IPGO9, W3.IPGO10, W3.IPGO11,
		                W3.IPGO12, W3.IPGO13, W3.IPGO14, W3.IPGO15, W3.IPGO16, W3.IPGO17, W3.IPGO18, W3.IPGO19, W3.IPGO20, W3.IPGO21, OD.OD_QTY		               
		         ),           
		       (            
		        SELECT 1 A, 1 ORD      -- 기초재고 
		        FROM DUAL
		        UNION ALL
		        SELECT 2 A, 2 ORD      -- 재고일수
		        FROM DUAL
		        UNION ALL
		        SELECT 3 A, 3 ORD      -- 3달평균, 1달, 3달+1달, Simul, 평균판매
		        FROM DUAL
		        UNION ALL
		        SELECT 4 A, 4 ORD      -- 주간입고량 
		        FROM DUAL		  	     
		        )
       ORDER
       BY  ORD
	</query> 
	

	<!-- 
	=======================
	 공급할당지역 관리 화면
	=======================
	-->

	<!-- 공급할당 지역관리 HEARDER  --> 
	<query id="ip_02080_AllocZone_Mgmt_list_header" paging="true"> 
		/* 공급할당 지역관리 HEADER */
		SELECT  MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_01', CD.CD_NAME, '-예비-')) "전국",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_02', CD.CD_NAME, '-예비-')) "수도권",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_03', CD.CD_NAME, '-예비-')) "부산권",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_04', CD.CD_NAME, '-예비-')) "유통",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_05', CD.CD_NAME, '-예비-')) "시판",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_06', CD.CD_NAME, '-예비-')) "CVS",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_07', CD.CD_NAME, '-예비-')) "유통+CVS",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_08', CD.CD_NAME, '-예비-')) "CVS+시판",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_09', CD.CD_NAME, '-예비-')) "유통+시판",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_10', CD.CD_NAME, '-예비-')) "특판",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_11', CD.CD_NAME, '-예비-')) "제주",
		        MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_12', CD.CD_NAME, '-예비-')) "사용자",
                MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_13', CD.CD_NAME, '-예비-')) "사용자2",
                MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_14', CD.CD_NAME, '-예비-')) "사용자3",
                MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_15', CD.CD_NAME, '-예비-')) "사용자4"
               -- MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_16', CD.CD_NAME, '-예비-')) "예비",
               -- MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_17', CD.CD_NAME, '-예비-')) "예비",
               -- MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_18', CD.CD_NAME, '-예비-')) "예비",
               -- MAX(DECODE(CD.CAT01, 'ALLOC_ZONE_19', CD.CD_NAME, '-예비-')) "예비"
		FROM    CODE_MST CD, DUAL B
		WHERE   CD_GRP = 'CAT_ALLOC_ZONE'       
	</query> 
	
	<!--공급할당지역 관리 화면  --> 
	<query id="ip_02080_AllocZone_Mgmt_list" paging="true"> 
	<!--이강욱 수정 : 이승용 대리 요청에 따라 추가 사용자 컬럼 데이터 셋팅 2014-10-24 -->
		/* 메인 조회 쿼리 */
	        SELECT  DEPT_CODE, 
	                DEPT_NAME,
	                NVL(전국,0) "전국",
	                NVL(수도권,0) "수도권",
	                NVL(부산권,0) "부산권",
	                NVL(유통,0) "유통",
	                NVL(시판,0) "시판",
	                NVL(예비1,0) "CVS",
	                NVL(예비2,0) "유통+CVS",
	                NVL(예비3,0) "CVS+시판",
	                NVL(예비4,0) "유통+시판",
	                NVL(예비5,0) "특판",
	                NVL(예비6,0) "제주",
	                NVL(예비7,0) "사용자",
                    NVL(예비8,0) "사용자2",
                    NVL(예비9,0) "사용자3",
                    NVL(예비10,0) "사용자4"
                  --  NVL(예비11,0) "예비11",
                  --  NVL(예비12,0) "예비12",
                   -- NVL(예비13,0) "예비13",
                   -- NVL(예비14,0) "예비14"
		FROM    (
		        /* 메인 조회 쿼리 */ 
		        SELECT  CD.CD,
		                CD.CD_NAME,
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_01', 1, 0)) "전국",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_02', 1, 0)) "수도권",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_03', 1, 0)) "부산권",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_04', 1, 0)) "유통",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_05', 1, 0)) "시판",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_06', 1, 0)) "예비1",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_07', 1, 0)) "예비2",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_08', 1, 0)) "예비3",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_09', 1, 0)) "예비4",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_10', 1, 0)) "예비5",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_11', 1, 0)) "예비6",
		                MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_12', 1, 0)) "예비7",
                        MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_13', 1, 0)) "예비8",
                        MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_14', 1, 0)) "예비9",
                        MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_15', 1, 0)) "예비10"
                        --MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_16', 1, 0)) "예비11",
                      --  MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_17', 1, 0)) "예비12",
                      --  MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_18', 1, 0)) "예비13",
                      --  MAX(DECODE(CD.CD_GRP, 'ALLOC_ZONE_19', 1, 0)) "예비14"
		        FROM    CODE_MST CD, 
		                (
		                SELECT  *
		                FROM    CODE_MST
		                WHERE   CD_GRP = 'CAT_ALLOC_ZONE'        
		                ) ZN
		        WHERE   CD.CD_GRP   = ZN.CAT01
		        --AND     CD.CD = '015'
		        GROUP
		        BY      CD.CD,
		                CD.CD_NAME        
		        ) CD,
		        (
		        /* 최신 영업조직 리스트 */
		        SELECT  DEPT_CODE, DEPT_NAME
		        FROM    SDSTT401
		        WHERE   APPL_END_YYMM = '999912'
		        AND     DEPT_GRAD_CODE = '40'    --40은 최하위 부서 30은 그 상위 20은 그 상위
		        AND     SUPL_APPL_GUBN IS NULL   -- NULL인 ROW가 최신 운영되는 지점
		        AND     DEPT_SORT_KEY IS NOT NULL -- 영업쪽 화면에서 조회에 사용되는 코드
		        AND     DEPT_NAME NOT LIKE '%팀%' -- HQ에 존재하는 팀은 영업부서가 아니다 
		        )SL
		WHERE   SL.DEPT_CODE = CD.CD(+)
		ORDER BY 1        
	</query> 
	
	
		
<!--상품 재고보충 계획 생성  화면  --> 
	<query id="ip_02090_hawastockSupportPlan_list2" paging="true"> 
		/* 메인 조회 쿼리 */
<!-- 캘로그 데이터 가져오기 수정 이강욱 2014/09/17 -->
SELECT 	DD.ITEM_ID,
        DD.ITEM_NAME,
        DD.CALOG_BOX_STOCK, 
        DD.CALOG_PLT_STOCK,        
        DD.DC_ID,
        DD.DC_NAME,
		DD.CD_SRC_LOC,
		<!--DD.CD_FLAG1,-->        
        DD.SAFETY_STOCK,
        DD.SAFETY_STOCK_FLAG,
        DD.CD_FLAG,
		DD.SALES_MEAN_3MONTH,
        DD.PRE_MONTH_SELL,
        DD.SALES_PRE_CUM,
        DD.SALES_MEAN_1WEEK,
        DD.SALES_MEAN_3WEEK,
        DD.BASE_STOCK,
        DD.IPGO_EXPT,
        DD.CHGO_EXPT,
        DD.FINISH_STOCK,
        DD.STOCK_TERM,
        
        DD.STOCK_DAY_1W,
        DD.STOCK_DAY_3W,
       
        DD.DC_ALLOC,
        F_GETBOXPERPALLET(DD.DC_ID,DD.ITEM_ID)	PAL_QTY,
        DD.DC_ALLOC_PLT,
        DD.D1_QTY,
        DD.D2_QTY,
        DD.D3_QTY,
    <!--DD.D4_QTY,
        DD.D5_QTY,
        DD.D6_QTY, -->
        DD.TOT,
        DD.SEQ                
FROM    (
        SELECT  DD.ITEM_ID																									ITEM_ID,
        		F_GET_ITEM_NAME(DD.ITEM_ID) 																				ITEM_NAME,
        		MM.CALOG_BOX_STOCK,
        		MM.CALOG_PLT_STOCK,
        		MM.CALOG_BOX_STOCK - HP.DC_ALLOC 																			CALOG_BOX_CAL,
        		MM.CALOG_PLT_STOCK - HP.DC_ALLOC_PLT 																		CALOG_PLT_CAL,
                DD.DC_ID            																						DC_ID,        
                DM.DC_SHORT_NAME    																						DC_NAME,
                DM.CD_SRC_LOC    																							CD_SRC_LOC,    
				<!--DM.CD_FLAG    																								CD_FLAG1,-->                            
                SUM(SP.SAFETY_STOCK)    +    SUM(SP.CAMP_STOC)    +    
                SUM(DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                    NVL(SP.SAVE_STOC,0))))      																			SAFETY_STOCK,   
                SP.SAFETY_STOCK_FLAG																						SAFETY_STOCK_FLAG,
                DECODE(SP.SAFETY_STOCK_FLAG,'01','1','0') 																	CD_FLAG,
                SUM(DD.SALES_MEAN_3MONTH)*24     																			SALES_MEAN_3MONTH,                    
                SUM(DD.PRE_MONTH_SELL)        																				PRE_MONTH_SELL,                                
                SUM(DD.SALES_PRE_CUM)+    NVL(SUM(ISSUE),0)																	SALES_PRE_CUM,        
                SUM(DD.SALES_MEAN_1WEEK)                    																SALES_MEAN_1WEEK,    
                SUM(DD.SALES_MEAN_3WEEK)                    																SALES_MEAN_3WEEK,                        
                DD.BASE_STOCK                                																BASE_STOCK,
                SUM(DD.RECEIPT)    + SUM(DD.RECEIPT_EXPT)        															IPGO_EXPT,            
                SUM(DD.ISSUE)    + SUM(DD.ISSUE_EXPT)            															CHGO_EXPT,            
                SUM(BASE_STOCK)    + (SUM(DD.RECEIPT) + SUM(DD.RECEIPT_EXPT))    - (SUM(DD.ISSUE) + SUM(DD.ISSUE_EXPT))    	FINISH_STOCK,    
                DECODE(SUM(DD.SALES_MEAN_1WEEK),0,0,ROUND(SUM(DD.STOCK_EXPT)    /    SUM(DD.SALES_MEAN_1WEEK),1))    		STOCK_DAY_1W,    
                DECODE(SUM(DD.SALES_MEAN_3WEEK),0,0,ROUND(SUM(DD.STOCK_EXPT)    /    SUM(DD.SALES_MEAN_3WEEK),1))    		STOCK_DAY_3W,    
                DD.STOCK_TERM                																				STOCK_TERM,
                HP.DC_ALLOC,
                HP.DC_ALLOC_PLT,
                SUM(HP.D1_QTY)	D1_QTY,
                SUM(HP.D2_QTY)	D2_QTY,
                SUM(HP.D3_QTY)	D3_QTY,
              <!--  SUM(HP.D4_QTY)	D4_QTY,
                SUM(HP.D5_QTY)	D5_QTY,
                SUM(HP.D6_QTY)	D6_QTY, -->  
                SUM(HP.TOT)		TOT,
                HP.SEQ			SEQ              
        FROM    DC_DATAWAREHOUSE	DD,
                DC_MST				DM,
                STOCK_POLICY_QTY    SP,
                (
                SELECT A.MATR_CODE,  
               		   B.ITEM_NAME,
               		   A.ATCL_STOC_QTY CALOG_BOX_STOCK,
                       ROUND((A.ATCL_STOC_QTY/DECODE(NVL(C.BOX_PER_PALET, 100), 0, 100, NVL(C.BOX_PER_PALET, 100))),2) CALOG_PLT_STOCK 
                FROM MMCUT100 A, ITEM_MST B , ITEM_DTL C
                WHERE STOC_DATE = '$!{cnfm_date}' <!--달력추가 : 이강욱 2014-10-23-->
                AND	  A.MATR_CODE = B.ITEM_ID
                AND   B.ITEM_ID = C.ITEM_ID
               )MM, <!-- 이강욱 추가 : 캘로그 테이블 -->
		        (
		        SELECT	ITEM_ID,        		
		                DC_ID,
		                D1_QTY,
		                D2_QTY,
		                D3_QTY,	
		                NVL(DC_ALLOC,0) DC_ALLOC,
		                NVL(DC_ALLOC_PLT,0) DC_ALLOC_PLT,	            
		                NVL(D1_QTY,0)	+	NVL(D2_QTY,0)	+	NVL(D3_QTY,0)      TOT,
		                SEQ
		        FROM	HAWA_STOCK_SUUPORT_PLAN  
		        WHERE	CNFM_DATE        =    TO_CHAR(SYSDATE,'YYYYMMDD')
		        )HP        
        WHERE			DD.ITEM_ID          =    SP.ITEM_ID
        AND				DD.ITEM_ID          =    HP.ITEM_ID(+)
        AND				DD.ITEM_ID			=	 MM.MATR_CODE(+)
        AND				DD.DC_ID            =    HP.DC_ID(+)
        AND				DD.DC_ID            =    DM.DC_ID
        AND				DD.DC_ID            =    SP.LOC_ID
		AND				DD.DC_ID NOT IN('1811','1816','1825','1826','1841','1842','1843','7101','7501','8000','8121',
										'8511','8512','8513','8514','8515','8516','8517','8518','8901','8902','8903',
										'8904','8905','8906','8908','8910','8911','8912','8913','8914','8915',
										'8310','8320','8330','8340','8350','8420','8430','8440','8520',		<!-- 캘로그 코드 8907 및 크로스도킹 배송지점  제거 -->
										'8916','8917','8920','8921','8922','8925','8928','8926','8927','8930','8932','8931')   
     -- AND				DD.DC_ID NOT IN('1811','1816','1825','1826','1841','1842','1843','7101','7501','8000','8511',
        								-- '8512','8513','8514','8515','8516','8517','8518','8901','8902','8903','8904',
        								-- '8905','8906','8907','8908','8910','8911','8912','8913','8914','8915','8916',
        								-- '8917','8920','8921','8922','8925','8928','8926','8927','8930','8932','8931')
        AND				DM.DC_ID            like    '%'||'$!{dc_id}'||'%'
        AND				DD.CNFM_DATE        =    TO_CHAR(SYSDATE,'YYYYMMDD')    
	    AND				SP.WORK_DATE        =	(
	                                            SELECT	MAX(WORK_DATE) 
	                                            FROM	STOCK_POLICY_QTY
	                                            )
        GROUP    BY		DD.ITEM_ID, 
        				MM.CALOG_BOX_STOCK,
        				MM.CALOG_PLT_STOCK,  <!--이강욱 추가 : 캘로그 수량 -->
                    	DD.DC_ID, 
                    	DM.DC_SHORT_NAME,
                    	DM.CD_SRC_LOC,
                    	HP.DC_ALLOC,
                    	HP.DC_ALLOC_PLT,
                    	HP.SEQ,
                        <!--DM.CD_FLAG,-->                    	
                    	DD.BASE_STOCK, 
                    	DD.STOCK_TERM,
                    	SP.SAFETY_STOCK_FLAG
        )DD,
        (
        SELECT	ITEM_ID
        FROM    ITEM_MST
        WHERE   ITYPE        	IN        ('FERT','HAWA')
        AND     ITEM_ID			like    '%'||'$!{item_id}'||'%'
        --and item_id in ('901000115')
	#if("$!{scm_charge}" == "00" )
		AND	(SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000' )	
	#elseif("$!{scm_charge}" != "XX" )
        AND		SCM_CHARGE		like    '%'||'$!{scm_charge}'||'%'
		AND	(SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000' )
	#end 
	#if("$!{sales_cat_02}" =="9999")
		AND     SALES_CAT02 IN (118,134)
		)    IM
	#else   
        AND		SALES_CAT02  	like    '%'||'$!{sales_cat_02}'||'%'
        )    IM
    #end               
		WHERE   DD.ITEM_ID		=	IM.ITEM_ID
		AND		( DD.BASE_STOCK >0 OR DD.PRE_MONTH_SELL >0)  <!--SCM 김종환 과장 요청 : 전월판매도 고려해서 조회 2014-10-23 이강욱 -->

<!-- CD_SRC_LOC 조건문 제거 : 이강욱 2014/09/19 -->
<!--AND		DD.SALES_MEAN_3MONTH+
        DD.PRE_MONTH_SELL+
        DD.SALES_PRE_CUM+
        DD.SALES_MEAN_1WEEK+
        DD.SALES_MEAN_3WEEK > 0
AND		DD.CD_SRC_LOC IN('7100','7500','7600')        
AND		DD.ITEM_ID		=	HP.ITEM_ID(+)
AND		DD.DC_ID		=	HP.DC_ID(+)-->
ORDER	BY	1,5, DD.SEQ
<!--ORDER    BY    1,2-->

	</query> 



<!--
=====================================================================================================
 끝  
=====================================================================================================
--> 

<!--상품 재고보충 계획 생성 팝업 화면 (품목별) --> 
	<query id="ip_02090_hawastockSupportPlan_list_popupcall" paging="true"> 
		/* 메인 조회 쿼리 */
		
SELECT 	A.ITEM_ID,
		B.ITEM_NAME, 
		M.CALOG_BOX_STOCK,
        M.CALOG_PLT_STOCK,       
		A.DC_ALLOC,
		A.DC_ALLOC_PLT,
		A.DC_ID, 
		C.DC_NAME,
		F_GETBOXPERPALLET(A.DC_ID,A.ITEM_ID) PAL_QTY,
		A.SEQ,
		D.IF_FLAG,
		A.RE_ORDER_FLAG		
FROM 	HAWA_STOCK_SUUPORT_PLAN A, 
		ITEM_MST B, 
		DC_MST C,
		APS_PR_PLAN D,		
        	(
                SELECT A.MATR_CODE,  
               		   B.ITEM_NAME,
               		   A.ATCL_STOC_QTY CALOG_BOX_STOCK,
                       ROUND((A.ATCL_STOC_QTY/DECODE(NVL(C.BOX_PER_PALET, 100), 0, 100, NVL(C.BOX_PER_PALET, 100))),2) CALOG_PLT_STOCK 
                FROM MMCUT100 A, ITEM_MST B , ITEM_DTL C
                WHERE STOC_DATE = TO_CHAR(SYSDATE-1,'YYYYMMDD')
                AND	  A.MATR_CODE = B.ITEM_ID
                AND   B.ITEM_ID = C.ITEM_ID
      		 )M      
WHERE A.CNFM_DATE= TO_CHAR(SYSDATE,'YYYYMMDD')
AND A.ITEM_ID	= D.ITEM_ID(+)
AND A.ITEM_ID 	= B.ITEM_ID
AND A.DC_ID		= D.LOC_ID(+)
AND A.CNFM_DATE	= D.VERSION(+)
AND	A.SEQ		= D.SEQ(+)
AND A.ITEM_ID	= M.MATR_CODE(+)
AND A.DC_ID 	= C.DC_ID
AND A.ERP_FLAG  = 'Y'
ORDER BY A.ITEM_ID, A.DC_ID, A.SEQ                
            


	</query> 

<!--상품 재고보충 계획 생성 팝업 화면2 (DC별)  --> 
	<query id="ip_02090_hawastockSupportPlan_list_popupcall2" paging="true"> 
		/* 메인 조회 쿼리 */
		
SELECT 	A.DC_ID,
		C.DC_NAME,		
		M.CALOG_BOX_STOCK,
        M.CALOG_PLT_STOCK,       
		A.DC_ALLOC,
		A.DC_ALLOC_PLT,
		A.ITEM_ID,
		B.ITEM_NAME, 
		F_GETBOXPERPALLET(A.DC_ID,A.ITEM_ID) PAL_QTY,
		A.SEQ,
		D.IF_FLAG,
		A.RE_ORDER_FLAG			
FROM 	HAWA_STOCK_SUUPORT_PLAN A, 
		ITEM_MST B, 
		DC_MST C,
		APS_PR_PLAN D,		
        	(
                SELECT A.MATR_CODE,  
               		   B.ITEM_NAME,
               		   A.ATCL_STOC_QTY CALOG_BOX_STOCK,
                       ROUND((A.ATCL_STOC_QTY/DECODE(NVL(C.BOX_PER_PALET, 100), 0, 100, NVL(C.BOX_PER_PALET, 100))),2) CALOG_PLT_STOCK 
                FROM MMCUT100 A, ITEM_MST B , ITEM_DTL C
                WHERE STOC_DATE = TO_CHAR(SYSDATE-1,'YYYYMMDD')
                AND	  A.MATR_CODE = B.ITEM_ID
                AND   B.ITEM_ID = C.ITEM_ID
      		 )M
WHERE A.CNFM_DATE= TO_CHAR(SYSDATE,'YYYYMMDD')
AND A.ITEM_ID	= D.ITEM_ID(+)
AND A.ITEM_ID 	= B.ITEM_ID
AND A.DC_ID		= D.LOC_ID(+)
AND A.CNFM_DATE	= D.VERSION(+)
AND	A.SEQ		= D.SEQ(+)
AND A.ITEM_ID	= M.MATR_CODE(+)
AND A.DC_ID 	= C.DC_ID
AND A.ERP_FLAG  = 'Y'
ORDER BY A.DC_ID, A.ITEM_ID, A.SEQ                
 
	</query> 

<!--상품 재고보충 계획 생성 팝업 화면3 (켈로그)  --> 
	<query id="ip_02090_hawastockSupportPlan_list_popupcall3" paging="true"> 
		/* 메인 조회 쿼리 */
		
SELECT 	IM.ITEM_ID, 
	   	IM.ITEM_NAME,
	   	DD.DC_ID,
	   	DD.BASE_STOCK,	   	
	   	HP.DC_ALLOC,
	   	HP.DC_ALLOC_PLT,
	   	F_GETBOXPERPALLET(DD.DC_ID,DD.ITEM_ID)	PAL_QTY,
	   	NVL(HP.SEQ,1),
	   	HP.TGT_LOC
FROM   	DC_DATAWAREHOUSE DD,
	   	ITEM_MST IM,
    	DC_MST DM,
    	STOCK_POLICY_QTY    SP,
    			(
		        SELECT	ITEM_ID,        		
		                DC_ID,		              
		                NVL(DC_ALLOC,0) DC_ALLOC,
		                NVL(DC_ALLOC_PLT,0) DC_ALLOC_PLT,  
		                SEQ,
		                TGT_LOC
		        FROM	HAWA_STOCK_SUUPORT_PLAN  
		        WHERE	CNFM_DATE        =    '$!{trans_date}'
		        )HP  
    	WHERE IM.ITEM_ID = DD.ITEM_ID
    	AND DD.ITEM_ID	 = HP.ITEM_ID(+)
    	AND DD.DC_ID	 = HP.DC_ID(+)
    	AND DD.DC_ID 	 = DM.DC_ID
    	AND	DD.DC_ID     = SP.LOC_ID
    	AND DD.ITEM_ID   = SP.ITEM_ID
    	AND IM.ITYPE IN ('HAWA')    	
    	AND DD.CNFM_DATE = TO_CHAR(SYSDATE,'YYYYMMDD')
    	--AND IM.SALES_CAT02 IN (118,134) 
    	AND	DM.DC_ID IN ('1811','1813')
    	AND IM.SALES_CAT02 LIKE  '%'||'$!{sales_cat02}'||'%'
    	AND DM.DC_ID  LIKE    '%'||'$!{dc_id}'||'%'
    	AND	(IM.SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR IM.SELL_STOP_DATE = '00000000' )
        AND				SP.WORK_DATE        =	(
	                                            SELECT	MAX(WORK_DATE) 
	                                            FROM	STOCK_POLICY_QTY
	                                            )	
  		AND DD.BASE_STOCK >0
    	ORDER BY IM.ITEM_ID, HP.SEQ
	      
 
	</query> 

<!--
=====================================================================================================
 끝  
=====================================================================================================
--> 


<!--상품 재고보충 계획 생성  화면  --> 
	<query id="ip_02090_hawastockSupportPlan_list" paging="true"> 
		/* 메인 조회 쿼리 */

SELECT 	DD.ITEM_ID,
        DD.ITEM_NAME,
        DD.DC_ID,
        DD.DC_NAME,
		DD.CD_SRC_LOC,
		<!--DD.CD_FLAG1,-->        
        DD.SAFETY_STOCK,
        DD.SAFETY_STOCK_FLAG,
        DD.CD_FLAG,
		DD.SALES_MEAN_3MONTH,
        DD.PRE_MONTH_SELL,
        DD.SALES_PRE_CUM,
        DD.SALES_MEAN_1WEEK,
        DD.SALES_MEAN_3WEEK,
        DD.BASE_STOCK,
        DD.IPGO_EXPT,
        DD.CHGO_EXPT,
        DD.FINISH_STOCK,
        DD.STOCK_DAY_1W,
        DD.STOCK_DAY_3W,
        DD.STOCK_TERM,
        F_GETBOXPERPALLET(DD.DC_ID,DD.ITEM_ID)	PAL_QTY,
        DD.D1_QTY,
        DD.D2_QTY,
        DD.D3_QTY,
        DD.D4_QTY,
        DD.D5_QTY,
        DD.D6_QTY,
        DD.TOT                
FROM    (
        SELECT  DD.ITEM_ID																									ITEM_ID,
        		F_GET_ITEM_NAME(DD.ITEM_ID) 																				ITEM_NAME,
                DD.DC_ID            																						DC_ID,        
                DM.DC_SHORT_NAME    																						DC_NAME,
                DM.CD_SRC_LOC    																							CD_SRC_LOC,    
				<!--DM.CD_FLAG    																								CD_FLAG1,-->                            
                SUM(SP.SAFETY_STOCK)    +    SUM(SP.CAMP_STOC)    +    
                SUM(DECODE(SIGN(SYSDATE-TO_DATE(SP.START_DATE,'YYYYMMDD')),-1,0,
                    DECODE(SIGN(TO_DATE(SP.END_DATE,'YYYYMMDD')-SYSDATE),-1,0,
                    NVL(SP.SAVE_STOC,0))))      																			SAFETY_STOCK,   
                SP.SAFETY_STOCK_FLAG																						SAFETY_STOCK_FLAG,
                DECODE(SP.SAFETY_STOCK_FLAG,'01','1','0') 																	CD_FLAG,
                SUM(DD.SALES_MEAN_3MONTH)*24     																			SALES_MEAN_3MONTH,                    
                SUM(DD.PRE_MONTH_SELL)        																				PRE_MONTH_SELL,                                
                SUM(DD.SALES_PRE_CUM)+    NVL(SUM(ISSUE),0)																	SALES_PRE_CUM,        
                SUM(DD.SALES_MEAN_1WEEK)                    																SALES_MEAN_1WEEK,    
                SUM(DD.SALES_MEAN_3WEEK)                    																SALES_MEAN_3WEEK,                        
                DD.BASE_STOCK                                																BASE_STOCK,
                SUM(DD.RECEIPT)    + SUM(DD.RECEIPT_EXPT)        															IPGO_EXPT,            
                SUM(DD.ISSUE)    + SUM(DD.ISSUE_EXPT)            															CHGO_EXPT,            
                SUM(BASE_STOCK)    + (SUM(DD.RECEIPT) + SUM(DD.RECEIPT_EXPT))    - (SUM(DD.ISSUE) + SUM(DD.ISSUE_EXPT))    	FINISH_STOCK,    
                DECODE(SUM(DD.SALES_MEAN_1WEEK),0,0,ROUND(SUM(DD.STOCK_EXPT)    /    SUM(DD.SALES_MEAN_1WEEK),1))    		STOCK_DAY_1W,    
                DECODE(SUM(DD.SALES_MEAN_3WEEK),0,0,ROUND(SUM(DD.STOCK_EXPT)    /    SUM(DD.SALES_MEAN_3WEEK),1))    		STOCK_DAY_3W,    
                DD.STOCK_TERM                																				STOCK_TERM,
                SUM(HP.D1_QTY)	D1_QTY,
                SUM(HP.D2_QTY)	D2_QTY,
                SUM(HP.D3_QTY)	D3_QTY,
                SUM(HP.D4_QTY)	D4_QTY,
                SUM(HP.D5_QTY)	D5_QTY,
                SUM(HP.D6_QTY)	D6_QTY,
                SUM(HP.TOT)		TOT                
        FROM    DC_DATAWAREHOUSE	DD,
                DC_MST				DM,
                STOCK_POLICY_QTY    SP,
		        (
		        SELECT	ITEM_ID,        		
		                DC_ID,
		                D1_QTY,
		                D2_QTY,
		                D3_QTY,
		                D4_QTY,
		                D5_QTY,
		                D6_QTY,
		                D1_QTY	+	D2_QTY	+	D3_QTY	+	D4_QTY	+	D5_QTY	+	D6_QTY TOT
		        FROM	HAWA_STOCK_SUUPORT_PLAN  
		        WHERE	CNFM_DATE        =    TO_CHAR(SYSDATE,'YYYYMMDD')
		        )HP                
        WHERE			DD.ITEM_ID          =    SP.ITEM_ID
        AND				DD.ITEM_ID          =    HP.ITEM_ID(+)
        AND				DD.DC_ID            =    HP.DC_ID(+)
        AND				DD.DC_ID            =    DM.DC_ID
        AND				DD.DC_ID            =    SP.LOC_ID
		AND				DD.DC_ID NOT IN('1811','1816','1825','1826','1841','1842','1843','7101','7501','8000','8121',
										'8511','8512','8513','8514','8515','8516','8517','8518','8901','8902','8903',
										'8904','8905','8906','8907','8908','8910','8911','8912','8913','8914','8915',
										'8916','8917','8920','8921','8922','8925','8928','8926','8927','8930','8932','8931')   
       -- AND				DD.DC_ID NOT IN('1811','1816','1825','1826','1841','1842','1843','7101','7501','8000','8511',
        								-- '8512','8513','8514','8515','8516','8517','8518','8901','8902','8903','8904',
        								-- '8905','8906','8907','8908','8910','8911','8912','8913','8914','8915','8916',
        								-- '8917','8920','8921','8922','8925','8928','8926','8927','8930','8932','8931')
        AND				DM.DC_ID            like    '%'||'$!{dc_id}'||'%'
        AND				DD.CNFM_DATE        =    TO_CHAR(SYSDATE,'YYYYMMDD')    
	    AND				SP.WORK_DATE        =	(
	                                            SELECT	MAX(WORK_DATE) 
	                                            FROM	STOCK_POLICY_QTY
	                                            )
        GROUP    BY		DD.ITEM_ID, 
                    	DD.DC_ID, 
                    	DM.DC_SHORT_NAME,
                    	DM.CD_SRC_LOC,
                        <!--DM.CD_FLAG,-->                    	
                    	DD.BASE_STOCK, 
                    	DD.STOCK_TERM,
                    	SP.SAFETY_STOCK_FLAG
        )DD,
        (
        SELECT	ITEM_ID
        FROM    ITEM_MST
        WHERE   ITYPE        	IN        ('FERT','HAWA')
        AND     ITEM_ID			like    '%'||'$!{item_id}'||'%'
        --and item_id in ('901000115')
	#if("$!{scm_charge}" == "00" )
		AND	(SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000' )	
	#elseif("$!{scm_charge}" != "XX" )
        AND		SCM_CHARGE		like    '%'||'$!{scm_charge}'||'%'
		AND	(SELL_STOP_DATE >= TO_CHAR(SYSDATE,'YYYYMMDD') OR SELL_STOP_DATE = '00000000' )
	#end        
        AND		SALES_CAT02  	like    '%'||'$!{sales_cat_02}'||'%'
        )    IM
                        
WHERE   DD.ITEM_ID		=	IM.ITEM_ID
AND		DD.BASE_STOCK	>	0	
<!--AND		DD.SALES_MEAN_3MONTH+
        DD.PRE_MONTH_SELL+
        DD.SALES_PRE_CUM+
        DD.SALES_MEAN_1WEEK+
        DD.SALES_MEAN_3WEEK > 0-->
AND		DD.CD_SRC_LOC IN('7100','7500','7600')        
<!--AND		DD.ITEM_ID		=	HP.ITEM_ID(+)
AND		DD.DC_ID		=	HP.DC_ID(+)-->
ORDER	BY	3
<!--ORDER    BY    1,2-->

	</query> 



<!--
=====================================================================================================
 끝  
=====================================================================================================
--> 

</queries>


	