package com.wisegrid.admin;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.zionex.t3sinc.common.CommonUtil;
import com.zionex.t3sinc.common.ControlBoard.MyLoadTask;

import xlib.cmc.GridData;
import xlib.cmc.OperateGridData;


import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;

import com.zionex.t3sinc.util.db.SincDatabaseUtility;
/** 
 * 
 * @author iCOMPIA CORP.
 */
public class sc_01120_plantAllocationPlanResult_export extends HttpServlet {

	private static final long serialVersionUID = -419201700278107216L;
	
	Connection 	conn 	= null;	Statement 	stmt	= null;	ResultSet	rs		= null;		String 		sql 	= null;	//Map sessionMap 	= new HashMap();		SincDatabaseUtility databaseUtility = new SincDatabaseUtility();			boolean endChk = true; // 전송 상태 체크 종료 여부 flag		public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {		GridData gdReq = null;		GridData gdRes = null;                System.out.println("START...");        		// Encode Type; UTF-8		req.setCharacterEncoding("UTF-8");		res.setContentType("text/html;charset=UTF-8");				PrintWriter out = res.getWriter();		try {			// WISEGRID_DATA Param WiseGridG			String rawData = req.getParameter("WISEGRID_DATA");						// 			gdReq = OperateGridData.parse(rawData);			//			String mode = gdReq.getParam("mode");						if (mode.equals("search")) // 				gdRes = doQuery(gdReq);			else if (mode.equals("save"))				gdRes = doSave(gdReq);					} catch (Exception e) {			gdRes = new GridData();			gdRes.setMessage("Error: " + e.getMessage());			gdRes.setStatus("false");			e.printStackTrace();		} finally {			try {				//				OperateGridData.write(gdRes, out);			} catch (Exception e) {				e.printStackTrace();			}		}	}		/* 조회 */	public GridData doQuery(GridData gdReq) throws Exception {				GridData gdRes = new GridData();				int rowCount = 0;		try {			gdRes = OperateGridData.cloneResponseGridData(gdReq);												String p_plant_alloc_version = gdReq.getParam("plant_alloc_version");			String p_sdate  = gdReq.getParam("sdate");			String p_checked_domain  = gdReq.getParam("checked_domain");						System.out.println("p_plant_alloc_version : "+p_plant_alloc_version);			System.out.println("p_sdate : "+p_sdate);			System.out.println("p_checked_domain : "+p_checked_domain);						//쿼리단에서 사용되는 키(ID) 값을 설정.			String paramKey   ="plant_alloc_version!%!sdate!%!checked_domain";						//쿼리단에서 사용되는 키값의 실제 값을 설정.			String paramCode  = p_plant_alloc_version + "!%!" + p_sdate + "!%!" + p_checked_domain;						String query_id   = "sc_01120_plantAllocationPlanResult_export";			ArrayList<ArrayList<String>> qResult = new CommonUtil().getSelQeury(paramKey, paramCode, query_id);						rowCount = qResult.size();						System.out.println("조회완료!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");			System.out.println(qResult);						// 			if (rowCount == 0) {				gdRes.addParam("mode", "search");					gdRes.setMessage("...");				gdRes.setStatus("true");				return gdRes;			}						for (int i = 0; i < rowCount; i++) {                gdRes.getHeader("CRUD").addValue("", "");  //추가,삭제,보정 을 구분하기 위한 부분.C(추가) ,U(보정) ,D(삭제)                gdRes.getHeader("GUBN" ).addValue(qResult.get(i).get(0 ), "");                 gdRes.getHeader("DIVISION" ).addValue(qResult.get(i).get(1 ), "");                 gdRes.getHeader("SALES_CAT03" ).addValue(qResult.get(i).get(3 ), qResult.get(i).get(2 ));                 gdRes.getHeader("ITEM_ID" ).addValue(qResult.get(i).get(4 ), "");                 gdRes.getHeader("ITEM_NAME" ).addValue(qResult.get(i).get(5 ), "");                 gdRes.getHeader("SPEC" ).addValue(qResult.get(i).get(6 ), "");                                 gdRes.getHeader("STOCK"  ).addValue(qResult.get(i).get(7 ), "");                 gdRes.getHeader("STOCK_8901"  ).addValue(qResult.get(i).get(8 ), "");                 gdRes.getHeader("W0_REQT_QTY"  ).addValue(qResult.get(i).get(9 ), "");                 gdRes.getHeader("W0_PROD_PLAN"  ).addValue(qResult.get(i).get(10 ), "");                 gdRes.getHeader("REMN_PROD_PLAN"  ).addValue(qResult.get(i).get(11 ), "");                 gdRes.getHeader("MI_ORDER"  ).addValue(qResult.get(i).get(12 ), "");                gdRes.getHeader("W0_ORDER"  ).addValue(qResult.get(i).get(13 ), "");                gdRes.getHeader("W0_CLOS_STOCK"  ).addValue(qResult.get(i).get(14 ), "");                gdRes.getHeader("W1_REQT_QTY"  ).addValue(qResult.get(i).get(15 ), "");                gdRes.getHeader("W1_PROD_PLAN"  ).addValue(qResult.get(i).get(16), "");                gdRes.getHeader("W1_ORDER"  ).addValue(qResult.get(i).get(17 ), "");                 gdRes.getHeader("W1_CLOS_STOCK"  ).addValue(qResult.get(i).get(18 ), "");                 gdRes.getHeader("W2_ORDER"  ).addValue(qResult.get(i).get(19 ), "");                 gdRes.getHeader("W2_REQT_QTY"  ).addValue(qResult.get(i).get(20 ), "");                gdRes.getHeader("W2_PROD_PLAN"  ).addValue(qResult.get(i).get(21), "");                gdRes.getHeader("W2_CLOS_STOCK"  ).addValue(qResult.get(i).get(22 ), "");                 gdRes.getHeader("W3_ORDER"  ).addValue(qResult.get(i).get(23 ), "");                 gdRes.getHeader("W3_CLOS_STOCK"  ).addValue(qResult.get(i).get(24 ), "");                 gdRes.getHeader("MINSS"  ).addValue(qResult.get(i).get(25 ), "");                 gdRes.getHeader("PROD_PLAN_YN"  ).addValue(qResult.get(i).get(26 ), "");                                			}			gdRes.addParam("mode", "search");			gdRes.setMessage("조회완료");			gdRes.setStatus("true");		} catch (Exception e) {			throw e;		}						return gdRes;	}		/*	 * insert, update, delete	 */	public GridData doSave(GridData gdReq) throws Exception {		System.out.println("doSave() start!!!");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성		GridData gdRes = new GridData(); // WiseGrid 객체생성		int rowCount = 0; // CRUD 컬럼 row 수		int union_check = 0; // UNION ALL 포함여부 CHECK		try {			// 화면에서 전달받은 "CRUD"의 row 수를 가져온다.			rowCount = gdReq.getHeader("CRUD").getRowCount();						String mode = gdReq.getParam("mode");						String p_plant_alloc_version = gdReq.getParam("plant_alloc_version");			String p_sdate  = gdReq.getParam("sdate");			String P_checked_domain  = gdReq.getParam("checked_domain");			String made_by = gdReq.getParam("user_id");			String version = "";			String item_id = "";			String due_date = ""; //차주 해당 토요일									//수출 판매계획			String export_plan_w1 = "";			String export_plan_w2 = "";			// 안전재고			String minss = "";						String crud = "";						System.out.println("p_plant_alloc_version : "+p_plant_alloc_version);			System.out.println("p_sdate : "+p_sdate);			System.out.println("P_checked_domain : "+P_checked_domain);						//보정할 건수가 없을때 오류안나게하기위해.			if(rowCount == 0) {				gdRes.addParam("mode", "save");				gdRes.setMessage("성공적으로 작업하였습니다.");				gdRes.setStatus("true");				return gdRes;			}						System.out.println("CRUD Row Count : " + rowCount);						String sql = "";			String sql2 = "", inner_sql = "";						// PLANT_ALLOC_ITEM_ADJ 저장 query				sql  = "merge into PLANT_ALLOC_ITEM_ADJ PA \n";			sql += "using ( \n";						// ITEM_MST의 안전재고(MINSS)저장 query			sql2  = "	UPDATE  /*+ bypass_ujvc*/ 																						\n";			sql2 += "	( 																												\n";			sql2 += "	SELECT	T1.MINSS, T2.MINSS NEW_MINSS																			\n";			sql2 += "	FROM	ITEM_MST	T1,                                                                                        	\n";			sql2 += "			(                                                                                                      	\n";									// 데이터 셋팅			for (int i = 0; i < rowCount; i++) {								if(gdReq.getHeader("ITEM_ID").getValue(i).equals("소계") || gdReq.getHeader("ITEM_NAME").getValue(i).equals("총계")){					System.out.println("ITEM_ID가 소계이거나 ITEM_NAME이 총계일때는 아무것도 실행안함!!!!");				}				else {					 					if( union_check > 0){						sql += "union all \n"; 						sql2 += "union all \n"; 					}					crud = gdReq.getHeader("CRUD").getValue(i);					System.out.println(gdReq.getHeader("ITEM_NAME").getValue(i));						System.out.println(crud);					 					 					//파라미터를 변수에 적용!!					 version = p_plant_alloc_version;					 item_id = gdReq.getHeader("ITEM_ID").getValue(i);					 due_date = p_sdate;					 export_plan_w1 = gdReq.getHeader("W1_REQT_QTY").getValue(i);					 export_plan_w2 = gdReq.getHeader("W2_REQT_QTY").getValue(i);					 minss = gdReq.getHeader("MINSS").getValue(i);											// W주 ----------------------------------------------------------------------------------------------------------------					sql +=	"select '" + version + "' AS VERSION, '" + item_id + "' AS ITEM_ID, " + 							"TRUNC(TO_DATE('" + due_date + "'),'D')+13 AS DUE_DATE, " +							"TO_NUMBER(REPLACE('" + export_plan_w1 + "',',','')) AS EXPORT_PLAN, '"   + made_by + "' AS MADE_BY from DUAL \n";					//-------------------------------------------------------------------------------------------------------------------					 					// W+1주 --------------------------------------------------------------------------------------------------------------					sql +=	"union all \n" +							"select '" + version + "' AS VERSION, '" + item_id + "' AS ITEM_ID, " + 							"TRUNC(TO_DATE('" + due_date + "'),'D')+20 AS DUE_DATE, " +							"TO_NUMBER(REPLACE('" + export_plan_w2 + "',',','')) AS EXPORT_PLAN, '"   + made_by + "' AS MADE_BY from DUAL \n";					//-------------------------------------------------------------------------------------------------------------------					 					//-------------------------------------------------------------------------------------------------------------------					inner_sql  = "	SELECT		'" + item_id 		+ "'				AS ITEM_ID, 					\n";					inner_sql += "				'" + minss	 		+ "'	 	        AS MINSS						\n";										inner_sql += "	FROM		DUAL																	\n";										//-------------------------------------------------------------------------------------------------------------------										sql2 += inner_sql;										if(rowCount == 1){ // update건수가 1건인 경우 ora-01732에러가 발생한다. 이유모름. 따라서 1건인 경우 강제로 두건으로 만든다.						sql2 += "UNION	ALL \n" + inner_sql;					}										union_check++;				}			}//for문 끝.						sql += ") PP \n";									sql += "on (PA.VERSION = PP.VERSION                                                                                                  \n";			sql += "AND PA.ITEM_ID = PP.ITEM_ID                                                                                                  \n";			sql += "AND PA.DUE_DATE = PP.DUE_DATE)                                                                                               \n";			sql += "when matched then update set                                                                                                 \n";			sql += "     PA.EXPORT_PLAN = PP.EXPORT_PLAN,                                                                                        \n";			sql += "     PA.MADE_TYPE = 'UP',                                                                                             \n";			sql += "     PA.MADE_DTTM = SYSDATE,                                                                                             \n";			sql += "     PA.MADE_BY = PP.MADE_BY                                                                                                 \n";			sql += "when not matched then insert(PA.VERSION, PA.ITEM_ID, PA.DUE_DATE, PA.EXPORT_PLAN, PA.MADE_TYPE, PA.MADE_DTTM, PA.MADE_BY)    \n";			sql += "values(PP.VERSION, PP.ITEM_ID, PP.DUE_DATE, PP.EXPORT_PLAN, 'AD', SYSDATE, PP.MADE_BY)                                 \n";			sql2 += "			)			T2                                                                                      \n";			sql2 += "	WHERE	T1.ITEM_ID	= T2.ITEM_ID                                                                            \n";			sql2 += "	)                                                                                                        	\n";			sql2 += "	SET		MINSS = NEW_MINSS																 					\n";						System.out.println("-----------------------------------------------QUERY-----------------------------------------------");			System.out.println(sql);			System.out.println("-----------------------------------------------QUERY-----------------------------------------------");						System.out.println("sql executeQuery 실행!!!");						rs = databaseUtility.executeQuery(stmt, sql);						System.out.println("sql executeQuery 종료!!!");			System.out.println("-----------------------------------------------QUERY2-----------------------------------------------");			System.out.println(sql2);			System.out.println("-----------------------------------------------QUERY2-----------------------------------------------");						System.out.println("sql2 executeQuery 실행!!!");						rs = databaseUtility.executeQuery(stmt, sql2);						System.out.println("sql2 executeQuery 종료!!!");						/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			gdRes.addParam("mode", "save");			gdRes.setMessage("성공적으로 작업하였습니다.");			gdRes.setStatus("true");		} catch (Exception e) {			throw e;		} finally {	        databaseUtility.close(conn, stmt, rs);              	    }		System.out.println("doSave() end!!!");		return gdRes;	}		}