package com.wisegrid.admin;import java.io.IOException;import java.io.PrintWriter;import java.sql.SQLException;import java.util.ArrayList;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.zionex.t3sinc.common.CommonUtil;import xlib.cmc.GridData;import xlib.cmc.OperateGridData;import java.sql.Connection;import java.sql.ResultSet;import java.sql.Statement;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedList;import java.util.Map;import com.zionex.t3sinc.util.db.SincDatabaseUtility;/**  *  * @author iCOMPIA CORP. */public class rp_01010_dailyTransportPlanNew_list extends HttpServlet {	private static final long serialVersionUID = -419201700278107216L;		Connection 	conn 	= null;	Statement 	stmt	= null;	ResultSet	rs		= null;		String 		sql 	= null;	//Map sessionMap 	= new HashMap();		SincDatabaseUtility databaseUtility = new SincDatabaseUtility();		public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {		GridData gdReq = null;		GridData gdRes = null;                System.out.println("START...");        		// Encode Type; UTF-8		req.setCharacterEncoding("UTF-8");		res.setContentType("text/html;charset=UTF-8");				PrintWriter out = res.getWriter();		try {			// WISEGRID_DATA Param WiseGridG			String rawData = req.getParameter("WISEGRID_DATA");						// 			gdReq = OperateGridData.parse(rawData);			//			String mode = gdReq.getParam("mode");						if (mode.equals("search")) // 				gdRes = doQuery(gdReq);			else if (mode.equals("search3"))				gdRes = doQuery3(gdReq);			else if (mode.equals("search4"))				gdRes = doQuery4(gdReq);			else if (mode.equals("searchSumTruck"))				gdRes = doQuerySumTruck(gdReq);			else if (mode.equals("save"))				gdRes = doSave(gdReq);			else if (mode.equals("saveEtc"))				gdRes = doSaveEtc(gdReq);			else if (mode.equals("sumTruck"))				gdRes = doSumTruck(gdReq);			else if (mode.equals("Regen1"))				gdRes = doRegen1(gdReq);			else if (mode.equals("Regen2"))				gdRes = doRegen2(gdReq);			//자동상차 프로세스 용			else if (mode.equals("Regen010"))				gdRes = doRegen010(gdReq);			else if (mode.equals("Regen020"))				gdRes = doRegen020(gdReq);			else if (mode.equals("Regen030"))				gdRes = doRegen030(gdReq);			else if (mode.equals("Regen040"))				gdRes = doRegen040(gdReq);			else if (mode.equals("Regen050"))				gdRes = doRegen050(gdReq);			else if (mode.equals("Regen090"))				gdRes = doRegen090(gdReq);			//자동상차 통합버튼			else if (mode.equals("Regen100"))				gdRes = doRegen100(gdReq);			else if (mode.equals("Regen200"))				gdRes = doRegen200(gdReq);			else if (mode.equals("Regen300"))				gdRes = doRegen300(gdReq);			else if (mode.equals("search5"))				gdRes = doQuery5(gdReq);					} catch (Exception e) {			gdRes = new GridData();			gdRes.setMessage("Error: " + e.getMessage());			gdRes.setStatus("false");			e.printStackTrace();		} finally {			try {				//				OperateGridData.write(gdRes, out);			} catch (Exception e) {				e.printStackTrace();			}		}	}	public GridData doQuery(GridData gdReq) throws Exception {				GridData gdRes = new GridData();				int rowCount = 0;				try {			gdRes = OperateGridData.cloneResponseGridData(gdReq);						System.out.println("getParam...");			String version = gdReq.getParam("version");			String seq = gdReq.getParam("seq");			String tgt_loc = gdReq.getParam("tgt_loc");			String plan_type = gdReq.getParam("plan_type");			String trans_start = gdReq.getParam("trans_start");			String trans_end = gdReq.getParam("trans_end");			String sort_type = gdReq.getParam("sort_type");			String sort_stock_day = gdReq.getParam("sort_stock_day");						String paramKey = "version!%!seq!%!tgt_loc!%!plan_type!%!trans_start!%!trans_end!%!sort_type!%!sort_stock_day";			String paramCode = version + "!%!" + seq + "!%!"							 + tgt_loc + "!%!" + plan_type + "!%!" 							 + trans_start + "!%!" + trans_end + "!%!"							 + sort_type + "!%!" + sort_stock_day;			String query_id = gdReq.getParam("query_id");			System.out.println("getSelQeury : " + query_id);			ArrayList<ArrayList<String>> qResult = new CommonUtil().getSelQeury(paramKey, paramCode, query_id);			rowCount = qResult.size();			// 			if (rowCount == 0) {				gdRes.addParam("mode", "search");				gdRes.setMessage("...");				gdRes.setStatus("true");				return gdRes;			}						/*출고 사업장 리스트를 추출하여 콤보리슽 생성*/			String query_id2 = "dc_id_and_short_name_list"; 			System.out.println("getSelQeury : " + query_id2);			ArrayList<ArrayList<String>> locList = new CommonUtil().getSelQeury("", "", query_id2);						int arrIdx = locList.size();						String[] locIdList = new String[arrIdx];			String[] locNameList = new String[arrIdx];						System.out.println("출고 사업장 콤보리슽 생성");			for ( int i = 0 ; i < arrIdx ; i++ ){				locIdList[i] = locList.get(i).get(0);   // 출고장 ID 콤보리스트 생성				locNameList[i] = locList.get(i).get(1); // 출고장 이름 콤보리스트 생성			}						System.out.println("출고 사업장 컬럼에 콤보리스트 set");			gdRes.getHeader("SRC_LOC").setComboValues(locNameList, locIdList );		//출고 사업장 콤보리스트 출고 사업장 컬럼에 set							        //그리드에 data input			System.out.println("그리드 객체에 Data Input");			for (int i = 0; i < rowCount; i++) {								gdRes.getHeader("CRUD"			).addValue( "", "");				gdRes.getHeader("NO"			).addValue( i+1 + "", "");				gdRes.getHeader("SELECTED"		).addValue("0", "");                    				gdRes.getHeader("RTE"		    ).addValue(qResult.get(i).get(0 ), ""); 				gdRes.getHeader("TRANS_DATE"	).addValue(qResult.get(i).get(1 ), "");				//gdRes.getHeader("SRC_LOC"	  	).addValue(qResult.get(i).get(3 ), qResult.get(i).get(2 ));				gdRes.getHeader("SRC_LOC"	  	).addSelectedHiddenValue(qResult.get(i).get(2));				gdRes.getHeader("TRUCK_SEQ" 	).addValue(qResult.get(i).get(4 ), "");				gdRes.getHeader("ITEM_ID"		).addValue(qResult.get(i).get(5 ), "");				gdRes.getHeader("ITEM_NAME"    	).addValue(qResult.get(i).get(6 ), "");								gdRes.getHeader("SP01"    		).addValue("", "");								gdRes.getHeader("CUM_PLT" 		).addValue(qResult.get(i).get(13), "");				gdRes.getHeader("CUM_BOX" 		).addValue(qResult.get(i).get(14), "");				gdRes.getHeader("SP02"    		).addValue("", "");								gdRes.getHeader("BASE_STK_PLT" 	).addValue(qResult.get(i).get(7 ), "");				gdRes.getHeader("BASE_STK_BOX" 	).addValue(qResult.get(i).get(8 ), "");				gdRes.getHeader("SP03"    		).addValue("", "");								gdRes.getHeader("ADD_STK_PLT" 	).addValue(qResult.get(i).get(9 ), "");				gdRes.getHeader("ADD_STK_BOX" 	).addValue(qResult.get(i).get(10), "");				gdRes.getHeader("SP04"    		).addValue("", "");								gdRes.getHeader("PROD_PLT" 		).addValue(qResult.get(i).get(11), "");				gdRes.getHeader("PROD_BOX" 		).addValue(qResult.get(i).get(12), "");				gdRes.getHeader("BOX_PER_PALET" ).addValue(qResult.get(i).get(15), "");				gdRes.getHeader("PLAN_TYPE" 	).addValue(qResult.get(i).get(16), "");										}					/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			System.out.println("화면에 전달할 파마미터 설정");			gdRes.addParam("mode", "search");			gdRes.setMessage("조회 완료");			gdRes.setStatus("true");		} catch (Exception e) {			throw e;		}		System.out.println("그리드 객체 return");				return gdRes;	}		public GridData doQuery3(GridData gdReq) throws Exception {				GridData gdRes = new GridData();				int rowCount = 0;				try {			gdRes = OperateGridData.cloneResponseGridData(gdReq);						System.out.println("getParam...");						String item_id 		= gdReq.getParam("item_id");			String version 		= gdReq.getParam("version");			String seq 			= gdReq.getParam("seq");			String tgt_loc 		= gdReq.getParam("tgt_loc");			String sale_yyyy 	= gdReq.getParam("sale_yyyy");			String sale_version = gdReq.getParam("sale_version");			String sale_seq 	= gdReq.getParam("sale_seq");									String paramKey = "item_id!%!version!%!seq!%!tgt_loc!%!sale_yyyy!%!sale_version!%!sale_seq";			String paramCode = item_id + "!%!" + version + "!%!" 							 + seq + "!%!" + tgt_loc + "!%!" 							 + sale_yyyy + "!%!" + sale_version +"!%!"							 + sale_seq;			String query_id = gdReq.getParam("query_id");			System.out.println("getSelQeury : " + query_id);			ArrayList<ArrayList<String>> qResult = new CommonUtil().getSelQeury(paramKey, paramCode, query_id);			rowCount = qResult.size();			// 			if (rowCount == 0) {				gdRes.addParam("mode", "search3");				gdRes.setMessage("...");				gdRes.setStatus("true");				return gdRes;			}										        //그리드에 data input			System.out.println("그리드 객체에 Data Input");			for (int i = 0; i < rowCount; i++) {								gdRes.getHeader("ITEM_NAME"	  ).addValue(qResult.get(i).get(1 ), qResult.get(i).get(0 ));				gdRes.getHeader("BS_STOCK"	  ).addValue(qResult.get(i).get(2 ), "");				gdRes.getHeader("D00_SLP"	  ).addValue(qResult.get(i).get(3 ), "");				gdRes.getHeader("D00_STK"	  ).addValue(qResult.get(i).get(4 ), "");				gdRes.getHeader("D01_SLP"	  ).addValue(qResult.get(i).get(5 ), "");				gdRes.getHeader("D01_STK"	  ).addValue(qResult.get(i).get(6 ), "");				gdRes.getHeader("ITP_QTY"	  ).addValue(qResult.get(i).get(7 ), "");				gdRes.getHeader("TP_QTY"	  ).addValue(qResult.get(i).get(8 ), "");				gdRes.getHeader("NUM_STK"	  ).addValue(qResult.get(i).get(9 ), "");				gdRes.getHeader("MON_SLP"	  ).addValue(qResult.get(i).get(10), "");				gdRes.getHeader("MON_SLR"	  ).addValue(qResult.get(i).get(11), "");				gdRes.getHeader("AVG_SLR"	  ).addValue(qResult.get(i).get(12), "");				gdRes.getHeader("SAFETY_STOCK").addValue(qResult.get(i).get(13), "");               			}					/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			System.out.println("화면에 전달할 파마미터 설정");			gdRes.addParam("mode", "search3");			gdRes.setMessage("조회 완료");			gdRes.setStatus("true");		} catch (Exception e) {			throw e;		}		System.out.println("그리드 객체 return");				return gdRes;	}	public GridData doQuery4(GridData gdReq) throws Exception {				GridData gdRes = new GridData();				int rowCount = 0;				try {			gdRes = OperateGridData.cloneResponseGridData(gdReq);						System.out.println("getParam...");						String item_id = gdReq.getParam("item_id");			String version = gdReq.getParam("version");			String seq = gdReq.getParam("seq");			String tgt_loc = gdReq.getParam("tgt_loc");			String src_loc = gdReq.getParam("src_loc");			String search_type = gdReq.getParam("search_type");									String paramKey = "item_id!%!version!%!seq!%!tgt_loc!%!src_loc!%!search_type";			String paramCode = item_id + "!%!" + version + "!%!" 							 + seq + "!%!" + tgt_loc + "!%!" + src_loc + "!%!" + search_type;			String query_id = gdReq.getParam("query_id");			System.out.println("getSelQeury : " + query_id);			ArrayList<ArrayList<String>> qResult = new CommonUtil().getSelQeury(paramKey, paramCode, query_id);			rowCount = qResult.size();			// 			if (rowCount == 0) {				gdRes.addParam("mode", "search4");				gdRes.setMessage("...");				gdRes.setStatus("true");				return gdRes;			}										        //그리드에 data input			System.out.println("그리드 객체에 Data Input");			for (int i = 0; i < rowCount; i++) {								gdRes.getHeader("ITEM_NAME"    	).addValue(qResult.get(i).get(1 ), qResult.get(i).get(0 ));				gdRes.getHeader("STOCK_DAY"		).addValue(qResult.get(i).get(2 ), "");				gdRes.getHeader("STOCK_QTY"		).addValue(qResult.get(i).get(3 ), "");                 				gdRes.getHeader("TRQTY_EX"		).addValue(qResult.get(i).get(4 ), ""); // 익일 수송예정량                				gdRes.getHeader("SALES_MEAN_3WEEK"		).addValue(qResult.get(i).get(5 ), ""); // 익일 수송예정량                			}					/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			System.out.println("화면에 전달할 파마미터 설정");			gdRes.addParam("mode", "search4");			gdRes.setMessage("조회 완료");			gdRes.setStatus("true");		} catch (Exception e) {			throw e;		}		System.out.println("그리드 객체 return");				return gdRes;	}		public GridData doQuery5(GridData gdReq) throws Exception {				GridData gdRes = new GridData();				int rowCount = 0;				try {			gdRes = OperateGridData.cloneResponseGridData(gdReq);						System.out.println("getParam...");						String version = gdReq.getParam("version");			String tgt_loc = gdReq.getParam("tgt_loc");			String trans_start = gdReq.getParam("trans_start");			String paramKey = "version!%!tgt_loc!%!trans_start";			String paramCode = version + "!%!" +tgt_loc + "!%!" + trans_start ;			String query_id = gdReq.getParam("query_id");			System.out.println("getSelQeury : " + query_id);			ArrayList<ArrayList<String>> qResult = new CommonUtil().getSelQeury(paramKey, paramCode, query_id);			rowCount = qResult.size();			// 			if (rowCount == 0) {				gdRes.addParam("mode", "search5");				gdRes.setMessage("...");				gdRes.setStatus("true");				return gdRes;			}										        //그리드에 data input			System.out.println("그리드 객체에 Data Input");			for (int i = 0; i < rowCount; i++) {								gdRes.getHeader("ITEM_CODE"		).addValue(qResult.get(i).get(0 ), "");				gdRes.getHeader("ITEM_NAME"		).addValue(qResult.get(i).get(1 ), "");                 				gdRes.getHeader("STOCK_QTY"		).addValue(qResult.get(i).get(2 ), "");              				gdRes.getHeader("ORDER_DATE"    ).addValue(qResult.get(i).get(3 ), "");				gdRes.getHeader("ETD_DATE"    	).addValue(qResult.get(i).get(4 ), "");				gdRes.getHeader("ORDER_QTY"		).addValue(qResult.get(i).get(5 ), "");              			}					/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			System.out.println("화면에 전달할 파마미터 설정");			gdRes.addParam("mode", "search5");			gdRes.setMessage("조회 완료");			gdRes.setStatus("true");		} catch (Exception e) {			throw e;		}		System.out.println("그리드 객체 return");				return gdRes;	}		// 저장	public GridData doSave(GridData gdReq) throws Exception {		System.out.println("doSave() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		int rowCount = 0; // CRUD 컬럼 row 수				System.out.println("Total Row Count : " + gdReq.getHeader("NO").getRowCount());		// 화면에서 전달받은 "CRUD"의 row 수를 가져온다.		rowCount = gdReq.getHeader("CRUD").getRowCount();				if(rowCount == 0) {			gdRes.addParam("mode", "save");			gdRes.setMessage("doSave_저장할 DATA가 없습니다.");			gdRes.setStatus("true");			return gdRes;		}				System.out.println("CRUD Row Count : " + rowCount);								String sql 			= "INSERT  INTO TRANS_PLAN_TEMP(VERSION, SEQ, PLAN_TYPE, TRANS_DATE, OLD_DATE, TGT_LOC, SRC_LOC, TRUCK_SEQ, ITEM_ID, ITEM_NAME, \n" 			+ "                             BASE_STK_PLT, BASE_STK_BOX, ADD_STK_PLT, ADD_STK_BOX, PROD_PLT, PROD_BOX, USER_ID, MADE_TYPE)   \n";			System.out.println("getParam");			String version = gdReq.getParam("version");			String seq = gdReq.getParam("seq");			String tgt_loc = gdReq.getParam("tgt_loc");			String plan_type = gdReq.getParam("plan_type");			String trans_start = gdReq.getParam("trans_start");			String trans_end = gdReq.getParam("trans_end");			String user_id = gdReq.getParam("user_id");						// Temp Table에 Insert하기전에 한번 지워준다.			String delSql = "DELETE  TRANS_PLAN_TEMP TMP \n"						  + "WHERE   TMP.VERSION    = '" + version + "' \n"						  + "AND     TMP.SEQ        = '" + seq + "' \n"						  + "AND     TMP.TGT_LOC    = '" + tgt_loc + "' \n"						  + "AND     TMP.USER_ID    = '" + user_id + "' \n";						// 데이터 셋팅			System.out.println("sql 쿼리 생성");			boolean flag = false;			for (int i = 0; i < rowCount; i++) {				//System.out.println(gdReq.getHeader("CRUD").getValue(i));							String trans_date = gdReq.getHeader("TRANS_DATE").getValue(i);				String old_date = gdReq.getHeader("TRANS_DATE").getHiddenValue(i);				String src_loc = "";				if(gdReq.getHeader("SRC_LOC").getSelectedIndex(i) > -1){												src_loc = gdReq.getHeader("SRC_LOC").getComboHiddenValues()[gdReq.getHeader("SRC_LOC").getSelectedIndex(i)];				}				String truck_seq = gdReq.getHeader("TRUCK_SEQ").getValue(i);				String item_id = gdReq.getHeader("ITEM_ID").getValue(i);				String item_name = gdReq.getHeader("ITEM_NAME").getValue(i);				String base_stk_plt = gdReq.getHeader("BASE_STK_PLT").getValue(i);				String base_stk_box = gdReq.getHeader("BASE_STK_BOX").getValue(i);				String add_stk_plt = gdReq.getHeader("ADD_STK_PLT").getValue(i);				String add_stk_box = gdReq.getHeader("ADD_STK_BOX").getValue(i);				String prod_plt = gdReq.getHeader("PROD_PLT").getValue(i);				String prod_box = gdReq.getHeader("PROD_BOX").getValue(i);				String made_type = gdReq.getHeader("CRUD").getValue(i);								if( src_loc.equals("") || src_loc.equals(null) || item_id.equals("") || item_id.equals(null) ){					continue;				}				else{					if( flag ){						sql += " union all \n"; 					} 					flag = true;					sql += "SELECT  '" + version + "' AS VERSION, '" + seq + "' AS SEQ, '" + plan_type + "' AS PLAN_TYPE, TO_DATE('" + trans_date + "','YYYYMMDD') AS TRANS_DATE, TO_DATE('" + old_date + "','YYYYMMDD') AS OLD_DATE, '" + tgt_loc + "' AS TGT_LOC, '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + user_id + "' AS USER_ID, '" + made_type + "' AS MADE_TYPE FROM DUAL ";				}							}		try{			conn = databaseUtility.getConnection("t3sinc"); // DB Connection			stmt = conn.createStatement(); // statement 객체 생성						System.out.println("Delete Temp Table !!");			System.out.println(delSql);			databaseUtility.executeQuery(stmt, delSql);						System.out.println("-----------------------------------------------QUERY-----------------------------------------------");			System.out.println(sql);			System.out.println("-----------------------------------------------QUERY-----------------------------------------------");						System.out.println("executeQuery 실행!!!");						rs = databaseUtility.executeQuery(stmt, sql);						System.out.println("executeQuery 종료!!!");						System.out.println("call sp_TransportPlanNew() 실행!!!");						String sql2 = "call sp_TransportPlanNew('" + version + "','" + seq + "','" + tgt_loc + "','" + plan_type + "','" + trans_start + "','" + trans_end + "','" + user_id + "')";			System.out.println(sql2);			boolean result = stmt.execute(sql2);						System.out.println("call sp_TransportPlanNew() 종료!!! - 결과 : " + result);						gdRes.addParam("mode", "save");			gdRes.setMessage("성공적으로 작업하였습니다.");			gdRes.setStatus("true");		}catch (Exception e) {			throw e;		} finally {            databaseUtility.close(conn, stmt, rs);                      }				System.out.println("doSave() end!!!");		return gdRes;	}				// 개별수송계획 이관	public GridData doSaveEtc(GridData gdReq) throws Exception {		System.out.println("doSaveEtc() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		int rowCount = 0; // CRUD 컬럼 row 수				System.out.println("Total Row Count : " + gdReq.getHeader("NO").getRowCount());			// 화면에서 전달받은 "CRUD"의 row 수를 가져온다.			rowCount = gdReq.getHeader("SELECTED").getRowCount();						if(rowCount == 0) {				gdRes.addParam("mode", "saveEtc");				gdRes.setMessage("saveEtc : 저장할 DATA가 없습니다.");				gdRes.setStatus("true");				return gdRes;			}						System.out.println("SELECTED Row Count : " + rowCount);							String trans_start = gdReq.getParam("trans_start");			String trans_end = gdReq.getParam("trans_end");			String plan_type = gdReq.getParam("plan_type");									String sql 			= "INSERT  INTO TRANS_PLAN(VERSION, SEQ, PLAN_TYPE, TRANS_DATE, TGT_LOC, SRC_LOC, TRUCK_SEQ, ITEM_ID, ROUTE_ID, BRAND_NO, BRAND_LINE_NO, \n" 			+ "                        DESCRIPTION, BASE_STK_QTY, BASE_STK_PLT, ADD_STK_QTY, ADD_STK_PLT, PROD_QTY, PROD_PLT, MOD_FLAG, MOD_QTY,     \n"			+ "                        MADE_TYPE, MADE_DTTM, MADE_BY, BASE_STK_EA)																     \n";			//			String sql2//			= "DELETE  TRANS_PLAN 																			\n" //			+ "WHERE   (VERSION, SEQ, PLAN_TYPE, TRANS_DATE, TGT_LOC, SRC_LOC, TRUCK_SEQ, ITEM_ID) IN     	\n"//			+ "        ( 																					\n";			// 이관 데이터  MADE_TYPE = ETC  				String sql2			= "UPDATE	TRANS_PLAN 																			\n" 			+ "SET		MOD_FLAG = 'EX'																	\n" 			+ "WHERE   (VERSION, SEQ, PLAN_TYPE, TRANS_DATE, TGT_LOC, SRC_LOC, TRUCK_SEQ, ITEM_ID) IN     	\n"			+ "        ( 																					\n";									System.out.println("getParam");			String version = gdReq.getParam("version");			String seq = gdReq.getParam("seq");			String tgt_loc = gdReq.getParam("tgt_loc");			String user_id = gdReq.getParam("user_id");						String version2 = gdReq.getParam("version2");			String seq2 = gdReq.getParam("seq2");															// 데이터 셋팅			System.out.println("sql 쿼리 생성");			for (int i = 0; i < rowCount; i++) {											String trans_date = gdReq.getHeader("TRANS_DATE").getValue(i);				String src_loc = "";				if(gdReq.getHeader("SRC_LOC").getSelectedIndex(i) > -1){												src_loc = gdReq.getHeader("SRC_LOC").getComboHiddenValues()[gdReq.getHeader("SRC_LOC").getSelectedIndex(i)];				}				String truck_seq = gdReq.getHeader("TRUCK_SEQ").getValue(i);				String item_id = gdReq.getHeader("ITEM_ID").getValue(i);				String item_name = gdReq.getHeader("ITEM_NAME").getValue(i);				String base_stk_plt = gdReq.getHeader("BASE_STK_PLT").getValue(i);				String base_stk_box = gdReq.getHeader("BASE_STK_BOX").getValue(i);				String add_stk_plt = gdReq.getHeader("ADD_STK_PLT").getValue(i);				String add_stk_box = gdReq.getHeader("ADD_STK_BOX").getValue(i);				String prod_plt = gdReq.getHeader("PROD_PLT").getValue(i);				String prod_box = gdReq.getHeader("PROD_BOX").getValue(i);				plan_type = gdReq.getHeader("PLAN_TYPE").getValue(i);																/*  이관할 시				 *  기본재고상차 = 기본재고상차 + 추가재고상차 + 생산상차				 *  추가재고상차 = 0				 *  생산상차 = 0				 */				base_stk_plt = (Float.valueOf(base_stk_plt) + Float.valueOf(add_stk_plt) + Float.valueOf(prod_plt)) + "";				add_stk_plt = "0";				prod_plt = "0";								base_stk_box = (Integer.valueOf(base_stk_box) + Integer.valueOf(add_stk_box) + Integer.valueOf(prod_box)) + "";				add_stk_box = "0";				prod_box = "0";								if(plan_type.equals("") || plan_type.equals(null))					plan_type = "ZM1";												if( src_loc.equals("") || src_loc.equals(null) ){					continue;				}				else{					if( i > 0){						sql += " union all \n"; 						sql2 += " union all \n"; 					} 					sql += "SELECT  '" + version + "' AS VERSION, '" + seq + "' AS SEQ, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, '" + trans_date + "' AS TRANS_DATE, '" + tgt_loc + "' AS TGT_LOC, 				\n";					sql += "        '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '' AS ROUTE_ID, '' AS BRAND_NO, 													\n";					sql += "        '' AS BRAND_LINE_NO, '" + item_name + "' AS DESCRIPTION, '" + base_stk_box + "' AS BASE_STK_QTY, '" + base_stk_plt + "' AS BASE_STK_PLT, '" + add_stk_box + "' AS ADD_STK_QTY, 	\n";					sql += "        '" + add_stk_plt + "' AS ADD_STK_PLT, '" + prod_box + "' AS PROD_QTY, '" + prod_plt + "' AS PROD_PLT, '' AS MOD_FLAG, '0' AS MOD_QTY, 											\n";					sql += "        'AD' AS MADE_TYPE, SYSDATE AS MADE_DTTM, '" + user_id + "' AS MADE_BY, '' AS BASE_STK_EA 																						\n";					sql += "FROM    DUAL                         																																					\n";										sql2 += "SELECT  '" + version2 + "' AS VERSION, '" + seq2 + "' AS SEQ, '" + plan_type + "'AS PLAN_TYPE, '" + trans_date + "'AS TRANS_DATE, '" + tgt_loc + "'AS TGT_LOC, '" + src_loc + "'AS SRC_LOC, '" + truck_seq + "'AS TRUCK_SEQ, '" + item_id + "'AS ITEM_ID FROM DUAL ";				}							}						sql2 += ")\n";					try{			conn = databaseUtility.getConnection("t3sinc"); // DB Connection			stmt = conn.createStatement(); // statement 객체 생성			// 이관 메이드 타입에 ETC			System.out.println("-----------------------------------------------QUERY2-----------------------------------------------");			System.out.println(sql2);			System.out.println("-----------------------------------------------QUERY2-----------------------------------------------");						System.out.println(" sql2 executeQuery 실행!!!");						rs = databaseUtility.executeQuery(stmt, sql2);						System.out.println(" sql2 executeQuery 종료!!!");			/////////////////// 2000000.01.01 버전으로 저장			System.out.println("-----------------------------------------------QUERY-----------------------------------------------");			System.out.println(sql);			System.out.println("-----------------------------------------------QUERY-----------------------------------------------");						System.out.println(" sql executeQuery 실행!!!");						rs = databaseUtility.executeQuery(stmt, sql);						System.out.println(" sql executeQuery 종료!!!");												System.out.println("call sp_TransportPlanSaveEtc() 실행!!!");									String sql3 = "call sp_TransportPlanSaveEtc('" + version2 + "','" + seq + "','" + tgt_loc + "','" + plan_type + "','" + trans_start + "','" + trans_end + "','" + user_id + "')";			System.out.println(sql3);			boolean result = stmt.execute(sql3);						System.out.println("call sp_TransportPlanSaveEtc() 종료!!! - 결과 : " + result);						/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			gdRes.addParam("mode", "saveEtc");			gdRes.setMessage("성공적으로 작업하였습니다.");			gdRes.setStatus("true");					}catch (Exception e) {			throw e;		}finally {            databaseUtility.close(conn, stmt, rs);                      }		System.out.println("doSaveEtc() end!!!");		return gdRes;	}			// 합차	public GridData doSumTruck(GridData gdReq) throws Exception {		System.out.println("doSumTruck() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		int rowCount = 0; // CRUD 컬럼 row 수				System.out.println("Total Row Count : " + gdReq.getHeader("NO").getRowCount());			// 화면에서 전달받은 "CRUD"의 row 수를 가져온다.			//rowCount = gdReq.getHeader("CRUD").getRowCount();			rowCount = gdReq.getHeader("NO").getRowCount();						if(rowCount == 0) {				gdRes.addParam("mode", "sumTruck");				gdRes.setMessage("sumTruck : 저장할 DATA가 없습니다.");				gdRes.setStatus("true");				return gdRes;			}					////////////						String sql 			= "INSERT  INTO TP_SUM_TRUCK(CRUD, RTE, TRANS_DATE, OLD_TRNAS_DATE, SRC_LOC, TRUCK_SEQ, ITEM_ID, ITEM_NAME, BASE_STK_PLT, BASE_STK_BOX, \n" 			+ "                          ADD_STK_PLT, ADD_STK_BOX, PROD_PLT, PROD_BOX, BOX_PER_PALET, PLAN_TYPE, FLAG, USER_ID)				         \n";			System.out.println("getParam");			String p_version = gdReq.getParam("version");			String p_seq = gdReq.getParam("seq");			String p_tgt_loc = gdReq.getParam("tgt_loc");			String p_trans_date = gdReq.getParam("trans_date");			String p_src_loc = gdReq.getParam("src_loc");			String p_truck_seq = gdReq.getParam("truck_seq");			String p_user_id = gdReq.getParam("user_id");						// 데이터 셋팅			System.out.println("sql 쿼리 생성");			for (int i = 0; i < rowCount; i++) {								String src_loc = "";				if(gdReq.getHeader("SRC_LOC").getSelectedIndex(i) > -1){												src_loc = gdReq.getHeader("SRC_LOC").getComboHiddenValues()[gdReq.getHeader("SRC_LOC").getSelectedIndex(i)];				}  //출고장								if(src_loc.equals(null) || src_loc.equals("")) {					continue;				}				else{					if( i > 0){						sql += " union all \n"; 					} 										String crud = gdReq.getHeader("CRUD").getValue(i);					System.out.println(crud);					String rte = gdReq.getHeader("RTE").getValue(i);					String trans_date = gdReq.getHeader("TRANS_DATE").getValue(i);					String old_trans_date = gdReq.getHeader("TRANS_DATE").getHiddenValue(i);					String truck_seq = gdReq.getHeader("TRUCK_SEQ").getValue(i);					String item_id = gdReq.getHeader("ITEM_ID").getValue(i);					String item_name = gdReq.getHeader("ITEM_NAME").getValue(i);					String base_stk_plt = gdReq.getHeader("BASE_STK_PLT").getValue(i);					String base_stk_box = gdReq.getHeader("BASE_STK_BOX").getValue(i);					String add_stk_plt = gdReq.getHeader("ADD_STK_PLT").getValue(i);					String add_stk_box = gdReq.getHeader("ADD_STK_BOX").getValue(i);					String prod_plt = gdReq.getHeader("PROD_PLT").getValue(i);					String prod_box = gdReq.getHeader("PROD_BOX").getValue(i);					String box_per_palet = gdReq.getHeader("BOX_PER_PALET").getValue(i);					String plan_type = gdReq.getHeader("PLAN_TYPE").getValue(i);					String selected = gdReq.getHeader("SELECTED").getValue(i); // checked : 1					//System.out.println(selected);										if( crud.equals("DE")){						sql += "SELECT  'DE' AS CRUD, '" + rte + "' AS RTE, '" + trans_date + "' AS TRANS_DATE, '" + old_trans_date + "' AS OLD_TRNAS_DATE, '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + box_per_palet + "' AS BOX_PER_PALET, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, '' AS FLAG, '" + p_user_id + "' AS USER_ID FROM DUAL ";					}else if( selected.equals("1")){// check box 선택된 제품														String paramKey = "version!%!seq!%!src_loc!%!item_id!%!base_stk_box!%!add_stk_box!%!prod_box";						String paramCode = p_version + "!%!" + p_seq + "!%!"										 + p_src_loc + "!%!" + item_id + "!%!"										 + base_stk_box + "!%!" + add_stk_box + "!%!" + prod_box;						String queryId = "use_stock_check";												ArrayList<String> result = CommonUtil.getCodeList(paramKey, paramCode, queryId);												if( (result.size() > 0 && result.get(0).equals("T")) || p_src_loc.equals(src_loc)){// 가용재고 있을 경우 or 동일 출고장으로 합차 시킬경우										sql += "SELECT  'UP' AS CRUD, '" + rte + "' as RTE, '" + p_trans_date + "' AS TRANS_DATE, '" + old_trans_date + "' AS OLD_TRNAS_DATE, '" + p_src_loc + "' AS SRC_LOC, '" + p_truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + box_per_palet + "' AS BOX_PER_PALET, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, 'F' AS FLAG, '" + p_user_id + "' AS USER_ID FROM DUAL ";							sql += " union all \n";							sql += "SELECT  'DE' AS CRUD, '" + rte + "' as RTE, '" + trans_date + "' AS TRANS_DATE, '" + old_trans_date + "' AS OLD_TRNAS_DATE, '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + box_per_palet + "' AS BOX_PER_PALET, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, '' AS FLAG, '" + p_user_id + "' AS USER_ID FROM DUAL ";						}else{ // 가용재고가 부족할 경우							sql += "SELECT  '1' AS CRUD, '" + rte + "' as RTE, '" + trans_date + "' AS TRANS_DATE, '" + old_trans_date + "' AS OLD_TRNAS_DATE, '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + box_per_palet + "' AS BOX_PER_PALET, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, '' AS FLAG, '" + p_user_id + "' AS USER_ID FROM DUAL ";						}					}else if( trans_date.equals(p_trans_date) && src_loc.equals(p_src_loc) && truck_seq.equals(p_truck_seq)){// 합차 대상 차량 제품						sql += "SELECT  'UP' AS CRUD, '" + rte + "' as RTE, '" + trans_date + "' AS TRANS_DATE, '" + old_trans_date + "' AS OLD_TRNAS_DATE, '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + box_per_palet + "' AS BOX_PER_PALET, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, 'T' AS FLAG, '" + p_user_id + "' AS USER_ID FROM DUAL ";					}else{// 나머지	수정 안된 제품											sql += "SELECT  '' AS CRUD, '" + rte + "' AS RTE, '" + trans_date + "' AS TRANS_DATE, '" + old_trans_date + "' AS OLD_TRNAS_DATE, '" + src_loc + "' AS SRC_LOC, '" + truck_seq + "' AS TRUCK_SEQ, '" + item_id + "' AS ITEM_ID, '" + item_name + "' AS ITEM_NAME, NVL('" + base_stk_plt + "',0) AS BASE_STK_PLT, NVL('" + base_stk_box + "',0) AS BASE_STK_BOX, NVL('" + add_stk_plt + "',0) AS ADD_STK_PLT, NVL('" + add_stk_box + "',0) AS ADD_STK_BOX, NVL('" + prod_plt + "',0) AS PROD_PLT, NVL('" + prod_box + "',0) AS PROD_BOX, '" + box_per_palet + "' AS BOX_PER_PALET, NVL('" + plan_type + "','ZM1') AS PLAN_TYPE, 'T' AS FLAG, '" + p_user_id + "' AS USER_ID FROM DUAL ";					}									}											}					try{			conn = databaseUtility.getConnection("t3sinc"); // DB Connection			stmt = conn.createStatement(); // statement 객체 생성							System.out.println("-----------------------------------------------QUERY-----------------------------------------------");			System.out.println(sql);			System.out.println("-----------------------------------------------QUERY-----------------------------------------------");						System.out.println("executeQuery 실행!!!");						rs = databaseUtility.executeQuery(stmt, sql);						System.out.println("executeQuery 종료!!!");			gdRes.addParam("mode", "sumTruck");			gdRes.setMessage("성공적으로 작업하였습니다.");			gdRes.setStatus("true");								}catch (Exception e) {			throw e;		}finally {            databaseUtility.close(conn, stmt, rs);                      }		//////////////		System.out.println("doCreate() end!!!");		return gdRes;	}		// 합차 후 다시 조회	public GridData doQuerySumTruck(GridData gdReq) throws Exception {				GridData gdRes = new GridData();				int rowCount = 0;				//conn = databaseUtility.getConnection("t3sinc"); // DB Connection		//stmt = conn.createStatement(); // statement 객체 생성					gdRes = OperateGridData.cloneResponseGridData(gdReq);						System.out.println("getParam...");			String sort_type = gdReq.getParam("sort_type");			String sort_stock_day = gdReq.getParam("sort_stock_day");			String user_id = gdReq.getParam("user_id");			String tgt_loc = gdReq.getParam("tgt_loc");			String version = gdReq.getParam("version");						String paramKey = "sort_type!%!user_id!%!tgt_loc!%!version!%!sort_stock_day";			String paramCode = sort_type + "!%!" + user_id + "!%!" + tgt_loc + "!%!" + version + "!%!" + sort_stock_day;			String query_id = gdReq.getParam("query_id");			System.out.println("getSelQeury : " + query_id);			ArrayList<ArrayList<String>> qResult = new CommonUtil().getSelQeury(paramKey, paramCode, query_id);			rowCount = qResult.size();			// 			if (rowCount == 0) {				gdRes.addParam("mode", "searchSumTruck");				gdRes.setMessage("...");				gdRes.setStatus("true");				return gdRes;			}						/*출고 사업장 리스트를 추출하여 콤보리슽 생성*/			String query_id2 = "dc_id_and_short_name_list"; 			System.out.println("getSelQeury : " + query_id2);			ArrayList<ArrayList<String>> locList = new CommonUtil().getSelQeury("", "", query_id2);						int arrIdx = locList.size();						String[] locIdList = new String[arrIdx];			String[] locNameList = new String[arrIdx];						System.out.println("출고 사업장 콤보리슽 생성");			for ( int i = 0 ; i < arrIdx ; i++ ){				locIdList[i] = locList.get(i).get(0);   // 출고장 ID 콤보리스트 생성				locNameList[i] = locList.get(i).get(1); // 출고장 이름 콤보리스트 생성			}						System.out.println("출고 사업장 컬럼에 콤보리스트 set");			gdRes.getHeader("SRC_LOC").setComboValues(locNameList, locIdList );		//출고 사업장 콤보리스트 출고 사업장 컬럼에 set							        //그리드에 data input			System.out.println("그리드 객체에 Data Input");			for (int i = 0; i < rowCount; i++) { 								gdRes.getHeader("CRUD"			).addValue( qResult.get(i).get(17), "");				gdRes.getHeader("NO"			).addValue( i+1 + "", "");				gdRes.getHeader("SELECTED"		).addValue(qResult.get(i).get(17).equals("1")?"1":"0", "");                    				gdRes.getHeader("RTE"		    ).addValue(qResult.get(i).get(0 ), qResult.get(i).get(17)); 				gdRes.getHeader("TRANS_DATE"	).addValue(qResult.get(i).get(1 ), qResult.get(i).get(2 ));				//gdRes.getHeader("SRC_LOC"	  	).addValue(qResult.get(i).get(3 ), qResult.get(i).get(2 ));				gdRes.getHeader("SRC_LOC"	  	).addSelectedHiddenValue(qResult.get(i).get(3));				gdRes.getHeader("TRUCK_SEQ" 	).addValue(qResult.get(i).get(4 ), "");				gdRes.getHeader("ITEM_ID"		).addValue(qResult.get(i).get(5 ), "");				gdRes.getHeader("ITEM_NAME"    	).addValue(qResult.get(i).get(6 ), "");								gdRes.getHeader("SP01"    		).addValue("", "");								gdRes.getHeader("CUM_PLT" 		).addValue(qResult.get(i).get(7), "");				gdRes.getHeader("CUM_BOX" 		).addValue(qResult.get(i).get(8), "");				gdRes.getHeader("SP02"    		).addValue("", "");								gdRes.getHeader("BASE_STK_PLT" 	).addValue(qResult.get(i).get(9), "");				gdRes.getHeader("BASE_STK_BOX" 	).addValue(qResult.get(i).get(10), "");				gdRes.getHeader("SP03"    		).addValue("", "");								gdRes.getHeader("ADD_STK_PLT" 	).addValue(qResult.get(i).get(11), "");				gdRes.getHeader("ADD_STK_BOX" 	).addValue(qResult.get(i).get(12), "");				gdRes.getHeader("SP04"    		).addValue("", "");								gdRes.getHeader("PROD_PLT" 		).addValue(qResult.get(i).get(13), "");				gdRes.getHeader("PROD_BOX" 		).addValue(qResult.get(i).get(14), "");				gdRes.getHeader("BOX_PER_PALET" ).addValue(qResult.get(i).get(15), "");				gdRes.getHeader("PLAN_TYPE" 	).addValue(qResult.get(i).get(16), "");										}									try{			conn = databaseUtility.getConnection("t3sinc"); // DB Connection			stmt = conn.createStatement(); // statement 객체 생성			user_id = gdReq.getParam("user_id");						System.out.println("TP_SUM_TRUCK 테이블 삭제 시작!!");			String sql2 = "DELETE TP_SUM_TRUCK WHERE USER_ID = '" + user_id + "'";			System.out.println(sql2);			stmt.execute(sql2);			System.out.println("TP_SUM_TRUCK 테이블 삭제 종료!!");					/*			 * 화면에 전달할 파라미터를 설정한다. 메세지를 셋팅한다. Status를 설정한다			 */			System.out.println("화면에 전달할 파마미터 설정");			gdRes.addParam("mode", "searchSumTruck");			gdRes.setMessage("조회 완료");			gdRes.setStatus("true");								}catch (Exception e) {			throw e;		}finally {            databaseUtility.close(conn, stmt, rs);                      }				System.out.println("그리드 객체 return");				return gdRes;	}			// 자동 상차 조합 1	public GridData doRegen1(GridData gdReq) throws Exception {		System.out.println("doRegen() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq() 종료!!! - 결과 : " + result);		System.out.println("doRegen() end!!!");		return gdRes;			}		// 자동 상차 조합 2	public GridData doRegen2(GridData gdReq) throws Exception {		System.out.println("doRegen() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq3() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq3('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq3() 종료!!! - 결과 : " + result);		System.out.println("doRegen() end!!!");		return gdRes;			}	//자동상차 프로세스용	public GridData doRegen010(GridData gdReq) throws Exception {		System.out.println("doRegen_010() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_010() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_010('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_010() 종료!!! - 결과 : " + result);		System.out.println("doRegen_010() end!!!");		return gdRes;			}	public GridData doRegen020(GridData gdReq) throws Exception {		System.out.println("doRegen_020() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_020() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_020('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_020() 종료!!! - 결과 : " + result);		System.out.println("doRegen_020() end!!!");		return gdRes;			}	public GridData doRegen030(GridData gdReq) throws Exception {		System.out.println("doRegen_030() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_030() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_030('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_030() 종료!!! - 결과 : " + result);		System.out.println("doRegen_030() end!!!");		return gdRes;			}	public GridData doRegen040(GridData gdReq) throws Exception {		System.out.println("doRegen_040() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_040() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_040('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_040() 종료!!! - 결과 : " + result);		System.out.println("doRegen_040() end!!!");		return gdRes;			}	public GridData doRegen050(GridData gdReq) throws Exception {		System.out.println("doRegen_050() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_050() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_050('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_050() 종료!!! - 결과 : " + result);		System.out.println("doRegen_050() end!!!");		return gdRes;			}	public GridData doRegen090(GridData gdReq) throws Exception {		System.out.println("doRegen_090() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_090() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_090('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_090() 종료!!! - 결과 : " + result);		System.out.println("doRegen_090() end!!!");		return gdRes;			}	//////////////////////	public GridData doRegen100(GridData gdReq) throws Exception {		System.out.println("doRegen_100() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_100() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_100('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_100() 종료!!! - 결과 : " + result);		gdRes.addParam("mode", "Regen100");		gdRes.setStatus("true");		System.out.println("doRegen_100() end!!!");		return gdRes;			}	public GridData doRegen200(GridData gdReq) throws Exception {		System.out.println("doRegen_200() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_200() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_200('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_200() 종료!!! - 결과 : " + result);		gdRes.addParam("mode", "Regen200");		gdRes.setStatus("true");		System.out.println("doRegen_200() end!!!");		return gdRes;			}	public GridData doRegen300(GridData gdReq) throws Exception {		System.out.println("doRegen_300() start!!!");		GridData gdRes = new GridData(); // WiseGrid 객체생성		String version = gdReq.getParam("version");		String seq = gdReq.getParam("seq");		String trans_start = gdReq.getParam("trans_start");		String trans_end = gdReq.getParam("trans_end");		conn = databaseUtility.getConnection("t3sinc"); // DB Connection		stmt = conn.createStatement(); // statement 객체 생성				System.out.println("call sp_rp_regen_truck_seq_300() 실행!!!");		String sql2 = "call sp_rp_regen_truck_seq_300('" + version + "','" + seq + "','" + trans_start + "','" + trans_end + "')";		boolean result = stmt.execute(sql2);		System.out.println("call sp_rp_regen_truck_seq_300() 종료!!! - 결과 : " + result);		gdRes.addParam("mode", "Regen300");		gdRes.setStatus("true");		System.out.println("doRegen_300() end!!!");		return gdRes;			}				}